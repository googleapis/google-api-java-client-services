/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebasehosting.v1beta1;

/**
 * Service definition for FirebaseHosting (v1beta1).
 *
 * <p>
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://firebase.google.com/docs/hosting/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FirebaseHostingRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class FirebaseHosting extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Firebase Hosting API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://firebasehosting.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://firebasehosting.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public FirebaseHosting(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  FirebaseHosting(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
   *   {@code FirebaseHosting.Projects.List request = firebasehosting.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Operations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
     *   {@code FirebaseHosting.Operations.List request = firebasehosting.operations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Operations operations() {
      return new Operations();
    }

    /**
     * The "operations" collection of methods.
     */
    public class Operations {

      /**
       * Gets the latest state of a long-running operation. Clients can use this method to poll the
       * operation result at intervals as recommended by the API service.
       *
       * Create a request for the method "operations.get".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name The name of the operation resource.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Operation> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/operations/[^/]+$");

        /**
         * Gets the latest state of a long-running operation. Clients can use this method to poll the
         * operation result at intervals as recommended by the API service.
         *
         * Create a request for the method "operations.get".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the operation resource.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Operation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/operations/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** The name of the operation resource. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the operation resource.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The name of the operation resource. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/operations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Sites collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
     *   {@code FirebaseHosting.Sites.List request = firebasehosting.sites().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Sites sites() {
      return new Sites();
    }

    /**
     * The "sites" collection of methods.
     */
    public class Sites {

      /**
       * Creates a new Hosting Site in the specified parent Firebase project. Note that Hosting sites can
       * take several minutes to propagate through Firebase systems.
       *
       * Create a request for the method "sites.create".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The Firebase project in which to create a Hosting site, in the format:
       *        projects/PROJECT_IDENTIFIER Refer to the `Site` [`name`](../projects#Site.FIELDS.name)
       *        field for details about PROJECT_IDENTIFIER values.
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Site}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Site content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Site> {

        private static final String REST_PATH = "v1beta1/{+parent}/sites";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Creates a new Hosting Site in the specified parent Firebase project. Note that Hosting sites
         * can take several minutes to propagate through Firebase systems.
         *
         * Create a request for the method "sites.create".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The Firebase project in which to create a Hosting site, in the format:
       *        projects/PROJECT_IDENTIFIER Refer to the `Site` [`name`](../projects#Site.FIELDS.name)
       *        field for details about PROJECT_IDENTIFIER values.
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Site}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Site content) {
          super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Site.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The Firebase project in which to create a Hosting site, in the format:
         * projects/PROJECT_IDENTIFIER Refer to the `Site` [`name`](../projects#Site.FIELDS.name)
         * field for details about PROJECT_IDENTIFIER values.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The Firebase project in which to create a Hosting site, in the format:
       projects/PROJECT_IDENTIFIER Refer to the `Site` [`name`](../projects#Site.FIELDS.name) field for
       details about PROJECT_IDENTIFIER values.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The Firebase project in which to create a Hosting site, in the format:
         * projects/PROJECT_IDENTIFIER Refer to the `Site` [`name`](../projects#Site.FIELDS.name)
         * field for details about PROJECT_IDENTIFIER values.
         */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * Required. Immutable. A globally unique identifier for the Hosting site. This identifier
         * is used to construct the Firebase-provisioned subdomains for the site, so it must also be
         * a valid domain name label.
         */
        @com.google.api.client.util.Key
        private java.lang.String siteId;

        /** Required. Immutable. A globally unique identifier for the Hosting site. This identifier is used to
       construct the Firebase-provisioned subdomains for the site, so it must also be a valid domain name
       label.
         */
        public java.lang.String getSiteId() {
          return siteId;
        }

        /**
         * Required. Immutable. A globally unique identifier for the Hosting site. This identifier
         * is used to construct the Firebase-provisioned subdomains for the site, so it must also be
         * a valid domain name label.
         */
        public Create setSiteId(java.lang.String siteId) {
          this.siteId = siteId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes the specified Hosting Site from the specified parent Firebase project.
       *
       * Create a request for the method "sites.delete".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name Required. The fully-qualified resource name for the Hosting site, in the format:
       *        projects/PROJECT_IDENTIFIER/sites/SITE_ID Refer to the `Site`
       *        [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Empty> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+$");

        /**
         * Deletes the specified Hosting Site from the specified parent Firebase project.
         *
         * Create a request for the method "sites.delete".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The fully-qualified resource name for the Hosting site, in the format:
       *        projects/PROJECT_IDENTIFIER/sites/SITE_ID Refer to the `Site`
       *        [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(FirebaseHosting.this, "DELETE", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/sites/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The fully-qualified resource name for the Hosting site, in the format:
         * projects/PROJECT_IDENTIFIER/sites/SITE_ID Refer to the `Site`
         * [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The fully-qualified resource name for the Hosting site, in the format:
       projects/PROJECT_IDENTIFIER/sites/SITE_ID Refer to the `Site`
       [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The fully-qualified resource name for the Hosting site, in the format:
         * projects/PROJECT_IDENTIFIER/sites/SITE_ID Refer to the `Site`
         * [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
         */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/sites/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Gets the specified Hosting Site.
       *
       * Create a request for the method "sites.get".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. The fully-qualified resource name for the Hosting site, in the format:
       *        projects/PROJECT_IDENTIFIER/sites/SITE_ID Refer to the `Site`
       *        [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
       *        Since a SITE_ID is a globally unique identifier, you can also use the unique sub-
       *        collection resource access pattern, in the format: projects/-/sites/SITE_ID
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Site> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+$");

        /**
         * Gets the specified Hosting Site.
         *
         * Create a request for the method "sites.get".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The fully-qualified resource name for the Hosting site, in the format:
       *        projects/PROJECT_IDENTIFIER/sites/SITE_ID Refer to the `Site`
       *        [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
       *        Since a SITE_ID is a globally unique identifier, you can also use the unique sub-
       *        collection resource access pattern, in the format: projects/-/sites/SITE_ID
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Site.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/sites/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The fully-qualified resource name for the Hosting site, in the format:
         * projects/PROJECT_IDENTIFIER/sites/SITE_ID Refer to the `Site`
         * [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
         * Since a SITE_ID is a globally unique identifier, you can also use the unique sub-
         * collection resource access pattern, in the format: projects/-/sites/SITE_ID
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The fully-qualified resource name for the Hosting site, in the format:
       projects/PROJECT_IDENTIFIER/sites/SITE_ID Refer to the `Site`
       [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values. Since a
       SITE_ID is a globally unique identifier, you can also use the unique sub-collection resource access
       pattern, in the format: projects/-/sites/SITE_ID
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The fully-qualified resource name for the Hosting site, in the format:
         * projects/PROJECT_IDENTIFIER/sites/SITE_ID Refer to the `Site`
         * [`name`](../projects#Site.FIELDS.name) field for details about PROJECT_IDENTIFIER values.
         * Since a SITE_ID is a globally unique identifier, you can also use the unique sub-
         * collection resource access pattern, in the format: projects/-/sites/SITE_ID
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/sites/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Gets the Hosting metadata for a specific site.
       *
       * Create a request for the method "sites.getConfig".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link GetConfig#execute()} method to invoke the remote operation.
       *
       * @param name Required. The site for which to get the SiteConfig, in the format: sites/ site-name/config
       * @return the request
       */
      public GetConfig getConfig(java.lang.String name) throws java.io.IOException {
        GetConfig result = new GetConfig(name);
        initialize(result);
        return result;
      }

      public class GetConfig extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.SiteConfig> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/config$");

        /**
         * Gets the Hosting metadata for a specific site.
         *
         * Create a request for the method "sites.getConfig".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link GetConfig#execute()} method to invoke the remote
         * operation. <p> {@link
         * GetConfig#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The site for which to get the SiteConfig, in the format: sites/ site-name/config
         * @since 1.13
         */
        protected GetConfig(java.lang.String name) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.SiteConfig.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/sites/[^/]+/config$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public GetConfig set$Xgafv(java.lang.String $Xgafv) {
          return (GetConfig) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetConfig setAccessToken(java.lang.String accessToken) {
          return (GetConfig) super.setAccessToken(accessToken);
        }

        @Override
        public GetConfig setAlt(java.lang.String alt) {
          return (GetConfig) super.setAlt(alt);
        }

        @Override
        public GetConfig setCallback(java.lang.String callback) {
          return (GetConfig) super.setCallback(callback);
        }

        @Override
        public GetConfig setFields(java.lang.String fields) {
          return (GetConfig) super.setFields(fields);
        }

        @Override
        public GetConfig setKey(java.lang.String key) {
          return (GetConfig) super.setKey(key);
        }

        @Override
        public GetConfig setOauthToken(java.lang.String oauthToken) {
          return (GetConfig) super.setOauthToken(oauthToken);
        }

        @Override
        public GetConfig setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetConfig) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetConfig setQuotaUser(java.lang.String quotaUser) {
          return (GetConfig) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetConfig setUploadType(java.lang.String uploadType) {
          return (GetConfig) super.setUploadType(uploadType);
        }

        @Override
        public GetConfig setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetConfig) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The site for which to get the SiteConfig, in the format: sites/ site-
         * name/config
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The site for which to get the SiteConfig, in the format: sites/ site-name/config
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The site for which to get the SiteConfig, in the format: sites/ site-
         * name/config
         */
        public GetConfig setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/sites/[^/]+/config$");
          }
          this.name = name;
          return this;
        }

        @Override
        public GetConfig set(String parameterName, Object value) {
          return (GetConfig) super.set(parameterName, value);
        }
      }
      /**
       * Lists each Hosting Site associated with the specified parent Firebase project.
       *
       * Create a request for the method "sites.list".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The Firebase project for which to list sites, in the format: projects/PROJECT_IDENTIFIER
       *        Refer to the `Site` [`name`](../projects#Site.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListSitesResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/sites";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists each Hosting Site associated with the specified parent Firebase project.
         *
         * Create a request for the method "sites.list".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The Firebase project for which to list sites, in the format: projects/PROJECT_IDENTIFIER
       *        Refer to the `Site` [`name`](../projects#Site.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListSitesResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The Firebase project for which to list sites, in the format:
         * projects/PROJECT_IDENTIFIER Refer to the `Site` [`name`](../projects#Site.FIELDS.name)
         * field for details about PROJECT_IDENTIFIER values.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The Firebase project for which to list sites, in the format: projects/PROJECT_IDENTIFIER
       Refer to the `Site` [`name`](../projects#Site.FIELDS.name) field for details about
       PROJECT_IDENTIFIER values.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The Firebase project for which to list sites, in the format:
         * projects/PROJECT_IDENTIFIER Refer to the `Site` [`name`](../projects#Site.FIELDS.name)
         * field for details about PROJECT_IDENTIFIER values.
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * Optional. The maximum number of sites to return. The service may return a lower number if
         * fewer sites exist than this maximum number. If unspecified, defaults to 40.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Optional. The maximum number of sites to return. The service may return a lower number if fewer
       sites exist than this maximum number. If unspecified, defaults to 40.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Optional. The maximum number of sites to return. The service may return a lower number if
         * fewer sites exist than this maximum number. If unspecified, defaults to 40.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * Optional. A token from a previous call to `ListSites` that tells the server where to
         * resume listing.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Optional. A token from a previous call to `ListSites` that tells the server where to resume
       listing.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * Optional. A token from a previous call to `ListSites` that tells the server where to
         * resume listing.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates attributes of the specified Hosting Site.
       *
       * Create a request for the method "sites.patch".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name Output only. The fully-qualified resource name of the Hosting site, in the format:
       *        projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's
       *        [`ProjectNumber`](https://firebase.google.com/docs/reference/firebase-
       *        management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
       *        ***(recommended)*** or its [`ProjectId`](https://firebase.google.com/docs/reference
       *        /firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id). Learn more
       *        about using project identifiers in Google's [AIP 2510
       *        standard](https://google.aip.dev/cloud/2510).
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Site}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Site content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Site> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+$");

        /**
         * Updates attributes of the specified Hosting Site.
         *
         * Create a request for the method "sites.patch".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Output only. The fully-qualified resource name of the Hosting site, in the format:
       *        projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's
       *        [`ProjectNumber`](https://firebase.google.com/docs/reference/firebase-
       *        management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
       *        ***(recommended)*** or its [`ProjectId`](https://firebase.google.com/docs/reference
       *        /firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id). Learn more
       *        about using project identifiers in Google's [AIP 2510
       *        standard](https://google.aip.dev/cloud/2510).
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Site}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Site content) {
          super(FirebaseHosting.this, "PATCH", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Site.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/sites/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Output only. The fully-qualified resource name of the Hosting site, in the format:
         * projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's
         * [`ProjectNumber`](https://firebase.google.com/docs/reference/firebase-
         * management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
         * ***(recommended)*** or its [`ProjectId`](https://firebase.google.com/docs/reference
         * /firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id). Learn more
         * about using project identifiers in Google's [AIP 2510
         * standard](https://google.aip.dev/cloud/2510).
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Output only. The fully-qualified resource name of the Hosting site, in the format:
       projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's
       [`ProjectNumber`](https://firebase.google.com/docs/reference/firebase-
       management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its
       [`ProjectId`](https://firebase.google.com/docs/reference/firebase-
       management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id). Learn more about using project
       identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Output only. The fully-qualified resource name of the Hosting site, in the format:
         * projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's
         * [`ProjectNumber`](https://firebase.google.com/docs/reference/firebase-
         * management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number)
         * ***(recommended)*** or its [`ProjectId`](https://firebase.google.com/docs/reference
         * /firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id). Learn more
         * about using project identifiers in Google's [AIP 2510
         * standard](https://google.aip.dev/cloud/2510).
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/sites/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** A set of field names from your Site that you want to update. */
        @com.google.api.client.util.Key
        private String updateMask;

        /** A set of field names from your Site that you want to update.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /** A set of field names from your Site that you want to update. */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }
      /**
       * Sets the Hosting metadata for a specific site.
       *
       * Create a request for the method "sites.updateConfig".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link UpdateConfig#execute()} method to invoke the remote
       * operation.
       *
       * @param name Required. The site for which to update the SiteConfig, in the format: sites/ site-name/config
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.SiteConfig}
       * @return the request
       */
      public UpdateConfig updateConfig(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.SiteConfig content) throws java.io.IOException {
        UpdateConfig result = new UpdateConfig(name, content);
        initialize(result);
        return result;
      }

      public class UpdateConfig extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.SiteConfig> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/config$");

        /**
         * Sets the Hosting metadata for a specific site.
         *
         * Create a request for the method "sites.updateConfig".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link UpdateConfig#execute()} method to invoke the remote
         * operation. <p> {@link
         * UpdateConfig#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The site for which to update the SiteConfig, in the format: sites/ site-name/config
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.SiteConfig}
         * @since 1.13
         */
        protected UpdateConfig(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.SiteConfig content) {
          super(FirebaseHosting.this, "PATCH", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.SiteConfig.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/sites/[^/]+/config$");
          }
        }

        @Override
        public UpdateConfig set$Xgafv(java.lang.String $Xgafv) {
          return (UpdateConfig) super.set$Xgafv($Xgafv);
        }

        @Override
        public UpdateConfig setAccessToken(java.lang.String accessToken) {
          return (UpdateConfig) super.setAccessToken(accessToken);
        }

        @Override
        public UpdateConfig setAlt(java.lang.String alt) {
          return (UpdateConfig) super.setAlt(alt);
        }

        @Override
        public UpdateConfig setCallback(java.lang.String callback) {
          return (UpdateConfig) super.setCallback(callback);
        }

        @Override
        public UpdateConfig setFields(java.lang.String fields) {
          return (UpdateConfig) super.setFields(fields);
        }

        @Override
        public UpdateConfig setKey(java.lang.String key) {
          return (UpdateConfig) super.setKey(key);
        }

        @Override
        public UpdateConfig setOauthToken(java.lang.String oauthToken) {
          return (UpdateConfig) super.setOauthToken(oauthToken);
        }

        @Override
        public UpdateConfig setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (UpdateConfig) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public UpdateConfig setQuotaUser(java.lang.String quotaUser) {
          return (UpdateConfig) super.setQuotaUser(quotaUser);
        }

        @Override
        public UpdateConfig setUploadType(java.lang.String uploadType) {
          return (UpdateConfig) super.setUploadType(uploadType);
        }

        @Override
        public UpdateConfig setUploadProtocol(java.lang.String uploadProtocol) {
          return (UpdateConfig) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The site for which to update the SiteConfig, in the format: sites/ site-
         * name/config
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The site for which to update the SiteConfig, in the format: sites/ site-name/config
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The site for which to update the SiteConfig, in the format: sites/ site-
         * name/config
         */
        public UpdateConfig setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/sites/[^/]+/config$");
          }
          this.name = name;
          return this;
        }

        /**
         * A set of field names from your [site configuration](../sites.SiteConfig) that you want to
         * update. A field will be overwritten if, and only if, it's in the mask. If a mask is not
         * provided then a default mask of only [`max_versions`](../sites.SiteConfig.max_versions)
         * will be used.
         */
        @com.google.api.client.util.Key
        private String updateMask;

        /** A set of field names from your [site configuration](../sites.SiteConfig) that you want to update. A
       field will be overwritten if, and only if, it's in the mask. If a mask is not provided then a
       default mask of only [`max_versions`](../sites.SiteConfig.max_versions) will be used.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /**
         * A set of field names from your [site configuration](../sites.SiteConfig) that you want to
         * update. A field will be overwritten if, and only if, it's in the mask. If a mask is not
         * provided then a default mask of only [`max_versions`](../sites.SiteConfig.max_versions)
         * will be used.
         */
        public UpdateConfig setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public UpdateConfig set(String parameterName, Object value) {
          return (UpdateConfig) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Channels collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
       *   {@code FirebaseHosting.Channels.List request = firebasehosting.channels().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Channels channels() {
        return new Channels();
      }

      /**
       * The "channels" collection of methods.
       */
      public class Channels {

        /**
         * Creates a new channel in the specified site.
         *
         * Create a request for the method "channels.create".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The site in which to create this channel, in the format: sites/ SITE_ID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Channel}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Channel content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Channel> {

          private static final String REST_PATH = "v1beta1/{+parent}/channels";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+$");

          /**
           * Creates a new channel in the specified site.
           *
           * Create a request for the method "channels.create".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The site in which to create this channel, in the format: sites/ SITE_ID
           * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Channel}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Channel content) {
            super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Channel.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The site in which to create this channel, in the format: sites/ SITE_ID */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The site in which to create this channel, in the format: sites/ SITE_ID
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. The site in which to create this channel, in the format: sites/ SITE_ID */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Required. Immutable. A unique ID within the site that identifies the channel. */
          @com.google.api.client.util.Key
          private java.lang.String channelId;

          /** Required. Immutable. A unique ID within the site that identifies the channel.
           */
          public java.lang.String getChannelId() {
            return channelId;
          }

          /** Required. Immutable. A unique ID within the site that identifies the channel. */
          public Create setChannelId(java.lang.String channelId) {
            this.channelId = channelId;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes the specified channel of the specified site. The `live` channel cannot be deleted.
         *
         * Create a request for the method "channels.delete".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The fully-qualified resource name for the channel, in the format:
         *        sites/SITE_ID/channels/CHANNEL_ID
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Empty> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/channels/[^/]+$");

          /**
           * Deletes the specified channel of the specified site. The `live` channel cannot be deleted.
           *
           * Create a request for the method "channels.delete".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The fully-qualified resource name for the channel, in the format:
         *        sites/SITE_ID/channels/CHANNEL_ID
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(FirebaseHosting.this, "DELETE", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/channels/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The fully-qualified resource name for the channel, in the format:
           * sites/SITE_ID/channels/CHANNEL_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The fully-qualified resource name for the channel, in the format:
         sites/SITE_ID/channels/CHANNEL_ID
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The fully-qualified resource name for the channel, in the format:
           * sites/SITE_ID/channels/CHANNEL_ID
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/channels/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Retrieves information for the specified channel of the specified site.
         *
         * Create a request for the method "channels.get".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The fully-qualified resource name for the channel, in the format:
         *        sites/SITE_ID/channels/CHANNEL_ID
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Channel> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/channels/[^/]+$");

          /**
           * Retrieves information for the specified channel of the specified site.
           *
           * Create a request for the method "channels.get".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The fully-qualified resource name for the channel, in the format:
         *        sites/SITE_ID/channels/CHANNEL_ID
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Channel.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/channels/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The fully-qualified resource name for the channel, in the format:
           * sites/SITE_ID/channels/CHANNEL_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The fully-qualified resource name for the channel, in the format:
         sites/SITE_ID/channels/CHANNEL_ID
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The fully-qualified resource name for the channel, in the format:
           * sites/SITE_ID/channels/CHANNEL_ID
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/channels/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists the channels for the specified site. All sites have a default `live` channel.
         *
         * Create a request for the method "channels.list".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The site for which to list channels, in the format: sites/SITE_ID
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListChannelsResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}/channels";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+$");

          /**
           * Lists the channels for the specified site. All sites have a default `live` channel.
           *
           * Create a request for the method "channels.list".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The site for which to list channels, in the format: sites/SITE_ID
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListChannelsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The site for which to list channels, in the format: sites/SITE_ID */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The site for which to list channels, in the format: sites/SITE_ID
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. The site for which to list channels, in the format: sites/SITE_ID */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The maximum number of channels to return. The service may return a lower number if
           * fewer channels exist than this maximum number. If unspecified, defaults to 10. The
           * maximum value is 100; values above 100 will be coerced to 100.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of channels to return. The service may return a lower number if fewer channels
         exist than this maximum number. If unspecified, defaults to 10. The maximum value is 100; values
         above 100 will be coerced to 100.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * The maximum number of channels to return. The service may return a lower number if
           * fewer channels exist than this maximum number. If unspecified, defaults to 10. The
           * maximum value is 100; values above 100 will be coerced to 100.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * A token from a previous call to `ListChannels` that tells the server where to resume
           * listing.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** A token from a previous call to `ListChannels` that tells the server where to resume listing.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * A token from a previous call to `ListChannels` that tells the server where to resume
           * listing.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates information for the specified channel of the specified site. Implicitly creates the
         * channel if it doesn't already exist.
         *
         * Create a request for the method "channels.patch".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Channel}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Channel content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Channel> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/channels/[^/]+$");

          /**
           * Updates information for the specified channel of the specified site. Implicitly creates the
           * channel if it doesn't already exist.
           *
           * Create a request for the method "channels.patch".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID
           * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Channel}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Channel content) {
            super(FirebaseHosting.this, "PATCH", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Channel.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/channels/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The fully-qualified resource name for the channel, in the format: sites/
           * SITE_ID/channels/CHANNEL_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The fully-qualified resource name for the channel, in the format: sites/
         SITE_ID/channels/CHANNEL_ID
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The fully-qualified resource name for the channel, in the format: sites/
           * SITE_ID/channels/CHANNEL_ID
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/channels/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /** A comma-separated list of fields to be updated in this request. */
          @com.google.api.client.util.Key
          private String updateMask;

          /** A comma-separated list of fields to be updated in this request.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /** A comma-separated list of fields to be updated in this request. */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the Releases collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
         *   {@code FirebaseHosting.Releases.List request = firebasehosting.releases().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Releases releases() {
          return new Releases();
        }

        /**
         * The "releases" collection of methods.
         */
        public class Releases {

          /**
           * Creates a new release, which makes the content of the specified version actively display on the
           * appropriate URL(s).
           *
           * Create a request for the method "releases.create".
           *
           * This request holds the parameters needed by the firebasehosting server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The site or channel to which the release belongs, in either of the following formats: -
           *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Release}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Release content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Release> {

            private static final String REST_PATH = "v1beta1/{+parent}/releases";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/channels/[^/]+$");

            /**
             * Creates a new release, which makes the content of the specified version actively display on the
             * appropriate URL(s).
             *
             * Create a request for the method "releases.create".
             *
             * This request holds the parameters needed by the the firebasehosting server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             * <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The site or channel to which the release belongs, in either of the following formats: -
           *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
             * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Release}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Release content) {
              super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Release.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/sites/[^/]+/channels/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The site or channel to which the release belongs, in either of the
             * following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The site or channel to which the release belongs, in either of the following formats: -
           sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The site or channel to which the release belongs, in either of the
             * following formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/sites/[^/]+/channels/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * The unique identifier for a version, in the format: sites/SITE_ID/versions/
             * VERSION_ID The SITE_ID in this version identifier must match the SITE_ID in the
             * `parent` parameter. This query parameter must be empty if the `type` field in the
             * request body is `SITE_DISABLE`.
             */
            @com.google.api.client.util.Key
            private java.lang.String versionName;

            /**  The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID The SITE_ID
            in this version identifier must match the SITE_ID in the `parent` parameter. This query parameter
            must be empty if the `type` field in the request body is `SITE_DISABLE`.
             */
            public java.lang.String getVersionName() {
              return versionName;
            }

            /**
             * The unique identifier for a version, in the format: sites/SITE_ID/versions/
             * VERSION_ID The SITE_ID in this version identifier must match the SITE_ID in the
             * `parent` parameter. This query parameter must be empty if the `type` field in the
             * request body is `SITE_DISABLE`.
             */
            public Create setVersionName(java.lang.String versionName) {
              this.versionName = versionName;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Gets the specified release for a site or channel. When used to get a release for a site, this can
           * get releases for both the default `live` channel and any active preview channels for the
           * specified site.
           *
           * Create a request for the method "releases.get".
           *
           * This request holds the parameters needed by the firebasehosting server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The fully-qualified resource name for the Hosting release, in either of the following
           *        formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
           *        sites/SITE_ID/releases/RELEASE_ID
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Release> {

            private static final String REST_PATH = "v1beta1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/channels/[^/]+/releases/[^/]+$");

            /**
             * Gets the specified release for a site or channel. When used to get a release for a site, this
             * can get releases for both the default `live` channel and any active preview channels for the
             * specified site.
             *
             * Create a request for the method "releases.get".
             *
             * This request holds the parameters needed by the the firebasehosting server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The fully-qualified resource name for the Hosting release, in either of the following
           *        formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
           *        sites/SITE_ID/releases/RELEASE_ID
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Release.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/sites/[^/]+/channels/[^/]+/releases/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The fully-qualified resource name for the Hosting release, in either of the
             * following formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
             * sites/SITE_ID/releases/RELEASE_ID
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The fully-qualified resource name for the Hosting release, in either of the following
           formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
           sites/SITE_ID/releases/RELEASE_ID
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The fully-qualified resource name for the Hosting release, in either of the
             * following formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
             * sites/SITE_ID/releases/RELEASE_ID
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/sites/[^/]+/channels/[^/]+/releases/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists the releases that have been created for the specified site or channel. When used to list
           * releases for a site, this list includes releases for both the default `live` channel and any
           * active preview channels for the specified site.
           *
           * Create a request for the method "releases.list".
           *
           * This request holds the parameters needed by the firebasehosting server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The site or channel for which to list releases, in either of the following formats: -
           *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListReleasesResponse> {

            private static final String REST_PATH = "v1beta1/{+parent}/releases";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/channels/[^/]+$");

            /**
             * Lists the releases that have been created for the specified site or channel. When used to list
             * releases for a site, this list includes releases for both the default `live` channel and any
             * active preview channels for the specified site.
             *
             * Create a request for the method "releases.list".
             *
             * This request holds the parameters needed by the the firebasehosting server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The site or channel for which to list releases, in either of the following formats: -
           *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListReleasesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/sites/[^/]+/channels/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The site or channel for which to list releases, in either of the following
             * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The site or channel for which to list releases, in either of the following formats: -
           sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The site or channel for which to list releases, in either of the following
             * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/sites/[^/]+/channels/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * The maximum number of releases to return. The service may return a lower number if
             * fewer releases exist than this maximum number. If unspecified, defaults to 100.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of releases to return. The service may return a lower number if fewer releases
           exist than this maximum number. If unspecified, defaults to 100.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * The maximum number of releases to return. The service may return a lower number if
             * fewer releases exist than this maximum number. If unspecified, defaults to 100.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * A token from a previous call to `releases.list` or `channels.releases.list` that
             * tells the server where to resume listing.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** A token from a previous call to `releases.list` or `channels.releases.list` that tells the server
           where to resume listing.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * A token from a previous call to `releases.list` or `channels.releases.list` that
             * tells the server where to resume listing.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
      }
      /**
       * An accessor for creating requests from the Domains collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
       *   {@code FirebaseHosting.Domains.List request = firebasehosting.domains().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Domains domains() {
        return new Domains();
      }

      /**
       * The "domains" collection of methods.
       */
      public class Domains {

        /**
         * Creates a domain mapping on the specified site.
         *
         * Create a request for the method "domains.create".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent to create the domain association for, in the format: sites/site-name
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Domain}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Domain content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Domain> {

          private static final String REST_PATH = "v1beta1/{+parent}/domains";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+$");

          /**
           * Creates a domain mapping on the specified site.
           *
           * Create a request for the method "domains.create".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent to create the domain association for, in the format: sites/site-name
           * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Domain}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Domain content) {
            super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Domain.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The parent to create the domain association for, in the format: sites/site-
           * name
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent to create the domain association for, in the format: sites/site-name
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The parent to create the domain association for, in the format: sites/site-
           * name
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes the existing domain mapping on the specified site.
         *
         * Create a request for the method "domains.delete".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the domain association to delete.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Empty> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/domains/[^/]+$");

          /**
           * Deletes the existing domain mapping on the specified site.
           *
           * Create a request for the method "domains.delete".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the domain association to delete.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(FirebaseHosting.this, "DELETE", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/domains/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The name of the domain association to delete. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the domain association to delete.
           */
          public java.lang.String getName() {
            return name;
          }

          /** Required. The name of the domain association to delete. */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/domains/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets a domain mapping on the specified site.
         *
         * Create a request for the method "domains.get".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the domain configuration to get.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Domain> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/domains/[^/]+$");

          /**
           * Gets a domain mapping on the specified site.
           *
           * Create a request for the method "domains.get".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the domain configuration to get.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Domain.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/domains/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The name of the domain configuration to get. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the domain configuration to get.
           */
          public java.lang.String getName() {
            return name;
          }

          /** Required. The name of the domain configuration to get. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/domains/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists the domains for the specified site.
         *
         * Create a request for the method "domains.list".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The parent for which to list domains, in the format: sites/ site-name
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListDomainsResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}/domains";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+$");

          /**
           * Lists the domains for the specified site.
           *
           * Create a request for the method "domains.list".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The parent for which to list domains, in the format: sites/ site-name
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListDomainsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The parent for which to list domains, in the format: sites/ site-name */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The parent for which to list domains, in the format: sites/ site-name
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. The parent for which to list domains, in the format: sites/ site-name */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** The page size to return. Defaults to 50. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The page size to return. Defaults to 50.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The page size to return. Defaults to 50. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The next_page_token from a previous request, if provided. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The next_page_token from a previous request, if provided.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The next_page_token from a previous request, if provided. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates the specified domain mapping, creating the mapping as if it does not exist.
         *
         * Create a request for the method "domains.update".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the domain association to update or create, if an association doesn't already
         *        exist.
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Domain}
         * @return the request
         */
        public Update update(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Domain content) throws java.io.IOException {
          Update result = new Update(name, content);
          initialize(result);
          return result;
        }

        public class Update extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Domain> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/domains/[^/]+$");

          /**
           * Updates the specified domain mapping, creating the mapping as if it does not exist.
           *
           * Create a request for the method "domains.update".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
           * <p> {@link
           * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the domain association to update or create, if an association doesn't already
         *        exist.
           * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Domain}
           * @since 1.13
           */
          protected Update(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Domain content) {
            super(FirebaseHosting.this, "PUT", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Domain.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/domains/[^/]+$");
            }
          }

          @Override
          public Update set$Xgafv(java.lang.String $Xgafv) {
            return (Update) super.set$Xgafv($Xgafv);
          }

          @Override
          public Update setAccessToken(java.lang.String accessToken) {
            return (Update) super.setAccessToken(accessToken);
          }

          @Override
          public Update setAlt(java.lang.String alt) {
            return (Update) super.setAlt(alt);
          }

          @Override
          public Update setCallback(java.lang.String callback) {
            return (Update) super.setCallback(callback);
          }

          @Override
          public Update setFields(java.lang.String fields) {
            return (Update) super.setFields(fields);
          }

          @Override
          public Update setKey(java.lang.String key) {
            return (Update) super.setKey(key);
          }

          @Override
          public Update setOauthToken(java.lang.String oauthToken) {
            return (Update) super.setOauthToken(oauthToken);
          }

          @Override
          public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Update) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Update setQuotaUser(java.lang.String quotaUser) {
            return (Update) super.setQuotaUser(quotaUser);
          }

          @Override
          public Update setUploadType(java.lang.String uploadType) {
            return (Update) super.setUploadType(uploadType);
          }

          @Override
          public Update setUploadProtocol(java.lang.String uploadProtocol) {
            return (Update) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the domain association to update or create, if an association
           * doesn't already exist.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the domain association to update or create, if an association doesn't already
         exist.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the domain association to update or create, if an association
           * doesn't already exist.
           */
          public Update setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/domains/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Update set(String parameterName, Object value) {
            return (Update) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the Releases collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
       *   {@code FirebaseHosting.Releases.List request = firebasehosting.releases().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Releases releases() {
        return new Releases();
      }

      /**
       * The "releases" collection of methods.
       */
      public class Releases {

        /**
         * Creates a new release, which makes the content of the specified version actively display on the
         * appropriate URL(s).
         *
         * Create a request for the method "releases.create".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The site or channel to which the release belongs, in either of the following formats: -
         *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Release}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Release content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Release> {

          private static final String REST_PATH = "v1beta1/{+parent}/releases";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+$");

          /**
           * Creates a new release, which makes the content of the specified version actively display on the
           * appropriate URL(s).
           *
           * Create a request for the method "releases.create".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The site or channel to which the release belongs, in either of the following formats: -
         *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Release}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Release content) {
            super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Release.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The site or channel to which the release belongs, in either of the following
           * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The site or channel to which the release belongs, in either of the following formats: -
         sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The site or channel to which the release belongs, in either of the following
           * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID
           * The SITE_ID in this version identifier must match the SITE_ID in the `parent`
           * parameter. This query parameter must be empty if the `type` field in the request body
           * is `SITE_DISABLE`.
           */
          @com.google.api.client.util.Key
          private java.lang.String versionName;

          /**  The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID The SITE_ID
          in this version identifier must match the SITE_ID in the `parent` parameter. This query parameter
          must be empty if the `type` field in the request body is `SITE_DISABLE`.
           */
          public java.lang.String getVersionName() {
            return versionName;
          }

          /**
           * The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID
           * The SITE_ID in this version identifier must match the SITE_ID in the `parent`
           * parameter. This query parameter must be empty if the `type` field in the request body
           * is `SITE_DISABLE`.
           */
          public Create setVersionName(java.lang.String versionName) {
            this.versionName = versionName;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Gets the specified release for a site or channel. When used to get a release for a site, this can
         * get releases for both the default `live` channel and any active preview channels for the
         * specified site.
         *
         * Create a request for the method "releases.get".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The fully-qualified resource name for the Hosting release, in either of the following
         *        formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
         *        sites/SITE_ID/releases/RELEASE_ID
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Release> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/releases/[^/]+$");

          /**
           * Gets the specified release for a site or channel. When used to get a release for a site, this
           * can get releases for both the default `live` channel and any active preview channels for the
           * specified site.
           *
           * Create a request for the method "releases.get".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The fully-qualified resource name for the Hosting release, in either of the following
         *        formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
         *        sites/SITE_ID/releases/RELEASE_ID
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Release.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/releases/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The fully-qualified resource name for the Hosting release, in either of the
           * following formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
           * sites/SITE_ID/releases/RELEASE_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The fully-qualified resource name for the Hosting release, in either of the following
         formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
         sites/SITE_ID/releases/RELEASE_ID
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The fully-qualified resource name for the Hosting release, in either of the
           * following formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
           * sites/SITE_ID/releases/RELEASE_ID
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/releases/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists the releases that have been created for the specified site or channel. When used to list
         * releases for a site, this list includes releases for both the default `live` channel and any
         * active preview channels for the specified site.
         *
         * Create a request for the method "releases.list".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The site or channel for which to list releases, in either of the following formats: -
         *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListReleasesResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}/releases";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+$");

          /**
           * Lists the releases that have been created for the specified site or channel. When used to list
           * releases for a site, this list includes releases for both the default `live` channel and any
           * active preview channels for the specified site.
           *
           * Create a request for the method "releases.list".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The site or channel for which to list releases, in either of the following formats: -
         *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListReleasesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The site or channel for which to list releases, in either of the following
           * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The site or channel for which to list releases, in either of the following formats: -
         sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The site or channel for which to list releases, in either of the following
           * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The maximum number of releases to return. The service may return a lower number if
           * fewer releases exist than this maximum number. If unspecified, defaults to 100.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of releases to return. The service may return a lower number if fewer releases
         exist than this maximum number. If unspecified, defaults to 100.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * The maximum number of releases to return. The service may return a lower number if
           * fewer releases exist than this maximum number. If unspecified, defaults to 100.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * A token from a previous call to `releases.list` or `channels.releases.list` that tells
           * the server where to resume listing.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** A token from a previous call to `releases.list` or `channels.releases.list` that tells the server
         where to resume listing.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * A token from a previous call to `releases.list` or `channels.releases.list` that tells
           * the server where to resume listing.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the Versions collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
       *   {@code FirebaseHosting.Versions.List request = firebasehosting.versions().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Versions versions() {
        return new Versions();
      }

      /**
       * The "versions" collection of methods.
       */
      public class Versions {

        /**
         * Creates a new version on the specified target site using the content of the specified version.
         *
         * Create a request for the method "versions.clone".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Clone#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The target site for the cloned version, in the format: sites/ SITE_ID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.CloneVersionRequest}
         * @return the request
         */
        public Clone clone(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.CloneVersionRequest content) throws java.io.IOException {
          Clone result = new Clone(parent, content);
          initialize(result);
          return result;
        }

        public class Clone extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Operation> {

          private static final String REST_PATH = "v1beta1/{+parent}/versions:clone";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+$");

          /**
           * Creates a new version on the specified target site using the content of the specified version.
           *
           * Create a request for the method "versions.clone".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Clone#execute()} method to invoke the remote operation.
           * <p> {@link
           * Clone#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The target site for the cloned version, in the format: sites/ SITE_ID
           * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.CloneVersionRequest}
           * @since 1.13
           */
          protected Clone(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.CloneVersionRequest content) {
            super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
          }

          @Override
          public Clone set$Xgafv(java.lang.String $Xgafv) {
            return (Clone) super.set$Xgafv($Xgafv);
          }

          @Override
          public Clone setAccessToken(java.lang.String accessToken) {
            return (Clone) super.setAccessToken(accessToken);
          }

          @Override
          public Clone setAlt(java.lang.String alt) {
            return (Clone) super.setAlt(alt);
          }

          @Override
          public Clone setCallback(java.lang.String callback) {
            return (Clone) super.setCallback(callback);
          }

          @Override
          public Clone setFields(java.lang.String fields) {
            return (Clone) super.setFields(fields);
          }

          @Override
          public Clone setKey(java.lang.String key) {
            return (Clone) super.setKey(key);
          }

          @Override
          public Clone setOauthToken(java.lang.String oauthToken) {
            return (Clone) super.setOauthToken(oauthToken);
          }

          @Override
          public Clone setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Clone) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Clone setQuotaUser(java.lang.String quotaUser) {
            return (Clone) super.setQuotaUser(quotaUser);
          }

          @Override
          public Clone setUploadType(java.lang.String uploadType) {
            return (Clone) super.setUploadType(uploadType);
          }

          @Override
          public Clone setUploadProtocol(java.lang.String uploadProtocol) {
            return (Clone) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The target site for the cloned version, in the format: sites/ SITE_ID */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The target site for the cloned version, in the format: sites/ SITE_ID
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. The target site for the cloned version, in the format: sites/ SITE_ID */
          public Clone setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Clone set(String parameterName, Object value) {
            return (Clone) super.set(parameterName, value);
          }
        }
        /**
         * Creates a new version for the specified site.
         *
         * Create a request for the method "versions.create".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The site in which to create the version, in the format: sites/ SITE_ID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Version}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Version content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Version> {

          private static final String REST_PATH = "v1beta1/{+parent}/versions";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+$");

          /**
           * Creates a new version for the specified site.
           *
           * Create a request for the method "versions.create".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The site in which to create the version, in the format: sites/ SITE_ID
           * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Version}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Version content) {
            super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Version.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The site in which to create the version, in the format: sites/ SITE_ID */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The site in which to create the version, in the format: sites/ SITE_ID
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. The site in which to create the version, in the format: sites/ SITE_ID */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The self-reported size of the version. This value is used for a pre-emptive quota check
           * for legacy version uploads.
           */
          @com.google.api.client.util.Key
          private java.lang.Long sizeBytes;

          /** The self-reported size of the version. This value is used for a pre-emptive quota check for legacy
         version uploads.
           */
          public java.lang.Long getSizeBytes() {
            return sizeBytes;
          }

          /**
           * The self-reported size of the version. This value is used for a pre-emptive quota check
           * for legacy version uploads.
           */
          public Create setSizeBytes(java.lang.Long sizeBytes) {
            this.sizeBytes = sizeBytes;
            return this;
          }

          /**
           * A unique id for the new version. This is was only specified for legacy version
           * creations, and should be blank.
           */
          @com.google.api.client.util.Key
          private java.lang.String versionId;

          /** A unique id for the new version. This is was only specified for legacy version creations, and
         should be blank.
           */
          public java.lang.String getVersionId() {
            return versionId;
          }

          /**
           * A unique id for the new version. This is was only specified for legacy version
           * creations, and should be blank.
           */
          public Create setVersionId(java.lang.String versionId) {
            this.versionId = versionId;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes the specified version.
         *
         * Create a request for the method "versions.delete".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The fully-qualified resource name for the version, in the format:
         *        sites/SITE_ID/versions/VERSION_ID
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Empty> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/versions/[^/]+$");

          /**
           * Deletes the specified version.
           *
           * Create a request for the method "versions.delete".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The fully-qualified resource name for the version, in the format:
         *        sites/SITE_ID/versions/VERSION_ID
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(FirebaseHosting.this, "DELETE", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/versions/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The fully-qualified resource name for the version, in the format:
           * sites/SITE_ID/versions/VERSION_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The fully-qualified resource name for the version, in the format:
         sites/SITE_ID/versions/VERSION_ID
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The fully-qualified resource name for the version, in the format:
           * sites/SITE_ID/versions/VERSION_ID
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/versions/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Get the specified version that has been created for the specified site. This can include versions
         * that were created for the default `live` channel or for any active preview channels for the
         * specified site.
         *
         * Create a request for the method "versions.get".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The fully-qualified resource name for the version, in the format:
         *        sites/SITE_ID/versions/VERSION_ID
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Version> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/versions/[^/]+$");

          /**
           * Get the specified version that has been created for the specified site. This can include
           * versions that were created for the default `live` channel or for any active preview channels
           * for the specified site.
           *
           * Create a request for the method "versions.get".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The fully-qualified resource name for the version, in the format:
         *        sites/SITE_ID/versions/VERSION_ID
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Version.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/versions/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The fully-qualified resource name for the version, in the format:
           * sites/SITE_ID/versions/VERSION_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The fully-qualified resource name for the version, in the format:
         sites/SITE_ID/versions/VERSION_ID
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The fully-qualified resource name for the version, in the format:
           * sites/SITE_ID/versions/VERSION_ID
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/versions/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists the versions that have been created for the specified site. This list includes versions for
         * both the default `live` channel and any active preview channels for the specified site.
         *
         * Create a request for the method "versions.list".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The site or channel for which to list versions, in either of the following formats: -
         *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListVersionsResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}/versions";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+$");

          /**
           * Lists the versions that have been created for the specified site. This list includes versions
           * for both the default `live` channel and any active preview channels for the specified site.
           *
           * Create a request for the method "versions.list".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The site or channel for which to list versions, in either of the following formats: -
         *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListVersionsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The site or channel for which to list versions, in either of the following
           * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The site or channel for which to list versions, in either of the following formats: -
         sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The site or channel for which to list versions, in either of the following
           * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * A filter string used to return a subset of versions in the response. The currently
           * supported fields for filtering are: `name`, `status`, and `create_time`. Learn more
           * about filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
           */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** A filter string used to return a subset of versions in the response. The currently supported fields
         for filtering are: `name`, `status`, and `create_time`. Learn more about filtering in Google's [AIP
         160 standard](https://google.aip.dev/160).
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /**
           * A filter string used to return a subset of versions in the response. The currently
           * supported fields for filtering are: `name`, `status`, and `create_time`. Learn more
           * about filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
           */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /**
           * The maximum number of versions to return. The service may return a lower number if
           * fewer versions exist than this maximum number. If unspecified, defaults to 25. The
           * maximum value is 100; values above 100 will be coerced to 100.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of versions to return. The service may return a lower number if fewer versions
         exist than this maximum number. If unspecified, defaults to 25. The maximum value is 100; values
         above 100 will be coerced to 100.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * The maximum number of versions to return. The service may return a lower number if
           * fewer versions exist than this maximum number. If unspecified, defaults to 25. The
           * maximum value is 100; values above 100 will be coerced to 100.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * A token from a previous call to `ListVersions` that tells the server where to resume
           * listing.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** A token from a previous call to `ListVersions` that tells the server where to resume listing.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * A token from a previous call to `ListVersions` that tells the server where to resume
           * listing.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates the specified metadata for the specified version. This method will fail with
         * `FAILED_PRECONDITION` in the event of an invalid state transition. The supported
         * [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to
         * `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`.
         *
         * Create a request for the method "versions.patch".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID
         *        This name is provided in the response body when you call
         *        [`CreateVersion`](sites.versions/create).
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Version}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Version content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Version> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/versions/[^/]+$");

          /**
           * Updates the specified metadata for the specified version. This method will fail with
           * `FAILED_PRECONDITION` in the event of an invalid state transition. The supported
           * [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to
           * `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`.
           *
           * Create a request for the method "versions.patch".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID
         *        This name is provided in the response body when you call
         *        [`CreateVersion`](sites.versions/create).
           * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Version}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Version content) {
            super(FirebaseHosting.this, "PATCH", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Version.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/versions/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The fully-qualified resource name for the version, in the format: sites/
           * SITE_ID/versions/VERSION_ID This name is provided in the response body when you call
           * [`CreateVersion`](sites.versions/create).
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The fully-qualified resource name for the version, in the format: sites/
         SITE_ID/versions/VERSION_ID This name is provided in the response body when you call
         [`CreateVersion`](sites.versions/create).
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The fully-qualified resource name for the version, in the format: sites/
           * SITE_ID/versions/VERSION_ID This name is provided in the response body when you call
           * [`CreateVersion`](sites.versions/create).
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/versions/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * A set of field names from your [version](../sites.versions) that you want to update. A
           * field will be overwritten if, and only if, it's in the mask. If a mask is not provided
           * then a default mask of only [`status`](../sites.versions#Version.FIELDS.status) will be
           * used.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** A set of field names from your [version](../sites.versions) that you want to update. A field will
         be overwritten if, and only if, it's in the mask. If a mask is not provided then a default mask of
         only [`status`](../sites.versions#Version.FIELDS.status) will be used.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * A set of field names from your [version](../sites.versions) that you want to update. A
           * field will be overwritten if, and only if, it's in the mask. If a mask is not provided
           * then a default mask of only [`status`](../sites.versions#Version.FIELDS.status) will be
           * used.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }
        /**
         * Adds content files to the specified version. Each file must be under 2 GB.
         *
         * Create a request for the method "versions.populateFiles".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link PopulateFiles#execute()} method to invoke the remote
         * operation.
         *
         * @param parent Required. The version to which to add files, in the format: sites/SITE_ID /versions/VERSION_ID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesRequest}
         * @return the request
         */
        public PopulateFiles populateFiles(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesRequest content) throws java.io.IOException {
          PopulateFiles result = new PopulateFiles(parent, content);
          initialize(result);
          return result;
        }

        public class PopulateFiles extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}:populateFiles";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/versions/[^/]+$");

          /**
           * Adds content files to the specified version. Each file must be under 2 GB.
           *
           * Create a request for the method "versions.populateFiles".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link PopulateFiles#execute()} method to invoke the remote
           * operation. <p> {@link PopulateFiles#initialize(com.google.api.client.googleapis.services.Abstra
           * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
           * the constructor. </p>
           *
           * @param parent Required. The version to which to add files, in the format: sites/SITE_ID /versions/VERSION_ID
           * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesRequest}
           * @since 1.13
           */
          protected PopulateFiles(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesRequest content) {
            super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/versions/[^/]+$");
            }
          }

          @Override
          public PopulateFiles set$Xgafv(java.lang.String $Xgafv) {
            return (PopulateFiles) super.set$Xgafv($Xgafv);
          }

          @Override
          public PopulateFiles setAccessToken(java.lang.String accessToken) {
            return (PopulateFiles) super.setAccessToken(accessToken);
          }

          @Override
          public PopulateFiles setAlt(java.lang.String alt) {
            return (PopulateFiles) super.setAlt(alt);
          }

          @Override
          public PopulateFiles setCallback(java.lang.String callback) {
            return (PopulateFiles) super.setCallback(callback);
          }

          @Override
          public PopulateFiles setFields(java.lang.String fields) {
            return (PopulateFiles) super.setFields(fields);
          }

          @Override
          public PopulateFiles setKey(java.lang.String key) {
            return (PopulateFiles) super.setKey(key);
          }

          @Override
          public PopulateFiles setOauthToken(java.lang.String oauthToken) {
            return (PopulateFiles) super.setOauthToken(oauthToken);
          }

          @Override
          public PopulateFiles setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (PopulateFiles) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public PopulateFiles setQuotaUser(java.lang.String quotaUser) {
            return (PopulateFiles) super.setQuotaUser(quotaUser);
          }

          @Override
          public PopulateFiles setUploadType(java.lang.String uploadType) {
            return (PopulateFiles) super.setUploadType(uploadType);
          }

          @Override
          public PopulateFiles setUploadProtocol(java.lang.String uploadProtocol) {
            return (PopulateFiles) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The version to which to add files, in the format: sites/SITE_ID
           * /versions/VERSION_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The version to which to add files, in the format: sites/SITE_ID /versions/VERSION_ID
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The version to which to add files, in the format: sites/SITE_ID
           * /versions/VERSION_ID
           */
          public PopulateFiles setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/sites/[^/]+/versions/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public PopulateFiles set(String parameterName, Object value) {
            return (PopulateFiles) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the Files collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
         *   {@code FirebaseHosting.Files.List request = firebasehosting.files().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Files files() {
          return new Files();
        }

        /**
         * The "files" collection of methods.
         */
        public class Files {

          /**
           * Lists the remaining files to be uploaded for the specified version.
           *
           * Create a request for the method "files.list".
           *
           * This request holds the parameters needed by the firebasehosting server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The version for which to list files, in the format: sites/SITE_ID /versions/VERSION_ID
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListVersionFilesResponse> {

            private static final String REST_PATH = "v1beta1/{+parent}/files";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/sites/[^/]+/versions/[^/]+$");

            /**
             * Lists the remaining files to be uploaded for the specified version.
             *
             * Create a request for the method "files.list".
             *
             * This request holds the parameters needed by the the firebasehosting server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The version for which to list files, in the format: sites/SITE_ID /versions/VERSION_ID
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListVersionFilesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/sites/[^/]+/versions/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The version for which to list files, in the format: sites/SITE_ID
             * /versions/VERSION_ID
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The version for which to list files, in the format: sites/SITE_ID /versions/VERSION_ID
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The version for which to list files, in the format: sites/SITE_ID
             * /versions/VERSION_ID
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/sites/[^/]+/versions/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * The maximum number of version files to return. The service may return a lower number
             * if fewer version files exist than this maximum number. If unspecified, defaults to
             * 1000.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of version files to return. The service may return a lower number if fewer
           version files exist than this maximum number. If unspecified, defaults to 1000.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * The maximum number of version files to return. The service may return a lower number
             * if fewer version files exist than this maximum number. If unspecified, defaults to
             * 1000.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * A token from a previous call to `ListVersionFiles` that tells the server where to
             * resume listing.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** A token from a previous call to `ListVersionFiles` that tells the server where to resume listing.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * A token from a previous call to `ListVersionFiles` that tells the server where to
             * resume listing.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            /**  The type of files that should be listed for the specified version. */
            @com.google.api.client.util.Key
            private java.lang.String status;

            /**  The type of files that should be listed for the specified version.
             */
            public java.lang.String getStatus() {
              return status;
            }

            /**  The type of files that should be listed for the specified version. */
            public List setStatus(java.lang.String status) {
              this.status = status;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
      }
    }
  }

  /**
   * An accessor for creating requests from the Sites collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
   *   {@code FirebaseHosting.Sites.List request = firebasehosting.sites().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Sites sites() {
    return new Sites();
  }

  /**
   * The "sites" collection of methods.
   */
  public class Sites {

    /**
     * Gets the Hosting metadata for a specific site.
     *
     * Create a request for the method "sites.getConfig".
     *
     * This request holds the parameters needed by the firebasehosting server.  After setting any
     * optional parameters, call the {@link GetConfig#execute()} method to invoke the remote operation.
     *
     * @param name Required. The site for which to get the SiteConfig, in the format: sites/ site-name/config
     * @return the request
     */
    public GetConfig getConfig(java.lang.String name) throws java.io.IOException {
      GetConfig result = new GetConfig(name);
      initialize(result);
      return result;
    }

    public class GetConfig extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.SiteConfig> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^sites/[^/]+/config$");

      /**
       * Gets the Hosting metadata for a specific site.
       *
       * Create a request for the method "sites.getConfig".
       *
       * This request holds the parameters needed by the the firebasehosting server.  After setting any
       * optional parameters, call the {@link GetConfig#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetConfig#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The site for which to get the SiteConfig, in the format: sites/ site-name/config
       * @since 1.13
       */
      protected GetConfig(java.lang.String name) {
        super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.SiteConfig.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^sites/[^/]+/config$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetConfig set$Xgafv(java.lang.String $Xgafv) {
        return (GetConfig) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetConfig setAccessToken(java.lang.String accessToken) {
        return (GetConfig) super.setAccessToken(accessToken);
      }

      @Override
      public GetConfig setAlt(java.lang.String alt) {
        return (GetConfig) super.setAlt(alt);
      }

      @Override
      public GetConfig setCallback(java.lang.String callback) {
        return (GetConfig) super.setCallback(callback);
      }

      @Override
      public GetConfig setFields(java.lang.String fields) {
        return (GetConfig) super.setFields(fields);
      }

      @Override
      public GetConfig setKey(java.lang.String key) {
        return (GetConfig) super.setKey(key);
      }

      @Override
      public GetConfig setOauthToken(java.lang.String oauthToken) {
        return (GetConfig) super.setOauthToken(oauthToken);
      }

      @Override
      public GetConfig setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetConfig) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetConfig setQuotaUser(java.lang.String quotaUser) {
        return (GetConfig) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetConfig setUploadType(java.lang.String uploadType) {
        return (GetConfig) super.setUploadType(uploadType);
      }

      @Override
      public GetConfig setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetConfig) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The site for which to get the SiteConfig, in the format: sites/ site-name/config
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The site for which to get the SiteConfig, in the format: sites/ site-name/config
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The site for which to get the SiteConfig, in the format: sites/ site-name/config
       */
      public GetConfig setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^sites/[^/]+/config$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetConfig set(String parameterName, Object value) {
        return (GetConfig) super.set(parameterName, value);
      }
    }
    /**
     * Sets the Hosting metadata for a specific site.
     *
     * Create a request for the method "sites.updateConfig".
     *
     * This request holds the parameters needed by the firebasehosting server.  After setting any
     * optional parameters, call the {@link UpdateConfig#execute()} method to invoke the remote
     * operation.
     *
     * @param name Required. The site for which to update the SiteConfig, in the format: sites/ site-name/config
     * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.SiteConfig}
     * @return the request
     */
    public UpdateConfig updateConfig(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.SiteConfig content) throws java.io.IOException {
      UpdateConfig result = new UpdateConfig(name, content);
      initialize(result);
      return result;
    }

    public class UpdateConfig extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.SiteConfig> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^sites/[^/]+/config$");

      /**
       * Sets the Hosting metadata for a specific site.
       *
       * Create a request for the method "sites.updateConfig".
       *
       * This request holds the parameters needed by the the firebasehosting server.  After setting any
       * optional parameters, call the {@link UpdateConfig#execute()} method to invoke the remote
       * operation. <p> {@link
       * UpdateConfig#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The site for which to update the SiteConfig, in the format: sites/ site-name/config
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.SiteConfig}
       * @since 1.13
       */
      protected UpdateConfig(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.SiteConfig content) {
        super(FirebaseHosting.this, "PATCH", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.SiteConfig.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^sites/[^/]+/config$");
        }
      }

      @Override
      public UpdateConfig set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateConfig) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateConfig setAccessToken(java.lang.String accessToken) {
        return (UpdateConfig) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateConfig setAlt(java.lang.String alt) {
        return (UpdateConfig) super.setAlt(alt);
      }

      @Override
      public UpdateConfig setCallback(java.lang.String callback) {
        return (UpdateConfig) super.setCallback(callback);
      }

      @Override
      public UpdateConfig setFields(java.lang.String fields) {
        return (UpdateConfig) super.setFields(fields);
      }

      @Override
      public UpdateConfig setKey(java.lang.String key) {
        return (UpdateConfig) super.setKey(key);
      }

      @Override
      public UpdateConfig setOauthToken(java.lang.String oauthToken) {
        return (UpdateConfig) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateConfig setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateConfig) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateConfig setQuotaUser(java.lang.String quotaUser) {
        return (UpdateConfig) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateConfig setUploadType(java.lang.String uploadType) {
        return (UpdateConfig) super.setUploadType(uploadType);
      }

      @Override
      public UpdateConfig setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateConfig) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The site for which to update the SiteConfig, in the format: sites/ site-
       * name/config
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The site for which to update the SiteConfig, in the format: sites/ site-name/config
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The site for which to update the SiteConfig, in the format: sites/ site-
       * name/config
       */
      public UpdateConfig setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^sites/[^/]+/config$");
        }
        this.name = name;
        return this;
      }

      /**
       * A set of field names from your [site configuration](../sites.SiteConfig) that you want to
       * update. A field will be overwritten if, and only if, it's in the mask. If a mask is not
       * provided then a default mask of only [`max_versions`](../sites.SiteConfig.max_versions)
       * will be used.
       */
      @com.google.api.client.util.Key
      private String updateMask;

      /** A set of field names from your [site configuration](../sites.SiteConfig) that you want to update. A
     field will be overwritten if, and only if, it's in the mask. If a mask is not provided then a
     default mask of only [`max_versions`](../sites.SiteConfig.max_versions) will be used.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /**
       * A set of field names from your [site configuration](../sites.SiteConfig) that you want to
       * update. A field will be overwritten if, and only if, it's in the mask. If a mask is not
       * provided then a default mask of only [`max_versions`](../sites.SiteConfig.max_versions)
       * will be used.
       */
      public UpdateConfig setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateConfig set(String parameterName, Object value) {
        return (UpdateConfig) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Channels collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
     *   {@code FirebaseHosting.Channels.List request = firebasehosting.channels().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Channels channels() {
      return new Channels();
    }

    /**
     * The "channels" collection of methods.
     */
    public class Channels {

      /**
       * Creates a new channel in the specified site.
       *
       * Create a request for the method "channels.create".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The site in which to create this channel, in the format: sites/ SITE_ID
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Channel}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Channel content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Channel> {

        private static final String REST_PATH = "v1beta1/{+parent}/channels";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Creates a new channel in the specified site.
         *
         * Create a request for the method "channels.create".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The site in which to create this channel, in the format: sites/ SITE_ID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Channel}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Channel content) {
          super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Channel.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The site in which to create this channel, in the format: sites/ SITE_ID */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The site in which to create this channel, in the format: sites/ SITE_ID
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** Required. The site in which to create this channel, in the format: sites/ SITE_ID */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /** Required. Immutable. A unique ID within the site that identifies the channel. */
        @com.google.api.client.util.Key
        private java.lang.String channelId;

        /** Required. Immutable. A unique ID within the site that identifies the channel.
         */
        public java.lang.String getChannelId() {
          return channelId;
        }

        /** Required. Immutable. A unique ID within the site that identifies the channel. */
        public Create setChannelId(java.lang.String channelId) {
          this.channelId = channelId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes the specified channel of the specified site. The `live` channel cannot be deleted.
       *
       * Create a request for the method "channels.delete".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name Required. The fully-qualified resource name for the channel, in the format:
       *        sites/SITE_ID/channels/CHANNEL_ID
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Empty> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/channels/[^/]+$");

        /**
         * Deletes the specified channel of the specified site. The `live` channel cannot be deleted.
         *
         * Create a request for the method "channels.delete".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The fully-qualified resource name for the channel, in the format:
       *        sites/SITE_ID/channels/CHANNEL_ID
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(FirebaseHosting.this, "DELETE", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/channels/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The fully-qualified resource name for the channel, in the format:
         * sites/SITE_ID/channels/CHANNEL_ID
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The fully-qualified resource name for the channel, in the format:
       sites/SITE_ID/channels/CHANNEL_ID
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The fully-qualified resource name for the channel, in the format:
         * sites/SITE_ID/channels/CHANNEL_ID
         */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/channels/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Retrieves information for the specified channel of the specified site.
       *
       * Create a request for the method "channels.get".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. The fully-qualified resource name for the channel, in the format:
       *        sites/SITE_ID/channels/CHANNEL_ID
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Channel> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/channels/[^/]+$");

        /**
         * Retrieves information for the specified channel of the specified site.
         *
         * Create a request for the method "channels.get".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The fully-qualified resource name for the channel, in the format:
       *        sites/SITE_ID/channels/CHANNEL_ID
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Channel.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/channels/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The fully-qualified resource name for the channel, in the format:
         * sites/SITE_ID/channels/CHANNEL_ID
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The fully-qualified resource name for the channel, in the format:
       sites/SITE_ID/channels/CHANNEL_ID
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The fully-qualified resource name for the channel, in the format:
         * sites/SITE_ID/channels/CHANNEL_ID
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/channels/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists the channels for the specified site. All sites have a default `live` channel.
       *
       * Create a request for the method "channels.list".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The site for which to list channels, in the format: sites/SITE_ID
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListChannelsResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/channels";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Lists the channels for the specified site. All sites have a default `live` channel.
         *
         * Create a request for the method "channels.list".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The site for which to list channels, in the format: sites/SITE_ID
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListChannelsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The site for which to list channels, in the format: sites/SITE_ID */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The site for which to list channels, in the format: sites/SITE_ID
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** Required. The site for which to list channels, in the format: sites/SITE_ID */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The maximum number of channels to return. The service may return a lower number if fewer
         * channels exist than this maximum number. If unspecified, defaults to 10. The maximum
         * value is 100; values above 100 will be coerced to 100.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of channels to return. The service may return a lower number if fewer channels
       exist than this maximum number. If unspecified, defaults to 10. The maximum value is 100; values
       above 100 will be coerced to 100.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * The maximum number of channels to return. The service may return a lower number if fewer
         * channels exist than this maximum number. If unspecified, defaults to 10. The maximum
         * value is 100; values above 100 will be coerced to 100.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * A token from a previous call to `ListChannels` that tells the server where to resume
         * listing.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A token from a previous call to `ListChannels` that tells the server where to resume listing.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A token from a previous call to `ListChannels` that tells the server where to resume
         * listing.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates information for the specified channel of the specified site. Implicitly creates the
       * channel if it doesn't already exist.
       *
       * Create a request for the method "channels.patch".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Channel}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Channel content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Channel> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/channels/[^/]+$");

        /**
         * Updates information for the specified channel of the specified site. Implicitly creates the
         * channel if it doesn't already exist.
         *
         * Create a request for the method "channels.patch".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Channel}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Channel content) {
          super(FirebaseHosting.this, "PATCH", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Channel.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/channels/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The fully-qualified resource name for the channel, in the format: sites/
         * SITE_ID/channels/CHANNEL_ID
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The fully-qualified resource name for the channel, in the format: sites/
       SITE_ID/channels/CHANNEL_ID
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The fully-qualified resource name for the channel, in the format: sites/
         * SITE_ID/channels/CHANNEL_ID
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/channels/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** A comma-separated list of fields to be updated in this request. */
        @com.google.api.client.util.Key
        private String updateMask;

        /** A comma-separated list of fields to be updated in this request.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /** A comma-separated list of fields to be updated in this request. */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Releases collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
       *   {@code FirebaseHosting.Releases.List request = firebasehosting.releases().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Releases releases() {
        return new Releases();
      }

      /**
       * The "releases" collection of methods.
       */
      public class Releases {

        /**
         * Creates a new release, which makes the content of the specified version actively display on the
         * appropriate URL(s).
         *
         * Create a request for the method "releases.create".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The site or channel to which the release belongs, in either of the following formats: -
         *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Release}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Release content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Release> {

          private static final String REST_PATH = "v1beta1/{+parent}/releases";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^sites/[^/]+/channels/[^/]+$");

          /**
           * Creates a new release, which makes the content of the specified version actively display on the
           * appropriate URL(s).
           *
           * Create a request for the method "releases.create".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The site or channel to which the release belongs, in either of the following formats: -
         *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Release}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Release content) {
            super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Release.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^sites/[^/]+/channels/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The site or channel to which the release belongs, in either of the following
           * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The site or channel to which the release belongs, in either of the following formats: -
         sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The site or channel to which the release belongs, in either of the following
           * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^sites/[^/]+/channels/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID
           * The SITE_ID in this version identifier must match the SITE_ID in the `parent`
           * parameter. This query parameter must be empty if the `type` field in the request body
           * is `SITE_DISABLE`.
           */
          @com.google.api.client.util.Key
          private java.lang.String versionName;

          /**  The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID The SITE_ID
          in this version identifier must match the SITE_ID in the `parent` parameter. This query parameter
          must be empty if the `type` field in the request body is `SITE_DISABLE`.
           */
          public java.lang.String getVersionName() {
            return versionName;
          }

          /**
           * The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID
           * The SITE_ID in this version identifier must match the SITE_ID in the `parent`
           * parameter. This query parameter must be empty if the `type` field in the request body
           * is `SITE_DISABLE`.
           */
          public Create setVersionName(java.lang.String versionName) {
            this.versionName = versionName;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Gets the specified release for a site or channel. When used to get a release for a site, this can
         * get releases for both the default `live` channel and any active preview channels for the
         * specified site.
         *
         * Create a request for the method "releases.get".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The fully-qualified resource name for the Hosting release, in either of the following
         *        formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
         *        sites/SITE_ID/releases/RELEASE_ID
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Release> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^sites/[^/]+/channels/[^/]+/releases/[^/]+$");

          /**
           * Gets the specified release for a site or channel. When used to get a release for a site, this
           * can get releases for both the default `live` channel and any active preview channels for the
           * specified site.
           *
           * Create a request for the method "releases.get".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The fully-qualified resource name for the Hosting release, in either of the following
         *        formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
         *        sites/SITE_ID/releases/RELEASE_ID
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Release.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^sites/[^/]+/channels/[^/]+/releases/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The fully-qualified resource name for the Hosting release, in either of the
           * following formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
           * sites/SITE_ID/releases/RELEASE_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The fully-qualified resource name for the Hosting release, in either of the following
         formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
         sites/SITE_ID/releases/RELEASE_ID
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The fully-qualified resource name for the Hosting release, in either of the
           * following formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
           * sites/SITE_ID/releases/RELEASE_ID
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^sites/[^/]+/channels/[^/]+/releases/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists the releases that have been created for the specified site or channel. When used to list
         * releases for a site, this list includes releases for both the default `live` channel and any
         * active preview channels for the specified site.
         *
         * Create a request for the method "releases.list".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The site or channel for which to list releases, in either of the following formats: -
         *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListReleasesResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}/releases";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^sites/[^/]+/channels/[^/]+$");

          /**
           * Lists the releases that have been created for the specified site or channel. When used to list
           * releases for a site, this list includes releases for both the default `live` channel and any
           * active preview channels for the specified site.
           *
           * Create a request for the method "releases.list".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The site or channel for which to list releases, in either of the following formats: -
         *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListReleasesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^sites/[^/]+/channels/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The site or channel for which to list releases, in either of the following
           * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The site or channel for which to list releases, in either of the following formats: -
         sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The site or channel for which to list releases, in either of the following
           * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^sites/[^/]+/channels/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The maximum number of releases to return. The service may return a lower number if
           * fewer releases exist than this maximum number. If unspecified, defaults to 100.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of releases to return. The service may return a lower number if fewer releases
         exist than this maximum number. If unspecified, defaults to 100.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * The maximum number of releases to return. The service may return a lower number if
           * fewer releases exist than this maximum number. If unspecified, defaults to 100.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * A token from a previous call to `releases.list` or `channels.releases.list` that tells
           * the server where to resume listing.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** A token from a previous call to `releases.list` or `channels.releases.list` that tells the server
         where to resume listing.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * A token from a previous call to `releases.list` or `channels.releases.list` that tells
           * the server where to resume listing.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
    /**
     * An accessor for creating requests from the Domains collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
     *   {@code FirebaseHosting.Domains.List request = firebasehosting.domains().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Domains domains() {
      return new Domains();
    }

    /**
     * The "domains" collection of methods.
     */
    public class Domains {

      /**
       * Creates a domain mapping on the specified site.
       *
       * Create a request for the method "domains.create".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The parent to create the domain association for, in the format: sites/site-name
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Domain}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Domain content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Domain> {

        private static final String REST_PATH = "v1beta1/{+parent}/domains";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Creates a domain mapping on the specified site.
         *
         * Create a request for the method "domains.create".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The parent to create the domain association for, in the format: sites/site-name
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Domain}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Domain content) {
          super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Domain.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The parent to create the domain association for, in the format: sites/site-name
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The parent to create the domain association for, in the format: sites/site-name
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The parent to create the domain association for, in the format: sites/site-name
         */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes the existing domain mapping on the specified site.
       *
       * Create a request for the method "domains.delete".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the domain association to delete.
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Empty> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/domains/[^/]+$");

        /**
         * Deletes the existing domain mapping on the specified site.
         *
         * Create a request for the method "domains.delete".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the domain association to delete.
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(FirebaseHosting.this, "DELETE", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/domains/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The name of the domain association to delete. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the domain association to delete.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Required. The name of the domain association to delete. */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/domains/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Gets a domain mapping on the specified site.
       *
       * Create a request for the method "domains.get".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the domain configuration to get.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Domain> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/domains/[^/]+$");

        /**
         * Gets a domain mapping on the specified site.
         *
         * Create a request for the method "domains.get".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the domain configuration to get.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Domain.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/domains/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The name of the domain configuration to get. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the domain configuration to get.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Required. The name of the domain configuration to get. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/domains/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists the domains for the specified site.
       *
       * Create a request for the method "domains.list".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The parent for which to list domains, in the format: sites/ site-name
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListDomainsResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/domains";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Lists the domains for the specified site.
         *
         * Create a request for the method "domains.list".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The parent for which to list domains, in the format: sites/ site-name
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListDomainsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The parent for which to list domains, in the format: sites/ site-name */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The parent for which to list domains, in the format: sites/ site-name
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** Required. The parent for which to list domains, in the format: sites/ site-name */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /** The page size to return. Defaults to 50. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The page size to return. Defaults to 50.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The page size to return. Defaults to 50. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** The next_page_token from a previous request, if provided. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** The next_page_token from a previous request, if provided.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** The next_page_token from a previous request, if provided. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates the specified domain mapping, creating the mapping as if it does not exist.
       *
       * Create a request for the method "domains.update".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the domain association to update or create, if an association doesn't already
       *        exist.
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Domain}
       * @return the request
       */
      public Update update(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Domain content) throws java.io.IOException {
        Update result = new Update(name, content);
        initialize(result);
        return result;
      }

      public class Update extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Domain> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/domains/[^/]+$");

        /**
         * Updates the specified domain mapping, creating the mapping as if it does not exist.
         *
         * Create a request for the method "domains.update".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
         * <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the domain association to update or create, if an association doesn't already
       *        exist.
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Domain}
         * @since 1.13
         */
        protected Update(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Domain content) {
          super(FirebaseHosting.this, "PUT", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Domain.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/domains/[^/]+$");
          }
        }

        @Override
        public Update set$Xgafv(java.lang.String $Xgafv) {
          return (Update) super.set$Xgafv($Xgafv);
        }

        @Override
        public Update setAccessToken(java.lang.String accessToken) {
          return (Update) super.setAccessToken(accessToken);
        }

        @Override
        public Update setAlt(java.lang.String alt) {
          return (Update) super.setAlt(alt);
        }

        @Override
        public Update setCallback(java.lang.String callback) {
          return (Update) super.setCallback(callback);
        }

        @Override
        public Update setFields(java.lang.String fields) {
          return (Update) super.setFields(fields);
        }

        @Override
        public Update setKey(java.lang.String key) {
          return (Update) super.setKey(key);
        }

        @Override
        public Update setOauthToken(java.lang.String oauthToken) {
          return (Update) super.setOauthToken(oauthToken);
        }

        @Override
        public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Update) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Update setQuotaUser(java.lang.String quotaUser) {
          return (Update) super.setQuotaUser(quotaUser);
        }

        @Override
        public Update setUploadType(java.lang.String uploadType) {
          return (Update) super.setUploadType(uploadType);
        }

        @Override
        public Update setUploadProtocol(java.lang.String uploadProtocol) {
          return (Update) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the domain association to update or create, if an association
         * doesn't already exist.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the domain association to update or create, if an association doesn't already
       exist.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the domain association to update or create, if an association
         * doesn't already exist.
         */
        public Update setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/domains/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Update set(String parameterName, Object value) {
          return (Update) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Releases collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
     *   {@code FirebaseHosting.Releases.List request = firebasehosting.releases().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Releases releases() {
      return new Releases();
    }

    /**
     * The "releases" collection of methods.
     */
    public class Releases {

      /**
       * Creates a new release, which makes the content of the specified version actively display on the
       * appropriate URL(s).
       *
       * Create a request for the method "releases.create".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The site or channel to which the release belongs, in either of the following formats: -
       *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Release}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Release content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Release> {

        private static final String REST_PATH = "v1beta1/{+parent}/releases";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Creates a new release, which makes the content of the specified version actively display on the
         * appropriate URL(s).
         *
         * Create a request for the method "releases.create".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The site or channel to which the release belongs, in either of the following formats: -
       *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Release}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Release content) {
          super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Release.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The site or channel to which the release belongs, in either of the following
         * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The site or channel to which the release belongs, in either of the following formats: -
       sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The site or channel to which the release belongs, in either of the following
         * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID
         * The SITE_ID in this version identifier must match the SITE_ID in the `parent` parameter.
         * This query parameter must be empty if the `type` field in the request body is
         * `SITE_DISABLE`.
         */
        @com.google.api.client.util.Key
        private java.lang.String versionName;

        /**  The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID The SITE_ID
        in this version identifier must match the SITE_ID in the `parent` parameter. This query parameter
        must be empty if the `type` field in the request body is `SITE_DISABLE`.
         */
        public java.lang.String getVersionName() {
          return versionName;
        }

        /**
         * The unique identifier for a version, in the format: sites/SITE_ID/versions/ VERSION_ID
         * The SITE_ID in this version identifier must match the SITE_ID in the `parent` parameter.
         * This query parameter must be empty if the `type` field in the request body is
         * `SITE_DISABLE`.
         */
        public Create setVersionName(java.lang.String versionName) {
          this.versionName = versionName;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Gets the specified release for a site or channel. When used to get a release for a site, this can
       * get releases for both the default `live` channel and any active preview channels for the
       * specified site.
       *
       * Create a request for the method "releases.get".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. The fully-qualified resource name for the Hosting release, in either of the following
       *        formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
       *        sites/SITE_ID/releases/RELEASE_ID
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Release> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/releases/[^/]+$");

        /**
         * Gets the specified release for a site or channel. When used to get a release for a site, this
         * can get releases for both the default `live` channel and any active preview channels for the
         * specified site.
         *
         * Create a request for the method "releases.get".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The fully-qualified resource name for the Hosting release, in either of the following
       *        formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
       *        sites/SITE_ID/releases/RELEASE_ID
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Release.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/releases/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The fully-qualified resource name for the Hosting release, in either of the
         * following formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
         * sites/SITE_ID/releases/RELEASE_ID
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The fully-qualified resource name for the Hosting release, in either of the following
       formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
       sites/SITE_ID/releases/RELEASE_ID
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The fully-qualified resource name for the Hosting release, in either of the
         * following formats: - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID -
         * sites/SITE_ID/releases/RELEASE_ID
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/releases/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists the releases that have been created for the specified site or channel. When used to list
       * releases for a site, this list includes releases for both the default `live` channel and any
       * active preview channels for the specified site.
       *
       * Create a request for the method "releases.list".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The site or channel for which to list releases, in either of the following formats: -
       *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListReleasesResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/releases";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Lists the releases that have been created for the specified site or channel. When used to list
         * releases for a site, this list includes releases for both the default `live` channel and any
         * active preview channels for the specified site.
         *
         * Create a request for the method "releases.list".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The site or channel for which to list releases, in either of the following formats: -
       *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListReleasesResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The site or channel for which to list releases, in either of the following
         * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The site or channel for which to list releases, in either of the following formats: -
       sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The site or channel for which to list releases, in either of the following
         * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The maximum number of releases to return. The service may return a lower number if fewer
         * releases exist than this maximum number. If unspecified, defaults to 100.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of releases to return. The service may return a lower number if fewer releases
       exist than this maximum number. If unspecified, defaults to 100.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * The maximum number of releases to return. The service may return a lower number if fewer
         * releases exist than this maximum number. If unspecified, defaults to 100.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * A token from a previous call to `releases.list` or `channels.releases.list` that tells
         * the server where to resume listing.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A token from a previous call to `releases.list` or `channels.releases.list` that tells the server
       where to resume listing.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A token from a previous call to `releases.list` or `channels.releases.list` that tells
         * the server where to resume listing.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Versions collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
     *   {@code FirebaseHosting.Versions.List request = firebasehosting.versions().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Versions versions() {
      return new Versions();
    }

    /**
     * The "versions" collection of methods.
     */
    public class Versions {

      /**
       * Creates a new version on the specified target site using the content of the specified version.
       *
       * Create a request for the method "versions.clone".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Clone#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The target site for the cloned version, in the format: sites/ SITE_ID
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.CloneVersionRequest}
       * @return the request
       */
      public Clone clone(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.CloneVersionRequest content) throws java.io.IOException {
        Clone result = new Clone(parent, content);
        initialize(result);
        return result;
      }

      public class Clone extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Operation> {

        private static final String REST_PATH = "v1beta1/{+parent}/versions:clone";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Creates a new version on the specified target site using the content of the specified version.
         *
         * Create a request for the method "versions.clone".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Clone#execute()} method to invoke the remote operation.
         * <p> {@link
         * Clone#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The target site for the cloned version, in the format: sites/ SITE_ID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.CloneVersionRequest}
         * @since 1.13
         */
        protected Clone(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.CloneVersionRequest content) {
          super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Operation.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public Clone set$Xgafv(java.lang.String $Xgafv) {
          return (Clone) super.set$Xgafv($Xgafv);
        }

        @Override
        public Clone setAccessToken(java.lang.String accessToken) {
          return (Clone) super.setAccessToken(accessToken);
        }

        @Override
        public Clone setAlt(java.lang.String alt) {
          return (Clone) super.setAlt(alt);
        }

        @Override
        public Clone setCallback(java.lang.String callback) {
          return (Clone) super.setCallback(callback);
        }

        @Override
        public Clone setFields(java.lang.String fields) {
          return (Clone) super.setFields(fields);
        }

        @Override
        public Clone setKey(java.lang.String key) {
          return (Clone) super.setKey(key);
        }

        @Override
        public Clone setOauthToken(java.lang.String oauthToken) {
          return (Clone) super.setOauthToken(oauthToken);
        }

        @Override
        public Clone setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Clone) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Clone setQuotaUser(java.lang.String quotaUser) {
          return (Clone) super.setQuotaUser(quotaUser);
        }

        @Override
        public Clone setUploadType(java.lang.String uploadType) {
          return (Clone) super.setUploadType(uploadType);
        }

        @Override
        public Clone setUploadProtocol(java.lang.String uploadProtocol) {
          return (Clone) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The target site for the cloned version, in the format: sites/ SITE_ID */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The target site for the cloned version, in the format: sites/ SITE_ID
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** Required. The target site for the cloned version, in the format: sites/ SITE_ID */
        public Clone setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public Clone set(String parameterName, Object value) {
          return (Clone) super.set(parameterName, value);
        }
      }
      /**
       * Creates a new version for the specified site.
       *
       * Create a request for the method "versions.create".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The site in which to create the version, in the format: sites/ SITE_ID
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Version}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Version content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Version> {

        private static final String REST_PATH = "v1beta1/{+parent}/versions";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Creates a new version for the specified site.
         *
         * Create a request for the method "versions.create".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The site in which to create the version, in the format: sites/ SITE_ID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Version}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.Version content) {
          super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Version.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The site in which to create the version, in the format: sites/ SITE_ID */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The site in which to create the version, in the format: sites/ SITE_ID
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** Required. The site in which to create the version, in the format: sites/ SITE_ID */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The self-reported size of the version. This value is used for a pre-emptive quota check
         * for legacy version uploads.
         */
        @com.google.api.client.util.Key
        private java.lang.Long sizeBytes;

        /** The self-reported size of the version. This value is used for a pre-emptive quota check for legacy
       version uploads.
         */
        public java.lang.Long getSizeBytes() {
          return sizeBytes;
        }

        /**
         * The self-reported size of the version. This value is used for a pre-emptive quota check
         * for legacy version uploads.
         */
        public Create setSizeBytes(java.lang.Long sizeBytes) {
          this.sizeBytes = sizeBytes;
          return this;
        }

        /**
         * A unique id for the new version. This is was only specified for legacy version creations,
         * and should be blank.
         */
        @com.google.api.client.util.Key
        private java.lang.String versionId;

        /** A unique id for the new version. This is was only specified for legacy version creations, and
       should be blank.
         */
        public java.lang.String getVersionId() {
          return versionId;
        }

        /**
         * A unique id for the new version. This is was only specified for legacy version creations,
         * and should be blank.
         */
        public Create setVersionId(java.lang.String versionId) {
          this.versionId = versionId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes the specified version.
       *
       * Create a request for the method "versions.delete".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name Required. The fully-qualified resource name for the version, in the format:
       *        sites/SITE_ID/versions/VERSION_ID
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Empty> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/versions/[^/]+$");

        /**
         * Deletes the specified version.
         *
         * Create a request for the method "versions.delete".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The fully-qualified resource name for the version, in the format:
       *        sites/SITE_ID/versions/VERSION_ID
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(FirebaseHosting.this, "DELETE", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The fully-qualified resource name for the version, in the format:
         * sites/SITE_ID/versions/VERSION_ID
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The fully-qualified resource name for the version, in the format:
       sites/SITE_ID/versions/VERSION_ID
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The fully-qualified resource name for the version, in the format:
         * sites/SITE_ID/versions/VERSION_ID
         */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Get the specified version that has been created for the specified site. This can include versions
       * that were created for the default `live` channel or for any active preview channels for the
       * specified site.
       *
       * Create a request for the method "versions.get".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. The fully-qualified resource name for the version, in the format:
       *        sites/SITE_ID/versions/VERSION_ID
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Version> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/versions/[^/]+$");

        /**
         * Get the specified version that has been created for the specified site. This can include
         * versions that were created for the default `live` channel or for any active preview channels
         * for the specified site.
         *
         * Create a request for the method "versions.get".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The fully-qualified resource name for the version, in the format:
       *        sites/SITE_ID/versions/VERSION_ID
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.Version.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The fully-qualified resource name for the version, in the format:
         * sites/SITE_ID/versions/VERSION_ID
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The fully-qualified resource name for the version, in the format:
       sites/SITE_ID/versions/VERSION_ID
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The fully-qualified resource name for the version, in the format:
         * sites/SITE_ID/versions/VERSION_ID
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists the versions that have been created for the specified site. This list includes versions for
       * both the default `live` channel and any active preview channels for the specified site.
       *
       * Create a request for the method "versions.list".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The site or channel for which to list versions, in either of the following formats: -
       *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListVersionsResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/versions";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+$");

        /**
         * Lists the versions that have been created for the specified site. This list includes versions
         * for both the default `live` channel and any active preview channels for the specified site.
         *
         * Create a request for the method "versions.list".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The site or channel for which to list versions, in either of the following formats: -
       *        sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListVersionsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The site or channel for which to list versions, in either of the following
         * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The site or channel for which to list versions, in either of the following formats: -
       sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The site or channel for which to list versions, in either of the following
         * formats: - sites/SITE_ID - sites/SITE_ID/channels/CHANNEL_ID
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * A filter string used to return a subset of versions in the response. The currently
         * supported fields for filtering are: `name`, `status`, and `create_time`. Learn more about
         * filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
         */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** A filter string used to return a subset of versions in the response. The currently supported fields
       for filtering are: `name`, `status`, and `create_time`. Learn more about filtering in Google's [AIP
       160 standard](https://google.aip.dev/160).
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /**
         * A filter string used to return a subset of versions in the response. The currently
         * supported fields for filtering are: `name`, `status`, and `create_time`. Learn more about
         * filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
         */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /**
         * The maximum number of versions to return. The service may return a lower number if fewer
         * versions exist than this maximum number. If unspecified, defaults to 25. The maximum
         * value is 100; values above 100 will be coerced to 100.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of versions to return. The service may return a lower number if fewer versions
       exist than this maximum number. If unspecified, defaults to 25. The maximum value is 100; values
       above 100 will be coerced to 100.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * The maximum number of versions to return. The service may return a lower number if fewer
         * versions exist than this maximum number. If unspecified, defaults to 25. The maximum
         * value is 100; values above 100 will be coerced to 100.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * A token from a previous call to `ListVersions` that tells the server where to resume
         * listing.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A token from a previous call to `ListVersions` that tells the server where to resume listing.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A token from a previous call to `ListVersions` that tells the server where to resume
         * listing.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates the specified metadata for the specified version. This method will fail with
       * `FAILED_PRECONDITION` in the event of an invalid state transition. The supported
       * [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to
       * `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`.
       *
       * Create a request for the method "versions.patch".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID
       *        This name is provided in the response body when you call
       *        [`CreateVersion`](sites.versions/create).
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Version}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Version content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.Version> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/versions/[^/]+$");

        /**
         * Updates the specified metadata for the specified version. This method will fail with
         * `FAILED_PRECONDITION` in the event of an invalid state transition. The supported
         * [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to
         * `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`.
         *
         * Create a request for the method "versions.patch".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID
       *        This name is provided in the response body when you call
       *        [`CreateVersion`](sites.versions/create).
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.Version}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.firebasehosting.v1beta1.model.Version content) {
          super(FirebaseHosting.this, "PATCH", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.Version.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The fully-qualified resource name for the version, in the format: sites/
         * SITE_ID/versions/VERSION_ID This name is provided in the response body when you call
         * [`CreateVersion`](sites.versions/create).
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The fully-qualified resource name for the version, in the format: sites/
       SITE_ID/versions/VERSION_ID This name is provided in the response body when you call
       [`CreateVersion`](sites.versions/create).
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The fully-qualified resource name for the version, in the format: sites/
         * SITE_ID/versions/VERSION_ID This name is provided in the response body when you call
         * [`CreateVersion`](sites.versions/create).
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * A set of field names from your [version](../sites.versions) that you want to update. A
         * field will be overwritten if, and only if, it's in the mask. If a mask is not provided
         * then a default mask of only [`status`](../sites.versions#Version.FIELDS.status) will be
         * used.
         */
        @com.google.api.client.util.Key
        private String updateMask;

        /** A set of field names from your [version](../sites.versions) that you want to update. A field will
       be overwritten if, and only if, it's in the mask. If a mask is not provided then a default mask of
       only [`status`](../sites.versions#Version.FIELDS.status) will be used.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /**
         * A set of field names from your [version](../sites.versions) that you want to update. A
         * field will be overwritten if, and only if, it's in the mask. If a mask is not provided
         * then a default mask of only [`status`](../sites.versions#Version.FIELDS.status) will be
         * used.
         */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }
      /**
       * Adds content files to the specified version. Each file must be under 2 GB.
       *
       * Create a request for the method "versions.populateFiles".
       *
       * This request holds the parameters needed by the firebasehosting server.  After setting any
       * optional parameters, call the {@link PopulateFiles#execute()} method to invoke the remote
       * operation.
       *
       * @param parent Required. The version to which to add files, in the format: sites/SITE_ID /versions/VERSION_ID
       * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesRequest}
       * @return the request
       */
      public PopulateFiles populateFiles(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesRequest content) throws java.io.IOException {
        PopulateFiles result = new PopulateFiles(parent, content);
        initialize(result);
        return result;
      }

      public class PopulateFiles extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}:populateFiles";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^sites/[^/]+/versions/[^/]+$");

        /**
         * Adds content files to the specified version. Each file must be under 2 GB.
         *
         * Create a request for the method "versions.populateFiles".
         *
         * This request holds the parameters needed by the the firebasehosting server.  After setting any
         * optional parameters, call the {@link PopulateFiles#execute()} method to invoke the remote
         * operation. <p> {@link PopulateFiles#initialize(com.google.api.client.googleapis.services.Abstra
         * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
         * the constructor. </p>
         *
         * @param parent Required. The version to which to add files, in the format: sites/SITE_ID /versions/VERSION_ID
         * @param content the {@link com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesRequest}
         * @since 1.13
         */
        protected PopulateFiles(java.lang.String parent, com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesRequest content) {
          super(FirebaseHosting.this, "POST", REST_PATH, content, com.google.api.services.firebasehosting.v1beta1.model.PopulateVersionFilesResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
        }

        @Override
        public PopulateFiles set$Xgafv(java.lang.String $Xgafv) {
          return (PopulateFiles) super.set$Xgafv($Xgafv);
        }

        @Override
        public PopulateFiles setAccessToken(java.lang.String accessToken) {
          return (PopulateFiles) super.setAccessToken(accessToken);
        }

        @Override
        public PopulateFiles setAlt(java.lang.String alt) {
          return (PopulateFiles) super.setAlt(alt);
        }

        @Override
        public PopulateFiles setCallback(java.lang.String callback) {
          return (PopulateFiles) super.setCallback(callback);
        }

        @Override
        public PopulateFiles setFields(java.lang.String fields) {
          return (PopulateFiles) super.setFields(fields);
        }

        @Override
        public PopulateFiles setKey(java.lang.String key) {
          return (PopulateFiles) super.setKey(key);
        }

        @Override
        public PopulateFiles setOauthToken(java.lang.String oauthToken) {
          return (PopulateFiles) super.setOauthToken(oauthToken);
        }

        @Override
        public PopulateFiles setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (PopulateFiles) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public PopulateFiles setQuotaUser(java.lang.String quotaUser) {
          return (PopulateFiles) super.setQuotaUser(quotaUser);
        }

        @Override
        public PopulateFiles setUploadType(java.lang.String uploadType) {
          return (PopulateFiles) super.setUploadType(uploadType);
        }

        @Override
        public PopulateFiles setUploadProtocol(java.lang.String uploadProtocol) {
          return (PopulateFiles) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The version to which to add files, in the format: sites/SITE_ID
         * /versions/VERSION_ID
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The version to which to add files, in the format: sites/SITE_ID /versions/VERSION_ID
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The version to which to add files, in the format: sites/SITE_ID
         * /versions/VERSION_ID
         */
        public PopulateFiles setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^sites/[^/]+/versions/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public PopulateFiles set(String parameterName, Object value) {
          return (PopulateFiles) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Files collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseHosting firebasehosting = new FirebaseHosting(...);}
       *   {@code FirebaseHosting.Files.List request = firebasehosting.files().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Files files() {
        return new Files();
      }

      /**
       * The "files" collection of methods.
       */
      public class Files {

        /**
         * Lists the remaining files to be uploaded for the specified version.
         *
         * Create a request for the method "files.list".
         *
         * This request holds the parameters needed by the firebasehosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The version for which to list files, in the format: sites/SITE_ID /versions/VERSION_ID
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseHostingRequest<com.google.api.services.firebasehosting.v1beta1.model.ListVersionFilesResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}/files";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^sites/[^/]+/versions/[^/]+$");

          /**
           * Lists the remaining files to be uploaded for the specified version.
           *
           * Create a request for the method "files.list".
           *
           * This request holds the parameters needed by the the firebasehosting server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The version for which to list files, in the format: sites/SITE_ID /versions/VERSION_ID
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(FirebaseHosting.this, "GET", REST_PATH, null, com.google.api.services.firebasehosting.v1beta1.model.ListVersionFilesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^sites/[^/]+/versions/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The version for which to list files, in the format: sites/SITE_ID
           * /versions/VERSION_ID
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The version for which to list files, in the format: sites/SITE_ID /versions/VERSION_ID
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The version for which to list files, in the format: sites/SITE_ID
           * /versions/VERSION_ID
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^sites/[^/]+/versions/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * The maximum number of version files to return. The service may return a lower number if
           * fewer version files exist than this maximum number. If unspecified, defaults to 1000.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of version files to return. The service may return a lower number if fewer
         version files exist than this maximum number. If unspecified, defaults to 1000.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * The maximum number of version files to return. The service may return a lower number if
           * fewer version files exist than this maximum number. If unspecified, defaults to 1000.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * A token from a previous call to `ListVersionFiles` that tells the server where to
           * resume listing.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** A token from a previous call to `ListVersionFiles` that tells the server where to resume listing.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * A token from a previous call to `ListVersionFiles` that tells the server where to
           * resume listing.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          /**  The type of files that should be listed for the specified version. */
          @com.google.api.client.util.Key
          private java.lang.String status;

          /**  The type of files that should be listed for the specified version.
           */
          public java.lang.String getStatus() {
            return status;
          }

          /**  The type of files that should be listed for the specified version. */
          public List setStatus(java.lang.String status) {
            this.status = status;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link FirebaseHosting}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link FirebaseHosting}. */
    @Override
    public FirebaseHosting build() {
      return new FirebaseHosting(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FirebaseHostingRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFirebaseHostingRequestInitializer(
        FirebaseHostingRequestInitializer firebasehostingRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(firebasehostingRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
