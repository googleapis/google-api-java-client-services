/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.rapidmigrationassessment.v1.model;

/**
 * Message describing Collector object.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Rapid Migration Assessment API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Collector extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Store cloud storage bucket name (which is a guid) created with this Collector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bucket;

  /**
   * Output only. Client version.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clientVersion;

  /**
   * How many days to collect data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer collectionDays;

  /**
   * Output only. Create time stamp.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * User specified description of the Collector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * User specified name of the Collector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Uri for EULA (End User License Agreement) from customer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String eulaUri;

  /**
   * User specified expected asset count.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long expectedAssetCount;

  /**
   * Output only. Reference to MC Source Guest Os Scan.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GuestOsScan guestOsScan;

  /**
   * Labels as key value pairs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * name of resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Service Account email used to ingest data to this Collector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceAccount;

  /**
   * Output only. State of the Collector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Update time stamp.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. Reference to MC Source vsphere_scan.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VSphereScan vsphereScan;

  /**
   * Output only. Store cloud storage bucket name (which is a guid) created with this Collector.
   * @return value or {@code null} for none
   */
  public java.lang.String getBucket() {
    return bucket;
  }

  /**
   * Output only. Store cloud storage bucket name (which is a guid) created with this Collector.
   * @param bucket bucket or {@code null} for none
   */
  public Collector setBucket(java.lang.String bucket) {
    this.bucket = bucket;
    return this;
  }

  /**
   * Output only. Client version.
   * @return value or {@code null} for none
   */
  public java.lang.String getClientVersion() {
    return clientVersion;
  }

  /**
   * Output only. Client version.
   * @param clientVersion clientVersion or {@code null} for none
   */
  public Collector setClientVersion(java.lang.String clientVersion) {
    this.clientVersion = clientVersion;
    return this;
  }

  /**
   * How many days to collect data.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCollectionDays() {
    return collectionDays;
  }

  /**
   * How many days to collect data.
   * @param collectionDays collectionDays or {@code null} for none
   */
  public Collector setCollectionDays(java.lang.Integer collectionDays) {
    this.collectionDays = collectionDays;
    return this;
  }

  /**
   * Output only. Create time stamp.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Create time stamp.
   * @param createTime createTime or {@code null} for none
   */
  public Collector setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * User specified description of the Collector.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * User specified description of the Collector.
   * @param description description or {@code null} for none
   */
  public Collector setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * User specified name of the Collector.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * User specified name of the Collector.
   * @param displayName displayName or {@code null} for none
   */
  public Collector setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Uri for EULA (End User License Agreement) from customer.
   * @return value or {@code null} for none
   */
  public java.lang.String getEulaUri() {
    return eulaUri;
  }

  /**
   * Uri for EULA (End User License Agreement) from customer.
   * @param eulaUri eulaUri or {@code null} for none
   */
  public Collector setEulaUri(java.lang.String eulaUri) {
    this.eulaUri = eulaUri;
    return this;
  }

  /**
   * User specified expected asset count.
   * @return value or {@code null} for none
   */
  public java.lang.Long getExpectedAssetCount() {
    return expectedAssetCount;
  }

  /**
   * User specified expected asset count.
   * @param expectedAssetCount expectedAssetCount or {@code null} for none
   */
  public Collector setExpectedAssetCount(java.lang.Long expectedAssetCount) {
    this.expectedAssetCount = expectedAssetCount;
    return this;
  }

  /**
   * Output only. Reference to MC Source Guest Os Scan.
   * @return value or {@code null} for none
   */
  public GuestOsScan getGuestOsScan() {
    return guestOsScan;
  }

  /**
   * Output only. Reference to MC Source Guest Os Scan.
   * @param guestOsScan guestOsScan or {@code null} for none
   */
  public Collector setGuestOsScan(GuestOsScan guestOsScan) {
    this.guestOsScan = guestOsScan;
    return this;
  }

  /**
   * Labels as key value pairs.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Labels as key value pairs.
   * @param labels labels or {@code null} for none
   */
  public Collector setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * name of resource.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * name of resource.
   * @param name name or {@code null} for none
   */
  public Collector setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Service Account email used to ingest data to this Collector.
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceAccount() {
    return serviceAccount;
  }

  /**
   * Service Account email used to ingest data to this Collector.
   * @param serviceAccount serviceAccount or {@code null} for none
   */
  public Collector setServiceAccount(java.lang.String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Output only. State of the Collector.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. State of the Collector.
   * @param state state or {@code null} for none
   */
  public Collector setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Update time stamp.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Update time stamp.
   * @param updateTime updateTime or {@code null} for none
   */
  public Collector setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Output only. Reference to MC Source vsphere_scan.
   * @return value or {@code null} for none
   */
  public VSphereScan getVsphereScan() {
    return vsphereScan;
  }

  /**
   * Output only. Reference to MC Source vsphere_scan.
   * @param vsphereScan vsphereScan or {@code null} for none
   */
  public Collector setVsphereScan(VSphereScan vsphereScan) {
    this.vsphereScan = vsphereScan;
    return this;
  }

  @Override
  public Collector set(String fieldName, Object value) {
    return (Collector) super.set(fieldName, value);
  }

  @Override
  public Collector clone() {
    return (Collector) super.clone();
  }

}
