/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.replicapool.model;

/**
 * Model definition for HealthCheck.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Replica Pool API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HealthCheck extends com.google.api.client.json.GenericJson {

  /**
   * How often (in seconds) to make HTTP requests for this healthcheck. The default value is 5
   * seconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer checkIntervalSec;

  /**
   * The description for this health check.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * The number of consecutive health check requests that need to succeed before the replica is
   * considered healthy again. The default value is 2.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer healthyThreshold;

  /**
   * The value of the host header in the HTTP health check request. If left empty (default value),
   * the localhost IP 127.0.0.1 will be used.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String host;

  /**
   * The name of this health check.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The localhost request path to send this health check, in the format /path/to/use. For example,
   * /healthcheck.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String path;

  /**
   * The TCP port for the health check requests.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer port;

  /**
   * How long (in seconds) to wait before a timeout failure for this healthcheck. The default value
   * is 5 seconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer timeoutSec;

  /**
   * The number of consecutive health check requests that need to fail in order to consider the
   * replica unhealthy. The default value is 2.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer unhealthyThreshold;

  /**
   * How often (in seconds) to make HTTP requests for this healthcheck. The default value is 5
   * seconds.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCheckIntervalSec() {
    return checkIntervalSec;
  }

  /**
   * How often (in seconds) to make HTTP requests for this healthcheck. The default value is 5
   * seconds.
   * @param checkIntervalSec checkIntervalSec or {@code null} for none
   */
  public HealthCheck setCheckIntervalSec(java.lang.Integer checkIntervalSec) {
    this.checkIntervalSec = checkIntervalSec;
    return this;
  }

  /**
   * The description for this health check.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * The description for this health check.
   * @param description description or {@code null} for none
   */
  public HealthCheck setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * The number of consecutive health check requests that need to succeed before the replica is
   * considered healthy again. The default value is 2.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHealthyThreshold() {
    return healthyThreshold;
  }

  /**
   * The number of consecutive health check requests that need to succeed before the replica is
   * considered healthy again. The default value is 2.
   * @param healthyThreshold healthyThreshold or {@code null} for none
   */
  public HealthCheck setHealthyThreshold(java.lang.Integer healthyThreshold) {
    this.healthyThreshold = healthyThreshold;
    return this;
  }

  /**
   * The value of the host header in the HTTP health check request. If left empty (default value),
   * the localhost IP 127.0.0.1 will be used.
   * @return value or {@code null} for none
   */
  public java.lang.String getHost() {
    return host;
  }

  /**
   * The value of the host header in the HTTP health check request. If left empty (default value),
   * the localhost IP 127.0.0.1 will be used.
   * @param host host or {@code null} for none
   */
  public HealthCheck setHost(java.lang.String host) {
    this.host = host;
    return this;
  }

  /**
   * The name of this health check.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name of this health check.
   * @param name name or {@code null} for none
   */
  public HealthCheck setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The localhost request path to send this health check, in the format /path/to/use. For example,
   * /healthcheck.
   * @return value or {@code null} for none
   */
  public java.lang.String getPath() {
    return path;
  }

  /**
   * The localhost request path to send this health check, in the format /path/to/use. For example,
   * /healthcheck.
   * @param path path or {@code null} for none
   */
  public HealthCheck setPath(java.lang.String path) {
    this.path = path;
    return this;
  }

  /**
   * The TCP port for the health check requests.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPort() {
    return port;
  }

  /**
   * The TCP port for the health check requests.
   * @param port port or {@code null} for none
   */
  public HealthCheck setPort(java.lang.Integer port) {
    this.port = port;
    return this;
  }

  /**
   * How long (in seconds) to wait before a timeout failure for this healthcheck. The default value
   * is 5 seconds.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTimeoutSec() {
    return timeoutSec;
  }

  /**
   * How long (in seconds) to wait before a timeout failure for this healthcheck. The default value
   * is 5 seconds.
   * @param timeoutSec timeoutSec or {@code null} for none
   */
  public HealthCheck setTimeoutSec(java.lang.Integer timeoutSec) {
    this.timeoutSec = timeoutSec;
    return this;
  }

  /**
   * The number of consecutive health check requests that need to fail in order to consider the
   * replica unhealthy. The default value is 2.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getUnhealthyThreshold() {
    return unhealthyThreshold;
  }

  /**
   * The number of consecutive health check requests that need to fail in order to consider the
   * replica unhealthy. The default value is 2.
   * @param unhealthyThreshold unhealthyThreshold or {@code null} for none
   */
  public HealthCheck setUnhealthyThreshold(java.lang.Integer unhealthyThreshold) {
    this.unhealthyThreshold = unhealthyThreshold;
    return this;
  }

  @Override
  public HealthCheck set(String fieldName, Object value) {
    return (HealthCheck) super.set(fieldName, value);
  }

  @Override
  public HealthCheck clone() {
    return (HealthCheck) super.clone();
  }

}
