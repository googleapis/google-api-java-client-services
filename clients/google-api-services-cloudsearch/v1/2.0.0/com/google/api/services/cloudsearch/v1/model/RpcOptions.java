/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Options for Triggers dispatched via RPC.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RpcOptions extends com.google.api.client.json.GenericJson {

  /**
   * The RPC's request extensions (i.e. RPC::request_extensions(), a.k.a. the Stubby side channel)
   * will be merged with the specified [request_extensions]. When Triggers are batched, the RPC's
   * request extensions will be merged with all of the [request_extensions] of the Triggers in the
   * batch. Note that merging of request extensions follows standard protocol buffer semantics;
   * values of singular fields override previous values, and values of repeated fields are appended
   * (In the case of Triggers, Triggers with later fire times will be merged after Triggers with
   * earlier fire times in the same batch). It is not advised to specify extensions with repeated
   * fields on batchable Triggers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MessageSet requestExtensions;

  /**
   * The RPC's request extensions (i.e. RPC::request_extensions(), a.k.a. the Stubby side channel)
   * will be merged with the specified [request_extensions]. When Triggers are batched, the RPC's
   * request extensions will be merged with all of the [request_extensions] of the Triggers in the
   * batch. Note that merging of request extensions follows standard protocol buffer semantics;
   * values of singular fields override previous values, and values of repeated fields are appended
   * (In the case of Triggers, Triggers with later fire times will be merged after Triggers with
   * earlier fire times in the same batch). It is not advised to specify extensions with repeated
   * fields on batchable Triggers.
   * @return value or {@code null} for none
   */
  public MessageSet getRequestExtensions() {
    return requestExtensions;
  }

  /**
   * The RPC's request extensions (i.e. RPC::request_extensions(), a.k.a. the Stubby side channel)
   * will be merged with the specified [request_extensions]. When Triggers are batched, the RPC's
   * request extensions will be merged with all of the [request_extensions] of the Triggers in the
   * batch. Note that merging of request extensions follows standard protocol buffer semantics;
   * values of singular fields override previous values, and values of repeated fields are appended
   * (In the case of Triggers, Triggers with later fire times will be merged after Triggers with
   * earlier fire times in the same batch). It is not advised to specify extensions with repeated
   * fields on batchable Triggers.
   * @param requestExtensions requestExtensions or {@code null} for none
   */
  public RpcOptions setRequestExtensions(MessageSet requestExtensions) {
    this.requestExtensions = requestExtensions;
    return this;
  }

  @Override
  public RpcOptions set(String fieldName, Object value) {
    return (RpcOptions) super.set(fieldName, value);
  }

  @Override
  public RpcOptions clone() {
    return (RpcOptions) super.clone();
  }

}
