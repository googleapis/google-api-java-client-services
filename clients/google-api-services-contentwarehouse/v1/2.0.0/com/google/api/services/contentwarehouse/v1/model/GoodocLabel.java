/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Label aggregates all kinds of optional characteristics of page elements.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoodocLabel extends com.google.api.client.json.GenericJson {

  /**
   * AnchorLabel identifies a link target.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("AnchorLabel")
  private java.util.List<GoodocAnchorLabel> anchorLabel;

  static {
    // hack to force ProGuard to consider GoodocAnchorLabel used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoodocAnchorLabel.class);
  }

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("BreakLabel")
  private GoodocBreakLabel breakLabel;

  /**
   * CharLabel is specifically intended for symbols
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("CharLabel")
  private GoodocCharLabel charLabel;

  /**
   * Languages used in the element (page, block, paragraph or word). Ordered by dominant-language
   * first. Note: content scanjobs processed by the garbage_text_detector before CL 9223538 (Dec.
   * 2008) have LanguageLabels in arbitrary order (within Page and Block elements) -- the confidence
   * value should be inspected to find the dominant language guess for these, rather than just
   * taking the first.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("LanguageLabel")
  private java.util.List<GoodocLanguageLabel> languageLabel;

  /**
   * SemanticLabel is defined in goodoc-semantics.proto, it allows rich annotation of content,
   * identifying the nature of page elements.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("SemanticLabel")
  private GoodocSemanticLabel semanticLabel;

  /**
   * AnchorLabel identifies a link target.
   * @return value or {@code null} for none
   */
  public java.util.List<GoodocAnchorLabel> getAnchorLabel() {
    return anchorLabel;
  }

  /**
   * AnchorLabel identifies a link target.
   * @param anchorLabel anchorLabel or {@code null} for none
   */
  public GoodocLabel setAnchorLabel(java.util.List<GoodocAnchorLabel> anchorLabel) {
    this.anchorLabel = anchorLabel;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public GoodocBreakLabel getBreakLabel() {
    return breakLabel;
  }

  /**
   * @param breakLabel breakLabel or {@code null} for none
   */
  public GoodocLabel setBreakLabel(GoodocBreakLabel breakLabel) {
    this.breakLabel = breakLabel;
    return this;
  }

  /**
   * CharLabel is specifically intended for symbols
   * @return value or {@code null} for none
   */
  public GoodocCharLabel getCharLabel() {
    return charLabel;
  }

  /**
   * CharLabel is specifically intended for symbols
   * @param charLabel charLabel or {@code null} for none
   */
  public GoodocLabel setCharLabel(GoodocCharLabel charLabel) {
    this.charLabel = charLabel;
    return this;
  }

  /**
   * Languages used in the element (page, block, paragraph or word). Ordered by dominant-language
   * first. Note: content scanjobs processed by the garbage_text_detector before CL 9223538 (Dec.
   * 2008) have LanguageLabels in arbitrary order (within Page and Block elements) -- the confidence
   * value should be inspected to find the dominant language guess for these, rather than just
   * taking the first.
   * @return value or {@code null} for none
   */
  public java.util.List<GoodocLanguageLabel> getLanguageLabel() {
    return languageLabel;
  }

  /**
   * Languages used in the element (page, block, paragraph or word). Ordered by dominant-language
   * first. Note: content scanjobs processed by the garbage_text_detector before CL 9223538 (Dec.
   * 2008) have LanguageLabels in arbitrary order (within Page and Block elements) -- the confidence
   * value should be inspected to find the dominant language guess for these, rather than just
   * taking the first.
   * @param languageLabel languageLabel or {@code null} for none
   */
  public GoodocLabel setLanguageLabel(java.util.List<GoodocLanguageLabel> languageLabel) {
    this.languageLabel = languageLabel;
    return this;
  }

  /**
   * SemanticLabel is defined in goodoc-semantics.proto, it allows rich annotation of content,
   * identifying the nature of page elements.
   * @return value or {@code null} for none
   */
  public GoodocSemanticLabel getSemanticLabel() {
    return semanticLabel;
  }

  /**
   * SemanticLabel is defined in goodoc-semantics.proto, it allows rich annotation of content,
   * identifying the nature of page elements.
   * @param semanticLabel semanticLabel or {@code null} for none
   */
  public GoodocLabel setSemanticLabel(GoodocSemanticLabel semanticLabel) {
    this.semanticLabel = semanticLabel;
    return this;
  }

  @Override
  public GoodocLabel set(String fieldName, Object value) {
    return (GoodocLabel) super.set(fieldName, value);
  }

  @Override
  public GoodocLabel clone() {
    return (GoodocLabel) super.clone();
  }

}
