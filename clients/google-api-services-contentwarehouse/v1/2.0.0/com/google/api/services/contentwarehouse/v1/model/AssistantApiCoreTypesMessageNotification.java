/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This proto captures the contents of a messaging app notification that is typically part of a
 * conversation thread. Next Id: 20
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiCoreTypesMessageNotification extends com.google.api.client.json.GenericJson {

  /**
   * App name of the message notification, e.g. Hangouts.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String appName;

  /**
   * The key used to group this notification into a cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bundleId;

  /**
   * Uri for the attachment (image, audio, video etc.).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dataUri;

  /**
   * Name of the group associated with the message notification. This field is set iff this is a
   * group message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String groupName;

  /**
   * The group key of a proactive notification. Details in
   * assistant.api.client_op.NotificationArgs.grouping_key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String groupingKey;

  /**
   * Index of the message notification.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer index;

  /**
   * Boolean indicating if the mark_as_read action is available for this message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean markAsReadActionAvailable;

  /**
   * Length of the message/notification content in characters. Note: We can't send the full content
   * because of privacy restriction, preventing sending client content to our backends. Concatenated
   * message_length of all notification_entries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer messageLength;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String messageRecipientType;

  /**
   * Mime type of the data_uri. e.g. 'audio/wav', 'video/mp4', 'image/png'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mimeType;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantApiCoreTypesMessageNotificationNotificationEntry> notificationEntries;

  /**
   * On-device cache key for notification icon.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String notificationIconKey;

  /**
   * String key of the notification. It is the key from original StatusBarNotification received from
   * Android OS. It is used to identify the original notification to send a reply.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String notificationKey;

  /**
   * The opaque_token of a proactive notification. Details in
   * assistant.api.client_op.NotificationArgs.opaque_token.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String opaqueToken;

  /**
   * App pkg of the message notification, e.g. "com.google.android.talk".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String packageName;

  /**
   * Timestamp of the last notification's post time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long postTime;

  /**
   * Boolean indicating if the reply action is available for this message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean replyActionAvailable;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiCoreTypesMessageNotificationPerson sender;

  /**
   * Sender's name of the message notification, e.g. Elsa. Last sender name in case of a group
   * conversation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String senderName;

  /**
   * App name of the message notification, e.g. Hangouts.
   * @return value or {@code null} for none
   */
  public java.lang.String getAppName() {
    return appName;
  }

  /**
   * App name of the message notification, e.g. Hangouts.
   * @param appName appName or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setAppName(java.lang.String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * The key used to group this notification into a cluster.
   * @return value or {@code null} for none
   */
  public java.lang.String getBundleId() {
    return bundleId;
  }

  /**
   * The key used to group this notification into a cluster.
   * @param bundleId bundleId or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setBundleId(java.lang.String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   * Uri for the attachment (image, audio, video etc.).
   * @return value or {@code null} for none
   */
  public java.lang.String getDataUri() {
    return dataUri;
  }

  /**
   * Uri for the attachment (image, audio, video etc.).
   * @param dataUri dataUri or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setDataUri(java.lang.String dataUri) {
    this.dataUri = dataUri;
    return this;
  }

  /**
   * Name of the group associated with the message notification. This field is set iff this is a
   * group message.
   * @return value or {@code null} for none
   */
  public java.lang.String getGroupName() {
    return groupName;
  }

  /**
   * Name of the group associated with the message notification. This field is set iff this is a
   * group message.
   * @param groupName groupName or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setGroupName(java.lang.String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * The group key of a proactive notification. Details in
   * assistant.api.client_op.NotificationArgs.grouping_key.
   * @return value or {@code null} for none
   */
  public java.lang.String getGroupingKey() {
    return groupingKey;
  }

  /**
   * The group key of a proactive notification. Details in
   * assistant.api.client_op.NotificationArgs.grouping_key.
   * @param groupingKey groupingKey or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setGroupingKey(java.lang.String groupingKey) {
    this.groupingKey = groupingKey;
    return this;
  }

  /**
   * Index of the message notification.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getIndex() {
    return index;
  }

  /**
   * Index of the message notification.
   * @param index index or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setIndex(java.lang.Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Boolean indicating if the mark_as_read action is available for this message.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMarkAsReadActionAvailable() {
    return markAsReadActionAvailable;
  }

  /**
   * Boolean indicating if the mark_as_read action is available for this message.
   * @param markAsReadActionAvailable markAsReadActionAvailable or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setMarkAsReadActionAvailable(java.lang.Boolean markAsReadActionAvailable) {
    this.markAsReadActionAvailable = markAsReadActionAvailable;
    return this;
  }

  /**
   * Length of the message/notification content in characters. Note: We can't send the full content
   * because of privacy restriction, preventing sending client content to our backends. Concatenated
   * message_length of all notification_entries.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMessageLength() {
    return messageLength;
  }

  /**
   * Length of the message/notification content in characters. Note: We can't send the full content
   * because of privacy restriction, preventing sending client content to our backends. Concatenated
   * message_length of all notification_entries.
   * @param messageLength messageLength or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setMessageLength(java.lang.Integer messageLength) {
    this.messageLength = messageLength;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getMessageRecipientType() {
    return messageRecipientType;
  }

  /**
   * @param messageRecipientType messageRecipientType or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setMessageRecipientType(java.lang.String messageRecipientType) {
    this.messageRecipientType = messageRecipientType;
    return this;
  }

  /**
   * Mime type of the data_uri. e.g. 'audio/wav', 'video/mp4', 'image/png'.
   * @return value or {@code null} for none
   */
  public java.lang.String getMimeType() {
    return mimeType;
  }

  /**
   * Mime type of the data_uri. e.g. 'audio/wav', 'video/mp4', 'image/png'.
   * @param mimeType mimeType or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setMimeType(java.lang.String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantApiCoreTypesMessageNotificationNotificationEntry> getNotificationEntries() {
    return notificationEntries;
  }

  /**
   * @param notificationEntries notificationEntries or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setNotificationEntries(java.util.List<AssistantApiCoreTypesMessageNotificationNotificationEntry> notificationEntries) {
    this.notificationEntries = notificationEntries;
    return this;
  }

  /**
   * On-device cache key for notification icon.
   * @return value or {@code null} for none
   */
  public java.lang.String getNotificationIconKey() {
    return notificationIconKey;
  }

  /**
   * On-device cache key for notification icon.
   * @param notificationIconKey notificationIconKey or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setNotificationIconKey(java.lang.String notificationIconKey) {
    this.notificationIconKey = notificationIconKey;
    return this;
  }

  /**
   * String key of the notification. It is the key from original StatusBarNotification received from
   * Android OS. It is used to identify the original notification to send a reply.
   * @return value or {@code null} for none
   */
  public java.lang.String getNotificationKey() {
    return notificationKey;
  }

  /**
   * String key of the notification. It is the key from original StatusBarNotification received from
   * Android OS. It is used to identify the original notification to send a reply.
   * @param notificationKey notificationKey or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setNotificationKey(java.lang.String notificationKey) {
    this.notificationKey = notificationKey;
    return this;
  }

  /**
   * The opaque_token of a proactive notification. Details in
   * assistant.api.client_op.NotificationArgs.opaque_token.
   * @see #decodeOpaqueToken()
   * @return value or {@code null} for none
   */
  public java.lang.String getOpaqueToken() {
    return opaqueToken;
  }

  /**
   * The opaque_token of a proactive notification. Details in
   * assistant.api.client_op.NotificationArgs.opaque_token.
   * @see #getOpaqueToken()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeOpaqueToken() {
    return com.google.api.client.util.Base64.decodeBase64(opaqueToken);
  }

  /**
   * The opaque_token of a proactive notification. Details in
   * assistant.api.client_op.NotificationArgs.opaque_token.
   * @see #encodeOpaqueToken()
   * @param opaqueToken opaqueToken or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setOpaqueToken(java.lang.String opaqueToken) {
    this.opaqueToken = opaqueToken;
    return this;
  }

  /**
   * The opaque_token of a proactive notification. Details in
   * assistant.api.client_op.NotificationArgs.opaque_token.
   * @see #setOpaqueToken()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public AssistantApiCoreTypesMessageNotification encodeOpaqueToken(byte[] opaqueToken) {
    this.opaqueToken = com.google.api.client.util.Base64.encodeBase64URLSafeString(opaqueToken);
    return this;
  }

  /**
   * App pkg of the message notification, e.g. "com.google.android.talk".
   * @return value or {@code null} for none
   */
  public java.lang.String getPackageName() {
    return packageName;
  }

  /**
   * App pkg of the message notification, e.g. "com.google.android.talk".
   * @param packageName packageName or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setPackageName(java.lang.String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Timestamp of the last notification's post time.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPostTime() {
    return postTime;
  }

  /**
   * Timestamp of the last notification's post time.
   * @param postTime postTime or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setPostTime(java.lang.Long postTime) {
    this.postTime = postTime;
    return this;
  }

  /**
   * Boolean indicating if the reply action is available for this message.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReplyActionAvailable() {
    return replyActionAvailable;
  }

  /**
   * Boolean indicating if the reply action is available for this message.
   * @param replyActionAvailable replyActionAvailable or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setReplyActionAvailable(java.lang.Boolean replyActionAvailable) {
    this.replyActionAvailable = replyActionAvailable;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotificationPerson getSender() {
    return sender;
  }

  /**
   * @param sender sender or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setSender(AssistantApiCoreTypesMessageNotificationPerson sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Sender's name of the message notification, e.g. Elsa. Last sender name in case of a group
   * conversation.
   * @return value or {@code null} for none
   */
  public java.lang.String getSenderName() {
    return senderName;
  }

  /**
   * Sender's name of the message notification, e.g. Elsa. Last sender name in case of a group
   * conversation.
   * @param senderName senderName or {@code null} for none
   */
  public AssistantApiCoreTypesMessageNotification setSenderName(java.lang.String senderName) {
    this.senderName = senderName;
    return this;
  }

  @Override
  public AssistantApiCoreTypesMessageNotification set(String fieldName, Object value) {
    return (AssistantApiCoreTypesMessageNotification) super.set(fieldName, value);
  }

  @Override
  public AssistantApiCoreTypesMessageNotification clone() {
    return (AssistantApiCoreTypesMessageNotification) super.clone();
  }

}
