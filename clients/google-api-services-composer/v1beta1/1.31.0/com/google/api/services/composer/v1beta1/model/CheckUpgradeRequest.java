/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.composer.v1beta1.model;

/**
 * Request to check whether image upgrade will succeed.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Composer API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CheckUpgradeRequest extends com.google.api.client.json.GenericJson {

  /**
   * The version of the software running in the environment. This encapsulates both the version of
   * Cloud Composer functionality and the version of Apache Airflow. It must match the regular
   * expression `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`. When
   * used as input, the server also checks if the provided version is supported and denies the
   * request for an unsupported version. The Cloud Composer portion of the version is a [semantic
   * version](https://semver.org) or `latest`. When the patch version is omitted, the current Cloud
   * Composer patch version is selected. When `latest` is provided instead of an explicit version
   * number, the server replaces `latest` with the current Cloud Composer version and stores that
   * version number in the same field. The portion of the image version that follows `airflow-` is
   * an official Apache Airflow repository [release name](https://github.com/apache/incubator-
   * airflow/releases). See also [Version List] (/composer/docs/concepts/versioning/composer-
   * versions).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imageVersion;

  /**
   * The version of the software running in the environment. This encapsulates both the version of
   * Cloud Composer functionality and the version of Apache Airflow. It must match the regular
   * expression `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`. When
   * used as input, the server also checks if the provided version is supported and denies the
   * request for an unsupported version. The Cloud Composer portion of the version is a [semantic
   * version](https://semver.org) or `latest`. When the patch version is omitted, the current Cloud
   * Composer patch version is selected. When `latest` is provided instead of an explicit version
   * number, the server replaces `latest` with the current Cloud Composer version and stores that
   * version number in the same field. The portion of the image version that follows `airflow-` is
   * an official Apache Airflow repository [release name](https://github.com/apache/incubator-
   * airflow/releases). See also [Version List] (/composer/docs/concepts/versioning/composer-
   * versions).
   * @return value or {@code null} for none
   */
  public java.lang.String getImageVersion() {
    return imageVersion;
  }

  /**
   * The version of the software running in the environment. This encapsulates both the version of
   * Cloud Composer functionality and the version of Apache Airflow. It must match the regular
   * expression `composer-([0-9]+\.[0-9]+\.[0-9]+|latest)-airflow-[0-9]+\.[0-9]+(\.[0-9]+.*)?`. When
   * used as input, the server also checks if the provided version is supported and denies the
   * request for an unsupported version. The Cloud Composer portion of the version is a [semantic
   * version](https://semver.org) or `latest`. When the patch version is omitted, the current Cloud
   * Composer patch version is selected. When `latest` is provided instead of an explicit version
   * number, the server replaces `latest` with the current Cloud Composer version and stores that
   * version number in the same field. The portion of the image version that follows `airflow-` is
   * an official Apache Airflow repository [release name](https://github.com/apache/incubator-
   * airflow/releases). See also [Version List] (/composer/docs/concepts/versioning/composer-
   * versions).
   * @param imageVersion imageVersion or {@code null} for none
   */
  public CheckUpgradeRequest setImageVersion(java.lang.String imageVersion) {
    this.imageVersion = imageVersion;
    return this;
  }

  @Override
  public CheckUpgradeRequest set(String fieldName, Object value) {
    return (CheckUpgradeRequest) super.set(fieldName, value);
  }

  @Override
  public CheckUpgradeRequest clone() {
    return (CheckUpgradeRequest) super.clone();
  }

}
