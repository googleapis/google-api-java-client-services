/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A proto representing a vertical ordering of a feature. NOTE: This shouldn’t be used if a more
 * specific field can be used instead. E.g., for TYPE_SEGMENT features grade_level field should be
 * preferred. For indoor features RELATION_ON_LEVEL should be preferred. See go/aboutgrades for
 * comparison of various types of levels available.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreVerticalOrderingProto extends com.google.api.client.json.GenericJson {

  /**
   * The level represents the relative vertical ordering of a feature among all overlapping
   * features. For example, we may have features along freeway surface have level = 0, and features
   * on an overpass have level = 1. NOTE: It’s assumed that all features have level 0 by default, so
   * that it’s not necessary for all overlapping features to have this set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float level;

  /**
   * The level represents the relative vertical ordering of a feature among all overlapping
   * features. For example, we may have features along freeway surface have level = 0, and features
   * on an overpass have level = 1. NOTE: It’s assumed that all features have level 0 by default, so
   * that it’s not necessary for all overlapping features to have this set.
   * @return value or {@code null} for none
   */
  public java.lang.Float getLevel() {
    return level;
  }

  /**
   * The level represents the relative vertical ordering of a feature among all overlapping
   * features. For example, we may have features along freeway surface have level = 0, and features
   * on an overpass have level = 1. NOTE: It’s assumed that all features have level 0 by default, so
   * that it’s not necessary for all overlapping features to have this set.
   * @param level level or {@code null} for none
   */
  public GeostoreVerticalOrderingProto setLevel(java.lang.Float level) {
    this.level = level;
    return this;
  }

  @Override
  public GeostoreVerticalOrderingProto set(String fieldName, Object value) {
    return (GeostoreVerticalOrderingProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreVerticalOrderingProto clone() {
    return (GeostoreVerticalOrderingProto) super.clone();
  }

}
