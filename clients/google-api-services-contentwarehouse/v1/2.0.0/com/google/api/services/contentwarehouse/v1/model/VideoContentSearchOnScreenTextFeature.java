/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Keep feature values which are useful to filter titles, labels.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoContentSearchOnScreenTextFeature extends com.google.api.client.json.GenericJson {

  /**
   * The average of rotation angles (degree) of texts.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float averageAngle;

  /**
   * Average value of confidence.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float averageConfidence;

  /**
   * Font size or weight information. This is extracted from internal message, so may not be
   * available in future.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float averageFontsize;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float averageFontweight;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float averageHeightRatio;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float backgroundBlue;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float backgroundGray;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float backgroundGreen;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float backgroundRed;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float boxHeightRatio;

  /**
   * Box width and height ratio, against to the frame size, so the value range is [0, 1]. If this
   * text feature consists of multiple text boxes, the box width / height is a union of each text
   * box.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float boxWidthRatio;

  /**
   * Horizontal position of the center of this text, by ratio [0.0, 1.0].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float centerHorizontalPositionRatio;

  /**
   * Vertical position of the center of this text, by ratio [0.0, 1.0].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float centerVerticalPositionRatio;

  /**
   * Counting number in this anchor's original label.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer countingNumber;

  /**
   * # of numbered anchors that are not out-of-order / # of all the numbered anchors. If no counting
   * number is detected, this will be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float countingNumberOooRatio;

  /**
   * Prefix for counting number in this anchor's label. If no counting number is detected, this will
   * be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String countingNumberPrefix;

  /**
   * Suffix for counting number in this anchor's label. If no counting number is detected, this will
   * be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String countingNumberSuffix;

  /**
   * Duration time in millisec.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer durationMs;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float foregroundBlue;

  /**
   * Color information, normalized to [0-1]. This color information is extracted from the largest
   * word in the line entities of PageLayout message. See goodoc::PageLayoutEntity::Colors for
   * details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float foregroundGray;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float foregroundGreen;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float foregroundRed;

  /**
   * Whether or not this anchor had URL in its label before the label fixing step.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hadUrlInLabel;

  /**
   * # of LINE entities that are recognized as handwritten texts over # of merged LINE entities.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float handwrittenTextRatio;

  /**
   * Whether or not the counting number in this anchor's label is out-of-order. If no counting
   * number is detected, this will be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isCountingNumberOoo;

  /**
   * Languages predicted by OCR. "repeated" is employed for this field because LINE entities of
   * PageLayout message are sometimes annotated with multiple languages, and also two VideoAnchor
   * that are annotated with different languages can be merged into one VideoAnchor. When two
   * VideoAnchor are merged into one, the weight field values of the new VideoAnchor will be the
   * average of weight field values weighted by merged_line_count.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoodocLanguageCombinationLanguage> languages;

  static {
    // hack to force ProGuard to consider GoodocLanguageCombinationLanguage used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoodocLanguageCombinationLanguage.class);
  }

  /**
   * Left position of this text, by ratio [0, 1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float leftPositionRatio;

  /**
   * The median distance between this anchor and other anchors in the cluster. The way the distance
   * is calculated will vary depending on the clustering method.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float medianClusteringDistance;

  /**
   * The number of LINE entities used for this text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer mergedLineCount;

  /**
   * # of OCR texts that appear in the same frame. If duration of this OCR text is not zero, the
   * maximum number among multiple frames where this OCR text appears is set to this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer nTextsInSameFrame;

  /**
   * The number of OCR texts that have the same text among temporally-merged OCR texts.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float occurrenceCount;

  /**
   * occurrence_count over the number of anchors merged to this anchor.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float occurrenceRatio;

  /**
   * Features for the overlap between OCR and ASR.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchOcrAsrFeature ocrAsrFeature;

  /**
   * The label this VideoAnchor originally had before label clearning steps.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String originalLabel;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer relativeShotTimeMsPosteriorToEndTime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer relativeShotTimeMsPosteriorToStartTime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer relativeShotTimeMsPriorToEndTime;

  /**
   * Shot boundary time nearest to OnScreenText's start and end time. The time is relative to each
   * OnScreenText's start / end time (ex. -1 means shot time exists prior to the start / end time).
   * If shot time and start/end time is the same, 0 is set in 'prior' field. If no shot info is
   * available, the below fields are not set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer relativeShotTimeMsPriorToStartTime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer shotInfoCountDuringText;

  /**
   * OCR language that has the highest weight.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String topOcrLanguage;

  /**
   * Note that top-left position is (0, 0) for position values. Top position of this text, by ratio
   * [0, 1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float topPositionRatio;

  /**
   * The average of rotation angles (degree) of texts.
   * @return value or {@code null} for none
   */
  public java.lang.Float getAverageAngle() {
    return averageAngle;
  }

  /**
   * The average of rotation angles (degree) of texts.
   * @param averageAngle averageAngle or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setAverageAngle(java.lang.Float averageAngle) {
    this.averageAngle = averageAngle;
    return this;
  }

  /**
   * Average value of confidence.
   * @return value or {@code null} for none
   */
  public java.lang.Float getAverageConfidence() {
    return averageConfidence;
  }

  /**
   * Average value of confidence.
   * @param averageConfidence averageConfidence or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setAverageConfidence(java.lang.Float averageConfidence) {
    this.averageConfidence = averageConfidence;
    return this;
  }

  /**
   * Font size or weight information. This is extracted from internal message, so may not be
   * available in future.
   * @return value or {@code null} for none
   */
  public java.lang.Float getAverageFontsize() {
    return averageFontsize;
  }

  /**
   * Font size or weight information. This is extracted from internal message, so may not be
   * available in future.
   * @param averageFontsize averageFontsize or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setAverageFontsize(java.lang.Float averageFontsize) {
    this.averageFontsize = averageFontsize;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getAverageFontweight() {
    return averageFontweight;
  }

  /**
   * @param averageFontweight averageFontweight or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setAverageFontweight(java.lang.Float averageFontweight) {
    this.averageFontweight = averageFontweight;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getAverageHeightRatio() {
    return averageHeightRatio;
  }

  /**
   * @param averageHeightRatio averageHeightRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setAverageHeightRatio(java.lang.Float averageHeightRatio) {
    this.averageHeightRatio = averageHeightRatio;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getBackgroundBlue() {
    return backgroundBlue;
  }

  /**
   * @param backgroundBlue backgroundBlue or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setBackgroundBlue(java.lang.Float backgroundBlue) {
    this.backgroundBlue = backgroundBlue;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getBackgroundGray() {
    return backgroundGray;
  }

  /**
   * @param backgroundGray backgroundGray or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setBackgroundGray(java.lang.Float backgroundGray) {
    this.backgroundGray = backgroundGray;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getBackgroundGreen() {
    return backgroundGreen;
  }

  /**
   * @param backgroundGreen backgroundGreen or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setBackgroundGreen(java.lang.Float backgroundGreen) {
    this.backgroundGreen = backgroundGreen;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getBackgroundRed() {
    return backgroundRed;
  }

  /**
   * @param backgroundRed backgroundRed or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setBackgroundRed(java.lang.Float backgroundRed) {
    this.backgroundRed = backgroundRed;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getBoxHeightRatio() {
    return boxHeightRatio;
  }

  /**
   * @param boxHeightRatio boxHeightRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setBoxHeightRatio(java.lang.Float boxHeightRatio) {
    this.boxHeightRatio = boxHeightRatio;
    return this;
  }

  /**
   * Box width and height ratio, against to the frame size, so the value range is [0, 1]. If this
   * text feature consists of multiple text boxes, the box width / height is a union of each text
   * box.
   * @return value or {@code null} for none
   */
  public java.lang.Float getBoxWidthRatio() {
    return boxWidthRatio;
  }

  /**
   * Box width and height ratio, against to the frame size, so the value range is [0, 1]. If this
   * text feature consists of multiple text boxes, the box width / height is a union of each text
   * box.
   * @param boxWidthRatio boxWidthRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setBoxWidthRatio(java.lang.Float boxWidthRatio) {
    this.boxWidthRatio = boxWidthRatio;
    return this;
  }

  /**
   * Horizontal position of the center of this text, by ratio [0.0, 1.0].
   * @return value or {@code null} for none
   */
  public java.lang.Float getCenterHorizontalPositionRatio() {
    return centerHorizontalPositionRatio;
  }

  /**
   * Horizontal position of the center of this text, by ratio [0.0, 1.0].
   * @param centerHorizontalPositionRatio centerHorizontalPositionRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setCenterHorizontalPositionRatio(java.lang.Float centerHorizontalPositionRatio) {
    this.centerHorizontalPositionRatio = centerHorizontalPositionRatio;
    return this;
  }

  /**
   * Vertical position of the center of this text, by ratio [0.0, 1.0].
   * @return value or {@code null} for none
   */
  public java.lang.Float getCenterVerticalPositionRatio() {
    return centerVerticalPositionRatio;
  }

  /**
   * Vertical position of the center of this text, by ratio [0.0, 1.0].
   * @param centerVerticalPositionRatio centerVerticalPositionRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setCenterVerticalPositionRatio(java.lang.Float centerVerticalPositionRatio) {
    this.centerVerticalPositionRatio = centerVerticalPositionRatio;
    return this;
  }

  /**
   * Counting number in this anchor's original label.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCountingNumber() {
    return countingNumber;
  }

  /**
   * Counting number in this anchor's original label.
   * @param countingNumber countingNumber or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setCountingNumber(java.lang.Integer countingNumber) {
    this.countingNumber = countingNumber;
    return this;
  }

  /**
   * # of numbered anchors that are not out-of-order / # of all the numbered anchors. If no counting
   * number is detected, this will be empty.
   * @return value or {@code null} for none
   */
  public java.lang.Float getCountingNumberOooRatio() {
    return countingNumberOooRatio;
  }

  /**
   * # of numbered anchors that are not out-of-order / # of all the numbered anchors. If no counting
   * number is detected, this will be empty.
   * @param countingNumberOooRatio countingNumberOooRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setCountingNumberOooRatio(java.lang.Float countingNumberOooRatio) {
    this.countingNumberOooRatio = countingNumberOooRatio;
    return this;
  }

  /**
   * Prefix for counting number in this anchor's label. If no counting number is detected, this will
   * be empty.
   * @return value or {@code null} for none
   */
  public java.lang.String getCountingNumberPrefix() {
    return countingNumberPrefix;
  }

  /**
   * Prefix for counting number in this anchor's label. If no counting number is detected, this will
   * be empty.
   * @param countingNumberPrefix countingNumberPrefix or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setCountingNumberPrefix(java.lang.String countingNumberPrefix) {
    this.countingNumberPrefix = countingNumberPrefix;
    return this;
  }

  /**
   * Suffix for counting number in this anchor's label. If no counting number is detected, this will
   * be empty.
   * @return value or {@code null} for none
   */
  public java.lang.String getCountingNumberSuffix() {
    return countingNumberSuffix;
  }

  /**
   * Suffix for counting number in this anchor's label. If no counting number is detected, this will
   * be empty.
   * @param countingNumberSuffix countingNumberSuffix or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setCountingNumberSuffix(java.lang.String countingNumberSuffix) {
    this.countingNumberSuffix = countingNumberSuffix;
    return this;
  }

  /**
   * Duration time in millisec.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDurationMs() {
    return durationMs;
  }

  /**
   * Duration time in millisec.
   * @param durationMs durationMs or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setDurationMs(java.lang.Integer durationMs) {
    this.durationMs = durationMs;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getForegroundBlue() {
    return foregroundBlue;
  }

  /**
   * @param foregroundBlue foregroundBlue or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setForegroundBlue(java.lang.Float foregroundBlue) {
    this.foregroundBlue = foregroundBlue;
    return this;
  }

  /**
   * Color information, normalized to [0-1]. This color information is extracted from the largest
   * word in the line entities of PageLayout message. See goodoc::PageLayoutEntity::Colors for
   * details.
   * @return value or {@code null} for none
   */
  public java.lang.Float getForegroundGray() {
    return foregroundGray;
  }

  /**
   * Color information, normalized to [0-1]. This color information is extracted from the largest
   * word in the line entities of PageLayout message. See goodoc::PageLayoutEntity::Colors for
   * details.
   * @param foregroundGray foregroundGray or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setForegroundGray(java.lang.Float foregroundGray) {
    this.foregroundGray = foregroundGray;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getForegroundGreen() {
    return foregroundGreen;
  }

  /**
   * @param foregroundGreen foregroundGreen or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setForegroundGreen(java.lang.Float foregroundGreen) {
    this.foregroundGreen = foregroundGreen;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getForegroundRed() {
    return foregroundRed;
  }

  /**
   * @param foregroundRed foregroundRed or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setForegroundRed(java.lang.Float foregroundRed) {
    this.foregroundRed = foregroundRed;
    return this;
  }

  /**
   * Whether or not this anchor had URL in its label before the label fixing step.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHadUrlInLabel() {
    return hadUrlInLabel;
  }

  /**
   * Whether or not this anchor had URL in its label before the label fixing step.
   * @param hadUrlInLabel hadUrlInLabel or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setHadUrlInLabel(java.lang.Boolean hadUrlInLabel) {
    this.hadUrlInLabel = hadUrlInLabel;
    return this;
  }

  /**
   * # of LINE entities that are recognized as handwritten texts over # of merged LINE entities.
   * @return value or {@code null} for none
   */
  public java.lang.Float getHandwrittenTextRatio() {
    return handwrittenTextRatio;
  }

  /**
   * # of LINE entities that are recognized as handwritten texts over # of merged LINE entities.
   * @param handwrittenTextRatio handwrittenTextRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setHandwrittenTextRatio(java.lang.Float handwrittenTextRatio) {
    this.handwrittenTextRatio = handwrittenTextRatio;
    return this;
  }

  /**
   * Whether or not the counting number in this anchor's label is out-of-order. If no counting
   * number is detected, this will be empty.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsCountingNumberOoo() {
    return isCountingNumberOoo;
  }

  /**
   * Whether or not the counting number in this anchor's label is out-of-order. If no counting
   * number is detected, this will be empty.
   * @param isCountingNumberOoo isCountingNumberOoo or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setIsCountingNumberOoo(java.lang.Boolean isCountingNumberOoo) {
    this.isCountingNumberOoo = isCountingNumberOoo;
    return this;
  }

  /**
   * Languages predicted by OCR. "repeated" is employed for this field because LINE entities of
   * PageLayout message are sometimes annotated with multiple languages, and also two VideoAnchor
   * that are annotated with different languages can be merged into one VideoAnchor. When two
   * VideoAnchor are merged into one, the weight field values of the new VideoAnchor will be the
   * average of weight field values weighted by merged_line_count.
   * @return value or {@code null} for none
   */
  public java.util.List<GoodocLanguageCombinationLanguage> getLanguages() {
    return languages;
  }

  /**
   * Languages predicted by OCR. "repeated" is employed for this field because LINE entities of
   * PageLayout message are sometimes annotated with multiple languages, and also two VideoAnchor
   * that are annotated with different languages can be merged into one VideoAnchor. When two
   * VideoAnchor are merged into one, the weight field values of the new VideoAnchor will be the
   * average of weight field values weighted by merged_line_count.
   * @param languages languages or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setLanguages(java.util.List<GoodocLanguageCombinationLanguage> languages) {
    this.languages = languages;
    return this;
  }

  /**
   * Left position of this text, by ratio [0, 1].
   * @return value or {@code null} for none
   */
  public java.lang.Float getLeftPositionRatio() {
    return leftPositionRatio;
  }

  /**
   * Left position of this text, by ratio [0, 1].
   * @param leftPositionRatio leftPositionRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setLeftPositionRatio(java.lang.Float leftPositionRatio) {
    this.leftPositionRatio = leftPositionRatio;
    return this;
  }

  /**
   * The median distance between this anchor and other anchors in the cluster. The way the distance
   * is calculated will vary depending on the clustering method.
   * @return value or {@code null} for none
   */
  public java.lang.Float getMedianClusteringDistance() {
    return medianClusteringDistance;
  }

  /**
   * The median distance between this anchor and other anchors in the cluster. The way the distance
   * is calculated will vary depending on the clustering method.
   * @param medianClusteringDistance medianClusteringDistance or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setMedianClusteringDistance(java.lang.Float medianClusteringDistance) {
    this.medianClusteringDistance = medianClusteringDistance;
    return this;
  }

  /**
   * The number of LINE entities used for this text.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMergedLineCount() {
    return mergedLineCount;
  }

  /**
   * The number of LINE entities used for this text.
   * @param mergedLineCount mergedLineCount or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setMergedLineCount(java.lang.Integer mergedLineCount) {
    this.mergedLineCount = mergedLineCount;
    return this;
  }

  /**
   * # of OCR texts that appear in the same frame. If duration of this OCR text is not zero, the
   * maximum number among multiple frames where this OCR text appears is set to this field.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNTextsInSameFrame() {
    return nTextsInSameFrame;
  }

  /**
   * # of OCR texts that appear in the same frame. If duration of this OCR text is not zero, the
   * maximum number among multiple frames where this OCR text appears is set to this field.
   * @param nTextsInSameFrame nTextsInSameFrame or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setNTextsInSameFrame(java.lang.Integer nTextsInSameFrame) {
    this.nTextsInSameFrame = nTextsInSameFrame;
    return this;
  }

  /**
   * The number of OCR texts that have the same text among temporally-merged OCR texts.
   * @return value or {@code null} for none
   */
  public java.lang.Float getOccurrenceCount() {
    return occurrenceCount;
  }

  /**
   * The number of OCR texts that have the same text among temporally-merged OCR texts.
   * @param occurrenceCount occurrenceCount or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setOccurrenceCount(java.lang.Float occurrenceCount) {
    this.occurrenceCount = occurrenceCount;
    return this;
  }

  /**
   * occurrence_count over the number of anchors merged to this anchor.
   * @return value or {@code null} for none
   */
  public java.lang.Float getOccurrenceRatio() {
    return occurrenceRatio;
  }

  /**
   * occurrence_count over the number of anchors merged to this anchor.
   * @param occurrenceRatio occurrenceRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setOccurrenceRatio(java.lang.Float occurrenceRatio) {
    this.occurrenceRatio = occurrenceRatio;
    return this;
  }

  /**
   * Features for the overlap between OCR and ASR.
   * @return value or {@code null} for none
   */
  public VideoContentSearchOcrAsrFeature getOcrAsrFeature() {
    return ocrAsrFeature;
  }

  /**
   * Features for the overlap between OCR and ASR.
   * @param ocrAsrFeature ocrAsrFeature or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setOcrAsrFeature(VideoContentSearchOcrAsrFeature ocrAsrFeature) {
    this.ocrAsrFeature = ocrAsrFeature;
    return this;
  }

  /**
   * The label this VideoAnchor originally had before label clearning steps.
   * @return value or {@code null} for none
   */
  public java.lang.String getOriginalLabel() {
    return originalLabel;
  }

  /**
   * The label this VideoAnchor originally had before label clearning steps.
   * @param originalLabel originalLabel or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setOriginalLabel(java.lang.String originalLabel) {
    this.originalLabel = originalLabel;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRelativeShotTimeMsPosteriorToEndTime() {
    return relativeShotTimeMsPosteriorToEndTime;
  }

  /**
   * @param relativeShotTimeMsPosteriorToEndTime relativeShotTimeMsPosteriorToEndTime or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setRelativeShotTimeMsPosteriorToEndTime(java.lang.Integer relativeShotTimeMsPosteriorToEndTime) {
    this.relativeShotTimeMsPosteriorToEndTime = relativeShotTimeMsPosteriorToEndTime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRelativeShotTimeMsPosteriorToStartTime() {
    return relativeShotTimeMsPosteriorToStartTime;
  }

  /**
   * @param relativeShotTimeMsPosteriorToStartTime relativeShotTimeMsPosteriorToStartTime or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setRelativeShotTimeMsPosteriorToStartTime(java.lang.Integer relativeShotTimeMsPosteriorToStartTime) {
    this.relativeShotTimeMsPosteriorToStartTime = relativeShotTimeMsPosteriorToStartTime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRelativeShotTimeMsPriorToEndTime() {
    return relativeShotTimeMsPriorToEndTime;
  }

  /**
   * @param relativeShotTimeMsPriorToEndTime relativeShotTimeMsPriorToEndTime or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setRelativeShotTimeMsPriorToEndTime(java.lang.Integer relativeShotTimeMsPriorToEndTime) {
    this.relativeShotTimeMsPriorToEndTime = relativeShotTimeMsPriorToEndTime;
    return this;
  }

  /**
   * Shot boundary time nearest to OnScreenText's start and end time. The time is relative to each
   * OnScreenText's start / end time (ex. -1 means shot time exists prior to the start / end time).
   * If shot time and start/end time is the same, 0 is set in 'prior' field. If no shot info is
   * available, the below fields are not set.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRelativeShotTimeMsPriorToStartTime() {
    return relativeShotTimeMsPriorToStartTime;
  }

  /**
   * Shot boundary time nearest to OnScreenText's start and end time. The time is relative to each
   * OnScreenText's start / end time (ex. -1 means shot time exists prior to the start / end time).
   * If shot time and start/end time is the same, 0 is set in 'prior' field. If no shot info is
   * available, the below fields are not set.
   * @param relativeShotTimeMsPriorToStartTime relativeShotTimeMsPriorToStartTime or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setRelativeShotTimeMsPriorToStartTime(java.lang.Integer relativeShotTimeMsPriorToStartTime) {
    this.relativeShotTimeMsPriorToStartTime = relativeShotTimeMsPriorToStartTime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getShotInfoCountDuringText() {
    return shotInfoCountDuringText;
  }

  /**
   * @param shotInfoCountDuringText shotInfoCountDuringText or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setShotInfoCountDuringText(java.lang.Integer shotInfoCountDuringText) {
    this.shotInfoCountDuringText = shotInfoCountDuringText;
    return this;
  }

  /**
   * OCR language that has the highest weight.
   * @return value or {@code null} for none
   */
  public java.lang.String getTopOcrLanguage() {
    return topOcrLanguage;
  }

  /**
   * OCR language that has the highest weight.
   * @param topOcrLanguage topOcrLanguage or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setTopOcrLanguage(java.lang.String topOcrLanguage) {
    this.topOcrLanguage = topOcrLanguage;
    return this;
  }

  /**
   * Note that top-left position is (0, 0) for position values. Top position of this text, by ratio
   * [0, 1].
   * @return value or {@code null} for none
   */
  public java.lang.Float getTopPositionRatio() {
    return topPositionRatio;
  }

  /**
   * Note that top-left position is (0, 0) for position values. Top position of this text, by ratio
   * [0, 1].
   * @param topPositionRatio topPositionRatio or {@code null} for none
   */
  public VideoContentSearchOnScreenTextFeature setTopPositionRatio(java.lang.Float topPositionRatio) {
    this.topPositionRatio = topPositionRatio;
    return this;
  }

  @Override
  public VideoContentSearchOnScreenTextFeature set(String fieldName, Object value) {
    return (VideoContentSearchOnScreenTextFeature) super.set(fieldName, value);
  }

  @Override
  public VideoContentSearchOnScreenTextFeature clone() {
    return (VideoContentSearchOnScreenTextFeature) super.clone();
  }

}
