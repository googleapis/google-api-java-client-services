/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * NEXT ID: 12
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ChatContentExtension extends com.google.api.client.json.GenericJson {

  /**
   * Annotations to decorate this event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<EventAnnotation> annotation;

  /**
   * This metadata informs how the placeholder string will be localized dynamically in Hangouts. See
   * go/localization-of-system-messages. This is only used as part of REGULAR_CHAT_MESSAGE events.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DynamitePlaceholderMetadata dynamitePlaceholderMetadata;

  /**
   * Is this event OnTR or OffTR? Since some events can be ON_THE_RECORD and have an
   * expiration_timestamp (for example enterprise retention users) we need to store the otr status.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String eventOtrStatus;

  /**
   * Group-link sharing toggle event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GroupLinkSharingModificationEvent groupLinkSharingModificationEvent;

  /**
   * Audio/video Hangout event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private HangoutEvent hangoutEvent;

  /**
   * Invite accepted events. Note: this is only used ephemerally to sync to Gmail. No actual cent is
   * stored in Papyrus.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private InviteAcceptedEvent inviteAcceptedEvent;

  /**
   * Join/leave events.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MembershipChangeEvent membershipChangeEvent;

  /**
   * Metadata for off-the-record message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OtrChatMessageEvent otrChatMessageEvent;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OtrModificationEvent otrModificationEvent;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RenameEvent renameEvent;

  /**
   * Annotations to decorate this event.
   * @return value or {@code null} for none
   */
  public java.util.List<EventAnnotation> getAnnotation() {
    return annotation;
  }

  /**
   * Annotations to decorate this event.
   * @param annotation annotation or {@code null} for none
   */
  public ChatContentExtension setAnnotation(java.util.List<EventAnnotation> annotation) {
    this.annotation = annotation;
    return this;
  }

  /**
   * This metadata informs how the placeholder string will be localized dynamically in Hangouts. See
   * go/localization-of-system-messages. This is only used as part of REGULAR_CHAT_MESSAGE events.
   * @return value or {@code null} for none
   */
  public DynamitePlaceholderMetadata getDynamitePlaceholderMetadata() {
    return dynamitePlaceholderMetadata;
  }

  /**
   * This metadata informs how the placeholder string will be localized dynamically in Hangouts. See
   * go/localization-of-system-messages. This is only used as part of REGULAR_CHAT_MESSAGE events.
   * @param dynamitePlaceholderMetadata dynamitePlaceholderMetadata or {@code null} for none
   */
  public ChatContentExtension setDynamitePlaceholderMetadata(DynamitePlaceholderMetadata dynamitePlaceholderMetadata) {
    this.dynamitePlaceholderMetadata = dynamitePlaceholderMetadata;
    return this;
  }

  /**
   * Is this event OnTR or OffTR? Since some events can be ON_THE_RECORD and have an
   * expiration_timestamp (for example enterprise retention users) we need to store the otr status.
   * @return value or {@code null} for none
   */
  public java.lang.String getEventOtrStatus() {
    return eventOtrStatus;
  }

  /**
   * Is this event OnTR or OffTR? Since some events can be ON_THE_RECORD and have an
   * expiration_timestamp (for example enterprise retention users) we need to store the otr status.
   * @param eventOtrStatus eventOtrStatus or {@code null} for none
   */
  public ChatContentExtension setEventOtrStatus(java.lang.String eventOtrStatus) {
    this.eventOtrStatus = eventOtrStatus;
    return this;
  }

  /**
   * Group-link sharing toggle event.
   * @return value or {@code null} for none
   */
  public GroupLinkSharingModificationEvent getGroupLinkSharingModificationEvent() {
    return groupLinkSharingModificationEvent;
  }

  /**
   * Group-link sharing toggle event.
   * @param groupLinkSharingModificationEvent groupLinkSharingModificationEvent or {@code null} for none
   */
  public ChatContentExtension setGroupLinkSharingModificationEvent(GroupLinkSharingModificationEvent groupLinkSharingModificationEvent) {
    this.groupLinkSharingModificationEvent = groupLinkSharingModificationEvent;
    return this;
  }

  /**
   * Audio/video Hangout event.
   * @return value or {@code null} for none
   */
  public HangoutEvent getHangoutEvent() {
    return hangoutEvent;
  }

  /**
   * Audio/video Hangout event.
   * @param hangoutEvent hangoutEvent or {@code null} for none
   */
  public ChatContentExtension setHangoutEvent(HangoutEvent hangoutEvent) {
    this.hangoutEvent = hangoutEvent;
    return this;
  }

  /**
   * Invite accepted events. Note: this is only used ephemerally to sync to Gmail. No actual cent is
   * stored in Papyrus.
   * @return value or {@code null} for none
   */
  public InviteAcceptedEvent getInviteAcceptedEvent() {
    return inviteAcceptedEvent;
  }

  /**
   * Invite accepted events. Note: this is only used ephemerally to sync to Gmail. No actual cent is
   * stored in Papyrus.
   * @param inviteAcceptedEvent inviteAcceptedEvent or {@code null} for none
   */
  public ChatContentExtension setInviteAcceptedEvent(InviteAcceptedEvent inviteAcceptedEvent) {
    this.inviteAcceptedEvent = inviteAcceptedEvent;
    return this;
  }

  /**
   * Join/leave events.
   * @return value or {@code null} for none
   */
  public MembershipChangeEvent getMembershipChangeEvent() {
    return membershipChangeEvent;
  }

  /**
   * Join/leave events.
   * @param membershipChangeEvent membershipChangeEvent or {@code null} for none
   */
  public ChatContentExtension setMembershipChangeEvent(MembershipChangeEvent membershipChangeEvent) {
    this.membershipChangeEvent = membershipChangeEvent;
    return this;
  }

  /**
   * Metadata for off-the-record message.
   * @return value or {@code null} for none
   */
  public OtrChatMessageEvent getOtrChatMessageEvent() {
    return otrChatMessageEvent;
  }

  /**
   * Metadata for off-the-record message.
   * @param otrChatMessageEvent otrChatMessageEvent or {@code null} for none
   */
  public ChatContentExtension setOtrChatMessageEvent(OtrChatMessageEvent otrChatMessageEvent) {
    this.otrChatMessageEvent = otrChatMessageEvent;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public OtrModificationEvent getOtrModificationEvent() {
    return otrModificationEvent;
  }

  /**
   * @param otrModificationEvent otrModificationEvent or {@code null} for none
   */
  public ChatContentExtension setOtrModificationEvent(OtrModificationEvent otrModificationEvent) {
    this.otrModificationEvent = otrModificationEvent;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public RenameEvent getRenameEvent() {
    return renameEvent;
  }

  /**
   * @param renameEvent renameEvent or {@code null} for none
   */
  public ChatContentExtension setRenameEvent(RenameEvent renameEvent) {
    this.renameEvent = renameEvent;
    return this;
  }

  @Override
  public ChatContentExtension set(String fieldName, Object value) {
    return (ChatContentExtension) super.set(fieldName, value);
  }

  @Override
  public ChatContentExtension clone() {
    return (ChatContentExtension) super.clone();
  }

}
