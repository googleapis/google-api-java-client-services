/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Image region produced by a detector.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImageUnderstandingIndexingImageRegion extends com.google.api.client.json.GenericJson {

  /**
   * Bounding box normalized to [0,1] scale independent on the image size. For example if the
   * original image has the size 1600x1200, the rectangle [200, 200, 800, 600] from the image would
   * have a normalized bounding box [1/8, 1/6, 1/2, 1/2].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosVisionGroundtruthdbNormalizedBoundingBox box;

  /**
   * Box confidence score. This is used to store the confidence of the box proposal, not the score
   * associated with any specific labels. The box proposal confidence score is a float number per
   * region between [0, 1] indicating how likely a box contains an "object".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float score;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String version;

  /**
   * Bounding box normalized to [0,1] scale independent on the image size. For example if the
   * original image has the size 1600x1200, the rectangle [200, 200, 800, 600] from the image would
   * have a normalized bounding box [1/8, 1/6, 1/2, 1/2].
   * @return value or {@code null} for none
   */
  public PhotosVisionGroundtruthdbNormalizedBoundingBox getBox() {
    return box;
  }

  /**
   * Bounding box normalized to [0,1] scale independent on the image size. For example if the
   * original image has the size 1600x1200, the rectangle [200, 200, 800, 600] from the image would
   * have a normalized bounding box [1/8, 1/6, 1/2, 1/2].
   * @param box box or {@code null} for none
   */
  public ImageUnderstandingIndexingImageRegion setBox(PhotosVisionGroundtruthdbNormalizedBoundingBox box) {
    this.box = box;
    return this;
  }

  /**
   * Box confidence score. This is used to store the confidence of the box proposal, not the score
   * associated with any specific labels. The box proposal confidence score is a float number per
   * region between [0, 1] indicating how likely a box contains an "object".
   * @return value or {@code null} for none
   */
  public java.lang.Float getScore() {
    return score;
  }

  /**
   * Box confidence score. This is used to store the confidence of the box proposal, not the score
   * associated with any specific labels. The box proposal confidence score is a float number per
   * region between [0, 1] indicating how likely a box contains an "object".
   * @param score score or {@code null} for none
   */
  public ImageUnderstandingIndexingImageRegion setScore(java.lang.Float score) {
    this.score = score;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getVersion() {
    return version;
  }

  /**
   * @param version version or {@code null} for none
   */
  public ImageUnderstandingIndexingImageRegion setVersion(java.lang.String version) {
    this.version = version;
    return this;
  }

  @Override
  public ImageUnderstandingIndexingImageRegion set(String fieldName, Object value) {
    return (ImageUnderstandingIndexingImageRegion) super.set(fieldName, value);
  }

  @Override
  public ImageUnderstandingIndexingImageRegion clone() {
    return (ImageUnderstandingIndexingImageRegion) super.clone();
  }

}
