/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * CrontabSpec can be used to specify the version time and frequency at which the backup is created.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CrontabSpec extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Scheduled backups contain an externally consistent copy of the database at the
   * version time specified in `schedule_spec.cron_spec`. However, Spanner might not initiate the
   * creation of the scheduled backups at that version time. Spanner initiates the creation of
   * scheduled backups within the time window bounded by the version_time specified in
   * `schedule_spec.cron_spec` and version_time + `creation_window`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String creationWindow;

  /**
   * Required. Textual representation of the crontab. User can customize the backup frequency and
   * the backup version time using the cron expression. The version time must be in UTC timezone.
   * The backup will contain an externally consistent copy of the database at the version time. Full
   * backups must be scheduled a minimum of 12 hours apart and incremental backups must be scheduled
   * a minimum of 4 hours apart. Examples of valid cron specifications: * `0 2/12 * * *` : every 12
   * hours at (2, 14) hours past midnight in UTC. * `0 2,14 * * *` : every 12 hours at (2, 14) hours
   * past midnight in UTC. * `0 4 * * *` : (incremental backups only) every 4 hours at (0, 4, 8, 12,
   * 16, 20) hours past midnight in UTC. * `0 2 * * *` : once a day at 2 past midnight in UTC. * `0
   * 2 * * 0` : once a week every Sunday at 2 past midnight in UTC. * `0 2 8 * *` : once a month on
   * 8th day at 2 past midnight in UTC.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String text;

  /**
   * Output only. The time zone of the times in `CrontabSpec.text`. Currently, only UTC is
   * supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String timeZone;

  /**
   * Output only. Scheduled backups contain an externally consistent copy of the database at the
   * version time specified in `schedule_spec.cron_spec`. However, Spanner might not initiate the
   * creation of the scheduled backups at that version time. Spanner initiates the creation of
   * scheduled backups within the time window bounded by the version_time specified in
   * `schedule_spec.cron_spec` and version_time + `creation_window`.
   * @return value or {@code null} for none
   */
  public String getCreationWindow() {
    return creationWindow;
  }

  /**
   * Output only. Scheduled backups contain an externally consistent copy of the database at the
   * version time specified in `schedule_spec.cron_spec`. However, Spanner might not initiate the
   * creation of the scheduled backups at that version time. Spanner initiates the creation of
   * scheduled backups within the time window bounded by the version_time specified in
   * `schedule_spec.cron_spec` and version_time + `creation_window`.
   * @param creationWindow creationWindow or {@code null} for none
   */
  public CrontabSpec setCreationWindow(String creationWindow) {
    this.creationWindow = creationWindow;
    return this;
  }

  /**
   * Required. Textual representation of the crontab. User can customize the backup frequency and
   * the backup version time using the cron expression. The version time must be in UTC timezone.
   * The backup will contain an externally consistent copy of the database at the version time. Full
   * backups must be scheduled a minimum of 12 hours apart and incremental backups must be scheduled
   * a minimum of 4 hours apart. Examples of valid cron specifications: * `0 2/12 * * *` : every 12
   * hours at (2, 14) hours past midnight in UTC. * `0 2,14 * * *` : every 12 hours at (2, 14) hours
   * past midnight in UTC. * `0 4 * * *` : (incremental backups only) every 4 hours at (0, 4, 8, 12,
   * 16, 20) hours past midnight in UTC. * `0 2 * * *` : once a day at 2 past midnight in UTC. * `0
   * 2 * * 0` : once a week every Sunday at 2 past midnight in UTC. * `0 2 8 * *` : once a month on
   * 8th day at 2 past midnight in UTC.
   * @return value or {@code null} for none
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * Required. Textual representation of the crontab. User can customize the backup frequency and
   * the backup version time using the cron expression. The version time must be in UTC timezone.
   * The backup will contain an externally consistent copy of the database at the version time. Full
   * backups must be scheduled a minimum of 12 hours apart and incremental backups must be scheduled
   * a minimum of 4 hours apart. Examples of valid cron specifications: * `0 2/12 * * *` : every 12
   * hours at (2, 14) hours past midnight in UTC. * `0 2,14 * * *` : every 12 hours at (2, 14) hours
   * past midnight in UTC. * `0 4 * * *` : (incremental backups only) every 4 hours at (0, 4, 8, 12,
   * 16, 20) hours past midnight in UTC. * `0 2 * * *` : once a day at 2 past midnight in UTC. * `0
   * 2 * * 0` : once a week every Sunday at 2 past midnight in UTC. * `0 2 8 * *` : once a month on
   * 8th day at 2 past midnight in UTC.
   * @param text text or {@code null} for none
   */
  public CrontabSpec setText(java.lang.String text) {
    this.text = text;
    return this;
  }

  /**
   * Output only. The time zone of the times in `CrontabSpec.text`. Currently, only UTC is
   * supported.
   * @return value or {@code null} for none
   */
  public java.lang.String getTimeZone() {
    return timeZone;
  }

  /**
   * Output only. The time zone of the times in `CrontabSpec.text`. Currently, only UTC is
   * supported.
   * @param timeZone timeZone or {@code null} for none
   */
  public CrontabSpec setTimeZone(java.lang.String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  @Override
  public CrontabSpec set(String fieldName, Object value) {
    return (CrontabSpec) super.set(fieldName, value);
  }

  @Override
  public CrontabSpec clone() {
    return (CrontabSpec) super.clone();
  }

}
