/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datafusion.v1beta1.model;

/**
 * Persistent Disk service-specific Data. Contains information that may not be appropriate for the
 * generic DRZ Augmented View. This currently includes LSV Colossus Roots and GCS Buckets.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Data Fusion API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PersistentDiskData extends com.google.api.client.json.GenericJson {

  /**
   * Path to Colossus root for an LSV. NOTE: Unlike `cr_ti_guris` and `cr_ti_prefixes`, the field
   * `cfs_roots` below does not need to be a GUri or GUri prefix. It can simply be any valid CFS or
   * CFS2 Path. The DRZ KR8 SIG has more details overall, but generally the `cfs_roots` provided
   * here should be scoped to an individual Persistent Disk. An example for a PD Disk with a disk ID
   * 3277719120423414466, follows: * `cr_ti_guris` could be ‘/cfs2/pj/pd-cloud-prod’ as this is a
   * valid GUri present in the DG KB and contains enough information to perform location monitoring
   * and scope ownership of the Production Object. * `cfs_roots` would be: ‘/cfs2/pj/pd-cloud-
   * staging/lsv000001234@/ lsv/projects~773365403387~zones~2700~disks~3277719120423414466 ~bank-
   * blue-careful-3526-lsv00054DB1B7254BA3/’ as this allows us to enumerate the files on CFS2 that
   * belong to an individual Disk.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> cfsRoots;

  /**
   * The GCS Buckets that back this snapshot or image. This is required as `cr_ti_prefixes` and
   * `cr_ti_guris` only accept TI resources. This should be the globally unique bucket name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> gcsBucketNames;

  /**
   * Path to Colossus root for an LSV. NOTE: Unlike `cr_ti_guris` and `cr_ti_prefixes`, the field
   * `cfs_roots` below does not need to be a GUri or GUri prefix. It can simply be any valid CFS or
   * CFS2 Path. The DRZ KR8 SIG has more details overall, but generally the `cfs_roots` provided
   * here should be scoped to an individual Persistent Disk. An example for a PD Disk with a disk ID
   * 3277719120423414466, follows: * `cr_ti_guris` could be ‘/cfs2/pj/pd-cloud-prod’ as this is a
   * valid GUri present in the DG KB and contains enough information to perform location monitoring
   * and scope ownership of the Production Object. * `cfs_roots` would be: ‘/cfs2/pj/pd-cloud-
   * staging/lsv000001234@/ lsv/projects~773365403387~zones~2700~disks~3277719120423414466 ~bank-
   * blue-careful-3526-lsv00054DB1B7254BA3/’ as this allows us to enumerate the files on CFS2 that
   * belong to an individual Disk.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCfsRoots() {
    return cfsRoots;
  }

  /**
   * Path to Colossus root for an LSV. NOTE: Unlike `cr_ti_guris` and `cr_ti_prefixes`, the field
   * `cfs_roots` below does not need to be a GUri or GUri prefix. It can simply be any valid CFS or
   * CFS2 Path. The DRZ KR8 SIG has more details overall, but generally the `cfs_roots` provided
   * here should be scoped to an individual Persistent Disk. An example for a PD Disk with a disk ID
   * 3277719120423414466, follows: * `cr_ti_guris` could be ‘/cfs2/pj/pd-cloud-prod’ as this is a
   * valid GUri present in the DG KB and contains enough information to perform location monitoring
   * and scope ownership of the Production Object. * `cfs_roots` would be: ‘/cfs2/pj/pd-cloud-
   * staging/lsv000001234@/ lsv/projects~773365403387~zones~2700~disks~3277719120423414466 ~bank-
   * blue-careful-3526-lsv00054DB1B7254BA3/’ as this allows us to enumerate the files on CFS2 that
   * belong to an individual Disk.
   * @param cfsRoots cfsRoots or {@code null} for none
   */
  public PersistentDiskData setCfsRoots(java.util.List<java.lang.String> cfsRoots) {
    this.cfsRoots = cfsRoots;
    return this;
  }

  /**
   * The GCS Buckets that back this snapshot or image. This is required as `cr_ti_prefixes` and
   * `cr_ti_guris` only accept TI resources. This should be the globally unique bucket name.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getGcsBucketNames() {
    return gcsBucketNames;
  }

  /**
   * The GCS Buckets that back this snapshot or image. This is required as `cr_ti_prefixes` and
   * `cr_ti_guris` only accept TI resources. This should be the globally unique bucket name.
   * @param gcsBucketNames gcsBucketNames or {@code null} for none
   */
  public PersistentDiskData setGcsBucketNames(java.util.List<java.lang.String> gcsBucketNames) {
    this.gcsBucketNames = gcsBucketNames;
    return this;
  }

  @Override
  public PersistentDiskData set(String fieldName, Object value) {
    return (PersistentDiskData) super.set(fieldName, value);
  }

  @Override
  public PersistentDiskData clone() {
    return (PersistentDiskData) super.clone();
  }

}
