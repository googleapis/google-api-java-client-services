/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datamigration.v1.model;

/**
 * A filter defining the entities that a mapping rule should be applied to. When more than one field
 * is specified, the rule is applied only to entities which match all the fields.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Database Migration API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MappingRuleFilter extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The rule should be applied to specific entities defined by their fully qualified
   * names.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> entities;

  /**
   * Optional. The rule should be applied to entities whose non-qualified name contains the given
   * string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String entityNameContains;

  /**
   * Optional. The rule should be applied to entities whose non-qualified name starts with the given
   * prefix.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String entityNamePrefix;

  /**
   * Optional. The rule should be applied to entities whose non-qualified name ends with the given
   * suffix.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String entityNameSuffix;

  /**
   * Optional. The rule should be applied to entities whose parent entity (fully qualified name)
   * matches the given value. For example, if the rule applies to a table entity, the expected value
   * should be a schema (schema). If the rule applies to a column or index entity, the expected
   * value can be either a schema (schema) or a table (schema.table)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String parentEntity;

  /**
   * Optional. The rule should be applied to specific entities defined by their fully qualified
   * names.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getEntities() {
    return entities;
  }

  /**
   * Optional. The rule should be applied to specific entities defined by their fully qualified
   * names.
   * @param entities entities or {@code null} for none
   */
  public MappingRuleFilter setEntities(java.util.List<java.lang.String> entities) {
    this.entities = entities;
    return this;
  }

  /**
   * Optional. The rule should be applied to entities whose non-qualified name contains the given
   * string.
   * @return value or {@code null} for none
   */
  public java.lang.String getEntityNameContains() {
    return entityNameContains;
  }

  /**
   * Optional. The rule should be applied to entities whose non-qualified name contains the given
   * string.
   * @param entityNameContains entityNameContains or {@code null} for none
   */
  public MappingRuleFilter setEntityNameContains(java.lang.String entityNameContains) {
    this.entityNameContains = entityNameContains;
    return this;
  }

  /**
   * Optional. The rule should be applied to entities whose non-qualified name starts with the given
   * prefix.
   * @return value or {@code null} for none
   */
  public java.lang.String getEntityNamePrefix() {
    return entityNamePrefix;
  }

  /**
   * Optional. The rule should be applied to entities whose non-qualified name starts with the given
   * prefix.
   * @param entityNamePrefix entityNamePrefix or {@code null} for none
   */
  public MappingRuleFilter setEntityNamePrefix(java.lang.String entityNamePrefix) {
    this.entityNamePrefix = entityNamePrefix;
    return this;
  }

  /**
   * Optional. The rule should be applied to entities whose non-qualified name ends with the given
   * suffix.
   * @return value or {@code null} for none
   */
  public java.lang.String getEntityNameSuffix() {
    return entityNameSuffix;
  }

  /**
   * Optional. The rule should be applied to entities whose non-qualified name ends with the given
   * suffix.
   * @param entityNameSuffix entityNameSuffix or {@code null} for none
   */
  public MappingRuleFilter setEntityNameSuffix(java.lang.String entityNameSuffix) {
    this.entityNameSuffix = entityNameSuffix;
    return this;
  }

  /**
   * Optional. The rule should be applied to entities whose parent entity (fully qualified name)
   * matches the given value. For example, if the rule applies to a table entity, the expected value
   * should be a schema (schema). If the rule applies to a column or index entity, the expected
   * value can be either a schema (schema) or a table (schema.table)
   * @return value or {@code null} for none
   */
  public java.lang.String getParentEntity() {
    return parentEntity;
  }

  /**
   * Optional. The rule should be applied to entities whose parent entity (fully qualified name)
   * matches the given value. For example, if the rule applies to a table entity, the expected value
   * should be a schema (schema). If the rule applies to a column or index entity, the expected
   * value can be either a schema (schema) or a table (schema.table)
   * @param parentEntity parentEntity or {@code null} for none
   */
  public MappingRuleFilter setParentEntity(java.lang.String parentEntity) {
    this.parentEntity = parentEntity;
    return this;
  }

  @Override
  public MappingRuleFilter set(String fieldName, Object value) {
    return (MappingRuleFilter) super.set(fieldName, value);
  }

  @Override
  public MappingRuleFilter clone() {
    return (MappingRuleFilter) super.clone();
  }

}
