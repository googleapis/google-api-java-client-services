/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.file.v1beta1.model;

/**
 * A Cloud Filestore share.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Filestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Share extends com.google.api.client.json.GenericJson {

  /**
   * File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes. Must be
   * greater than 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long capacityGb;

  /**
   * Output only. The time when the share was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * A description of the share with 2048 characters or less. Requests with longer descriptions will
   * be rejected.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Resource labels to represent user provided metadata.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * The mount name of the share. Must be 63 characters or less and consist of uppercase or
   * lowercase letters, numbers, and underscores.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mountName;

  /**
   * Output only. The resource name of the share, in the format
   * `projects/{project_id}/locations/{location_id}/instances/{instance_id}/shares/{share_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Nfs Export Options. There is a limit of 10 export options per file share.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NfsExportOptions> nfsExportOptions;

  static {
    // hack to force ProGuard to consider NfsExportOptions used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(NfsExportOptions.class);
  }

  /**
   * Output only. The share state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes. Must be
   * greater than 0.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCapacityGb() {
    return capacityGb;
  }

  /**
   * File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes. Must be
   * greater than 0.
   * @param capacityGb capacityGb or {@code null} for none
   */
  public Share setCapacityGb(java.lang.Long capacityGb) {
    this.capacityGb = capacityGb;
    return this;
  }

  /**
   * Output only. The time when the share was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time when the share was created.
   * @param createTime createTime or {@code null} for none
   */
  public Share setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * A description of the share with 2048 characters or less. Requests with longer descriptions will
   * be rejected.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * A description of the share with 2048 characters or less. Requests with longer descriptions will
   * be rejected.
   * @param description description or {@code null} for none
   */
  public Share setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Resource labels to represent user provided metadata.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Resource labels to represent user provided metadata.
   * @param labels labels or {@code null} for none
   */
  public Share setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * The mount name of the share. Must be 63 characters or less and consist of uppercase or
   * lowercase letters, numbers, and underscores.
   * @return value or {@code null} for none
   */
  public java.lang.String getMountName() {
    return mountName;
  }

  /**
   * The mount name of the share. Must be 63 characters or less and consist of uppercase or
   * lowercase letters, numbers, and underscores.
   * @param mountName mountName or {@code null} for none
   */
  public Share setMountName(java.lang.String mountName) {
    this.mountName = mountName;
    return this;
  }

  /**
   * Output only. The resource name of the share, in the format
   * `projects/{project_id}/locations/{location_id}/instances/{instance_id}/shares/{share_id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The resource name of the share, in the format
   * `projects/{project_id}/locations/{location_id}/instances/{instance_id}/shares/{share_id}`.
   * @param name name or {@code null} for none
   */
  public Share setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Nfs Export Options. There is a limit of 10 export options per file share.
   * @return value or {@code null} for none
   */
  public java.util.List<NfsExportOptions> getNfsExportOptions() {
    return nfsExportOptions;
  }

  /**
   * Nfs Export Options. There is a limit of 10 export options per file share.
   * @param nfsExportOptions nfsExportOptions or {@code null} for none
   */
  public Share setNfsExportOptions(java.util.List<NfsExportOptions> nfsExportOptions) {
    this.nfsExportOptions = nfsExportOptions;
    return this;
  }

  /**
   * Output only. The share state.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The share state.
   * @param state state or {@code null} for none
   */
  public Share setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  @Override
  public Share set(String fieldName, Object value) {
    return (Share) super.set(fieldName, value);
  }

  @Override
  public Share clone() {
    return (Share) super.clone();
  }

}
