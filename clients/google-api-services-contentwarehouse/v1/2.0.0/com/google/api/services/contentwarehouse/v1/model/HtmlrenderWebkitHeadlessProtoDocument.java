/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Next available tag: 24
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HtmlrenderWebkitHeadlessProtoDocument extends com.google.api.client.json.GenericJson {

  /**
   * Document's base uri.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String baseUri;

  /**
   * Document's charset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String charset;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer contentHeight;

  /**
   * Document's language.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String contentLanguage;

  /**
   * These fields contain the actual width and height of the document content, which may exceed the
   * size of the rendering viewport. *DEPRECATED* Use rendered_content_area instead. These two
   * fields always assume the content area begins at viewport coordinates (0,0).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer contentWidth;

  /**
   * A flat list of all the DOMTreeNodes in the DOM. A flat list is preferred to a tree to avoid
   * recursion and potential stack overflows. Note that the first node in this list will always be
   * the root node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoDOMTreeNode> domTreeNode;

  static {
    // hack to force ProGuard to consider HtmlrenderWebkitHeadlessProtoDOMTreeNode used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(HtmlrenderWebkitHeadlessProtoDOMTreeNode.class);
  }

  /**
   * A unique identifier for the frame (browser window of iframe) this document is loaded in. This
   * identifier matches the identifiers used in the timeline data to identify frames and therefore
   * only set if the record_timeline field of the RenderRequest message was set to true. frame_id is
   * not supported on Chromium.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String frameId;

  /**
   * The name of the frame (browser window of iframe) this document is loaded in. May not be set if
   * the frame name was empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String frameName;

  /**
   * -------------------------------------------------------------------------- Input context. These
   * fields are copied from RenderRequest so that Document can be a self contained protobuf. We
   * would've liked to place them in a ## nested InputContext message but it's too late now. ## Time
   * specified to RenderRequest.JavaScriptOptions.time_of_day, if any. ## End of input context.
   * Output-only fields below.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double javascriptTimeOfDay;

  /**
   * The chain of redirects (and redirect methods) used to get to the final resource for this
   * Document. Deprecated: Use the redirect events in the render_event field instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoRedirectHop> redirectHop;

  /**
   * Contains a list of Resources which the renderer requested -- both those that were found and
   * those that were not. Resources are returned in the order that they were requested.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoReferencedResource> referencedResource;

  /**
   * Different types of events which happened during rendering. All events for this document's frame
   * are included, so for example if a confirmation dialog is created before a client redirect to
   * this document the ConfirmationDialogEvent will still be included even though the dialog was
   * created by a different document. See render_event.proto for the types of events which are
   * recorded. Note that this is present regardless of whether record_timeline was set in the
   * RenderRequest.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoRenderEvent> renderEvent;

  /**
   * See htmlrender_webkit_headless_utils::SerializeRenderStyle() if a serialized css string is
   * wanted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoStyle> renderStyle;

  /**
   * A flat list of all the RenderTreeNodes from the render tree. A flat list is preferred to a tree
   * to avoid recursion and potential stack overflows. Note that the first node in this list will
   * always be the RenderTreeNode for the #document node (aka root).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoRenderTreeNode> renderTreeNode;

  /**
   * DEPRECATED - This field to be removed mid-2011. If you need this, use the library directly:
   * //google3/htmlrender/webkit_headless/snapshot_quality Indicates how good or bad the rendering
   * is from the perspective of the render tree. This is different from snapshot_quality_score in
   * that the quality analysis examines everything that can be rendered, not just the portion within
   * the document's viewport. It also ignores missing resouces with fixed width/height specified in
   * the tag. A score of 1 (100%) implies the entire document can be rendered at the best quality
   * and a score of 0 implies the entire document is unusable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double renderTreeQualityScore;

  /**
   * The bounding box which represents the whole area of rendered content, which may exceed the size
   * of the rendering viewport. It doesn't include the body's margin.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private HtmlrenderWebkitHeadlessProtoBox renderedContentArea;

  /**
   * Scroll offset of this document within the frame. Note that if expand_frame_to_content_height or
   * expand_frame_to_content_width is true, this field reflects the final scroll offset after frame
   * expansion.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer scrollX;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer scrollY;

  /**
   * DEPRECATED - This field to be removed mid-2011. If you need this, use the library directly:
   * //google3/htmlrender/webkit_headless/snapshot_quality Indicates how good or bad the rendered
   * snapshot is within the rendered content area within the document's viewport. A score of 1
   * (100%) implies the snapshot is of best quality and a score of 0 implies the snapshot is
   * unusable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double snapshotQualityScore;

  /**
   * Document's title.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String title;

  /**
   * Document uri is the URL that this document was fetched from. The displayed URL and base URL may
   * be different. If this document was not fetched from any URL (e.g. iframe with no src, populated
   * by script) uri will be "about:blank".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uri;

  /**
   * The page's layout size.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private HtmlrenderWebkitHeadlessProtoBox viewport;

  /**
   * Document's base uri.
   * @return value or {@code null} for none
   */
  public java.lang.String getBaseUri() {
    return baseUri;
  }

  /**
   * Document's base uri.
   * @param baseUri baseUri or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setBaseUri(java.lang.String baseUri) {
    this.baseUri = baseUri;
    return this;
  }

  /**
   * Document's charset.
   * @return value or {@code null} for none
   */
  public java.lang.String getCharset() {
    return charset;
  }

  /**
   * Document's charset.
   * @param charset charset or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setCharset(java.lang.String charset) {
    this.charset = charset;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getContentHeight() {
    return contentHeight;
  }

  /**
   * @param contentHeight contentHeight or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setContentHeight(java.lang.Integer contentHeight) {
    this.contentHeight = contentHeight;
    return this;
  }

  /**
   * Document's language.
   * @return value or {@code null} for none
   */
  public java.lang.String getContentLanguage() {
    return contentLanguage;
  }

  /**
   * Document's language.
   * @param contentLanguage contentLanguage or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setContentLanguage(java.lang.String contentLanguage) {
    this.contentLanguage = contentLanguage;
    return this;
  }

  /**
   * These fields contain the actual width and height of the document content, which may exceed the
   * size of the rendering viewport. *DEPRECATED* Use rendered_content_area instead. These two
   * fields always assume the content area begins at viewport coordinates (0,0).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getContentWidth() {
    return contentWidth;
  }

  /**
   * These fields contain the actual width and height of the document content, which may exceed the
   * size of the rendering viewport. *DEPRECATED* Use rendered_content_area instead. These two
   * fields always assume the content area begins at viewport coordinates (0,0).
   * @param contentWidth contentWidth or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setContentWidth(java.lang.Integer contentWidth) {
    this.contentWidth = contentWidth;
    return this;
  }

  /**
   * A flat list of all the DOMTreeNodes in the DOM. A flat list is preferred to a tree to avoid
   * recursion and potential stack overflows. Note that the first node in this list will always be
   * the root node.
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoDOMTreeNode> getDomTreeNode() {
    return domTreeNode;
  }

  /**
   * A flat list of all the DOMTreeNodes in the DOM. A flat list is preferred to a tree to avoid
   * recursion and potential stack overflows. Note that the first node in this list will always be
   * the root node.
   * @param domTreeNode domTreeNode or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setDomTreeNode(java.util.List<HtmlrenderWebkitHeadlessProtoDOMTreeNode> domTreeNode) {
    this.domTreeNode = domTreeNode;
    return this;
  }

  /**
   * A unique identifier for the frame (browser window of iframe) this document is loaded in. This
   * identifier matches the identifiers used in the timeline data to identify frames and therefore
   * only set if the record_timeline field of the RenderRequest message was set to true. frame_id is
   * not supported on Chromium.
   * @return value or {@code null} for none
   */
  public java.lang.String getFrameId() {
    return frameId;
  }

  /**
   * A unique identifier for the frame (browser window of iframe) this document is loaded in. This
   * identifier matches the identifiers used in the timeline data to identify frames and therefore
   * only set if the record_timeline field of the RenderRequest message was set to true. frame_id is
   * not supported on Chromium.
   * @param frameId frameId or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setFrameId(java.lang.String frameId) {
    this.frameId = frameId;
    return this;
  }

  /**
   * The name of the frame (browser window of iframe) this document is loaded in. May not be set if
   * the frame name was empty.
   * @return value or {@code null} for none
   */
  public java.lang.String getFrameName() {
    return frameName;
  }

  /**
   * The name of the frame (browser window of iframe) this document is loaded in. May not be set if
   * the frame name was empty.
   * @param frameName frameName or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setFrameName(java.lang.String frameName) {
    this.frameName = frameName;
    return this;
  }

  /**
   * -------------------------------------------------------------------------- Input context. These
   * fields are copied from RenderRequest so that Document can be a self contained protobuf. We
   * would've liked to place them in a ## nested InputContext message but it's too late now. ## Time
   * specified to RenderRequest.JavaScriptOptions.time_of_day, if any. ## End of input context.
   * Output-only fields below.
   * @return value or {@code null} for none
   */
  public java.lang.Double getJavascriptTimeOfDay() {
    return javascriptTimeOfDay;
  }

  /**
   * -------------------------------------------------------------------------- Input context. These
   * fields are copied from RenderRequest so that Document can be a self contained protobuf. We
   * would've liked to place them in a ## nested InputContext message but it's too late now. ## Time
   * specified to RenderRequest.JavaScriptOptions.time_of_day, if any. ## End of input context.
   * Output-only fields below.
   * @param javascriptTimeOfDay javascriptTimeOfDay or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setJavascriptTimeOfDay(java.lang.Double javascriptTimeOfDay) {
    this.javascriptTimeOfDay = javascriptTimeOfDay;
    return this;
  }

  /**
   * The chain of redirects (and redirect methods) used to get to the final resource for this
   * Document. Deprecated: Use the redirect events in the render_event field instead.
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoRedirectHop> getRedirectHop() {
    return redirectHop;
  }

  /**
   * The chain of redirects (and redirect methods) used to get to the final resource for this
   * Document. Deprecated: Use the redirect events in the render_event field instead.
   * @param redirectHop redirectHop or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setRedirectHop(java.util.List<HtmlrenderWebkitHeadlessProtoRedirectHop> redirectHop) {
    this.redirectHop = redirectHop;
    return this;
  }

  /**
   * Contains a list of Resources which the renderer requested -- both those that were found and
   * those that were not. Resources are returned in the order that they were requested.
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoReferencedResource> getReferencedResource() {
    return referencedResource;
  }

  /**
   * Contains a list of Resources which the renderer requested -- both those that were found and
   * those that were not. Resources are returned in the order that they were requested.
   * @param referencedResource referencedResource or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setReferencedResource(java.util.List<HtmlrenderWebkitHeadlessProtoReferencedResource> referencedResource) {
    this.referencedResource = referencedResource;
    return this;
  }

  /**
   * Different types of events which happened during rendering. All events for this document's frame
   * are included, so for example if a confirmation dialog is created before a client redirect to
   * this document the ConfirmationDialogEvent will still be included even though the dialog was
   * created by a different document. See render_event.proto for the types of events which are
   * recorded. Note that this is present regardless of whether record_timeline was set in the
   * RenderRequest.
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoRenderEvent> getRenderEvent() {
    return renderEvent;
  }

  /**
   * Different types of events which happened during rendering. All events for this document's frame
   * are included, so for example if a confirmation dialog is created before a client redirect to
   * this document the ConfirmationDialogEvent will still be included even though the dialog was
   * created by a different document. See render_event.proto for the types of events which are
   * recorded. Note that this is present regardless of whether record_timeline was set in the
   * RenderRequest.
   * @param renderEvent renderEvent or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setRenderEvent(java.util.List<HtmlrenderWebkitHeadlessProtoRenderEvent> renderEvent) {
    this.renderEvent = renderEvent;
    return this;
  }

  /**
   * See htmlrender_webkit_headless_utils::SerializeRenderStyle() if a serialized css string is
   * wanted.
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoStyle> getRenderStyle() {
    return renderStyle;
  }

  /**
   * See htmlrender_webkit_headless_utils::SerializeRenderStyle() if a serialized css string is
   * wanted.
   * @param renderStyle renderStyle or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setRenderStyle(java.util.List<HtmlrenderWebkitHeadlessProtoStyle> renderStyle) {
    this.renderStyle = renderStyle;
    return this;
  }

  /**
   * A flat list of all the RenderTreeNodes from the render tree. A flat list is preferred to a tree
   * to avoid recursion and potential stack overflows. Note that the first node in this list will
   * always be the RenderTreeNode for the #document node (aka root).
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoRenderTreeNode> getRenderTreeNode() {
    return renderTreeNode;
  }

  /**
   * A flat list of all the RenderTreeNodes from the render tree. A flat list is preferred to a tree
   * to avoid recursion and potential stack overflows. Note that the first node in this list will
   * always be the RenderTreeNode for the #document node (aka root).
   * @param renderTreeNode renderTreeNode or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setRenderTreeNode(java.util.List<HtmlrenderWebkitHeadlessProtoRenderTreeNode> renderTreeNode) {
    this.renderTreeNode = renderTreeNode;
    return this;
  }

  /**
   * DEPRECATED - This field to be removed mid-2011. If you need this, use the library directly:
   * //google3/htmlrender/webkit_headless/snapshot_quality Indicates how good or bad the rendering
   * is from the perspective of the render tree. This is different from snapshot_quality_score in
   * that the quality analysis examines everything that can be rendered, not just the portion within
   * the document's viewport. It also ignores missing resouces with fixed width/height specified in
   * the tag. A score of 1 (100%) implies the entire document can be rendered at the best quality
   * and a score of 0 implies the entire document is unusable.
   * @return value or {@code null} for none
   */
  public java.lang.Double getRenderTreeQualityScore() {
    return renderTreeQualityScore;
  }

  /**
   * DEPRECATED - This field to be removed mid-2011. If you need this, use the library directly:
   * //google3/htmlrender/webkit_headless/snapshot_quality Indicates how good or bad the rendering
   * is from the perspective of the render tree. This is different from snapshot_quality_score in
   * that the quality analysis examines everything that can be rendered, not just the portion within
   * the document's viewport. It also ignores missing resouces with fixed width/height specified in
   * the tag. A score of 1 (100%) implies the entire document can be rendered at the best quality
   * and a score of 0 implies the entire document is unusable.
   * @param renderTreeQualityScore renderTreeQualityScore or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setRenderTreeQualityScore(java.lang.Double renderTreeQualityScore) {
    this.renderTreeQualityScore = renderTreeQualityScore;
    return this;
  }

  /**
   * The bounding box which represents the whole area of rendered content, which may exceed the size
   * of the rendering viewport. It doesn't include the body's margin.
   * @return value or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoBox getRenderedContentArea() {
    return renderedContentArea;
  }

  /**
   * The bounding box which represents the whole area of rendered content, which may exceed the size
   * of the rendering viewport. It doesn't include the body's margin.
   * @param renderedContentArea renderedContentArea or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setRenderedContentArea(HtmlrenderWebkitHeadlessProtoBox renderedContentArea) {
    this.renderedContentArea = renderedContentArea;
    return this;
  }

  /**
   * Scroll offset of this document within the frame. Note that if expand_frame_to_content_height or
   * expand_frame_to_content_width is true, this field reflects the final scroll offset after frame
   * expansion.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getScrollX() {
    return scrollX;
  }

  /**
   * Scroll offset of this document within the frame. Note that if expand_frame_to_content_height or
   * expand_frame_to_content_width is true, this field reflects the final scroll offset after frame
   * expansion.
   * @param scrollX scrollX or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setScrollX(java.lang.Integer scrollX) {
    this.scrollX = scrollX;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getScrollY() {
    return scrollY;
  }

  /**
   * @param scrollY scrollY or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setScrollY(java.lang.Integer scrollY) {
    this.scrollY = scrollY;
    return this;
  }

  /**
   * DEPRECATED - This field to be removed mid-2011. If you need this, use the library directly:
   * //google3/htmlrender/webkit_headless/snapshot_quality Indicates how good or bad the rendered
   * snapshot is within the rendered content area within the document's viewport. A score of 1
   * (100%) implies the snapshot is of best quality and a score of 0 implies the snapshot is
   * unusable.
   * @return value or {@code null} for none
   */
  public java.lang.Double getSnapshotQualityScore() {
    return snapshotQualityScore;
  }

  /**
   * DEPRECATED - This field to be removed mid-2011. If you need this, use the library directly:
   * //google3/htmlrender/webkit_headless/snapshot_quality Indicates how good or bad the rendered
   * snapshot is within the rendered content area within the document's viewport. A score of 1
   * (100%) implies the snapshot is of best quality and a score of 0 implies the snapshot is
   * unusable.
   * @param snapshotQualityScore snapshotQualityScore or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setSnapshotQualityScore(java.lang.Double snapshotQualityScore) {
    this.snapshotQualityScore = snapshotQualityScore;
    return this;
  }

  /**
   * Document's title.
   * @return value or {@code null} for none
   */
  public java.lang.String getTitle() {
    return title;
  }

  /**
   * Document's title.
   * @param title title or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  /**
   * Document uri is the URL that this document was fetched from. The displayed URL and base URL may
   * be different. If this document was not fetched from any URL (e.g. iframe with no src, populated
   * by script) uri will be "about:blank".
   * @return value or {@code null} for none
   */
  public java.lang.String getUri() {
    return uri;
  }

  /**
   * Document uri is the URL that this document was fetched from. The displayed URL and base URL may
   * be different. If this document was not fetched from any URL (e.g. iframe with no src, populated
   * by script) uri will be "about:blank".
   * @param uri uri or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setUri(java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The page's layout size.
   * @return value or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoBox getViewport() {
    return viewport;
  }

  /**
   * The page's layout size.
   * @param viewport viewport or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoDocument setViewport(HtmlrenderWebkitHeadlessProtoBox viewport) {
    this.viewport = viewport;
    return this;
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoDocument set(String fieldName, Object value) {
    return (HtmlrenderWebkitHeadlessProtoDocument) super.set(fieldName, value);
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoDocument clone() {
    return (HtmlrenderWebkitHeadlessProtoDocument) super.clone();
  }

}
