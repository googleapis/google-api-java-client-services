/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vmmigration.v1.model;

/**
 * Represent the source Vmware VM details.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the VM Migration API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VmwareSourceVmDetails extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The VM architecture.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String architecture;

  /**
   * Output only. The total size of the disks being migrated in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long committedStorageBytes;

  /**
   * Output only. The disks attached to the source VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<VmwareDiskDetails> disks;

  static {
    // hack to force ProGuard to consider VmwareDiskDetails used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(VmwareDiskDetails.class);
  }

  /**
   * Output only. The firmware type of the source VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String firmware;

  /**
   * Output only. Information about VM capabilities needed for some Compute Engine features.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VmCapabilities vmCapabilitiesInfo;

  /**
   * Output only. The VM architecture.
   * @return value or {@code null} for none
   */
  public java.lang.String getArchitecture() {
    return architecture;
  }

  /**
   * Output only. The VM architecture.
   * @param architecture architecture or {@code null} for none
   */
  public VmwareSourceVmDetails setArchitecture(java.lang.String architecture) {
    this.architecture = architecture;
    return this;
  }

  /**
   * Output only. The total size of the disks being migrated in bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCommittedStorageBytes() {
    return committedStorageBytes;
  }

  /**
   * Output only. The total size of the disks being migrated in bytes.
   * @param committedStorageBytes committedStorageBytes or {@code null} for none
   */
  public VmwareSourceVmDetails setCommittedStorageBytes(java.lang.Long committedStorageBytes) {
    this.committedStorageBytes = committedStorageBytes;
    return this;
  }

  /**
   * Output only. The disks attached to the source VM.
   * @return value or {@code null} for none
   */
  public java.util.List<VmwareDiskDetails> getDisks() {
    return disks;
  }

  /**
   * Output only. The disks attached to the source VM.
   * @param disks disks or {@code null} for none
   */
  public VmwareSourceVmDetails setDisks(java.util.List<VmwareDiskDetails> disks) {
    this.disks = disks;
    return this;
  }

  /**
   * Output only. The firmware type of the source VM.
   * @return value or {@code null} for none
   */
  public java.lang.String getFirmware() {
    return firmware;
  }

  /**
   * Output only. The firmware type of the source VM.
   * @param firmware firmware or {@code null} for none
   */
  public VmwareSourceVmDetails setFirmware(java.lang.String firmware) {
    this.firmware = firmware;
    return this;
  }

  /**
   * Output only. Information about VM capabilities needed for some Compute Engine features.
   * @return value or {@code null} for none
   */
  public VmCapabilities getVmCapabilitiesInfo() {
    return vmCapabilitiesInfo;
  }

  /**
   * Output only. Information about VM capabilities needed for some Compute Engine features.
   * @param vmCapabilitiesInfo vmCapabilitiesInfo or {@code null} for none
   */
  public VmwareSourceVmDetails setVmCapabilitiesInfo(VmCapabilities vmCapabilitiesInfo) {
    this.vmCapabilitiesInfo = vmCapabilitiesInfo;
    return this;
  }

  @Override
  public VmwareSourceVmDetails set(String fieldName, Object value) {
    return (VmwareSourceVmDetails) super.set(fieldName, value);
  }

  @Override
  public VmwareSourceVmDetails clone() {
    return (VmwareSourceVmDetails) super.clone();
  }

}
