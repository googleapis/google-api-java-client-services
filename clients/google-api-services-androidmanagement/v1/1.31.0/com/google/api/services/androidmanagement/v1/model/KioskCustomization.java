/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidmanagement.v1.model;

/**
 * Settings controlling the behavior of a device in kiosk mode. To enable kiosk mode, set
 * kioskCustomLauncherEnabled to true or specify an app in the policy with installType KIOSK.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Android Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KioskCustomization extends com.google.api.client.json.GenericJson {

  /**
   * Specifies whether the Settings app is allowed in kiosk mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deviceSettings;

  /**
   * Sets the behavior of a device in kiosk mode when a user presses and holds (long-presses) the
   * Power button.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String powerButtonActions;

  /**
   * Specifies whether system info and notifications are disabled in kiosk mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String statusBar;

  /**
   * Specifies whether system error dialogs for crashed or unresponsive apps are blocked in kiosk
   * mode. When blocked, the system will force-stop the app as if the user chooses the "close app"
   * option on the UI.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String systemErrorWarnings;

  /**
   * Specifies which navigation features are enabled (e.g. Home, Overview buttons) in kiosk mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String systemNavigation;

  /**
   * Specifies whether the Settings app is allowed in kiosk mode.
   * @return value or {@code null} for none
   */
  public java.lang.String getDeviceSettings() {
    return deviceSettings;
  }

  /**
   * Specifies whether the Settings app is allowed in kiosk mode.
   * @param deviceSettings deviceSettings or {@code null} for none
   */
  public KioskCustomization setDeviceSettings(java.lang.String deviceSettings) {
    this.deviceSettings = deviceSettings;
    return this;
  }

  /**
   * Sets the behavior of a device in kiosk mode when a user presses and holds (long-presses) the
   * Power button.
   * @return value or {@code null} for none
   */
  public java.lang.String getPowerButtonActions() {
    return powerButtonActions;
  }

  /**
   * Sets the behavior of a device in kiosk mode when a user presses and holds (long-presses) the
   * Power button.
   * @param powerButtonActions powerButtonActions or {@code null} for none
   */
  public KioskCustomization setPowerButtonActions(java.lang.String powerButtonActions) {
    this.powerButtonActions = powerButtonActions;
    return this;
  }

  /**
   * Specifies whether system info and notifications are disabled in kiosk mode.
   * @return value or {@code null} for none
   */
  public java.lang.String getStatusBar() {
    return statusBar;
  }

  /**
   * Specifies whether system info and notifications are disabled in kiosk mode.
   * @param statusBar statusBar or {@code null} for none
   */
  public KioskCustomization setStatusBar(java.lang.String statusBar) {
    this.statusBar = statusBar;
    return this;
  }

  /**
   * Specifies whether system error dialogs for crashed or unresponsive apps are blocked in kiosk
   * mode. When blocked, the system will force-stop the app as if the user chooses the "close app"
   * option on the UI.
   * @return value or {@code null} for none
   */
  public java.lang.String getSystemErrorWarnings() {
    return systemErrorWarnings;
  }

  /**
   * Specifies whether system error dialogs for crashed or unresponsive apps are blocked in kiosk
   * mode. When blocked, the system will force-stop the app as if the user chooses the "close app"
   * option on the UI.
   * @param systemErrorWarnings systemErrorWarnings or {@code null} for none
   */
  public KioskCustomization setSystemErrorWarnings(java.lang.String systemErrorWarnings) {
    this.systemErrorWarnings = systemErrorWarnings;
    return this;
  }

  /**
   * Specifies which navigation features are enabled (e.g. Home, Overview buttons) in kiosk mode.
   * @return value or {@code null} for none
   */
  public java.lang.String getSystemNavigation() {
    return systemNavigation;
  }

  /**
   * Specifies which navigation features are enabled (e.g. Home, Overview buttons) in kiosk mode.
   * @param systemNavigation systemNavigation or {@code null} for none
   */
  public KioskCustomization setSystemNavigation(java.lang.String systemNavigation) {
    this.systemNavigation = systemNavigation;
    return this;
  }

  @Override
  public KioskCustomization set(String fieldName, Object value) {
    return (KioskCustomization) super.set(fieldName, value);
  }

  @Override
  public KioskCustomization clone() {
    return (KioskCustomization) super.clone();
  }

}
