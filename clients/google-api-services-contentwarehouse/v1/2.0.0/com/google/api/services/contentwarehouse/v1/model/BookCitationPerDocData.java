/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Per-doc data for the web page about the cited book Approximate size is on average ~10bytes
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BookCitationPerDocData extends com.google.api.client.json.GenericJson {

  /**
   * the book id for the main citation
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long bookId;

  /**
   * the discretized citation score for the main book. we map the raw score 1.0-20.0 to 0 - 127
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer discretizedCitationScore;

  /**
   * Is there a preview or excerpt of the book on this document?
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean previewable;

  /**
   * book id for the second citation if we can't separate the two top citations (they are too
   * close).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long secondBookId;

  /**
   * the discretized score for the second citation
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer secondDiscretizedCitationScore;

  /**
   * the book id for the main citation
   * @return value or {@code null} for none
   */
  public java.lang.Long getBookId() {
    return bookId;
  }

  /**
   * the book id for the main citation
   * @param bookId bookId or {@code null} for none
   */
  public BookCitationPerDocData setBookId(java.lang.Long bookId) {
    this.bookId = bookId;
    return this;
  }

  /**
   * the discretized citation score for the main book. we map the raw score 1.0-20.0 to 0 - 127
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDiscretizedCitationScore() {
    return discretizedCitationScore;
  }

  /**
   * the discretized citation score for the main book. we map the raw score 1.0-20.0 to 0 - 127
   * @param discretizedCitationScore discretizedCitationScore or {@code null} for none
   */
  public BookCitationPerDocData setDiscretizedCitationScore(java.lang.Integer discretizedCitationScore) {
    this.discretizedCitationScore = discretizedCitationScore;
    return this;
  }

  /**
   * Is there a preview or excerpt of the book on this document?
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPreviewable() {
    return previewable;
  }

  /**
   * Is there a preview or excerpt of the book on this document?
   * @param previewable previewable or {@code null} for none
   */
  public BookCitationPerDocData setPreviewable(java.lang.Boolean previewable) {
    this.previewable = previewable;
    return this;
  }

  /**
   * book id for the second citation if we can't separate the two top citations (they are too
   * close).
   * @return value or {@code null} for none
   */
  public java.lang.Long getSecondBookId() {
    return secondBookId;
  }

  /**
   * book id for the second citation if we can't separate the two top citations (they are too
   * close).
   * @param secondBookId secondBookId or {@code null} for none
   */
  public BookCitationPerDocData setSecondBookId(java.lang.Long secondBookId) {
    this.secondBookId = secondBookId;
    return this;
  }

  /**
   * the discretized score for the second citation
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSecondDiscretizedCitationScore() {
    return secondDiscretizedCitationScore;
  }

  /**
   * the discretized score for the second citation
   * @param secondDiscretizedCitationScore secondDiscretizedCitationScore or {@code null} for none
   */
  public BookCitationPerDocData setSecondDiscretizedCitationScore(java.lang.Integer secondDiscretizedCitationScore) {
    this.secondDiscretizedCitationScore = secondDiscretizedCitationScore;
    return this;
  }

  @Override
  public BookCitationPerDocData set(String fieldName, Object value) {
    return (BookCitationPerDocData) super.set(fieldName, value);
  }

  @Override
  public BookCitationPerDocData clone() {
    return (BookCitationPerDocData) super.clone();
  }

}
