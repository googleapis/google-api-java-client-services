/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Conceptually, timers are clocks that count down from an initial duration and ring when they reach
 * 0. In practice, as a timer is running, it holds a stable expiration time and computes the
 * remaining duration using the current time. When a timer is paused, it holds a stable remaining
 * duration.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleAssistantEmbeddedV1Timer extends com.google.api.client.json.GenericJson {

  /**
   * The time the timer is scheduled to expire. google.protobuf.Timestamp is a Unix epoch time with
   * a granularity of 1 nanosecond.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String expireTime;

  /**
   * A user-provided name for this timer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String label;

  /**
   * The duration of the timer when it was started. For the ADD_TIME action, this field contains the
   * amount of time to add to the timer with the given timer_id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String originalDuration;

  /**
   * The remaining duration for the timer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String remainingDuration;

  /**
   * Describes the part of the lifecycle a timer is in.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String status;

  /**
   * A string key used as an identifier to this timer. This key needs to be unique amongst all
   * timers on the device. The client can choose a mechanism of its choice to ensure this. If the
   * server suggests a timer_id, the client can either use the suggestion or create a new unique
   * timer_id of its choosing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String timerId;

  /**
   * The time the timer is scheduled to expire. google.protobuf.Timestamp is a Unix epoch time with
   * a granularity of 1 nanosecond.
   * @return value or {@code null} for none
   */
  public String getExpireTime() {
    return expireTime;
  }

  /**
   * The time the timer is scheduled to expire. google.protobuf.Timestamp is a Unix epoch time with
   * a granularity of 1 nanosecond.
   * @param expireTime expireTime or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Timer setExpireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * A user-provided name for this timer.
   * @return value or {@code null} for none
   */
  public java.lang.String getLabel() {
    return label;
  }

  /**
   * A user-provided name for this timer.
   * @param label label or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Timer setLabel(java.lang.String label) {
    this.label = label;
    return this;
  }

  /**
   * The duration of the timer when it was started. For the ADD_TIME action, this field contains the
   * amount of time to add to the timer with the given timer_id.
   * @return value or {@code null} for none
   */
  public String getOriginalDuration() {
    return originalDuration;
  }

  /**
   * The duration of the timer when it was started. For the ADD_TIME action, this field contains the
   * amount of time to add to the timer with the given timer_id.
   * @param originalDuration originalDuration or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Timer setOriginalDuration(String originalDuration) {
    this.originalDuration = originalDuration;
    return this;
  }

  /**
   * The remaining duration for the timer.
   * @return value or {@code null} for none
   */
  public String getRemainingDuration() {
    return remainingDuration;
  }

  /**
   * The remaining duration for the timer.
   * @param remainingDuration remainingDuration or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Timer setRemainingDuration(String remainingDuration) {
    this.remainingDuration = remainingDuration;
    return this;
  }

  /**
   * Describes the part of the lifecycle a timer is in.
   * @return value or {@code null} for none
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * Describes the part of the lifecycle a timer is in.
   * @param status status or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Timer setStatus(java.lang.String status) {
    this.status = status;
    return this;
  }

  /**
   * A string key used as an identifier to this timer. This key needs to be unique amongst all
   * timers on the device. The client can choose a mechanism of its choice to ensure this. If the
   * server suggests a timer_id, the client can either use the suggestion or create a new unique
   * timer_id of its choosing.
   * @return value or {@code null} for none
   */
  public java.lang.String getTimerId() {
    return timerId;
  }

  /**
   * A string key used as an identifier to this timer. This key needs to be unique amongst all
   * timers on the device. The client can choose a mechanism of its choice to ensure this. If the
   * server suggests a timer_id, the client can either use the suggestion or create a new unique
   * timer_id of its choosing.
   * @param timerId timerId or {@code null} for none
   */
  public GoogleAssistantEmbeddedV1Timer setTimerId(java.lang.String timerId) {
    this.timerId = timerId;
    return this;
  }

  @Override
  public GoogleAssistantEmbeddedV1Timer set(String fieldName, Object value) {
    return (GoogleAssistantEmbeddedV1Timer) super.set(fieldName, value);
  }

  @Override
  public GoogleAssistantEmbeddedV1Timer clone() {
    return (GoogleAssistantEmbeddedV1Timer) super.clone();
  }

}
