/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * RestrictTokens - used to perform "restricted searches" where boolean rules are used to filter the
 * subset of the database eligible for matching. We currently support V1 and V3 restrict systems. V3
 * restrict is a superset of V1 restrict. New users are encouraged to use V3 directly for its rich
 * features and cleaner semantics. See the document go/scam-v3-restricts, or read the comments in
 * //research/scam/proto/restricts.proto for details. Nevertheless, V1 restrict is still supported
 * by ScaM team. There's some minor tradeoff of performance between V1 and V3. User may prefer V1
 * over V3 if performance is the first priority. However, the CPU cost between V1 and V3 should be
 * very minor. --------------------------------------------------------------------------- The
 * semantics of V1 restrict is described below: V1 "forward" restricts: The dataset defines a
 * many:many mapping between the database points and a token space. Each token names a set of tokens
 * and each database point is a member of zero-to-many tokens. Queries specify zero-to-many
 * whitelist and blacklist tokens that activate database points according to the following rules: *
 * If whitelist_token is populated, the search will be restricted to points named by at least one
 * whitelist token. If whitelist_token is empty, all points are whitelisted by default. * If
 * blacklist_token is populated, it overrides the whitelist. Points named by a blacklisted token are
 * *not* searched. * Note that, if neither whitelist_token nor blacklist_token is populated, the
 * search remains unrestricted.
 * --------------------------------------------------------------------------- V1 "reverse"
 * restricts: Each database point is whitelisted and/or blacklisted for zero or more tokens,
 * specified by whitelist_token and blacklist_token fields. Each query specifies zero or more
 * tokens, and the same rules apply: * If a point's whitelist_token is populated, the point will
 * only be searched if the query has at least one matching whitelist token. If whitelist_token is
 * empty, the point is always whitelisted by default. * If a point's blacklist_token is populated,
 * it overrides the whitelist. The point will be ignored for any query with a matching blacklist
 * token. * Note that, if neither whitelist_token nor blacklist_token is populated, the point will
 * always be searched. NEXT ID TO USE: 9
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ResearchScamGenericFeatureVectorRestrictTokens extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.util.List<java.lang.Long> blacklistToken;

  /**
   * DEPRECATED
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScamCoscamRestrictDefinition definition;

  /**
   * DEPRECATED
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScamCoscamEasyRestrictDefinition easyDefinition;

  /**
   * B) Token Definitions (V1 Restricts) In "forward" mode: defined on database points In "reverse"
   * mode: defined on queries
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.util.List<java.lang.Long> tokenMembership;

  /**
   * DEPRECATED
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScamCoscamRestrictTokensV2 tokens;

  /**
   * Only ONE of the following sections should be used: A) V3 restricts. Defined in
   * //research/scam/proto/restricts.proto
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScamV3Restrict v3;

  /**
   * If this field is not empty, when query is in V1 restricts while database is in V3 restricts,
   * SCaM will update V1 query to V3 automatically instead of sending error messages. When updating
   * query from V1 to V3, SCaM server will use this field to fillin the 'namespace' field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String v3CompatibleNamespace;

  /**
   * C) Whitelist / Blacklist Definitions (V1 Restricts) In "forward" mode: defined on queries In
   * "reverse" mode: defined on database points
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.util.List<java.lang.Long> whitelistToken;

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Long> getBlacklistToken() {
    return blacklistToken;
  }

  /**
   * @param blacklistToken blacklistToken or {@code null} for none
   */
  public ResearchScamGenericFeatureVectorRestrictTokens setBlacklistToken(java.util.List<java.lang.Long> blacklistToken) {
    this.blacklistToken = blacklistToken;
    return this;
  }

  /**
   * DEPRECATED
   * @return value or {@code null} for none
   */
  public ResearchScamCoscamRestrictDefinition getDefinition() {
    return definition;
  }

  /**
   * DEPRECATED
   * @param definition definition or {@code null} for none
   */
  public ResearchScamGenericFeatureVectorRestrictTokens setDefinition(ResearchScamCoscamRestrictDefinition definition) {
    this.definition = definition;
    return this;
  }

  /**
   * DEPRECATED
   * @return value or {@code null} for none
   */
  public ResearchScamCoscamEasyRestrictDefinition getEasyDefinition() {
    return easyDefinition;
  }

  /**
   * DEPRECATED
   * @param easyDefinition easyDefinition or {@code null} for none
   */
  public ResearchScamGenericFeatureVectorRestrictTokens setEasyDefinition(ResearchScamCoscamEasyRestrictDefinition easyDefinition) {
    this.easyDefinition = easyDefinition;
    return this;
  }

  /**
   * B) Token Definitions (V1 Restricts) In "forward" mode: defined on database points In "reverse"
   * mode: defined on queries
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Long> getTokenMembership() {
    return tokenMembership;
  }

  /**
   * B) Token Definitions (V1 Restricts) In "forward" mode: defined on database points In "reverse"
   * mode: defined on queries
   * @param tokenMembership tokenMembership or {@code null} for none
   */
  public ResearchScamGenericFeatureVectorRestrictTokens setTokenMembership(java.util.List<java.lang.Long> tokenMembership) {
    this.tokenMembership = tokenMembership;
    return this;
  }

  /**
   * DEPRECATED
   * @return value or {@code null} for none
   */
  public ResearchScamCoscamRestrictTokensV2 getTokens() {
    return tokens;
  }

  /**
   * DEPRECATED
   * @param tokens tokens or {@code null} for none
   */
  public ResearchScamGenericFeatureVectorRestrictTokens setTokens(ResearchScamCoscamRestrictTokensV2 tokens) {
    this.tokens = tokens;
    return this;
  }

  /**
   * Only ONE of the following sections should be used: A) V3 restricts. Defined in
   * //research/scam/proto/restricts.proto
   * @return value or {@code null} for none
   */
  public ResearchScamV3Restrict getV3() {
    return v3;
  }

  /**
   * Only ONE of the following sections should be used: A) V3 restricts. Defined in
   * //research/scam/proto/restricts.proto
   * @param v3 v3 or {@code null} for none
   */
  public ResearchScamGenericFeatureVectorRestrictTokens setV3(ResearchScamV3Restrict v3) {
    this.v3 = v3;
    return this;
  }

  /**
   * If this field is not empty, when query is in V1 restricts while database is in V3 restricts,
   * SCaM will update V1 query to V3 automatically instead of sending error messages. When updating
   * query from V1 to V3, SCaM server will use this field to fillin the 'namespace' field.
   * @return value or {@code null} for none
   */
  public java.lang.String getV3CompatibleNamespace() {
    return v3CompatibleNamespace;
  }

  /**
   * If this field is not empty, when query is in V1 restricts while database is in V3 restricts,
   * SCaM will update V1 query to V3 automatically instead of sending error messages. When updating
   * query from V1 to V3, SCaM server will use this field to fillin the 'namespace' field.
   * @param v3CompatibleNamespace v3CompatibleNamespace or {@code null} for none
   */
  public ResearchScamGenericFeatureVectorRestrictTokens setV3CompatibleNamespace(java.lang.String v3CompatibleNamespace) {
    this.v3CompatibleNamespace = v3CompatibleNamespace;
    return this;
  }

  /**
   * C) Whitelist / Blacklist Definitions (V1 Restricts) In "forward" mode: defined on queries In
   * "reverse" mode: defined on database points
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Long> getWhitelistToken() {
    return whitelistToken;
  }

  /**
   * C) Whitelist / Blacklist Definitions (V1 Restricts) In "forward" mode: defined on queries In
   * "reverse" mode: defined on database points
   * @param whitelistToken whitelistToken or {@code null} for none
   */
  public ResearchScamGenericFeatureVectorRestrictTokens setWhitelistToken(java.util.List<java.lang.Long> whitelistToken) {
    this.whitelistToken = whitelistToken;
    return this;
  }

  @Override
  public ResearchScamGenericFeatureVectorRestrictTokens set(String fieldName, Object value) {
    return (ResearchScamGenericFeatureVectorRestrictTokens) super.set(fieldName, value);
  }

  @Override
  public ResearchScamGenericFeatureVectorRestrictTokens clone() {
    return (ResearchScamGenericFeatureVectorRestrictTokens) super.clone();
  }

}
