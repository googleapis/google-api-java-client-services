/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Details how to join the conference via a SIP gateway.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GatewaySipAccess extends com.google.api.client.json.GenericJson {

  /**
   * Permanent numeric code for manual entry on specially configured devices, currently the same as
   * the PSTN "Universal pin".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sipAccessCode;

  /**
   * The SIP URI the conference can be reached through. The string is on one of the formats: "sip:@"
   * "sips:@" where currently is the 13-digit universal pin (with the future option to support using
   * a Meet meeting code as well), and is a valid address to be resolved using a DNS SRV lookup, or
   * a dotted quad.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uri;

  /**
   * Permanent numeric code for manual entry on specially configured devices, currently the same as
   * the PSTN "Universal pin".
   * @return value or {@code null} for none
   */
  public java.lang.String getSipAccessCode() {
    return sipAccessCode;
  }

  /**
   * Permanent numeric code for manual entry on specially configured devices, currently the same as
   * the PSTN "Universal pin".
   * @param sipAccessCode sipAccessCode or {@code null} for none
   */
  public GatewaySipAccess setSipAccessCode(java.lang.String sipAccessCode) {
    this.sipAccessCode = sipAccessCode;
    return this;
  }

  /**
   * The SIP URI the conference can be reached through. The string is on one of the formats: "sip:@"
   * "sips:@" where currently is the 13-digit universal pin (with the future option to support using
   * a Meet meeting code as well), and is a valid address to be resolved using a DNS SRV lookup, or
   * a dotted quad.
   * @return value or {@code null} for none
   */
  public java.lang.String getUri() {
    return uri;
  }

  /**
   * The SIP URI the conference can be reached through. The string is on one of the formats: "sip:@"
   * "sips:@" where currently is the 13-digit universal pin (with the future option to support using
   * a Meet meeting code as well), and is a valid address to be resolved using a DNS SRV lookup, or
   * a dotted quad.
   * @param uri uri or {@code null} for none
   */
  public GatewaySipAccess setUri(java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  @Override
  public GatewaySipAccess set(String fieldName, Object value) {
    return (GatewaySipAccess) super.set(fieldName, value);
  }

  @Override
  public GatewaySipAccess clone() {
    return (GatewaySipAccess) super.clone();
  }

}
