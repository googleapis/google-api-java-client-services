/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.saasservicemgmt.v1beta1.model;

/**
 * Represents a single rollout execution and its results
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the SaaS Service Management API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Rollout extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Annotations is an unstructured key-value map stored with a resource that may be set
   * by external tools to store and retrieve arbitrary metadata. They are not queryable and should
   * be preserved when modifying objects. More info: https://kubernetes.io/docs/user-
   * guide/annotations
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> annotations;

  /**
   * Optional. Requested change to the execution of this rollout. Default RolloutControl.action is
   * ROLLOUT_ACTION_RUN meaning the rollout will be executed to completion while progressing through
   * all natural Rollout States (such as RUNNING -> SUCCEEDED or RUNNING -> FAILED). Requests can
   * only be made when the Rollout is in a non-terminal state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RolloutControl control;

  /**
   * Output only. The timestamp when the resource was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. Output only. The time when the rollout finished execution (regardless of success,
   * failure, or cancellation). Will be empty if the rollout hasn't finished yet. Once set, the
   * rollout is in terminal state and all the results are final.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String endTime;

  /**
   * Output only. An opaque value that uniquely identifies a version or generation of a resource. It
   * can be used to confirm that the client and server agree on the ordering of a resource being
   * written.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Optional. The labels on the resource, which can be used for categorization. similar to
   * Kubernetes resource labels.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Identifier. The resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/rollout/{rollout_id}"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. Output only. The direct parent rollout that this rollout is stemming from. The
   * resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/rollouts/{rollout_id}"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String parentRollout;

  /**
   * Optional. Immutable. Name of the Release that gets rolled out to target Units. Required if no
   * other type of release is specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String release;

  /**
   * Optional. Immutable. Name of the RolloutKind this rollout is stemming from and adhering to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rolloutKind;

  /**
   * Optional. The strategy used for executing this Rollout. This strategy will override whatever
   * strategy is specified in the RolloutType. If not specified on creation, the strategy from
   * RolloutType will be used. There are two supported values strategies which are used to control -
   * "Google.Cloud.Simple.AllAtOnce" - "Google.Cloud.Simple.OneLocationAtATime" A rollout with one
   * of these simple strategies will rollout across all locations defined in the targeted UnitKind's
   * Saas Locations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rolloutOrchestrationStrategy;

  /**
   * Optional. Output only. The root rollout that this rollout is stemming from. The resource name
   * (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/rollouts/{rollout_id}"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rootRollout;

  /**
   * Optional. Output only. The time when the rollout started executing. Will be empty if the
   * rollout hasn't started yet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String startTime;

  /**
   * Output only. Current state of the rollout.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Human readable message indicating details about the last state transition.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stateMessage;

  /**
   * Optional. Output only. The time when the rollout transitioned into its current state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String stateTransitionTime;

  /**
   * Optional. Output only. Details about the progress of the rollout.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RolloutStats stats;

  /**
   * Output only. The unique identifier of the resource. UID is unique in the time and space for
   * this resource within the scope of the service. It is typically generated by the server on
   * successful creation of a resource and must not be changed. UID is used to uniquely identify
   * resources with resource name reuses. This should be a UUID4.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Optional. CEL(https://github.com/google/cel-spec) formatted filter string against Unit. The
   * filter will be applied to determine the eligible unit population. This filter can only reduce,
   * but not expand the scope of the rollout. If not provided, the unit_filter from the RolloutType
   * will be used.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String unitFilter;

  /**
   * Output only. The timestamp when the resource was last updated. Any change to the resource made
   * by users must refresh this value. Changes to a resource made by the service should refresh this
   * value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Optional. Annotations is an unstructured key-value map stored with a resource that may be set
   * by external tools to store and retrieve arbitrary metadata. They are not queryable and should
   * be preserved when modifying objects. More info: https://kubernetes.io/docs/user-
   * guide/annotations
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAnnotations() {
    return annotations;
  }

  /**
   * Optional. Annotations is an unstructured key-value map stored with a resource that may be set
   * by external tools to store and retrieve arbitrary metadata. They are not queryable and should
   * be preserved when modifying objects. More info: https://kubernetes.io/docs/user-
   * guide/annotations
   * @param annotations annotations or {@code null} for none
   */
  public Rollout setAnnotations(java.util.Map<String, java.lang.String> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Optional. Requested change to the execution of this rollout. Default RolloutControl.action is
   * ROLLOUT_ACTION_RUN meaning the rollout will be executed to completion while progressing through
   * all natural Rollout States (such as RUNNING -> SUCCEEDED or RUNNING -> FAILED). Requests can
   * only be made when the Rollout is in a non-terminal state.
   * @return value or {@code null} for none
   */
  public RolloutControl getControl() {
    return control;
  }

  /**
   * Optional. Requested change to the execution of this rollout. Default RolloutControl.action is
   * ROLLOUT_ACTION_RUN meaning the rollout will be executed to completion while progressing through
   * all natural Rollout States (such as RUNNING -> SUCCEEDED or RUNNING -> FAILED). Requests can
   * only be made when the Rollout is in a non-terminal state.
   * @param control control or {@code null} for none
   */
  public Rollout setControl(RolloutControl control) {
    this.control = control;
    return this;
  }

  /**
   * Output only. The timestamp when the resource was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The timestamp when the resource was created.
   * @param createTime createTime or {@code null} for none
   */
  public Rollout setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. Output only. The time when the rollout finished execution (regardless of success,
   * failure, or cancellation). Will be empty if the rollout hasn't finished yet. Once set, the
   * rollout is in terminal state and all the results are final.
   * @return value or {@code null} for none
   */
  public String getEndTime() {
    return endTime;
  }

  /**
   * Optional. Output only. The time when the rollout finished execution (regardless of success,
   * failure, or cancellation). Will be empty if the rollout hasn't finished yet. Once set, the
   * rollout is in terminal state and all the results are final.
   * @param endTime endTime or {@code null} for none
   */
  public Rollout setEndTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Output only. An opaque value that uniquely identifies a version or generation of a resource. It
   * can be used to confirm that the client and server agree on the ordering of a resource being
   * written.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Output only. An opaque value that uniquely identifies a version or generation of a resource. It
   * can be used to confirm that the client and server agree on the ordering of a resource being
   * written.
   * @param etag etag or {@code null} for none
   */
  public Rollout setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. The labels on the resource, which can be used for categorization. similar to
   * Kubernetes resource labels.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. The labels on the resource, which can be used for categorization. similar to
   * Kubernetes resource labels.
   * @param labels labels or {@code null} for none
   */
  public Rollout setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Identifier. The resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/rollout/{rollout_id}"
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/rollout/{rollout_id}"
   * @param name name or {@code null} for none
   */
  public Rollout setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Output only. The direct parent rollout that this rollout is stemming from. The
   * resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/rollouts/{rollout_id}"
   * @return value or {@code null} for none
   */
  public java.lang.String getParentRollout() {
    return parentRollout;
  }

  /**
   * Optional. Output only. The direct parent rollout that this rollout is stemming from. The
   * resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/rollouts/{rollout_id}"
   * @param parentRollout parentRollout or {@code null} for none
   */
  public Rollout setParentRollout(java.lang.String parentRollout) {
    this.parentRollout = parentRollout;
    return this;
  }

  /**
   * Optional. Immutable. Name of the Release that gets rolled out to target Units. Required if no
   * other type of release is specified.
   * @return value or {@code null} for none
   */
  public java.lang.String getRelease() {
    return release;
  }

  /**
   * Optional. Immutable. Name of the Release that gets rolled out to target Units. Required if no
   * other type of release is specified.
   * @param release release or {@code null} for none
   */
  public Rollout setRelease(java.lang.String release) {
    this.release = release;
    return this;
  }

  /**
   * Optional. Immutable. Name of the RolloutKind this rollout is stemming from and adhering to.
   * @return value or {@code null} for none
   */
  public java.lang.String getRolloutKind() {
    return rolloutKind;
  }

  /**
   * Optional. Immutable. Name of the RolloutKind this rollout is stemming from and adhering to.
   * @param rolloutKind rolloutKind or {@code null} for none
   */
  public Rollout setRolloutKind(java.lang.String rolloutKind) {
    this.rolloutKind = rolloutKind;
    return this;
  }

  /**
   * Optional. The strategy used for executing this Rollout. This strategy will override whatever
   * strategy is specified in the RolloutType. If not specified on creation, the strategy from
   * RolloutType will be used. There are two supported values strategies which are used to control -
   * "Google.Cloud.Simple.AllAtOnce" - "Google.Cloud.Simple.OneLocationAtATime" A rollout with one
   * of these simple strategies will rollout across all locations defined in the targeted UnitKind's
   * Saas Locations.
   * @return value or {@code null} for none
   */
  public java.lang.String getRolloutOrchestrationStrategy() {
    return rolloutOrchestrationStrategy;
  }

  /**
   * Optional. The strategy used for executing this Rollout. This strategy will override whatever
   * strategy is specified in the RolloutType. If not specified on creation, the strategy from
   * RolloutType will be used. There are two supported values strategies which are used to control -
   * "Google.Cloud.Simple.AllAtOnce" - "Google.Cloud.Simple.OneLocationAtATime" A rollout with one
   * of these simple strategies will rollout across all locations defined in the targeted UnitKind's
   * Saas Locations.
   * @param rolloutOrchestrationStrategy rolloutOrchestrationStrategy or {@code null} for none
   */
  public Rollout setRolloutOrchestrationStrategy(java.lang.String rolloutOrchestrationStrategy) {
    this.rolloutOrchestrationStrategy = rolloutOrchestrationStrategy;
    return this;
  }

  /**
   * Optional. Output only. The root rollout that this rollout is stemming from. The resource name
   * (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/rollouts/{rollout_id}"
   * @return value or {@code null} for none
   */
  public java.lang.String getRootRollout() {
    return rootRollout;
  }

  /**
   * Optional. Output only. The root rollout that this rollout is stemming from. The resource name
   * (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/rollouts/{rollout_id}"
   * @param rootRollout rootRollout or {@code null} for none
   */
  public Rollout setRootRollout(java.lang.String rootRollout) {
    this.rootRollout = rootRollout;
    return this;
  }

  /**
   * Optional. Output only. The time when the rollout started executing. Will be empty if the
   * rollout hasn't started yet.
   * @return value or {@code null} for none
   */
  public String getStartTime() {
    return startTime;
  }

  /**
   * Optional. Output only. The time when the rollout started executing. Will be empty if the
   * rollout hasn't started yet.
   * @param startTime startTime or {@code null} for none
   */
  public Rollout setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Output only. Current state of the rollout.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. Current state of the rollout.
   * @param state state or {@code null} for none
   */
  public Rollout setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Human readable message indicating details about the last state transition.
   * @return value or {@code null} for none
   */
  public java.lang.String getStateMessage() {
    return stateMessage;
  }

  /**
   * Output only. Human readable message indicating details about the last state transition.
   * @param stateMessage stateMessage or {@code null} for none
   */
  public Rollout setStateMessage(java.lang.String stateMessage) {
    this.stateMessage = stateMessage;
    return this;
  }

  /**
   * Optional. Output only. The time when the rollout transitioned into its current state.
   * @return value or {@code null} for none
   */
  public String getStateTransitionTime() {
    return stateTransitionTime;
  }

  /**
   * Optional. Output only. The time when the rollout transitioned into its current state.
   * @param stateTransitionTime stateTransitionTime or {@code null} for none
   */
  public Rollout setStateTransitionTime(String stateTransitionTime) {
    this.stateTransitionTime = stateTransitionTime;
    return this;
  }

  /**
   * Optional. Output only. Details about the progress of the rollout.
   * @return value or {@code null} for none
   */
  public RolloutStats getStats() {
    return stats;
  }

  /**
   * Optional. Output only. Details about the progress of the rollout.
   * @param stats stats or {@code null} for none
   */
  public Rollout setStats(RolloutStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Output only. The unique identifier of the resource. UID is unique in the time and space for
   * this resource within the scope of the service. It is typically generated by the server on
   * successful creation of a resource and must not be changed. UID is used to uniquely identify
   * resources with resource name reuses. This should be a UUID4.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. The unique identifier of the resource. UID is unique in the time and space for
   * this resource within the scope of the service. It is typically generated by the server on
   * successful creation of a resource and must not be changed. UID is used to uniquely identify
   * resources with resource name reuses. This should be a UUID4.
   * @param uid uid or {@code null} for none
   */
  public Rollout setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Optional. CEL(https://github.com/google/cel-spec) formatted filter string against Unit. The
   * filter will be applied to determine the eligible unit population. This filter can only reduce,
   * but not expand the scope of the rollout. If not provided, the unit_filter from the RolloutType
   * will be used.
   * @return value or {@code null} for none
   */
  public java.lang.String getUnitFilter() {
    return unitFilter;
  }

  /**
   * Optional. CEL(https://github.com/google/cel-spec) formatted filter string against Unit. The
   * filter will be applied to determine the eligible unit population. This filter can only reduce,
   * but not expand the scope of the rollout. If not provided, the unit_filter from the RolloutType
   * will be used.
   * @param unitFilter unitFilter or {@code null} for none
   */
  public Rollout setUnitFilter(java.lang.String unitFilter) {
    this.unitFilter = unitFilter;
    return this;
  }

  /**
   * Output only. The timestamp when the resource was last updated. Any change to the resource made
   * by users must refresh this value. Changes to a resource made by the service should refresh this
   * value.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The timestamp when the resource was last updated. Any change to the resource made
   * by users must refresh this value. Changes to a resource made by the service should refresh this
   * value.
   * @param updateTime updateTime or {@code null} for none
   */
  public Rollout setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public Rollout set(String fieldName, Object value) {
    return (Rollout) super.set(fieldName, value);
  }

  @Override
  public Rollout clone() {
    return (Rollout) super.clone();
  }

}
