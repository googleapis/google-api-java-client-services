/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Next Tag: 8
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SocialPersonalizationKnexAnnotationItem extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float confidence;

  /**
   * Description of the item for debugging. Note that this field is populated only in a few select
   * places.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * If this field exists, then there exists a commonly used MID (typically a public MID, i.e., one
   * in /m/) that approximates the meaning for this particular k'nex topic. For example, the value
   * of this field for k'nex topic Tennis (/t/236) is /m/07bs0. The difference between k'nex
   * /m/07bs0 and webref /m/07bs0 is as follows. If a content is annotated with webref /m/07bs0,
   * then the content has to explicitly mention "Tennis" in some way, whereas if a content is
   * annotated with k'nex /m/07bs0, then the content simply needs to talk about stuff related to
   * tennis. Note that this field is not populated for all queries. For example, the compound
   * concept "Tennis in California" does not have an associated mid. This field is intended to help
   * external clients transit to k'nex.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger equivalentMid;

  /**
   * A score that measures how broad / narrow a topic is, independent of the document and/or user
   * profile. This is an experimental score and is not populated by default. Currently, it is in the
   * range of [0, 1], where the higher the score is, the more general a topic is. Please talk to
   * sherlock-dev@ before using this score. Populated when debug_level > 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float generality;

  /**
   * This is an MID in the /t/ namespace. We will migrate them to /g/ in Q3'15.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger mid;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SocialPersonalizationKnexAnnotationItemTopic> relatedEntity;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float topicality;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getConfidence() {
    return confidence;
  }

  /**
   * @param confidence confidence or {@code null} for none
   */
  public SocialPersonalizationKnexAnnotationItem setConfidence(java.lang.Float confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Description of the item for debugging. Note that this field is populated only in a few select
   * places.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Description of the item for debugging. Note that this field is populated only in a few select
   * places.
   * @param description description or {@code null} for none
   */
  public SocialPersonalizationKnexAnnotationItem setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * If this field exists, then there exists a commonly used MID (typically a public MID, i.e., one
   * in /m/) that approximates the meaning for this particular k'nex topic. For example, the value
   * of this field for k'nex topic Tennis (/t/236) is /m/07bs0. The difference between k'nex
   * /m/07bs0 and webref /m/07bs0 is as follows. If a content is annotated with webref /m/07bs0,
   * then the content has to explicitly mention "Tennis" in some way, whereas if a content is
   * annotated with k'nex /m/07bs0, then the content simply needs to talk about stuff related to
   * tennis. Note that this field is not populated for all queries. For example, the compound
   * concept "Tennis in California" does not have an associated mid. This field is intended to help
   * external clients transit to k'nex.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getEquivalentMid() {
    return equivalentMid;
  }

  /**
   * If this field exists, then there exists a commonly used MID (typically a public MID, i.e., one
   * in /m/) that approximates the meaning for this particular k'nex topic. For example, the value
   * of this field for k'nex topic Tennis (/t/236) is /m/07bs0. The difference between k'nex
   * /m/07bs0 and webref /m/07bs0 is as follows. If a content is annotated with webref /m/07bs0,
   * then the content has to explicitly mention "Tennis" in some way, whereas if a content is
   * annotated with k'nex /m/07bs0, then the content simply needs to talk about stuff related to
   * tennis. Note that this field is not populated for all queries. For example, the compound
   * concept "Tennis in California" does not have an associated mid. This field is intended to help
   * external clients transit to k'nex.
   * @param equivalentMid equivalentMid or {@code null} for none
   */
  public SocialPersonalizationKnexAnnotationItem setEquivalentMid(java.math.BigInteger equivalentMid) {
    this.equivalentMid = equivalentMid;
    return this;
  }

  /**
   * A score that measures how broad / narrow a topic is, independent of the document and/or user
   * profile. This is an experimental score and is not populated by default. Currently, it is in the
   * range of [0, 1], where the higher the score is, the more general a topic is. Please talk to
   * sherlock-dev@ before using this score. Populated when debug_level > 0.
   * @return value or {@code null} for none
   */
  public java.lang.Float getGenerality() {
    return generality;
  }

  /**
   * A score that measures how broad / narrow a topic is, independent of the document and/or user
   * profile. This is an experimental score and is not populated by default. Currently, it is in the
   * range of [0, 1], where the higher the score is, the more general a topic is. Please talk to
   * sherlock-dev@ before using this score. Populated when debug_level > 0.
   * @param generality generality or {@code null} for none
   */
  public SocialPersonalizationKnexAnnotationItem setGenerality(java.lang.Float generality) {
    this.generality = generality;
    return this;
  }

  /**
   * This is an MID in the /t/ namespace. We will migrate them to /g/ in Q3'15.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getMid() {
    return mid;
  }

  /**
   * This is an MID in the /t/ namespace. We will migrate them to /g/ in Q3'15.
   * @param mid mid or {@code null} for none
   */
  public SocialPersonalizationKnexAnnotationItem setMid(java.math.BigInteger mid) {
    this.mid = mid;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<SocialPersonalizationKnexAnnotationItemTopic> getRelatedEntity() {
    return relatedEntity;
  }

  /**
   * @param relatedEntity relatedEntity or {@code null} for none
   */
  public SocialPersonalizationKnexAnnotationItem setRelatedEntity(java.util.List<SocialPersonalizationKnexAnnotationItemTopic> relatedEntity) {
    this.relatedEntity = relatedEntity;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getTopicality() {
    return topicality;
  }

  /**
   * @param topicality topicality or {@code null} for none
   */
  public SocialPersonalizationKnexAnnotationItem setTopicality(java.lang.Float topicality) {
    this.topicality = topicality;
    return this;
  }

  @Override
  public SocialPersonalizationKnexAnnotationItem set(String fieldName, Object value) {
    return (SocialPersonalizationKnexAnnotationItem) super.set(fieldName, value);
  }

  @Override
  public SocialPersonalizationKnexAnnotationItem clone() {
    return (SocialPersonalizationKnexAnnotationItem) super.clone();
  }

}
