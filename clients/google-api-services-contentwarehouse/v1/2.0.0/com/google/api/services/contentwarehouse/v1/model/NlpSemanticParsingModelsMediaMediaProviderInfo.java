/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A media provider and the deeplinks provided by the provider. MediaProviderInfo is an abstraction
 * for topics of multiple media related KG types under /base/mediaasset domain and /media_common.
 * It's often eligible for topics of media related KG types like /broadcast/radio_station,
 * /film/film, /music/artist, /music/album, /music/recording_cluster, /music/recording,
 * /tv/tv_program, etc. See go/media-pq for design details. Next ID: 6
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSemanticParsingModelsMediaMediaProviderInfo extends com.google.api.client.json.GenericJson {

  /**
   * Deeplinks provided by the provider. If empty it indicates that the media is unavailable with
   * the provider, e.g. due to country restrictions or limited catalog.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingModelsMediaDeeplinkInfo> deeplinkInfo;

  static {
    // hack to force ProGuard to consider NlpSemanticParsingModelsMediaDeeplinkInfo used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(NlpSemanticParsingModelsMediaDeeplinkInfo.class);
  }

  /**
   * The unique and reverse unique provider enumerator in KG (e.g., "ORANGE_SPAIN" for
   * /g/11h6nkfyrm). It is more stable than the KG mid. See go/kema-api#keys. Some mids cannot have
   * the enumerator property due to historical reason (e.g., multiple media providers were created
   * for iTunes and only ""/g/11fhyxjwt5" has provider enumerator as "ITUNES_NEW" in KG). These
   * entities need to have hard-coded key (e.g., "/m/019g58" has key "ITUNES") kept outside of KG.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kgProviderKey;

  /**
   * Media ID of a MediaItem in a MediaBrowseTree (MBT). This field is used to play a specific media
   * item from MBT using playFromMediaId API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mediaId;

  /**
   * The machine ID (MID) of the media provider.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String providerMid;

  /**
   * The name of the media provider.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String providerName;

  /**
   * Deeplinks provided by the provider. If empty it indicates that the media is unavailable with
   * the provider, e.g. due to country restrictions or limited catalog.
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingModelsMediaDeeplinkInfo> getDeeplinkInfo() {
    return deeplinkInfo;
  }

  /**
   * Deeplinks provided by the provider. If empty it indicates that the media is unavailable with
   * the provider, e.g. due to country restrictions or limited catalog.
   * @param deeplinkInfo deeplinkInfo or {@code null} for none
   */
  public NlpSemanticParsingModelsMediaMediaProviderInfo setDeeplinkInfo(java.util.List<NlpSemanticParsingModelsMediaDeeplinkInfo> deeplinkInfo) {
    this.deeplinkInfo = deeplinkInfo;
    return this;
  }

  /**
   * The unique and reverse unique provider enumerator in KG (e.g., "ORANGE_SPAIN" for
   * /g/11h6nkfyrm). It is more stable than the KG mid. See go/kema-api#keys. Some mids cannot have
   * the enumerator property due to historical reason (e.g., multiple media providers were created
   * for iTunes and only ""/g/11fhyxjwt5" has provider enumerator as "ITUNES_NEW" in KG). These
   * entities need to have hard-coded key (e.g., "/m/019g58" has key "ITUNES") kept outside of KG.
   * @return value or {@code null} for none
   */
  public java.lang.String getKgProviderKey() {
    return kgProviderKey;
  }

  /**
   * The unique and reverse unique provider enumerator in KG (e.g., "ORANGE_SPAIN" for
   * /g/11h6nkfyrm). It is more stable than the KG mid. See go/kema-api#keys. Some mids cannot have
   * the enumerator property due to historical reason (e.g., multiple media providers were created
   * for iTunes and only ""/g/11fhyxjwt5" has provider enumerator as "ITUNES_NEW" in KG). These
   * entities need to have hard-coded key (e.g., "/m/019g58" has key "ITUNES") kept outside of KG.
   * @param kgProviderKey kgProviderKey or {@code null} for none
   */
  public NlpSemanticParsingModelsMediaMediaProviderInfo setKgProviderKey(java.lang.String kgProviderKey) {
    this.kgProviderKey = kgProviderKey;
    return this;
  }

  /**
   * Media ID of a MediaItem in a MediaBrowseTree (MBT). This field is used to play a specific media
   * item from MBT using playFromMediaId API.
   * @return value or {@code null} for none
   */
  public java.lang.String getMediaId() {
    return mediaId;
  }

  /**
   * Media ID of a MediaItem in a MediaBrowseTree (MBT). This field is used to play a specific media
   * item from MBT using playFromMediaId API.
   * @param mediaId mediaId or {@code null} for none
   */
  public NlpSemanticParsingModelsMediaMediaProviderInfo setMediaId(java.lang.String mediaId) {
    this.mediaId = mediaId;
    return this;
  }

  /**
   * The machine ID (MID) of the media provider.
   * @return value or {@code null} for none
   */
  public java.lang.String getProviderMid() {
    return providerMid;
  }

  /**
   * The machine ID (MID) of the media provider.
   * @param providerMid providerMid or {@code null} for none
   */
  public NlpSemanticParsingModelsMediaMediaProviderInfo setProviderMid(java.lang.String providerMid) {
    this.providerMid = providerMid;
    return this;
  }

  /**
   * The name of the media provider.
   * @return value or {@code null} for none
   */
  public java.lang.String getProviderName() {
    return providerName;
  }

  /**
   * The name of the media provider.
   * @param providerName providerName or {@code null} for none
   */
  public NlpSemanticParsingModelsMediaMediaProviderInfo setProviderName(java.lang.String providerName) {
    this.providerName = providerName;
    return this;
  }

  @Override
  public NlpSemanticParsingModelsMediaMediaProviderInfo set(String fieldName, Object value) {
    return (NlpSemanticParsingModelsMediaMediaProviderInfo) super.set(fieldName, value);
  }

  @Override
  public NlpSemanticParsingModelsMediaMediaProviderInfo clone() {
    return (NlpSemanticParsingModelsMediaMediaProviderInfo) super.clone();
  }

}
