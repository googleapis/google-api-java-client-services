/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networkmanagement.v1beta1.model;

/**
 * Probing results for a single edge device.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SingleEdgeResponse extends com.google.api.client.json.GenericJson {

  /**
   * The EdgeLocation from which a packet, destined to the internet, will egress the Google network.
   * This will only be populated for a connectivity test which has an internet destination address.
   * The absence of this field *must not* be used as an indication that the destination is part of
   * the Google network.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EdgeLocation destinationEgressLocation;

  /**
   * Router name in the format '{router}.{metroshard}'. For example: pf01.aaa01, pr02.aaa01.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String destinationRouter;

  /**
   * Latency as measured by active probing in one direction: from the source to the destination
   * endpoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LatencyDistribution probingLatency;

  /**
   * The overall result of active probing for this egress device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String result;

  /**
   * Number of probes sent.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sentProbeCount;

  /**
   * Number of probes that reached the destination.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer successfulProbeCount;

  /**
   * The EdgeLocation from which a packet, destined to the internet, will egress the Google network.
   * This will only be populated for a connectivity test which has an internet destination address.
   * The absence of this field *must not* be used as an indication that the destination is part of
   * the Google network.
   * @return value or {@code null} for none
   */
  public EdgeLocation getDestinationEgressLocation() {
    return destinationEgressLocation;
  }

  /**
   * The EdgeLocation from which a packet, destined to the internet, will egress the Google network.
   * This will only be populated for a connectivity test which has an internet destination address.
   * The absence of this field *must not* be used as an indication that the destination is part of
   * the Google network.
   * @param destinationEgressLocation destinationEgressLocation or {@code null} for none
   */
  public SingleEdgeResponse setDestinationEgressLocation(EdgeLocation destinationEgressLocation) {
    this.destinationEgressLocation = destinationEgressLocation;
    return this;
  }

  /**
   * Router name in the format '{router}.{metroshard}'. For example: pf01.aaa01, pr02.aaa01.
   * @return value or {@code null} for none
   */
  public java.lang.String getDestinationRouter() {
    return destinationRouter;
  }

  /**
   * Router name in the format '{router}.{metroshard}'. For example: pf01.aaa01, pr02.aaa01.
   * @param destinationRouter destinationRouter or {@code null} for none
   */
  public SingleEdgeResponse setDestinationRouter(java.lang.String destinationRouter) {
    this.destinationRouter = destinationRouter;
    return this;
  }

  /**
   * Latency as measured by active probing in one direction: from the source to the destination
   * endpoint.
   * @return value or {@code null} for none
   */
  public LatencyDistribution getProbingLatency() {
    return probingLatency;
  }

  /**
   * Latency as measured by active probing in one direction: from the source to the destination
   * endpoint.
   * @param probingLatency probingLatency or {@code null} for none
   */
  public SingleEdgeResponse setProbingLatency(LatencyDistribution probingLatency) {
    this.probingLatency = probingLatency;
    return this;
  }

  /**
   * The overall result of active probing for this egress device.
   * @return value or {@code null} for none
   */
  public java.lang.String getResult() {
    return result;
  }

  /**
   * The overall result of active probing for this egress device.
   * @param result result or {@code null} for none
   */
  public SingleEdgeResponse setResult(java.lang.String result) {
    this.result = result;
    return this;
  }

  /**
   * Number of probes sent.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSentProbeCount() {
    return sentProbeCount;
  }

  /**
   * Number of probes sent.
   * @param sentProbeCount sentProbeCount or {@code null} for none
   */
  public SingleEdgeResponse setSentProbeCount(java.lang.Integer sentProbeCount) {
    this.sentProbeCount = sentProbeCount;
    return this;
  }

  /**
   * Number of probes that reached the destination.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSuccessfulProbeCount() {
    return successfulProbeCount;
  }

  /**
   * Number of probes that reached the destination.
   * @param successfulProbeCount successfulProbeCount or {@code null} for none
   */
  public SingleEdgeResponse setSuccessfulProbeCount(java.lang.Integer successfulProbeCount) {
    this.successfulProbeCount = successfulProbeCount;
    return this;
  }

  @Override
  public SingleEdgeResponse set(String fieldName, Object value) {
    return (SingleEdgeResponse) super.set(fieldName, value);
  }

  @Override
  public SingleEdgeResponse clone() {
    return (SingleEdgeResponse) super.clone();
  }

}
