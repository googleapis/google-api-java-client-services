/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.oracledatabase.v1.model;

/**
 * The properties of a PluggableDatabase.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Oracle Database@Google Cloud API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PluggableDatabaseProperties extends com.google.api.client.json.GenericJson {

  /**
   * Required. The OCID of the compartment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String compartmentId;

  /**
   * Optional. The Connection strings used to connect to the Oracle Database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PluggableDatabaseConnectionStrings connectionStrings;

  /**
   * Required. The OCID of the CDB.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String containerDatabaseOcid;

  /**
   * Output only. The configuration of the Database Management service.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DatabaseManagementConfig databaseManagementConfig;

  /**
   * Optional. Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, DefinedTagValue> definedTags;

  static {
    // hack to force ProGuard to consider DefinedTagValue used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(DefinedTagValue.class);
  }

  /**
   * Optional. Free-form tags for this resource. Each tag is a simple key-value pair with no
   * predefined name, type, or namespace.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> freeformTags;

  /**
   * Optional. The restricted mode of the pluggable database. If a pluggable database is opened in
   * restricted mode, the user needs both create a session and have restricted session privileges to
   * connect to it.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isRestricted;

  /**
   * Output only. Additional information about the current lifecycle state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lifecycleDetails;

  /**
   * Output only. The current state of the pluggable database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lifecycleState;

  /**
   * Output only. The OCID of the pluggable database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ocid;

  /**
   * Output only. The status of Operations Insights for this Database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String operationsInsightsState;

  /**
   * Required. The database name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pdbName;

  /**
   * Optional. Pluggable Database Node Level Details
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PluggableDatabaseNodeLevelDetails> pdbNodeLevelDetails;

  static {
    // hack to force ProGuard to consider PluggableDatabaseNodeLevelDetails used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(PluggableDatabaseNodeLevelDetails.class);
  }

  /**
   * Required. The OCID of the compartment.
   * @return value or {@code null} for none
   */
  public java.lang.String getCompartmentId() {
    return compartmentId;
  }

  /**
   * Required. The OCID of the compartment.
   * @param compartmentId compartmentId or {@code null} for none
   */
  public PluggableDatabaseProperties setCompartmentId(java.lang.String compartmentId) {
    this.compartmentId = compartmentId;
    return this;
  }

  /**
   * Optional. The Connection strings used to connect to the Oracle Database.
   * @return value or {@code null} for none
   */
  public PluggableDatabaseConnectionStrings getConnectionStrings() {
    return connectionStrings;
  }

  /**
   * Optional. The Connection strings used to connect to the Oracle Database.
   * @param connectionStrings connectionStrings or {@code null} for none
   */
  public PluggableDatabaseProperties setConnectionStrings(PluggableDatabaseConnectionStrings connectionStrings) {
    this.connectionStrings = connectionStrings;
    return this;
  }

  /**
   * Required. The OCID of the CDB.
   * @return value or {@code null} for none
   */
  public java.lang.String getContainerDatabaseOcid() {
    return containerDatabaseOcid;
  }

  /**
   * Required. The OCID of the CDB.
   * @param containerDatabaseOcid containerDatabaseOcid or {@code null} for none
   */
  public PluggableDatabaseProperties setContainerDatabaseOcid(java.lang.String containerDatabaseOcid) {
    this.containerDatabaseOcid = containerDatabaseOcid;
    return this;
  }

  /**
   * Output only. The configuration of the Database Management service.
   * @return value or {@code null} for none
   */
  public DatabaseManagementConfig getDatabaseManagementConfig() {
    return databaseManagementConfig;
  }

  /**
   * Output only. The configuration of the Database Management service.
   * @param databaseManagementConfig databaseManagementConfig or {@code null} for none
   */
  public PluggableDatabaseProperties setDatabaseManagementConfig(DatabaseManagementConfig databaseManagementConfig) {
    this.databaseManagementConfig = databaseManagementConfig;
    return this;
  }

  /**
   * Optional. Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, DefinedTagValue> getDefinedTags() {
    return definedTags;
  }

  /**
   * Optional. Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * @param definedTags definedTags or {@code null} for none
   */
  public PluggableDatabaseProperties setDefinedTags(java.util.Map<String, DefinedTagValue> definedTags) {
    this.definedTags = definedTags;
    return this;
  }

  /**
   * Optional. Free-form tags for this resource. Each tag is a simple key-value pair with no
   * predefined name, type, or namespace.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getFreeformTags() {
    return freeformTags;
  }

  /**
   * Optional. Free-form tags for this resource. Each tag is a simple key-value pair with no
   * predefined name, type, or namespace.
   * @param freeformTags freeformTags or {@code null} for none
   */
  public PluggableDatabaseProperties setFreeformTags(java.util.Map<String, java.lang.String> freeformTags) {
    this.freeformTags = freeformTags;
    return this;
  }

  /**
   * Optional. The restricted mode of the pluggable database. If a pluggable database is opened in
   * restricted mode, the user needs both create a session and have restricted session privileges to
   * connect to it.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsRestricted() {
    return isRestricted;
  }

  /**
   * Optional. The restricted mode of the pluggable database. If a pluggable database is opened in
   * restricted mode, the user needs both create a session and have restricted session privileges to
   * connect to it.
   * @param isRestricted isRestricted or {@code null} for none
   */
  public PluggableDatabaseProperties setIsRestricted(java.lang.Boolean isRestricted) {
    this.isRestricted = isRestricted;
    return this;
  }

  /**
   * Output only. Additional information about the current lifecycle state.
   * @return value or {@code null} for none
   */
  public java.lang.String getLifecycleDetails() {
    return lifecycleDetails;
  }

  /**
   * Output only. Additional information about the current lifecycle state.
   * @param lifecycleDetails lifecycleDetails or {@code null} for none
   */
  public PluggableDatabaseProperties setLifecycleDetails(java.lang.String lifecycleDetails) {
    this.lifecycleDetails = lifecycleDetails;
    return this;
  }

  /**
   * Output only. The current state of the pluggable database.
   * @return value or {@code null} for none
   */
  public java.lang.String getLifecycleState() {
    return lifecycleState;
  }

  /**
   * Output only. The current state of the pluggable database.
   * @param lifecycleState lifecycleState or {@code null} for none
   */
  public PluggableDatabaseProperties setLifecycleState(java.lang.String lifecycleState) {
    this.lifecycleState = lifecycleState;
    return this;
  }

  /**
   * Output only. The OCID of the pluggable database.
   * @return value or {@code null} for none
   */
  public java.lang.String getOcid() {
    return ocid;
  }

  /**
   * Output only. The OCID of the pluggable database.
   * @param ocid ocid or {@code null} for none
   */
  public PluggableDatabaseProperties setOcid(java.lang.String ocid) {
    this.ocid = ocid;
    return this;
  }

  /**
   * Output only. The status of Operations Insights for this Database.
   * @return value or {@code null} for none
   */
  public java.lang.String getOperationsInsightsState() {
    return operationsInsightsState;
  }

  /**
   * Output only. The status of Operations Insights for this Database.
   * @param operationsInsightsState operationsInsightsState or {@code null} for none
   */
  public PluggableDatabaseProperties setOperationsInsightsState(java.lang.String operationsInsightsState) {
    this.operationsInsightsState = operationsInsightsState;
    return this;
  }

  /**
   * Required. The database name.
   * @return value or {@code null} for none
   */
  public java.lang.String getPdbName() {
    return pdbName;
  }

  /**
   * Required. The database name.
   * @param pdbName pdbName or {@code null} for none
   */
  public PluggableDatabaseProperties setPdbName(java.lang.String pdbName) {
    this.pdbName = pdbName;
    return this;
  }

  /**
   * Optional. Pluggable Database Node Level Details
   * @return value or {@code null} for none
   */
  public java.util.List<PluggableDatabaseNodeLevelDetails> getPdbNodeLevelDetails() {
    return pdbNodeLevelDetails;
  }

  /**
   * Optional. Pluggable Database Node Level Details
   * @param pdbNodeLevelDetails pdbNodeLevelDetails or {@code null} for none
   */
  public PluggableDatabaseProperties setPdbNodeLevelDetails(java.util.List<PluggableDatabaseNodeLevelDetails> pdbNodeLevelDetails) {
    this.pdbNodeLevelDetails = pdbNodeLevelDetails;
    return this;
  }

  @Override
  public PluggableDatabaseProperties set(String fieldName, Object value) {
    return (PluggableDatabaseProperties) super.set(fieldName, value);
  }

  @Override
  public PluggableDatabaseProperties clone() {
    return (PluggableDatabaseProperties) super.clone();
  }

}
