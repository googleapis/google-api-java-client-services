/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for GeostoreCurveConnectionProtoBezierParamsControlPoint.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreCurveConnectionProtoBezierParamsControlPoint extends com.google.api.client.json.GenericJson {

  /**
   * We use this parameterization to make curves change predictable when endpoints move. Each point
   * P is defined in terms of the straight edge [S, E] between the start point of the curve S and
   * its end point E. *P / / / S *------------* E Counter-clockwise angle between vector SE and
   * vector SP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double angleDegrees;

  /**
   * Distance(S, P) in units of Distance(S, E).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double distanceMultiplier;

  /**
   * We use this parameterization to make curves change predictable when endpoints move. Each point
   * P is defined in terms of the straight edge [S, E] between the start point of the curve S and
   * its end point E. *P / / / S *------------* E Counter-clockwise angle between vector SE and
   * vector SP.
   * @return value or {@code null} for none
   */
  public java.lang.Double getAngleDegrees() {
    return angleDegrees;
  }

  /**
   * We use this parameterization to make curves change predictable when endpoints move. Each point
   * P is defined in terms of the straight edge [S, E] between the start point of the curve S and
   * its end point E. *P / / / S *------------* E Counter-clockwise angle between vector SE and
   * vector SP.
   * @param angleDegrees angleDegrees or {@code null} for none
   */
  public GeostoreCurveConnectionProtoBezierParamsControlPoint setAngleDegrees(java.lang.Double angleDegrees) {
    this.angleDegrees = angleDegrees;
    return this;
  }

  /**
   * Distance(S, P) in units of Distance(S, E).
   * @return value or {@code null} for none
   */
  public java.lang.Double getDistanceMultiplier() {
    return distanceMultiplier;
  }

  /**
   * Distance(S, P) in units of Distance(S, E).
   * @param distanceMultiplier distanceMultiplier or {@code null} for none
   */
  public GeostoreCurveConnectionProtoBezierParamsControlPoint setDistanceMultiplier(java.lang.Double distanceMultiplier) {
    this.distanceMultiplier = distanceMultiplier;
    return this;
  }

  @Override
  public GeostoreCurveConnectionProtoBezierParamsControlPoint set(String fieldName, Object value) {
    return (GeostoreCurveConnectionProtoBezierParamsControlPoint) super.set(fieldName, value);
  }

  @Override
  public GeostoreCurveConnectionProtoBezierParamsControlPoint clone() {
    return (GeostoreCurveConnectionProtoBezierParamsControlPoint) super.clone();
  }

}
