{
  "parameters": {
    "$.xgafv": {
      "description": "V1 error format.",
      "location": "query",
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "upload_protocol": {
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string"
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "alt": {
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query",
      "default": "json",
      "description": "Data format for response."
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "prettyPrint": {
      "default": "true",
      "location": "query",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks."
    }
  },
  "servicePath": "",
  "protocol": "rest",
  "schemas": {
    "SipAddress": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The SIP address in the [RFC 3261 19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI format."
        },
        "formattedType": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The type of the SIP address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
        },
        "metadata": {
          "description": "Metadata about the SIP address.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "description": "The type of the SIP address. The type can be custom or or one of these predefined values: * `home` * `work` * `mobile` * `other`",
          "type": "string"
        }
      },
      "id": "SipAddress",
      "type": "object",
      "description": "A person's SIP address. Session Initial Protocol addresses are used for VoIP communications to make voice or video calls over the internet."
    },
    "ProfileMetadata": {
      "id": "ProfileMetadata",
      "properties": {
        "userTypes": {
          "readOnly": true,
          "enumDescriptions": [
            "The user type is not known.",
            "The user is a Google user.",
            "The user is a Google+ user.",
            "The user is a G Suite user."
          ],
          "description": "Output only. The user types.",
          "items": {
            "enum": [
              "USER_TYPE_UNKNOWN",
              "GOOGLE_USER",
              "GPLUS_USER",
              "GOOGLE_APPS_USER"
            ],
            "type": "string",
            "enumDescriptions": [
              "The user type is not known.",
              "The user is a Google user.",
              "The user is a Google+ user.",
              "The user is a G Suite user."
            ]
          },
          "type": "array"
        },
        "objectType": {
          "readOnly": true,
          "description": "Output only. The profile object type.",
          "type": "string",
          "enum": [
            "OBJECT_TYPE_UNSPECIFIED",
            "PERSON",
            "PAGE"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Person.",
            "[Google+ Page.](http://www.google.com/+/brands/)"
          ]
        }
      },
      "description": "The metadata about a profile.",
      "type": "object"
    },
    "GetPeopleResponse": {
      "id": "GetPeopleResponse",
      "description": "The response to a get request for a list of people by resource name.",
      "properties": {
        "responses": {
          "type": "array",
          "description": "The response for each requested resource name.",
          "items": {
            "$ref": "PersonResponse"
          }
        }
      },
      "type": "object"
    },
    "CreateContactGroupRequest": {
      "properties": {
        "contactGroup": {
          "description": "Required. The contact group to create.",
          "$ref": "ContactGroup"
        }
      },
      "description": "A request to create a new contact group.",
      "id": "CreateContactGroupRequest",
      "type": "object"
    },
    "DomainMembership": {
      "type": "object",
      "properties": {
        "inViewerDomain": {
          "type": "boolean",
          "description": "True if the person is in the viewer's G Suite domain."
        }
      },
      "description": "A G Suite Domain membership.",
      "id": "DomainMembership"
    },
    "CopyOtherContactToMyContactsGroupRequest": {
      "description": "A request to copy an \"Other contact\" to my contacts group.",
      "properties": {
        "sources": {
          "description": "Optional. A mask of what source types to return. Defaults to ReadSourceType.CONTACT and ReadSourceType.PROFILE if not set.",
          "enumDescriptions": [
            "Unspecified.",
            "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
            "Returns SourceType.CONTACT.",
            "Returns SourceType.DOMAIN_CONTACT."
          ],
          "type": "array",
          "items": {
            "enum": [
              "READ_SOURCE_TYPE_UNSPECIFIED",
              "READ_SOURCE_TYPE_PROFILE",
              "READ_SOURCE_TYPE_CONTACT",
              "READ_SOURCE_TYPE_DOMAIN_CONTACT"
            ],
            "enumDescriptions": [
              "Unspecified.",
              "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
              "Returns SourceType.CONTACT.",
              "Returns SourceType.DOMAIN_CONTACT."
            ],
            "type": "string"
          }
        },
        "readMask": {
          "format": "google-fieldmask",
          "description": "Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to the copy mask with metadata and membership fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * residences * sipAddresses * skills * urls * userDefined",
          "type": "string"
        },
        "copyMask": {
          "type": "string",
          "description": "Required. A field mask to restrict which fields are copied into the new contact. Valid values are: * emailAddresses * names * phoneNumbers",
          "format": "google-fieldmask"
        }
      },
      "id": "CopyOtherContactToMyContactsGroupRequest",
      "type": "object"
    },
    "PhoneNumber": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The phone number."
        },
        "formattedType": {
          "type": "string",
          "description": "Output only. The type of the phone number translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "readOnly": true
        },
        "canonicalForm": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The canonicalized [ITU-T E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf) form of the phone number."
        },
        "metadata": {
          "description": "Metadata about the phone number.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "description": "The type of the phone number. The type can be custom or one of these predefined values: * `home` * `work` * `mobile` * `homeFax` * `workFax` * `otherFax` * `pager` * `workMobile` * `workPager` * `main` * `googleVoice` * `other`",
          "type": "string"
        }
      },
      "id": "PhoneNumber",
      "description": "A person's phone number.",
      "type": "object"
    },
    "Interest": {
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the interest."
        },
        "value": {
          "description": "The interest; for example, `stargazing`.",
          "type": "string"
        }
      },
      "id": "Interest",
      "description": "One of the person's interests.",
      "type": "object"
    },
    "EmailAddress": {
      "id": "EmailAddress",
      "type": "object",
      "description": "A person's email address.",
      "properties": {
        "formattedType": {
          "readOnly": true,
          "description": "Output only. The type of the email address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        },
        "displayName": {
          "description": "The display name of the email.",
          "type": "string"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the email address."
        },
        "value": {
          "description": "The email address.",
          "type": "string"
        },
        "type": {
          "description": "The type of the email address. The type can be custom or one of these predefined values: * `home` * `work` * `other`",
          "type": "string"
        }
      }
    },
    "Address": {
      "description": "A person's physical address. May be a P.O. box or street address. All fields are optional.",
      "properties": {
        "poBox": {
          "type": "string",
          "description": "The P.O. box of the address."
        },
        "formattedType": {
          "description": "Output only. The type of the address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "readOnly": true,
          "type": "string"
        },
        "countryCode": {
          "description": "The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country code of the address.",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the address.",
          "$ref": "FieldMetadata"
        },
        "region": {
          "description": "The region of the address; for example, the state or province.",
          "type": "string"
        },
        "city": {
          "description": "The city of the address.",
          "type": "string"
        },
        "formattedValue": {
          "description": "The unstructured value of the address. If this is not set by the user it will be automatically constructed from structured values.",
          "type": "string"
        },
        "extendedAddress": {
          "type": "string",
          "description": "The extended address of the address; for example, the apartment number."
        },
        "streetAddress": {
          "description": "The street address.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code of the address."
        },
        "type": {
          "type": "string",
          "description": "The type of the address. The type can be custom or one of these predefined values: * `home` * `work` * `other`"
        },
        "country": {
          "type": "string",
          "description": "The country of the address."
        }
      },
      "id": "Address",
      "type": "object"
    },
    "Occupation": {
      "type": "object",
      "id": "Occupation",
      "properties": {
        "value": {
          "type": "string",
          "description": "The occupation; for example, `carpenter`."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the occupation."
        }
      },
      "description": "A person's occupation."
    },
    "Person": {
      "properties": {
        "interests": {
          "description": "The person's interests.",
          "items": {
            "$ref": "Interest"
          },
          "type": "array"
        },
        "resourceName": {
          "description": "The resource name for the person, assigned by the server. An ASCII string with a max length of 27 characters, in the form of `people/{person_id}`.",
          "type": "string"
        },
        "relationshipInterests": {
          "type": "array",
          "items": {
            "$ref": "RelationshipInterest"
          },
          "description": "Output only. **DEPRECATED**: No data will be returned The person's relationship interests.",
          "readOnly": true
        },
        "emailAddresses": {
          "type": "array",
          "items": {
            "$ref": "EmailAddress"
          },
          "description": "The person's email addresses."
        },
        "imClients": {
          "type": "array",
          "items": {
            "$ref": "ImClient"
          },
          "description": "The person's instant messaging clients."
        },
        "memberships": {
          "items": {
            "$ref": "Membership"
          },
          "description": "The person's group memberships.",
          "type": "array"
        },
        "addresses": {
          "items": {
            "$ref": "Address"
          },
          "description": "The person's street addresses.",
          "type": "array"
        },
        "braggingRights": {
          "description": "**DEPRECATED**: No data will be returned The person's bragging rights.",
          "type": "array",
          "items": {
            "$ref": "BraggingRights"
          }
        },
        "birthdays": {
          "type": "array",
          "description": "The person's birthdays. This field is a singleton for contact sources.",
          "items": {
            "$ref": "Birthday"
          }
        },
        "userDefined": {
          "description": "The person's user defined data.",
          "items": {
            "$ref": "UserDefined"
          },
          "type": "array"
        },
        "locales": {
          "description": "The person's locale preferences.",
          "items": {
            "$ref": "Locale"
          },
          "type": "array"
        },
        "metadata": {
          "description": "Output only. Metadata about the person.",
          "readOnly": true,
          "$ref": "PersonMetadata"
        },
        "genders": {
          "items": {
            "$ref": "Gender"
          },
          "description": "The person's genders. This field is a singleton for contact sources.",
          "type": "array"
        },
        "calendarUrls": {
          "items": {
            "$ref": "CalendarUrl"
          },
          "description": "The person's calendar URLs.",
          "type": "array"
        },
        "biographies": {
          "type": "array",
          "items": {
            "$ref": "Biography"
          },
          "description": "The person's biographies. This field is a singleton for contact sources."
        },
        "fileAses": {
          "items": {
            "$ref": "FileAs"
          },
          "type": "array",
          "description": "The person's file-ases."
        },
        "organizations": {
          "type": "array",
          "description": "The person's past or current organizations.",
          "items": {
            "$ref": "Organization"
          }
        },
        "miscKeywords": {
          "description": "The person's miscellaneous keywords.",
          "type": "array",
          "items": {
            "$ref": "MiscKeyword"
          }
        },
        "occupations": {
          "description": "The person's occupations.",
          "items": {
            "$ref": "Occupation"
          },
          "type": "array"
        },
        "externalIds": {
          "description": "The person's external IDs.",
          "type": "array",
          "items": {
            "$ref": "ExternalId"
          }
        },
        "taglines": {
          "description": "Output only. **DEPRECATED**: No data will be returned The person's taglines.",
          "items": {
            "$ref": "Tagline"
          },
          "readOnly": true,
          "type": "array"
        },
        "names": {
          "type": "array",
          "items": {
            "$ref": "Name"
          },
          "description": "The person's names. This field is a singleton for contact sources."
        },
        "residences": {
          "items": {
            "$ref": "Residence"
          },
          "description": "The person's residences.",
          "type": "array"
        },
        "phoneNumbers": {
          "items": {
            "$ref": "PhoneNumber"
          },
          "description": "The person's phone numbers.",
          "type": "array"
        },
        "relations": {
          "description": "The person's relations.",
          "type": "array",
          "items": {
            "$ref": "Relation"
          }
        },
        "nicknames": {
          "description": "The person's nicknames.",
          "type": "array",
          "items": {
            "$ref": "Nickname"
          }
        },
        "ageRange": {
          "enumDescriptions": [
            "Unspecified.",
            "Younger than eighteen.",
            "Between eighteen and twenty.",
            "Twenty-one and older."
          ],
          "readOnly": true,
          "enum": [
            "AGE_RANGE_UNSPECIFIED",
            "LESS_THAN_EIGHTEEN",
            "EIGHTEEN_TO_TWENTY",
            "TWENTY_ONE_OR_OLDER"
          ],
          "type": "string",
          "description": "Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range."
        },
        "coverPhotos": {
          "readOnly": true,
          "items": {
            "$ref": "CoverPhoto"
          },
          "type": "array",
          "description": "Output only. The person's cover photos."
        },
        "urls": {
          "items": {
            "$ref": "Url"
          },
          "description": "The person's associated URLs.",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation."
        },
        "events": {
          "items": {
            "$ref": "Event"
          },
          "type": "array",
          "description": "The person's events."
        },
        "sipAddresses": {
          "items": {
            "$ref": "SipAddress"
          },
          "type": "array",
          "description": "The person's SIP addresses."
        },
        "skills": {
          "description": "The person's skills.",
          "type": "array",
          "items": {
            "$ref": "Skill"
          }
        },
        "photos": {
          "readOnly": true,
          "description": "Output only. The person's photos.",
          "items": {
            "$ref": "Photo"
          },
          "type": "array"
        },
        "relationshipStatuses": {
          "items": {
            "$ref": "RelationshipStatus"
          },
          "type": "array",
          "readOnly": true,
          "description": "Output only. **DEPRECATED**: No data will be returned The person's relationship statuses."
        },
        "ageRanges": {
          "items": {
            "$ref": "AgeRangeType"
          },
          "description": "Output only. The person's age ranges.",
          "readOnly": true,
          "type": "array"
        }
      },
      "description": "Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.",
      "id": "Person",
      "type": "object"
    },
    "ModifyContactGroupMembersRequest": {
      "description": "A request to modify an existing contact group's members. Contacts can be removed from any group but they can only be added to a user group or \"myContacts\" or \"starred\" system groups.",
      "type": "object",
      "id": "ModifyContactGroupMembersRequest",
      "properties": {
        "resourceNamesToAdd": {
          "type": "array",
          "description": "Optional. The resource names of the contact people to add in the form of `people/{person_id}`.",
          "items": {
            "type": "string"
          }
        },
        "resourceNamesToRemove": {
          "items": {
            "type": "string"
          },
          "description": "Optional. The resource names of the contact people to remove in the form of `people/{person_id}`.",
          "type": "array"
        }
      }
    },
    "Photo": {
      "type": "object",
      "id": "Photo",
      "description": "A person's photo. A picture shown next to the person's name to help others recognize the person.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the photo. You can change the desired size by appending a query parameter `sz={size}` at the end of the url, where {size} is the size in pixels. Example: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the photo."
        },
        "default": {
          "description": "True if the photo is a default photo; false if the photo is a user-provided photo.",
          "type": "boolean"
        }
      }
    },
    "PersonMetadata": {
      "type": "object",
      "id": "PersonMetadata",
      "properties": {
        "deleted": {
          "description": "Output only. True if the person resource has been deleted. Populated only for [`connections.list`](/people/api/rest/v1/people.connections/list) requests that include a sync token.",
          "readOnly": true,
          "type": "boolean"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "Source"
          },
          "description": "The sources of data for the person."
        },
        "linkedPeopleResourceNames": {
          "items": {
            "type": "string"
          },
          "description": "Output only. Resource names of people linked to this resource.",
          "readOnly": true,
          "type": "array"
        },
        "objectType": {
          "description": "Output only. **DEPRECATED** (Please use `person.metadata.sources.profileMetadata.objectType` instead) The type of the person object.",
          "enum": [
            "OBJECT_TYPE_UNSPECIFIED",
            "PERSON",
            "PAGE"
          ],
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Person.",
            "[Google+ Page.](http://www.google.com/+/brands/)"
          ]
        },
        "previousResourceNames": {
          "type": "array",
          "description": "Output only. Any former resource names this person has had. Populated only for [`connections.list`](/people/api/rest/v1/people.connections/list) requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      },
      "description": "The metadata about a person."
    },
    "ContactGroupMembership": {
      "type": "object",
      "id": "ContactGroupMembership",
      "properties": {
        "contactGroupId": {
          "readOnly": true,
          "description": "Output only. The contact group ID for the contact group membership.",
          "type": "string"
        },
        "contactGroupResourceName": {
          "type": "string",
          "description": "The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`. Only contact_group_resource_name can be used for modifying memberships. Any contact group membership can be removed, but only user group or \"myContacts\" or \"starred\" system groups memberships can be added. A contact must always have at least one contact group membership."
        }
      },
      "description": "A Google contact group membership."
    },
    "ContactGroupMetadata": {
      "description": "The metadata about a contact group.",
      "id": "ContactGroupMetadata",
      "properties": {
        "deleted": {
          "readOnly": true,
          "description": "Output only. True if the contact group resource has been deleted. Populated only for [`ListContactGroups`](/people/api/rest/v1/contactgroups/list) requests that include a sync token.",
          "type": "boolean"
        },
        "updateTime": {
          "description": "Output only. The time the group was last updated.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "UpdateContactGroupRequest": {
      "description": "A request to update an existing user contact group. All updated fields will be replaced.",
      "id": "UpdateContactGroupRequest",
      "type": "object",
      "properties": {
        "contactGroup": {
          "$ref": "ContactGroup",
          "description": "Required. The contact group to update."
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "details": {
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status"
    },
    "ModifyContactGroupMembersResponse": {
      "type": "object",
      "description": "The response to a modify contact group members request.",
      "id": "ModifyContactGroupMembersResponse",
      "properties": {
        "canNotRemoveLastContactGroupResourceNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The contact people resource names that cannot be removed from their last contact group."
        },
        "notFoundResourceNames": {
          "description": "The contact people resource names that were not found.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Source": {
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "SOURCE_TYPE_UNSPECIFIED",
            "ACCOUNT",
            "PROFILE",
            "DOMAIN_PROFILE",
            "CONTACT",
            "OTHER_CONTACT",
            "DOMAIN_CONTACT"
          ],
          "description": "The source type.",
          "enumDescriptions": [
            "Unspecified.",
            "[Google Account](https://accounts.google.com).",
            "[Google profile](https://profiles.google.com). You can view the profile at [https://profiles.google.com/](https://profiles.google.com/){id}, where {id} is the source id.",
            "[G Suite domain profile](https://support.google.com/a/answer/1628008).",
            "[Google contact](https://contacts.google.com). You can view the contact at [https://contact.google.com/](https://contact.google.com/){id}, where {id} is the source id.",
            "[Google \"Other contact\"](https://contacts.google.com/other).",
            "[G Suite domain shared contact](https://support.google.com/a/answer/9281635)."
          ],
          "type": "string"
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. **Only populated in `person.metadata.sources`.** Last update timestamp of this source."
        },
        "etag": {
          "description": "**Only populated in `person.metadata.sources`.** The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the source. Used for web cache validation.",
          "type": "string"
        },
        "profileMetadata": {
          "$ref": "ProfileMetadata",
          "description": "Output only. **Only populated in `person.metadata.sources`.** Metadata about a source of type PROFILE.",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "The unique identifier within the source type generated by the server."
        }
      },
      "id": "Source",
      "description": "The source of a field."
    },
    "ListDirectoryPeopleResponse": {
      "description": "The response to a request for the authenticated user's domain directory.",
      "id": "ListDirectoryPeopleResponse",
      "type": "object",
      "properties": {
        "people": {
          "items": {
            "$ref": "Person"
          },
          "type": "array",
          "description": "The list of people in the domain directory."
        },
        "nextSyncToken": {
          "type": "string",
          "description": "A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token."
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        }
      }
    },
    "ListConnectionsResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "nextSyncToken": {
          "description": "A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token.",
          "type": "string"
        },
        "totalItems": {
          "format": "int32",
          "description": "The total number of items in the list without pagination.",
          "type": "integer"
        },
        "connections": {
          "type": "array",
          "items": {
            "$ref": "Person"
          },
          "description": "The list of people that the requestor is connected to."
        },
        "totalPeople": {
          "format": "int32",
          "type": "integer",
          "description": "**DEPRECATED** (Please use totalItems) The total number of people in the list without pagination."
        }
      },
      "id": "ListConnectionsResponse",
      "description": "The response to a request for the authenticated user's connections."
    },
    "DeleteContactPhotoResponse": {
      "type": "object",
      "properties": {
        "person": {
          "$ref": "Person",
          "description": "The updated person, if person_fields is set in the DeleteContactPhotoRequest; otherwise this will be unset."
        }
      },
      "id": "DeleteContactPhotoResponse",
      "description": "The response for deleteing a contact's photo."
    },
    "UserDefined": {
      "id": "UserDefined",
      "description": "Arbitrary user data that is populated by the end users.",
      "properties": {
        "value": {
          "description": "The end user specified value of the user defined data.",
          "type": "string"
        },
        "key": {
          "type": "string",
          "description": "The end user specified key of the user defined data."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the user defined data."
        }
      },
      "type": "object"
    },
    "RelationshipInterest": {
      "description": "**DEPRECATED**: No data will be returned A person's relationship interest .",
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The kind of relationship the person is looking for. The value can be custom or one of these predefined values: * `friend` * `date` * `relationship` * `networking`"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the relationship interest."
        },
        "formattedValue": {
          "type": "string",
          "description": "Output only. The value of the relationship interest translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.",
          "readOnly": true
        }
      },
      "id": "RelationshipInterest"
    },
    "Membership": {
      "id": "Membership",
      "description": "A person's membership in a group. Only contact group memberships can be modified.",
      "properties": {
        "contactGroupMembership": {
          "$ref": "ContactGroupMembership",
          "description": "The contact group membership."
        },
        "metadata": {
          "description": "Metadata about the membership.",
          "$ref": "FieldMetadata"
        },
        "domainMembership": {
          "readOnly": true,
          "$ref": "DomainMembership",
          "description": "Output only. The domain membership."
        }
      },
      "type": "object"
    },
    "Empty": {
      "properties": {},
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "id": "Empty"
    },
    "CoverPhoto": {
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Metadata about the cover photo.",
          "$ref": "FieldMetadata"
        },
        "default": {
          "type": "boolean",
          "description": "True if the cover photo is the default cover photo; false if the cover photo is a user-provided cover photo."
        },
        "url": {
          "type": "string",
          "description": "The URL of the cover photo."
        }
      },
      "description": "A person's cover photo. A large image shown on the person's profile page that represents who they are or what they care about.",
      "id": "CoverPhoto"
    },
    "BraggingRights": {
      "id": "BraggingRights",
      "description": "**DEPRECATED**: No data will be returned A person's bragging rights.",
      "properties": {
        "metadata": {
          "description": "Metadata about the bragging rights.",
          "$ref": "FieldMetadata"
        },
        "value": {
          "type": "string",
          "description": "The bragging rights; for example, `climbed mount everest`."
        }
      },
      "type": "object"
    },
    "SearchDirectoryPeopleResponse": {
      "description": "The response to a request for people in the authenticated user's domain directory that match the specified query.",
      "id": "SearchDirectoryPeopleResponse",
      "properties": {
        "totalSize": {
          "format": "int32",
          "type": "integer",
          "description": "The total number of items in the list without pagination."
        },
        "people": {
          "type": "array",
          "description": "The list of people in the domain directory that match the query.",
          "items": {
            "$ref": "Person"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        }
      },
      "type": "object"
    },
    "Locale": {
      "description": "A person's locale preference.",
      "type": "object",
      "id": "Locale",
      "properties": {
        "metadata": {
          "description": "Metadata about the locale.",
          "$ref": "FieldMetadata"
        },
        "value": {
          "description": "The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language tag representing the locale.",
          "type": "string"
        }
      }
    },
    "Nickname": {
      "description": "A person's nickname.",
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The nickname."
        },
        "type": {
          "enumDescriptions": [
            "Generic nickname.",
            "Maiden name or birth family name. Used when the person's family name has changed as a result of marriage.",
            "Initials.",
            "Google+ profile nickname.",
            "A professional affiliation or other name; for example, `Dr. Smith.`",
            "Alternate name person is known by.",
            "A shorter version of the person's name."
          ],
          "enum": [
            "DEFAULT",
            "MAIDEN_NAME",
            "INITIALS",
            "GPLUS",
            "OTHER_NAME",
            "ALTERNATE_NAME",
            "SHORT_NAME"
          ],
          "description": "The type of the nickname.",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the nickname.",
          "$ref": "FieldMetadata"
        }
      },
      "id": "Nickname"
    },
    "UpdateContactPhotoResponse": {
      "description": "The response for updating a contact's photo.",
      "id": "UpdateContactPhotoResponse",
      "type": "object",
      "properties": {
        "person": {
          "$ref": "Person",
          "description": "The updated person, if person_fields is set in the UpdateContactPhotoRequest; otherwise this will be unset."
        }
      }
    },
    "BatchGetContactGroupsResponse": {
      "properties": {
        "responses": {
          "type": "array",
          "description": "The list of responses for each requested contact group resource.",
          "items": {
            "$ref": "ContactGroupResponse"
          }
        }
      },
      "id": "BatchGetContactGroupsResponse",
      "description": "The response to a batch get contact groups request.",
      "type": "object"
    },
    "MiscKeyword": {
      "type": "object",
      "description": "A person's miscellaneous keyword.",
      "properties": {
        "formattedType": {
          "type": "string",
          "description": "Output only. The type of the miscellaneous keyword translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "readOnly": true
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the miscellaneous keyword."
        },
        "type": {
          "description": "The miscellaneous keyword type.",
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "OUTLOOK_BILLING_INFORMATION",
            "OUTLOOK_DIRECTORY_SERVER",
            "OUTLOOK_KEYWORD",
            "OUTLOOK_MILEAGE",
            "OUTLOOK_PRIORITY",
            "OUTLOOK_SENSITIVITY",
            "OUTLOOK_SUBJECT",
            "OUTLOOK_USER",
            "HOME",
            "WORK",
            "OTHER"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Outlook field for billing information.",
            "Outlook field for directory server.",
            "Outlook field for keyword.",
            "Outlook field for mileage.",
            "Outlook field for priority.",
            "Outlook field for sensitivity.",
            "Outlook field for subject.",
            "Outlook field for user.",
            "Home.",
            "Work.",
            "Other."
          ]
        },
        "value": {
          "description": "The value of the miscellaneous keyword.",
          "type": "string"
        }
      },
      "id": "MiscKeyword"
    },
    "Url": {
      "id": "Url",
      "properties": {
        "value": {
          "description": "The URL.",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the URL.",
          "$ref": "FieldMetadata"
        },
        "formattedType": {
          "description": "Output only. The type of the URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "The type of the URL. The type can be custom or one of these predefined values: * `home` * `work` * `blog` * `profile` * `homePage` * `ftp` * `reservations` * `appInstallPage`: website for a Google+ application. * `other`",
          "type": "string"
        }
      },
      "description": "A person's associated URLs.",
      "type": "object"
    },
    "Residence": {
      "id": "Residence",
      "description": "A person's past or current residence.",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the residence."
        },
        "current": {
          "description": "True if the residence is the person's current residence; false if the residence is a past residence.",
          "type": "boolean"
        },
        "value": {
          "type": "string",
          "description": "The address of the residence."
        }
      },
      "type": "object"
    },
    "ImClient": {
      "id": "ImClient",
      "properties": {
        "formattedProtocol": {
          "type": "string",
          "description": "Output only. The protocol of the IM client formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the IM client. The type can be custom or one of these predefined values: * `home` * `work` * `other`"
        },
        "protocol": {
          "description": "The protocol of the IM client. The protocol can be custom or one of these predefined values: * `aim` * `msn` * `yahoo` * `skype` * `qq` * `googleTalk` * `icq` * `jabber` * `netMeeting`",
          "type": "string"
        },
        "formattedType": {
          "readOnly": true,
          "description": "Output only. The type of the IM client translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        },
        "username": {
          "type": "string",
          "description": "The user name used in the IM client."
        },
        "metadata": {
          "description": "Metadata about the IM client.",
          "$ref": "FieldMetadata"
        }
      },
      "description": "A person's instant messaging client.",
      "type": "object"
    },
    "AgeRangeType": {
      "id": "AgeRangeType",
      "type": "object",
      "properties": {
        "ageRange": {
          "enumDescriptions": [
            "Unspecified.",
            "Younger than eighteen.",
            "Between eighteen and twenty.",
            "Twenty-one and older."
          ],
          "enum": [
            "AGE_RANGE_UNSPECIFIED",
            "LESS_THAN_EIGHTEEN",
            "EIGHTEEN_TO_TWENTY",
            "TWENTY_ONE_OR_OLDER"
          ],
          "description": "The age range.",
          "type": "string"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the age range."
        }
      },
      "description": "A person's age range."
    },
    "ListContactGroupsResponse": {
      "type": "object",
      "properties": {
        "contactGroups": {
          "type": "array",
          "description": "The list of contact groups. Members of the contact groups are not populated.",
          "items": {
            "$ref": "ContactGroup"
          }
        },
        "totalItems": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of items in the list without pagination."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token that can be used to retrieve the next page of results."
        },
        "nextSyncToken": {
          "type": "string",
          "description": "The token that can be used to retrieve changes since the last request."
        }
      },
      "id": "ListContactGroupsResponse",
      "description": "The response to a list contact groups request."
    },
    "ListOtherContactsResponse": {
      "id": "ListOtherContactsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "otherContacts": {
          "items": {
            "$ref": "Person"
          },
          "description": "The list of \"Other contacts\" returned as Person resources. \"Other contacts\" support a limited subset of fields. See ListOtherContactsRequest.request_mask for more detailed information.",
          "type": "array"
        },
        "nextSyncToken": {
          "type": "string",
          "description": "A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token."
        }
      },
      "description": "The response to a request for the authenticated user's \"Other contacts\"."
    },
    "FieldMetadata": {
      "properties": {
        "source": {
          "description": "The source of the field.",
          "$ref": "Source"
        },
        "primary": {
          "type": "boolean",
          "description": "True if the field is the primary field; false if the field is a secondary field."
        },
        "verified": {
          "type": "boolean",
          "description": "Output only. True if the field is verified; false if the field is unverified. A verified field is typically a name, email address, phone number, or website that has been confirmed to be owned by the person.",
          "readOnly": true
        }
      },
      "type": "object",
      "id": "FieldMetadata",
      "description": "Metadata about a field."
    },
    "Birthday": {
      "description": "A person's birthday. At least one of the `date` and `text` fields are specified. The `date` and `text` fields typically represent the same date, but are not guaranteed to.",
      "properties": {
        "date": {
          "$ref": "Date",
          "description": "The date of the birthday."
        },
        "metadata": {
          "description": "Metadata about the birthday.",
          "$ref": "FieldMetadata"
        },
        "text": {
          "type": "string",
          "description": "A free-form string representing the user's birthday."
        }
      },
      "id": "Birthday",
      "type": "object"
    },
    "Date": {
      "id": "Date",
      "description": "Represents a whole or partial calendar date, e.g. a birthday. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the Proleptic Gregorian Calendar. This can represent: * A full date, with non-zero year, month and day values * A month and day value, with a zero year, e.g. an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, e.g. a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`.",
      "type": "object",
      "properties": {
        "year": {
          "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.",
          "format": "int32",
          "type": "integer"
        },
        "day": {
          "format": "int32",
          "type": "integer",
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year by itself or a year and month where the day is not significant."
        },
        "month": {
          "type": "integer",
          "format": "int32",
          "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day."
        }
      }
    },
    "Skill": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The skill; for example, `underwater basket weaving`."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the skill."
        }
      },
      "id": "Skill",
      "type": "object",
      "description": "A skill that the person has."
    },
    "Gender": {
      "description": "A person's gender.",
      "id": "Gender",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Metadata about the gender.",
          "$ref": "FieldMetadata"
        },
        "addressMeAs": {
          "type": "string",
          "description": "The type of pronouns that should be used to address the person. The value can be custom or one of these predefined values: * `male` * `female` * `other`"
        },
        "formattedValue": {
          "type": "string",
          "description": "Output only. The value of the gender translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale. Unspecified or custom value are not localized.",
          "readOnly": true
        },
        "value": {
          "description": "The gender for the person. The gender can be custom or one of these predefined values: * `male` * `female` * `unspecified`",
          "type": "string"
        }
      }
    },
    "Relation": {
      "id": "Relation",
      "description": "A person's relation to another person.",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the relation."
        },
        "type": {
          "description": "The person's relation to the other person. The type can be custom or one of these predefined values: * `spouse` * `child` * `mother` * `father` * `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner` * `manager` * `assistant` * `referredBy` * `partner`",
          "type": "string"
        },
        "person": {
          "type": "string",
          "description": "The name of the other person this relation refers to."
        },
        "formattedType": {
          "readOnly": true,
          "description": "Output only. The type of the relation translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContactGroup": {
      "id": "ContactGroup",
      "description": "A contact group.",
      "properties": {
        "name": {
          "description": "The contact group name set by the group owner or a system provided name for system groups.",
          "type": "string"
        },
        "memberCount": {
          "type": "integer",
          "description": "Output only. The total number of contacts in the group irrespective of max members in specified in the request.",
          "format": "int32",
          "readOnly": true
        },
        "formattedName": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The name translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale for system groups names. Group names set by the owner are the same as name."
        },
        "resourceName": {
          "type": "string",
          "description": "The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`."
        },
        "groupType": {
          "type": "string",
          "enum": [
            "GROUP_TYPE_UNSPECIFIED",
            "USER_CONTACT_GROUP",
            "SYSTEM_CONTACT_GROUP"
          ],
          "readOnly": true,
          "enumDescriptions": [
            "Unspecified.",
            "User defined contact group.",
            "System defined contact group."
          ],
          "description": "Output only. The contact group type."
        },
        "metadata": {
          "description": "Output only. Metadata about the contact group.",
          "readOnly": true,
          "$ref": "ContactGroupMetadata"
        },
        "memberResourceNames": {
          "type": "array",
          "description": "Output only. The list of contact person resource names that are members of the contact group. The field is not populated for LIST requests and can only be updated through the [ModifyContactGroupMembers](/people/api/rest/v1/contactgroups/members/modify).",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "etag": {
          "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PersonResponse": {
      "id": "PersonResponse",
      "properties": {
        "requestedResourceName": {
          "type": "string",
          "description": "The original requested resource name. May be different than the resource name on the returned person. The resource name can change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or a profile URL."
        },
        "status": {
          "description": "The status of the response.",
          "$ref": "Status"
        },
        "person": {
          "description": "The person.",
          "$ref": "Person"
        },
        "httpStatusCode": {
          "description": "**DEPRECATED** (Please use status instead) [HTTP 1.1 status code] (http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).",
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "The response for a single person",
      "type": "object"
    },
    "RelationshipStatus": {
      "id": "RelationshipStatus",
      "properties": {
        "formattedValue": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The value of the relationship status translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the relationship status."
        },
        "value": {
          "type": "string",
          "description": "The relationship status. The value can be custom or one of these predefined values: * `single` * `inARelationship` * `engaged` * `married` * `itsComplicated` * `openRelationship` * `widowed` * `inDomesticPartnership` * `inCivilUnion`"
        }
      },
      "type": "object",
      "description": "**DEPRECATED**: No data will be returned A person's relationship status."
    },
    "ContactGroupResponse": {
      "id": "ContactGroupResponse",
      "type": "object",
      "description": "The response for a specific contact group.",
      "properties": {
        "requestedResourceName": {
          "description": "The original requested resource name.",
          "type": "string"
        },
        "status": {
          "description": "The status of the response.",
          "$ref": "Status"
        },
        "contactGroup": {
          "description": "The contact group.",
          "$ref": "ContactGroup"
        }
      }
    },
    "CalendarUrl": {
      "type": "object",
      "description": "A person's calendar URL.",
      "id": "CalendarUrl",
      "properties": {
        "type": {
          "description": "The type of the calendar URL. The type can be custom or one of these predefined values: * `home` * `freeBusy` * `work`",
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "The calendar URL."
        },
        "formattedType": {
          "description": "Output only. The type of the calendar URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "readOnly": true,
          "type": "string"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the calendar URL."
        }
      }
    },
    "ExternalId": {
      "description": "An identifier from an external entity related to the person.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the external ID.",
          "type": "string"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the external ID."
        },
        "formattedType": {
          "type": "string",
          "description": "Output only. The type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the external ID. The type can be custom or one of these predefined values: * `account` * `customer` * `loginId` * `network` * `organization`"
        }
      },
      "id": "ExternalId"
    },
    "Tagline": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The tagline."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the tagline."
        }
      },
      "id": "Tagline",
      "description": "**DEPRECATED**: No data will be returned A brief one-line description of the person.",
      "type": "object"
    },
    "UpdateContactPhotoRequest": {
      "type": "object",
      "id": "UpdateContactPhotoRequest",
      "description": "A request to update an existing contact's photo. All requests must have a valid photo format: JPEG or PNG.",
      "properties": {
        "photoBytes": {
          "type": "string",
          "description": "Required. Raw photo bytes",
          "format": "byte"
        },
        "sources": {
          "enumDescriptions": [
            "Unspecified.",
            "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
            "Returns SourceType.CONTACT.",
            "Returns SourceType.DOMAIN_CONTACT."
          ],
          "type": "array",
          "items": {
            "enum": [
              "READ_SOURCE_TYPE_UNSPECIFIED",
              "READ_SOURCE_TYPE_PROFILE",
              "READ_SOURCE_TYPE_CONTACT",
              "READ_SOURCE_TYPE_DOMAIN_CONTACT"
            ],
            "type": "string",
            "enumDescriptions": [
              "Unspecified.",
              "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
              "Returns SourceType.CONTACT.",
              "Returns SourceType.DOMAIN_CONTACT."
            ]
          },
          "description": "Optional. A mask of what source types to return. Defaults to ReadSourceType.CONTACT and ReadSourceType.PROFILE if not set."
        },
        "personFields": {
          "type": "string",
          "format": "google-fieldmask",
          "description": "Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to empty if not set, which will skip the post mutate get. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * residences * sipAddresses * skills * urls * userDefined"
        }
      }
    },
    "Name": {
      "type": "object",
      "properties": {
        "middleName": {
          "description": "The middle name(s).",
          "type": "string"
        },
        "unstructuredName": {
          "type": "string",
          "description": "The free form name value."
        },
        "phoneticFullName": {
          "type": "string",
          "description": "The full name spelled as it sounds."
        },
        "displayName": {
          "description": "Output only. The display name formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.",
          "readOnly": true,
          "type": "string"
        },
        "givenName": {
          "description": "The given name.",
          "type": "string"
        },
        "phoneticFamilyName": {
          "description": "The family name spelled as it sounds.",
          "type": "string"
        },
        "phoneticMiddleName": {
          "type": "string",
          "description": "The middle name(s) spelled as they sound."
        },
        "metadata": {
          "description": "Metadata about the name.",
          "$ref": "FieldMetadata"
        },
        "displayNameLastFirst": {
          "description": "Output only. The display name with the last name first formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.",
          "type": "string",
          "readOnly": true
        },
        "phoneticHonorificSuffix": {
          "type": "string",
          "description": "The honorific suffixes spelled as they sound."
        },
        "familyName": {
          "description": "The family name.",
          "type": "string"
        },
        "honorificSuffix": {
          "type": "string",
          "description": "The honorific suffixes, such as `Jr.`"
        },
        "phoneticGivenName": {
          "type": "string",
          "description": "The given name spelled as it sounds."
        },
        "honorificPrefix": {
          "type": "string",
          "description": "The honorific prefixes, such as `Mrs.` or `Dr.`"
        },
        "phoneticHonorificPrefix": {
          "description": "The honorific prefixes spelled as they sound.",
          "type": "string"
        }
      },
      "description": "A person's name. If the name is a mononym, the family name is empty.",
      "id": "Name"
    },
    "Organization": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "description": "The location of the organization office the person works at."
        },
        "department": {
          "description": "The person's department at the organization.",
          "type": "string"
        },
        "symbol": {
          "type": "string",
          "description": "The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym."
        },
        "endDate": {
          "$ref": "Date",
          "description": "The end date when the person left the organization."
        },
        "phoneticName": {
          "description": "The phonetic name of the organization.",
          "type": "string"
        },
        "jobDescription": {
          "type": "string",
          "description": "The person's job description at the organization."
        },
        "metadata": {
          "description": "Metadata about the organization.",
          "$ref": "FieldMetadata"
        },
        "domain": {
          "type": "string",
          "description": "The domain name associated with the organization; for example, `google.com`."
        },
        "name": {
          "description": "The name of the organization.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "The person's job title at the organization."
        },
        "type": {
          "type": "string",
          "description": "The type of the organization. The type can be custom or one of these predefined values: * `work` * `school`"
        },
        "formattedType": {
          "description": "Output only. The type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string",
          "readOnly": true
        },
        "current": {
          "type": "boolean",
          "description": "True if the organization is the person's current organization; false if the organization is a past organization."
        },
        "startDate": {
          "$ref": "Date",
          "description": "The start date when the person joined the organization."
        }
      },
      "id": "Organization",
      "description": "A person's past or current organization. Overlapping date ranges are permitted."
    },
    "Event": {
      "id": "Event",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the event. The type can be custom or one of these predefined values: * `anniversary` * `other`"
        },
        "metadata": {
          "description": "Metadata about the event.",
          "$ref": "FieldMetadata"
        },
        "formattedType": {
          "description": "Output only. The type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "readOnly": true,
          "type": "string"
        },
        "date": {
          "$ref": "Date",
          "description": "The date of the event."
        }
      },
      "description": "An event related to the person."
    },
    "Biography": {
      "id": "Biography",
      "properties": {
        "contentType": {
          "description": "The content type of the biography.",
          "enumDescriptions": [
            "Unspecified.",
            "Plain text.",
            "HTML text."
          ],
          "type": "string",
          "enum": [
            "CONTENT_TYPE_UNSPECIFIED",
            "TEXT_PLAIN",
            "TEXT_HTML"
          ]
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the biography."
        },
        "value": {
          "description": "The short biography.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A person's short biography."
    },
    "FileAs": {
      "id": "FileAs",
      "properties": {
        "value": {
          "type": "string",
          "description": "The file-as value"
        },
        "metadata": {
          "description": "Metadata about the file-as.",
          "$ref": "FieldMetadata"
        }
      },
      "type": "object",
      "description": "The name that should be used to sort the person in a list."
    }
  },
  "canonicalName": "People Service",
  "id": "people:v1",
  "version": "v1",
  "name": "people",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/user.gender.read": {
          "description": "See your gender"
        },
        "https://www.googleapis.com/auth/user.organization.read": {
          "description": "See your education, work history and org info"
        },
        "https://www.googleapis.com/auth/directory.readonly": {
          "description": "See and download your organization's GSuite directory"
        },
        "https://www.googleapis.com/auth/userinfo.email": {
          "description": "View your email address"
        },
        "https://www.googleapis.com/auth/user.addresses.read": {
          "description": "View your street addresses"
        },
        "https://www.googleapis.com/auth/contacts": {
          "description": "See, edit, download, and permanently delete your contacts"
        },
        "https://www.googleapis.com/auth/user.phonenumbers.read": {
          "description": "View your phone numbers"
        },
        "https://www.googleapis.com/auth/user.emails.read": {
          "description": "View your email addresses"
        },
        "https://www.googleapis.com/auth/contacts.readonly": {
          "description": "See and download your contacts"
        },
        "https://www.googleapis.com/auth/user.birthday.read": {
          "description": "View your complete date of birth"
        },
        "https://www.googleapis.com/auth/userinfo.profile": {
          "description": "See your personal info, including any personal info you've made publicly available"
        },
        "https://www.googleapis.com/auth/contacts.other.readonly": {
          "description": "See and download contact info automatically saved in your \"Other contacts\""
        }
      }
    }
  },
  "title": "People API",
  "revision": "20200730",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "description": "Provides access to information about profiles and contacts.",
  "discoveryVersion": "v1",
  "batchPath": "batch",
  "kind": "discovery#restDescription",
  "documentationLink": "https://developers.google.com/people/",
  "resources": {
    "contactGroups": {
      "methods": {
        "list": {
          "flatPath": "v1/contactGroups",
          "path": "v1/contactGroups",
          "response": {
            "$ref": "ListContactGroupsResponse"
          },
          "parameters": {
            "syncToken": {
              "type": "string",
              "description": "Optional. A sync token, returned by a previous call to `contactgroups.list`. Only resources changed since the sync token was created will be returned.",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Optional. The next_page_token value returned from a previous call to [ListContactGroups](/people/api/rest/v1/contactgroups/list). Requests the next page of resources."
            },
            "pageSize": {
              "location": "query",
              "description": "Optional. The maximum number of resources to return. Valid values are between 1 and 1000, inclusive. Defaults to 30 if not set or set to 0.",
              "type": "integer",
              "format": "int32"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly"
          ],
          "httpMethod": "GET",
          "id": "people.contactGroups.list",
          "description": "List all contact groups owned by the authenticated user. Members of the contact groups are not populated.",
          "parameterOrder": []
        },
        "batchGet": {
          "flatPath": "v1/contactGroups:batchGet",
          "parameters": {
            "resourceNames": {
              "type": "string",
              "location": "query",
              "repeated": true,
              "description": "Required. The resource names of the contact groups to get."
            },
            "maxMembers": {
              "location": "query",
              "description": "Optional. Specifies the maximum number of members to return for each group. Defaults to 0 if not set, which will return zero members.",
              "format": "int32",
              "type": "integer"
            }
          },
          "response": {
            "$ref": "BatchGetContactGroupsResponse"
          },
          "description": "Get a list of contact groups owned by the authenticated user by specifying a list of contact group resource names.",
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly"
          ],
          "httpMethod": "GET",
          "id": "people.contactGroups.batchGet",
          "parameterOrder": [],
          "path": "v1/contactGroups:batchGet"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "flatPath": "v1/contactGroups/{contactGroupsId}",
          "httpMethod": "DELETE",
          "path": "v1/{+resourceName}",
          "description": "Delete an existing contact group owned by the authenticated user by specifying a contact group resource name.",
          "response": {
            "$ref": "Empty"
          },
          "id": "people.contactGroups.delete",
          "parameterOrder": [
            "resourceName"
          ],
          "parameters": {
            "deleteContacts": {
              "location": "query",
              "type": "boolean",
              "description": "Optional. Set to true to also delete the contacts in the specified group."
            },
            "resourceName": {
              "type": "string",
              "description": "Required. The resource name of the contact group to delete.",
              "location": "path",
              "required": true,
              "pattern": "^contactGroups/[^/]+$"
            }
          }
        },
        "update": {
          "parameters": {
            "resourceName": {
              "pattern": "^contactGroups/[^/]+$",
              "required": true,
              "description": "The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`.",
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "resourceName"
          ],
          "request": {
            "$ref": "UpdateContactGroupRequest"
          },
          "description": "Update the name of an existing contact group owned by the authenticated user.",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "response": {
            "$ref": "ContactGroup"
          },
          "httpMethod": "PUT",
          "flatPath": "v1/contactGroups/{contactGroupsId}",
          "path": "v1/{+resourceName}",
          "id": "people.contactGroups.update"
        },
        "create": {
          "id": "people.contactGroups.create",
          "description": "Create a new contact group owned by the authenticated user.",
          "parameterOrder": [],
          "path": "v1/contactGroups",
          "flatPath": "v1/contactGroups",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "response": {
            "$ref": "ContactGroup"
          },
          "httpMethod": "POST",
          "request": {
            "$ref": "CreateContactGroupRequest"
          },
          "parameters": {}
        },
        "get": {
          "httpMethod": "GET",
          "description": "Get a specific contact group owned by the authenticated user by specifying a contact group resource name.",
          "flatPath": "v1/contactGroups/{contactGroupsId}",
          "parameters": {
            "resourceName": {
              "location": "path",
              "description": "Required. The resource name of the contact group to get.",
              "type": "string",
              "pattern": "^contactGroups/[^/]+$",
              "required": true
            },
            "maxMembers": {
              "type": "integer",
              "format": "int32",
              "description": "Optional. Specifies the maximum number of members to return. Defaults to 0 if not set, which will return zero members.",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly"
          ],
          "parameterOrder": [
            "resourceName"
          ],
          "response": {
            "$ref": "ContactGroup"
          },
          "path": "v1/{+resourceName}",
          "id": "people.contactGroups.get"
        }
      },
      "resources": {
        "members": {
          "methods": {
            "modify": {
              "response": {
                "$ref": "ModifyContactGroupMembersResponse"
              },
              "request": {
                "$ref": "ModifyContactGroupMembersRequest"
              },
              "description": "Modify the members of a contact group owned by the authenticated user. The only system contact groups that can have members added are `contactGroups/myContacts` and `contactGroups/starred`. Other system contact groups are deprecated and can only have contacts removed.",
              "parameterOrder": [
                "resourceName"
              ],
              "path": "v1/{+resourceName}/members:modify",
              "id": "people.contactGroups.members.modify",
              "parameters": {
                "resourceName": {
                  "location": "path",
                  "required": true,
                  "description": "Required. The resource name of the contact group to modify.",
                  "pattern": "^contactGroups/[^/]+$",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/contacts"
              ],
              "httpMethod": "POST",
              "flatPath": "v1/contactGroups/{contactGroupsId}/members:modify"
            }
          }
        }
      }
    },
    "people": {
      "methods": {
        "deleteContact": {
          "id": "people.people.deleteContact",
          "parameterOrder": [
            "resourceName"
          ],
          "description": "Delete a contact person. Any non-contact data will not be deleted.",
          "parameters": {
            "resourceName": {
              "pattern": "^people/[^/]+$",
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Required. The resource name of the contact to delete."
            }
          },
          "flatPath": "v1/people/{peopleId}:deleteContact",
          "httpMethod": "DELETE",
          "path": "v1/{+resourceName}:deleteContact",
          "response": {
            "$ref": "Empty"
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ]
        },
        "updateContactPhoto": {
          "httpMethod": "PATCH",
          "flatPath": "v1/people/{peopleId}:updateContactPhoto",
          "parameterOrder": [
            "resourceName"
          ],
          "description": "Update a contact's photo.",
          "request": {
            "$ref": "UpdateContactPhotoRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "path": "v1/{+resourceName}:updateContactPhoto",
          "response": {
            "$ref": "UpdateContactPhotoResponse"
          },
          "parameters": {
            "resourceName": {
              "pattern": "^people/[^/]+$",
              "type": "string",
              "required": true,
              "description": "Required. Person resource name",
              "location": "path"
            }
          },
          "id": "people.people.updateContactPhoto"
        },
        "deleteContactPhoto": {
          "id": "people.people.deleteContactPhoto",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameterOrder": [
            "resourceName"
          ],
          "response": {
            "$ref": "DeleteContactPhotoResponse"
          },
          "parameters": {
            "sources": {
              "description": "Optional. A mask of what source types to return. Defaults to ReadSourceType.CONTACT and ReadSourceType.PROFILE if not set.",
              "repeated": true,
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "Unspecified.",
                "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
                "Returns SourceType.CONTACT.",
                "Returns SourceType.DOMAIN_CONTACT."
              ],
              "enum": [
                "READ_SOURCE_TYPE_UNSPECIFIED",
                "READ_SOURCE_TYPE_PROFILE",
                "READ_SOURCE_TYPE_CONTACT",
                "READ_SOURCE_TYPE_DOMAIN_CONTACT"
              ]
            },
            "resourceName": {
              "description": "Required. The resource name of the contact whose photo will be deleted.",
              "required": true,
              "type": "string",
              "pattern": "^people/[^/]+$",
              "location": "path"
            },
            "personFields": {
              "type": "string",
              "location": "query",
              "format": "google-fieldmask",
              "description": "Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to empty if not set, which will skip the post mutate get. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * residences * sipAddresses * skills * urls * userDefined"
            }
          },
          "flatPath": "v1/people/{peopleId}:deleteContactPhoto",
          "path": "v1/{+resourceName}:deleteContactPhoto",
          "description": "Delete a contact's photo."
        },
        "listDirectoryPeople": {
          "parameters": {
            "pageToken": {
              "type": "string",
              "description": "Optional. A page token, received from a previous `ListDirectoryPeople` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListDirectoryPeople` must match the call that provided the page token.",
              "location": "query"
            },
            "mergeSources": {
              "description": "Optional. Additional data to merge into the directory sources if they are connected through verified join keys such as email addresses or phone numbers.",
              "enum": [
                "DIRECTORY_MERGE_SOURCE_TYPE_UNSPECIFIED",
                "DIRECTORY_MERGE_SOURCE_TYPE_CONTACT"
              ],
              "type": "string",
              "location": "query",
              "repeated": true,
              "enumDescriptions": [
                "Unspecified.",
                "User owned contact."
              ]
            },
            "readMask": {
              "format": "google-fieldmask",
              "type": "string",
              "location": "query",
              "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * residences * sipAddresses * skills * urls * userDefined"
            },
            "pageSize": {
              "format": "int32",
              "description": "Optional. The number of people to include in the response. Valid values are between 1 and 1000, inclusive. Defaults to 100 if not set or set to 0.",
              "type": "integer",
              "location": "query"
            },
            "requestSyncToken": {
              "description": "Optional. Whether the response should include `next_sync_token`, which can be used to get all changes since the last request. For subsequent sync requests use the `sync_token` param instead.",
              "type": "boolean",
              "location": "query"
            },
            "syncToken": {
              "location": "query",
              "description": "Optional. A sync token, received from a previous `ListDirectoryPeople` call. Provide this to retrieve only the resources changed since the last request. When syncing, all other parameters provided to `ListDirectoryPeople` must match the call that provided the sync token.",
              "type": "string"
            },
            "sources": {
              "repeated": true,
              "description": "Required. Directory sources to return.",
              "location": "query",
              "enumDescriptions": [
                "Unspecified.",
                "G Suite domain shared contact.",
                "G Suite domain profile."
              ],
              "enum": [
                "DIRECTORY_SOURCE_TYPE_UNSPECIFIED",
                "DIRECTORY_SOURCE_TYPE_DOMAIN_CONTACT",
                "DIRECTORY_SOURCE_TYPE_DOMAIN_PROFILE"
              ],
              "type": "string"
            }
          },
          "parameterOrder": [],
          "description": "Provides a list of domain profiles and domain contacts in the authenticated user's domain directory.",
          "id": "people.people.listDirectoryPeople",
          "path": "v1/people:listDirectoryPeople",
          "flatPath": "v1/people:listDirectoryPeople",
          "httpMethod": "GET",
          "response": {
            "$ref": "ListDirectoryPeopleResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/directory.readonly"
          ]
        },
        "getBatchGet": {
          "parameterOrder": [],
          "description": "Provides information about a list of specific people by specifying a list of requested resource names. Use `people/me` to indicate the authenticated user. The request throws a 400 error if 'personFields' is not specified.",
          "parameters": {
            "personFields": {
              "type": "string",
              "format": "google-fieldmask",
              "location": "query",
              "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * residences * sipAddresses * skills * urls * userDefined"
            },
            "requestMask.includeField": {
              "description": "Required. Comma-separated list of person fields to be included in the response. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
              "type": "string",
              "location": "query",
              "format": "google-fieldmask"
            },
            "sources": {
              "enum": [
                "READ_SOURCE_TYPE_UNSPECIFIED",
                "READ_SOURCE_TYPE_PROFILE",
                "READ_SOURCE_TYPE_CONTACT",
                "READ_SOURCE_TYPE_DOMAIN_CONTACT"
              ],
              "description": "Optional. A mask of what source types to return. Defaults to ReadSourceType.CONTACT and ReadSourceType.PROFILE if not set.",
              "location": "query",
              "enumDescriptions": [
                "Unspecified.",
                "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
                "Returns SourceType.CONTACT.",
                "Returns SourceType.DOMAIN_CONTACT."
              ],
              "type": "string",
              "repeated": true
            },
            "resourceNames": {
              "location": "query",
              "repeated": true,
              "type": "string",
              "description": "Required. The resource names of the people to provide information about. - To get information about the authenticated user, specify `people/me`. - To get information about a google account, specify `people/{account_id}`. - To get information about a contact, specify the resource name that identifies the contact as returned by [`people.connections.list`](/people/api/rest/v1/people.connections/list). You can include up to 50 resource names in one request."
            }
          },
          "path": "v1/people:batchGet",
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly",
            "https://www.googleapis.com/auth/directory.readonly",
            "https://www.googleapis.com/auth/user.addresses.read",
            "https://www.googleapis.com/auth/user.birthday.read",
            "https://www.googleapis.com/auth/user.emails.read",
            "https://www.googleapis.com/auth/user.gender.read",
            "https://www.googleapis.com/auth/user.organization.read",
            "https://www.googleapis.com/auth/user.phonenumbers.read",
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile"
          ],
          "flatPath": "v1/people:batchGet",
          "response": {
            "$ref": "GetPeopleResponse"
          },
          "httpMethod": "GET",
          "id": "people.people.getBatchGet"
        },
        "updateContact": {
          "description": "Update contact data for an existing contact person. Any non-contact data will not be modified. Any non-contact data in the person to update will be ignored. All fields specified in the `update_mask` will be replaced. The server returns a 400 error if `person.metadata.sources` is not specified for the contact to be updated or if there is no contact source. The server returns a 400 error with reason `\"failedPrecondition\"` if `person.metadata.sources.etag` is different than the contact's etag, which indicates the contact has changed since its data was read. Clients should get the latest person and merge their updates into the latest person. The server returns a 400 error if `memberships` are being updated and there are no contact group memberships specified on the person. The server returns a 400 error if more than one field is specified on a field that is a singleton for contact sources: * biographies * birthdays * genders * names",
          "request": {
            "$ref": "Person"
          },
          "parameterOrder": [
            "resourceName"
          ],
          "id": "people.people.updateContact",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameters": {
            "sources": {
              "enum": [
                "READ_SOURCE_TYPE_UNSPECIFIED",
                "READ_SOURCE_TYPE_PROFILE",
                "READ_SOURCE_TYPE_CONTACT",
                "READ_SOURCE_TYPE_DOMAIN_CONTACT"
              ],
              "repeated": true,
              "location": "query",
              "type": "string",
              "description": "Optional. A mask of what source types to return. Defaults to ReadSourceType.CONTACT and ReadSourceType.PROFILE if not set.",
              "enumDescriptions": [
                "Unspecified.",
                "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
                "Returns SourceType.CONTACT.",
                "Returns SourceType.DOMAIN_CONTACT."
              ]
            },
            "updatePersonFields": {
              "type": "string",
              "description": "Required. A field mask to restrict which fields on the person are updated. Multiple fields can be specified by separating them with commas. All updated fields will be replaced. Valid values are: * addresses * biographies * birthdays * calendarUrls * emailAddresses * events * externalIds * genders * imClients * interests * locales * memberships * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * relations * residences * sipAddresses * urls * userDefined",
              "format": "google-fieldmask",
              "location": "query"
            },
            "resourceName": {
              "location": "path",
              "description": "The resource name for the person, assigned by the server. An ASCII string with a max length of 27 characters, in the form of `people/{person_id}`.",
              "pattern": "^people/[^/]+$",
              "type": "string",
              "required": true
            },
            "personFields": {
              "type": "string",
              "description": "Optional. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Defaults to all fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * residences * sipAddresses * skills * urls * userDefined",
              "format": "google-fieldmask",
              "location": "query"
            }
          },
          "httpMethod": "PATCH",
          "flatPath": "v1/people/{peopleId}:updateContact",
          "response": {
            "$ref": "Person"
          },
          "path": "v1/{+resourceName}:updateContact"
        },
        "searchDirectoryPeople": {
          "parameterOrder": [],
          "path": "v1/people:searchDirectoryPeople",
          "id": "people.people.searchDirectoryPeople",
          "flatPath": "v1/people:searchDirectoryPeople",
          "description": "Provides a list of domain profiles and domain contacts in the authenticated user's domain directory that match the search query.",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/directory.readonly"
          ],
          "response": {
            "$ref": "SearchDirectoryPeopleResponse"
          },
          "parameters": {
            "sources": {
              "location": "query",
              "enum": [
                "DIRECTORY_SOURCE_TYPE_UNSPECIFIED",
                "DIRECTORY_SOURCE_TYPE_DOMAIN_CONTACT",
                "DIRECTORY_SOURCE_TYPE_DOMAIN_PROFILE"
              ],
              "repeated": true,
              "type": "string",
              "enumDescriptions": [
                "Unspecified.",
                "G Suite domain shared contact.",
                "G Suite domain profile."
              ],
              "description": "Required. Directory sources to return."
            },
            "readMask": {
              "type": "string",
              "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * residences * sipAddresses * skills * urls * userDefined",
              "format": "google-fieldmask",
              "location": "query"
            },
            "pageSize": {
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "Optional. The number of people to include in the response. Valid values are between 1 and 500, inclusive. Defaults to 100 if not set or set to 0."
            },
            "pageToken": {
              "description": "Optional. A page token, received from a previous `SearchDirectoryPeople` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchDirectoryPeople` must match the call that provided the page token.",
              "location": "query",
              "type": "string"
            },
            "mergeSources": {
              "enum": [
                "DIRECTORY_MERGE_SOURCE_TYPE_UNSPECIFIED",
                "DIRECTORY_MERGE_SOURCE_TYPE_CONTACT"
              ],
              "enumDescriptions": [
                "Unspecified.",
                "User owned contact."
              ],
              "location": "query",
              "repeated": true,
              "type": "string",
              "description": "Optional. Additional data to merge into the directory sources if they are connected through verified join keys such as email addresses or phone numbers."
            },
            "query": {
              "description": "Required. Prefix query that matches fields in the person. Does NOT use the read_mask for determining what fields to match.",
              "type": "string",
              "location": "query"
            }
          }
        },
        "get": {
          "description": "Provides information about a person by specifying a resource name. Use `people/me` to indicate the authenticated user. The request throws a 400 error if 'personFields' is not specified.",
          "httpMethod": "GET",
          "id": "people.people.get",
          "flatPath": "v1/people/{peopleId}",
          "parameters": {
            "sources": {
              "enum": [
                "READ_SOURCE_TYPE_UNSPECIFIED",
                "READ_SOURCE_TYPE_PROFILE",
                "READ_SOURCE_TYPE_CONTACT",
                "READ_SOURCE_TYPE_DOMAIN_CONTACT"
              ],
              "enumDescriptions": [
                "Unspecified.",
                "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
                "Returns SourceType.CONTACT.",
                "Returns SourceType.DOMAIN_CONTACT."
              ],
              "repeated": true,
              "type": "string",
              "description": "Optional. A mask of what source types to return. Defaults to ReadSourceType.PROFILE and ReadSourceType.CONTACT if not set.",
              "location": "query"
            },
            "resourceName": {
              "description": "Required. The resource name of the person to provide information about. - To get information about the authenticated user, specify `people/me`. - To get information about a google account, specify `people/{account_id}`. - To get information about a contact, specify the resource name that identifies the contact as returned by [`people.connections.list`](/people/api/rest/v1/people.connections/list).",
              "required": true,
              "pattern": "^people/[^/]+$",
              "type": "string",
              "location": "path"
            },
            "personFields": {
              "type": "string",
              "location": "query",
              "format": "google-fieldmask",
              "description": "Required. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * residences * sipAddresses * skills * urls * userDefined"
            },
            "requestMask.includeField": {
              "type": "string",
              "format": "google-fieldmask",
              "description": "Required. Comma-separated list of person fields to be included in the response. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
              "location": "query"
            }
          },
          "path": "v1/{+resourceName}",
          "response": {
            "$ref": "Person"
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly",
            "https://www.googleapis.com/auth/directory.readonly",
            "https://www.googleapis.com/auth/user.addresses.read",
            "https://www.googleapis.com/auth/user.birthday.read",
            "https://www.googleapis.com/auth/user.emails.read",
            "https://www.googleapis.com/auth/user.gender.read",
            "https://www.googleapis.com/auth/user.organization.read",
            "https://www.googleapis.com/auth/user.phonenumbers.read",
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile"
          ],
          "parameterOrder": [
            "resourceName"
          ]
        },
        "createContact": {
          "description": "Create a new contact and return the person resource for that contact. The request throws a 400 error if more than one field is specified on a field that is a singleton for contact sources: * biographies * birthdays * genders * names",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "id": "people.people.createContact",
          "httpMethod": "POST",
          "response": {
            "$ref": "Person"
          },
          "parameters": {
            "sources": {
              "enum": [
                "READ_SOURCE_TYPE_UNSPECIFIED",
                "READ_SOURCE_TYPE_PROFILE",
                "READ_SOURCE_TYPE_CONTACT",
                "READ_SOURCE_TYPE_DOMAIN_CONTACT"
              ],
              "description": "Optional. A mask of what source types to return. Defaults to ReadSourceType.CONTACT and ReadSourceType.PROFILE if not set.",
              "repeated": true,
              "location": "query",
              "enumDescriptions": [
                "Unspecified.",
                "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
                "Returns SourceType.CONTACT.",
                "Returns SourceType.DOMAIN_CONTACT."
              ],
              "type": "string"
            },
            "personFields": {
              "type": "string",
              "format": "google-fieldmask",
              "location": "query",
              "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Defaults to all fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * residences * sipAddresses * skills * urls * userDefined"
            }
          },
          "path": "v1/people:createContact",
          "flatPath": "v1/people:createContact",
          "request": {
            "$ref": "Person"
          },
          "parameterOrder": []
        }
      },
      "resources": {
        "connections": {
          "methods": {
            "list": {
              "path": "v1/{+resourceName}/connections",
              "parameters": {
                "syncToken": {
                  "description": "Optional. A sync token, received from a previous `ListConnections` call. Provide this to retrieve only the resources changed since the last request. Sync requests that specify `sync_token` have an additional rate limit. When syncing, all other parameters provided to `ListConnections` must match the call that provided the sync token.",
                  "location": "query",
                  "type": "string"
                },
                "personFields": {
                  "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * residences * sipAddresses * skills * urls * userDefined",
                  "type": "string",
                  "location": "query",
                  "format": "google-fieldmask"
                },
                "pageSize": {
                  "type": "integer",
                  "format": "int32",
                  "location": "query",
                  "description": "Optional. The number of connections to include in the response. Valid values are between 1 and 1000, inclusive. Defaults to 100 if not set or set to 0."
                },
                "resourceName": {
                  "location": "path",
                  "required": true,
                  "description": "Required. The resource name to return connections for. Only `people/me` is valid.",
                  "type": "string",
                  "pattern": "^people/[^/]+$"
                },
                "sortOrder": {
                  "type": "string",
                  "enumDescriptions": [
                    "Sort people by when they were changed; older entries first.",
                    "Sort people by when they were changed; newer entries first.",
                    "Sort people by first name.",
                    "Sort people by last name."
                  ],
                  "location": "query",
                  "enum": [
                    "LAST_MODIFIED_ASCENDING",
                    "LAST_MODIFIED_DESCENDING",
                    "FIRST_NAME_ASCENDING",
                    "LAST_NAME_ASCENDING"
                  ],
                  "description": "Optional. The order in which the connections should be sorted. Defaults to `LAST_MODIFIED_ASCENDING`."
                },
                "sources": {
                  "enumDescriptions": [
                    "Unspecified.",
                    "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
                    "Returns SourceType.CONTACT.",
                    "Returns SourceType.DOMAIN_CONTACT."
                  ],
                  "enum": [
                    "READ_SOURCE_TYPE_UNSPECIFIED",
                    "READ_SOURCE_TYPE_PROFILE",
                    "READ_SOURCE_TYPE_CONTACT",
                    "READ_SOURCE_TYPE_DOMAIN_CONTACT"
                  ],
                  "repeated": true,
                  "type": "string",
                  "description": "Optional. A mask of what source types to return. Defaults to ReadSourceType.CONTACT and ReadSourceType.PROFILE if not set.",
                  "location": "query"
                },
                "requestMask.includeField": {
                  "format": "google-fieldmask",
                  "type": "string",
                  "description": "Required. Comma-separated list of person fields to be included in the response. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
                  "location": "query"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Optional. A page token, received from a previous `ListConnections` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListConnections` must match the call that provided the page token.",
                  "type": "string"
                },
                "requestSyncToken": {
                  "location": "query",
                  "type": "boolean",
                  "description": "Optional. Whether the response should include `next_sync_token`, which can be used to get all changes since the last request. For subsequent sync requests use the `sync_token` param instead. Initial sync requests that specify `request_sync_token` have an additional rate limit."
                }
              },
              "id": "people.people.connections.list",
              "parameterOrder": [
                "resourceName"
              ],
              "description": "Provides a list of the authenticated user's contacts. The request throws a 400 error if 'personFields' is not specified.",
              "httpMethod": "GET",
              "flatPath": "v1/people/{peopleId}/connections",
              "response": {
                "$ref": "ListConnectionsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/contacts",
                "https://www.googleapis.com/auth/contacts.readonly"
              ]
            }
          }
        }
      }
    },
    "otherContacts": {
      "methods": {
        "copyOtherContactToMyContactsGroup": {
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.other.readonly"
          ],
          "request": {
            "$ref": "CopyOtherContactToMyContactsGroupRequest"
          },
          "flatPath": "v1/otherContacts/{otherContactsId}:copyOtherContactToMyContactsGroup",
          "response": {
            "$ref": "Person"
          },
          "parameterOrder": [
            "resourceName"
          ],
          "httpMethod": "POST",
          "parameters": {
            "resourceName": {
              "location": "path",
              "pattern": "^otherContacts/[^/]+$",
              "type": "string",
              "description": "Required. The resource name of the \"Other contact\" to copy.",
              "required": true
            }
          },
          "path": "v1/{+resourceName}:copyOtherContactToMyContactsGroup",
          "description": "Copies an \"Other contact\" to a new contact in the user's \"myContacts\" group",
          "id": "people.otherContacts.copyOtherContactToMyContactsGroup"
        },
        "list": {
          "path": "v1/otherContacts",
          "parameterOrder": [],
          "response": {
            "$ref": "ListOtherContactsResponse"
          },
          "id": "people.otherContacts.list",
          "flatPath": "v1/otherContacts",
          "parameters": {
            "requestSyncToken": {
              "location": "query",
              "description": "Optional. Whether the response should include `next_sync_token`, which can be used to get all changes since the last request. For subsequent sync requests use the `sync_token` param instead. Initial sync requests that specify `request_sync_token` have an additional rate limit.",
              "type": "boolean"
            },
            "pageSize": {
              "location": "query",
              "type": "integer",
              "description": "Optional. The number of \"Other contacts\" to include in the response. Valid values are between 1 and 1000, inclusive. Defaults to 100 if not set or set to 0.",
              "format": "int32"
            },
            "readMask": {
              "type": "string",
              "location": "query",
              "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * emailAddresses * names * phoneNumbers",
              "format": "google-fieldmask"
            },
            "syncToken": {
              "location": "query",
              "description": "Optional. A sync token, received from a previous `ListOtherContacts` call. Provide this to retrieve only the resources changed since the last request. Sync requests that specify `sync_token` have an additional rate limit. When syncing, all other parameters provided to `ListOtherContacts` must match the call that provided the sync token.",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "description": "Optional. A page token, received from a previous `ListOtherContacts` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListOtherContacts` must match the call that provided the page token.",
              "location": "query"
            }
          },
          "description": "List all \"Other contacts\", that is contacts that are not in a contact group. \"Other contacts\" are typically auto created contacts from interactions.",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/contacts.other.readonly"
          ]
        }
      }
    }
  },
  "ownerDomain": "google.com",
  "mtlsRootUrl": "https://people.mtls.googleapis.com/",
  "ownerName": "Google",
  "basePath": "",
  "version_module": true,
  "rootUrl": "https://people.googleapis.com/",
  "baseUrl": "https://people.googleapis.com/"
}
