/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.urlshortener.model;

/**
 * Model definition for AnalyticsSnapshot.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the URL Shortener API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AnalyticsSnapshot extends com.google.api.client.json.GenericJson {

  /**
   * Top browsers, e.g. "Chrome"; sorted by (descending) click counts. Only present if this data is
   * available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<StringCount> browsers;

  /**
   * Top countries (expressed as country codes), e.g. "US" or "DE"; sorted by (descending) click
   * counts. Only present if this data is available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<StringCount> countries;

  /**
   * Number of clicks on all goo.gl short URLs pointing to this long URL.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long longUrlClicks;

  /**
   * Top platforms or OSes, e.g. "Windows"; sorted by (descending) click counts. Only present if
   * this data is available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<StringCount> platforms;

  /**
   * Top referring hosts, e.g. "www.google.com"; sorted by (descending) click counts. Only present
   * if this data is available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<StringCount> referrers;

  /**
   * Number of clicks on this short URL.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long shortUrlClicks;

  /**
   * Top browsers, e.g. "Chrome"; sorted by (descending) click counts. Only present if this data is
   * available.
   * @return value or {@code null} for none
   */
  public java.util.List<StringCount> getBrowsers() {
    return browsers;
  }

  /**
   * Top browsers, e.g. "Chrome"; sorted by (descending) click counts. Only present if this data is
   * available.
   * @param browsers browsers or {@code null} for none
   */
  public AnalyticsSnapshot setBrowsers(java.util.List<StringCount> browsers) {
    this.browsers = browsers;
    return this;
  }

  /**
   * Top countries (expressed as country codes), e.g. "US" or "DE"; sorted by (descending) click
   * counts. Only present if this data is available.
   * @return value or {@code null} for none
   */
  public java.util.List<StringCount> getCountries() {
    return countries;
  }

  /**
   * Top countries (expressed as country codes), e.g. "US" or "DE"; sorted by (descending) click
   * counts. Only present if this data is available.
   * @param countries countries or {@code null} for none
   */
  public AnalyticsSnapshot setCountries(java.util.List<StringCount> countries) {
    this.countries = countries;
    return this;
  }

  /**
   * Number of clicks on all goo.gl short URLs pointing to this long URL.
   * @return value or {@code null} for none
   */
  public java.lang.Long getLongUrlClicks() {
    return longUrlClicks;
  }

  /**
   * Number of clicks on all goo.gl short URLs pointing to this long URL.
   * @param longUrlClicks longUrlClicks or {@code null} for none
   */
  public AnalyticsSnapshot setLongUrlClicks(java.lang.Long longUrlClicks) {
    this.longUrlClicks = longUrlClicks;
    return this;
  }

  /**
   * Top platforms or OSes, e.g. "Windows"; sorted by (descending) click counts. Only present if
   * this data is available.
   * @return value or {@code null} for none
   */
  public java.util.List<StringCount> getPlatforms() {
    return platforms;
  }

  /**
   * Top platforms or OSes, e.g. "Windows"; sorted by (descending) click counts. Only present if
   * this data is available.
   * @param platforms platforms or {@code null} for none
   */
  public AnalyticsSnapshot setPlatforms(java.util.List<StringCount> platforms) {
    this.platforms = platforms;
    return this;
  }

  /**
   * Top referring hosts, e.g. "www.google.com"; sorted by (descending) click counts. Only present
   * if this data is available.
   * @return value or {@code null} for none
   */
  public java.util.List<StringCount> getReferrers() {
    return referrers;
  }

  /**
   * Top referring hosts, e.g. "www.google.com"; sorted by (descending) click counts. Only present
   * if this data is available.
   * @param referrers referrers or {@code null} for none
   */
  public AnalyticsSnapshot setReferrers(java.util.List<StringCount> referrers) {
    this.referrers = referrers;
    return this;
  }

  /**
   * Number of clicks on this short URL.
   * @return value or {@code null} for none
   */
  public java.lang.Long getShortUrlClicks() {
    return shortUrlClicks;
  }

  /**
   * Number of clicks on this short URL.
   * @param shortUrlClicks shortUrlClicks or {@code null} for none
   */
  public AnalyticsSnapshot setShortUrlClicks(java.lang.Long shortUrlClicks) {
    this.shortUrlClicks = shortUrlClicks;
    return this;
  }

  @Override
  public AnalyticsSnapshot set(String fieldName, Object value) {
    return (AnalyticsSnapshot) super.set(fieldName, value);
  }

  @Override
  public AnalyticsSnapshot clone() {
    return (AnalyticsSnapshot) super.clone();
  }

}
