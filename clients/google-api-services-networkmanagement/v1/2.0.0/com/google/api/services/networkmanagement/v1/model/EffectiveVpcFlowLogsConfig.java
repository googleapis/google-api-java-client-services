/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networkmanagement.v1.model;

/**
 * A configuration to generate a response for GetEffectiveVpcFlowLogsConfig request.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class EffectiveVpcFlowLogsConfig extends com.google.api.client.json.GenericJson {

  /**
   * The aggregation interval for the logs. Default value is INTERVAL_5_SEC.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String aggregationInterval;

  /**
   * Determines whether to include cross project annotations in the logs. This field is available
   * only for organization configurations. If not specified in org configs will be set to
   * CROSS_PROJECT_METADATA_ENABLED.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String crossProjectMetadata;

  /**
   * Export filter used to define which VPC Flow Logs should be logged.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String filterExpr;

  /**
   * The value of the field must be in (0, 1]. The sampling rate of VPC Flow Logs where 1.0 means
   * all collected logs are reported. Setting the sampling rate to 0.0 is not allowed. If you want
   * to disable VPC Flow Logs, use the state field instead. Default value is 1.0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float flowSampling;

  /**
   * Traffic will be logged from the Interconnect Attachment. Format:
   * projects/{project_id}/regions/{region}/interconnectAttachments/{name}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String interconnectAttachment;

  /**
   * Configures whether all, none or a subset of metadata fields should be added to the reported VPC
   * flow logs. Default value is INCLUDE_ALL_METADATA.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String metadata;

  /**
   * Custom metadata fields to include in the reported VPC flow logs. Can only be specified if
   * "metadata" was set to CUSTOM_METADATA.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> metadataFields;

  /**
   * Unique name of the configuration. The name can have one of the following forms: - For project-
   * level configurations:
   * `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}` - For
   * organization-level configurations:
   * `organizations/{organization_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}`
   * - For a Compute config, the name will be the path of the subnet:
   * `projects/{project_id}/regions/{region}/subnetworks/{subnet_id}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Traffic will be logged from VMs, VPN tunnels and Interconnect Attachments within the network.
   * Format: projects/{project_id}/global/networks/{name}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String network;

  /**
   * Specifies the scope of the config (e.g., SUBNET, NETWORK, ORGANIZATION..).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String scope;

  /**
   * The state of the VPC Flow Log configuration. Default value is ENABLED. When creating a new
   * configuration, it must be enabled. Setting state=DISABLED will pause the log generation for
   * this config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Traffic will be logged from VMs within the subnetwork. Format:
   * projects/{project_id}/regions/{region}/subnetworks/{name}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subnet;

  /**
   * Traffic will be logged from the VPN Tunnel. Format:
   * projects/{project_id}/regions/{region}/vpnTunnels/{name}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vpnTunnel;

  /**
   * The aggregation interval for the logs. Default value is INTERVAL_5_SEC.
   * @return value or {@code null} for none
   */
  public java.lang.String getAggregationInterval() {
    return aggregationInterval;
  }

  /**
   * The aggregation interval for the logs. Default value is INTERVAL_5_SEC.
   * @param aggregationInterval aggregationInterval or {@code null} for none
   */
  public EffectiveVpcFlowLogsConfig setAggregationInterval(java.lang.String aggregationInterval) {
    this.aggregationInterval = aggregationInterval;
    return this;
  }

  /**
   * Determines whether to include cross project annotations in the logs. This field is available
   * only for organization configurations. If not specified in org configs will be set to
   * CROSS_PROJECT_METADATA_ENABLED.
   * @return value or {@code null} for none
   */
  public java.lang.String getCrossProjectMetadata() {
    return crossProjectMetadata;
  }

  /**
   * Determines whether to include cross project annotations in the logs. This field is available
   * only for organization configurations. If not specified in org configs will be set to
   * CROSS_PROJECT_METADATA_ENABLED.
   * @param crossProjectMetadata crossProjectMetadata or {@code null} for none
   */
  public EffectiveVpcFlowLogsConfig setCrossProjectMetadata(java.lang.String crossProjectMetadata) {
    this.crossProjectMetadata = crossProjectMetadata;
    return this;
  }

  /**
   * Export filter used to define which VPC Flow Logs should be logged.
   * @return value or {@code null} for none
   */
  public java.lang.String getFilterExpr() {
    return filterExpr;
  }

  /**
   * Export filter used to define which VPC Flow Logs should be logged.
   * @param filterExpr filterExpr or {@code null} for none
   */
  public EffectiveVpcFlowLogsConfig setFilterExpr(java.lang.String filterExpr) {
    this.filterExpr = filterExpr;
    return this;
  }

  /**
   * The value of the field must be in (0, 1]. The sampling rate of VPC Flow Logs where 1.0 means
   * all collected logs are reported. Setting the sampling rate to 0.0 is not allowed. If you want
   * to disable VPC Flow Logs, use the state field instead. Default value is 1.0.
   * @return value or {@code null} for none
   */
  public java.lang.Float getFlowSampling() {
    return flowSampling;
  }

  /**
   * The value of the field must be in (0, 1]. The sampling rate of VPC Flow Logs where 1.0 means
   * all collected logs are reported. Setting the sampling rate to 0.0 is not allowed. If you want
   * to disable VPC Flow Logs, use the state field instead. Default value is 1.0.
   * @param flowSampling flowSampling or {@code null} for none
   */
  public EffectiveVpcFlowLogsConfig setFlowSampling(java.lang.Float flowSampling) {
    this.flowSampling = flowSampling;
    return this;
  }

  /**
   * Traffic will be logged from the Interconnect Attachment. Format:
   * projects/{project_id}/regions/{region}/interconnectAttachments/{name}
   * @return value or {@code null} for none
   */
  public java.lang.String getInterconnectAttachment() {
    return interconnectAttachment;
  }

  /**
   * Traffic will be logged from the Interconnect Attachment. Format:
   * projects/{project_id}/regions/{region}/interconnectAttachments/{name}
   * @param interconnectAttachment interconnectAttachment or {@code null} for none
   */
  public EffectiveVpcFlowLogsConfig setInterconnectAttachment(java.lang.String interconnectAttachment) {
    this.interconnectAttachment = interconnectAttachment;
    return this;
  }

  /**
   * Configures whether all, none or a subset of metadata fields should be added to the reported VPC
   * flow logs. Default value is INCLUDE_ALL_METADATA.
   * @return value or {@code null} for none
   */
  public java.lang.String getMetadata() {
    return metadata;
  }

  /**
   * Configures whether all, none or a subset of metadata fields should be added to the reported VPC
   * flow logs. Default value is INCLUDE_ALL_METADATA.
   * @param metadata metadata or {@code null} for none
   */
  public EffectiveVpcFlowLogsConfig setMetadata(java.lang.String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Custom metadata fields to include in the reported VPC flow logs. Can only be specified if
   * "metadata" was set to CUSTOM_METADATA.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMetadataFields() {
    return metadataFields;
  }

  /**
   * Custom metadata fields to include in the reported VPC flow logs. Can only be specified if
   * "metadata" was set to CUSTOM_METADATA.
   * @param metadataFields metadataFields or {@code null} for none
   */
  public EffectiveVpcFlowLogsConfig setMetadataFields(java.util.List<java.lang.String> metadataFields) {
    this.metadataFields = metadataFields;
    return this;
  }

  /**
   * Unique name of the configuration. The name can have one of the following forms: - For project-
   * level configurations:
   * `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}` - For
   * organization-level configurations:
   * `organizations/{organization_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}`
   * - For a Compute config, the name will be the path of the subnet:
   * `projects/{project_id}/regions/{region}/subnetworks/{subnet_id}`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Unique name of the configuration. The name can have one of the following forms: - For project-
   * level configurations:
   * `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}` - For
   * organization-level configurations:
   * `organizations/{organization_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}`
   * - For a Compute config, the name will be the path of the subnet:
   * `projects/{project_id}/regions/{region}/subnetworks/{subnet_id}`
   * @param name name or {@code null} for none
   */
  public EffectiveVpcFlowLogsConfig setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Traffic will be logged from VMs, VPN tunnels and Interconnect Attachments within the network.
   * Format: projects/{project_id}/global/networks/{name}
   * @return value or {@code null} for none
   */
  public java.lang.String getNetwork() {
    return network;
  }

  /**
   * Traffic will be logged from VMs, VPN tunnels and Interconnect Attachments within the network.
   * Format: projects/{project_id}/global/networks/{name}
   * @param network network or {@code null} for none
   */
  public EffectiveVpcFlowLogsConfig setNetwork(java.lang.String network) {
    this.network = network;
    return this;
  }

  /**
   * Specifies the scope of the config (e.g., SUBNET, NETWORK, ORGANIZATION..).
   * @return value or {@code null} for none
   */
  public java.lang.String getScope() {
    return scope;
  }

  /**
   * Specifies the scope of the config (e.g., SUBNET, NETWORK, ORGANIZATION..).
   * @param scope scope or {@code null} for none
   */
  public EffectiveVpcFlowLogsConfig setScope(java.lang.String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * The state of the VPC Flow Log configuration. Default value is ENABLED. When creating a new
   * configuration, it must be enabled. Setting state=DISABLED will pause the log generation for
   * this config.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * The state of the VPC Flow Log configuration. Default value is ENABLED. When creating a new
   * configuration, it must be enabled. Setting state=DISABLED will pause the log generation for
   * this config.
   * @param state state or {@code null} for none
   */
  public EffectiveVpcFlowLogsConfig setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Traffic will be logged from VMs within the subnetwork. Format:
   * projects/{project_id}/regions/{region}/subnetworks/{name}
   * @return value or {@code null} for none
   */
  public java.lang.String getSubnet() {
    return subnet;
  }

  /**
   * Traffic will be logged from VMs within the subnetwork. Format:
   * projects/{project_id}/regions/{region}/subnetworks/{name}
   * @param subnet subnet or {@code null} for none
   */
  public EffectiveVpcFlowLogsConfig setSubnet(java.lang.String subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * Traffic will be logged from the VPN Tunnel. Format:
   * projects/{project_id}/regions/{region}/vpnTunnels/{name}
   * @return value or {@code null} for none
   */
  public java.lang.String getVpnTunnel() {
    return vpnTunnel;
  }

  /**
   * Traffic will be logged from the VPN Tunnel. Format:
   * projects/{project_id}/regions/{region}/vpnTunnels/{name}
   * @param vpnTunnel vpnTunnel or {@code null} for none
   */
  public EffectiveVpcFlowLogsConfig setVpnTunnel(java.lang.String vpnTunnel) {
    this.vpnTunnel = vpnTunnel;
    return this;
  }

  @Override
  public EffectiveVpcFlowLogsConfig set(String fieldName, Object value) {
    return (EffectiveVpcFlowLogsConfig) super.set(fieldName, value);
  }

  @Override
  public EffectiveVpcFlowLogsConfig clone() {
    return (EffectiveVpcFlowLogsConfig) super.clone();
  }

}
