/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.composer.v1beta1;

/**
 * Service definition for CloudComposer (v1beta1).
 *
 * <p>
 * Manages Apache Airflow environments on Google Cloud Platform.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/composer/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link CloudComposerRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class CloudComposer extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Cloud Composer API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://composer.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://composer.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public CloudComposer(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  CloudComposer(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code CloudComposer composer = new CloudComposer(...);}
   *   {@code CloudComposer.Projects.List request = composer.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code CloudComposer composer = new CloudComposer(...);}
     *   {@code CloudComposer.Locations.List request = composer.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * An accessor for creating requests from the Environments collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code CloudComposer composer = new CloudComposer(...);}
       *   {@code CloudComposer.Environments.List request = composer.environments().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Environments environments() {
        return new Environments();
      }

      /**
       * The "environments" collection of methods.
       */
      public class Environments {

        /**
         * Check if an upgrade operation on the environment will succeed. In case of problems detailed info
         * can be found in the returned Operation.
         *
         * Create a request for the method "environments.checkUpgrade".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link CheckUpgrade#execute()} method to invoke the remote operation.
         *
         * @param environment The resource name of the environment to check upgrade for, in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
         * @param content the {@link com.google.api.services.composer.v1beta1.model.CheckUpgradeRequest}
         * @return the request
         */
        public CheckUpgrade checkUpgrade(java.lang.String environment, com.google.api.services.composer.v1beta1.model.CheckUpgradeRequest content) throws java.io.IOException {
          CheckUpgrade result = new CheckUpgrade(environment, content);
          initialize(result);
          return result;
        }

        public class CheckUpgrade extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.Operation> {

          private static final String REST_PATH = "v1beta1/{+environment}:checkUpgrade";

          private final java.util.regex.Pattern ENVIRONMENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

          /**
           * Check if an upgrade operation on the environment will succeed. In case of problems detailed
           * info can be found in the returned Operation.
           *
           * Create a request for the method "environments.checkUpgrade".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link CheckUpgrade#execute()} method to invoke the remote
           * operation. <p> {@link
           * CheckUpgrade#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param environment The resource name of the environment to check upgrade for, in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @param content the {@link com.google.api.services.composer.v1beta1.model.CheckUpgradeRequest}
           * @since 1.13
           */
          protected CheckUpgrade(java.lang.String environment, com.google.api.services.composer.v1beta1.model.CheckUpgradeRequest content) {
            super(CloudComposer.this, "POST", REST_PATH, content, com.google.api.services.composer.v1beta1.model.Operation.class);
            this.environment = com.google.api.client.util.Preconditions.checkNotNull(environment, "Required parameter environment must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
          }

          @Override
          public CheckUpgrade set$Xgafv(java.lang.String $Xgafv) {
            return (CheckUpgrade) super.set$Xgafv($Xgafv);
          }

          @Override
          public CheckUpgrade setAccessToken(java.lang.String accessToken) {
            return (CheckUpgrade) super.setAccessToken(accessToken);
          }

          @Override
          public CheckUpgrade setAlt(java.lang.String alt) {
            return (CheckUpgrade) super.setAlt(alt);
          }

          @Override
          public CheckUpgrade setCallback(java.lang.String callback) {
            return (CheckUpgrade) super.setCallback(callback);
          }

          @Override
          public CheckUpgrade setFields(java.lang.String fields) {
            return (CheckUpgrade) super.setFields(fields);
          }

          @Override
          public CheckUpgrade setKey(java.lang.String key) {
            return (CheckUpgrade) super.setKey(key);
          }

          @Override
          public CheckUpgrade setOauthToken(java.lang.String oauthToken) {
            return (CheckUpgrade) super.setOauthToken(oauthToken);
          }

          @Override
          public CheckUpgrade setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (CheckUpgrade) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public CheckUpgrade setQuotaUser(java.lang.String quotaUser) {
            return (CheckUpgrade) super.setQuotaUser(quotaUser);
          }

          @Override
          public CheckUpgrade setUploadType(java.lang.String uploadType) {
            return (CheckUpgrade) super.setUploadType(uploadType);
          }

          @Override
          public CheckUpgrade setUploadProtocol(java.lang.String uploadProtocol) {
            return (CheckUpgrade) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the environment to check upgrade for, in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          @com.google.api.client.util.Key
          private java.lang.String environment;

          /** The resource name of the environment to check upgrade for, in the form:
         "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public java.lang.String getEnvironment() {
            return environment;
          }

          /**
           * The resource name of the environment to check upgrade for, in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public CheckUpgrade setEnvironment(java.lang.String environment) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
            this.environment = environment;
            return this;
          }

          @Override
          public CheckUpgrade set(String parameterName, Object value) {
            return (CheckUpgrade) super.set(parameterName, value);
          }
        }
        /**
         * Create a new environment.
         *
         * Create a request for the method "environments.create".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent The parent must be of the form "projects/{projectId}/locations/{locationId}".
         * @param content the {@link com.google.api.services.composer.v1beta1.model.Environment}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.composer.v1beta1.model.Environment content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.Operation> {

          private static final String REST_PATH = "v1beta1/{+parent}/environments";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Create a new environment.
           *
           * Create a request for the method "environments.create".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent The parent must be of the form "projects/{projectId}/locations/{locationId}".
           * @param content the {@link com.google.api.services.composer.v1beta1.model.Environment}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.composer.v1beta1.model.Environment content) {
            super(CloudComposer.this, "POST", REST_PATH, content, com.google.api.services.composer.v1beta1.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** The parent must be of the form "projects/{projectId}/locations/{locationId}". */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** The parent must be of the form "projects/{projectId}/locations/{locationId}".
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** The parent must be of the form "projects/{projectId}/locations/{locationId}". */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Triggers database failover (only for highly resilient environments).
         *
         * Create a request for the method "environments.databaseFailover".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link DatabaseFailover#execute()} method to invoke the remote operation.
         *
         * @param environment Target environment: "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
         * @param content the {@link com.google.api.services.composer.v1beta1.model.DatabaseFailoverRequest}
         * @return the request
         */
        public DatabaseFailover databaseFailover(java.lang.String environment, com.google.api.services.composer.v1beta1.model.DatabaseFailoverRequest content) throws java.io.IOException {
          DatabaseFailover result = new DatabaseFailover(environment, content);
          initialize(result);
          return result;
        }

        public class DatabaseFailover extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.Operation> {

          private static final String REST_PATH = "v1beta1/{+environment}:databaseFailover";

          private final java.util.regex.Pattern ENVIRONMENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

          /**
           * Triggers database failover (only for highly resilient environments).
           *
           * Create a request for the method "environments.databaseFailover".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link DatabaseFailover#execute()} method to invoke the remote
           * operation. <p> {@link DatabaseFailover#initialize(com.google.api.client.googleapis.services.Abs
           * tractGoogleClientRequest)} must be called to initialize this instance immediately after
           * invoking the constructor. </p>
           *
           * @param environment Target environment: "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @param content the {@link com.google.api.services.composer.v1beta1.model.DatabaseFailoverRequest}
           * @since 1.13
           */
          protected DatabaseFailover(java.lang.String environment, com.google.api.services.composer.v1beta1.model.DatabaseFailoverRequest content) {
            super(CloudComposer.this, "POST", REST_PATH, content, com.google.api.services.composer.v1beta1.model.Operation.class);
            this.environment = com.google.api.client.util.Preconditions.checkNotNull(environment, "Required parameter environment must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
          }

          @Override
          public DatabaseFailover set$Xgafv(java.lang.String $Xgafv) {
            return (DatabaseFailover) super.set$Xgafv($Xgafv);
          }

          @Override
          public DatabaseFailover setAccessToken(java.lang.String accessToken) {
            return (DatabaseFailover) super.setAccessToken(accessToken);
          }

          @Override
          public DatabaseFailover setAlt(java.lang.String alt) {
            return (DatabaseFailover) super.setAlt(alt);
          }

          @Override
          public DatabaseFailover setCallback(java.lang.String callback) {
            return (DatabaseFailover) super.setCallback(callback);
          }

          @Override
          public DatabaseFailover setFields(java.lang.String fields) {
            return (DatabaseFailover) super.setFields(fields);
          }

          @Override
          public DatabaseFailover setKey(java.lang.String key) {
            return (DatabaseFailover) super.setKey(key);
          }

          @Override
          public DatabaseFailover setOauthToken(java.lang.String oauthToken) {
            return (DatabaseFailover) super.setOauthToken(oauthToken);
          }

          @Override
          public DatabaseFailover setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (DatabaseFailover) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public DatabaseFailover setQuotaUser(java.lang.String quotaUser) {
            return (DatabaseFailover) super.setQuotaUser(quotaUser);
          }

          @Override
          public DatabaseFailover setUploadType(java.lang.String uploadType) {
            return (DatabaseFailover) super.setUploadType(uploadType);
          }

          @Override
          public DatabaseFailover setUploadProtocol(java.lang.String uploadProtocol) {
            return (DatabaseFailover) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Target environment:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          @com.google.api.client.util.Key
          private java.lang.String environment;

          /** Target environment: "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public java.lang.String getEnvironment() {
            return environment;
          }

          /**
           * Target environment:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public DatabaseFailover setEnvironment(java.lang.String environment) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
            this.environment = environment;
            return this;
          }

          @Override
          public DatabaseFailover set(String parameterName, Object value) {
            return (DatabaseFailover) super.set(parameterName, value);
          }
        }
        /**
         * Delete an environment.
         *
         * Create a request for the method "environments.delete".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name The environment to delete, in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.Operation> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

          /**
           * Delete an environment.
           *
           * Create a request for the method "environments.delete".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The environment to delete, in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(CloudComposer.this, "DELETE", REST_PATH, null, com.google.api.services.composer.v1beta1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The environment to delete, in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The environment to delete, in the form:
         "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The environment to delete, in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Executes Airflow CLI command.
         *
         * Create a request for the method "environments.executeAirflowCommand".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link ExecuteAirflowCommand#execute()} method to invoke the remote
         * operation.
         *
         * @param environment The resource name of the environment in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}".
         * @param content the {@link com.google.api.services.composer.v1beta1.model.ExecuteAirflowCommandRequest}
         * @return the request
         */
        public ExecuteAirflowCommand executeAirflowCommand(java.lang.String environment, com.google.api.services.composer.v1beta1.model.ExecuteAirflowCommandRequest content) throws java.io.IOException {
          ExecuteAirflowCommand result = new ExecuteAirflowCommand(environment, content);
          initialize(result);
          return result;
        }

        public class ExecuteAirflowCommand extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.ExecuteAirflowCommandResponse> {

          private static final String REST_PATH = "v1beta1/{+environment}:executeAirflowCommand";

          private final java.util.regex.Pattern ENVIRONMENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

          /**
           * Executes Airflow CLI command.
           *
           * Create a request for the method "environments.executeAirflowCommand".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link ExecuteAirflowCommand#execute()} method to invoke the
           * remote operation. <p> {@link ExecuteAirflowCommand#initialize(com.google.api.client.googleapis.
           * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
           * after invoking the constructor. </p>
           *
           * @param environment The resource name of the environment in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}".
           * @param content the {@link com.google.api.services.composer.v1beta1.model.ExecuteAirflowCommandRequest}
           * @since 1.13
           */
          protected ExecuteAirflowCommand(java.lang.String environment, com.google.api.services.composer.v1beta1.model.ExecuteAirflowCommandRequest content) {
            super(CloudComposer.this, "POST", REST_PATH, content, com.google.api.services.composer.v1beta1.model.ExecuteAirflowCommandResponse.class);
            this.environment = com.google.api.client.util.Preconditions.checkNotNull(environment, "Required parameter environment must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
          }

          @Override
          public ExecuteAirflowCommand set$Xgafv(java.lang.String $Xgafv) {
            return (ExecuteAirflowCommand) super.set$Xgafv($Xgafv);
          }

          @Override
          public ExecuteAirflowCommand setAccessToken(java.lang.String accessToken) {
            return (ExecuteAirflowCommand) super.setAccessToken(accessToken);
          }

          @Override
          public ExecuteAirflowCommand setAlt(java.lang.String alt) {
            return (ExecuteAirflowCommand) super.setAlt(alt);
          }

          @Override
          public ExecuteAirflowCommand setCallback(java.lang.String callback) {
            return (ExecuteAirflowCommand) super.setCallback(callback);
          }

          @Override
          public ExecuteAirflowCommand setFields(java.lang.String fields) {
            return (ExecuteAirflowCommand) super.setFields(fields);
          }

          @Override
          public ExecuteAirflowCommand setKey(java.lang.String key) {
            return (ExecuteAirflowCommand) super.setKey(key);
          }

          @Override
          public ExecuteAirflowCommand setOauthToken(java.lang.String oauthToken) {
            return (ExecuteAirflowCommand) super.setOauthToken(oauthToken);
          }

          @Override
          public ExecuteAirflowCommand setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (ExecuteAirflowCommand) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public ExecuteAirflowCommand setQuotaUser(java.lang.String quotaUser) {
            return (ExecuteAirflowCommand) super.setQuotaUser(quotaUser);
          }

          @Override
          public ExecuteAirflowCommand setUploadType(java.lang.String uploadType) {
            return (ExecuteAirflowCommand) super.setUploadType(uploadType);
          }

          @Override
          public ExecuteAirflowCommand setUploadProtocol(java.lang.String uploadProtocol) {
            return (ExecuteAirflowCommand) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the environment in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}".
           */
          @com.google.api.client.util.Key
          private java.lang.String environment;

          /** The resource name of the environment in the form:
         "projects/{projectId}/locations/{locationId}/environments/{environmentId}".
           */
          public java.lang.String getEnvironment() {
            return environment;
          }

          /**
           * The resource name of the environment in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}".
           */
          public ExecuteAirflowCommand setEnvironment(java.lang.String environment) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
            this.environment = environment;
            return this;
          }

          @Override
          public ExecuteAirflowCommand set(String parameterName, Object value) {
            return (ExecuteAirflowCommand) super.set(parameterName, value);
          }
        }
        /**
         * Fetches database properties.
         *
         * Create a request for the method "environments.fetchDatabaseProperties".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link FetchDatabaseProperties#execute()} method to invoke the remote
         * operation.
         *
         * @param environment Required. The resource name of the environment, in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
         * @return the request
         */
        public FetchDatabaseProperties fetchDatabaseProperties(java.lang.String environment) throws java.io.IOException {
          FetchDatabaseProperties result = new FetchDatabaseProperties(environment);
          initialize(result);
          return result;
        }

        public class FetchDatabaseProperties extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.FetchDatabasePropertiesResponse> {

          private static final String REST_PATH = "v1beta1/{+environment}:fetchDatabaseProperties";

          private final java.util.regex.Pattern ENVIRONMENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

          /**
           * Fetches database properties.
           *
           * Create a request for the method "environments.fetchDatabaseProperties".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link FetchDatabaseProperties#execute()} method to invoke the
           * remote operation. <p> {@link FetchDatabaseProperties#initialize(com.google.api.client.googleapi
           * s.services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
           * after invoking the constructor. </p>
           *
           * @param environment Required. The resource name of the environment, in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @since 1.13
           */
          protected FetchDatabaseProperties(java.lang.String environment) {
            super(CloudComposer.this, "GET", REST_PATH, null, com.google.api.services.composer.v1beta1.model.FetchDatabasePropertiesResponse.class);
            this.environment = com.google.api.client.util.Preconditions.checkNotNull(environment, "Required parameter environment must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public FetchDatabaseProperties set$Xgafv(java.lang.String $Xgafv) {
            return (FetchDatabaseProperties) super.set$Xgafv($Xgafv);
          }

          @Override
          public FetchDatabaseProperties setAccessToken(java.lang.String accessToken) {
            return (FetchDatabaseProperties) super.setAccessToken(accessToken);
          }

          @Override
          public FetchDatabaseProperties setAlt(java.lang.String alt) {
            return (FetchDatabaseProperties) super.setAlt(alt);
          }

          @Override
          public FetchDatabaseProperties setCallback(java.lang.String callback) {
            return (FetchDatabaseProperties) super.setCallback(callback);
          }

          @Override
          public FetchDatabaseProperties setFields(java.lang.String fields) {
            return (FetchDatabaseProperties) super.setFields(fields);
          }

          @Override
          public FetchDatabaseProperties setKey(java.lang.String key) {
            return (FetchDatabaseProperties) super.setKey(key);
          }

          @Override
          public FetchDatabaseProperties setOauthToken(java.lang.String oauthToken) {
            return (FetchDatabaseProperties) super.setOauthToken(oauthToken);
          }

          @Override
          public FetchDatabaseProperties setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (FetchDatabaseProperties) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public FetchDatabaseProperties setQuotaUser(java.lang.String quotaUser) {
            return (FetchDatabaseProperties) super.setQuotaUser(quotaUser);
          }

          @Override
          public FetchDatabaseProperties setUploadType(java.lang.String uploadType) {
            return (FetchDatabaseProperties) super.setUploadType(uploadType);
          }

          @Override
          public FetchDatabaseProperties setUploadProtocol(java.lang.String uploadProtocol) {
            return (FetchDatabaseProperties) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The resource name of the environment, in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          @com.google.api.client.util.Key
          private java.lang.String environment;

          /** Required. The resource name of the environment, in the form:
         "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public java.lang.String getEnvironment() {
            return environment;
          }

          /**
           * Required. The resource name of the environment, in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public FetchDatabaseProperties setEnvironment(java.lang.String environment) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
            this.environment = environment;
            return this;
          }

          @Override
          public FetchDatabaseProperties set(String parameterName, Object value) {
            return (FetchDatabaseProperties) super.set(parameterName, value);
          }
        }
        /**
         * Get an existing environment.
         *
         * Create a request for the method "environments.get".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The resource name of the environment to get, in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.Environment> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

          /**
           * Get an existing environment.
           *
           * Create a request for the method "environments.get".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The resource name of the environment to get, in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(CloudComposer.this, "GET", REST_PATH, null, com.google.api.services.composer.v1beta1.model.Environment.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the environment to get, in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The resource name of the environment to get, in the form:
         "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The resource name of the environment to get, in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * List environments.
         *
         * Create a request for the method "environments.list".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent List environments in the given project and location, in the form:
         *        "projects/{projectId}/locations/{locationId}"
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.ListEnvironmentsResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}/environments";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * List environments.
           *
           * Create a request for the method "environments.list".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent List environments in the given project and location, in the form:
         *        "projects/{projectId}/locations/{locationId}"
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(CloudComposer.this, "GET", REST_PATH, null, com.google.api.services.composer.v1beta1.model.ListEnvironmentsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * List environments in the given project and location, in the form:
           * "projects/{projectId}/locations/{locationId}"
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** List environments in the given project and location, in the form:
         "projects/{projectId}/locations/{locationId}"
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * List environments in the given project and location, in the form:
           * "projects/{projectId}/locations/{locationId}"
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** The maximum number of environments to return. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of environments to return.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The maximum number of environments to return. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The next_page_token value returned from a previous List request, if any. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The next_page_token value returned from a previous List request, if any.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The next_page_token value returned from a previous List request, if any. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Loads a snapshot of a Cloud Composer environment. As a result of this operation, a snapshot of
         * environment's specified in LoadSnapshotRequest is loaded into the environment.
         *
         * Create a request for the method "environments.loadSnapshot".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link LoadSnapshot#execute()} method to invoke the remote operation.
         *
         * @param environment The resource name of the target environment in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
         * @param content the {@link com.google.api.services.composer.v1beta1.model.LoadSnapshotRequest}
         * @return the request
         */
        public LoadSnapshot loadSnapshot(java.lang.String environment, com.google.api.services.composer.v1beta1.model.LoadSnapshotRequest content) throws java.io.IOException {
          LoadSnapshot result = new LoadSnapshot(environment, content);
          initialize(result);
          return result;
        }

        public class LoadSnapshot extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.Operation> {

          private static final String REST_PATH = "v1beta1/{+environment}:loadSnapshot";

          private final java.util.regex.Pattern ENVIRONMENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

          /**
           * Loads a snapshot of a Cloud Composer environment. As a result of this operation, a snapshot of
           * environment's specified in LoadSnapshotRequest is loaded into the environment.
           *
           * Create a request for the method "environments.loadSnapshot".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link LoadSnapshot#execute()} method to invoke the remote
           * operation. <p> {@link
           * LoadSnapshot#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param environment The resource name of the target environment in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @param content the {@link com.google.api.services.composer.v1beta1.model.LoadSnapshotRequest}
           * @since 1.13
           */
          protected LoadSnapshot(java.lang.String environment, com.google.api.services.composer.v1beta1.model.LoadSnapshotRequest content) {
            super(CloudComposer.this, "POST", REST_PATH, content, com.google.api.services.composer.v1beta1.model.Operation.class);
            this.environment = com.google.api.client.util.Preconditions.checkNotNull(environment, "Required parameter environment must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
          }

          @Override
          public LoadSnapshot set$Xgafv(java.lang.String $Xgafv) {
            return (LoadSnapshot) super.set$Xgafv($Xgafv);
          }

          @Override
          public LoadSnapshot setAccessToken(java.lang.String accessToken) {
            return (LoadSnapshot) super.setAccessToken(accessToken);
          }

          @Override
          public LoadSnapshot setAlt(java.lang.String alt) {
            return (LoadSnapshot) super.setAlt(alt);
          }

          @Override
          public LoadSnapshot setCallback(java.lang.String callback) {
            return (LoadSnapshot) super.setCallback(callback);
          }

          @Override
          public LoadSnapshot setFields(java.lang.String fields) {
            return (LoadSnapshot) super.setFields(fields);
          }

          @Override
          public LoadSnapshot setKey(java.lang.String key) {
            return (LoadSnapshot) super.setKey(key);
          }

          @Override
          public LoadSnapshot setOauthToken(java.lang.String oauthToken) {
            return (LoadSnapshot) super.setOauthToken(oauthToken);
          }

          @Override
          public LoadSnapshot setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (LoadSnapshot) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public LoadSnapshot setQuotaUser(java.lang.String quotaUser) {
            return (LoadSnapshot) super.setQuotaUser(quotaUser);
          }

          @Override
          public LoadSnapshot setUploadType(java.lang.String uploadType) {
            return (LoadSnapshot) super.setUploadType(uploadType);
          }

          @Override
          public LoadSnapshot setUploadProtocol(java.lang.String uploadProtocol) {
            return (LoadSnapshot) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the target environment in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          @com.google.api.client.util.Key
          private java.lang.String environment;

          /** The resource name of the target environment in the form:
         "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public java.lang.String getEnvironment() {
            return environment;
          }

          /**
           * The resource name of the target environment in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public LoadSnapshot setEnvironment(java.lang.String environment) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
            this.environment = environment;
            return this;
          }

          @Override
          public LoadSnapshot set(String parameterName, Object value) {
            return (LoadSnapshot) super.set(parameterName, value);
          }
        }
        /**
         * Update an environment.
         *
         * Create a request for the method "environments.patch".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name The relative resource name of the environment to update, in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
         * @param content the {@link com.google.api.services.composer.v1beta1.model.Environment}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.composer.v1beta1.model.Environment content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.Operation> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

          /**
           * Update an environment.
           *
           * Create a request for the method "environments.patch".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The relative resource name of the environment to update, in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @param content the {@link com.google.api.services.composer.v1beta1.model.Environment}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.composer.v1beta1.model.Environment content) {
            super(CloudComposer.this, "PATCH", REST_PATH, content, com.google.api.services.composer.v1beta1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The relative resource name of the environment to update, in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The relative resource name of the environment to update, in the form:
         "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The relative resource name of the environment to update, in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Required. A comma-separated list of paths, relative to `Environment`, of fields to
           * update. For example, to set the version of scikit-learn to install in the environment
           * to 0.19.0 and to remove an existing installation of argparse, the `updateMask`
           * parameter would include the following two `paths` values:
           * "config.softwareConfig.pypiPackages.scikit-learn" and
           * "config.softwareConfig.pypiPackages.argparse". The included patch environment would
           * specify the scikit-learn version as follows: { "config":{ "softwareConfig":{
           * "pypiPackages":{ "scikit-learn":"==0.19.0" } } } } Note that in the above example, any
           * existing PyPI packages other than scikit-learn and argparse will be unaffected. Only
           * one update type may be included in a single request's `updateMask`. For example, one
           * cannot update both the PyPI packages and labels in the same request. However, it is
           * possible to update multiple members of a map field simultaneously in the same request.
           * For example, to set the labels "label1" and "label2" while clearing "label3" (assuming
           * it already exists), one can provide the paths "labels.label1", "labels.label2", and
           * "labels.label3" and populate the patch environment as follows: { "labels":{
           * "label1":"new-label1-value" "label2":"new-label2-value" } } Note that in the above
           * example, any existing labels that are not included in the `updateMask` will be
           * unaffected. It is also possible to replace an entire map field by providing the map
           * field's path in the `updateMask`. The new value of the field will be that which is
           * provided in the patch environment. For example, to delete all pre-existing user-
           * specified PyPI packages and install botocore at version 1.7.14, the `updateMask` would
           * contain the path "config.softwareConfig.pypiPackages", and the patch environment would
           * be the following: { "config":{ "softwareConfig":{ "pypiPackages":{
           * "botocore":"==1.7.14" } } } } **Note:** Only the following fields can be updated: *
           * `config.softwareConfig.pypiPackages` * Replace all custom custom PyPI packages. If a
           * replacement package map is not included in `environment`, all custom PyPI packages are
           * cleared. It is an error to provide both this mask and a mask specifying an individual
           * package. * `config.softwareConfig.pypiPackages.`packagename * Update the custom PyPI
           * package *packagename*, preserving other packages. To delete the package, include it in
           * `updateMask`, and omit the mapping for it in
           * `environment.config.softwareConfig.pypiPackages`. It is an error to provide both a mask
           * of this form and the `config.softwareConfig.pypiPackages` mask. * `labels` * Replace
           * all environment labels. If a replacement labels map is not included in `environment`,
           * all labels are cleared. It is an error to provide both this mask and a mask specifying
           * one or more individual labels. * `labels.`labelName * Set the label named *labelName*,
           * while preserving other labels. To delete the label, include it in `updateMask` and omit
           * its mapping in `environment.labels`. It is an error to provide both a mask of this form
           * and the `labels` mask. * `config.nodeCount` * Horizontally scale the number of nodes in
           * the environment. An integer greater than or equal to 3 must be provided in the
           * `config.nodeCount` field. Supported for Cloud Composer environments in versions
           * composer-1.*.*-airflow-*.*.*. * `config.webServerNetworkAccessControl` * Replace the
           * environment's current WebServerNetworkAccessControl. *
           * `config.softwareConfig.airflowConfigOverrides` * Replace all Apache Airflow config
           * overrides. If a replacement config overrides map is not included in `environment`, all
           * config overrides are cleared. It is an error to provide both this mask and a mask
           * specifying one or more individual config overrides. *
           * `config.softwareConfig.airflowConfigOverrides.`section-name * Override the Apache
           * Airflow config property *name* in the section named *section*, preserving other
           * properties. To delete the property override, include it in `updateMask` and omit its
           * mapping in `environment.config.softwareConfig.airflowConfigOverrides`. It is an error
           * to provide both a mask of this form and the
           * `config.softwareConfig.airflowConfigOverrides` mask. *
           * `config.softwareConfig.envVariables` * Replace all environment variables. If a
           * replacement environment variable map is not included in `environment`, all custom
           * environment variables are cleared. * `config.softwareConfig.imageVersion` * Upgrade the
           * version of the environment in-place. Refer to `SoftwareConfig.image_version` for
           * information on how to format the new image version. Additionally, the new image version
           * cannot effect a version downgrade, and must match the current image version's Composer
           * and Airflow major versions. Consult the [Cloud Composer version
           * list](/composer/docs/concepts/versioning/composer-versions) for valid values. *
           * `config.softwareConfig.schedulerCount` * Horizontally scale the number of schedulers in
           * Airflow. A positive integer not greater than the number of nodes must be provided in
           * the `config.softwareConfig.schedulerCount` field. Supported for Cloud Composer
           * environments in versions composer-1.*.*-airflow-2.*.*. *
           * `config.softwareConfig.cloudDataLineageIntegration` * Configuration for Cloud Data
           * Lineage integration. * `config.databaseConfig.machineType` * Cloud SQL machine type
           * used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4,
           * db-n1-standard-8 or db-n1-standard-16. Supported for Cloud Composer environments in
           * versions composer-1.*.*-airflow-*.*.*. * `config.webServerConfig.machineType` * Machine
           * type on which Airflow web server is running. It has to be one of:
           * composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. Supported
           * for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. *
           * `config.maintenanceWindow` * Maintenance window during which Cloud Composer components
           * may be under maintenance. * `config.workloadsConfig` * The workloads configuration
           * settings for the GKE cluster associated with the Cloud Composer environment. Supported
           * for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer. *
           * `config.environmentSize` * The size of the Cloud Composer environment. Supported for
           * Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. A comma-separated list of paths, relative to `Environment`, of fields to update. For
         example, to set the version of scikit-learn to install in the environment to 0.19.0 and to remove
         an existing installation of argparse, the `updateMask` parameter would include the following two
         `paths` values: "config.softwareConfig.pypiPackages.scikit-learn" and
         "config.softwareConfig.pypiPackages.argparse". The included patch environment would specify the
         scikit-learn version as follows: { "config":{ "softwareConfig":{ "pypiPackages":{ "scikit-
         learn":"==0.19.0" } } } } Note that in the above example, any existing PyPI packages other than
         scikit-learn and argparse will be unaffected. Only one update type may be included in a single
         request's `updateMask`. For example, one cannot update both the PyPI packages and labels in the
         same request. However, it is possible to update multiple members of a map field simultaneously in
         the same request. For example, to set the labels "label1" and "label2" while clearing "label3"
         (assuming it already exists), one can provide the paths "labels.label1", "labels.label2", and
         "labels.label3" and populate the patch environment as follows: { "labels":{ "label1":"new-
         label1-value" "label2":"new-label2-value" } } Note that in the above example, any existing labels
         that are not included in the `updateMask` will be unaffected. It is also possible to replace an
         entire map field by providing the map field's path in the `updateMask`. The new value of the field
         will be that which is provided in the patch environment. For example, to delete all pre-existing
         user-specified PyPI packages and install botocore at version 1.7.14, the `updateMask` would contain
         the path "config.softwareConfig.pypiPackages", and the patch environment would be the following: {
         "config":{ "softwareConfig":{ "pypiPackages":{ "botocore":"==1.7.14" } } } } **Note:** Only the
         following fields can be updated: * `config.softwareConfig.pypiPackages` * Replace all custom custom
         PyPI packages. If a replacement package map is not included in `environment`, all custom PyPI
         packages are cleared. It is an error to provide both this mask and a mask specifying an individual
         package. * `config.softwareConfig.pypiPackages.`packagename * Update the custom PyPI package
         *packagename*, preserving other packages. To delete the package, include it in `updateMask`, and
         omit the mapping for it in `environment.config.softwareConfig.pypiPackages`. It is an error to
         provide both a mask of this form and the `config.softwareConfig.pypiPackages` mask. * `labels` *
         Replace all environment labels. If a replacement labels map is not included in `environment`, all
         labels are cleared. It is an error to provide both this mask and a mask specifying one or more
         individual labels. * `labels.`labelName * Set the label named *labelName*, while preserving other
         labels. To delete the label, include it in `updateMask` and omit its mapping in
         `environment.labels`. It is an error to provide both a mask of this form and the `labels` mask. *
         `config.nodeCount` * Horizontally scale the number of nodes in the environment. An integer greater
         than or equal to 3 must be provided in the `config.nodeCount` field. Supported for Cloud Composer
         environments in versions composer-1.*.*-airflow-*.*.*. * `config.webServerNetworkAccessControl` *
         Replace the environment's current WebServerNetworkAccessControl. *
         `config.softwareConfig.airflowConfigOverrides` * Replace all Apache Airflow config overrides. If a
         replacement config overrides map is not included in `environment`, all config overrides are
         cleared. It is an error to provide both this mask and a mask specifying one or more individual
         config overrides. * `config.softwareConfig.airflowConfigOverrides.`section-name * Override the
         Apache Airflow config property *name* in the section named *section*, preserving other properties.
         To delete the property override, include it in `updateMask` and omit its mapping in
         `environment.config.softwareConfig.airflowConfigOverrides`. It is an error to provide both a mask
         of this form and the `config.softwareConfig.airflowConfigOverrides` mask. *
         `config.softwareConfig.envVariables` * Replace all environment variables. If a replacement
         environment variable map is not included in `environment`, all custom environment variables are
         cleared. * `config.softwareConfig.imageVersion` * Upgrade the version of the environment in-place.
         Refer to `SoftwareConfig.image_version` for information on how to format the new image version.
         Additionally, the new image version cannot effect a version downgrade, and must match the current
         image version's Composer and Airflow major versions. Consult the [Cloud Composer version
         list](/composer/docs/concepts/versioning/composer-versions) for valid values. *
         `config.softwareConfig.schedulerCount` * Horizontally scale the number of schedulers in Airflow. A
         positive integer not greater than the number of nodes must be provided in the
         `config.softwareConfig.schedulerCount` field. Supported for Cloud Composer environments in versions
         composer-1.*.*-airflow-2.*.*. * `config.softwareConfig.cloudDataLineageIntegration` * Configuration
         for Cloud Data Lineage integration. * `config.databaseConfig.machineType` * Cloud SQL machine type
         used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8
         or db-n1-standard-16. Supported for Cloud Composer environments in versions
         composer-1.*.*-airflow-*.*.*. * `config.webServerConfig.machineType` * Machine type on which
         Airflow web server is running. It has to be one of: composer-n1-webserver-2,
         composer-n1-webserver-4 or composer-n1-webserver-8. Supported for Cloud Composer environments in
         versions composer-1.*.*-airflow-*.*.*. * `config.maintenanceWindow` * Maintenance window during
         which Cloud Composer components may be under maintenance. * `config.workloadsConfig` * The
         workloads configuration settings for the GKE cluster associated with the Cloud Composer
         environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and
         newer. * `config.environmentSize` * The size of the Cloud Composer environment. Supported for Cloud
         Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. A comma-separated list of paths, relative to `Environment`, of fields to
           * update. For example, to set the version of scikit-learn to install in the environment
           * to 0.19.0 and to remove an existing installation of argparse, the `updateMask`
           * parameter would include the following two `paths` values:
           * "config.softwareConfig.pypiPackages.scikit-learn" and
           * "config.softwareConfig.pypiPackages.argparse". The included patch environment would
           * specify the scikit-learn version as follows: { "config":{ "softwareConfig":{
           * "pypiPackages":{ "scikit-learn":"==0.19.0" } } } } Note that in the above example, any
           * existing PyPI packages other than scikit-learn and argparse will be unaffected. Only
           * one update type may be included in a single request's `updateMask`. For example, one
           * cannot update both the PyPI packages and labels in the same request. However, it is
           * possible to update multiple members of a map field simultaneously in the same request.
           * For example, to set the labels "label1" and "label2" while clearing "label3" (assuming
           * it already exists), one can provide the paths "labels.label1", "labels.label2", and
           * "labels.label3" and populate the patch environment as follows: { "labels":{
           * "label1":"new-label1-value" "label2":"new-label2-value" } } Note that in the above
           * example, any existing labels that are not included in the `updateMask` will be
           * unaffected. It is also possible to replace an entire map field by providing the map
           * field's path in the `updateMask`. The new value of the field will be that which is
           * provided in the patch environment. For example, to delete all pre-existing user-
           * specified PyPI packages and install botocore at version 1.7.14, the `updateMask` would
           * contain the path "config.softwareConfig.pypiPackages", and the patch environment would
           * be the following: { "config":{ "softwareConfig":{ "pypiPackages":{
           * "botocore":"==1.7.14" } } } } **Note:** Only the following fields can be updated: *
           * `config.softwareConfig.pypiPackages` * Replace all custom custom PyPI packages. If a
           * replacement package map is not included in `environment`, all custom PyPI packages are
           * cleared. It is an error to provide both this mask and a mask specifying an individual
           * package. * `config.softwareConfig.pypiPackages.`packagename * Update the custom PyPI
           * package *packagename*, preserving other packages. To delete the package, include it in
           * `updateMask`, and omit the mapping for it in
           * `environment.config.softwareConfig.pypiPackages`. It is an error to provide both a mask
           * of this form and the `config.softwareConfig.pypiPackages` mask. * `labels` * Replace
           * all environment labels. If a replacement labels map is not included in `environment`,
           * all labels are cleared. It is an error to provide both this mask and a mask specifying
           * one or more individual labels. * `labels.`labelName * Set the label named *labelName*,
           * while preserving other labels. To delete the label, include it in `updateMask` and omit
           * its mapping in `environment.labels`. It is an error to provide both a mask of this form
           * and the `labels` mask. * `config.nodeCount` * Horizontally scale the number of nodes in
           * the environment. An integer greater than or equal to 3 must be provided in the
           * `config.nodeCount` field. Supported for Cloud Composer environments in versions
           * composer-1.*.*-airflow-*.*.*. * `config.webServerNetworkAccessControl` * Replace the
           * environment's current WebServerNetworkAccessControl. *
           * `config.softwareConfig.airflowConfigOverrides` * Replace all Apache Airflow config
           * overrides. If a replacement config overrides map is not included in `environment`, all
           * config overrides are cleared. It is an error to provide both this mask and a mask
           * specifying one or more individual config overrides. *
           * `config.softwareConfig.airflowConfigOverrides.`section-name * Override the Apache
           * Airflow config property *name* in the section named *section*, preserving other
           * properties. To delete the property override, include it in `updateMask` and omit its
           * mapping in `environment.config.softwareConfig.airflowConfigOverrides`. It is an error
           * to provide both a mask of this form and the
           * `config.softwareConfig.airflowConfigOverrides` mask. *
           * `config.softwareConfig.envVariables` * Replace all environment variables. If a
           * replacement environment variable map is not included in `environment`, all custom
           * environment variables are cleared. * `config.softwareConfig.imageVersion` * Upgrade the
           * version of the environment in-place. Refer to `SoftwareConfig.image_version` for
           * information on how to format the new image version. Additionally, the new image version
           * cannot effect a version downgrade, and must match the current image version's Composer
           * and Airflow major versions. Consult the [Cloud Composer version
           * list](/composer/docs/concepts/versioning/composer-versions) for valid values. *
           * `config.softwareConfig.schedulerCount` * Horizontally scale the number of schedulers in
           * Airflow. A positive integer not greater than the number of nodes must be provided in
           * the `config.softwareConfig.schedulerCount` field. Supported for Cloud Composer
           * environments in versions composer-1.*.*-airflow-2.*.*. *
           * `config.softwareConfig.cloudDataLineageIntegration` * Configuration for Cloud Data
           * Lineage integration. * `config.databaseConfig.machineType` * Cloud SQL machine type
           * used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4,
           * db-n1-standard-8 or db-n1-standard-16. Supported for Cloud Composer environments in
           * versions composer-1.*.*-airflow-*.*.*. * `config.webServerConfig.machineType` * Machine
           * type on which Airflow web server is running. It has to be one of:
           * composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. Supported
           * for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. *
           * `config.maintenanceWindow` * Maintenance window during which Cloud Composer components
           * may be under maintenance. * `config.workloadsConfig` * The workloads configuration
           * settings for the GKE cluster associated with the Cloud Composer environment. Supported
           * for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer. *
           * `config.environmentSize` * The size of the Cloud Composer environment. Supported for
           * Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }
        /**
         * Polls Airflow CLI command execution and fetches logs.
         *
         * Create a request for the method "environments.pollAirflowCommand".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link PollAirflowCommand#execute()} method to invoke the remote operation.
         *
         * @param environment The resource name of the environment in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
         * @param content the {@link com.google.api.services.composer.v1beta1.model.PollAirflowCommandRequest}
         * @return the request
         */
        public PollAirflowCommand pollAirflowCommand(java.lang.String environment, com.google.api.services.composer.v1beta1.model.PollAirflowCommandRequest content) throws java.io.IOException {
          PollAirflowCommand result = new PollAirflowCommand(environment, content);
          initialize(result);
          return result;
        }

        public class PollAirflowCommand extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.PollAirflowCommandResponse> {

          private static final String REST_PATH = "v1beta1/{+environment}:pollAirflowCommand";

          private final java.util.regex.Pattern ENVIRONMENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

          /**
           * Polls Airflow CLI command execution and fetches logs.
           *
           * Create a request for the method "environments.pollAirflowCommand".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link PollAirflowCommand#execute()} method to invoke the remote
           * operation. <p> {@link PollAirflowCommand#initialize(com.google.api.client.googleapis.services.A
           * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
           * invoking the constructor. </p>
           *
           * @param environment The resource name of the environment in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @param content the {@link com.google.api.services.composer.v1beta1.model.PollAirflowCommandRequest}
           * @since 1.13
           */
          protected PollAirflowCommand(java.lang.String environment, com.google.api.services.composer.v1beta1.model.PollAirflowCommandRequest content) {
            super(CloudComposer.this, "POST", REST_PATH, content, com.google.api.services.composer.v1beta1.model.PollAirflowCommandResponse.class);
            this.environment = com.google.api.client.util.Preconditions.checkNotNull(environment, "Required parameter environment must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
          }

          @Override
          public PollAirflowCommand set$Xgafv(java.lang.String $Xgafv) {
            return (PollAirflowCommand) super.set$Xgafv($Xgafv);
          }

          @Override
          public PollAirflowCommand setAccessToken(java.lang.String accessToken) {
            return (PollAirflowCommand) super.setAccessToken(accessToken);
          }

          @Override
          public PollAirflowCommand setAlt(java.lang.String alt) {
            return (PollAirflowCommand) super.setAlt(alt);
          }

          @Override
          public PollAirflowCommand setCallback(java.lang.String callback) {
            return (PollAirflowCommand) super.setCallback(callback);
          }

          @Override
          public PollAirflowCommand setFields(java.lang.String fields) {
            return (PollAirflowCommand) super.setFields(fields);
          }

          @Override
          public PollAirflowCommand setKey(java.lang.String key) {
            return (PollAirflowCommand) super.setKey(key);
          }

          @Override
          public PollAirflowCommand setOauthToken(java.lang.String oauthToken) {
            return (PollAirflowCommand) super.setOauthToken(oauthToken);
          }

          @Override
          public PollAirflowCommand setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (PollAirflowCommand) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public PollAirflowCommand setQuotaUser(java.lang.String quotaUser) {
            return (PollAirflowCommand) super.setQuotaUser(quotaUser);
          }

          @Override
          public PollAirflowCommand setUploadType(java.lang.String uploadType) {
            return (PollAirflowCommand) super.setUploadType(uploadType);
          }

          @Override
          public PollAirflowCommand setUploadProtocol(java.lang.String uploadProtocol) {
            return (PollAirflowCommand) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the environment in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          @com.google.api.client.util.Key
          private java.lang.String environment;

          /** The resource name of the environment in the form:
         "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public java.lang.String getEnvironment() {
            return environment;
          }

          /**
           * The resource name of the environment in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public PollAirflowCommand setEnvironment(java.lang.String environment) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
            this.environment = environment;
            return this;
          }

          @Override
          public PollAirflowCommand set(String parameterName, Object value) {
            return (PollAirflowCommand) super.set(parameterName, value);
          }
        }
        /**
         * Restart Airflow web server.
         *
         * Create a request for the method "environments.restartWebServer".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link RestartWebServer#execute()} method to invoke the remote operation.
         *
         * @param name The resource name of the environment to restart the web server for, in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
         * @param content the {@link com.google.api.services.composer.v1beta1.model.RestartWebServerRequest}
         * @return the request
         */
        public RestartWebServer restartWebServer(java.lang.String name, com.google.api.services.composer.v1beta1.model.RestartWebServerRequest content) throws java.io.IOException {
          RestartWebServer result = new RestartWebServer(name, content);
          initialize(result);
          return result;
        }

        public class RestartWebServer extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.Operation> {

          private static final String REST_PATH = "v1beta1/{+name}:restartWebServer";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

          /**
           * Restart Airflow web server.
           *
           * Create a request for the method "environments.restartWebServer".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link RestartWebServer#execute()} method to invoke the remote
           * operation. <p> {@link RestartWebServer#initialize(com.google.api.client.googleapis.services.Abs
           * tractGoogleClientRequest)} must be called to initialize this instance immediately after
           * invoking the constructor. </p>
           *
           * @param name The resource name of the environment to restart the web server for, in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @param content the {@link com.google.api.services.composer.v1beta1.model.RestartWebServerRequest}
           * @since 1.13
           */
          protected RestartWebServer(java.lang.String name, com.google.api.services.composer.v1beta1.model.RestartWebServerRequest content) {
            super(CloudComposer.this, "POST", REST_PATH, content, com.google.api.services.composer.v1beta1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
          }

          @Override
          public RestartWebServer set$Xgafv(java.lang.String $Xgafv) {
            return (RestartWebServer) super.set$Xgafv($Xgafv);
          }

          @Override
          public RestartWebServer setAccessToken(java.lang.String accessToken) {
            return (RestartWebServer) super.setAccessToken(accessToken);
          }

          @Override
          public RestartWebServer setAlt(java.lang.String alt) {
            return (RestartWebServer) super.setAlt(alt);
          }

          @Override
          public RestartWebServer setCallback(java.lang.String callback) {
            return (RestartWebServer) super.setCallback(callback);
          }

          @Override
          public RestartWebServer setFields(java.lang.String fields) {
            return (RestartWebServer) super.setFields(fields);
          }

          @Override
          public RestartWebServer setKey(java.lang.String key) {
            return (RestartWebServer) super.setKey(key);
          }

          @Override
          public RestartWebServer setOauthToken(java.lang.String oauthToken) {
            return (RestartWebServer) super.setOauthToken(oauthToken);
          }

          @Override
          public RestartWebServer setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (RestartWebServer) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public RestartWebServer setQuotaUser(java.lang.String quotaUser) {
            return (RestartWebServer) super.setQuotaUser(quotaUser);
          }

          @Override
          public RestartWebServer setUploadType(java.lang.String uploadType) {
            return (RestartWebServer) super.setUploadType(uploadType);
          }

          @Override
          public RestartWebServer setUploadProtocol(java.lang.String uploadProtocol) {
            return (RestartWebServer) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the environment to restart the web server for, in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The resource name of the environment to restart the web server for, in the form:
         "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The resource name of the environment to restart the web server for, in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public RestartWebServer setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public RestartWebServer set(String parameterName, Object value) {
            return (RestartWebServer) super.set(parameterName, value);
          }
        }
        /**
         * Creates a snapshots of a Cloud Composer environment. As a result of this operation, snapshot of
         * environment's state is stored in a location specified in the SaveSnapshotRequest.
         *
         * Create a request for the method "environments.saveSnapshot".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link SaveSnapshot#execute()} method to invoke the remote operation.
         *
         * @param environment The resource name of the source environment in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
         * @param content the {@link com.google.api.services.composer.v1beta1.model.SaveSnapshotRequest}
         * @return the request
         */
        public SaveSnapshot saveSnapshot(java.lang.String environment, com.google.api.services.composer.v1beta1.model.SaveSnapshotRequest content) throws java.io.IOException {
          SaveSnapshot result = new SaveSnapshot(environment, content);
          initialize(result);
          return result;
        }

        public class SaveSnapshot extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.Operation> {

          private static final String REST_PATH = "v1beta1/{+environment}:saveSnapshot";

          private final java.util.regex.Pattern ENVIRONMENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

          /**
           * Creates a snapshots of a Cloud Composer environment. As a result of this operation, snapshot of
           * environment's state is stored in a location specified in the SaveSnapshotRequest.
           *
           * Create a request for the method "environments.saveSnapshot".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link SaveSnapshot#execute()} method to invoke the remote
           * operation. <p> {@link
           * SaveSnapshot#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param environment The resource name of the source environment in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @param content the {@link com.google.api.services.composer.v1beta1.model.SaveSnapshotRequest}
           * @since 1.13
           */
          protected SaveSnapshot(java.lang.String environment, com.google.api.services.composer.v1beta1.model.SaveSnapshotRequest content) {
            super(CloudComposer.this, "POST", REST_PATH, content, com.google.api.services.composer.v1beta1.model.Operation.class);
            this.environment = com.google.api.client.util.Preconditions.checkNotNull(environment, "Required parameter environment must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
          }

          @Override
          public SaveSnapshot set$Xgafv(java.lang.String $Xgafv) {
            return (SaveSnapshot) super.set$Xgafv($Xgafv);
          }

          @Override
          public SaveSnapshot setAccessToken(java.lang.String accessToken) {
            return (SaveSnapshot) super.setAccessToken(accessToken);
          }

          @Override
          public SaveSnapshot setAlt(java.lang.String alt) {
            return (SaveSnapshot) super.setAlt(alt);
          }

          @Override
          public SaveSnapshot setCallback(java.lang.String callback) {
            return (SaveSnapshot) super.setCallback(callback);
          }

          @Override
          public SaveSnapshot setFields(java.lang.String fields) {
            return (SaveSnapshot) super.setFields(fields);
          }

          @Override
          public SaveSnapshot setKey(java.lang.String key) {
            return (SaveSnapshot) super.setKey(key);
          }

          @Override
          public SaveSnapshot setOauthToken(java.lang.String oauthToken) {
            return (SaveSnapshot) super.setOauthToken(oauthToken);
          }

          @Override
          public SaveSnapshot setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (SaveSnapshot) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public SaveSnapshot setQuotaUser(java.lang.String quotaUser) {
            return (SaveSnapshot) super.setQuotaUser(quotaUser);
          }

          @Override
          public SaveSnapshot setUploadType(java.lang.String uploadType) {
            return (SaveSnapshot) super.setUploadType(uploadType);
          }

          @Override
          public SaveSnapshot setUploadProtocol(java.lang.String uploadProtocol) {
            return (SaveSnapshot) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the source environment in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          @com.google.api.client.util.Key
          private java.lang.String environment;

          /** The resource name of the source environment in the form:
         "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public java.lang.String getEnvironment() {
            return environment;
          }

          /**
           * The resource name of the source environment in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           */
          public SaveSnapshot setEnvironment(java.lang.String environment) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
            this.environment = environment;
            return this;
          }

          @Override
          public SaveSnapshot set(String parameterName, Object value) {
            return (SaveSnapshot) super.set(parameterName, value);
          }
        }
        /**
         * Stops Airflow CLI command execution.
         *
         * Create a request for the method "environments.stopAirflowCommand".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link StopAirflowCommand#execute()} method to invoke the remote operation.
         *
         * @param environment The resource name of the environment in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}".
         * @param content the {@link com.google.api.services.composer.v1beta1.model.StopAirflowCommandRequest}
         * @return the request
         */
        public StopAirflowCommand stopAirflowCommand(java.lang.String environment, com.google.api.services.composer.v1beta1.model.StopAirflowCommandRequest content) throws java.io.IOException {
          StopAirflowCommand result = new StopAirflowCommand(environment, content);
          initialize(result);
          return result;
        }

        public class StopAirflowCommand extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.StopAirflowCommandResponse> {

          private static final String REST_PATH = "v1beta1/{+environment}:stopAirflowCommand";

          private final java.util.regex.Pattern ENVIRONMENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

          /**
           * Stops Airflow CLI command execution.
           *
           * Create a request for the method "environments.stopAirflowCommand".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link StopAirflowCommand#execute()} method to invoke the remote
           * operation. <p> {@link StopAirflowCommand#initialize(com.google.api.client.googleapis.services.A
           * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
           * invoking the constructor. </p>
           *
           * @param environment The resource name of the environment in the form:
         *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}".
           * @param content the {@link com.google.api.services.composer.v1beta1.model.StopAirflowCommandRequest}
           * @since 1.13
           */
          protected StopAirflowCommand(java.lang.String environment, com.google.api.services.composer.v1beta1.model.StopAirflowCommandRequest content) {
            super(CloudComposer.this, "POST", REST_PATH, content, com.google.api.services.composer.v1beta1.model.StopAirflowCommandResponse.class);
            this.environment = com.google.api.client.util.Preconditions.checkNotNull(environment, "Required parameter environment must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
          }

          @Override
          public StopAirflowCommand set$Xgafv(java.lang.String $Xgafv) {
            return (StopAirflowCommand) super.set$Xgafv($Xgafv);
          }

          @Override
          public StopAirflowCommand setAccessToken(java.lang.String accessToken) {
            return (StopAirflowCommand) super.setAccessToken(accessToken);
          }

          @Override
          public StopAirflowCommand setAlt(java.lang.String alt) {
            return (StopAirflowCommand) super.setAlt(alt);
          }

          @Override
          public StopAirflowCommand setCallback(java.lang.String callback) {
            return (StopAirflowCommand) super.setCallback(callback);
          }

          @Override
          public StopAirflowCommand setFields(java.lang.String fields) {
            return (StopAirflowCommand) super.setFields(fields);
          }

          @Override
          public StopAirflowCommand setKey(java.lang.String key) {
            return (StopAirflowCommand) super.setKey(key);
          }

          @Override
          public StopAirflowCommand setOauthToken(java.lang.String oauthToken) {
            return (StopAirflowCommand) super.setOauthToken(oauthToken);
          }

          @Override
          public StopAirflowCommand setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (StopAirflowCommand) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public StopAirflowCommand setQuotaUser(java.lang.String quotaUser) {
            return (StopAirflowCommand) super.setQuotaUser(quotaUser);
          }

          @Override
          public StopAirflowCommand setUploadType(java.lang.String uploadType) {
            return (StopAirflowCommand) super.setUploadType(uploadType);
          }

          @Override
          public StopAirflowCommand setUploadProtocol(java.lang.String uploadProtocol) {
            return (StopAirflowCommand) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the environment in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}".
           */
          @com.google.api.client.util.Key
          private java.lang.String environment;

          /** The resource name of the environment in the form:
         "projects/{projectId}/locations/{locationId}/environments/{environmentId}".
           */
          public java.lang.String getEnvironment() {
            return environment;
          }

          /**
           * The resource name of the environment in the form:
           * "projects/{projectId}/locations/{locationId}/environments/{environmentId}".
           */
          public StopAirflowCommand setEnvironment(java.lang.String environment) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(ENVIRONMENT_PATTERN.matcher(environment).matches(),
                  "Parameter environment must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
            }
            this.environment = environment;
            return this;
          }

          @Override
          public StopAirflowCommand set(String parameterName, Object value) {
            return (StopAirflowCommand) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the UserWorkloadsConfigMaps collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code CloudComposer composer = new CloudComposer(...);}
         *   {@code CloudComposer.UserWorkloadsConfigMaps.List request = composer.userWorkloadsConfigMaps().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public UserWorkloadsConfigMaps userWorkloadsConfigMaps() {
          return new UserWorkloadsConfigMaps();
        }

        /**
         * The "userWorkloadsConfigMaps" collection of methods.
         */
        public class UserWorkloadsConfigMaps {

          /**
           * Creates a user workloads ConfigMap. This method is supported for Cloud Composer environments in
           * versions composer-3-airflow-*.*.*-build.* and newer.
           *
           * Create a request for the method "userWorkloadsConfigMaps.create".
           *
           * This request holds the parameters needed by the composer server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The environment name to create a ConfigMap for, in the form:
           *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @param content the {@link com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap> {

            private static final String REST_PATH = "v1beta1/{+parent}/userWorkloadsConfigMaps";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

            /**
             * Creates a user workloads ConfigMap. This method is supported for Cloud Composer environments in
             * versions composer-3-airflow-*.*.*-build.* and newer.
             *
             * Create a request for the method "userWorkloadsConfigMaps.create".
             *
             * This request holds the parameters needed by the the composer server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             * <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The environment name to create a ConfigMap for, in the form:
           *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             * @param content the {@link com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap content) {
              super(CloudComposer.this, "POST", REST_PATH, content, com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The environment name to create a ConfigMap for, in the form:
             * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The environment name to create a ConfigMap for, in the form:
           "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The environment name to create a ConfigMap for, in the form:
             * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a user workloads ConfigMap. This method is supported for Cloud Composer environments in
           * versions composer-3-airflow-*.*.*-build.* and newer.
           *
           * Create a request for the method "userWorkloadsConfigMaps.delete".
           *
           * This request holds the parameters needed by the composer server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The ConfigMap to delete, in the form: "projects/{projectId}/locations/{locationId}/environ
           *        ments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.Empty> {

            private static final String REST_PATH = "v1beta1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsConfigMaps/[^/]+$");

            /**
             * Deletes a user workloads ConfigMap. This method is supported for Cloud Composer environments in
             * versions composer-3-airflow-*.*.*-build.* and newer.
             *
             * Create a request for the method "userWorkloadsConfigMaps.delete".
             *
             * This request holds the parameters needed by the the composer server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The ConfigMap to delete, in the form: "projects/{projectId}/locations/{locationId}/environ
           *        ments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(CloudComposer.this, "DELETE", REST_PATH, null, com.google.api.services.composer.v1beta1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsConfigMaps/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The ConfigMap to delete, in the form: "projects/{projectId}/locations/{loca
             * tionId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapI
             * d}"
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The ConfigMap to delete, in the form: "projects/{projectId}/locations/{locationId}/enviro
           nments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The ConfigMap to delete, in the form: "projects/{projectId}/locations/{loca
             * tionId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapI
             * d}"
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsConfigMaps/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets an existing user workloads ConfigMap. This method is supported for Cloud Composer
           * environments in versions composer-3-airflow-*.*.*-build.* and newer.
           *
           * Create a request for the method "userWorkloadsConfigMaps.get".
           *
           * This request holds the parameters needed by the composer server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The resource name of the ConfigMap to get, in the form: "projects/{projectId}/locations/{l
           *        ocationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}
           *        "
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap> {

            private static final String REST_PATH = "v1beta1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsConfigMaps/[^/]+$");

            /**
             * Gets an existing user workloads ConfigMap. This method is supported for Cloud Composer
             * environments in versions composer-3-airflow-*.*.*-build.* and newer.
             *
             * Create a request for the method "userWorkloadsConfigMaps.get".
             *
             * This request holds the parameters needed by the the composer server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The resource name of the ConfigMap to get, in the form: "projects/{projectId}/locations/{l
           *        ocationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}
           *        "
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(CloudComposer.this, "GET", REST_PATH, null, com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsConfigMaps/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The resource name of the ConfigMap to get, in the form: "projects/{projectI
             * d}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userW
             * orkloadsConfigMapId}"
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The resource name of the ConfigMap to get, in the form: "projects/{projectId}/locations/{
           locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The resource name of the ConfigMap to get, in the form: "projects/{projectI
             * d}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userW
             * orkloadsConfigMapId}"
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsConfigMaps/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists user workloads ConfigMaps. This method is supported for Cloud Composer environments in
           * versions composer-3-airflow-*.*.*-build.* and newer.
           *
           * Create a request for the method "userWorkloadsConfigMaps.list".
           *
           * This request holds the parameters needed by the composer server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. List ConfigMaps in the given environment, in the form:
           *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.ListUserWorkloadsConfigMapsResponse> {

            private static final String REST_PATH = "v1beta1/{+parent}/userWorkloadsConfigMaps";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

            /**
             * Lists user workloads ConfigMaps. This method is supported for Cloud Composer environments in
             * versions composer-3-airflow-*.*.*-build.* and newer.
             *
             * Create a request for the method "userWorkloadsConfigMaps.list".
             *
             * This request holds the parameters needed by the the composer server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. List ConfigMaps in the given environment, in the form:
           *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(CloudComposer.this, "GET", REST_PATH, null, com.google.api.services.composer.v1beta1.model.ListUserWorkloadsConfigMapsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. List ConfigMaps in the given environment, in the form:
             * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. List ConfigMaps in the given environment, in the form:
           "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. List ConfigMaps in the given environment, in the form:
             * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Optional. The maximum number of ConfigMaps to return. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. The maximum number of ConfigMaps to return.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** Optional. The maximum number of ConfigMaps to return. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * Optional. The next_page_token value returned from a previous List request, if any.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. The next_page_token value returned from a previous List request, if any.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * Optional. The next_page_token value returned from a previous List request, if any.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates a user workloads ConfigMap. This method is supported for Cloud Composer environments in
           * versions composer-3-airflow-*.*.*-build.* and newer.
           *
           * Create a request for the method "userWorkloadsConfigMaps.update".
           *
           * This request holds the parameters needed by the composer server.  After setting any optional
           * parameters, call the {@link Update#execute()} method to invoke the remote operation.
           *
           * @param name Identifier. The resource name of the ConfigMap, in the form: "projects/{projectId}/locations/{locati
           *        onId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
           * @param content the {@link com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap}
           * @return the request
           */
          public Update update(java.lang.String name, com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap content) throws java.io.IOException {
            Update result = new Update(name, content);
            initialize(result);
            return result;
          }

          public class Update extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap> {

            private static final String REST_PATH = "v1beta1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsConfigMaps/[^/]+$");

            /**
             * Updates a user workloads ConfigMap. This method is supported for Cloud Composer environments in
             * versions composer-3-airflow-*.*.*-build.* and newer.
             *
             * Create a request for the method "userWorkloadsConfigMaps.update".
             *
             * This request holds the parameters needed by the the composer server.  After setting any
             * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
             * <p> {@link
             * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Identifier. The resource name of the ConfigMap, in the form: "projects/{projectId}/locations/{locati
           *        onId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
             * @param content the {@link com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap}
             * @since 1.13
             */
            protected Update(java.lang.String name, com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap content) {
              super(CloudComposer.this, "PUT", REST_PATH, content, com.google.api.services.composer.v1beta1.model.UserWorkloadsConfigMap.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsConfigMaps/[^/]+$");
              }
            }

            @Override
            public Update set$Xgafv(java.lang.String $Xgafv) {
              return (Update) super.set$Xgafv($Xgafv);
            }

            @Override
            public Update setAccessToken(java.lang.String accessToken) {
              return (Update) super.setAccessToken(accessToken);
            }

            @Override
            public Update setAlt(java.lang.String alt) {
              return (Update) super.setAlt(alt);
            }

            @Override
            public Update setCallback(java.lang.String callback) {
              return (Update) super.setCallback(callback);
            }

            @Override
            public Update setFields(java.lang.String fields) {
              return (Update) super.setFields(fields);
            }

            @Override
            public Update setKey(java.lang.String key) {
              return (Update) super.setKey(key);
            }

            @Override
            public Update setOauthToken(java.lang.String oauthToken) {
              return (Update) super.setOauthToken(oauthToken);
            }

            @Override
            public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Update) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Update setQuotaUser(java.lang.String quotaUser) {
              return (Update) super.setQuotaUser(quotaUser);
            }

            @Override
            public Update setUploadType(java.lang.String uploadType) {
              return (Update) super.setUploadType(uploadType);
            }

            @Override
            public Update setUploadProtocol(java.lang.String uploadProtocol) {
              return (Update) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Identifier. The resource name of the ConfigMap, in the form: "projects/{projectId}/lo
             * cations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorklo
             * adsConfigMapId}"
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Identifier. The resource name of the ConfigMap, in the form: "projects/{projectId}/locations/{locat
           ionId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Identifier. The resource name of the ConfigMap, in the form: "projects/{projectId}/lo
             * cations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorklo
             * adsConfigMapId}"
             */
            public Update setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsConfigMaps/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Update set(String parameterName, Object value) {
              return (Update) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the UserWorkloadsSecrets collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code CloudComposer composer = new CloudComposer(...);}
         *   {@code CloudComposer.UserWorkloadsSecrets.List request = composer.userWorkloadsSecrets().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public UserWorkloadsSecrets userWorkloadsSecrets() {
          return new UserWorkloadsSecrets();
        }

        /**
         * The "userWorkloadsSecrets" collection of methods.
         */
        public class UserWorkloadsSecrets {

          /**
           * Creates a user workloads Secret. This method is supported for Cloud Composer environments in
           * versions composer-3-airflow-*.*.*-build.* and newer.
           *
           * Create a request for the method "userWorkloadsSecrets.create".
           *
           * This request holds the parameters needed by the composer server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The environment name to create a Secret for, in the form:
           *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @param content the {@link com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret> {

            private static final String REST_PATH = "v1beta1/{+parent}/userWorkloadsSecrets";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

            /**
             * Creates a user workloads Secret. This method is supported for Cloud Composer environments in
             * versions composer-3-airflow-*.*.*-build.* and newer.
             *
             * Create a request for the method "userWorkloadsSecrets.create".
             *
             * This request holds the parameters needed by the the composer server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             * <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The environment name to create a Secret for, in the form:
           *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             * @param content the {@link com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret content) {
              super(CloudComposer.this, "POST", REST_PATH, content, com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The environment name to create a Secret for, in the form:
             * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The environment name to create a Secret for, in the form:
           "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The environment name to create a Secret for, in the form:
             * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a user workloads Secret. This method is supported for Cloud Composer environments in
           * versions composer-3-airflow-*.*.*-build.* and newer.
           *
           * Create a request for the method "userWorkloadsSecrets.delete".
           *
           * This request holds the parameters needed by the composer server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The Secret to delete, in the form: "projects/{projectId}/locations/{locationId}/environmen
           *        ts/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.Empty> {

            private static final String REST_PATH = "v1beta1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsSecrets/[^/]+$");

            /**
             * Deletes a user workloads Secret. This method is supported for Cloud Composer environments in
             * versions composer-3-airflow-*.*.*-build.* and newer.
             *
             * Create a request for the method "userWorkloadsSecrets.delete".
             *
             * This request holds the parameters needed by the the composer server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The Secret to delete, in the form: "projects/{projectId}/locations/{locationId}/environmen
           *        ts/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(CloudComposer.this, "DELETE", REST_PATH, null, com.google.api.services.composer.v1beta1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsSecrets/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The Secret to delete, in the form: "projects/{projectId}/locations/{locatio
             * nId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The Secret to delete, in the form: "projects/{projectId}/locations/{locationId}/environme
           nts/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The Secret to delete, in the form: "projects/{projectId}/locations/{locatio
             * nId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsSecrets/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets an existing user workloads Secret. Values of the "data" field in the response are cleared.
           * This method is supported for Cloud Composer environments in versions
           * composer-3-airflow-*.*.*-build.* and newer.
           *
           * Create a request for the method "userWorkloadsSecrets.get".
           *
           * This request holds the parameters needed by the composer server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The resource name of the Secret to get, in the form: "projects/{projectId}/locations/{loca
           *        tionId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret> {

            private static final String REST_PATH = "v1beta1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsSecrets/[^/]+$");

            /**
             * Gets an existing user workloads Secret. Values of the "data" field in the response are cleared.
             * This method is supported for Cloud Composer environments in versions
             * composer-3-airflow-*.*.*-build.* and newer.
             *
             * Create a request for the method "userWorkloadsSecrets.get".
             *
             * This request holds the parameters needed by the the composer server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The resource name of the Secret to get, in the form: "projects/{projectId}/locations/{loca
           *        tionId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(CloudComposer.this, "GET", REST_PATH, null, com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsSecrets/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The resource name of the Secret to get, in the form: "projects/{projectId}/
             * locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloa
             * dsSecretId}"
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The resource name of the Secret to get, in the form: "projects/{projectId}/locations/{loc
           ationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The resource name of the Secret to get, in the form: "projects/{projectId}/
             * locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloa
             * dsSecretId}"
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsSecrets/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists user workloads Secrets. This method is supported for Cloud Composer environments in
           * versions composer-3-airflow-*.*.*-build.* and newer.
           *
           * Create a request for the method "userWorkloadsSecrets.list".
           *
           * This request holds the parameters needed by the composer server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. List Secrets in the given environment, in the form:
           *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.ListUserWorkloadsSecretsResponse> {

            private static final String REST_PATH = "v1beta1/{+parent}/userWorkloadsSecrets";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

            /**
             * Lists user workloads Secrets. This method is supported for Cloud Composer environments in
             * versions composer-3-airflow-*.*.*-build.* and newer.
             *
             * Create a request for the method "userWorkloadsSecrets.list".
             *
             * This request holds the parameters needed by the the composer server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. List Secrets in the given environment, in the form:
           *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(CloudComposer.this, "GET", REST_PATH, null, com.google.api.services.composer.v1beta1.model.ListUserWorkloadsSecretsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. List Secrets in the given environment, in the form:
             * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. List Secrets in the given environment, in the form:
           "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. List Secrets in the given environment, in the form:
             * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Optional. The maximum number of Secrets to return. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. The maximum number of Secrets to return.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** Optional. The maximum number of Secrets to return. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * Optional. The next_page_token value returned from a previous List request, if any.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. The next_page_token value returned from a previous List request, if any.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * Optional. The next_page_token value returned from a previous List request, if any.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates a user workloads Secret. This method is supported for Cloud Composer environments in
           * versions composer-3-airflow-*.*.*-build.* and newer.
           *
           * Create a request for the method "userWorkloadsSecrets.update".
           *
           * This request holds the parameters needed by the composer server.  After setting any optional
           * parameters, call the {@link Update#execute()} method to invoke the remote operation.
           *
           * @param name Identifier. The resource name of the Secret, in the form: "projects/{projectId}/locations/{locationI
           *        d}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
           * @param content the {@link com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret}
           * @return the request
           */
          public Update update(java.lang.String name, com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret content) throws java.io.IOException {
            Update result = new Update(name, content);
            initialize(result);
            return result;
          }

          public class Update extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret> {

            private static final String REST_PATH = "v1beta1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsSecrets/[^/]+$");

            /**
             * Updates a user workloads Secret. This method is supported for Cloud Composer environments in
             * versions composer-3-airflow-*.*.*-build.* and newer.
             *
             * Create a request for the method "userWorkloadsSecrets.update".
             *
             * This request holds the parameters needed by the the composer server.  After setting any
             * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
             * <p> {@link
             * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Identifier. The resource name of the Secret, in the form: "projects/{projectId}/locations/{locationI
           *        d}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
             * @param content the {@link com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret}
             * @since 1.13
             */
            protected Update(java.lang.String name, com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret content) {
              super(CloudComposer.this, "PUT", REST_PATH, content, com.google.api.services.composer.v1beta1.model.UserWorkloadsSecret.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsSecrets/[^/]+$");
              }
            }

            @Override
            public Update set$Xgafv(java.lang.String $Xgafv) {
              return (Update) super.set$Xgafv($Xgafv);
            }

            @Override
            public Update setAccessToken(java.lang.String accessToken) {
              return (Update) super.setAccessToken(accessToken);
            }

            @Override
            public Update setAlt(java.lang.String alt) {
              return (Update) super.setAlt(alt);
            }

            @Override
            public Update setCallback(java.lang.String callback) {
              return (Update) super.setCallback(callback);
            }

            @Override
            public Update setFields(java.lang.String fields) {
              return (Update) super.setFields(fields);
            }

            @Override
            public Update setKey(java.lang.String key) {
              return (Update) super.setKey(key);
            }

            @Override
            public Update setOauthToken(java.lang.String oauthToken) {
              return (Update) super.setOauthToken(oauthToken);
            }

            @Override
            public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Update) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Update setQuotaUser(java.lang.String quotaUser) {
              return (Update) super.setQuotaUser(quotaUser);
            }

            @Override
            public Update setUploadType(java.lang.String uploadType) {
              return (Update) super.setUploadType(uploadType);
            }

            @Override
            public Update setUploadProtocol(java.lang.String uploadProtocol) {
              return (Update) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Identifier. The resource name of the Secret, in the form: "projects/{projectId}/locat
             * ions/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSec
             * retId}"
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Identifier. The resource name of the Secret, in the form: "projects/{projectId}/locations/{location
           Id}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Identifier. The resource name of the Secret, in the form: "projects/{projectId}/locat
             * ions/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSec
             * retId}"
             */
            public Update setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+/userWorkloadsSecrets/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Update set(String parameterName, Object value) {
              return (Update) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Workloads collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code CloudComposer composer = new CloudComposer(...);}
         *   {@code CloudComposer.Workloads.List request = composer.workloads().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Workloads workloads() {
          return new Workloads();
        }

        /**
         * The "workloads" collection of methods.
         */
        public class Workloads {

          /**
           * Lists workloads in a Cloud Composer environment. Workload is a unit that runs a single Composer
           * component. This method is supported for Cloud Composer environments in versions
           * composer-2.*.*-airflow-*.*.* and newer.
           *
           * Create a request for the method "workloads.list".
           *
           * This request holds the parameters needed by the composer server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The environment name to get workloads for, in the form:
           *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.ListWorkloadsResponse> {

            private static final String REST_PATH = "v1beta1/{+parent}/workloads";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/environments/[^/]+$");

            /**
             * Lists workloads in a Cloud Composer environment. Workload is a unit that runs a single Composer
             * component. This method is supported for Cloud Composer environments in versions
             * composer-2.*.*-airflow-*.*.* and newer.
             *
             * Create a request for the method "workloads.list".
             *
             * This request holds the parameters needed by the the composer server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The environment name to get workloads for, in the form:
           *        "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(CloudComposer.this, "GET", REST_PATH, null, com.google.api.services.composer.v1beta1.model.ListWorkloadsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The environment name to get workloads for, in the form:
             * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The environment name to get workloads for, in the form:
           "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The environment name to get workloads for, in the form:
             * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/environments/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Optional. The list filter. Currently only supports equality on the type field. The
             * value of a field specified in the filter expression must be one ComposerWorkloadType
             * enum option. It's possible to get multiple types using "OR" operator, e.g.:
             * "type=SCHEDULER OR type=CELERY_WORKER". If not specified, all items are returned.
             */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** Optional. The list filter. Currently only supports equality on the type field. The value of a field
           specified in the filter expression must be one ComposerWorkloadType enum option. It's possible to
           get multiple types using "OR" operator, e.g.: "type=SCHEDULER OR type=CELERY_WORKER". If not
           specified, all items are returned.
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /**
             * Optional. The list filter. Currently only supports equality on the type field. The
             * value of a field specified in the filter expression must be one ComposerWorkloadType
             * enum option. It's possible to get multiple types using "OR" operator, e.g.:
             * "type=SCHEDULER OR type=CELERY_WORKER". If not specified, all items are returned.
             */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** Optional. The maximum number of environments to return. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. The maximum number of environments to return.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** Optional. The maximum number of environments to return. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * Optional. The next_page_token value returned from a previous List request, if any.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. The next_page_token value returned from a previous List request, if any.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * Optional. The next_page_token value returned from a previous List request, if any.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
      }
      /**
       * An accessor for creating requests from the ImageVersions collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code CloudComposer composer = new CloudComposer(...);}
       *   {@code CloudComposer.ImageVersions.List request = composer.imageVersions().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public ImageVersions imageVersions() {
        return new ImageVersions();
      }

      /**
       * The "imageVersions" collection of methods.
       */
      public class ImageVersions {

        /**
         * List ImageVersions for provided location.
         *
         * Create a request for the method "imageVersions.list".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent List ImageVersions in the given project and location, in the form:
         *        "projects/{projectId}/locations/{locationId}"
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.ListImageVersionsResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}/imageVersions";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * List ImageVersions for provided location.
           *
           * Create a request for the method "imageVersions.list".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent List ImageVersions in the given project and location, in the form:
         *        "projects/{projectId}/locations/{locationId}"
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(CloudComposer.this, "GET", REST_PATH, null, com.google.api.services.composer.v1beta1.model.ListImageVersionsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * List ImageVersions in the given project and location, in the form:
           * "projects/{projectId}/locations/{locationId}"
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** List ImageVersions in the given project and location, in the form:
         "projects/{projectId}/locations/{locationId}"
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * List ImageVersions in the given project and location, in the form:
           * "projects/{projectId}/locations/{locationId}"
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Whether or not image versions from old releases should be included. */
          @com.google.api.client.util.Key
          private java.lang.Boolean includePastReleases;

          /** Whether or not image versions from old releases should be included.
           */
          public java.lang.Boolean getIncludePastReleases() {
            return includePastReleases;
          }

          /** Whether or not image versions from old releases should be included. */
          public List setIncludePastReleases(java.lang.Boolean includePastReleases) {
            this.includePastReleases = includePastReleases;
            return this;
          }

          /** The maximum number of image_versions to return. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The maximum number of image_versions to return.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The maximum number of image_versions to return. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The next_page_token value returned from a previous List request, if any. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The next_page_token value returned from a previous List request, if any.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The next_page_token value returned from a previous List request, if any. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the Operations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code CloudComposer composer = new CloudComposer(...);}
       *   {@code CloudComposer.Operations.List request = composer.operations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Operations operations() {
        return new Operations();
      }

      /**
       * The "operations" collection of methods.
       */
      public class Operations {

        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested
         * in the operation result. It does not cancel the operation. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.delete".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be deleted.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.Empty> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Deletes a long-running operation. This method indicates that the client is no longer interested
           * in the operation result. It does not cancel the operation. If the server doesn't support this
           * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.delete".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be deleted.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(CloudComposer.this, "DELETE", REST_PATH, null, com.google.api.services.composer.v1beta1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be deleted. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be deleted.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be deleted. */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets the latest state of a long-running operation. Clients can use this method to poll the
         * operation result at intervals as recommended by the API service.
         *
         * Create a request for the method "operations.get".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.Operation> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Gets the latest state of a long-running operation. Clients can use this method to poll the
           * operation result at intervals as recommended by the API service.
           *
           * Create a request for the method "operations.get".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(CloudComposer.this, "GET", REST_PATH, null, com.google.api.services.composer.v1beta1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support
         * this method, it returns `UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.list".
         *
         * This request holds the parameters needed by the composer server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation's parent resource.
         * @return the request
         */
        public List list(java.lang.String name) throws java.io.IOException {
          List result = new List(name);
          initialize(result);
          return result;
        }

        public class List extends CloudComposerRequest<com.google.api.services.composer.v1beta1.model.ListOperationsResponse> {

          private static final String REST_PATH = "v1beta1/{+name}/operations";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists operations that match the specified filter in the request. If the server doesn't support
           * this method, it returns `UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.list".
           *
           * This request holds the parameters needed by the the composer server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation's parent resource.
           * @since 1.13
           */
          protected List(java.lang.String name) {
            super(CloudComposer.this, "GET", REST_PATH, null, com.google.api.services.composer.v1beta1.model.ListOperationsResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation's parent resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation's parent resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation's parent resource. */
          public List setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /** The standard list filter. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** The standard list filter.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** The standard list filter. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** The standard list page size. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The standard list page size.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The standard list page size. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The standard list page token. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The standard list page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The standard list page token. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link CloudComposer}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link CloudComposer}. */
    @Override
    public CloudComposer build() {
      return new CloudComposer(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link CloudComposerRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setCloudComposerRequestInitializer(
        CloudComposerRequestInitializer cloudcomposerRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(cloudcomposerRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
