/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.managedidentities.v1beta1.model;

/**
 * Represents a Managed Microsoft Identities Peering.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Managed Service for Microsoft Active Directory API.
 * For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Peering extends com.google.api.client.json.GenericJson {

  /**
   * Required. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-
   * firewalls#networks) to which the instance is connected. Caller needs to make sure that CIDR
   * subnets do not overlap between networks, else peering creation will fail.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String authorizedNetwork;

  /**
   * Output only. The time the instance was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Required. Full domain resource path for the Managed AD Domain involved in peering. The resource
   * path should be in the form: `projects/{project_id}/locations/global/domains/{domain_name}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String domainResource;

  /**
   * Optional. Resource labels to represent user provided metadata.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Output only. Unique name of the peering in this scope including projects and location using the
   * form: `projects/{project_id}/locations/global/peerings/{peering_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The current state of this Peering.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Additional information about the current status of this peering, if available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String statusMessage;

  /**
   * Output only. Last update time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Required. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-
   * firewalls#networks) to which the instance is connected. Caller needs to make sure that CIDR
   * subnets do not overlap between networks, else peering creation will fail.
   * @return value or {@code null} for none
   */
  public java.lang.String getAuthorizedNetwork() {
    return authorizedNetwork;
  }

  /**
   * Required. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-
   * firewalls#networks) to which the instance is connected. Caller needs to make sure that CIDR
   * subnets do not overlap between networks, else peering creation will fail.
   * @param authorizedNetwork authorizedNetwork or {@code null} for none
   */
  public Peering setAuthorizedNetwork(java.lang.String authorizedNetwork) {
    this.authorizedNetwork = authorizedNetwork;
    return this;
  }

  /**
   * Output only. The time the instance was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time the instance was created.
   * @param createTime createTime or {@code null} for none
   */
  public Peering setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Required. Full domain resource path for the Managed AD Domain involved in peering. The resource
   * path should be in the form: `projects/{project_id}/locations/global/domains/{domain_name}`
   * @return value or {@code null} for none
   */
  public java.lang.String getDomainResource() {
    return domainResource;
  }

  /**
   * Required. Full domain resource path for the Managed AD Domain involved in peering. The resource
   * path should be in the form: `projects/{project_id}/locations/global/domains/{domain_name}`
   * @param domainResource domainResource or {@code null} for none
   */
  public Peering setDomainResource(java.lang.String domainResource) {
    this.domainResource = domainResource;
    return this;
  }

  /**
   * Optional. Resource labels to represent user provided metadata.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. Resource labels to represent user provided metadata.
   * @param labels labels or {@code null} for none
   */
  public Peering setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Output only. Unique name of the peering in this scope including projects and location using the
   * form: `projects/{project_id}/locations/global/peerings/{peering_id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. Unique name of the peering in this scope including projects and location using the
   * form: `projects/{project_id}/locations/global/peerings/{peering_id}`.
   * @param name name or {@code null} for none
   */
  public Peering setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The current state of this Peering.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The current state of this Peering.
   * @param state state or {@code null} for none
   */
  public Peering setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Additional information about the current status of this peering, if available.
   * @return value or {@code null} for none
   */
  public java.lang.String getStatusMessage() {
    return statusMessage;
  }

  /**
   * Output only. Additional information about the current status of this peering, if available.
   * @param statusMessage statusMessage or {@code null} for none
   */
  public Peering setStatusMessage(java.lang.String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Output only. Last update time.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Last update time.
   * @param updateTime updateTime or {@code null} for none
   */
  public Peering setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public Peering set(String fieldName, Object value) {
    return (Peering) super.set(fieldName, value);
  }

  @Override
  public Peering clone() {
    return (Peering) super.clone();
  }

}
