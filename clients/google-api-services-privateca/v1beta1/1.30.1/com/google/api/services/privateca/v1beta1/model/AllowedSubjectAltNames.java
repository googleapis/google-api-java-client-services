/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.privateca.v1beta1.model;

/**
 * AllowedSubjectAltNames specifies the allowed values for SubjectAltNames by the
 * CertificateAuthority when issuing Certificates.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Certificate Authority API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AllowedSubjectAltNames extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Specifies if to allow custom X509Extension values.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowCustomSans;

  /**
   * Optional. Specifies if glob patterns used for allowed_dns_names allow wildcard certificates. If
   * this is set, certificate requests with wildcard domains will be permitted to match a glob
   * pattern specified in allowed_dns_names. Otherwise, certificate requests with wildcard domains
   * will be permitted only if allowed_dns_names contains a literal wildcard.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowGlobbingDnsWildcards;

  /**
   * Optional. Contains valid, fully-qualified host names. Glob patterns are also supported. To
   * allow an explicit wildcard certificate, escape with backlash (i.e. ""). E.g. for globbed
   * entries: '*bar.com' will allow 'foo.bar.com', but not '*.bar.com', unless the
   * allow_globbing_dns_wildcards field is set. E.g. for wildcard entries: '.bar.com' will allow
   * '*.bar.com', but not 'foo.bar.com'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> allowedDnsNames;

  /**
   * Optional. Contains valid RFC 2822 E-mail addresses. Glob patterns are also supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> allowedEmailAddresses;

  /**
   * Optional. Contains valid 32-bit IPv4 addresses and subnet ranges or RFC 4291 IPv6 addresses and
   * subnet ranges. Subnet ranges are specified using the '/' notation (e.g. 10.0.0.0/8,
   * 2001:700:300:1800::/64). Glob patterns are supported only for ip address entries (i.e. not for
   * subnet ranges).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> allowedIps;

  /**
   * Optional. Contains valid RFC 3986 URIs. Glob patterns are also supported. To match across path
   * seperators (i.e. '/') use the double star glob pattern (i.e. '**').
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> allowedUris;

  /**
   * Optional. Specifies if to allow custom X509Extension values.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowCustomSans() {
    return allowCustomSans;
  }

  /**
   * Optional. Specifies if to allow custom X509Extension values.
   * @param allowCustomSans allowCustomSans or {@code null} for none
   */
  public AllowedSubjectAltNames setAllowCustomSans(java.lang.Boolean allowCustomSans) {
    this.allowCustomSans = allowCustomSans;
    return this;
  }

  /**
   * Optional. Specifies if glob patterns used for allowed_dns_names allow wildcard certificates. If
   * this is set, certificate requests with wildcard domains will be permitted to match a glob
   * pattern specified in allowed_dns_names. Otherwise, certificate requests with wildcard domains
   * will be permitted only if allowed_dns_names contains a literal wildcard.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowGlobbingDnsWildcards() {
    return allowGlobbingDnsWildcards;
  }

  /**
   * Optional. Specifies if glob patterns used for allowed_dns_names allow wildcard certificates. If
   * this is set, certificate requests with wildcard domains will be permitted to match a glob
   * pattern specified in allowed_dns_names. Otherwise, certificate requests with wildcard domains
   * will be permitted only if allowed_dns_names contains a literal wildcard.
   * @param allowGlobbingDnsWildcards allowGlobbingDnsWildcards or {@code null} for none
   */
  public AllowedSubjectAltNames setAllowGlobbingDnsWildcards(java.lang.Boolean allowGlobbingDnsWildcards) {
    this.allowGlobbingDnsWildcards = allowGlobbingDnsWildcards;
    return this;
  }

  /**
   * Optional. Contains valid, fully-qualified host names. Glob patterns are also supported. To
   * allow an explicit wildcard certificate, escape with backlash (i.e. ""). E.g. for globbed
   * entries: '*bar.com' will allow 'foo.bar.com', but not '*.bar.com', unless the
   * allow_globbing_dns_wildcards field is set. E.g. for wildcard entries: '.bar.com' will allow
   * '*.bar.com', but not 'foo.bar.com'.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAllowedDnsNames() {
    return allowedDnsNames;
  }

  /**
   * Optional. Contains valid, fully-qualified host names. Glob patterns are also supported. To
   * allow an explicit wildcard certificate, escape with backlash (i.e. ""). E.g. for globbed
   * entries: '*bar.com' will allow 'foo.bar.com', but not '*.bar.com', unless the
   * allow_globbing_dns_wildcards field is set. E.g. for wildcard entries: '.bar.com' will allow
   * '*.bar.com', but not 'foo.bar.com'.
   * @param allowedDnsNames allowedDnsNames or {@code null} for none
   */
  public AllowedSubjectAltNames setAllowedDnsNames(java.util.List<java.lang.String> allowedDnsNames) {
    this.allowedDnsNames = allowedDnsNames;
    return this;
  }

  /**
   * Optional. Contains valid RFC 2822 E-mail addresses. Glob patterns are also supported.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAllowedEmailAddresses() {
    return allowedEmailAddresses;
  }

  /**
   * Optional. Contains valid RFC 2822 E-mail addresses. Glob patterns are also supported.
   * @param allowedEmailAddresses allowedEmailAddresses or {@code null} for none
   */
  public AllowedSubjectAltNames setAllowedEmailAddresses(java.util.List<java.lang.String> allowedEmailAddresses) {
    this.allowedEmailAddresses = allowedEmailAddresses;
    return this;
  }

  /**
   * Optional. Contains valid 32-bit IPv4 addresses and subnet ranges or RFC 4291 IPv6 addresses and
   * subnet ranges. Subnet ranges are specified using the '/' notation (e.g. 10.0.0.0/8,
   * 2001:700:300:1800::/64). Glob patterns are supported only for ip address entries (i.e. not for
   * subnet ranges).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAllowedIps() {
    return allowedIps;
  }

  /**
   * Optional. Contains valid 32-bit IPv4 addresses and subnet ranges or RFC 4291 IPv6 addresses and
   * subnet ranges. Subnet ranges are specified using the '/' notation (e.g. 10.0.0.0/8,
   * 2001:700:300:1800::/64). Glob patterns are supported only for ip address entries (i.e. not for
   * subnet ranges).
   * @param allowedIps allowedIps or {@code null} for none
   */
  public AllowedSubjectAltNames setAllowedIps(java.util.List<java.lang.String> allowedIps) {
    this.allowedIps = allowedIps;
    return this;
  }

  /**
   * Optional. Contains valid RFC 3986 URIs. Glob patterns are also supported. To match across path
   * seperators (i.e. '/') use the double star glob pattern (i.e. '**').
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAllowedUris() {
    return allowedUris;
  }

  /**
   * Optional. Contains valid RFC 3986 URIs. Glob patterns are also supported. To match across path
   * seperators (i.e. '/') use the double star glob pattern (i.e. '**').
   * @param allowedUris allowedUris or {@code null} for none
   */
  public AllowedSubjectAltNames setAllowedUris(java.util.List<java.lang.String> allowedUris) {
    this.allowedUris = allowedUris;
    return this;
  }

  @Override
  public AllowedSubjectAltNames set(String fieldName, Object value) {
    return (AllowedSubjectAltNames) super.set(fieldName, value);
  }

  @Override
  public AllowedSubjectAltNames clone() {
    return (AllowedSubjectAltNames) super.clone();
  }

}
