/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.discoveryengine.v1.model;

/**
 * Request message for IdentityMappingStoreService.PurgeIdentityMappings
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Discovery Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDiscoveryengineV1PurgeIdentityMappingsRequest extends com.google.api.client.json.GenericJson {

  /**
   * Filter matching identity mappings to purge. The eligible field for filtering is: *
   * `update_time`: in ISO 8601 "zulu" format. * `external_id` Examples: * Deleting all identity
   * mappings updated in a time range: `update_time > "2012-04-23T18:25:43.511Z" AND update_time <
   * "2012-04-23T18:30:43.511Z"` * Deleting all identity mappings for a given external_id:
   * `external_id = "id1"` * Deleting all identity mappings inside an identity mapping store: `*`
   * The filtering fields are assumed to have an implicit AND. Should not be used with source. An
   * error will be thrown, if both are provided.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String filter;

  /**
   * Actually performs the purge. If `force` is set to false, return the expected purge count
   * without deleting any identity mappings. This field is only supported for purge with filter. For
   * input source this field is ignored and data will be purged regardless of the value of this
   * field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean force;

  /**
   * The inline source to purge identity mapping entries from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1PurgeIdentityMappingsRequestInlineSource inlineSource;

  /**
   * Filter matching identity mappings to purge. The eligible field for filtering is: *
   * `update_time`: in ISO 8601 "zulu" format. * `external_id` Examples: * Deleting all identity
   * mappings updated in a time range: `update_time > "2012-04-23T18:25:43.511Z" AND update_time <
   * "2012-04-23T18:30:43.511Z"` * Deleting all identity mappings for a given external_id:
   * `external_id = "id1"` * Deleting all identity mappings inside an identity mapping store: `*`
   * The filtering fields are assumed to have an implicit AND. Should not be used with source. An
   * error will be thrown, if both are provided.
   * @return value or {@code null} for none
   */
  public java.lang.String getFilter() {
    return filter;
  }

  /**
   * Filter matching identity mappings to purge. The eligible field for filtering is: *
   * `update_time`: in ISO 8601 "zulu" format. * `external_id` Examples: * Deleting all identity
   * mappings updated in a time range: `update_time > "2012-04-23T18:25:43.511Z" AND update_time <
   * "2012-04-23T18:30:43.511Z"` * Deleting all identity mappings for a given external_id:
   * `external_id = "id1"` * Deleting all identity mappings inside an identity mapping store: `*`
   * The filtering fields are assumed to have an implicit AND. Should not be used with source. An
   * error will be thrown, if both are provided.
   * @param filter filter or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1PurgeIdentityMappingsRequest setFilter(java.lang.String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Actually performs the purge. If `force` is set to false, return the expected purge count
   * without deleting any identity mappings. This field is only supported for purge with filter. For
   * input source this field is ignored and data will be purged regardless of the value of this
   * field.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getForce() {
    return force;
  }

  /**
   * Actually performs the purge. If `force` is set to false, return the expected purge count
   * without deleting any identity mappings. This field is only supported for purge with filter. For
   * input source this field is ignored and data will be purged regardless of the value of this
   * field.
   * @param force force or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1PurgeIdentityMappingsRequest setForce(java.lang.Boolean force) {
    this.force = force;
    return this;
  }

  /**
   * The inline source to purge identity mapping entries from.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1PurgeIdentityMappingsRequestInlineSource getInlineSource() {
    return inlineSource;
  }

  /**
   * The inline source to purge identity mapping entries from.
   * @param inlineSource inlineSource or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1PurgeIdentityMappingsRequest setInlineSource(GoogleCloudDiscoveryengineV1PurgeIdentityMappingsRequestInlineSource inlineSource) {
    this.inlineSource = inlineSource;
    return this;
  }

  @Override
  public GoogleCloudDiscoveryengineV1PurgeIdentityMappingsRequest set(String fieldName, Object value) {
    return (GoogleCloudDiscoveryengineV1PurgeIdentityMappingsRequest) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDiscoveryengineV1PurgeIdentityMappingsRequest clone() {
    return (GoogleCloudDiscoveryengineV1PurgeIdentityMappingsRequest) super.clone();
  }

}
