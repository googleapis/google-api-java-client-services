/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.migrationcenter.v1alpha1.model;

/**
 * Single fstab entry.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Migration Center API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FstabEntry extends com.google.api.client.json.GenericJson {

  /**
   * The mount point for the filesystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String file;

  /**
   * Used by dump to determine which filesystems need to be dumped.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer freq;

  /**
   * Mount options associated with the filesystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mntops;

  /**
   * Used by the fsck(8) program to determine the order in which filesystem checks are done at
   * reboot time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer passno;

  /**
   * The block special device or remote filesystem to be mounted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String spec;

  /**
   * The type of the filesystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vfstype;

  /**
   * The mount point for the filesystem.
   * @return value or {@code null} for none
   */
  public java.lang.String getFile() {
    return file;
  }

  /**
   * The mount point for the filesystem.
   * @param file file or {@code null} for none
   */
  public FstabEntry setFile(java.lang.String file) {
    this.file = file;
    return this;
  }

  /**
   * Used by dump to determine which filesystems need to be dumped.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFreq() {
    return freq;
  }

  /**
   * Used by dump to determine which filesystems need to be dumped.
   * @param freq freq or {@code null} for none
   */
  public FstabEntry setFreq(java.lang.Integer freq) {
    this.freq = freq;
    return this;
  }

  /**
   * Mount options associated with the filesystem.
   * @return value or {@code null} for none
   */
  public java.lang.String getMntops() {
    return mntops;
  }

  /**
   * Mount options associated with the filesystem.
   * @param mntops mntops or {@code null} for none
   */
  public FstabEntry setMntops(java.lang.String mntops) {
    this.mntops = mntops;
    return this;
  }

  /**
   * Used by the fsck(8) program to determine the order in which filesystem checks are done at
   * reboot time.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPassno() {
    return passno;
  }

  /**
   * Used by the fsck(8) program to determine the order in which filesystem checks are done at
   * reboot time.
   * @param passno passno or {@code null} for none
   */
  public FstabEntry setPassno(java.lang.Integer passno) {
    this.passno = passno;
    return this;
  }

  /**
   * The block special device or remote filesystem to be mounted.
   * @return value or {@code null} for none
   */
  public java.lang.String getSpec() {
    return spec;
  }

  /**
   * The block special device or remote filesystem to be mounted.
   * @param spec spec or {@code null} for none
   */
  public FstabEntry setSpec(java.lang.String spec) {
    this.spec = spec;
    return this;
  }

  /**
   * The type of the filesystem.
   * @return value or {@code null} for none
   */
  public java.lang.String getVfstype() {
    return vfstype;
  }

  /**
   * The type of the filesystem.
   * @param vfstype vfstype or {@code null} for none
   */
  public FstabEntry setVfstype(java.lang.String vfstype) {
    this.vfstype = vfstype;
    return this;
  }

  @Override
  public FstabEntry set(String fieldName, Object value) {
    return (FstabEntry) super.set(fieldName, value);
  }

  @Override
  public FstabEntry clone() {
    return (FstabEntry) super.clone();
  }

}
