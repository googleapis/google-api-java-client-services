/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidmanagement.v1.model;

/**
 * An Access Point Name (APN) configuration for a carrier data connection. The APN provides
 * configuration to connect a cellular network device to an IP data network. A carrier uses this
 * setting to decide which IP address to assign, any security methods to apply, and how the device
 * might be connected to private networks.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Android Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ApnSetting extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Whether User Plane resources have to be activated during every transition from CM-
   * IDLE mode to CM-CONNECTED state for this APN. See 3GPP TS 23.501 section 5.6.13.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String alwaysOnSetting;

  /**
   * Required. Name of the APN. Policy will be rejected if this field is empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String apn;

  /**
   * Required. Usage categories for the APN. Policy will be rejected if this field is empty or
   * contains APN_TYPE_UNSPECIFIED or duplicates. Multiple APN types can be set on fully managed
   * devices. ENTERPRISE is the only allowed APN type on work profiles. A nonComplianceDetail with
   * MANAGEMENT_MODE is reported for any other value on work profiles. APN types that are not
   * supported on the device or management mode will be ignored. If this results in the empty list,
   * the APN setting will be ignored, because apnTypes is a required field. A nonComplianceDetail
   * with INVALID_VALUE is reported if none of the APN types are supported on the device or
   * management mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> apnTypes;

  /**
   * Optional. Authentication type of the APN.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String authType;

  /**
   * Optional. Carrier ID for the APN. A value of 0 (default) means not set and negative values are
   * rejected.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer carrierId;

  /**
   * Required. Human-readable name that describes the APN. Policy will be rejected if this field is
   * empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Optional. MMS (Multimedia Messaging Service) proxy address of the APN which can be an IP
   * address or hostname (not a URL).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mmsProxyAddress;

  /**
   * Optional. MMS (Multimedia Messaging Service) proxy port of the APN. A value of 0 (default)
   * means not set and negative values are rejected.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer mmsProxyPort;

  /**
   * Optional. MMSC (Multimedia Messaging Service Center) URI of the APN.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mmsc;

  /**
   * Optional. The default MTU (Maximum Transmission Unit) size in bytes of the IPv4 routes brought
   * up by this APN setting. A value of 0 (default) means not set and negative values are rejected.
   * Supported on Android 13 and above. A nonComplianceDetail with API_LEVEL is reported if the
   * Android version is less than 13.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer mtuV4;

  /**
   * Optional. The MTU (Maximum Transmission Unit) size of the IPv6 mobile interface to which the
   * APN connected. A value of 0 (default) means not set and negative values are rejected. Supported
   * on Android 13 and above. A nonComplianceDetail with API_LEVEL is reported if the Android
   * version is less than 13.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer mtuV6;

  /**
   * Optional. MVNO match type for the APN.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mvnoType;

  /**
   * Optional. Radio technologies (network types) the APN may use. Policy will be rejected if this
   * field contains NETWORK_TYPE_UNSPECIFIED or duplicates.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> networkTypes;

  /**
   * Optional. The numeric operator ID of the APN. Numeric operator ID is defined as MCC (Mobile
   * Country Code) + MNC (Mobile Network Code).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String numericOperatorId;

  /**
   * Optional. APN password of the APN.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String password;

  /**
   * Optional. The protocol to use to connect to this APN.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String protocol;

  /**
   * Optional. The proxy address of the APN.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String proxyAddress;

  /**
   * Optional. The proxy port of the APN. A value of 0 (default) means not set and negative values
   * are rejected.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer proxyPort;

  /**
   * Optional. The protocol to use to connect to this APN while the device is roaming.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String roamingProtocol;

  /**
   * Optional. APN username of the APN.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String username;

  /**
   * Optional. Whether User Plane resources have to be activated during every transition from CM-
   * IDLE mode to CM-CONNECTED state for this APN. See 3GPP TS 23.501 section 5.6.13.
   * @return value or {@code null} for none
   */
  public java.lang.String getAlwaysOnSetting() {
    return alwaysOnSetting;
  }

  /**
   * Optional. Whether User Plane resources have to be activated during every transition from CM-
   * IDLE mode to CM-CONNECTED state for this APN. See 3GPP TS 23.501 section 5.6.13.
   * @param alwaysOnSetting alwaysOnSetting or {@code null} for none
   */
  public ApnSetting setAlwaysOnSetting(java.lang.String alwaysOnSetting) {
    this.alwaysOnSetting = alwaysOnSetting;
    return this;
  }

  /**
   * Required. Name of the APN. Policy will be rejected if this field is empty.
   * @return value or {@code null} for none
   */
  public java.lang.String getApn() {
    return apn;
  }

  /**
   * Required. Name of the APN. Policy will be rejected if this field is empty.
   * @param apn apn or {@code null} for none
   */
  public ApnSetting setApn(java.lang.String apn) {
    this.apn = apn;
    return this;
  }

  /**
   * Required. Usage categories for the APN. Policy will be rejected if this field is empty or
   * contains APN_TYPE_UNSPECIFIED or duplicates. Multiple APN types can be set on fully managed
   * devices. ENTERPRISE is the only allowed APN type on work profiles. A nonComplianceDetail with
   * MANAGEMENT_MODE is reported for any other value on work profiles. APN types that are not
   * supported on the device or management mode will be ignored. If this results in the empty list,
   * the APN setting will be ignored, because apnTypes is a required field. A nonComplianceDetail
   * with INVALID_VALUE is reported if none of the APN types are supported on the device or
   * management mode.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getApnTypes() {
    return apnTypes;
  }

  /**
   * Required. Usage categories for the APN. Policy will be rejected if this field is empty or
   * contains APN_TYPE_UNSPECIFIED or duplicates. Multiple APN types can be set on fully managed
   * devices. ENTERPRISE is the only allowed APN type on work profiles. A nonComplianceDetail with
   * MANAGEMENT_MODE is reported for any other value on work profiles. APN types that are not
   * supported on the device or management mode will be ignored. If this results in the empty list,
   * the APN setting will be ignored, because apnTypes is a required field. A nonComplianceDetail
   * with INVALID_VALUE is reported if none of the APN types are supported on the device or
   * management mode.
   * @param apnTypes apnTypes or {@code null} for none
   */
  public ApnSetting setApnTypes(java.util.List<java.lang.String> apnTypes) {
    this.apnTypes = apnTypes;
    return this;
  }

  /**
   * Optional. Authentication type of the APN.
   * @return value or {@code null} for none
   */
  public java.lang.String getAuthType() {
    return authType;
  }

  /**
   * Optional. Authentication type of the APN.
   * @param authType authType or {@code null} for none
   */
  public ApnSetting setAuthType(java.lang.String authType) {
    this.authType = authType;
    return this;
  }

  /**
   * Optional. Carrier ID for the APN. A value of 0 (default) means not set and negative values are
   * rejected.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCarrierId() {
    return carrierId;
  }

  /**
   * Optional. Carrier ID for the APN. A value of 0 (default) means not set and negative values are
   * rejected.
   * @param carrierId carrierId or {@code null} for none
   */
  public ApnSetting setCarrierId(java.lang.Integer carrierId) {
    this.carrierId = carrierId;
    return this;
  }

  /**
   * Required. Human-readable name that describes the APN. Policy will be rejected if this field is
   * empty.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Required. Human-readable name that describes the APN. Policy will be rejected if this field is
   * empty.
   * @param displayName displayName or {@code null} for none
   */
  public ApnSetting setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. MMS (Multimedia Messaging Service) proxy address of the APN which can be an IP
   * address or hostname (not a URL).
   * @return value or {@code null} for none
   */
  public java.lang.String getMmsProxyAddress() {
    return mmsProxyAddress;
  }

  /**
   * Optional. MMS (Multimedia Messaging Service) proxy address of the APN which can be an IP
   * address or hostname (not a URL).
   * @param mmsProxyAddress mmsProxyAddress or {@code null} for none
   */
  public ApnSetting setMmsProxyAddress(java.lang.String mmsProxyAddress) {
    this.mmsProxyAddress = mmsProxyAddress;
    return this;
  }

  /**
   * Optional. MMS (Multimedia Messaging Service) proxy port of the APN. A value of 0 (default)
   * means not set and negative values are rejected.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMmsProxyPort() {
    return mmsProxyPort;
  }

  /**
   * Optional. MMS (Multimedia Messaging Service) proxy port of the APN. A value of 0 (default)
   * means not set and negative values are rejected.
   * @param mmsProxyPort mmsProxyPort or {@code null} for none
   */
  public ApnSetting setMmsProxyPort(java.lang.Integer mmsProxyPort) {
    this.mmsProxyPort = mmsProxyPort;
    return this;
  }

  /**
   * Optional. MMSC (Multimedia Messaging Service Center) URI of the APN.
   * @return value or {@code null} for none
   */
  public java.lang.String getMmsc() {
    return mmsc;
  }

  /**
   * Optional. MMSC (Multimedia Messaging Service Center) URI of the APN.
   * @param mmsc mmsc or {@code null} for none
   */
  public ApnSetting setMmsc(java.lang.String mmsc) {
    this.mmsc = mmsc;
    return this;
  }

  /**
   * Optional. The default MTU (Maximum Transmission Unit) size in bytes of the IPv4 routes brought
   * up by this APN setting. A value of 0 (default) means not set and negative values are rejected.
   * Supported on Android 13 and above. A nonComplianceDetail with API_LEVEL is reported if the
   * Android version is less than 13.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMtuV4() {
    return mtuV4;
  }

  /**
   * Optional. The default MTU (Maximum Transmission Unit) size in bytes of the IPv4 routes brought
   * up by this APN setting. A value of 0 (default) means not set and negative values are rejected.
   * Supported on Android 13 and above. A nonComplianceDetail with API_LEVEL is reported if the
   * Android version is less than 13.
   * @param mtuV4 mtuV4 or {@code null} for none
   */
  public ApnSetting setMtuV4(java.lang.Integer mtuV4) {
    this.mtuV4 = mtuV4;
    return this;
  }

  /**
   * Optional. The MTU (Maximum Transmission Unit) size of the IPv6 mobile interface to which the
   * APN connected. A value of 0 (default) means not set and negative values are rejected. Supported
   * on Android 13 and above. A nonComplianceDetail with API_LEVEL is reported if the Android
   * version is less than 13.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMtuV6() {
    return mtuV6;
  }

  /**
   * Optional. The MTU (Maximum Transmission Unit) size of the IPv6 mobile interface to which the
   * APN connected. A value of 0 (default) means not set and negative values are rejected. Supported
   * on Android 13 and above. A nonComplianceDetail with API_LEVEL is reported if the Android
   * version is less than 13.
   * @param mtuV6 mtuV6 or {@code null} for none
   */
  public ApnSetting setMtuV6(java.lang.Integer mtuV6) {
    this.mtuV6 = mtuV6;
    return this;
  }

  /**
   * Optional. MVNO match type for the APN.
   * @return value or {@code null} for none
   */
  public java.lang.String getMvnoType() {
    return mvnoType;
  }

  /**
   * Optional. MVNO match type for the APN.
   * @param mvnoType mvnoType or {@code null} for none
   */
  public ApnSetting setMvnoType(java.lang.String mvnoType) {
    this.mvnoType = mvnoType;
    return this;
  }

  /**
   * Optional. Radio technologies (network types) the APN may use. Policy will be rejected if this
   * field contains NETWORK_TYPE_UNSPECIFIED or duplicates.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getNetworkTypes() {
    return networkTypes;
  }

  /**
   * Optional. Radio technologies (network types) the APN may use. Policy will be rejected if this
   * field contains NETWORK_TYPE_UNSPECIFIED or duplicates.
   * @param networkTypes networkTypes or {@code null} for none
   */
  public ApnSetting setNetworkTypes(java.util.List<java.lang.String> networkTypes) {
    this.networkTypes = networkTypes;
    return this;
  }

  /**
   * Optional. The numeric operator ID of the APN. Numeric operator ID is defined as MCC (Mobile
   * Country Code) + MNC (Mobile Network Code).
   * @return value or {@code null} for none
   */
  public java.lang.String getNumericOperatorId() {
    return numericOperatorId;
  }

  /**
   * Optional. The numeric operator ID of the APN. Numeric operator ID is defined as MCC (Mobile
   * Country Code) + MNC (Mobile Network Code).
   * @param numericOperatorId numericOperatorId or {@code null} for none
   */
  public ApnSetting setNumericOperatorId(java.lang.String numericOperatorId) {
    this.numericOperatorId = numericOperatorId;
    return this;
  }

  /**
   * Optional. APN password of the APN.
   * @return value or {@code null} for none
   */
  public java.lang.String getPassword() {
    return password;
  }

  /**
   * Optional. APN password of the APN.
   * @param password password or {@code null} for none
   */
  public ApnSetting setPassword(java.lang.String password) {
    this.password = password;
    return this;
  }

  /**
   * Optional. The protocol to use to connect to this APN.
   * @return value or {@code null} for none
   */
  public java.lang.String getProtocol() {
    return protocol;
  }

  /**
   * Optional. The protocol to use to connect to this APN.
   * @param protocol protocol or {@code null} for none
   */
  public ApnSetting setProtocol(java.lang.String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Optional. The proxy address of the APN.
   * @return value or {@code null} for none
   */
  public java.lang.String getProxyAddress() {
    return proxyAddress;
  }

  /**
   * Optional. The proxy address of the APN.
   * @param proxyAddress proxyAddress or {@code null} for none
   */
  public ApnSetting setProxyAddress(java.lang.String proxyAddress) {
    this.proxyAddress = proxyAddress;
    return this;
  }

  /**
   * Optional. The proxy port of the APN. A value of 0 (default) means not set and negative values
   * are rejected.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getProxyPort() {
    return proxyPort;
  }

  /**
   * Optional. The proxy port of the APN. A value of 0 (default) means not set and negative values
   * are rejected.
   * @param proxyPort proxyPort or {@code null} for none
   */
  public ApnSetting setProxyPort(java.lang.Integer proxyPort) {
    this.proxyPort = proxyPort;
    return this;
  }

  /**
   * Optional. The protocol to use to connect to this APN while the device is roaming.
   * @return value or {@code null} for none
   */
  public java.lang.String getRoamingProtocol() {
    return roamingProtocol;
  }

  /**
   * Optional. The protocol to use to connect to this APN while the device is roaming.
   * @param roamingProtocol roamingProtocol or {@code null} for none
   */
  public ApnSetting setRoamingProtocol(java.lang.String roamingProtocol) {
    this.roamingProtocol = roamingProtocol;
    return this;
  }

  /**
   * Optional. APN username of the APN.
   * @return value or {@code null} for none
   */
  public java.lang.String getUsername() {
    return username;
  }

  /**
   * Optional. APN username of the APN.
   * @param username username or {@code null} for none
   */
  public ApnSetting setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  @Override
  public ApnSetting set(String fieldName, Object value) {
    return (ApnSetting) super.set(fieldName, value);
  }

  @Override
  public ApnSetting clone() {
    return (ApnSetting) super.clone();
  }

}
