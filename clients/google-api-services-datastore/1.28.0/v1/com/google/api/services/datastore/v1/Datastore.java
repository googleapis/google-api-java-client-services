/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastore.v1;

/**
 * Service definition for Datastore (v1).
 *
 * <p>
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application.

 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/datastore/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link DatastoreRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Datastore extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Cloud Datastore API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://datastore.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Datastore(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Datastore(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Datastore datastore = new Datastore(...);}
   *   {@code Datastore.Projects.List request = datastore.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * Allocates IDs for the given keys, which is useful for referencing an entity before it is
     * inserted.
     *
     * Create a request for the method "projects.allocateIds".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link AllocateIds#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1.model.AllocateIdsRequest}
     * @return the request
     */
    public AllocateIds allocateIds(java.lang.String projectId, com.google.api.services.datastore.v1.model.AllocateIdsRequest content) throws java.io.IOException {
      AllocateIds result = new AllocateIds(projectId, content);
      initialize(result);
      return result;
    }

    public class AllocateIds extends DatastoreRequest<com.google.api.services.datastore.v1.model.AllocateIdsResponse> {

      private static final String REST_PATH = "v1/projects/{projectId}:allocateIds";

      /**
       * Allocates IDs for the given keys, which is useful for referencing an entity before it is
       * inserted.
       *
       * Create a request for the method "projects.allocateIds".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link AllocateIds#execute()} method to invoke the remote
       * operation. <p> {@link
       * AllocateIds#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1.model.AllocateIdsRequest}
       * @since 1.13
       */
      protected AllocateIds(java.lang.String projectId, com.google.api.services.datastore.v1.model.AllocateIdsRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1.model.AllocateIdsResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public AllocateIds set$Xgafv(java.lang.String $Xgafv) {
        return (AllocateIds) super.set$Xgafv($Xgafv);
      }

      @Override
      public AllocateIds setAccessToken(java.lang.String accessToken) {
        return (AllocateIds) super.setAccessToken(accessToken);
      }

      @Override
      public AllocateIds setAlt(java.lang.String alt) {
        return (AllocateIds) super.setAlt(alt);
      }

      @Override
      public AllocateIds setCallback(java.lang.String callback) {
        return (AllocateIds) super.setCallback(callback);
      }

      @Override
      public AllocateIds setFields(java.lang.String fields) {
        return (AllocateIds) super.setFields(fields);
      }

      @Override
      public AllocateIds setKey(java.lang.String key) {
        return (AllocateIds) super.setKey(key);
      }

      @Override
      public AllocateIds setOauthToken(java.lang.String oauthToken) {
        return (AllocateIds) super.setOauthToken(oauthToken);
      }

      @Override
      public AllocateIds setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AllocateIds) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AllocateIds setQuotaUser(java.lang.String quotaUser) {
        return (AllocateIds) super.setQuotaUser(quotaUser);
      }

      @Override
      public AllocateIds setUploadType(java.lang.String uploadType) {
        return (AllocateIds) super.setUploadType(uploadType);
      }

      @Override
      public AllocateIds setUploadProtocol(java.lang.String uploadProtocol) {
        return (AllocateIds) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public AllocateIds setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public AllocateIds set(String parameterName, Object value) {
        return (AllocateIds) super.set(parameterName, value);
      }
    }
    /**
     * Begins a new transaction.
     *
     * Create a request for the method "projects.beginTransaction".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link BeginTransaction#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1.model.BeginTransactionRequest}
     * @return the request
     */
    public BeginTransaction beginTransaction(java.lang.String projectId, com.google.api.services.datastore.v1.model.BeginTransactionRequest content) throws java.io.IOException {
      BeginTransaction result = new BeginTransaction(projectId, content);
      initialize(result);
      return result;
    }

    public class BeginTransaction extends DatastoreRequest<com.google.api.services.datastore.v1.model.BeginTransactionResponse> {

      private static final String REST_PATH = "v1/projects/{projectId}:beginTransaction";

      /**
       * Begins a new transaction.
       *
       * Create a request for the method "projects.beginTransaction".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link BeginTransaction#execute()} method to invoke the remote
       * operation. <p> {@link BeginTransaction#initialize(com.google.api.client.googleapis.services.Abs
       * tractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1.model.BeginTransactionRequest}
       * @since 1.13
       */
      protected BeginTransaction(java.lang.String projectId, com.google.api.services.datastore.v1.model.BeginTransactionRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1.model.BeginTransactionResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public BeginTransaction set$Xgafv(java.lang.String $Xgafv) {
        return (BeginTransaction) super.set$Xgafv($Xgafv);
      }

      @Override
      public BeginTransaction setAccessToken(java.lang.String accessToken) {
        return (BeginTransaction) super.setAccessToken(accessToken);
      }

      @Override
      public BeginTransaction setAlt(java.lang.String alt) {
        return (BeginTransaction) super.setAlt(alt);
      }

      @Override
      public BeginTransaction setCallback(java.lang.String callback) {
        return (BeginTransaction) super.setCallback(callback);
      }

      @Override
      public BeginTransaction setFields(java.lang.String fields) {
        return (BeginTransaction) super.setFields(fields);
      }

      @Override
      public BeginTransaction setKey(java.lang.String key) {
        return (BeginTransaction) super.setKey(key);
      }

      @Override
      public BeginTransaction setOauthToken(java.lang.String oauthToken) {
        return (BeginTransaction) super.setOauthToken(oauthToken);
      }

      @Override
      public BeginTransaction setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (BeginTransaction) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public BeginTransaction setQuotaUser(java.lang.String quotaUser) {
        return (BeginTransaction) super.setQuotaUser(quotaUser);
      }

      @Override
      public BeginTransaction setUploadType(java.lang.String uploadType) {
        return (BeginTransaction) super.setUploadType(uploadType);
      }

      @Override
      public BeginTransaction setUploadProtocol(java.lang.String uploadProtocol) {
        return (BeginTransaction) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public BeginTransaction setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public BeginTransaction set(String parameterName, Object value) {
        return (BeginTransaction) super.set(parameterName, value);
      }
    }
    /**
     * Commits a transaction, optionally creating, deleting or modifying some entities.
     *
     * Create a request for the method "projects.commit".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link Commit#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1.model.CommitRequest}
     * @return the request
     */
    public Commit commit(java.lang.String projectId, com.google.api.services.datastore.v1.model.CommitRequest content) throws java.io.IOException {
      Commit result = new Commit(projectId, content);
      initialize(result);
      return result;
    }

    public class Commit extends DatastoreRequest<com.google.api.services.datastore.v1.model.CommitResponse> {

      private static final String REST_PATH = "v1/projects/{projectId}:commit";

      /**
       * Commits a transaction, optionally creating, deleting or modifying some entities.
       *
       * Create a request for the method "projects.commit".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link Commit#execute()} method to invoke the remote operation.
       * <p> {@link
       * Commit#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1.model.CommitRequest}
       * @since 1.13
       */
      protected Commit(java.lang.String projectId, com.google.api.services.datastore.v1.model.CommitRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1.model.CommitResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public Commit set$Xgafv(java.lang.String $Xgafv) {
        return (Commit) super.set$Xgafv($Xgafv);
      }

      @Override
      public Commit setAccessToken(java.lang.String accessToken) {
        return (Commit) super.setAccessToken(accessToken);
      }

      @Override
      public Commit setAlt(java.lang.String alt) {
        return (Commit) super.setAlt(alt);
      }

      @Override
      public Commit setCallback(java.lang.String callback) {
        return (Commit) super.setCallback(callback);
      }

      @Override
      public Commit setFields(java.lang.String fields) {
        return (Commit) super.setFields(fields);
      }

      @Override
      public Commit setKey(java.lang.String key) {
        return (Commit) super.setKey(key);
      }

      @Override
      public Commit setOauthToken(java.lang.String oauthToken) {
        return (Commit) super.setOauthToken(oauthToken);
      }

      @Override
      public Commit setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Commit) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Commit setQuotaUser(java.lang.String quotaUser) {
        return (Commit) super.setQuotaUser(quotaUser);
      }

      @Override
      public Commit setUploadType(java.lang.String uploadType) {
        return (Commit) super.setUploadType(uploadType);
      }

      @Override
      public Commit setUploadProtocol(java.lang.String uploadProtocol) {
        return (Commit) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public Commit setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Commit set(String parameterName, Object value) {
        return (Commit) super.set(parameterName, value);
      }
    }
    /**
     * Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage
     * system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the
     * export. The export occurs in the background and its progress can be monitored and managed via the
     * Operation resource that is created. The output of an export may only be used once the associated
     * operation is done. If an export operation is cancelled before completion it may leave partial
     * data behind in Google Cloud Storage.
     *
     * Create a request for the method "projects.export".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link Export#execute()} method to invoke the remote operation.
     *
     * @param projectId Project ID against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1.model.GoogleDatastoreAdminV1ExportEntitiesRequest}
     * @return the request
     */
    public Export export(java.lang.String projectId, com.google.api.services.datastore.v1.model.GoogleDatastoreAdminV1ExportEntitiesRequest content) throws java.io.IOException {
      Export result = new Export(projectId, content);
      initialize(result);
      return result;
    }

    public class Export extends DatastoreRequest<com.google.api.services.datastore.v1.model.GoogleLongrunningOperation> {

      private static final String REST_PATH = "v1/projects/{projectId}:export";

      /**
       * Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage
       * system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the
       * export. The export occurs in the background and its progress can be monitored and managed via
       * the Operation resource that is created. The output of an export may only be used once the
       * associated operation is done. If an export operation is cancelled before completion it may
       * leave partial data behind in Google Cloud Storage.
       *
       * Create a request for the method "projects.export".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link Export#execute()} method to invoke the remote operation.
       * <p> {@link
       * Export#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId Project ID against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1.model.GoogleDatastoreAdminV1ExportEntitiesRequest}
       * @since 1.13
       */
      protected Export(java.lang.String projectId, com.google.api.services.datastore.v1.model.GoogleDatastoreAdminV1ExportEntitiesRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1.model.GoogleLongrunningOperation.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public Export set$Xgafv(java.lang.String $Xgafv) {
        return (Export) super.set$Xgafv($Xgafv);
      }

      @Override
      public Export setAccessToken(java.lang.String accessToken) {
        return (Export) super.setAccessToken(accessToken);
      }

      @Override
      public Export setAlt(java.lang.String alt) {
        return (Export) super.setAlt(alt);
      }

      @Override
      public Export setCallback(java.lang.String callback) {
        return (Export) super.setCallback(callback);
      }

      @Override
      public Export setFields(java.lang.String fields) {
        return (Export) super.setFields(fields);
      }

      @Override
      public Export setKey(java.lang.String key) {
        return (Export) super.setKey(key);
      }

      @Override
      public Export setOauthToken(java.lang.String oauthToken) {
        return (Export) super.setOauthToken(oauthToken);
      }

      @Override
      public Export setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Export) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Export setQuotaUser(java.lang.String quotaUser) {
        return (Export) super.setQuotaUser(quotaUser);
      }

      @Override
      public Export setUploadType(java.lang.String uploadType) {
        return (Export) super.setUploadType(uploadType);
      }

      @Override
      public Export setUploadProtocol(java.lang.String uploadProtocol) {
        return (Export) super.setUploadProtocol(uploadProtocol);
      }

      /** Project ID against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** Project ID against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** Project ID against which to make the request. */
      public Export setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Export set(String parameterName, Object value) {
        return (Export) super.set(parameterName, value);
      }
    }
    /**
     * Imports entities into Google Cloud Datastore. Existing entities with the same key are
     * overwritten. The import occurs in the background and its progress can be monitored and managed
     * via the Operation resource that is created. If an ImportEntities operation is cancelled, it is
     * possible that a subset of the data has already been imported to Cloud Datastore.
     *
     * Create a request for the method "projects.import".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link DatastoreImport#execute()} method to invoke the remote operation.
     *
     * @param projectId Project ID against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1.model.GoogleDatastoreAdminV1ImportEntitiesRequest}
     * @return the request
     */
    public DatastoreImport datastoreImport(java.lang.String projectId, com.google.api.services.datastore.v1.model.GoogleDatastoreAdminV1ImportEntitiesRequest content) throws java.io.IOException {
      DatastoreImport result = new DatastoreImport(projectId, content);
      initialize(result);
      return result;
    }

    public class DatastoreImport extends DatastoreRequest<com.google.api.services.datastore.v1.model.GoogleLongrunningOperation> {

      private static final String REST_PATH = "v1/projects/{projectId}:import";

      /**
       * Imports entities into Google Cloud Datastore. Existing entities with the same key are
       * overwritten. The import occurs in the background and its progress can be monitored and managed
       * via the Operation resource that is created. If an ImportEntities operation is cancelled, it is
       * possible that a subset of the data has already been imported to Cloud Datastore.
       *
       * Create a request for the method "projects.import".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link DatastoreImport#execute()} method to invoke the remote
       * operation. <p> {@link DatastoreImport#initialize(com.google.api.client.googleapis.services.Abst
       * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param projectId Project ID against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1.model.GoogleDatastoreAdminV1ImportEntitiesRequest}
       * @since 1.13
       */
      protected DatastoreImport(java.lang.String projectId, com.google.api.services.datastore.v1.model.GoogleDatastoreAdminV1ImportEntitiesRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1.model.GoogleLongrunningOperation.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public DatastoreImport set$Xgafv(java.lang.String $Xgafv) {
        return (DatastoreImport) super.set$Xgafv($Xgafv);
      }

      @Override
      public DatastoreImport setAccessToken(java.lang.String accessToken) {
        return (DatastoreImport) super.setAccessToken(accessToken);
      }

      @Override
      public DatastoreImport setAlt(java.lang.String alt) {
        return (DatastoreImport) super.setAlt(alt);
      }

      @Override
      public DatastoreImport setCallback(java.lang.String callback) {
        return (DatastoreImport) super.setCallback(callback);
      }

      @Override
      public DatastoreImport setFields(java.lang.String fields) {
        return (DatastoreImport) super.setFields(fields);
      }

      @Override
      public DatastoreImport setKey(java.lang.String key) {
        return (DatastoreImport) super.setKey(key);
      }

      @Override
      public DatastoreImport setOauthToken(java.lang.String oauthToken) {
        return (DatastoreImport) super.setOauthToken(oauthToken);
      }

      @Override
      public DatastoreImport setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (DatastoreImport) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public DatastoreImport setQuotaUser(java.lang.String quotaUser) {
        return (DatastoreImport) super.setQuotaUser(quotaUser);
      }

      @Override
      public DatastoreImport setUploadType(java.lang.String uploadType) {
        return (DatastoreImport) super.setUploadType(uploadType);
      }

      @Override
      public DatastoreImport setUploadProtocol(java.lang.String uploadProtocol) {
        return (DatastoreImport) super.setUploadProtocol(uploadProtocol);
      }

      /** Project ID against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** Project ID against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** Project ID against which to make the request. */
      public DatastoreImport setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public DatastoreImport set(String parameterName, Object value) {
        return (DatastoreImport) super.set(parameterName, value);
      }
    }
    /**
     * Looks up entities by key.
     *
     * Create a request for the method "projects.lookup".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link Lookup#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1.model.LookupRequest}
     * @return the request
     */
    public Lookup lookup(java.lang.String projectId, com.google.api.services.datastore.v1.model.LookupRequest content) throws java.io.IOException {
      Lookup result = new Lookup(projectId, content);
      initialize(result);
      return result;
    }

    public class Lookup extends DatastoreRequest<com.google.api.services.datastore.v1.model.LookupResponse> {

      private static final String REST_PATH = "v1/projects/{projectId}:lookup";

      /**
       * Looks up entities by key.
       *
       * Create a request for the method "projects.lookup".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link Lookup#execute()} method to invoke the remote operation.
       * <p> {@link
       * Lookup#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1.model.LookupRequest}
       * @since 1.13
       */
      protected Lookup(java.lang.String projectId, com.google.api.services.datastore.v1.model.LookupRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1.model.LookupResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public Lookup set$Xgafv(java.lang.String $Xgafv) {
        return (Lookup) super.set$Xgafv($Xgafv);
      }

      @Override
      public Lookup setAccessToken(java.lang.String accessToken) {
        return (Lookup) super.setAccessToken(accessToken);
      }

      @Override
      public Lookup setAlt(java.lang.String alt) {
        return (Lookup) super.setAlt(alt);
      }

      @Override
      public Lookup setCallback(java.lang.String callback) {
        return (Lookup) super.setCallback(callback);
      }

      @Override
      public Lookup setFields(java.lang.String fields) {
        return (Lookup) super.setFields(fields);
      }

      @Override
      public Lookup setKey(java.lang.String key) {
        return (Lookup) super.setKey(key);
      }

      @Override
      public Lookup setOauthToken(java.lang.String oauthToken) {
        return (Lookup) super.setOauthToken(oauthToken);
      }

      @Override
      public Lookup setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Lookup) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Lookup setQuotaUser(java.lang.String quotaUser) {
        return (Lookup) super.setQuotaUser(quotaUser);
      }

      @Override
      public Lookup setUploadType(java.lang.String uploadType) {
        return (Lookup) super.setUploadType(uploadType);
      }

      @Override
      public Lookup setUploadProtocol(java.lang.String uploadProtocol) {
        return (Lookup) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public Lookup setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Lookup set(String parameterName, Object value) {
        return (Lookup) super.set(parameterName, value);
      }
    }
    /**
     * Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.
     *
     * Create a request for the method "projects.reserveIds".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link ReserveIds#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1.model.ReserveIdsRequest}
     * @return the request
     */
    public ReserveIds reserveIds(java.lang.String projectId, com.google.api.services.datastore.v1.model.ReserveIdsRequest content) throws java.io.IOException {
      ReserveIds result = new ReserveIds(projectId, content);
      initialize(result);
      return result;
    }

    public class ReserveIds extends DatastoreRequest<com.google.api.services.datastore.v1.model.ReserveIdsResponse> {

      private static final String REST_PATH = "v1/projects/{projectId}:reserveIds";

      /**
       * Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.
       *
       * Create a request for the method "projects.reserveIds".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link ReserveIds#execute()} method to invoke the remote
       * operation. <p> {@link
       * ReserveIds#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1.model.ReserveIdsRequest}
       * @since 1.13
       */
      protected ReserveIds(java.lang.String projectId, com.google.api.services.datastore.v1.model.ReserveIdsRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1.model.ReserveIdsResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public ReserveIds set$Xgafv(java.lang.String $Xgafv) {
        return (ReserveIds) super.set$Xgafv($Xgafv);
      }

      @Override
      public ReserveIds setAccessToken(java.lang.String accessToken) {
        return (ReserveIds) super.setAccessToken(accessToken);
      }

      @Override
      public ReserveIds setAlt(java.lang.String alt) {
        return (ReserveIds) super.setAlt(alt);
      }

      @Override
      public ReserveIds setCallback(java.lang.String callback) {
        return (ReserveIds) super.setCallback(callback);
      }

      @Override
      public ReserveIds setFields(java.lang.String fields) {
        return (ReserveIds) super.setFields(fields);
      }

      @Override
      public ReserveIds setKey(java.lang.String key) {
        return (ReserveIds) super.setKey(key);
      }

      @Override
      public ReserveIds setOauthToken(java.lang.String oauthToken) {
        return (ReserveIds) super.setOauthToken(oauthToken);
      }

      @Override
      public ReserveIds setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ReserveIds) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ReserveIds setQuotaUser(java.lang.String quotaUser) {
        return (ReserveIds) super.setQuotaUser(quotaUser);
      }

      @Override
      public ReserveIds setUploadType(java.lang.String uploadType) {
        return (ReserveIds) super.setUploadType(uploadType);
      }

      @Override
      public ReserveIds setUploadProtocol(java.lang.String uploadProtocol) {
        return (ReserveIds) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public ReserveIds setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public ReserveIds set(String parameterName, Object value) {
        return (ReserveIds) super.set(parameterName, value);
      }
    }
    /**
     * Rolls back a transaction.
     *
     * Create a request for the method "projects.rollback".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link Rollback#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1.model.RollbackRequest}
     * @return the request
     */
    public Rollback rollback(java.lang.String projectId, com.google.api.services.datastore.v1.model.RollbackRequest content) throws java.io.IOException {
      Rollback result = new Rollback(projectId, content);
      initialize(result);
      return result;
    }

    public class Rollback extends DatastoreRequest<com.google.api.services.datastore.v1.model.RollbackResponse> {

      private static final String REST_PATH = "v1/projects/{projectId}:rollback";

      /**
       * Rolls back a transaction.
       *
       * Create a request for the method "projects.rollback".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link Rollback#execute()} method to invoke the remote operation.
       * <p> {@link
       * Rollback#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1.model.RollbackRequest}
       * @since 1.13
       */
      protected Rollback(java.lang.String projectId, com.google.api.services.datastore.v1.model.RollbackRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1.model.RollbackResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public Rollback set$Xgafv(java.lang.String $Xgafv) {
        return (Rollback) super.set$Xgafv($Xgafv);
      }

      @Override
      public Rollback setAccessToken(java.lang.String accessToken) {
        return (Rollback) super.setAccessToken(accessToken);
      }

      @Override
      public Rollback setAlt(java.lang.String alt) {
        return (Rollback) super.setAlt(alt);
      }

      @Override
      public Rollback setCallback(java.lang.String callback) {
        return (Rollback) super.setCallback(callback);
      }

      @Override
      public Rollback setFields(java.lang.String fields) {
        return (Rollback) super.setFields(fields);
      }

      @Override
      public Rollback setKey(java.lang.String key) {
        return (Rollback) super.setKey(key);
      }

      @Override
      public Rollback setOauthToken(java.lang.String oauthToken) {
        return (Rollback) super.setOauthToken(oauthToken);
      }

      @Override
      public Rollback setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Rollback) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Rollback setQuotaUser(java.lang.String quotaUser) {
        return (Rollback) super.setQuotaUser(quotaUser);
      }

      @Override
      public Rollback setUploadType(java.lang.String uploadType) {
        return (Rollback) super.setUploadType(uploadType);
      }

      @Override
      public Rollback setUploadProtocol(java.lang.String uploadProtocol) {
        return (Rollback) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public Rollback setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Rollback set(String parameterName, Object value) {
        return (Rollback) super.set(parameterName, value);
      }
    }
    /**
     * Queries for entities.
     *
     * Create a request for the method "projects.runQuery".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link RunQuery#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1.model.RunQueryRequest}
     * @return the request
     */
    public RunQuery runQuery(java.lang.String projectId, com.google.api.services.datastore.v1.model.RunQueryRequest content) throws java.io.IOException {
      RunQuery result = new RunQuery(projectId, content);
      initialize(result);
      return result;
    }

    public class RunQuery extends DatastoreRequest<com.google.api.services.datastore.v1.model.RunQueryResponse> {

      private static final String REST_PATH = "v1/projects/{projectId}:runQuery";

      /**
       * Queries for entities.
       *
       * Create a request for the method "projects.runQuery".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link RunQuery#execute()} method to invoke the remote operation.
       * <p> {@link
       * RunQuery#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1.model.RunQueryRequest}
       * @since 1.13
       */
      protected RunQuery(java.lang.String projectId, com.google.api.services.datastore.v1.model.RunQueryRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1.model.RunQueryResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public RunQuery set$Xgafv(java.lang.String $Xgafv) {
        return (RunQuery) super.set$Xgafv($Xgafv);
      }

      @Override
      public RunQuery setAccessToken(java.lang.String accessToken) {
        return (RunQuery) super.setAccessToken(accessToken);
      }

      @Override
      public RunQuery setAlt(java.lang.String alt) {
        return (RunQuery) super.setAlt(alt);
      }

      @Override
      public RunQuery setCallback(java.lang.String callback) {
        return (RunQuery) super.setCallback(callback);
      }

      @Override
      public RunQuery setFields(java.lang.String fields) {
        return (RunQuery) super.setFields(fields);
      }

      @Override
      public RunQuery setKey(java.lang.String key) {
        return (RunQuery) super.setKey(key);
      }

      @Override
      public RunQuery setOauthToken(java.lang.String oauthToken) {
        return (RunQuery) super.setOauthToken(oauthToken);
      }

      @Override
      public RunQuery setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RunQuery) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RunQuery setQuotaUser(java.lang.String quotaUser) {
        return (RunQuery) super.setQuotaUser(quotaUser);
      }

      @Override
      public RunQuery setUploadType(java.lang.String uploadType) {
        return (RunQuery) super.setUploadType(uploadType);
      }

      @Override
      public RunQuery setUploadProtocol(java.lang.String uploadProtocol) {
        return (RunQuery) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public RunQuery setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public RunQuery set(String parameterName, Object value) {
        return (RunQuery) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Indexes collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Datastore datastore = new Datastore(...);}
     *   {@code Datastore.Indexes.List request = datastore.indexes().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Indexes indexes() {
      return new Indexes();
    }

    /**
     * The "indexes" collection of methods.
     */
    public class Indexes {

      /**
       * Gets an index.
       *
       * Create a request for the method "indexes.get".
       *
       * This request holds the parameters needed by the datastore server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param projectId Project ID against which to make the request.
       * @param indexId The resource ID of the index to get.
       * @return the request
       */
      public Get get(java.lang.String projectId, java.lang.String indexId) throws java.io.IOException {
        Get result = new Get(projectId, indexId);
        initialize(result);
        return result;
      }

      public class Get extends DatastoreRequest<com.google.api.services.datastore.v1.model.GoogleDatastoreAdminV1Index> {

        private static final String REST_PATH = "v1/projects/{projectId}/indexes/{indexId}";

        /**
         * Gets an index.
         *
         * Create a request for the method "indexes.get".
         *
         * This request holds the parameters needed by the the datastore server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param projectId Project ID against which to make the request.
         * @param indexId The resource ID of the index to get.
         * @since 1.13
         */
        protected Get(java.lang.String projectId, java.lang.String indexId) {
          super(Datastore.this, "GET", REST_PATH, null, com.google.api.services.datastore.v1.model.GoogleDatastoreAdminV1Index.class);
          this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
          this.indexId = com.google.api.client.util.Preconditions.checkNotNull(indexId, "Required parameter indexId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Project ID against which to make the request. */
        @com.google.api.client.util.Key
        private java.lang.String projectId;

        /** Project ID against which to make the request.
         */
        public java.lang.String getProjectId() {
          return projectId;
        }

        /** Project ID against which to make the request. */
        public Get setProjectId(java.lang.String projectId) {
          this.projectId = projectId;
          return this;
        }

        /** The resource ID of the index to get. */
        @com.google.api.client.util.Key
        private java.lang.String indexId;

        /** The resource ID of the index to get.
         */
        public java.lang.String getIndexId() {
          return indexId;
        }

        /** The resource ID of the index to get. */
        public Get setIndexId(java.lang.String indexId) {
          this.indexId = indexId;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists the indexes that match the specified filters.  Datastore uses an eventually consistent
       * query to fetch the list of indexes and may occasionally return stale results.
       *
       * Create a request for the method "indexes.list".
       *
       * This request holds the parameters needed by the datastore server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param projectId Project ID against which to make the request.
       * @return the request
       */
      public List list(java.lang.String projectId) throws java.io.IOException {
        List result = new List(projectId);
        initialize(result);
        return result;
      }

      public class List extends DatastoreRequest<com.google.api.services.datastore.v1.model.GoogleDatastoreAdminV1ListIndexesResponse> {

        private static final String REST_PATH = "v1/projects/{projectId}/indexes";

        /**
         * Lists the indexes that match the specified filters.  Datastore uses an eventually consistent
         * query to fetch the list of indexes and may occasionally return stale results.
         *
         * Create a request for the method "indexes.list".
         *
         * This request holds the parameters needed by the the datastore server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param projectId Project ID against which to make the request.
         * @since 1.13
         */
        protected List(java.lang.String projectId) {
          super(Datastore.this, "GET", REST_PATH, null, com.google.api.services.datastore.v1.model.GoogleDatastoreAdminV1ListIndexesResponse.class);
          this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** Project ID against which to make the request. */
        @com.google.api.client.util.Key
        private java.lang.String projectId;

        /** Project ID against which to make the request.
         */
        public java.lang.String getProjectId() {
          return projectId;
        }

        /** Project ID against which to make the request. */
        public List setProjectId(java.lang.String projectId) {
          this.projectId = projectId;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.String filter;

        /**

         */
        public java.lang.String getFilter() {
          return filter;
        }

        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /**
         * The maximum number of items to return.  If zero, then all results will be returned.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of items to return.  If zero, then all results will be returned.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * The maximum number of items to return.  If zero, then all results will be returned.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** The next_page_token value returned from a previous List request, if any. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** The next_page_token value returned from a previous List request, if any.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** The next_page_token value returned from a previous List request, if any. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Operations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Datastore datastore = new Datastore(...);}
     *   {@code Datastore.Operations.List request = datastore.operations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Operations operations() {
      return new Operations();
    }

    /**
     * The "operations" collection of methods.
     */
    public class Operations {

      /**
       * Starts asynchronous cancellation on a long-running operation.  The server makes a best effort to
       * cancel the operation, but success is not guaranteed.  If the server doesn't support this method,
       * it returns `google.rpc.Code.UNIMPLEMENTED`.  Clients can use Operations.GetOperation or other
       * methods to check whether the cancellation succeeded or whether the operation completed despite
       * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
       * operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to
       * `Code.CANCELLED`.
       *
       * Create a request for the method "operations.cancel".
       *
       * This request holds the parameters needed by the datastore server.  After setting any optional
       * parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
       *
       * @param name The name of the operation resource to be cancelled.
       * @return the request
       */
      public Cancel cancel(java.lang.String name) throws java.io.IOException {
        Cancel result = new Cancel(name);
        initialize(result);
        return result;
      }

      public class Cancel extends DatastoreRequest<com.google.api.services.datastore.v1.model.Empty> {

        private static final String REST_PATH = "v1/{+name}:cancel";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/operations/[^/]+$");

        /**
         * Starts asynchronous cancellation on a long-running operation.  The server makes a best effort
         * to cancel the operation, but success is not guaranteed.  If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`.  Clients can use Operations.GetOperation or
         * other methods to check whether the cancellation succeeded or whether the operation completed
         * despite cancellation. On successful cancellation, the operation is not deleted; instead, it
         * becomes an operation with an Operation.error value with a google.rpc.Status.code of 1,
         * corresponding to `Code.CANCELLED`.
         *
         * Create a request for the method "operations.cancel".
         *
         * This request holds the parameters needed by the the datastore server.  After setting any
         * optional parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
         * <p> {@link
         * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the operation resource to be cancelled.
         * @since 1.13
         */
        protected Cancel(java.lang.String name) {
          super(Datastore.this, "POST", REST_PATH, null, com.google.api.services.datastore.v1.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/operations/[^/]+$");
          }
        }

        @Override
        public Cancel set$Xgafv(java.lang.String $Xgafv) {
          return (Cancel) super.set$Xgafv($Xgafv);
        }

        @Override
        public Cancel setAccessToken(java.lang.String accessToken) {
          return (Cancel) super.setAccessToken(accessToken);
        }

        @Override
        public Cancel setAlt(java.lang.String alt) {
          return (Cancel) super.setAlt(alt);
        }

        @Override
        public Cancel setCallback(java.lang.String callback) {
          return (Cancel) super.setCallback(callback);
        }

        @Override
        public Cancel setFields(java.lang.String fields) {
          return (Cancel) super.setFields(fields);
        }

        @Override
        public Cancel setKey(java.lang.String key) {
          return (Cancel) super.setKey(key);
        }

        @Override
        public Cancel setOauthToken(java.lang.String oauthToken) {
          return (Cancel) super.setOauthToken(oauthToken);
        }

        @Override
        public Cancel setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Cancel) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Cancel setQuotaUser(java.lang.String quotaUser) {
          return (Cancel) super.setQuotaUser(quotaUser);
        }

        @Override
        public Cancel setUploadType(java.lang.String uploadType) {
          return (Cancel) super.setUploadType(uploadType);
        }

        @Override
        public Cancel setUploadProtocol(java.lang.String uploadProtocol) {
          return (Cancel) super.setUploadProtocol(uploadProtocol);
        }

        /** The name of the operation resource to be cancelled. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the operation resource to be cancelled.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The name of the operation resource to be cancelled. */
        public Cancel setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/operations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Cancel set(String parameterName, Object value) {
          return (Cancel) super.set(parameterName, value);
        }
      }
      /**
       * Deletes a long-running operation. This method indicates that the client is no longer interested
       * in the operation result. It does not cancel the operation. If the server doesn't support this
       * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
       *
       * Create a request for the method "operations.delete".
       *
       * This request holds the parameters needed by the datastore server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name The name of the operation resource to be deleted.
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends DatastoreRequest<com.google.api.services.datastore.v1.model.Empty> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/operations/[^/]+$");

        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested
         * in the operation result. It does not cancel the operation. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.delete".
         *
         * This request holds the parameters needed by the the datastore server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the operation resource to be deleted.
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(Datastore.this, "DELETE", REST_PATH, null, com.google.api.services.datastore.v1.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/operations/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /** The name of the operation resource to be deleted. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the operation resource to be deleted.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The name of the operation resource to be deleted. */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/operations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Gets the latest state of a long-running operation.  Clients can use this method to poll the
       * operation result at intervals as recommended by the API service.
       *
       * Create a request for the method "operations.get".
       *
       * This request holds the parameters needed by the datastore server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name The name of the operation resource.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends DatastoreRequest<com.google.api.services.datastore.v1.model.GoogleLongrunningOperation> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/operations/[^/]+$");

        /**
         * Gets the latest state of a long-running operation.  Clients can use this method to poll the
         * operation result at intervals as recommended by the API service.
         *
         * Create a request for the method "operations.get".
         *
         * This request holds the parameters needed by the the datastore server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the operation resource.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(Datastore.this, "GET", REST_PATH, null, com.google.api.services.datastore.v1.model.GoogleLongrunningOperation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/operations/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** The name of the operation resource. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the operation resource.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The name of the operation resource. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/operations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists operations that match the specified filter in the request. If the server doesn't support
       * this method, it returns `UNIMPLEMENTED`.
       *
       * NOTE: the `name` binding allows API services to override the binding to use different resource
       * name schemes, such as `users/operations`. To override the binding, API services can add a binding
       * such as `"/v1/{name=users}/operations"` to their service configuration. For backwards
       * compatibility, the default name includes the operations collection id, however overriding users
       * must ensure the name binding is the parent resource, without the operations collection id.
       *
       * Create a request for the method "operations.list".
       *
       * This request holds the parameters needed by the datastore server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param name The name of the operation's parent resource.
       * @return the request
       */
      public List list(java.lang.String name) throws java.io.IOException {
        List result = new List(name);
        initialize(result);
        return result;
      }

      public class List extends DatastoreRequest<com.google.api.services.datastore.v1.model.GoogleLongrunningListOperationsResponse> {

        private static final String REST_PATH = "v1/{+name}/operations";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support
         * this method, it returns `UNIMPLEMENTED`.
         *
         * NOTE: the `name` binding allows API services to override the binding to use different resource
         * name schemes, such as `users/operations`. To override the binding, API services can add a
         * binding such as `"/v1/{name=users}/operations"` to their service configuration. For backwards
         * compatibility, the default name includes the operations collection id, however overriding users
         * must ensure the name binding is the parent resource, without the operations collection id.
         *
         * Create a request for the method "operations.list".
         *
         * This request holds the parameters needed by the the datastore server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the operation's parent resource.
         * @since 1.13
         */
        protected List(java.lang.String name) {
          super(Datastore.this, "GET", REST_PATH, null, com.google.api.services.datastore.v1.model.GoogleLongrunningListOperationsResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** The name of the operation's parent resource. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the operation's parent resource.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The name of the operation's parent resource. */
        public List setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** The standard list filter. */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** The standard list filter.
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /** The standard list filter. */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** The standard list page size. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The standard list page size.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The standard list page size. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** The standard list page token. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** The standard list page token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** The standard list page token. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link Datastore}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Datastore}. */
    @Override
    public Datastore build() {
      return new Datastore(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link DatastoreRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setDatastoreRequestInitializer(
        DatastoreRequestInitializer datastoreRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(datastoreRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
