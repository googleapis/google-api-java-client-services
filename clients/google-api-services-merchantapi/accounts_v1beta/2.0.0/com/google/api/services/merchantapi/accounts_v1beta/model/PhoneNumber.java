/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.merchantapi.accounts_v1beta.model;

/**
 * An object representing a phone number, suitable as an API wire format. This representation: -
 * should not be used for locale-specific formatting of a phone number, such as "+1 (650) 253-0000
 * ext. 123" - is not designed for efficient storage - may not be suitable for dialing - specialized
 * libraries (see references) should be used to parse the number for that purpose To do something
 * meaningful with this number, such as format it for various use-cases, convert it to an
 * `i18n.phonenumbers.PhoneNumber` object first. For instance, in Java this would be:
 * com.google.type.PhoneNumber wireProto = com.google.type.PhoneNumber.newBuilder().build();
 * com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber =
 * PhoneNumberUtil.getInstance().parse(wireProto.getE164Number(), "ZZ"); if
 * (!wireProto.getExtension().isEmpty()) { phoneNumber.setExtension(wireProto.getExtension()); }
 * Reference(s): - https://github.com/google/libphonenumber
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Merchant API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PhoneNumber extends com.google.api.client.json.GenericJson {

  /**
   * The phone number, represented as a leading plus sign ('+'), followed by a phone number that
   * uses a relaxed ITU E.164 format consisting of the country calling code (1 to 3 digits) and the
   * subscriber number, with no additional spaces or formatting. For example: - correct:
   * "+15552220123" - incorrect: "+1 (555) 222-01234 x123". The ITU E.164 format limits the latter
   * to 12 digits, but in practice not all countries respect that, so we relax that restriction
   * here. National-only numbers are not allowed. References: -
   * https://www.itu.int/rec/T-REC-E.164-201011-I - https://en.wikipedia.org/wiki/E.164. -
   * https://en.wikipedia.org/wiki/List_of_country_calling_codes
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String e164Number;

  /**
   * The phone number's extension. The extension is not standardized in ITU recommendations, except
   * for being defined as a series of numbers with a maximum length of 40 digits. Other than digits,
   * some other dialing characters such as ',' (indicating a wait) or '#' may be stored here. Note
   * that no regions currently use extensions with short codes, so this field is normally only set
   * in conjunction with an E.164 number. It is held separately from the E.164 number to allow for
   * short code extensions in the future.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String extension;

  /**
   * A short code. Reference(s): - https://en.wikipedia.org/wiki/Short_code
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ShortCode shortCode;

  /**
   * The phone number, represented as a leading plus sign ('+'), followed by a phone number that
   * uses a relaxed ITU E.164 format consisting of the country calling code (1 to 3 digits) and the
   * subscriber number, with no additional spaces or formatting. For example: - correct:
   * "+15552220123" - incorrect: "+1 (555) 222-01234 x123". The ITU E.164 format limits the latter
   * to 12 digits, but in practice not all countries respect that, so we relax that restriction
   * here. National-only numbers are not allowed. References: -
   * https://www.itu.int/rec/T-REC-E.164-201011-I - https://en.wikipedia.org/wiki/E.164. -
   * https://en.wikipedia.org/wiki/List_of_country_calling_codes
   * @return value or {@code null} for none
   */
  public java.lang.String getE164Number() {
    return e164Number;
  }

  /**
   * The phone number, represented as a leading plus sign ('+'), followed by a phone number that
   * uses a relaxed ITU E.164 format consisting of the country calling code (1 to 3 digits) and the
   * subscriber number, with no additional spaces or formatting. For example: - correct:
   * "+15552220123" - incorrect: "+1 (555) 222-01234 x123". The ITU E.164 format limits the latter
   * to 12 digits, but in practice not all countries respect that, so we relax that restriction
   * here. National-only numbers are not allowed. References: -
   * https://www.itu.int/rec/T-REC-E.164-201011-I - https://en.wikipedia.org/wiki/E.164. -
   * https://en.wikipedia.org/wiki/List_of_country_calling_codes
   * @param e164Number e164Number or {@code null} for none
   */
  public PhoneNumber setE164Number(java.lang.String e164Number) {
    this.e164Number = e164Number;
    return this;
  }

  /**
   * The phone number's extension. The extension is not standardized in ITU recommendations, except
   * for being defined as a series of numbers with a maximum length of 40 digits. Other than digits,
   * some other dialing characters such as ',' (indicating a wait) or '#' may be stored here. Note
   * that no regions currently use extensions with short codes, so this field is normally only set
   * in conjunction with an E.164 number. It is held separately from the E.164 number to allow for
   * short code extensions in the future.
   * @return value or {@code null} for none
   */
  public java.lang.String getExtension() {
    return extension;
  }

  /**
   * The phone number's extension. The extension is not standardized in ITU recommendations, except
   * for being defined as a series of numbers with a maximum length of 40 digits. Other than digits,
   * some other dialing characters such as ',' (indicating a wait) or '#' may be stored here. Note
   * that no regions currently use extensions with short codes, so this field is normally only set
   * in conjunction with an E.164 number. It is held separately from the E.164 number to allow for
   * short code extensions in the future.
   * @param extension extension or {@code null} for none
   */
  public PhoneNumber setExtension(java.lang.String extension) {
    this.extension = extension;
    return this;
  }

  /**
   * A short code. Reference(s): - https://en.wikipedia.org/wiki/Short_code
   * @return value or {@code null} for none
   */
  public ShortCode getShortCode() {
    return shortCode;
  }

  /**
   * A short code. Reference(s): - https://en.wikipedia.org/wiki/Short_code
   * @param shortCode shortCode or {@code null} for none
   */
  public PhoneNumber setShortCode(ShortCode shortCode) {
    this.shortCode = shortCode;
    return this;
  }

  @Override
  public PhoneNumber set(String fieldName, Object value) {
    return (PhoneNumber) super.set(fieldName, value);
  }

  @Override
  public PhoneNumber clone() {
    return (PhoneNumber) super.clone();
  }

}
