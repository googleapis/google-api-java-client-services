/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.speech.v1p1beta1.model;

/**
 * Model definition for SpeakerDiarizationConfig.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Speech-to-Text API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SpeakerDiarizationConfig extends com.google.api.client.json.GenericJson {

  /**
   * *Optional* If 'true', enables speaker detection for each recognized word in the top alternative
   * of the recognition result using a speaker_tag provided in the WordInfo.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean enableSpeakerDiarization;

  /**
   * *Optional* Only used if diarization_speaker_count is not set. Maximum number of speakers in the
   * conversation. This range gives you more flexibility by allowing the system to automatically
   * determine the correct number of speakers. If not set, the default value is 6.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxSpeakerCount;

  /**
   * *Optional* Only used if diarization_speaker_count is not set. Minimum number of speakers in the
   * conversation. This range gives you more flexibility by allowing the system to automatically
   * determine the correct number of speakers. If not set, the default value is 2.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minSpeakerCount;

  /**
   * *Optional* If 'true', enables speaker detection for each recognized word in the top alternative
   * of the recognition result using a speaker_tag provided in the WordInfo.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEnableSpeakerDiarization() {
    return enableSpeakerDiarization;
  }

  /**
   * *Optional* If 'true', enables speaker detection for each recognized word in the top alternative
   * of the recognition result using a speaker_tag provided in the WordInfo.
   * @param enableSpeakerDiarization enableSpeakerDiarization or {@code null} for none
   */
  public SpeakerDiarizationConfig setEnableSpeakerDiarization(java.lang.Boolean enableSpeakerDiarization) {
    this.enableSpeakerDiarization = enableSpeakerDiarization;
    return this;
  }

  /**
   * *Optional* Only used if diarization_speaker_count is not set. Maximum number of speakers in the
   * conversation. This range gives you more flexibility by allowing the system to automatically
   * determine the correct number of speakers. If not set, the default value is 6.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxSpeakerCount() {
    return maxSpeakerCount;
  }

  /**
   * *Optional* Only used if diarization_speaker_count is not set. Maximum number of speakers in the
   * conversation. This range gives you more flexibility by allowing the system to automatically
   * determine the correct number of speakers. If not set, the default value is 6.
   * @param maxSpeakerCount maxSpeakerCount or {@code null} for none
   */
  public SpeakerDiarizationConfig setMaxSpeakerCount(java.lang.Integer maxSpeakerCount) {
    this.maxSpeakerCount = maxSpeakerCount;
    return this;
  }

  /**
   * *Optional* Only used if diarization_speaker_count is not set. Minimum number of speakers in the
   * conversation. This range gives you more flexibility by allowing the system to automatically
   * determine the correct number of speakers. If not set, the default value is 2.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinSpeakerCount() {
    return minSpeakerCount;
  }

  /**
   * *Optional* Only used if diarization_speaker_count is not set. Minimum number of speakers in the
   * conversation. This range gives you more flexibility by allowing the system to automatically
   * determine the correct number of speakers. If not set, the default value is 2.
   * @param minSpeakerCount minSpeakerCount or {@code null} for none
   */
  public SpeakerDiarizationConfig setMinSpeakerCount(java.lang.Integer minSpeakerCount) {
    this.minSpeakerCount = minSpeakerCount;
    return this;
  }

  @Override
  public SpeakerDiarizationConfig set(String fieldName, Object value) {
    return (SpeakerDiarizationConfig) super.set(fieldName, value);
  }

  @Override
  public SpeakerDiarizationConfig clone() {
    return (SpeakerDiarizationConfig) super.clone();
  }

}
