/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * An ExceptionalHoursProto holds information about exceptional (non-regular) hours for a business,
 * such as holiday hours.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreExceptionalHoursProto extends com.google.api.client.json.GenericJson {

  /**
   * The weekly schedule to be applied for the dates that fall within the range. The schedule may
   * contain hours only for days of the week that occur during the date range specified in the range
   * field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreBusinessHoursProto hours;

  /**
   * Field-level metadata for this exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFieldMetadataProto metadata;

  /**
   * The dates for which this exception applies, expressed as a half open interval. For example, an
   * exception that applies for the entire month of December 2015 should have a range December 1,
   * 2015 to January 1, 2016. Any regular hours that start on days in this range are ignored and
   * replaced by the exceptional hours for that day. The TimeIntervalProto for the range must be a
   * fully specified, non-empty, and non-inverted range of dates. Concretely, the requirements are:
   * * the range must be a TYPE_RANGE interval * the interval may not be inverted * the endpoints of
   * the interval must specify a year, month, and day * the day_type of each endpoint must be type
   * DAY_OF_MONTH * the endpoints may not specify hour, minute, second, week, or week_type * the
   * begin endpoint must predate the end endpoint
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreTimeIntervalProto range;

  /**
   * The weekly schedule to be applied for the dates that fall within the range. The schedule may
   * contain hours only for days of the week that occur during the date range specified in the range
   * field.
   * @return value or {@code null} for none
   */
  public GeostoreBusinessHoursProto getHours() {
    return hours;
  }

  /**
   * The weekly schedule to be applied for the dates that fall within the range. The schedule may
   * contain hours only for days of the week that occur during the date range specified in the range
   * field.
   * @param hours hours or {@code null} for none
   */
  public GeostoreExceptionalHoursProto setHours(GeostoreBusinessHoursProto hours) {
    this.hours = hours;
    return this;
  }

  /**
   * Field-level metadata for this exception.
   * @return value or {@code null} for none
   */
  public GeostoreFieldMetadataProto getMetadata() {
    return metadata;
  }

  /**
   * Field-level metadata for this exception.
   * @param metadata metadata or {@code null} for none
   */
  public GeostoreExceptionalHoursProto setMetadata(GeostoreFieldMetadataProto metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The dates for which this exception applies, expressed as a half open interval. For example, an
   * exception that applies for the entire month of December 2015 should have a range December 1,
   * 2015 to January 1, 2016. Any regular hours that start on days in this range are ignored and
   * replaced by the exceptional hours for that day. The TimeIntervalProto for the range must be a
   * fully specified, non-empty, and non-inverted range of dates. Concretely, the requirements are:
   * * the range must be a TYPE_RANGE interval * the interval may not be inverted * the endpoints of
   * the interval must specify a year, month, and day * the day_type of each endpoint must be type
   * DAY_OF_MONTH * the endpoints may not specify hour, minute, second, week, or week_type * the
   * begin endpoint must predate the end endpoint
   * @return value or {@code null} for none
   */
  public GeostoreTimeIntervalProto getRange() {
    return range;
  }

  /**
   * The dates for which this exception applies, expressed as a half open interval. For example, an
   * exception that applies for the entire month of December 2015 should have a range December 1,
   * 2015 to January 1, 2016. Any regular hours that start on days in this range are ignored and
   * replaced by the exceptional hours for that day. The TimeIntervalProto for the range must be a
   * fully specified, non-empty, and non-inverted range of dates. Concretely, the requirements are:
   * * the range must be a TYPE_RANGE interval * the interval may not be inverted * the endpoints of
   * the interval must specify a year, month, and day * the day_type of each endpoint must be type
   * DAY_OF_MONTH * the endpoints may not specify hour, minute, second, week, or week_type * the
   * begin endpoint must predate the end endpoint
   * @param range range or {@code null} for none
   */
  public GeostoreExceptionalHoursProto setRange(GeostoreTimeIntervalProto range) {
    this.range = range;
    return this;
  }

  @Override
  public GeostoreExceptionalHoursProto set(String fieldName, Object value) {
    return (GeostoreExceptionalHoursProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreExceptionalHoursProto clone() {
    return (GeostoreExceptionalHoursProto) super.clone();
  }

}
