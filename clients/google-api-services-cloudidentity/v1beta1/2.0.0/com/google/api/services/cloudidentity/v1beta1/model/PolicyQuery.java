/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudidentity.v1beta1.model;

/**
 * PolicyQuery
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Identity API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PolicyQuery extends com.google.api.client.json.GenericJson {

  /**
   * Immutable. The group that the query applies to. This field is only set if there is a single
   * value for group that satisfies all clauses of the query. If no group applies, this will be the
   * empty string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String group;

  /**
   * Required. Immutable. Non-empty default. The OrgUnit the query applies to. This field is only
   * set if there is a single value for org_unit that satisfies all clauses of the query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String orgUnit;

  /**
   * Immutable. The CEL query that defines which entities the Policy applies to (ex. a User entity).
   * For details about CEL see https://opensource.google.com/projects/cel. The OrgUnits the Policy
   * applies to are represented by a clause like so: entity.org_units.exists(org_unit,
   * org_unit.org_unit_id == orgUnitId('{orgUnitId}')) The Group the Policy applies to are
   * represented by a clause like so: entity.groups.exists(group, group.group_id ==
   * groupId('{groupId}')) The Licenses the Policy applies to are represented by a clause like so:
   * entity.licenses.exists(license, license in ['/product/{productId}/sku/{skuId}']) The above
   * clauses can be present in any combination, and used in conjunction with the &&, || and !
   * operators. The org_unit and group fields below are helper fields that contain the corresponding
   * value(s) as the query to make the query easier to use.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String query;

  /**
   * Output only. The decimal sort order of this PolicyQuery. The value is relative to all other
   * policies with the same setting type for the customer. (There are no duplicates within this
   * set).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double sortOrder;

  /**
   * Immutable. The group that the query applies to. This field is only set if there is a single
   * value for group that satisfies all clauses of the query. If no group applies, this will be the
   * empty string.
   * @return value or {@code null} for none
   */
  public java.lang.String getGroup() {
    return group;
  }

  /**
   * Immutable. The group that the query applies to. This field is only set if there is a single
   * value for group that satisfies all clauses of the query. If no group applies, this will be the
   * empty string.
   * @param group group or {@code null} for none
   */
  public PolicyQuery setGroup(java.lang.String group) {
    this.group = group;
    return this;
  }

  /**
   * Required. Immutable. Non-empty default. The OrgUnit the query applies to. This field is only
   * set if there is a single value for org_unit that satisfies all clauses of the query.
   * @return value or {@code null} for none
   */
  public java.lang.String getOrgUnit() {
    return orgUnit;
  }

  /**
   * Required. Immutable. Non-empty default. The OrgUnit the query applies to. This field is only
   * set if there is a single value for org_unit that satisfies all clauses of the query.
   * @param orgUnit orgUnit or {@code null} for none
   */
  public PolicyQuery setOrgUnit(java.lang.String orgUnit) {
    this.orgUnit = orgUnit;
    return this;
  }

  /**
   * Immutable. The CEL query that defines which entities the Policy applies to (ex. a User entity).
   * For details about CEL see https://opensource.google.com/projects/cel. The OrgUnits the Policy
   * applies to are represented by a clause like so: entity.org_units.exists(org_unit,
   * org_unit.org_unit_id == orgUnitId('{orgUnitId}')) The Group the Policy applies to are
   * represented by a clause like so: entity.groups.exists(group, group.group_id ==
   * groupId('{groupId}')) The Licenses the Policy applies to are represented by a clause like so:
   * entity.licenses.exists(license, license in ['/product/{productId}/sku/{skuId}']) The above
   * clauses can be present in any combination, and used in conjunction with the &&, || and !
   * operators. The org_unit and group fields below are helper fields that contain the corresponding
   * value(s) as the query to make the query easier to use.
   * @return value or {@code null} for none
   */
  public java.lang.String getQuery() {
    return query;
  }

  /**
   * Immutable. The CEL query that defines which entities the Policy applies to (ex. a User entity).
   * For details about CEL see https://opensource.google.com/projects/cel. The OrgUnits the Policy
   * applies to are represented by a clause like so: entity.org_units.exists(org_unit,
   * org_unit.org_unit_id == orgUnitId('{orgUnitId}')) The Group the Policy applies to are
   * represented by a clause like so: entity.groups.exists(group, group.group_id ==
   * groupId('{groupId}')) The Licenses the Policy applies to are represented by a clause like so:
   * entity.licenses.exists(license, license in ['/product/{productId}/sku/{skuId}']) The above
   * clauses can be present in any combination, and used in conjunction with the &&, || and !
   * operators. The org_unit and group fields below are helper fields that contain the corresponding
   * value(s) as the query to make the query easier to use.
   * @param query query or {@code null} for none
   */
  public PolicyQuery setQuery(java.lang.String query) {
    this.query = query;
    return this;
  }

  /**
   * Output only. The decimal sort order of this PolicyQuery. The value is relative to all other
   * policies with the same setting type for the customer. (There are no duplicates within this
   * set).
   * @return value or {@code null} for none
   */
  public java.lang.Double getSortOrder() {
    return sortOrder;
  }

  /**
   * Output only. The decimal sort order of this PolicyQuery. The value is relative to all other
   * policies with the same setting type for the customer. (There are no duplicates within this
   * set).
   * @param sortOrder sortOrder or {@code null} for none
   */
  public PolicyQuery setSortOrder(java.lang.Double sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  @Override
  public PolicyQuery set(String fieldName, Object value) {
    return (PolicyQuery) super.set(fieldName, value);
  }

  @Override
  public PolicyQuery clone() {
    return (PolicyQuery) super.clone();
  }

}
