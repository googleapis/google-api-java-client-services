/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.containeranalysis.v1alpha1;

/**
 * Service definition for ContainerAnalysis (v1alpha1).
 *
 * <p>
 * An implementation of the Grafeas API, which stores, and enables querying and retrieval of critical metadata about all of your software artifacts.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/container-analysis/api/reference/rest/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ContainerAnalysisRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class ContainerAnalysis extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.29.2 of the Container Analysis API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://containeranalysis.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public ContainerAnalysis(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  ContainerAnalysis(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ContainerAnalysis containeranalysis = new ContainerAnalysis(...);}
   *   {@code ContainerAnalysis.Projects.List request = containeranalysis.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Notes collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code ContainerAnalysis containeranalysis = new ContainerAnalysis(...);}
     *   {@code ContainerAnalysis.Notes.List request = containeranalysis.notes().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Notes notes() {
      return new Notes();
    }

    /**
     * The "notes" collection of methods.
     */
    public class Notes {

      /**
       * Creates a new `Note`.
       *
       * Create a request for the method "notes.create".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent This field contains the project Id for example:
      "projects/{project_id}
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.Note}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.containeranalysis.v1alpha1.model.Note content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Note> {

        private static final String REST_PATH = "v1alpha1/{+parent}/notes";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Creates a new `Note`.
         *
         * Create a request for the method "notes.create".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Create#execute()} method to invoke the remote
         * operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent This field contains the project Id for example:
      "projects/{project_id}
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.Note}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.containeranalysis.v1alpha1.model.Note content) {
          super(ContainerAnalysis.this, "POST", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Note.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * This field contains the project Id for example: "projects/{project_id}
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** This field contains the project Id for example: "projects/{project_id}
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * This field contains the project Id for example: "projects/{project_id}
         */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The name of the project. Should be of the form "providers/{provider_id}". @Deprecated
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the project. Should be of the form "providers/{provider_id}". @Deprecated
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the project. Should be of the form "providers/{provider_id}". @Deprecated
         */
        public Create setName(java.lang.String name) {
          this.name = name;
          return this;
        }

        /** The ID to use for this note. */
        @com.google.api.client.util.Key
        private java.lang.String noteId;

        /** The ID to use for this note.
         */
        public java.lang.String getNoteId() {
          return noteId;
        }

        /** The ID to use for this note. */
        public Create setNoteId(java.lang.String noteId) {
          this.noteId = noteId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes the given `Note` from the system.
       *
       * Create a request for the method "notes.delete".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name The name of the note in the form of
      "providers/{provider_id}/notes/{NOTE_ID}"
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Empty> {

        private static final String REST_PATH = "v1alpha1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/notes/[^/]+$");

        /**
         * Deletes the given `Note` from the system.
         *
         * Create a request for the method "notes.delete".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
         * operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the note in the form of
      "providers/{provider_id}/notes/{NOTE_ID}"
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(ContainerAnalysis.this, "DELETE", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/notes/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
         */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/notes/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Returns the requested `Note`.
       *
       * Create a request for the method "notes.get".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name The name of the note in the form of
      "providers/{provider_id}/notes/{NOTE_ID}"
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Note> {

        private static final String REST_PATH = "v1alpha1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/notes/[^/]+$");

        /**
         * Returns the requested `Note`.
         *
         * Create a request for the method "notes.get".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         * <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the note in the form of
      "providers/{provider_id}/notes/{NOTE_ID}"
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(ContainerAnalysis.this, "GET", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.Note.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/notes/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/notes/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Gets the access control policy for a note or an `Occurrence` resource. Requires
       * `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission
       * if the resource is a note or occurrence, respectively. Attempting to call this method on a
       * resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting
       * to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has
       * list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
       * following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
       * projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
       *
       * Create a request for the method "notes.getIamPolicy".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy is being requested.
      See the operation documentation for
       *        the appropriate value for this field.
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.GetIamPolicyRequest}
       * @return the request
       */
      public GetIamPolicy getIamPolicy(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.GetIamPolicyRequest content) throws java.io.IOException {
        GetIamPolicy result = new GetIamPolicy(resource, content);
        initialize(result);
        return result;
      }

      public class GetIamPolicy extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Policy> {

        private static final String REST_PATH = "v1alpha1/{+resource}:getIamPolicy";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/notes/[^/]+$");

        /**
         * Gets the access control policy for a note or an `Occurrence` resource. Requires
         * `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy`
         * permission if the resource is a note or occurrence, respectively. Attempting to call this
         * method on a resource without the required permission will result in a `PERMISSION_DENIED`
         * error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND`
         * error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise.
         * The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}`
         * for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
         *
         * Create a request for the method "notes.getIamPolicy".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
         * operation. <p> {@link
         * GetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy is being requested.
      See the operation documentation for
       *        the appropriate value for this field.
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.GetIamPolicyRequest}
         * @since 1.13
         */
        protected GetIamPolicy(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.GetIamPolicyRequest content) {
          super(ContainerAnalysis.this, "POST", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Policy.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/notes/[^/]+$");
          }
        }

        @Override
        public GetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
          return (GetIamPolicy) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetIamPolicy setAccessToken(java.lang.String accessToken) {
          return (GetIamPolicy) super.setAccessToken(accessToken);
        }

        @Override
        public GetIamPolicy setAlt(java.lang.String alt) {
          return (GetIamPolicy) super.setAlt(alt);
        }

        @Override
        public GetIamPolicy setCallback(java.lang.String callback) {
          return (GetIamPolicy) super.setCallback(callback);
        }

        @Override
        public GetIamPolicy setFields(java.lang.String fields) {
          return (GetIamPolicy) super.setFields(fields);
        }

        @Override
        public GetIamPolicy setKey(java.lang.String key) {
          return (GetIamPolicy) super.setKey(key);
        }

        @Override
        public GetIamPolicy setOauthToken(java.lang.String oauthToken) {
          return (GetIamPolicy) super.setOauthToken(oauthToken);
        }

        @Override
        public GetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetIamPolicy) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetIamPolicy setQuotaUser(java.lang.String quotaUser) {
          return (GetIamPolicy) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetIamPolicy setUploadType(java.lang.String uploadType) {
          return (GetIamPolicy) super.setUploadType(uploadType);
        }

        @Override
        public GetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetIamPolicy) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy is being requested. See the operation documentation for
       the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        public GetIamPolicy setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/notes/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public GetIamPolicy set(String parameterName, Object value) {
          return (GetIamPolicy) super.set(parameterName, value);
        }
      }
      /**
       * Lists all `Notes` for a given project.
       *
       * Create a request for the method "notes.list".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent This field contains the project Id for example: "projects/{PROJECT_ID}".
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.ListNotesResponse> {

        private static final String REST_PATH = "v1alpha1/{+parent}/notes";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists all `Notes` for a given project.
         *
         * Create a request for the method "notes.list".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         * <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent This field contains the project Id for example: "projects/{PROJECT_ID}".
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(ContainerAnalysis.this, "GET", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.ListNotesResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** This field contains the project Id for example: "projects/{PROJECT_ID}". */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** This field contains the project Id for example: "projects/{PROJECT_ID}".
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** This field contains the project Id for example: "projects/{PROJECT_ID}". */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /** The filter expression. */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** The filter expression.
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /** The filter expression. */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /**
         * The name field will contain the project Id for example: "providers/{provider_id}
         * @Deprecated
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name field will contain the project Id for example: "providers/{provider_id} @Deprecated
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name field will contain the project Id for example: "providers/{provider_id}
         * @Deprecated
         */
        public List setName(java.lang.String name) {
          this.name = name;
          return this;
        }

        /** Number of notes to return in the list. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Number of notes to return in the list.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** Number of notes to return in the list. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** Token to provide to skip to a particular spot in the list. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Token to provide to skip to a particular spot in the list.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** Token to provide to skip to a particular spot in the list. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates an existing `Note`.
       *
       * Create a request for the method "notes.patch".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name The name of the note.
      Should be of the form "projects/{provider_id}/notes/{note_id}".
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.Note}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.containeranalysis.v1alpha1.model.Note content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Note> {

        private static final String REST_PATH = "v1alpha1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/notes/[^/]+$");

        /**
         * Updates an existing `Note`.
         *
         * Create a request for the method "notes.patch".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
         * operation. <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the note.
      Should be of the form "projects/{provider_id}/notes/{note_id}".
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.Note}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.containeranalysis.v1alpha1.model.Note content) {
          super(ContainerAnalysis.this, "PATCH", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Note.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/notes/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}".
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}".
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}".
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/notes/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** The fields to update. */
        @com.google.api.client.util.Key
        private String updateMask;

        /** The fields to update.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /** The fields to update. */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }
      /**
       * Sets the access control policy on the specified `Note` or `Occurrence`. Requires
       * `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission
       * if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method
       * without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this
       * method on a non-existent resource will result in a `NOT_FOUND` error if the user has
       * `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on
       * an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following
       * formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and
       * projects/{projectid}/notes/{noteid} for notes
       *
       * Create a request for the method "notes.setIamPolicy".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy is being specified.
      See the operation documentation for
       *        the appropriate value for this field.
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.SetIamPolicyRequest}
       * @return the request
       */
      public SetIamPolicy setIamPolicy(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.SetIamPolicyRequest content) throws java.io.IOException {
        SetIamPolicy result = new SetIamPolicy(resource, content);
        initialize(result);
        return result;
      }

      public class SetIamPolicy extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Policy> {

        private static final String REST_PATH = "v1alpha1/{+resource}:setIamPolicy";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/notes/[^/]+$");

        /**
         * Sets the access control policy on the specified `Note` or `Occurrence`. Requires
         * `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy`
         * permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call
         * this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting
         * to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user
         * has `containeranalysis.notes.list` permission on a `Note` or
         * `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error
         * otherwise. The resource takes the following formats:
         * `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and
         * projects/{projectid}/notes/{noteid} for notes
         *
         * Create a request for the method "notes.setIamPolicy".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
         * operation. <p> {@link
         * SetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy is being specified.
      See the operation documentation for
       *        the appropriate value for this field.
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.SetIamPolicyRequest}
         * @since 1.13
         */
        protected SetIamPolicy(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.SetIamPolicyRequest content) {
          super(ContainerAnalysis.this, "POST", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Policy.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/notes/[^/]+$");
          }
        }

        @Override
        public SetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
          return (SetIamPolicy) super.set$Xgafv($Xgafv);
        }

        @Override
        public SetIamPolicy setAccessToken(java.lang.String accessToken) {
          return (SetIamPolicy) super.setAccessToken(accessToken);
        }

        @Override
        public SetIamPolicy setAlt(java.lang.String alt) {
          return (SetIamPolicy) super.setAlt(alt);
        }

        @Override
        public SetIamPolicy setCallback(java.lang.String callback) {
          return (SetIamPolicy) super.setCallback(callback);
        }

        @Override
        public SetIamPolicy setFields(java.lang.String fields) {
          return (SetIamPolicy) super.setFields(fields);
        }

        @Override
        public SetIamPolicy setKey(java.lang.String key) {
          return (SetIamPolicy) super.setKey(key);
        }

        @Override
        public SetIamPolicy setOauthToken(java.lang.String oauthToken) {
          return (SetIamPolicy) super.setOauthToken(oauthToken);
        }

        @Override
        public SetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (SetIamPolicy) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public SetIamPolicy setQuotaUser(java.lang.String quotaUser) {
          return (SetIamPolicy) super.setQuotaUser(quotaUser);
        }

        @Override
        public SetIamPolicy setUploadType(java.lang.String uploadType) {
          return (SetIamPolicy) super.setUploadType(uploadType);
        }

        @Override
        public SetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
          return (SetIamPolicy) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy is being specified. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy is being specified. See the operation documentation for
       the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy is being specified. See the operation
         * documentation for the appropriate value for this field.
         */
        public SetIamPolicy setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/notes/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public SetIamPolicy set(String parameterName, Object value) {
          return (SetIamPolicy) super.set(parameterName, value);
        }
      }
      /**
       * Returns the permissions that a caller has on the specified note or occurrence resource. Requires
       * list permission on the project (for example, "storage.objects.list" on the containing bucket for
       * testing permission of an object). Attempting to call this method on a non-existent resource will
       * result in a `NOT_FOUND` error if the user has list permission on the project, or a
       * `PERMISSION_DENIED` error otherwise. The resource takes the following formats:
       * `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and
       * `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
       *
       * Create a request for the method "notes.testIamPermissions".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy detail is being requested.
      See the operation
       *        documentation for the appropriate value for this field.
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsRequest}
       * @return the request
       */
      public TestIamPermissions testIamPermissions(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsRequest content) throws java.io.IOException {
        TestIamPermissions result = new TestIamPermissions(resource, content);
        initialize(result);
        return result;
      }

      public class TestIamPermissions extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsResponse> {

        private static final String REST_PATH = "v1alpha1/{+resource}:testIamPermissions";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/notes/[^/]+$");

        /**
         * Returns the permissions that a caller has on the specified note or occurrence resource.
         * Requires list permission on the project (for example, "storage.objects.list" on the containing
         * bucket for testing permission of an object). Attempting to call this method on a non-existent
         * resource will result in a `NOT_FOUND` error if the user has list permission on the project, or
         * a `PERMISSION_DENIED` error otherwise. The resource takes the following formats:
         * `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and
         * `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
         *
         * Create a request for the method "notes.testIamPermissions".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the
         * remote operation. <p> {@link TestIamPermissions#initialize(com.google.api.client.googleapis.ser
         * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
         * after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy detail is being requested.
      See the operation
       *        documentation for the appropriate value for this field.
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsRequest}
         * @since 1.13
         */
        protected TestIamPermissions(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsRequest content) {
          super(ContainerAnalysis.this, "POST", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsResponse.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/notes/[^/]+$");
          }
        }

        @Override
        public TestIamPermissions set$Xgafv(java.lang.String $Xgafv) {
          return (TestIamPermissions) super.set$Xgafv($Xgafv);
        }

        @Override
        public TestIamPermissions setAccessToken(java.lang.String accessToken) {
          return (TestIamPermissions) super.setAccessToken(accessToken);
        }

        @Override
        public TestIamPermissions setAlt(java.lang.String alt) {
          return (TestIamPermissions) super.setAlt(alt);
        }

        @Override
        public TestIamPermissions setCallback(java.lang.String callback) {
          return (TestIamPermissions) super.setCallback(callback);
        }

        @Override
        public TestIamPermissions setFields(java.lang.String fields) {
          return (TestIamPermissions) super.setFields(fields);
        }

        @Override
        public TestIamPermissions setKey(java.lang.String key) {
          return (TestIamPermissions) super.setKey(key);
        }

        @Override
        public TestIamPermissions setOauthToken(java.lang.String oauthToken) {
          return (TestIamPermissions) super.setOauthToken(oauthToken);
        }

        @Override
        public TestIamPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (TestIamPermissions) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public TestIamPermissions setQuotaUser(java.lang.String quotaUser) {
          return (TestIamPermissions) super.setQuotaUser(quotaUser);
        }

        @Override
        public TestIamPermissions setUploadType(java.lang.String uploadType) {
          return (TestIamPermissions) super.setUploadType(uploadType);
        }

        @Override
        public TestIamPermissions setUploadProtocol(java.lang.String uploadProtocol) {
          return (TestIamPermissions) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy detail is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy detail is being requested. See the operation
       documentation for the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy detail is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        public TestIamPermissions setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/notes/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public TestIamPermissions set(String parameterName, Object value) {
          return (TestIamPermissions) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Occurrences collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code ContainerAnalysis containeranalysis = new ContainerAnalysis(...);}
       *   {@code ContainerAnalysis.Occurrences.List request = containeranalysis.occurrences().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Occurrences occurrences() {
        return new Occurrences();
      }

      /**
       * The "occurrences" collection of methods.
       */
      public class Occurrences {

        /**
         * Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences
         * referencing your `Note` across all your customer projects.
         *
         * Create a request for the method "occurrences.list".
         *
         * This request holds the parameters needed by the containeranalysis server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param name The name field will contain the note name for example:
          "provider/{provider_id}/notes/{note_id}"
         * @return the request
         */
        public List list(java.lang.String name) throws java.io.IOException {
          List result = new List(name);
          initialize(result);
          return result;
        }

        public class List extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.ListNoteOccurrencesResponse> {

          private static final String REST_PATH = "v1alpha1/{+name}/occurrences";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/notes/[^/]+$");

          /**
           * Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences
           * referencing your `Note` across all your customer projects.
           *
           * Create a request for the method "occurrences.list".
           *
           * This request holds the parameters needed by the the containeranalysis server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name field will contain the note name for example:
          "provider/{provider_id}/notes/{note_id}"
           * @since 1.13
           */
          protected List(java.lang.String name) {
            super(ContainerAnalysis.this, "GET", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.ListNoteOccurrencesResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/notes/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The name field will contain the note name for example:
           * "provider/{provider_id}/notes/{note_id}"
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name field will contain the note name for example: "provider/{provider_id}/notes/{note_id}"
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The name field will contain the note name for example:
           * "provider/{provider_id}/notes/{note_id}"
           */
          public List setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/notes/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /** The filter expression. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** The filter expression.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** The filter expression. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** Number of notes to return in the list. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Number of notes to return in the list.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** Number of notes to return in the list. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** Token to provide to skip to a particular spot in the list. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Token to provide to skip to a particular spot in the list.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** Token to provide to skip to a particular spot in the list. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
    /**
     * An accessor for creating requests from the Occurrences collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code ContainerAnalysis containeranalysis = new ContainerAnalysis(...);}
     *   {@code ContainerAnalysis.Occurrences.List request = containeranalysis.occurrences().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Occurrences occurrences() {
      return new Occurrences();
    }

    /**
     * The "occurrences" collection of methods.
     */
    public class Occurrences {

      /**
       * Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.
       *
       * Create a request for the method "occurrences.create".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent This field contains the project Id for example: "projects/{project_id}"
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.Occurrence}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.containeranalysis.v1alpha1.model.Occurrence content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Occurrence> {

        private static final String REST_PATH = "v1alpha1/{+parent}/occurrences";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.
         *
         * Create a request for the method "occurrences.create".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Create#execute()} method to invoke the remote
         * operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent This field contains the project Id for example: "projects/{project_id}"
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.Occurrence}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.containeranalysis.v1alpha1.model.Occurrence content) {
          super(ContainerAnalysis.this, "POST", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Occurrence.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /** This field contains the project Id for example: "projects/{project_id}" */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** This field contains the project Id for example: "projects/{project_id}"
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** This field contains the project Id for example: "projects/{project_id}" */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The name of the project.  Should be of the form "projects/{project_id}". @Deprecated
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the project.  Should be of the form "projects/{project_id}". @Deprecated
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the project.  Should be of the form "projects/{project_id}". @Deprecated
         */
        public Create setName(java.lang.String name) {
          this.name = name;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes the given `Occurrence` from the system. Use this when an `Occurrence` is no longer
       * applicable for the given resource.
       *
       * Create a request for the method "occurrences.delete".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name The name of the occurrence in the form of
      "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Empty> {

        private static final String REST_PATH = "v1alpha1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/occurrences/[^/]+$");

        /**
         * Deletes the given `Occurrence` from the system. Use this when an `Occurrence` is no longer
         * applicable for the given resource.
         *
         * Create a request for the method "occurrences.delete".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
         * operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the occurrence in the form of
      "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(ContainerAnalysis.this, "DELETE", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the occurrence in the form of
         * "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the occurrence in the form of "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the occurrence in the form of
         * "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
         */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Returns the requested `Occurrence`.
       *
       * Create a request for the method "occurrences.get".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name The name of the occurrence of the form
      "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Occurrence> {

        private static final String REST_PATH = "v1alpha1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/occurrences/[^/]+$");

        /**
         * Returns the requested `Occurrence`.
         *
         * Create a request for the method "occurrences.get".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         * <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the occurrence of the form
      "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(ContainerAnalysis.this, "GET", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.Occurrence.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the occurrence of the form
         * "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the occurrence of the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the occurrence of the form
         * "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Gets the access control policy for a note or an `Occurrence` resource. Requires
       * `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission
       * if the resource is a note or occurrence, respectively. Attempting to call this method on a
       * resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting
       * to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has
       * list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
       * following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
       * projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
       *
       * Create a request for the method "occurrences.getIamPolicy".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy is being requested.
      See the operation documentation for
       *        the appropriate value for this field.
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.GetIamPolicyRequest}
       * @return the request
       */
      public GetIamPolicy getIamPolicy(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.GetIamPolicyRequest content) throws java.io.IOException {
        GetIamPolicy result = new GetIamPolicy(resource, content);
        initialize(result);
        return result;
      }

      public class GetIamPolicy extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Policy> {

        private static final String REST_PATH = "v1alpha1/{+resource}:getIamPolicy";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/occurrences/[^/]+$");

        /**
         * Gets the access control policy for a note or an `Occurrence` resource. Requires
         * `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy`
         * permission if the resource is a note or occurrence, respectively. Attempting to call this
         * method on a resource without the required permission will result in a `PERMISSION_DENIED`
         * error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND`
         * error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise.
         * The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}`
         * for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
         *
         * Create a request for the method "occurrences.getIamPolicy".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
         * operation. <p> {@link
         * GetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy is being requested.
      See the operation documentation for
       *        the appropriate value for this field.
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.GetIamPolicyRequest}
         * @since 1.13
         */
        protected GetIamPolicy(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.GetIamPolicyRequest content) {
          super(ContainerAnalysis.this, "POST", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Policy.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
        }

        @Override
        public GetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
          return (GetIamPolicy) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetIamPolicy setAccessToken(java.lang.String accessToken) {
          return (GetIamPolicy) super.setAccessToken(accessToken);
        }

        @Override
        public GetIamPolicy setAlt(java.lang.String alt) {
          return (GetIamPolicy) super.setAlt(alt);
        }

        @Override
        public GetIamPolicy setCallback(java.lang.String callback) {
          return (GetIamPolicy) super.setCallback(callback);
        }

        @Override
        public GetIamPolicy setFields(java.lang.String fields) {
          return (GetIamPolicy) super.setFields(fields);
        }

        @Override
        public GetIamPolicy setKey(java.lang.String key) {
          return (GetIamPolicy) super.setKey(key);
        }

        @Override
        public GetIamPolicy setOauthToken(java.lang.String oauthToken) {
          return (GetIamPolicy) super.setOauthToken(oauthToken);
        }

        @Override
        public GetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetIamPolicy) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetIamPolicy setQuotaUser(java.lang.String quotaUser) {
          return (GetIamPolicy) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetIamPolicy setUploadType(java.lang.String uploadType) {
          return (GetIamPolicy) super.setUploadType(uploadType);
        }

        @Override
        public GetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetIamPolicy) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy is being requested. See the operation documentation for
       the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        public GetIamPolicy setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public GetIamPolicy set(String parameterName, Object value) {
          return (GetIamPolicy) super.set(parameterName, value);
        }
      }
      /**
       * Gets the `Note` attached to the given `Occurrence`.
       *
       * Create a request for the method "occurrences.getNotes".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link GetNotes#execute()} method to invoke the remote operation.
       *
       * @param name The name of the occurrence in the form
      "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
       * @return the request
       */
      public GetNotes getNotes(java.lang.String name) throws java.io.IOException {
        GetNotes result = new GetNotes(name);
        initialize(result);
        return result;
      }

      public class GetNotes extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Note> {

        private static final String REST_PATH = "v1alpha1/{+name}/notes";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/occurrences/[^/]+$");

        /**
         * Gets the `Note` attached to the given `Occurrence`.
         *
         * Create a request for the method "occurrences.getNotes".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link GetNotes#execute()} method to invoke the remote
         * operation. <p> {@link
         * GetNotes#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the occurrence in the form
      "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
         * @since 1.13
         */
        protected GetNotes(java.lang.String name) {
          super(ContainerAnalysis.this, "GET", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.Note.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public GetNotes set$Xgafv(java.lang.String $Xgafv) {
          return (GetNotes) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetNotes setAccessToken(java.lang.String accessToken) {
          return (GetNotes) super.setAccessToken(accessToken);
        }

        @Override
        public GetNotes setAlt(java.lang.String alt) {
          return (GetNotes) super.setAlt(alt);
        }

        @Override
        public GetNotes setCallback(java.lang.String callback) {
          return (GetNotes) super.setCallback(callback);
        }

        @Override
        public GetNotes setFields(java.lang.String fields) {
          return (GetNotes) super.setFields(fields);
        }

        @Override
        public GetNotes setKey(java.lang.String key) {
          return (GetNotes) super.setKey(key);
        }

        @Override
        public GetNotes setOauthToken(java.lang.String oauthToken) {
          return (GetNotes) super.setOauthToken(oauthToken);
        }

        @Override
        public GetNotes setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetNotes) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetNotes setQuotaUser(java.lang.String quotaUser) {
          return (GetNotes) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetNotes setUploadType(java.lang.String uploadType) {
          return (GetNotes) super.setUploadType(uploadType);
        }

        @Override
        public GetNotes setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetNotes) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the occurrence in the form
         * "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the occurrence in the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the occurrence in the form
         * "projects/{project_id}/occurrences/{OCCURRENCE_ID}"
         */
        public GetNotes setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public GetNotes set(String parameterName, Object value) {
          return (GetNotes) super.set(parameterName, value);
        }
      }
      /**
       * Gets a summary of the number and severity of occurrences.
       *
       * Create a request for the method "occurrences.getVulnerabilitySummary".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link GetVulnerabilitySummary#execute()} method to invoke the
       * remote operation.
       *
       * @param parent This contains the project Id for example: projects/{project_id}
       * @return the request
       */
      public GetVulnerabilitySummary getVulnerabilitySummary(java.lang.String parent) throws java.io.IOException {
        GetVulnerabilitySummary result = new GetVulnerabilitySummary(parent);
        initialize(result);
        return result;
      }

      public class GetVulnerabilitySummary extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.GetVulnzOccurrencesSummaryResponse> {

        private static final String REST_PATH = "v1alpha1/{+parent}/occurrences:vulnerabilitySummary";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Gets a summary of the number and severity of occurrences.
         *
         * Create a request for the method "occurrences.getVulnerabilitySummary".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link GetVulnerabilitySummary#execute()} method to invoke
         * the remote operation. <p> {@link GetVulnerabilitySummary#initialize(com.google.api.client.googl
         * eapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
         * immediately after invoking the constructor. </p>
         *
         * @param parent This contains the project Id for example: projects/{project_id}
         * @since 1.13
         */
        protected GetVulnerabilitySummary(java.lang.String parent) {
          super(ContainerAnalysis.this, "GET", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.GetVulnzOccurrencesSummaryResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public GetVulnerabilitySummary set$Xgafv(java.lang.String $Xgafv) {
          return (GetVulnerabilitySummary) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetVulnerabilitySummary setAccessToken(java.lang.String accessToken) {
          return (GetVulnerabilitySummary) super.setAccessToken(accessToken);
        }

        @Override
        public GetVulnerabilitySummary setAlt(java.lang.String alt) {
          return (GetVulnerabilitySummary) super.setAlt(alt);
        }

        @Override
        public GetVulnerabilitySummary setCallback(java.lang.String callback) {
          return (GetVulnerabilitySummary) super.setCallback(callback);
        }

        @Override
        public GetVulnerabilitySummary setFields(java.lang.String fields) {
          return (GetVulnerabilitySummary) super.setFields(fields);
        }

        @Override
        public GetVulnerabilitySummary setKey(java.lang.String key) {
          return (GetVulnerabilitySummary) super.setKey(key);
        }

        @Override
        public GetVulnerabilitySummary setOauthToken(java.lang.String oauthToken) {
          return (GetVulnerabilitySummary) super.setOauthToken(oauthToken);
        }

        @Override
        public GetVulnerabilitySummary setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetVulnerabilitySummary) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetVulnerabilitySummary setQuotaUser(java.lang.String quotaUser) {
          return (GetVulnerabilitySummary) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetVulnerabilitySummary setUploadType(java.lang.String uploadType) {
          return (GetVulnerabilitySummary) super.setUploadType(uploadType);
        }

        @Override
        public GetVulnerabilitySummary setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetVulnerabilitySummary) super.setUploadProtocol(uploadProtocol);
        }

        /** This contains the project Id for example: projects/{project_id} */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** This contains the project Id for example: projects/{project_id}
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** This contains the project Id for example: projects/{project_id} */
        public GetVulnerabilitySummary setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /** The filter expression. */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** The filter expression.
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /** The filter expression. */
        public GetVulnerabilitySummary setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        @Override
        public GetVulnerabilitySummary set(String parameterName, Object value) {
          return (GetVulnerabilitySummary) super.set(parameterName, value);
        }
      }
      /**
       * Lists active `Occurrences` for a given project matching the filters.
       *
       * Create a request for the method "occurrences.list".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent This contains the project Id for example: projects/{project_id}.
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.ListOccurrencesResponse> {

        private static final String REST_PATH = "v1alpha1/{+parent}/occurrences";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists active `Occurrences` for a given project matching the filters.
         *
         * Create a request for the method "occurrences.list".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         * <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent This contains the project Id for example: projects/{project_id}.
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(ContainerAnalysis.this, "GET", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.ListOccurrencesResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** This contains the project Id for example: projects/{project_id}. */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** This contains the project Id for example: projects/{project_id}.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** This contains the project Id for example: projects/{project_id}. */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /** The filter expression. */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** The filter expression.
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /** The filter expression. */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** The kind of occurrences to filter on. */
        @com.google.api.client.util.Key
        private java.lang.String kind;

        /** The kind of occurrences to filter on.
         */
        public java.lang.String getKind() {
          return kind;
        }

        /** The kind of occurrences to filter on. */
        public List setKind(java.lang.String kind) {
          this.kind = kind;
          return this;
        }

        /**
         * The name field contains the project Id. For example: "projects/{project_id} @Deprecated
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name field contains the project Id. For example: "projects/{project_id} @Deprecated
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name field contains the project Id. For example: "projects/{project_id} @Deprecated
         */
        public List setName(java.lang.String name) {
          this.name = name;
          return this;
        }

        /** Number of occurrences to return in the list. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Number of occurrences to return in the list.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** Number of occurrences to return in the list. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** Token to provide to skip to a particular spot in the list. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Token to provide to skip to a particular spot in the list.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** Token to provide to skip to a particular spot in the list. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates an existing occurrence.
       *
       * Create a request for the method "occurrences.patch".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name The name of the occurrence.
      Should be of the form
       *        "projects/{project_id}/occurrences/{OCCURRENCE_ID}".
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.Occurrence}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.containeranalysis.v1alpha1.model.Occurrence content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Occurrence> {

        private static final String REST_PATH = "v1alpha1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/occurrences/[^/]+$");

        /**
         * Updates an existing occurrence.
         *
         * Create a request for the method "occurrences.patch".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
         * operation. <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the occurrence.
      Should be of the form
       *        "projects/{project_id}/occurrences/{OCCURRENCE_ID}".
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.Occurrence}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.containeranalysis.v1alpha1.model.Occurrence content) {
          super(ContainerAnalysis.this, "PATCH", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Occurrence.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the occurrence. Should be of the form
         * "projects/{project_id}/occurrences/{OCCURRENCE_ID}".
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the occurrence. Should be of the form
       "projects/{project_id}/occurrences/{OCCURRENCE_ID}".
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the occurrence. Should be of the form
         * "projects/{project_id}/occurrences/{OCCURRENCE_ID}".
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** The fields to update. */
        @com.google.api.client.util.Key
        private String updateMask;

        /** The fields to update.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /** The fields to update. */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }
      /**
       * Sets the access control policy on the specified `Note` or `Occurrence`. Requires
       * `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission
       * if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method
       * without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this
       * method on a non-existent resource will result in a `NOT_FOUND` error if the user has
       * `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on
       * an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following
       * formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and
       * projects/{projectid}/notes/{noteid} for notes
       *
       * Create a request for the method "occurrences.setIamPolicy".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy is being specified.
      See the operation documentation for
       *        the appropriate value for this field.
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.SetIamPolicyRequest}
       * @return the request
       */
      public SetIamPolicy setIamPolicy(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.SetIamPolicyRequest content) throws java.io.IOException {
        SetIamPolicy result = new SetIamPolicy(resource, content);
        initialize(result);
        return result;
      }

      public class SetIamPolicy extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Policy> {

        private static final String REST_PATH = "v1alpha1/{+resource}:setIamPolicy";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/occurrences/[^/]+$");

        /**
         * Sets the access control policy on the specified `Note` or `Occurrence`. Requires
         * `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy`
         * permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call
         * this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting
         * to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user
         * has `containeranalysis.notes.list` permission on a `Note` or
         * `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error
         * otherwise. The resource takes the following formats:
         * `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and
         * projects/{projectid}/notes/{noteid} for notes
         *
         * Create a request for the method "occurrences.setIamPolicy".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
         * operation. <p> {@link
         * SetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy is being specified.
      See the operation documentation for
       *        the appropriate value for this field.
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.SetIamPolicyRequest}
         * @since 1.13
         */
        protected SetIamPolicy(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.SetIamPolicyRequest content) {
          super(ContainerAnalysis.this, "POST", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Policy.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
        }

        @Override
        public SetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
          return (SetIamPolicy) super.set$Xgafv($Xgafv);
        }

        @Override
        public SetIamPolicy setAccessToken(java.lang.String accessToken) {
          return (SetIamPolicy) super.setAccessToken(accessToken);
        }

        @Override
        public SetIamPolicy setAlt(java.lang.String alt) {
          return (SetIamPolicy) super.setAlt(alt);
        }

        @Override
        public SetIamPolicy setCallback(java.lang.String callback) {
          return (SetIamPolicy) super.setCallback(callback);
        }

        @Override
        public SetIamPolicy setFields(java.lang.String fields) {
          return (SetIamPolicy) super.setFields(fields);
        }

        @Override
        public SetIamPolicy setKey(java.lang.String key) {
          return (SetIamPolicy) super.setKey(key);
        }

        @Override
        public SetIamPolicy setOauthToken(java.lang.String oauthToken) {
          return (SetIamPolicy) super.setOauthToken(oauthToken);
        }

        @Override
        public SetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (SetIamPolicy) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public SetIamPolicy setQuotaUser(java.lang.String quotaUser) {
          return (SetIamPolicy) super.setQuotaUser(quotaUser);
        }

        @Override
        public SetIamPolicy setUploadType(java.lang.String uploadType) {
          return (SetIamPolicy) super.setUploadType(uploadType);
        }

        @Override
        public SetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
          return (SetIamPolicy) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy is being specified. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy is being specified. See the operation documentation for
       the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy is being specified. See the operation
         * documentation for the appropriate value for this field.
         */
        public SetIamPolicy setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public SetIamPolicy set(String parameterName, Object value) {
          return (SetIamPolicy) super.set(parameterName, value);
        }
      }
      /**
       * Returns the permissions that a caller has on the specified note or occurrence resource. Requires
       * list permission on the project (for example, "storage.objects.list" on the containing bucket for
       * testing permission of an object). Attempting to call this method on a non-existent resource will
       * result in a `NOT_FOUND` error if the user has list permission on the project, or a
       * `PERMISSION_DENIED` error otherwise. The resource takes the following formats:
       * `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and
       * `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
       *
       * Create a request for the method "occurrences.testIamPermissions".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy detail is being requested.
      See the operation
       *        documentation for the appropriate value for this field.
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsRequest}
       * @return the request
       */
      public TestIamPermissions testIamPermissions(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsRequest content) throws java.io.IOException {
        TestIamPermissions result = new TestIamPermissions(resource, content);
        initialize(result);
        return result;
      }

      public class TestIamPermissions extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsResponse> {

        private static final String REST_PATH = "v1alpha1/{+resource}:testIamPermissions";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/occurrences/[^/]+$");

        /**
         * Returns the permissions that a caller has on the specified note or occurrence resource.
         * Requires list permission on the project (for example, "storage.objects.list" on the containing
         * bucket for testing permission of an object). Attempting to call this method on a non-existent
         * resource will result in a `NOT_FOUND` error if the user has list permission on the project, or
         * a `PERMISSION_DENIED` error otherwise. The resource takes the following formats:
         * `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and
         * `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
         *
         * Create a request for the method "occurrences.testIamPermissions".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the
         * remote operation. <p> {@link TestIamPermissions#initialize(com.google.api.client.googleapis.ser
         * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
         * after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy detail is being requested.
      See the operation
       *        documentation for the appropriate value for this field.
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsRequest}
         * @since 1.13
         */
        protected TestIamPermissions(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsRequest content) {
          super(ContainerAnalysis.this, "POST", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsResponse.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
        }

        @Override
        public TestIamPermissions set$Xgafv(java.lang.String $Xgafv) {
          return (TestIamPermissions) super.set$Xgafv($Xgafv);
        }

        @Override
        public TestIamPermissions setAccessToken(java.lang.String accessToken) {
          return (TestIamPermissions) super.setAccessToken(accessToken);
        }

        @Override
        public TestIamPermissions setAlt(java.lang.String alt) {
          return (TestIamPermissions) super.setAlt(alt);
        }

        @Override
        public TestIamPermissions setCallback(java.lang.String callback) {
          return (TestIamPermissions) super.setCallback(callback);
        }

        @Override
        public TestIamPermissions setFields(java.lang.String fields) {
          return (TestIamPermissions) super.setFields(fields);
        }

        @Override
        public TestIamPermissions setKey(java.lang.String key) {
          return (TestIamPermissions) super.setKey(key);
        }

        @Override
        public TestIamPermissions setOauthToken(java.lang.String oauthToken) {
          return (TestIamPermissions) super.setOauthToken(oauthToken);
        }

        @Override
        public TestIamPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (TestIamPermissions) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public TestIamPermissions setQuotaUser(java.lang.String quotaUser) {
          return (TestIamPermissions) super.setQuotaUser(quotaUser);
        }

        @Override
        public TestIamPermissions setUploadType(java.lang.String uploadType) {
          return (TestIamPermissions) super.setUploadType(uploadType);
        }

        @Override
        public TestIamPermissions setUploadProtocol(java.lang.String uploadProtocol) {
          return (TestIamPermissions) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy detail is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy detail is being requested. See the operation
       documentation for the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy detail is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        public TestIamPermissions setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/occurrences/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public TestIamPermissions set(String parameterName, Object value) {
          return (TestIamPermissions) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Operations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code ContainerAnalysis containeranalysis = new ContainerAnalysis(...);}
     *   {@code ContainerAnalysis.Operations.List request = containeranalysis.operations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Operations operations() {
      return new Operations();
    }

    /**
     * The "operations" collection of methods.
     */
    public class Operations {

      /**
       * Creates a new `Operation`.
       *
       * Create a request for the method "operations.create".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent The project Id that this operation should be created under.
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.CreateOperationRequest}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.containeranalysis.v1alpha1.model.CreateOperationRequest content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Operation> {

        private static final String REST_PATH = "v1alpha1/{+parent}/operations";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Creates a new `Operation`.
         *
         * Create a request for the method "operations.create".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Create#execute()} method to invoke the remote
         * operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent The project Id that this operation should be created under.
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.CreateOperationRequest}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.containeranalysis.v1alpha1.model.CreateOperationRequest content) {
          super(ContainerAnalysis.this, "POST", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Operation.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /** The project Id that this operation should be created under. */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** The project Id that this operation should be created under.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** The project Id that this operation should be created under. */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Updates an existing operation returns an error if operation  does not exist. The only valid
       * operations are to update mark the done bit change the result.
       *
       * Create a request for the method "operations.patch".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name The name of the Operation.
      Should be of the form "projects/{provider_id}/operations/{operation_id}".
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.UpdateOperationRequest}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.containeranalysis.v1alpha1.model.UpdateOperationRequest content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Operation> {

        private static final String REST_PATH = "v1alpha1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/operations/[^/]+$");

        /**
         * Updates an existing operation returns an error if operation  does not exist. The only valid
         * operations are to update mark the done bit change the result.
         *
         * Create a request for the method "operations.patch".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
         * operation. <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the Operation.
      Should be of the form "projects/{provider_id}/operations/{operation_id}".
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.UpdateOperationRequest}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.containeranalysis.v1alpha1.model.UpdateOperationRequest content) {
          super(ContainerAnalysis.this, "PATCH", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Operation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/operations/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the Operation. Should be of the form
         * "projects/{provider_id}/operations/{operation_id}".
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the Operation. Should be of the form
       "projects/{provider_id}/operations/{operation_id}".
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the Operation. Should be of the form
         * "projects/{provider_id}/operations/{operation_id}".
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/operations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the ScanConfigs collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code ContainerAnalysis containeranalysis = new ContainerAnalysis(...);}
     *   {@code ContainerAnalysis.ScanConfigs.List request = containeranalysis.scanConfigs().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public ScanConfigs scanConfigs() {
      return new ScanConfigs();
    }

    /**
     * The "scanConfigs" collection of methods.
     */
    public class ScanConfigs {

      /**
       * Gets a specific scan configuration for a project.
       *
       * Create a request for the method "scanConfigs.get".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name The name of the ScanConfig in the form
      projects/{project_id}/scanConfigs/{scan_config_id}
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.ScanConfig> {

        private static final String REST_PATH = "v1alpha1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/scanConfigs/[^/]+$");

        /**
         * Gets a specific scan configuration for a project.
         *
         * Create a request for the method "scanConfigs.get".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         * <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the ScanConfig in the form
      projects/{project_id}/scanConfigs/{scan_config_id}
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(ContainerAnalysis.this, "GET", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.ScanConfig.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/scanConfigs/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the ScanConfig in the form projects/{project_id}/scanConfigs/{scan_config_id}
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the ScanConfig in the form projects/{project_id}/scanConfigs/{scan_config_id}
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the ScanConfig in the form projects/{project_id}/scanConfigs/{scan_config_id}
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/scanConfigs/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists scan configurations for a project.
       *
       * Create a request for the method "scanConfigs.list".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent This containers the project Id i.e.: projects/{project_id}
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.ListScanConfigsResponse> {

        private static final String REST_PATH = "v1alpha1/{+parent}/scanConfigs";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists scan configurations for a project.
         *
         * Create a request for the method "scanConfigs.list".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         * <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent This containers the project Id i.e.: projects/{project_id}
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(ContainerAnalysis.this, "GET", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.ListScanConfigsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** This containers the project Id i.e.: projects/{project_id} */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** This containers the project Id i.e.: projects/{project_id}
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** This containers the project Id i.e.: projects/{project_id} */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /** The filter expression. */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** The filter expression.
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /** The filter expression. */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** The number of items to return. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The number of items to return.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The number of items to return. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** The page token to use for the next request. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** The page token to use for the next request.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** The page token to use for the next request. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates the scan configuration to a new value.
       *
       * Create a request for the method "scanConfigs.patch".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name The scan config to update of the form
      projects/{project_id}/scanConfigs/{scan_config_id}.
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.ScanConfig}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.containeranalysis.v1alpha1.model.ScanConfig content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.ScanConfig> {

        private static final String REST_PATH = "v1alpha1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/scanConfigs/[^/]+$");

        /**
         * Updates the scan configuration to a new value.
         *
         * Create a request for the method "scanConfigs.patch".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
         * operation. <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The scan config to update of the form
      projects/{project_id}/scanConfigs/{scan_config_id}.
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.ScanConfig}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.containeranalysis.v1alpha1.model.ScanConfig content) {
          super(ContainerAnalysis.this, "PATCH", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.ScanConfig.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/scanConfigs/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The scan config to update of the form projects/{project_id}/scanConfigs/{scan_config_id}.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The scan config to update of the form projects/{project_id}/scanConfigs/{scan_config_id}.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The scan config to update of the form projects/{project_id}/scanConfigs/{scan_config_id}.
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/scanConfigs/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** The fields to update. */
        @com.google.api.client.util.Key
        private String updateMask;

        /** The fields to update.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /** The fields to update. */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Providers collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code ContainerAnalysis containeranalysis = new ContainerAnalysis(...);}
   *   {@code ContainerAnalysis.Providers.List request = containeranalysis.providers().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Providers providers() {
    return new Providers();
  }

  /**
   * The "providers" collection of methods.
   */
  public class Providers {

    /**
     * An accessor for creating requests from the Notes collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code ContainerAnalysis containeranalysis = new ContainerAnalysis(...);}
     *   {@code ContainerAnalysis.Notes.List request = containeranalysis.notes().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Notes notes() {
      return new Notes();
    }

    /**
     * The "notes" collection of methods.
     */
    public class Notes {

      /**
       * Creates a new `Note`.
       *
       * Create a request for the method "notes.create".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param name The name of the project.
      Should be of the form "providers/{provider_id}".
      @Deprecated
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.Note}
       * @return the request
       */
      public Create create(java.lang.String name, com.google.api.services.containeranalysis.v1alpha1.model.Note content) throws java.io.IOException {
        Create result = new Create(name, content);
        initialize(result);
        return result;
      }

      public class Create extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Note> {

        private static final String REST_PATH = "v1alpha1/{+name}/notes";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^providers/[^/]+$");

        /**
         * Creates a new `Note`.
         *
         * Create a request for the method "notes.create".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Create#execute()} method to invoke the remote
         * operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the project.
      Should be of the form "providers/{provider_id}".
      @Deprecated
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.Note}
         * @since 1.13
         */
        protected Create(java.lang.String name, com.google.api.services.containeranalysis.v1alpha1.model.Note content) {
          super(ContainerAnalysis.this, "POST", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Note.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^providers/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the project. Should be of the form "providers/{provider_id}". @Deprecated
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the project. Should be of the form "providers/{provider_id}". @Deprecated
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the project. Should be of the form "providers/{provider_id}". @Deprecated
         */
        public Create setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^providers/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** The ID to use for this note. */
        @com.google.api.client.util.Key
        private java.lang.String noteId;

        /** The ID to use for this note.
         */
        public java.lang.String getNoteId() {
          return noteId;
        }

        /** The ID to use for this note. */
        public Create setNoteId(java.lang.String noteId) {
          this.noteId = noteId;
          return this;
        }

        /**
         * This field contains the project Id for example: "projects/{project_id}
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** This field contains the project Id for example: "projects/{project_id}
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * This field contains the project Id for example: "projects/{project_id}
         */
        public Create setParent(java.lang.String parent) {
          this.parent = parent;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes the given `Note` from the system.
       *
       * Create a request for the method "notes.delete".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name The name of the note in the form of
      "providers/{provider_id}/notes/{NOTE_ID}"
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Empty> {

        private static final String REST_PATH = "v1alpha1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^providers/[^/]+/notes/[^/]+$");

        /**
         * Deletes the given `Note` from the system.
         *
         * Create a request for the method "notes.delete".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
         * operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the note in the form of
      "providers/{provider_id}/notes/{NOTE_ID}"
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(ContainerAnalysis.this, "DELETE", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^providers/[^/]+/notes/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
         */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^providers/[^/]+/notes/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Returns the requested `Note`.
       *
       * Create a request for the method "notes.get".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name The name of the note in the form of
      "providers/{provider_id}/notes/{NOTE_ID}"
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Note> {

        private static final String REST_PATH = "v1alpha1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^providers/[^/]+/notes/[^/]+$");

        /**
         * Returns the requested `Note`.
         *
         * Create a request for the method "notes.get".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         * <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the note in the form of
      "providers/{provider_id}/notes/{NOTE_ID}"
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(ContainerAnalysis.this, "GET", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.Note.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^providers/[^/]+/notes/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}"
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^providers/[^/]+/notes/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Gets the access control policy for a note or an `Occurrence` resource. Requires
       * `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission
       * if the resource is a note or occurrence, respectively. Attempting to call this method on a
       * resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting
       * to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has
       * list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the
       * following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and
       * projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
       *
       * Create a request for the method "notes.getIamPolicy".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy is being requested.
      See the operation documentation for
       *        the appropriate value for this field.
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.GetIamPolicyRequest}
       * @return the request
       */
      public GetIamPolicy getIamPolicy(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.GetIamPolicyRequest content) throws java.io.IOException {
        GetIamPolicy result = new GetIamPolicy(resource, content);
        initialize(result);
        return result;
      }

      public class GetIamPolicy extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Policy> {

        private static final String REST_PATH = "v1alpha1/{+resource}:getIamPolicy";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^providers/[^/]+/notes/[^/]+$");

        /**
         * Gets the access control policy for a note or an `Occurrence` resource. Requires
         * `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy`
         * permission if the resource is a note or occurrence, respectively. Attempting to call this
         * method on a resource without the required permission will result in a `PERMISSION_DENIED`
         * error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND`
         * error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise.
         * The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}`
         * for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
         *
         * Create a request for the method "notes.getIamPolicy".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
         * operation. <p> {@link
         * GetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy is being requested.
      See the operation documentation for
       *        the appropriate value for this field.
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.GetIamPolicyRequest}
         * @since 1.13
         */
        protected GetIamPolicy(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.GetIamPolicyRequest content) {
          super(ContainerAnalysis.this, "POST", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Policy.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^providers/[^/]+/notes/[^/]+$");
          }
        }

        @Override
        public GetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
          return (GetIamPolicy) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetIamPolicy setAccessToken(java.lang.String accessToken) {
          return (GetIamPolicy) super.setAccessToken(accessToken);
        }

        @Override
        public GetIamPolicy setAlt(java.lang.String alt) {
          return (GetIamPolicy) super.setAlt(alt);
        }

        @Override
        public GetIamPolicy setCallback(java.lang.String callback) {
          return (GetIamPolicy) super.setCallback(callback);
        }

        @Override
        public GetIamPolicy setFields(java.lang.String fields) {
          return (GetIamPolicy) super.setFields(fields);
        }

        @Override
        public GetIamPolicy setKey(java.lang.String key) {
          return (GetIamPolicy) super.setKey(key);
        }

        @Override
        public GetIamPolicy setOauthToken(java.lang.String oauthToken) {
          return (GetIamPolicy) super.setOauthToken(oauthToken);
        }

        @Override
        public GetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetIamPolicy) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetIamPolicy setQuotaUser(java.lang.String quotaUser) {
          return (GetIamPolicy) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetIamPolicy setUploadType(java.lang.String uploadType) {
          return (GetIamPolicy) super.setUploadType(uploadType);
        }

        @Override
        public GetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetIamPolicy) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy is being requested. See the operation documentation for
       the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        public GetIamPolicy setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^providers/[^/]+/notes/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public GetIamPolicy set(String parameterName, Object value) {
          return (GetIamPolicy) super.set(parameterName, value);
        }
      }
      /**
       * Lists all `Notes` for a given project.
       *
       * Create a request for the method "notes.list".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param name The name field will contain the project Id for example:
      "providers/{provider_id}
      @Deprecated
       * @return the request
       */
      public List list(java.lang.String name) throws java.io.IOException {
        List result = new List(name);
        initialize(result);
        return result;
      }

      public class List extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.ListNotesResponse> {

        private static final String REST_PATH = "v1alpha1/{+name}/notes";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^providers/[^/]+$");

        /**
         * Lists all `Notes` for a given project.
         *
         * Create a request for the method "notes.list".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         * <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name field will contain the project Id for example:
      "providers/{provider_id}
      @Deprecated
         * @since 1.13
         */
        protected List(java.lang.String name) {
          super(ContainerAnalysis.this, "GET", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.ListNotesResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^providers/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name field will contain the project Id for example: "providers/{provider_id}
         * @Deprecated
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name field will contain the project Id for example: "providers/{provider_id} @Deprecated
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name field will contain the project Id for example: "providers/{provider_id}
         * @Deprecated
         */
        public List setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^providers/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** The filter expression. */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** The filter expression.
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /** The filter expression. */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** Number of notes to return in the list. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Number of notes to return in the list.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** Number of notes to return in the list. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** Token to provide to skip to a particular spot in the list. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Token to provide to skip to a particular spot in the list.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** Token to provide to skip to a particular spot in the list. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        /** This field contains the project Id for example: "projects/{PROJECT_ID}". */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** This field contains the project Id for example: "projects/{PROJECT_ID}".
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** This field contains the project Id for example: "projects/{PROJECT_ID}". */
        public List setParent(java.lang.String parent) {
          this.parent = parent;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates an existing `Note`.
       *
       * Create a request for the method "notes.patch".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name The name of the note.
      Should be of the form "projects/{provider_id}/notes/{note_id}".
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.Note}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.containeranalysis.v1alpha1.model.Note content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Note> {

        private static final String REST_PATH = "v1alpha1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^providers/[^/]+/notes/[^/]+$");

        /**
         * Updates an existing `Note`.
         *
         * Create a request for the method "notes.patch".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
         * operation. <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The name of the note.
      Should be of the form "projects/{provider_id}/notes/{note_id}".
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.Note}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.containeranalysis.v1alpha1.model.Note content) {
          super(ContainerAnalysis.this, "PATCH", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Note.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^providers/[^/]+/notes/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}".
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}".
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}".
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^providers/[^/]+/notes/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** The fields to update. */
        @com.google.api.client.util.Key
        private String updateMask;

        /** The fields to update.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /** The fields to update. */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }
      /**
       * Sets the access control policy on the specified `Note` or `Occurrence`. Requires
       * `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission
       * if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method
       * without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this
       * method on a non-existent resource will result in a `NOT_FOUND` error if the user has
       * `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on
       * an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following
       * formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and
       * projects/{projectid}/notes/{noteid} for notes
       *
       * Create a request for the method "notes.setIamPolicy".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy is being specified.
      See the operation documentation for
       *        the appropriate value for this field.
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.SetIamPolicyRequest}
       * @return the request
       */
      public SetIamPolicy setIamPolicy(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.SetIamPolicyRequest content) throws java.io.IOException {
        SetIamPolicy result = new SetIamPolicy(resource, content);
        initialize(result);
        return result;
      }

      public class SetIamPolicy extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.Policy> {

        private static final String REST_PATH = "v1alpha1/{+resource}:setIamPolicy";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^providers/[^/]+/notes/[^/]+$");

        /**
         * Sets the access control policy on the specified `Note` or `Occurrence`. Requires
         * `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy`
         * permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call
         * this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting
         * to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user
         * has `containeranalysis.notes.list` permission on a `Note` or
         * `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error
         * otherwise. The resource takes the following formats:
         * `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and
         * projects/{projectid}/notes/{noteid} for notes
         *
         * Create a request for the method "notes.setIamPolicy".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
         * operation. <p> {@link
         * SetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy is being specified.
      See the operation documentation for
       *        the appropriate value for this field.
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.SetIamPolicyRequest}
         * @since 1.13
         */
        protected SetIamPolicy(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.SetIamPolicyRequest content) {
          super(ContainerAnalysis.this, "POST", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.Policy.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^providers/[^/]+/notes/[^/]+$");
          }
        }

        @Override
        public SetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
          return (SetIamPolicy) super.set$Xgafv($Xgafv);
        }

        @Override
        public SetIamPolicy setAccessToken(java.lang.String accessToken) {
          return (SetIamPolicy) super.setAccessToken(accessToken);
        }

        @Override
        public SetIamPolicy setAlt(java.lang.String alt) {
          return (SetIamPolicy) super.setAlt(alt);
        }

        @Override
        public SetIamPolicy setCallback(java.lang.String callback) {
          return (SetIamPolicy) super.setCallback(callback);
        }

        @Override
        public SetIamPolicy setFields(java.lang.String fields) {
          return (SetIamPolicy) super.setFields(fields);
        }

        @Override
        public SetIamPolicy setKey(java.lang.String key) {
          return (SetIamPolicy) super.setKey(key);
        }

        @Override
        public SetIamPolicy setOauthToken(java.lang.String oauthToken) {
          return (SetIamPolicy) super.setOauthToken(oauthToken);
        }

        @Override
        public SetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (SetIamPolicy) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public SetIamPolicy setQuotaUser(java.lang.String quotaUser) {
          return (SetIamPolicy) super.setQuotaUser(quotaUser);
        }

        @Override
        public SetIamPolicy setUploadType(java.lang.String uploadType) {
          return (SetIamPolicy) super.setUploadType(uploadType);
        }

        @Override
        public SetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
          return (SetIamPolicy) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy is being specified. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy is being specified. See the operation documentation for
       the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy is being specified. See the operation
         * documentation for the appropriate value for this field.
         */
        public SetIamPolicy setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^providers/[^/]+/notes/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public SetIamPolicy set(String parameterName, Object value) {
          return (SetIamPolicy) super.set(parameterName, value);
        }
      }
      /**
       * Returns the permissions that a caller has on the specified note or occurrence resource. Requires
       * list permission on the project (for example, "storage.objects.list" on the containing bucket for
       * testing permission of an object). Attempting to call this method on a non-existent resource will
       * result in a `NOT_FOUND` error if the user has list permission on the project, or a
       * `PERMISSION_DENIED` error otherwise. The resource takes the following formats:
       * `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and
       * `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
       *
       * Create a request for the method "notes.testIamPermissions".
       *
       * This request holds the parameters needed by the containeranalysis server.  After setting any
       * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy detail is being requested.
      See the operation
       *        documentation for the appropriate value for this field.
       * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsRequest}
       * @return the request
       */
      public TestIamPermissions testIamPermissions(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsRequest content) throws java.io.IOException {
        TestIamPermissions result = new TestIamPermissions(resource, content);
        initialize(result);
        return result;
      }

      public class TestIamPermissions extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsResponse> {

        private static final String REST_PATH = "v1alpha1/{+resource}:testIamPermissions";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^providers/[^/]+/notes/[^/]+$");

        /**
         * Returns the permissions that a caller has on the specified note or occurrence resource.
         * Requires list permission on the project (for example, "storage.objects.list" on the containing
         * bucket for testing permission of an object). Attempting to call this method on a non-existent
         * resource will result in a `NOT_FOUND` error if the user has list permission on the project, or
         * a `PERMISSION_DENIED` error otherwise. The resource takes the following formats:
         * `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and
         * `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
         *
         * Create a request for the method "notes.testIamPermissions".
         *
         * This request holds the parameters needed by the the containeranalysis server.  After setting
         * any optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the
         * remote operation. <p> {@link TestIamPermissions#initialize(com.google.api.client.googleapis.ser
         * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
         * after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy detail is being requested.
      See the operation
       *        documentation for the appropriate value for this field.
         * @param content the {@link com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsRequest}
         * @since 1.13
         */
        protected TestIamPermissions(java.lang.String resource, com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsRequest content) {
          super(ContainerAnalysis.this, "POST", REST_PATH, content, com.google.api.services.containeranalysis.v1alpha1.model.TestIamPermissionsResponse.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^providers/[^/]+/notes/[^/]+$");
          }
        }

        @Override
        public TestIamPermissions set$Xgafv(java.lang.String $Xgafv) {
          return (TestIamPermissions) super.set$Xgafv($Xgafv);
        }

        @Override
        public TestIamPermissions setAccessToken(java.lang.String accessToken) {
          return (TestIamPermissions) super.setAccessToken(accessToken);
        }

        @Override
        public TestIamPermissions setAlt(java.lang.String alt) {
          return (TestIamPermissions) super.setAlt(alt);
        }

        @Override
        public TestIamPermissions setCallback(java.lang.String callback) {
          return (TestIamPermissions) super.setCallback(callback);
        }

        @Override
        public TestIamPermissions setFields(java.lang.String fields) {
          return (TestIamPermissions) super.setFields(fields);
        }

        @Override
        public TestIamPermissions setKey(java.lang.String key) {
          return (TestIamPermissions) super.setKey(key);
        }

        @Override
        public TestIamPermissions setOauthToken(java.lang.String oauthToken) {
          return (TestIamPermissions) super.setOauthToken(oauthToken);
        }

        @Override
        public TestIamPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (TestIamPermissions) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public TestIamPermissions setQuotaUser(java.lang.String quotaUser) {
          return (TestIamPermissions) super.setQuotaUser(quotaUser);
        }

        @Override
        public TestIamPermissions setUploadType(java.lang.String uploadType) {
          return (TestIamPermissions) super.setUploadType(uploadType);
        }

        @Override
        public TestIamPermissions setUploadProtocol(java.lang.String uploadProtocol) {
          return (TestIamPermissions) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy detail is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy detail is being requested. See the operation
       documentation for the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy detail is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        public TestIamPermissions setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^providers/[^/]+/notes/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public TestIamPermissions set(String parameterName, Object value) {
          return (TestIamPermissions) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Occurrences collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code ContainerAnalysis containeranalysis = new ContainerAnalysis(...);}
       *   {@code ContainerAnalysis.Occurrences.List request = containeranalysis.occurrences().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Occurrences occurrences() {
        return new Occurrences();
      }

      /**
       * The "occurrences" collection of methods.
       */
      public class Occurrences {

        /**
         * Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences
         * referencing your `Note` across all your customer projects.
         *
         * Create a request for the method "occurrences.list".
         *
         * This request holds the parameters needed by the containeranalysis server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param name The name field will contain the note name for example:
          "provider/{provider_id}/notes/{note_id}"
         * @return the request
         */
        public List list(java.lang.String name) throws java.io.IOException {
          List result = new List(name);
          initialize(result);
          return result;
        }

        public class List extends ContainerAnalysisRequest<com.google.api.services.containeranalysis.v1alpha1.model.ListNoteOccurrencesResponse> {

          private static final String REST_PATH = "v1alpha1/{+name}/occurrences";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^providers/[^/]+/notes/[^/]+$");

          /**
           * Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences
           * referencing your `Note` across all your customer projects.
           *
           * Create a request for the method "occurrences.list".
           *
           * This request holds the parameters needed by the the containeranalysis server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name field will contain the note name for example:
          "provider/{provider_id}/notes/{note_id}"
           * @since 1.13
           */
          protected List(java.lang.String name) {
            super(ContainerAnalysis.this, "GET", REST_PATH, null, com.google.api.services.containeranalysis.v1alpha1.model.ListNoteOccurrencesResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^providers/[^/]+/notes/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The name field will contain the note name for example:
           * "provider/{provider_id}/notes/{note_id}"
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name field will contain the note name for example: "provider/{provider_id}/notes/{note_id}"
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The name field will contain the note name for example:
           * "provider/{provider_id}/notes/{note_id}"
           */
          public List setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^providers/[^/]+/notes/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /** The filter expression. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** The filter expression.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** The filter expression. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** Number of notes to return in the list. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Number of notes to return in the list.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** Number of notes to return in the list. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** Token to provide to skip to a particular spot in the list. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Token to provide to skip to a particular spot in the list.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** Token to provide to skip to a particular spot in the list. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link ContainerAnalysis}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link ContainerAnalysis}. */
    @Override
    public ContainerAnalysis build() {
      return new ContainerAnalysis(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ContainerAnalysisRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setContainerAnalysisRequestInitializer(
        ContainerAnalysisRequestInitializer containeranalysisRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(containeranalysisRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
