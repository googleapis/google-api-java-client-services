/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Stores an ordered list of ranges of content from the original, processed, and intermediate
 * content, such that: 1. The original content can be reconstructed from the ranges of type
 * ORIGINAL_AND_PROCESSED, ORIGINAL_ONLY, and ORIGINAL_AND_INTERMEDIATE. 2. The processed content
 * can be reconstructed from the ranges of type ORIGINAL_AND_PROCESSED and PROCESSED_ONLY. 3. The
 * intermediate content (if present) can be reconstructed from the ranges of type
 * ORIGINAL_AND_INTERMEDIATE and INTERMEDIATE_ONLY.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingConverterRichContentDataRange extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rangeType;

  /**
   * Range size when uncompressed, in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer size;

  /**
   * The source of this range of content. Present iff 'type' is PROCESSED_ONLY or INTERMEDIATE_ONLY.
   * Note: 'source_type' is not present for ORIGINAL_AND_PROCESSED, ORIGINAL_ONLY, and
   * ORIGINAL_AND_INTERMEDIATE because for those range types the source of their content is the
   * original crawled content.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sourceType;

  /**
   * The source URL of this range of content. Present iff 'source_type' is present and 'source_type'
   * is FRAME or FLASH or IFRAME.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sourceUrl;

  /**
   * The content of the range, compressed with 'text_compression_method'. Present iff 'type' is
   * ORIGINAL_ONLY or ORIGINAL_AND_INTERMEDIATE or INTERMEDIATE_ONLY. Useful to reconstruct the
   * original content or the intermediate content. Note: 'text' is not present for
   * ORIGINAL_AND_PROCESSED and PROCESSED_ONLY because the processed content is already stored
   * separately (in the contents column, and in CompositeDoc.doc.Content.Representation).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String text;

  /**
   * Method used to compress the 'text' field. May be present only when the 'text' is present.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String textCompressionMethod;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getRangeType() {
    return rangeType;
  }

  /**
   * @param rangeType rangeType or {@code null} for none
   */
  public IndexingConverterRichContentDataRange setRangeType(java.lang.String rangeType) {
    this.rangeType = rangeType;
    return this;
  }

  /**
   * Range size when uncompressed, in bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSize() {
    return size;
  }

  /**
   * Range size when uncompressed, in bytes.
   * @param size size or {@code null} for none
   */
  public IndexingConverterRichContentDataRange setSize(java.lang.Integer size) {
    this.size = size;
    return this;
  }

  /**
   * The source of this range of content. Present iff 'type' is PROCESSED_ONLY or INTERMEDIATE_ONLY.
   * Note: 'source_type' is not present for ORIGINAL_AND_PROCESSED, ORIGINAL_ONLY, and
   * ORIGINAL_AND_INTERMEDIATE because for those range types the source of their content is the
   * original crawled content.
   * @return value or {@code null} for none
   */
  public java.lang.String getSourceType() {
    return sourceType;
  }

  /**
   * The source of this range of content. Present iff 'type' is PROCESSED_ONLY or INTERMEDIATE_ONLY.
   * Note: 'source_type' is not present for ORIGINAL_AND_PROCESSED, ORIGINAL_ONLY, and
   * ORIGINAL_AND_INTERMEDIATE because for those range types the source of their content is the
   * original crawled content.
   * @param sourceType sourceType or {@code null} for none
   */
  public IndexingConverterRichContentDataRange setSourceType(java.lang.String sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * The source URL of this range of content. Present iff 'source_type' is present and 'source_type'
   * is FRAME or FLASH or IFRAME.
   * @return value or {@code null} for none
   */
  public java.lang.String getSourceUrl() {
    return sourceUrl;
  }

  /**
   * The source URL of this range of content. Present iff 'source_type' is present and 'source_type'
   * is FRAME or FLASH or IFRAME.
   * @param sourceUrl sourceUrl or {@code null} for none
   */
  public IndexingConverterRichContentDataRange setSourceUrl(java.lang.String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * The content of the range, compressed with 'text_compression_method'. Present iff 'type' is
   * ORIGINAL_ONLY or ORIGINAL_AND_INTERMEDIATE or INTERMEDIATE_ONLY. Useful to reconstruct the
   * original content or the intermediate content. Note: 'text' is not present for
   * ORIGINAL_AND_PROCESSED and PROCESSED_ONLY because the processed content is already stored
   * separately (in the contents column, and in CompositeDoc.doc.Content.Representation).
   * @see #decodeText()
   * @return value or {@code null} for none
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * The content of the range, compressed with 'text_compression_method'. Present iff 'type' is
   * ORIGINAL_ONLY or ORIGINAL_AND_INTERMEDIATE or INTERMEDIATE_ONLY. Useful to reconstruct the
   * original content or the intermediate content. Note: 'text' is not present for
   * ORIGINAL_AND_PROCESSED and PROCESSED_ONLY because the processed content is already stored
   * separately (in the contents column, and in CompositeDoc.doc.Content.Representation).
   * @see #getText()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeText() {
    return com.google.api.client.util.Base64.decodeBase64(text);
  }

  /**
   * The content of the range, compressed with 'text_compression_method'. Present iff 'type' is
   * ORIGINAL_ONLY or ORIGINAL_AND_INTERMEDIATE or INTERMEDIATE_ONLY. Useful to reconstruct the
   * original content or the intermediate content. Note: 'text' is not present for
   * ORIGINAL_AND_PROCESSED and PROCESSED_ONLY because the processed content is already stored
   * separately (in the contents column, and in CompositeDoc.doc.Content.Representation).
   * @see #encodeText()
   * @param text text or {@code null} for none
   */
  public IndexingConverterRichContentDataRange setText(java.lang.String text) {
    this.text = text;
    return this;
  }

  /**
   * The content of the range, compressed with 'text_compression_method'. Present iff 'type' is
   * ORIGINAL_ONLY or ORIGINAL_AND_INTERMEDIATE or INTERMEDIATE_ONLY. Useful to reconstruct the
   * original content or the intermediate content. Note: 'text' is not present for
   * ORIGINAL_AND_PROCESSED and PROCESSED_ONLY because the processed content is already stored
   * separately (in the contents column, and in CompositeDoc.doc.Content.Representation).
   * @see #setText()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public IndexingConverterRichContentDataRange encodeText(byte[] text) {
    this.text = com.google.api.client.util.Base64.encodeBase64URLSafeString(text);
    return this;
  }

  /**
   * Method used to compress the 'text' field. May be present only when the 'text' is present.
   * @return value or {@code null} for none
   */
  public java.lang.String getTextCompressionMethod() {
    return textCompressionMethod;
  }

  /**
   * Method used to compress the 'text' field. May be present only when the 'text' is present.
   * @param textCompressionMethod textCompressionMethod or {@code null} for none
   */
  public IndexingConverterRichContentDataRange setTextCompressionMethod(java.lang.String textCompressionMethod) {
    this.textCompressionMethod = textCompressionMethod;
    return this;
  }

  @Override
  public IndexingConverterRichContentDataRange set(String fieldName, Object value) {
    return (IndexingConverterRichContentDataRange) super.set(fieldName, value);
  }

  @Override
  public IndexingConverterRichContentDataRange clone() {
    return (IndexingConverterRichContentDataRange) super.clone();
  }

}
