/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Language label
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoodocLanguageLabel extends com.google.api.client.json.GenericJson {

  /**
   * Closest id from i18n/languages/proto/languages.proto; caveat: may not accurately capture the
   * language. GoodocLanguageCodeToLanguage() declared in ocr/goodoc/goodoc-utils.h may be used to
   * convert a Language enum (i18n/languages/proto/languages.proto) to a string suitable for this
   * field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ClosestLanguageId")
  private java.lang.Integer closestLanguageId;

  /**
   * Confidence level on that language, between 0 and 100
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Confidence")
  private java.lang.Integer confidence;

  /**
   * Old (Ocean) Language Code Usage: The language code is inferred during the running of the
   * Garbage Text Detector and gets set at the paragraph, block and page level. Language code is a
   * string of 3 or more characters. The first 3 letters specify the language, according to ISO 639.
   * Optionally, the 3-letter code can be extended with an underscore and a language variant
   * specifier. Specifiers exist for regional variants or for different forms of language spelling.
   * The regional variants are specified as 2-letter country code, according to ISO 3166. Some
   * examples: Standard "por" - Portuguese, standard "rus" - Russian, standard Regional variants:
   * "por_br" - Portuguese, Brazilian "eng_us" - English, United States Variants of spelling:
   * "rus_old" - Russian, old spelling "chi_tra" - Chinese, traditional "ger_new" - German, new
   * spelling LanguageToGoodocLanguageCode() declared in ocr/goodoc/goodoc-utils.h may be used to
   * convert a Language enum (i18n/languages/proto/languages.proto) to a string suitable for this
   * field. New Language Code Usage: Most of the usages described above were standardized in BCP 47,
   * and these codes are the new stanadard to be used in this field. To load either new or old
   * language codes to form LanguageCode objects, use the function FromOceanCode() in
   * ocr/quality/lang_util.h Note that the function ocr::FromOceanCode is capable of transforming
   * either version of the LanguageCode to a C++ i18n_identifiers::LanguageCode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("LanguageCode")
  private java.lang.String languageCode;

  /**
   * Closest id from i18n/languages/proto/languages.proto; caveat: may not accurately capture the
   * language. GoodocLanguageCodeToLanguage() declared in ocr/goodoc/goodoc-utils.h may be used to
   * convert a Language enum (i18n/languages/proto/languages.proto) to a string suitable for this
   * field.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getClosestLanguageId() {
    return closestLanguageId;
  }

  /**
   * Closest id from i18n/languages/proto/languages.proto; caveat: may not accurately capture the
   * language. GoodocLanguageCodeToLanguage() declared in ocr/goodoc/goodoc-utils.h may be used to
   * convert a Language enum (i18n/languages/proto/languages.proto) to a string suitable for this
   * field.
   * @param closestLanguageId closestLanguageId or {@code null} for none
   */
  public GoodocLanguageLabel setClosestLanguageId(java.lang.Integer closestLanguageId) {
    this.closestLanguageId = closestLanguageId;
    return this;
  }

  /**
   * Confidence level on that language, between 0 and 100
   * @return value or {@code null} for none
   */
  public java.lang.Integer getConfidence() {
    return confidence;
  }

  /**
   * Confidence level on that language, between 0 and 100
   * @param confidence confidence or {@code null} for none
   */
  public GoodocLanguageLabel setConfidence(java.lang.Integer confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Old (Ocean) Language Code Usage: The language code is inferred during the running of the
   * Garbage Text Detector and gets set at the paragraph, block and page level. Language code is a
   * string of 3 or more characters. The first 3 letters specify the language, according to ISO 639.
   * Optionally, the 3-letter code can be extended with an underscore and a language variant
   * specifier. Specifiers exist for regional variants or for different forms of language spelling.
   * The regional variants are specified as 2-letter country code, according to ISO 3166. Some
   * examples: Standard "por" - Portuguese, standard "rus" - Russian, standard Regional variants:
   * "por_br" - Portuguese, Brazilian "eng_us" - English, United States Variants of spelling:
   * "rus_old" - Russian, old spelling "chi_tra" - Chinese, traditional "ger_new" - German, new
   * spelling LanguageToGoodocLanguageCode() declared in ocr/goodoc/goodoc-utils.h may be used to
   * convert a Language enum (i18n/languages/proto/languages.proto) to a string suitable for this
   * field. New Language Code Usage: Most of the usages described above were standardized in BCP 47,
   * and these codes are the new stanadard to be used in this field. To load either new or old
   * language codes to form LanguageCode objects, use the function FromOceanCode() in
   * ocr/quality/lang_util.h Note that the function ocr::FromOceanCode is capable of transforming
   * either version of the LanguageCode to a C++ i18n_identifiers::LanguageCode.
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguageCode() {
    return languageCode;
  }

  /**
   * Old (Ocean) Language Code Usage: The language code is inferred during the running of the
   * Garbage Text Detector and gets set at the paragraph, block and page level. Language code is a
   * string of 3 or more characters. The first 3 letters specify the language, according to ISO 639.
   * Optionally, the 3-letter code can be extended with an underscore and a language variant
   * specifier. Specifiers exist for regional variants or for different forms of language spelling.
   * The regional variants are specified as 2-letter country code, according to ISO 3166. Some
   * examples: Standard "por" - Portuguese, standard "rus" - Russian, standard Regional variants:
   * "por_br" - Portuguese, Brazilian "eng_us" - English, United States Variants of spelling:
   * "rus_old" - Russian, old spelling "chi_tra" - Chinese, traditional "ger_new" - German, new
   * spelling LanguageToGoodocLanguageCode() declared in ocr/goodoc/goodoc-utils.h may be used to
   * convert a Language enum (i18n/languages/proto/languages.proto) to a string suitable for this
   * field. New Language Code Usage: Most of the usages described above were standardized in BCP 47,
   * and these codes are the new stanadard to be used in this field. To load either new or old
   * language codes to form LanguageCode objects, use the function FromOceanCode() in
   * ocr/quality/lang_util.h Note that the function ocr::FromOceanCode is capable of transforming
   * either version of the LanguageCode to a C++ i18n_identifiers::LanguageCode.
   * @param languageCode languageCode or {@code null} for none
   */
  public GoodocLanguageLabel setLanguageCode(java.lang.String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  @Override
  public GoodocLanguageLabel set(String fieldName, Object value) {
    return (GoodocLanguageLabel) super.set(fieldName, value);
  }

  @Override
  public GoodocLanguageLabel clone() {
    return (GoodocLanguageLabel) super.clone();
  }

}
