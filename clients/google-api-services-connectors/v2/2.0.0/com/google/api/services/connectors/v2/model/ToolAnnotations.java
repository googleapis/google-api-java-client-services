/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.connectors.v2.model;

/**
 * ToolAnnotations holds annotations for a tool.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Connectors API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ToolAnnotations extends com.google.api.client.json.GenericJson {

  /**
   * If true, the tool may perform destructive updates to its environment. If false, the tool
   * performs only additive updates. (This property is meaningful only when `read_only_hint ==
   * false`)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean destructiveHint;

  /**
   * If true, calling the tool repeatedly with the same arguments will have no additional effect on
   * the environment. (This property is meaningful only when `read_only_hint == false`)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean idempotentHint;

  /**
   * If true, this tool may interact with an "open world" of external entities. If false, the tool's
   * domain of interaction is closed. For example, the world of a web search tool is open, whereas
   * that of a memory tool is not.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean openWorldHint;

  /**
   * If true, the tool does not modify its environment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean readOnlyHint;

  /**
   * A human-readable title for the tool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String title;

  /**
   * If true, the tool may perform destructive updates to its environment. If false, the tool
   * performs only additive updates. (This property is meaningful only when `read_only_hint ==
   * false`)
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDestructiveHint() {
    return destructiveHint;
  }

  /**
   * If true, the tool may perform destructive updates to its environment. If false, the tool
   * performs only additive updates. (This property is meaningful only when `read_only_hint ==
   * false`)
   * @param destructiveHint destructiveHint or {@code null} for none
   */
  public ToolAnnotations setDestructiveHint(java.lang.Boolean destructiveHint) {
    this.destructiveHint = destructiveHint;
    return this;
  }

  /**
   * If true, calling the tool repeatedly with the same arguments will have no additional effect on
   * the environment. (This property is meaningful only when `read_only_hint == false`)
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIdempotentHint() {
    return idempotentHint;
  }

  /**
   * If true, calling the tool repeatedly with the same arguments will have no additional effect on
   * the environment. (This property is meaningful only when `read_only_hint == false`)
   * @param idempotentHint idempotentHint or {@code null} for none
   */
  public ToolAnnotations setIdempotentHint(java.lang.Boolean idempotentHint) {
    this.idempotentHint = idempotentHint;
    return this;
  }

  /**
   * If true, this tool may interact with an "open world" of external entities. If false, the tool's
   * domain of interaction is closed. For example, the world of a web search tool is open, whereas
   * that of a memory tool is not.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getOpenWorldHint() {
    return openWorldHint;
  }

  /**
   * If true, this tool may interact with an "open world" of external entities. If false, the tool's
   * domain of interaction is closed. For example, the world of a web search tool is open, whereas
   * that of a memory tool is not.
   * @param openWorldHint openWorldHint or {@code null} for none
   */
  public ToolAnnotations setOpenWorldHint(java.lang.Boolean openWorldHint) {
    this.openWorldHint = openWorldHint;
    return this;
  }

  /**
   * If true, the tool does not modify its environment.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReadOnlyHint() {
    return readOnlyHint;
  }

  /**
   * If true, the tool does not modify its environment.
   * @param readOnlyHint readOnlyHint or {@code null} for none
   */
  public ToolAnnotations setReadOnlyHint(java.lang.Boolean readOnlyHint) {
    this.readOnlyHint = readOnlyHint;
    return this;
  }

  /**
   * A human-readable title for the tool.
   * @return value or {@code null} for none
   */
  public java.lang.String getTitle() {
    return title;
  }

  /**
   * A human-readable title for the tool.
   * @param title title or {@code null} for none
   */
  public ToolAnnotations setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  @Override
  public ToolAnnotations set(String fieldName, Object value) {
    return (ToolAnnotations) super.set(fieldName, value);
  }

  @Override
  public ToolAnnotations clone() {
    return (ToolAnnotations) super.clone();
  }

}
