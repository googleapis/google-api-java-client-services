/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.recaptchaenterprise.v1.model;

/**
 * Metrics related to challenges.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the reCAPTCHA Enterprise API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudRecaptchaenterpriseV1ChallengeMetrics extends com.google.api.client.json.GenericJson {

  /**
   * Count of submitted challenge solutions that were incorrect or otherwise deemed suspicious such
   * that a subsequent challenge was triggered.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long failedCount;

  /**
   * Count of nocaptchas (successful verification without a challenge) issued.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long nocaptchaCount;

  /**
   * Count of reCAPTCHA checkboxes or badges rendered. This is mostly equivalent to a count of
   * pageloads for pages that include reCAPTCHA.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long pageloadCount;

  /**
   * Count of nocaptchas (successful verification without a challenge) plus submitted challenge
   * solutions that were correct and resulted in verification.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long passedCount;

  /**
   * Count of submitted challenge solutions that were incorrect or otherwise deemed suspicious such
   * that a subsequent challenge was triggered.
   * @return value or {@code null} for none
   */
  public java.lang.Long getFailedCount() {
    return failedCount;
  }

  /**
   * Count of submitted challenge solutions that were incorrect or otherwise deemed suspicious such
   * that a subsequent challenge was triggered.
   * @param failedCount failedCount or {@code null} for none
   */
  public GoogleCloudRecaptchaenterpriseV1ChallengeMetrics setFailedCount(java.lang.Long failedCount) {
    this.failedCount = failedCount;
    return this;
  }

  /**
   * Count of nocaptchas (successful verification without a challenge) issued.
   * @return value or {@code null} for none
   */
  public java.lang.Long getNocaptchaCount() {
    return nocaptchaCount;
  }

  /**
   * Count of nocaptchas (successful verification without a challenge) issued.
   * @param nocaptchaCount nocaptchaCount or {@code null} for none
   */
  public GoogleCloudRecaptchaenterpriseV1ChallengeMetrics setNocaptchaCount(java.lang.Long nocaptchaCount) {
    this.nocaptchaCount = nocaptchaCount;
    return this;
  }

  /**
   * Count of reCAPTCHA checkboxes or badges rendered. This is mostly equivalent to a count of
   * pageloads for pages that include reCAPTCHA.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPageloadCount() {
    return pageloadCount;
  }

  /**
   * Count of reCAPTCHA checkboxes or badges rendered. This is mostly equivalent to a count of
   * pageloads for pages that include reCAPTCHA.
   * @param pageloadCount pageloadCount or {@code null} for none
   */
  public GoogleCloudRecaptchaenterpriseV1ChallengeMetrics setPageloadCount(java.lang.Long pageloadCount) {
    this.pageloadCount = pageloadCount;
    return this;
  }

  /**
   * Count of nocaptchas (successful verification without a challenge) plus submitted challenge
   * solutions that were correct and resulted in verification.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPassedCount() {
    return passedCount;
  }

  /**
   * Count of nocaptchas (successful verification without a challenge) plus submitted challenge
   * solutions that were correct and resulted in verification.
   * @param passedCount passedCount or {@code null} for none
   */
  public GoogleCloudRecaptchaenterpriseV1ChallengeMetrics setPassedCount(java.lang.Long passedCount) {
    this.passedCount = passedCount;
    return this;
  }

  @Override
  public GoogleCloudRecaptchaenterpriseV1ChallengeMetrics set(String fieldName, Object value) {
    return (GoogleCloudRecaptchaenterpriseV1ChallengeMetrics) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudRecaptchaenterpriseV1ChallengeMetrics clone() {
    return (GoogleCloudRecaptchaenterpriseV1ChallengeMetrics) super.clone();
  }

}
