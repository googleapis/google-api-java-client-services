/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.documentai.v1.model;

/**
 * Font and other text style attributes.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Document AI API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo extends com.google.api.client.json.GenericJson {

  /**
   * Color of the background.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeColor backgroundColor;

  /**
   * Whether the text is bold (equivalent to font weight >= 700).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean bold;

  /**
   * Font size in points (1 point is 1/72").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer fontSize;

  /**
   * Name or style of the font.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fontType;

  /**
   * TrueType weight on a scale 100 (Thin) to 1000 (Ultra-heavy). Normal is 400, Bold is 700.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer fontWeight;

  /**
   * Whether the text is handwritten.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean handwritten;

  /**
   * Whether the text is italic.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean italic;

  /**
   * Letter spacing in points.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double letterSpacing;

  /**
   * Font size in pixels, equal to unrounded_fontsize * resolution / 72.0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double pixelFontSize;

  /**
   * Whether the text are small caps.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean smallcaps;

  /**
   * Whether the text is strikethrough.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean strikeout;

  /**
   * Whether the text is a subscript.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean subscript;

  /**
   * Whether the text is a superscript.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean superscript;

  /**
   * Color of the text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeColor textColor;

  /**
   * Whether the text is underlined.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean underlined;

  /**
   * Color of the background.
   * @return value or {@code null} for none
   */
  public GoogleTypeColor getBackgroundColor() {
    return backgroundColor;
  }

  /**
   * Color of the background.
   * @param backgroundColor backgroundColor or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setBackgroundColor(GoogleTypeColor backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Whether the text is bold (equivalent to font weight >= 700).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getBold() {
    return bold;
  }

  /**
   * Whether the text is bold (equivalent to font weight >= 700).
   * @param bold bold or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setBold(java.lang.Boolean bold) {
    this.bold = bold;
    return this;
  }

  /**
   * Font size in points (1 point is 1/72").
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFontSize() {
    return fontSize;
  }

  /**
   * Font size in points (1 point is 1/72").
   * @param fontSize fontSize or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setFontSize(java.lang.Integer fontSize) {
    this.fontSize = fontSize;
    return this;
  }

  /**
   * Name or style of the font.
   * @return value or {@code null} for none
   */
  public java.lang.String getFontType() {
    return fontType;
  }

  /**
   * Name or style of the font.
   * @param fontType fontType or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setFontType(java.lang.String fontType) {
    this.fontType = fontType;
    return this;
  }

  /**
   * TrueType weight on a scale 100 (Thin) to 1000 (Ultra-heavy). Normal is 400, Bold is 700.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFontWeight() {
    return fontWeight;
  }

  /**
   * TrueType weight on a scale 100 (Thin) to 1000 (Ultra-heavy). Normal is 400, Bold is 700.
   * @param fontWeight fontWeight or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setFontWeight(java.lang.Integer fontWeight) {
    this.fontWeight = fontWeight;
    return this;
  }

  /**
   * Whether the text is handwritten.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHandwritten() {
    return handwritten;
  }

  /**
   * Whether the text is handwritten.
   * @param handwritten handwritten or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setHandwritten(java.lang.Boolean handwritten) {
    this.handwritten = handwritten;
    return this;
  }

  /**
   * Whether the text is italic.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getItalic() {
    return italic;
  }

  /**
   * Whether the text is italic.
   * @param italic italic or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setItalic(java.lang.Boolean italic) {
    this.italic = italic;
    return this;
  }

  /**
   * Letter spacing in points.
   * @return value or {@code null} for none
   */
  public java.lang.Double getLetterSpacing() {
    return letterSpacing;
  }

  /**
   * Letter spacing in points.
   * @param letterSpacing letterSpacing or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setLetterSpacing(java.lang.Double letterSpacing) {
    this.letterSpacing = letterSpacing;
    return this;
  }

  /**
   * Font size in pixels, equal to unrounded_fontsize * resolution / 72.0.
   * @return value or {@code null} for none
   */
  public java.lang.Double getPixelFontSize() {
    return pixelFontSize;
  }

  /**
   * Font size in pixels, equal to unrounded_fontsize * resolution / 72.0.
   * @param pixelFontSize pixelFontSize or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setPixelFontSize(java.lang.Double pixelFontSize) {
    this.pixelFontSize = pixelFontSize;
    return this;
  }

  /**
   * Whether the text are small caps.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSmallcaps() {
    return smallcaps;
  }

  /**
   * Whether the text are small caps.
   * @param smallcaps smallcaps or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setSmallcaps(java.lang.Boolean smallcaps) {
    this.smallcaps = smallcaps;
    return this;
  }

  /**
   * Whether the text is strikethrough.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getStrikeout() {
    return strikeout;
  }

  /**
   * Whether the text is strikethrough.
   * @param strikeout strikeout or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setStrikeout(java.lang.Boolean strikeout) {
    this.strikeout = strikeout;
    return this;
  }

  /**
   * Whether the text is a subscript.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSubscript() {
    return subscript;
  }

  /**
   * Whether the text is a subscript.
   * @param subscript subscript or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setSubscript(java.lang.Boolean subscript) {
    this.subscript = subscript;
    return this;
  }

  /**
   * Whether the text is a superscript.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSuperscript() {
    return superscript;
  }

  /**
   * Whether the text is a superscript.
   * @param superscript superscript or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setSuperscript(java.lang.Boolean superscript) {
    this.superscript = superscript;
    return this;
  }

  /**
   * Color of the text.
   * @return value or {@code null} for none
   */
  public GoogleTypeColor getTextColor() {
    return textColor;
  }

  /**
   * Color of the text.
   * @param textColor textColor or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setTextColor(GoogleTypeColor textColor) {
    this.textColor = textColor;
    return this;
  }

  /**
   * Whether the text is underlined.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUnderlined() {
    return underlined;
  }

  /**
   * Whether the text is underlined.
   * @param underlined underlined or {@code null} for none
   */
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo setUnderlined(java.lang.Boolean underlined) {
    this.underlined = underlined;
    return this;
  }

  @Override
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo set(String fieldName, Object value) {
    return (GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo clone() {
    return (GoogleCloudDocumentaiV1DocumentPageTokenStyleInfo) super.clone();
  }

}
