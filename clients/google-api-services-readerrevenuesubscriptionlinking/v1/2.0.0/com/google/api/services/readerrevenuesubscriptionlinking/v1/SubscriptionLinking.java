/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.readerrevenuesubscriptionlinking.v1;

/**
 * Service definition for SubscriptionLinking (v1).
 *
 * <p>
 * readerrevenuesubscriptionlinking.googleapis.com API.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/news/subscribe/subscription-linking/overview" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link SubscriptionLinkingRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class SubscriptionLinking extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Reader Revenue Subscription Linking API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://readerrevenuesubscriptionlinking.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://readerrevenuesubscriptionlinking.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public SubscriptionLinking(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  SubscriptionLinking(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Publications collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code SubscriptionLinking readerrevenuesubscriptionlinking = new SubscriptionLinking(...);}
   *   {@code SubscriptionLinking.Publications.List request = readerrevenuesubscriptionlinking.publications().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Publications publications() {
    return new Publications();
  }

  /**
   * The "publications" collection of methods.
   */
  public class Publications {

    /**
     * An accessor for creating requests from the Readers collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SubscriptionLinking readerrevenuesubscriptionlinking = new SubscriptionLinking(...);}
     *   {@code SubscriptionLinking.Readers.List request = readerrevenuesubscriptionlinking.readers().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Readers readers() {
      return new Readers();
    }

    /**
     * The "readers" collection of methods.
     */
    public class Readers {

      /**
       * Removes a publication reader, effectively severing the association with a Google user. If `force`
       * is set to true, any entitlements for this reader will also be deleted. (Otherwise, the request
       * will only work if the reader has no entitlements.) - If the reader does not exist, return
       * NOT_FOUND. - Return FAILED_PRECONDITION if the force field is false (or unset) and entitlements
       * are present.
       *
       * Create a request for the method "readers.delete".
       *
       * This request holds the parameters needed by the readerrevenuesubscriptionlinking server.  After
       * setting any optional parameters, call the {@link Delete#execute()} method to invoke the remote
       * operation.
       *
       * @param name Required. The resource name of the reader. Format: publications/{publication_id}/readers/{ppid}
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends SubscriptionLinkingRequest<com.google.api.services.readerrevenuesubscriptionlinking.v1.model.DeleteReaderResponse> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^publications/[^/]+/readers/[^/]+$");

        /**
         * Removes a publication reader, effectively severing the association with a Google user. If
         * `force` is set to true, any entitlements for this reader will also be deleted. (Otherwise, the
         * request will only work if the reader has no entitlements.) - If the reader does not exist,
         * return NOT_FOUND. - Return FAILED_PRECONDITION if the force field is false (or unset) and
         * entitlements are present.
         *
         * Create a request for the method "readers.delete".
         *
         * This request holds the parameters needed by the the readerrevenuesubscriptionlinking server.
         * After setting any optional parameters, call the {@link Delete#execute()} method to invoke the
         * remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The resource name of the reader. Format: publications/{publication_id}/readers/{ppid}
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(SubscriptionLinking.this, "DELETE", REST_PATH, null, com.google.api.services.readerrevenuesubscriptionlinking.v1.model.DeleteReaderResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publications/[^/]+/readers/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The resource name of the reader. Format:
         * publications/{publication_id}/readers/{ppid}
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The resource name of the reader. Format: publications/{publication_id}/readers/{ppid}
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The resource name of the reader. Format:
         * publications/{publication_id}/readers/{ppid}
         */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publications/[^/]+/readers/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** If set to true, any entitlements under the reader will also be purged. */
        @com.google.api.client.util.Key
        private java.lang.Boolean force;

        /** If set to true, any entitlements under the reader will also be purged.
         */
        public java.lang.Boolean getForce() {
          return force;
        }

        /** If set to true, any entitlements under the reader will also be purged. */
        public Delete setForce(java.lang.Boolean force) {
          this.force = force;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Gets a reader of a publication. Returns NOT_FOUND if the reader does not exist.
       *
       * Create a request for the method "readers.get".
       *
       * This request holds the parameters needed by the readerrevenuesubscriptionlinking server.  After
       * setting any optional parameters, call the {@link Get#execute()} method to invoke the remote
       * operation.
       *
       * @param name Required. The resource name of the reader. Format: publications/{publication_id}/readers/{ppid}
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends SubscriptionLinkingRequest<com.google.api.services.readerrevenuesubscriptionlinking.v1.model.Reader> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^publications/[^/]+/readers/[^/]+$");

        /**
         * Gets a reader of a publication. Returns NOT_FOUND if the reader does not exist.
         *
         * Create a request for the method "readers.get".
         *
         * This request holds the parameters needed by the the readerrevenuesubscriptionlinking server.
         * After setting any optional parameters, call the {@link Get#execute()} method to invoke the
         * remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The resource name of the reader. Format: publications/{publication_id}/readers/{ppid}
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(SubscriptionLinking.this, "GET", REST_PATH, null, com.google.api.services.readerrevenuesubscriptionlinking.v1.model.Reader.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publications/[^/]+/readers/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The resource name of the reader. Format:
         * publications/{publication_id}/readers/{ppid}
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The resource name of the reader. Format: publications/{publication_id}/readers/{ppid}
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The resource name of the reader. Format:
         * publications/{publication_id}/readers/{ppid}
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publications/[^/]+/readers/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Gets the reader entitlements for a publication reader. - Returns PERMISSION_DENIED if the caller
       * does not have access. - Returns NOT_FOUND if the reader does not exist.
       *
       * Create a request for the method "readers.getEntitlements".
       *
       * This request holds the parameters needed by the readerrevenuesubscriptionlinking server.  After
       * setting any optional parameters, call the {@link GetEntitlements#execute()} method to invoke the
       * remote operation.
       *
       * @param name Required. The name of the reader entitlements to retrieve. Format:
       *        publications/{publication_id}/readers/{reader_id}/entitlements
       * @return the request
       */
      public GetEntitlements getEntitlements(java.lang.String name) throws java.io.IOException {
        GetEntitlements result = new GetEntitlements(name);
        initialize(result);
        return result;
      }

      public class GetEntitlements extends SubscriptionLinkingRequest<com.google.api.services.readerrevenuesubscriptionlinking.v1.model.ReaderEntitlements> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^publications/[^/]+/readers/[^/]+/entitlements$");

        /**
         * Gets the reader entitlements for a publication reader. - Returns PERMISSION_DENIED if the
         * caller does not have access. - Returns NOT_FOUND if the reader does not exist.
         *
         * Create a request for the method "readers.getEntitlements".
         *
         * This request holds the parameters needed by the the readerrevenuesubscriptionlinking server.
         * After setting any optional parameters, call the {@link GetEntitlements#execute()} method to
         * invoke the remote operation. <p> {@link GetEntitlements#initialize(com.google.api.client.google
         * apis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
         * immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the reader entitlements to retrieve. Format:
       *        publications/{publication_id}/readers/{reader_id}/entitlements
         * @since 1.13
         */
        protected GetEntitlements(java.lang.String name) {
          super(SubscriptionLinking.this, "GET", REST_PATH, null, com.google.api.services.readerrevenuesubscriptionlinking.v1.model.ReaderEntitlements.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publications/[^/]+/readers/[^/]+/entitlements$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public GetEntitlements set$Xgafv(java.lang.String $Xgafv) {
          return (GetEntitlements) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetEntitlements setAccessToken(java.lang.String accessToken) {
          return (GetEntitlements) super.setAccessToken(accessToken);
        }

        @Override
        public GetEntitlements setAlt(java.lang.String alt) {
          return (GetEntitlements) super.setAlt(alt);
        }

        @Override
        public GetEntitlements setCallback(java.lang.String callback) {
          return (GetEntitlements) super.setCallback(callback);
        }

        @Override
        public GetEntitlements setFields(java.lang.String fields) {
          return (GetEntitlements) super.setFields(fields);
        }

        @Override
        public GetEntitlements setKey(java.lang.String key) {
          return (GetEntitlements) super.setKey(key);
        }

        @Override
        public GetEntitlements setOauthToken(java.lang.String oauthToken) {
          return (GetEntitlements) super.setOauthToken(oauthToken);
        }

        @Override
        public GetEntitlements setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetEntitlements) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetEntitlements setQuotaUser(java.lang.String quotaUser) {
          return (GetEntitlements) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetEntitlements setUploadType(java.lang.String uploadType) {
          return (GetEntitlements) super.setUploadType(uploadType);
        }

        @Override
        public GetEntitlements setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetEntitlements) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the reader entitlements to retrieve. Format:
         * publications/{publication_id}/readers/{reader_id}/entitlements
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the reader entitlements to retrieve. Format:
       publications/{publication_id}/readers/{reader_id}/entitlements
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the reader entitlements to retrieve. Format:
         * publications/{publication_id}/readers/{reader_id}/entitlements
         */
        public GetEntitlements setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publications/[^/]+/readers/[^/]+/entitlements$");
          }
          this.name = name;
          return this;
        }

        @Override
        public GetEntitlements set(String parameterName, Object value) {
          return (GetEntitlements) super.set(parameterName, value);
        }
      }
      /**
       * Updates the reader entitlements for a publication reader. The entire reader entitlements will be
       * overwritten by the new reader entitlements in the payload, like a PUT. - Returns
       * PERMISSION_DENIED if the caller does not have access. - Returns NOT_FOUND if the reader does not
       * exist.
       *
       * Create a request for the method "readers.updateEntitlements".
       *
       * This request holds the parameters needed by the readerrevenuesubscriptionlinking server.  After
       * setting any optional parameters, call the {@link UpdateEntitlements#execute()} method to invoke
       * the remote operation.
       *
       * @param name Output only. The resource name of the singleton.
       * @param content the {@link com.google.api.services.readerrevenuesubscriptionlinking.v1.model.ReaderEntitlements}
       * @return the request
       */
      public UpdateEntitlements updateEntitlements(java.lang.String name, com.google.api.services.readerrevenuesubscriptionlinking.v1.model.ReaderEntitlements content) throws java.io.IOException {
        UpdateEntitlements result = new UpdateEntitlements(name, content);
        initialize(result);
        return result;
      }

      public class UpdateEntitlements extends SubscriptionLinkingRequest<com.google.api.services.readerrevenuesubscriptionlinking.v1.model.ReaderEntitlements> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^publications/[^/]+/readers/[^/]+/entitlements$");

        /**
         * Updates the reader entitlements for a publication reader. The entire reader entitlements will
         * be overwritten by the new reader entitlements in the payload, like a PUT. - Returns
         * PERMISSION_DENIED if the caller does not have access. - Returns NOT_FOUND if the reader does
         * not exist.
         *
         * Create a request for the method "readers.updateEntitlements".
         *
         * This request holds the parameters needed by the the readerrevenuesubscriptionlinking server.
         * After setting any optional parameters, call the {@link UpdateEntitlements#execute()} method to
         * invoke the remote operation. <p> {@link UpdateEntitlements#initialize(com.google.api.client.goo
         * gleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
         * immediately after invoking the constructor. </p>
         *
         * @param name Output only. The resource name of the singleton.
         * @param content the {@link com.google.api.services.readerrevenuesubscriptionlinking.v1.model.ReaderEntitlements}
         * @since 1.13
         */
        protected UpdateEntitlements(java.lang.String name, com.google.api.services.readerrevenuesubscriptionlinking.v1.model.ReaderEntitlements content) {
          super(SubscriptionLinking.this, "PATCH", REST_PATH, content, com.google.api.services.readerrevenuesubscriptionlinking.v1.model.ReaderEntitlements.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publications/[^/]+/readers/[^/]+/entitlements$");
          }
        }

        @Override
        public UpdateEntitlements set$Xgafv(java.lang.String $Xgafv) {
          return (UpdateEntitlements) super.set$Xgafv($Xgafv);
        }

        @Override
        public UpdateEntitlements setAccessToken(java.lang.String accessToken) {
          return (UpdateEntitlements) super.setAccessToken(accessToken);
        }

        @Override
        public UpdateEntitlements setAlt(java.lang.String alt) {
          return (UpdateEntitlements) super.setAlt(alt);
        }

        @Override
        public UpdateEntitlements setCallback(java.lang.String callback) {
          return (UpdateEntitlements) super.setCallback(callback);
        }

        @Override
        public UpdateEntitlements setFields(java.lang.String fields) {
          return (UpdateEntitlements) super.setFields(fields);
        }

        @Override
        public UpdateEntitlements setKey(java.lang.String key) {
          return (UpdateEntitlements) super.setKey(key);
        }

        @Override
        public UpdateEntitlements setOauthToken(java.lang.String oauthToken) {
          return (UpdateEntitlements) super.setOauthToken(oauthToken);
        }

        @Override
        public UpdateEntitlements setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (UpdateEntitlements) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public UpdateEntitlements setQuotaUser(java.lang.String quotaUser) {
          return (UpdateEntitlements) super.setQuotaUser(quotaUser);
        }

        @Override
        public UpdateEntitlements setUploadType(java.lang.String uploadType) {
          return (UpdateEntitlements) super.setUploadType(uploadType);
        }

        @Override
        public UpdateEntitlements setUploadProtocol(java.lang.String uploadProtocol) {
          return (UpdateEntitlements) super.setUploadProtocol(uploadProtocol);
        }

        /** Output only. The resource name of the singleton. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Output only. The resource name of the singleton.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Output only. The resource name of the singleton. */
        public UpdateEntitlements setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publications/[^/]+/readers/[^/]+/entitlements$");
          }
          this.name = name;
          return this;
        }

        /** Optional. The list of fields to update. Defaults to all fields. */
        @com.google.api.client.util.Key
        private String updateMask;

        /** Optional. The list of fields to update. Defaults to all fields.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /** Optional. The list of fields to update. Defaults to all fields. */
        public UpdateEntitlements setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public UpdateEntitlements set(String parameterName, Object value) {
          return (UpdateEntitlements) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link SubscriptionLinking}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link SubscriptionLinking}. */
    @Override
    public SubscriptionLinking build() {
      return new SubscriptionLinking(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link SubscriptionLinkingRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setSubscriptionLinkingRequestInitializer(
        SubscriptionLinkingRequestInitializer subscriptionlinkingRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(subscriptionlinkingRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
