/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for ScienceIndexSignal.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ScienceIndexSignal extends com.google.api.client.json.GenericJson {

  /**
   * Subscriber Access feature: List of Holdings IDs associated with this document. Should be
   * present only for the documents with 'VisiblePrefixTerms' being set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("HoldingsId") @com.google.api.client.json.JsonString
  private java.util.List<java.math.BigInteger> holdingsId;

  /**
   * Fingerprint of the html title of the page. This is useful for checking if we have the same
   * version of the page as websearch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("HtmlTitleFp") @com.google.api.client.json.JsonString
  private java.lang.Long htmlTitleFp;

  /**
   * Index selection score for websearch, bigger is better: (0.5,1.0] - prefer selection into the
   * base index, (0.0,0.5] - prefer selection into the supplemental index.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("IndexSelectionScore")
  private java.lang.Float indexSelectionScore;

  /**
   * Summary statistics.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("NumBackwardLinks")
  private java.lang.Integer numBackwardLinks;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("NumRelated")
  private java.lang.Integer numRelated;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("NumVersions")
  private java.lang.Integer numVersions;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("PublicationDay")
  private java.lang.Integer publicationDay;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("PublicationMonth")
  private java.lang.Integer publicationMonth;

  /**
   * Publication date.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("PublicationYear")
  private java.lang.Integer publicationYear;

  /**
   * Remove this URL from the index - error page, broken landing page, etc. DEPRECATED, was never
   * used or even filled correctly.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("RemoveLink")
  private java.lang.Boolean removeLink;

  /**
   * For links from websearch to scholar.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ScholarId") @com.google.api.client.json.JsonString
  private java.math.BigInteger scholarId;

  /**
   * Title of the article. Its only filled in when the html title of the page isn't good.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Title")
  private java.lang.String title;

  /**
   * Length of document prefix that most users are likely to see. Only filled in when we index
   * subscription fulltext but most users see abstracts. This is a conservative guesstimate - e.g.,
   * ACM shows fulltext to university/company subscribers (including Google employees) based on
   * user's IP address, but we don't know subscriber IPs, so ACM's PDF pages would have ~500 in this
   * field (estimated length of abstract).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("VisiblePrefixTerms")
  private java.lang.Integer visiblePrefixTerms;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ScienceIndexSignalAuthor> author;

  /**
   * Subscriber Access feature: List of Holdings IDs associated with this document. Should be
   * present only for the documents with 'VisiblePrefixTerms' being set.
   * @return value or {@code null} for none
   */
  public java.util.List<java.math.BigInteger> getHoldingsId() {
    return holdingsId;
  }

  /**
   * Subscriber Access feature: List of Holdings IDs associated with this document. Should be
   * present only for the documents with 'VisiblePrefixTerms' being set.
   * @param holdingsId holdingsId or {@code null} for none
   */
  public ScienceIndexSignal setHoldingsId(java.util.List<java.math.BigInteger> holdingsId) {
    this.holdingsId = holdingsId;
    return this;
  }

  /**
   * Fingerprint of the html title of the page. This is useful for checking if we have the same
   * version of the page as websearch.
   * @return value or {@code null} for none
   */
  public java.lang.Long getHtmlTitleFp() {
    return htmlTitleFp;
  }

  /**
   * Fingerprint of the html title of the page. This is useful for checking if we have the same
   * version of the page as websearch.
   * @param htmlTitleFp htmlTitleFp or {@code null} for none
   */
  public ScienceIndexSignal setHtmlTitleFp(java.lang.Long htmlTitleFp) {
    this.htmlTitleFp = htmlTitleFp;
    return this;
  }

  /**
   * Index selection score for websearch, bigger is better: (0.5,1.0] - prefer selection into the
   * base index, (0.0,0.5] - prefer selection into the supplemental index.
   * @return value or {@code null} for none
   */
  public java.lang.Float getIndexSelectionScore() {
    return indexSelectionScore;
  }

  /**
   * Index selection score for websearch, bigger is better: (0.5,1.0] - prefer selection into the
   * base index, (0.0,0.5] - prefer selection into the supplemental index.
   * @param indexSelectionScore indexSelectionScore or {@code null} for none
   */
  public ScienceIndexSignal setIndexSelectionScore(java.lang.Float indexSelectionScore) {
    this.indexSelectionScore = indexSelectionScore;
    return this;
  }

  /**
   * Summary statistics.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumBackwardLinks() {
    return numBackwardLinks;
  }

  /**
   * Summary statistics.
   * @param numBackwardLinks numBackwardLinks or {@code null} for none
   */
  public ScienceIndexSignal setNumBackwardLinks(java.lang.Integer numBackwardLinks) {
    this.numBackwardLinks = numBackwardLinks;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumRelated() {
    return numRelated;
  }

  /**
   * @param numRelated numRelated or {@code null} for none
   */
  public ScienceIndexSignal setNumRelated(java.lang.Integer numRelated) {
    this.numRelated = numRelated;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumVersions() {
    return numVersions;
  }

  /**
   * @param numVersions numVersions or {@code null} for none
   */
  public ScienceIndexSignal setNumVersions(java.lang.Integer numVersions) {
    this.numVersions = numVersions;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPublicationDay() {
    return publicationDay;
  }

  /**
   * @param publicationDay publicationDay or {@code null} for none
   */
  public ScienceIndexSignal setPublicationDay(java.lang.Integer publicationDay) {
    this.publicationDay = publicationDay;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPublicationMonth() {
    return publicationMonth;
  }

  /**
   * @param publicationMonth publicationMonth or {@code null} for none
   */
  public ScienceIndexSignal setPublicationMonth(java.lang.Integer publicationMonth) {
    this.publicationMonth = publicationMonth;
    return this;
  }

  /**
   * Publication date.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPublicationYear() {
    return publicationYear;
  }

  /**
   * Publication date.
   * @param publicationYear publicationYear or {@code null} for none
   */
  public ScienceIndexSignal setPublicationYear(java.lang.Integer publicationYear) {
    this.publicationYear = publicationYear;
    return this;
  }

  /**
   * Remove this URL from the index - error page, broken landing page, etc. DEPRECATED, was never
   * used or even filled correctly.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRemoveLink() {
    return removeLink;
  }

  /**
   * Remove this URL from the index - error page, broken landing page, etc. DEPRECATED, was never
   * used or even filled correctly.
   * @param removeLink removeLink or {@code null} for none
   */
  public ScienceIndexSignal setRemoveLink(java.lang.Boolean removeLink) {
    this.removeLink = removeLink;
    return this;
  }

  /**
   * For links from websearch to scholar.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getScholarId() {
    return scholarId;
  }

  /**
   * For links from websearch to scholar.
   * @param scholarId scholarId or {@code null} for none
   */
  public ScienceIndexSignal setScholarId(java.math.BigInteger scholarId) {
    this.scholarId = scholarId;
    return this;
  }

  /**
   * Title of the article. Its only filled in when the html title of the page isn't good.
   * @return value or {@code null} for none
   */
  public java.lang.String getTitle() {
    return title;
  }

  /**
   * Title of the article. Its only filled in when the html title of the page isn't good.
   * @param title title or {@code null} for none
   */
  public ScienceIndexSignal setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  /**
   * Length of document prefix that most users are likely to see. Only filled in when we index
   * subscription fulltext but most users see abstracts. This is a conservative guesstimate - e.g.,
   * ACM shows fulltext to university/company subscribers (including Google employees) based on
   * user's IP address, but we don't know subscriber IPs, so ACM's PDF pages would have ~500 in this
   * field (estimated length of abstract).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getVisiblePrefixTerms() {
    return visiblePrefixTerms;
  }

  /**
   * Length of document prefix that most users are likely to see. Only filled in when we index
   * subscription fulltext but most users see abstracts. This is a conservative guesstimate - e.g.,
   * ACM shows fulltext to university/company subscribers (including Google employees) based on
   * user's IP address, but we don't know subscriber IPs, so ACM's PDF pages would have ~500 in this
   * field (estimated length of abstract).
   * @param visiblePrefixTerms visiblePrefixTerms or {@code null} for none
   */
  public ScienceIndexSignal setVisiblePrefixTerms(java.lang.Integer visiblePrefixTerms) {
    this.visiblePrefixTerms = visiblePrefixTerms;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<ScienceIndexSignalAuthor> getAuthor() {
    return author;
  }

  /**
   * @param author author or {@code null} for none
   */
  public ScienceIndexSignal setAuthor(java.util.List<ScienceIndexSignalAuthor> author) {
    this.author = author;
    return this;
  }

  @Override
  public ScienceIndexSignal set(String fieldName, Object value) {
    return (ScienceIndexSignal) super.set(fieldName, value);
  }

  @Override
  public ScienceIndexSignal clone() {
    return (ScienceIndexSignal) super.clone();
  }

}
