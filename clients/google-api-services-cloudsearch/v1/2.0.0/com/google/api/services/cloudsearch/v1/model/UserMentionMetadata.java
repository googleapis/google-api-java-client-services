/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Annotation metadata for user mentions (+/@/-).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class UserMentionMetadata extends com.google.api.client.json.GenericJson {

  /**
   * Display name of the mentioned user. This field should remain empty when clients resolve a
   * UserMention annotation. It will be filled in when a UserMention is generated by the Integration
   * Server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Gender of the mentioned user. One of "female", "male" or "other". Used for choosing accurate
   * translations for strings that contain the UserMention, when these need to be constructed (e.g.
   * task assignment update message). This field should remain empty when clients resolve a
   * UserMention. It will be filled in when a UserMention is generated by the Integration Server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gender;

  /**
   * To be deprecated. Use invitee_info field instead. ID of the User mentioned. This field should
   * remain empty when type == MENTION_ALL.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private UserId id;

  /**
   * Invitee UserId and email used when mentioned. This field should remain empty when type ==
   * MENTION_ALL. Invitee_info.email is only used when a user is @-mentioned with an email address,
   * and it will be empty when clients get messages from Backend.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private InviteeInfo inviteeInfo;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Display name of the mentioned user. This field should remain empty when clients resolve a
   * UserMention annotation. It will be filled in when a UserMention is generated by the Integration
   * Server.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Display name of the mentioned user. This field should remain empty when clients resolve a
   * UserMention annotation. It will be filled in when a UserMention is generated by the Integration
   * Server.
   * @param displayName displayName or {@code null} for none
   */
  public UserMentionMetadata setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Gender of the mentioned user. One of "female", "male" or "other". Used for choosing accurate
   * translations for strings that contain the UserMention, when these need to be constructed (e.g.
   * task assignment update message). This field should remain empty when clients resolve a
   * UserMention. It will be filled in when a UserMention is generated by the Integration Server.
   * @return value or {@code null} for none
   */
  public java.lang.String getGender() {
    return gender;
  }

  /**
   * Gender of the mentioned user. One of "female", "male" or "other". Used for choosing accurate
   * translations for strings that contain the UserMention, when these need to be constructed (e.g.
   * task assignment update message). This field should remain empty when clients resolve a
   * UserMention. It will be filled in when a UserMention is generated by the Integration Server.
   * @param gender gender or {@code null} for none
   */
  public UserMentionMetadata setGender(java.lang.String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * To be deprecated. Use invitee_info field instead. ID of the User mentioned. This field should
   * remain empty when type == MENTION_ALL.
   * @return value or {@code null} for none
   */
  public UserId getId() {
    return id;
  }

  /**
   * To be deprecated. Use invitee_info field instead. ID of the User mentioned. This field should
   * remain empty when type == MENTION_ALL.
   * @param id id or {@code null} for none
   */
  public UserMentionMetadata setId(UserId id) {
    this.id = id;
    return this;
  }

  /**
   * Invitee UserId and email used when mentioned. This field should remain empty when type ==
   * MENTION_ALL. Invitee_info.email is only used when a user is @-mentioned with an email address,
   * and it will be empty when clients get messages from Backend.
   * @return value or {@code null} for none
   */
  public InviteeInfo getInviteeInfo() {
    return inviteeInfo;
  }

  /**
   * Invitee UserId and email used when mentioned. This field should remain empty when type ==
   * MENTION_ALL. Invitee_info.email is only used when a user is @-mentioned with an email address,
   * and it will be empty when clients get messages from Backend.
   * @param inviteeInfo inviteeInfo or {@code null} for none
   */
  public UserMentionMetadata setInviteeInfo(InviteeInfo inviteeInfo) {
    this.inviteeInfo = inviteeInfo;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * @param type type or {@code null} for none
   */
  public UserMentionMetadata setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public UserMentionMetadata set(String fieldName, Object value) {
    return (UserMentionMetadata) super.set(fieldName, value);
  }

  @Override
  public UserMentionMetadata clone() {
    return (UserMentionMetadata) super.clone();
  }

}
