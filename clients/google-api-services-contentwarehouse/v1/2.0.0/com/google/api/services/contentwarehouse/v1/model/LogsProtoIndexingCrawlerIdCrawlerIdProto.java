/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Proto-representation of the Crawler-ID in Web-Search (Alexandria-Scope). The string-
 * representation (covered in //indexing/crawler_id/scope/alexandria/crawler_id.h) and the proto-
 * representation are identical in meaning. For more information in regard to the crawler_id, please
 * look at //depot/google3/indexing/crawler_id Used within the following components: - WebMirror: To
 * understand the parsed crawler-ID and apply attributes within their own tables. - Serving : to
 * identify the crawler-ID within the GenericSearchResponse, which implies being stored in the MDU
 * and returned by ascorer to Superroot. - QSessions: To store the crawler-ID in all logged events
 * for analysis. The default values represent the 'empty string' crawler-ID for the Alexandria-
 * scope.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LogsProtoIndexingCrawlerIdCrawlerIdProto extends com.google.api.client.json.GenericJson {

  /**
   * The country to crawl the country from, defaults to the default non-specified crawling node
   * (which is interpreted by most web-servers as USA). When specified, the crawling will fetch the
   * document from a node in that country instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String country;

  /**
   * The device type, which maps into the useragent to be set when initiating the fetch-request,
   * e.g. desktop-googlebot vs. smartphone-googlebot.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deviceType;

  /**
   * Specifies whether the document is a duplicated document from the index growth experiment,
   * detailed at go/indexsize_exp, defaults to not in any experiment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String indexGrowthExptType;

  /**
   * The language being set by the crawler. Defaults to UNKNOWN_LANGUAGE which indicates to not
   * apply an accept-language header on the FetchRequest. When a language is specified, on crawling
   * this language is converted into an accept-language header (e.g. GERMAN -> "Accept-language:
   * de"). Script variations, e.g. ZH-HANS vs. ZH-HANT, are handled as different enum values (e.g.
   * CHINESE vs. CHINESE_T).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String language;

  /**
   * Language-code used for identifying the locale of the document. 'language' and 'country' above
   * are used for web-based documents, representing the detected language of the document and the
   * country it was crawled from. The language code here, however, rather represents an artifical
   * language_code applied to manually translated webpages (e.g. feeds), for instance for the
   * pidgin-usecase. They are limited to the set of III-codes being supported by the client, yet are
   * beyond the enum in 'language', e.g. to support variants of English across different countries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String languageCode;

  /**
   * The country to crawl the country from, defaults to the default non-specified crawling node
   * (which is interpreted by most web-servers as USA). When specified, the crawling will fetch the
   * document from a node in that country instead.
   * @return value or {@code null} for none
   */
  public java.lang.String getCountry() {
    return country;
  }

  /**
   * The country to crawl the country from, defaults to the default non-specified crawling node
   * (which is interpreted by most web-servers as USA). When specified, the crawling will fetch the
   * document from a node in that country instead.
   * @param country country or {@code null} for none
   */
  public LogsProtoIndexingCrawlerIdCrawlerIdProto setCountry(java.lang.String country) {
    this.country = country;
    return this;
  }

  /**
   * The device type, which maps into the useragent to be set when initiating the fetch-request,
   * e.g. desktop-googlebot vs. smartphone-googlebot.
   * @return value or {@code null} for none
   */
  public java.lang.String getDeviceType() {
    return deviceType;
  }

  /**
   * The device type, which maps into the useragent to be set when initiating the fetch-request,
   * e.g. desktop-googlebot vs. smartphone-googlebot.
   * @param deviceType deviceType or {@code null} for none
   */
  public LogsProtoIndexingCrawlerIdCrawlerIdProto setDeviceType(java.lang.String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Specifies whether the document is a duplicated document from the index growth experiment,
   * detailed at go/indexsize_exp, defaults to not in any experiment.
   * @return value or {@code null} for none
   */
  public java.lang.String getIndexGrowthExptType() {
    return indexGrowthExptType;
  }

  /**
   * Specifies whether the document is a duplicated document from the index growth experiment,
   * detailed at go/indexsize_exp, defaults to not in any experiment.
   * @param indexGrowthExptType indexGrowthExptType or {@code null} for none
   */
  public LogsProtoIndexingCrawlerIdCrawlerIdProto setIndexGrowthExptType(java.lang.String indexGrowthExptType) {
    this.indexGrowthExptType = indexGrowthExptType;
    return this;
  }

  /**
   * The language being set by the crawler. Defaults to UNKNOWN_LANGUAGE which indicates to not
   * apply an accept-language header on the FetchRequest. When a language is specified, on crawling
   * this language is converted into an accept-language header (e.g. GERMAN -> "Accept-language:
   * de"). Script variations, e.g. ZH-HANS vs. ZH-HANT, are handled as different enum values (e.g.
   * CHINESE vs. CHINESE_T).
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguage() {
    return language;
  }

  /**
   * The language being set by the crawler. Defaults to UNKNOWN_LANGUAGE which indicates to not
   * apply an accept-language header on the FetchRequest. When a language is specified, on crawling
   * this language is converted into an accept-language header (e.g. GERMAN -> "Accept-language:
   * de"). Script variations, e.g. ZH-HANS vs. ZH-HANT, are handled as different enum values (e.g.
   * CHINESE vs. CHINESE_T).
   * @param language language or {@code null} for none
   */
  public LogsProtoIndexingCrawlerIdCrawlerIdProto setLanguage(java.lang.String language) {
    this.language = language;
    return this;
  }

  /**
   * Language-code used for identifying the locale of the document. 'language' and 'country' above
   * are used for web-based documents, representing the detected language of the document and the
   * country it was crawled from. The language code here, however, rather represents an artifical
   * language_code applied to manually translated webpages (e.g. feeds), for instance for the
   * pidgin-usecase. They are limited to the set of III-codes being supported by the client, yet are
   * beyond the enum in 'language', e.g. to support variants of English across different countries.
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguageCode() {
    return languageCode;
  }

  /**
   * Language-code used for identifying the locale of the document. 'language' and 'country' above
   * are used for web-based documents, representing the detected language of the document and the
   * country it was crawled from. The language code here, however, rather represents an artifical
   * language_code applied to manually translated webpages (e.g. feeds), for instance for the
   * pidgin-usecase. They are limited to the set of III-codes being supported by the client, yet are
   * beyond the enum in 'language', e.g. to support variants of English across different countries.
   * @param languageCode languageCode or {@code null} for none
   */
  public LogsProtoIndexingCrawlerIdCrawlerIdProto setLanguageCode(java.lang.String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  @Override
  public LogsProtoIndexingCrawlerIdCrawlerIdProto set(String fieldName, Object value) {
    return (LogsProtoIndexingCrawlerIdCrawlerIdProto) super.set(fieldName, value);
  }

  @Override
  public LogsProtoIndexingCrawlerIdCrawlerIdProto clone() {
    return (LogsProtoIndexingCrawlerIdCrawlerIdProto) super.clone();
  }

}
