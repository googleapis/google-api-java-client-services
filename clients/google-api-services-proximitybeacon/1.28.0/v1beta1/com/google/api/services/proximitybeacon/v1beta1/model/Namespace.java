/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.proximitybeacon.v1beta1.model;

/**
 * An attachment namespace defines read and write access for all the attachments created under it.
 * Each namespace is globally unique, and owned by one project which is the only project that can
 * create attachments under it.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Proximity Beacon API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Namespace extends com.google.api.client.json.GenericJson {

  /**
   * Resource name of this namespace. Namespaces names have the format: namespaces/namespace.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String namespaceName;

  /**
   * Specifies what clients may receive attachments under this namespace via
   * `beaconinfo.getforobserved`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String servingVisibility;

  /**
   * Resource name of this namespace. Namespaces names have the format: namespaces/namespace.
   * @return value or {@code null} for none
   */
  public java.lang.String getNamespaceName() {
    return namespaceName;
  }

  /**
   * Resource name of this namespace. Namespaces names have the format: namespaces/namespace.
   * @param namespaceName namespaceName or {@code null} for none
   */
  public Namespace setNamespaceName(java.lang.String namespaceName) {
    this.namespaceName = namespaceName;
    return this;
  }

  /**
   * Specifies what clients may receive attachments under this namespace via
   * `beaconinfo.getforobserved`.
   * @return value or {@code null} for none
   */
  public java.lang.String getServingVisibility() {
    return servingVisibility;
  }

  /**
   * Specifies what clients may receive attachments under this namespace via
   * `beaconinfo.getforobserved`.
   * @param servingVisibility servingVisibility or {@code null} for none
   */
  public Namespace setServingVisibility(java.lang.String servingVisibility) {
    this.servingVisibility = servingVisibility;
    return this;
  }

  @Override
  public Namespace set(String fieldName, Object value) {
    return (Namespace) super.set(fieldName, value);
  }

  @Override
  public Namespace clone() {
    return (Namespace) super.clone();
  }

}
