/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.artifactregistry.v1beta2.model;

/**
 * A detailed representation of an Apt artifact. Information in the record is derived from the
 * archive's control file. See https://www.debian.org/doc/debian-policy/ch-controlfields.html
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Artifact Registry API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AptArtifact extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Operating system architecture of the artifact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String architecture;

  /**
   * Output only. Repository component of the artifact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String component;

  /**
   * Output only. Contents of the artifact's control metadata file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String controlFile;

  /**
   * Output only. The Artifact Registry resource name of the artifact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The Apt package name of the artifact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String packageName;

  /**
   * Output only. An artifact is a binary or source package.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String packageType;

  /**
   * Output only. Operating system architecture of the artifact.
   * @return value or {@code null} for none
   */
  public java.lang.String getArchitecture() {
    return architecture;
  }

  /**
   * Output only. Operating system architecture of the artifact.
   * @param architecture architecture or {@code null} for none
   */
  public AptArtifact setArchitecture(java.lang.String architecture) {
    this.architecture = architecture;
    return this;
  }

  /**
   * Output only. Repository component of the artifact.
   * @return value or {@code null} for none
   */
  public java.lang.String getComponent() {
    return component;
  }

  /**
   * Output only. Repository component of the artifact.
   * @param component component or {@code null} for none
   */
  public AptArtifact setComponent(java.lang.String component) {
    this.component = component;
    return this;
  }

  /**
   * Output only. Contents of the artifact's control metadata file.
   * @see #decodeControlFile()
   * @return value or {@code null} for none
   */
  public java.lang.String getControlFile() {
    return controlFile;
  }

  /**
   * Output only. Contents of the artifact's control metadata file.
   * @see #getControlFile()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeControlFile() {
    return com.google.api.client.util.Base64.decodeBase64(controlFile);
  }

  /**
   * Output only. Contents of the artifact's control metadata file.
   * @see #encodeControlFile()
   * @param controlFile controlFile or {@code null} for none
   */
  public AptArtifact setControlFile(java.lang.String controlFile) {
    this.controlFile = controlFile;
    return this;
  }

  /**
   * Output only. Contents of the artifact's control metadata file.
   * @see #setControlFile()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public AptArtifact encodeControlFile(byte[] controlFile) {
    this.controlFile = com.google.api.client.util.Base64.encodeBase64URLSafeString(controlFile);
    return this;
  }

  /**
   * Output only. The Artifact Registry resource name of the artifact.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The Artifact Registry resource name of the artifact.
   * @param name name or {@code null} for none
   */
  public AptArtifact setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The Apt package name of the artifact.
   * @return value or {@code null} for none
   */
  public java.lang.String getPackageName() {
    return packageName;
  }

  /**
   * Output only. The Apt package name of the artifact.
   * @param packageName packageName or {@code null} for none
   */
  public AptArtifact setPackageName(java.lang.String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Output only. An artifact is a binary or source package.
   * @return value or {@code null} for none
   */
  public java.lang.String getPackageType() {
    return packageType;
  }

  /**
   * Output only. An artifact is a binary or source package.
   * @param packageType packageType or {@code null} for none
   */
  public AptArtifact setPackageType(java.lang.String packageType) {
    this.packageType = packageType;
    return this;
  }

  @Override
  public AptArtifact set(String fieldName, Object value) {
    return (AptArtifact) super.set(fieldName, value);
  }

  @Override
  public AptArtifact clone() {
    return (AptArtifact) super.clone();
  }

}
