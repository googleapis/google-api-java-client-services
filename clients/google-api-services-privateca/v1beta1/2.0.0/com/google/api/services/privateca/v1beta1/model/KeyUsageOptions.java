/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.privateca.v1beta1.model;

/**
 * KeyUsage.KeyUsageOptions corresponds to the key usage values described in
 * https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Certificate Authority API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KeyUsageOptions extends com.google.api.client.json.GenericJson {

  /**
   * The key may be used to sign certificates.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean certSign;

  /**
   * The key may be used for cryptographic commitments. Note that this may also be referred to as
   * "non-repudiation".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean contentCommitment;

  /**
   * The key may be used sign certificate revocation lists.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean crlSign;

  /**
   * The key may be used to encipher data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean dataEncipherment;

  /**
   * The key may be used to decipher only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean decipherOnly;

  /**
   * The key may be used for digital signatures.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean digitalSignature;

  /**
   * The key may be used to encipher only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean encipherOnly;

  /**
   * The key may be used in a key agreement protocol.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean keyAgreement;

  /**
   * The key may be used to encipher other keys.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean keyEncipherment;

  /**
   * The key may be used to sign certificates.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCertSign() {
    return certSign;
  }

  /**
   * The key may be used to sign certificates.
   * @param certSign certSign or {@code null} for none
   */
  public KeyUsageOptions setCertSign(java.lang.Boolean certSign) {
    this.certSign = certSign;
    return this;
  }

  /**
   * The key may be used for cryptographic commitments. Note that this may also be referred to as
   * "non-repudiation".
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getContentCommitment() {
    return contentCommitment;
  }

  /**
   * The key may be used for cryptographic commitments. Note that this may also be referred to as
   * "non-repudiation".
   * @param contentCommitment contentCommitment or {@code null} for none
   */
  public KeyUsageOptions setContentCommitment(java.lang.Boolean contentCommitment) {
    this.contentCommitment = contentCommitment;
    return this;
  }

  /**
   * The key may be used sign certificate revocation lists.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCrlSign() {
    return crlSign;
  }

  /**
   * The key may be used sign certificate revocation lists.
   * @param crlSign crlSign or {@code null} for none
   */
  public KeyUsageOptions setCrlSign(java.lang.Boolean crlSign) {
    this.crlSign = crlSign;
    return this;
  }

  /**
   * The key may be used to encipher data.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDataEncipherment() {
    return dataEncipherment;
  }

  /**
   * The key may be used to encipher data.
   * @param dataEncipherment dataEncipherment or {@code null} for none
   */
  public KeyUsageOptions setDataEncipherment(java.lang.Boolean dataEncipherment) {
    this.dataEncipherment = dataEncipherment;
    return this;
  }

  /**
   * The key may be used to decipher only.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDecipherOnly() {
    return decipherOnly;
  }

  /**
   * The key may be used to decipher only.
   * @param decipherOnly decipherOnly or {@code null} for none
   */
  public KeyUsageOptions setDecipherOnly(java.lang.Boolean decipherOnly) {
    this.decipherOnly = decipherOnly;
    return this;
  }

  /**
   * The key may be used for digital signatures.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDigitalSignature() {
    return digitalSignature;
  }

  /**
   * The key may be used for digital signatures.
   * @param digitalSignature digitalSignature or {@code null} for none
   */
  public KeyUsageOptions setDigitalSignature(java.lang.Boolean digitalSignature) {
    this.digitalSignature = digitalSignature;
    return this;
  }

  /**
   * The key may be used to encipher only.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEncipherOnly() {
    return encipherOnly;
  }

  /**
   * The key may be used to encipher only.
   * @param encipherOnly encipherOnly or {@code null} for none
   */
  public KeyUsageOptions setEncipherOnly(java.lang.Boolean encipherOnly) {
    this.encipherOnly = encipherOnly;
    return this;
  }

  /**
   * The key may be used in a key agreement protocol.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getKeyAgreement() {
    return keyAgreement;
  }

  /**
   * The key may be used in a key agreement protocol.
   * @param keyAgreement keyAgreement or {@code null} for none
   */
  public KeyUsageOptions setKeyAgreement(java.lang.Boolean keyAgreement) {
    this.keyAgreement = keyAgreement;
    return this;
  }

  /**
   * The key may be used to encipher other keys.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getKeyEncipherment() {
    return keyEncipherment;
  }

  /**
   * The key may be used to encipher other keys.
   * @param keyEncipherment keyEncipherment or {@code null} for none
   */
  public KeyUsageOptions setKeyEncipherment(java.lang.Boolean keyEncipherment) {
    this.keyEncipherment = keyEncipherment;
    return this;
  }

  @Override
  public KeyUsageOptions set(String fieldName, Object value) {
    return (KeyUsageOptions) super.set(fieldName, value);
  }

  @Override
  public KeyUsageOptions clone() {
    return (KeyUsageOptions) super.clone();
  }

}
