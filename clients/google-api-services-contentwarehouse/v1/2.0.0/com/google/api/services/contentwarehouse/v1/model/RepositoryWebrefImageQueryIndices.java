/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Identifies a set of Image NavBoost queries in the CompositeDoc. Each CompositeDoc can contain
 * several images, so we store the image index from the CompositeDoc::doc_images with the index of
 * the particular query inside ImageData::image_data_navboost.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefImageQueryIndices extends com.google.api.client.json.GenericJson {

  /**
   * The (canonical) image docid of the ImageData this image query is part of. Useful for
   * identifying the ImageData even after doc_images are updated in between Webref annotation runs.
   * Use docid only when canonical_docid == 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger canonicalDocid;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger docid;

  /**
   * WARNING: The doc_images in docjoins are subject to updates including non-deterministic
   * reordering of doc_images and their image_nb_data extensions. This means that without re-running
   * WebrefAnnotator one cannot rely on the accuracy or even consistency of either image_index or
   * query_index when parsing a cdoc from docjoins. In those situations one ought to rely on
   * canonical_docid (or docid when canonical_docid is absent viz. 0). The index of the source image
   * in CompositeDoc::doc_images.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer imageIndex;

  /**
   * Queries index in ImageData::image_data_navboost.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefQueryIndices queryIndex;

  /**
   * The (canonical) image docid of the ImageData this image query is part of. Useful for
   * identifying the ImageData even after doc_images are updated in between Webref annotation runs.
   * Use docid only when canonical_docid == 0.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getCanonicalDocid() {
    return canonicalDocid;
  }

  /**
   * The (canonical) image docid of the ImageData this image query is part of. Useful for
   * identifying the ImageData even after doc_images are updated in between Webref annotation runs.
   * Use docid only when canonical_docid == 0.
   * @param canonicalDocid canonicalDocid or {@code null} for none
   */
  public RepositoryWebrefImageQueryIndices setCanonicalDocid(java.math.BigInteger canonicalDocid) {
    this.canonicalDocid = canonicalDocid;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getDocid() {
    return docid;
  }

  /**
   * @param docid docid or {@code null} for none
   */
  public RepositoryWebrefImageQueryIndices setDocid(java.math.BigInteger docid) {
    this.docid = docid;
    return this;
  }

  /**
   * WARNING: The doc_images in docjoins are subject to updates including non-deterministic
   * reordering of doc_images and their image_nb_data extensions. This means that without re-running
   * WebrefAnnotator one cannot rely on the accuracy or even consistency of either image_index or
   * query_index when parsing a cdoc from docjoins. In those situations one ought to rely on
   * canonical_docid (or docid when canonical_docid is absent viz. 0). The index of the source image
   * in CompositeDoc::doc_images.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getImageIndex() {
    return imageIndex;
  }

  /**
   * WARNING: The doc_images in docjoins are subject to updates including non-deterministic
   * reordering of doc_images and their image_nb_data extensions. This means that without re-running
   * WebrefAnnotator one cannot rely on the accuracy or even consistency of either image_index or
   * query_index when parsing a cdoc from docjoins. In those situations one ought to rely on
   * canonical_docid (or docid when canonical_docid is absent viz. 0). The index of the source image
   * in CompositeDoc::doc_images.
   * @param imageIndex imageIndex or {@code null} for none
   */
  public RepositoryWebrefImageQueryIndices setImageIndex(java.lang.Integer imageIndex) {
    this.imageIndex = imageIndex;
    return this;
  }

  /**
   * Queries index in ImageData::image_data_navboost.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefQueryIndices getQueryIndex() {
    return queryIndex;
  }

  /**
   * Queries index in ImageData::image_data_navboost.
   * @param queryIndex queryIndex or {@code null} for none
   */
  public RepositoryWebrefImageQueryIndices setQueryIndex(RepositoryWebrefQueryIndices queryIndex) {
    this.queryIndex = queryIndex;
    return this;
  }

  @Override
  public RepositoryWebrefImageQueryIndices set(String fieldName, Object value) {
    return (RepositoryWebrefImageQueryIndices) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefImageQueryIndices clone() {
    return (RepositoryWebrefImageQueryIndices) super.clone();
  }

}
