/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networksecurity.v1.model;

/**
 * Allows delegating authorization decisions to Cloud IAP or to Service Extensions.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Security API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AuthzPolicyCustomProvider extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Delegate authorization decision to user authored Service Extension. Only one of
   * cloudIap or authzExtension can be specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AuthzPolicyCustomProviderAuthzExtension authzExtension;

  /**
   * Optional. Delegates authorization decisions to Cloud IAP. Applicable only for managed load
   * balancers. Enabling Cloud IAP at the AuthzPolicy level is not compatible with Cloud IAP
   * settings in the BackendService. Enabling IAP in both places will result in request failure.
   * Ensure that IAP is enabled in either the AuthzPolicy or the BackendService but not in both
   * places.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AuthzPolicyCustomProviderCloudIap cloudIap;

  /**
   * Optional. Delegate authorization decision to user authored Service Extension. Only one of
   * cloudIap or authzExtension can be specified.
   * @return value or {@code null} for none
   */
  public AuthzPolicyCustomProviderAuthzExtension getAuthzExtension() {
    return authzExtension;
  }

  /**
   * Optional. Delegate authorization decision to user authored Service Extension. Only one of
   * cloudIap or authzExtension can be specified.
   * @param authzExtension authzExtension or {@code null} for none
   */
  public AuthzPolicyCustomProvider setAuthzExtension(AuthzPolicyCustomProviderAuthzExtension authzExtension) {
    this.authzExtension = authzExtension;
    return this;
  }

  /**
   * Optional. Delegates authorization decisions to Cloud IAP. Applicable only for managed load
   * balancers. Enabling Cloud IAP at the AuthzPolicy level is not compatible with Cloud IAP
   * settings in the BackendService. Enabling IAP in both places will result in request failure.
   * Ensure that IAP is enabled in either the AuthzPolicy or the BackendService but not in both
   * places.
   * @return value or {@code null} for none
   */
  public AuthzPolicyCustomProviderCloudIap getCloudIap() {
    return cloudIap;
  }

  /**
   * Optional. Delegates authorization decisions to Cloud IAP. Applicable only for managed load
   * balancers. Enabling Cloud IAP at the AuthzPolicy level is not compatible with Cloud IAP
   * settings in the BackendService. Enabling IAP in both places will result in request failure.
   * Ensure that IAP is enabled in either the AuthzPolicy or the BackendService but not in both
   * places.
   * @param cloudIap cloudIap or {@code null} for none
   */
  public AuthzPolicyCustomProvider setCloudIap(AuthzPolicyCustomProviderCloudIap cloudIap) {
    this.cloudIap = cloudIap;
    return this;
  }

  @Override
  public AuthzPolicyCustomProvider set(String fieldName, Object value) {
    return (AuthzPolicyCustomProvider) super.set(fieldName, value);
  }

  @Override
  public AuthzPolicyCustomProvider clone() {
    return (AuthzPolicyCustomProvider) super.clone();
  }

}
