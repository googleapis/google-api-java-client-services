/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.file.v1beta1.model;

/**
 * LdapConfig contains all the parameters for connecting to LDAP servers.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Filestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LdapConfig extends com.google.api.client.json.GenericJson {

  /**
   * Required. The LDAP domain name in the format of `my-domain.com`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String domain;

  /**
   * Optional. The groups Organizational Unit (OU) is optional. This parameter is a hint to allow
   * faster lookup in the LDAP namespace. In case that this parameter is not provided, Filestore
   * instance will query the whole LDAP namespace.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String groupsOu;

  /**
   * Required. The servers names are used for specifying the LDAP servers names. The LDAP servers
   * names can come with two formats: 1. DNS name, for example: `ldap.example1.com`,
   * `ldap.example2.com`. 2. IP address, for example: `10.0.0.1`, `10.0.0.2`, `10.0.0.3`. All
   * servers names must be in the same format: either all DNS names or all IP addresses.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> servers;

  /**
   * Optional. The users Organizational Unit (OU) is optional. This parameter is a hint to allow
   * faster lookup in the LDAP namespace. In case that this parameter is not provided, Filestore
   * instance will query the whole LDAP namespace.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String usersOu;

  /**
   * Required. The LDAP domain name in the format of `my-domain.com`.
   * @return value or {@code null} for none
   */
  public java.lang.String getDomain() {
    return domain;
  }

  /**
   * Required. The LDAP domain name in the format of `my-domain.com`.
   * @param domain domain or {@code null} for none
   */
  public LdapConfig setDomain(java.lang.String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Optional. The groups Organizational Unit (OU) is optional. This parameter is a hint to allow
   * faster lookup in the LDAP namespace. In case that this parameter is not provided, Filestore
   * instance will query the whole LDAP namespace.
   * @return value or {@code null} for none
   */
  public java.lang.String getGroupsOu() {
    return groupsOu;
  }

  /**
   * Optional. The groups Organizational Unit (OU) is optional. This parameter is a hint to allow
   * faster lookup in the LDAP namespace. In case that this parameter is not provided, Filestore
   * instance will query the whole LDAP namespace.
   * @param groupsOu groupsOu or {@code null} for none
   */
  public LdapConfig setGroupsOu(java.lang.String groupsOu) {
    this.groupsOu = groupsOu;
    return this;
  }

  /**
   * Required. The servers names are used for specifying the LDAP servers names. The LDAP servers
   * names can come with two formats: 1. DNS name, for example: `ldap.example1.com`,
   * `ldap.example2.com`. 2. IP address, for example: `10.0.0.1`, `10.0.0.2`, `10.0.0.3`. All
   * servers names must be in the same format: either all DNS names or all IP addresses.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getServers() {
    return servers;
  }

  /**
   * Required. The servers names are used for specifying the LDAP servers names. The LDAP servers
   * names can come with two formats: 1. DNS name, for example: `ldap.example1.com`,
   * `ldap.example2.com`. 2. IP address, for example: `10.0.0.1`, `10.0.0.2`, `10.0.0.3`. All
   * servers names must be in the same format: either all DNS names or all IP addresses.
   * @param servers servers or {@code null} for none
   */
  public LdapConfig setServers(java.util.List<java.lang.String> servers) {
    this.servers = servers;
    return this;
  }

  /**
   * Optional. The users Organizational Unit (OU) is optional. This parameter is a hint to allow
   * faster lookup in the LDAP namespace. In case that this parameter is not provided, Filestore
   * instance will query the whole LDAP namespace.
   * @return value or {@code null} for none
   */
  public java.lang.String getUsersOu() {
    return usersOu;
  }

  /**
   * Optional. The users Organizational Unit (OU) is optional. This parameter is a hint to allow
   * faster lookup in the LDAP namespace. In case that this parameter is not provided, Filestore
   * instance will query the whole LDAP namespace.
   * @param usersOu usersOu or {@code null} for none
   */
  public LdapConfig setUsersOu(java.lang.String usersOu) {
    this.usersOu = usersOu;
    return this;
  }

  @Override
  public LdapConfig set(String fieldName, Object value) {
    return (LdapConfig) super.set(fieldName, value);
  }

  @Override
  public LdapConfig clone() {
    return (LdapConfig) super.clone();
  }

}
