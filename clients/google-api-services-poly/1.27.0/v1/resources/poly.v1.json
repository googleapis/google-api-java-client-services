{
  "kind": "discovery#restDescription",
  "description": "The Poly API provides read access to assets hosted on \u003ca href=\"https://poly.google.com\"\u003epoly.google.com\u003c/a\u003e to all, and upload access to \u003ca href=\"https://poly.google.com\"\u003epoly.google.com\u003c/a\u003e for whitelisted accounts.\n",
  "servicePath": "",
  "basePath": "",
  "revision": "20190409",
  "documentationLink": "https://developers.google.com/poly/",
  "id": "poly:v1",
  "discoveryVersion": "v1",
  "version_module": true,
  "schemas": {
    "ListLikedAssetsResponse": {
      "description": "A response message from a request to list.",
      "type": "object",
      "properties": {
        "assets": {
          "type": "array",
          "items": {
            "$ref": "Asset"
          },
          "description": "A list of assets that match the criteria specified in the request."
        },
        "totalSize": {
          "type": "integer",
          "description": "The total number of assets in the list, without pagination.",
          "format": "int32"
        },
        "nextPageToken": {
          "description": "The continuation token for retrieving the next page. If empty,\nindicates that there are no more pages. To get the next page, submit the\nsame request specifying this value as the\npage_token.",
          "type": "string"
        }
      },
      "id": "ListLikedAssetsResponse"
    },
    "ObjParseError": {
      "description": "Details of an error resulting from parsing an OBJ file",
      "type": "object",
      "properties": {
        "startIndex": {
          "type": "integer",
          "description": "The starting character index at which the problem was found.",
          "format": "int32"
        },
        "endIndex": {
          "description": "The ending character index at which the problem was found.",
          "format": "int32",
          "type": "integer"
        },
        "filePath": {
          "description": "The file path in which the problem was found.",
          "type": "string"
        },
        "line": {
          "description": "The text of the line. Note that this may be truncated if the line was very\nlong. This may not include the error if it occurs after line truncation.",
          "type": "string"
        },
        "lineNumber": {
          "description": "Line number at which the problem was found.",
          "format": "int32",
          "type": "integer"
        },
        "code": {
          "enumDescriptions": [
            "Unknown error code.",
            "Vertex references are specified in an inconsistent style for a face (e.g.\nsome vertices specify texture vertices but some don't).",
            "The command is invalid.",
            "A invalid number was specified.",
            "An invalid vertex reference was specified.",
            "A vertex reference does not specify a geometric vertex.",
            "An expected token was not found.",
            "The vertex specified too few dimensions for its usage.",
            "The face specified too few vertices.",
            "The vertex specified too many dimensions for its usage.",
            "This command is a valid OBJ command but is not supported. This error is\nonly generated for the first instance of such a command.",
            "This line ended with unparsed token characters.",
            "The specified vertex was not found.",
            "The specified number was too large or small for its usage.",
            "The specified parameter value was not recognized.",
            "The specified texture option is not valid.",
            "The maximum number of problems to report was reached. Parsing continues,\nbut further problems will be ignored.",
            "An expected file name was not specified.",
            "The specified file was not found in the import.",
            "The specified material was not found in any material definition in the\nimport.",
            "Material parameters were specified before the first material definition.",
            "The smoothing group is not valid.",
            "Vertex colors were specified for only some vertices of a face.",
            "A missing file was found at a different file path.",
            "A line in an OBJ or MTL file exceeded the maximum line length.",
            "The file path was invalid. Only relative paths are supported."
          ],
          "enum": [
            "CODE_UNSPECIFIED",
            "INCONSISTENT_VERTEX_REFS",
            "INVALID_COMMAND",
            "INVALID_NUMBER",
            "INVALID_VERTEX_REF",
            "MISSING_GEOMETRIC_VERTEX",
            "MISSING_TOKEN",
            "TOO_FEW_DIMENSIONS",
            "TOO_FEW_VERTICES",
            "TOO_MANY_DIMENSIONS",
            "UNSUPPORTED_COMMAND",
            "UNUSED_TOKENS",
            "VERTEX_NOT_FOUND",
            "NUMBER_OUT_OF_RANGE",
            "INVALID_VALUE",
            "INVALID_TEXTURE_OPTION",
            "TOO_MANY_PROBLEMS",
            "MISSING_FILE_NAME",
            "FILE_NOT_FOUND",
            "UNKNOWN_MATERIAL",
            "NO_MATERIAL_DEFINED",
            "INVALID_SMOOTHING_GROUP",
            "MISSING_VERTEX_COLORS",
            "FILE_SUBSTITUTION",
            "LINE_TOO_LONG",
            "INVALID_FILE_PATH"
          ],
          "description": "The type of problem found (required).",
          "type": "string"
        }
      },
      "id": "ObjParseError"
    },
    "Quaternion": {
      "properties": {
        "y": {
          "description": "The y component.",
          "format": "double",
          "type": "number"
        },
        "x": {
          "description": "The x component.",
          "format": "double",
          "type": "number"
        },
        "z": {
          "description": "The z component.",
          "format": "double",
          "type": "number"
        },
        "w": {
          "description": "The scalar component.",
          "format": "double",
          "type": "number"
        }
      },
      "id": "Quaternion",
      "description": "A [Quaternion](//en.wikipedia.org/wiki/Quaternion). Please note: if in the\nresponse you see \"w: 1\" and nothing else this is the default value of\n[0, 0, 0, 1] where x,y, and z are 0.",
      "type": "object"
    },
    "FormatComplexity": {
      "id": "FormatComplexity",
      "description": "Information on the complexity of this Format.",
      "type": "object",
      "properties": {
        "triangleCount": {
          "description": "The estimated number of triangles.",
          "format": "int64",
          "type": "string"
        },
        "lodHint": {
          "description": "A non-negative integer that represents the level of detail (LOD) of this\nformat relative to other formats of the same asset with the same\nformat_type.\nThis hint allows you to sort formats from the most-detailed (0) to\nleast-detailed (integers greater than 0).",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ListUserAssetsResponse": {
      "properties": {
        "userAssets": {
          "description": "A list of UserAssets matching the request.",
          "type": "array",
          "items": {
            "$ref": "UserAsset"
          }
        },
        "nextPageToken": {
          "description": "The continuation token for retrieving the next page. If empty,\nindicates that there are no more pages. To get the next page, submit the\nsame request specifying this value as the\npage_token.",
          "type": "string"
        },
        "totalSize": {
          "description": "The total number of assets in the list, without pagination.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "ListUserAssetsResponse",
      "description": "A response message from a request to list.",
      "type": "object"
    },
    "StartAssetImportResponse": {
      "description": "A response message from a request to\nstartImport. This is returned in the response\nfield of the Operation.",
      "type": "object",
      "properties": {
        "assetId": {
          "description": "The id of newly created asset. If this is empty when the operation is\ncomplete it means the import failed. Please refer to the\nassetImportMessages field to understand what went wrong.",
          "type": "string"
        },
        "publishUrl": {
          "description": "The publish URL for the asset.",
          "type": "string"
        },
        "assetImportId": {
          "description": "The id of the asset import.",
          "type": "string"
        },
        "assetImportMessages": {
          "description": "The message from the asset import. This will contain any warnings\n(or - in the case of failure - errors) that occurred during import.",
          "type": "array",
          "items": {
            "$ref": "AssetImportMessage"
          }
        }
      },
      "id": "StartAssetImportResponse"
    },
    "ImageError": {
      "id": "ImageError",
      "description": "A message resulting from reading an image file.",
      "type": "object",
      "properties": {
        "filePath": {
          "description": "The file path in the import of the image that was rejected.",
          "type": "string"
        },
        "code": {
          "description": "The type of image error encountered. Optional for older image errors.",
          "type": "string",
          "enumDescriptions": [
            "Unknown error code.",
            "We were unable to read the image file.",
            "The image size is too large.",
            "The image data does not match the expected MIME type of the image."
          ],
          "enum": [
            "CODE_UNSPECIFIED",
            "INVALID_IMAGE",
            "IMAGE_TOO_BIG",
            "WRONG_IMAGE_TYPE"
          ]
        }
      }
    },
    "RemixInfo": {
      "description": "Info about the sources of this asset (i.e. assets that were remixed to\ncreate this asset).",
      "type": "object",
      "properties": {
        "sourceAsset": {
          "description": "Resource ids for the sources of this remix, of the form:\n`assets/{ASSET_ID}`",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "RemixInfo"
    },
    "File": {
      "type": "object",
      "properties": {
        "contentType": {
          "description": "The MIME content-type, such as `image/png`.\nFor more information, see\n[MIME\ntypes](//developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).",
          "type": "string"
        },
        "relativePath": {
          "type": "string",
          "description": "The path of the resource file relative to the\nroot file. For root or thumbnail files,\nthis is just the filename."
        },
        "url": {
          "description": "The URL where the file data can be retrieved.",
          "type": "string"
        }
      },
      "id": "File",
      "description": "Represents a file in Poly, which can be a root,\nresource, or thumbnail file."
    },
    "ListAssetsResponse": {
      "description": "A response message from a request to list.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "The continuation token for retrieving the next page. If empty,\nindicates that there are no more pages. To get the next page, submit the\nsame request specifying this value as the\npage_token.",
          "type": "string"
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "Asset"
          },
          "description": "A list of assets that match the criteria specified in the request."
        },
        "totalSize": {
          "description": "The total number of assets in the list, without pagination.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "ListAssetsResponse"
    },
    "AssetImportMessage": {
      "description": "A message generated by the asset import process.",
      "type": "object",
      "properties": {
        "filePath": {
          "description": "An optional file path. Only present for those error codes that specify it.",
          "type": "string"
        },
        "code": {
          "enumDescriptions": [
            "Unknown error code.",
            "The asset import did not include any file that we can import (i.e. an OBJ\nfile).",
            "When generating the preview for the import, no geometry was found.",
            "A problem was encountered while parsing the OBJ file. The converter makes\na 'best effort' attempt to continue when encountering such issues. In\nsome cases the resulting preview model may still be acceptable. The\ndetails can be found in the parse error message.",
            "The importer was not able to import the model before the expiration time.",
            "The importer encountered a problem reading an image file.",
            "Multiple files were encountered in addition to a ZIP archive. When\nuploading an archive only one file is permitted.",
            "Default materials are used in the model. This means that one or more\nfaces is using default materials either because no usemtl statement was\nspecified or because the requested material was not found due to a\nmissing material file or bad material name. This does not cover the case\nof missing textures.",
            "The importer encountered a fatal error and was unable to import the\nmodel.",
            "The import includes a file of an unsupported element type. The file path\nis specified."
          ],
          "enum": [
            "CODE_UNSPECIFIED",
            "NO_IMPORTABLE_FILE",
            "EMPTY_MODEL",
            "OBJ_PARSE_ERROR",
            "EXPIRED",
            "IMAGE_ERROR",
            "EXTRA_FILES_WITH_ARCHIVE",
            "DEFAULT_MATERIALS",
            "FATAL_ERROR",
            "INVALID_ELEMENT_TYPE"
          ],
          "description": "The code associated with this message.",
          "type": "string"
        },
        "imageError": {
          "$ref": "ImageError",
          "description": "An optional image error. Only present for INVALID_IMAGE_FILE."
        },
        "objParseError": {
          "$ref": "ObjParseError",
          "description": "An optional OBJ parse error. Only present for OBJ_PARSE_ERROR."
        }
      },
      "id": "AssetImportMessage"
    },
    "Format": {
      "properties": {
        "formatComplexity": {
          "$ref": "FormatComplexity",
          "description": "Complexity stats about this representation of the asset."
        },
        "root": {
          "description": "The root of the file hierarchy. This will always be populated.\nFor some format_types - such as `TILT`, which are\nself-contained - this is all of the data.\n\nOther types - such as `OBJ` - often reference other data elements.\nThese are contained in the resources field.",
          "$ref": "File"
        },
        "formatType": {
          "type": "string",
          "description": "A short string that identifies the format type of this representation.\nPossible values are: `FBX`, `GLTF`, `GLTF2`, `OBJ`, and `TILT`."
        },
        "resources": {
          "description": "A list of dependencies of the root element. May include, but is not\nlimited to, materials, textures, and shader programs.",
          "type": "array",
          "items": {
            "$ref": "File"
          }
        }
      },
      "id": "Format",
      "description": "The same asset can be represented in different formats, for example,\na [WaveFront .obj](//en.wikipedia.org/wiki/Wavefront_.obj_file) file with its\ncorresponding .mtl file or a [Khronos glTF](//www.khronos.org/gltf) file\nwith its corresponding .glb binary data. A format refers to a specific\nrepresentation of an asset and contains all information needed to\nretrieve and describe this representation.",
      "type": "object"
    },
    "Asset": {
      "type": "object",
      "properties": {
        "createTime": {
          "description": "For published assets, the time when the asset was published.\nFor unpublished assets, the time when the asset was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "remixInfo": {
          "description": "The remix info for the asset.",
          "$ref": "RemixInfo"
        },
        "license": {
          "enumDescriptions": [
            "Unknown license value.",
            "Creative Commons CC-BY 3.0. https://creativecommons.org/licenses/by/3.0/",
            "Unlicensed: All Rights Reserved by the author. Unlicensed assets are\n**not** returned by List Assets."
          ],
          "enum": [
            "UNKNOWN",
            "CREATIVE_COMMONS_BY",
            "ALL_RIGHTS_RESERVED"
          ],
          "description": "The license under which the author has made the asset available\nfor use, if any.",
          "type": "string"
        },
        "updateTime": {
          "type": "string",
          "description": "The time when the asset was last modified. For published assets, whose\ncontents are immutable, the update time changes only when metadata\nproperties, such as visibility, are updated.",
          "format": "google-datetime"
        },
        "isCurated": {
          "type": "boolean",
          "description": "Whether this asset has been curated by the Poly team."
        },
        "formats": {
          "description": "A list of Formats where each\nformat describes one representation of the asset.",
          "type": "array",
          "items": {
            "$ref": "Format"
          }
        },
        "presentationParams": {
          "$ref": "PresentationParams",
          "description": "Hints for displaying the asset. Note that these parameters are not\nimmutable; the author of an asset may change them post-publication."
        },
        "thumbnail": {
          "$ref": "File",
          "description": "The thumbnail image for the asset."
        },
        "description": {
          "description": "The human-readable description, set by the asset's author.",
          "type": "string"
        },
        "visibility": {
          "enum": [
            "VISIBILITY_UNSPECIFIED",
            "PRIVATE",
            "UNLISTED",
            "PUBLIC"
          ],
          "description": "The visibility of the asset and who can access it.",
          "type": "string",
          "enumDescriptions": [
            "Unknown (and invalid) visibility.",
            "Access to the asset and its underlying files and resources is restricted to\nthe author.\n**Authentication:** You must supply an OAuth token that corresponds to the\nauthor's account.",
            "Access to the asset and its underlying files and resources is available to\nanyone with the asset's name. Unlisted assets are **not**\nreturned by List Assets.",
            "Access to the asset and its underlying files and resources is available\nto anyone."
          ]
        },
        "authorName": {
          "description": "The author's publicly visible name. Use this name when giving credit to the\nauthor. For more information, see [Licensing](/poly/discover/licensing).",
          "type": "string"
        },
        "name": {
          "description": "The unique identifier for the asset in the form:\n`assets/{ASSET_ID}`.",
          "type": "string"
        },
        "metadata": {
          "description": "Application-defined opaque metadata for this asset. This field is only\nreturned when querying for the signed-in user's own assets, not for public\nassets. This string is limited to 1K chars. It is up to the creator of\nthe asset to define the format for this string (for example, JSON).",
          "type": "string"
        },
        "displayName": {
          "description": "The human-readable name, set by the asset's author.",
          "type": "string"
        }
      },
      "id": "Asset",
      "description": "Represents and describes an asset in the Poly library. An asset is a 3D model\nor scene created using [Tilt Brush](//www.tiltbrush.com),\n[Blocks](//vr.google.com/blocks/), or any 3D program that produces a file\nthat can be upload to Poly."
    },
    "PresentationParams": {
      "properties": {
        "colorSpace": {
          "enumDescriptions": [
            "Invalid color value.",
            "Linear color values. Default.",
            "Colors should be converted to linear by assuming gamma = 2.0."
          ],
          "enum": [
            "UNKNOWN",
            "LINEAR",
            "GAMMA"
          ],
          "description": "The materials' diffuse/albedo color. This does not apply to vertex colors\nor texture maps.",
          "type": "string"
        },
        "backgroundColor": {
          "type": "string",
          "description": "A background color which could be used for displaying the 3D asset in a\n'thumbnail' or 'palette' style view. Authors have the option to set this\nbackground color when publishing or editing their asset.\n\nThis is represented as a six-digit hexademical triplet specifying the\nRGB components of the background color, e.g. #FF0000 for Red."
        },
        "orientingRotation": {
          "$ref": "Quaternion",
          "description": "A rotation that should be applied to the object root to make it upright.\nMore precisely, this quaternion transforms from \"object space\" (the space\nin which the object is defined) to \"presentation space\", a coordinate\nsystem where +Y is up, +X is right, -Z is forward. For example, if\nthe object is the Eiffel Tower, in its local coordinate system the\nobject might be laid out such that the base of the tower is on the\nYZ plane and the tip of the tower is towards positive X. In this case\nthis quaternion would specify a rotation (of 90 degrees about the Z\naxis) such that in the presentation space the base of the tower is\naligned with the XZ plane, and the tip of the tower lies towards +Y.\n\nThis rotation is unrelated to the object's pose in the web preview,\nwhich is just a camera position setting and is *not* reflected in this\nrotation.\n\nPlease note: this is applicable only to the gLTF."
        }
      },
      "id": "PresentationParams",
      "description": "Hints for displaying the asset, based on information available when the asset\nwas uploaded.",
      "type": "object"
    },
    "UserAsset": {
      "type": "object",
      "properties": {
        "asset": {
          "description": "An Asset.",
          "$ref": "Asset"
        }
      },
      "id": "UserAsset",
      "description": "Data about the user's asset."
    }
  },
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "protocol": "rest",
  "canonicalName": "Poly Service",
  "rootUrl": "https://poly.googleapis.com/",
  "ownerDomain": "google.com",
  "name": "poly",
  "batchPath": "batch",
  "fullyEncodeReservedExpansion": true,
  "title": "Poly API",
  "ownerName": "Google",
  "resources": {
    "assets": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "response": {
            "$ref": "Asset"
          },
          "parameterOrder": [
            "name"
          ],
          "parameters": {
            "name": {
              "description": "Required. An asset's name in the form `assets/{ASSET_ID}`.",
              "required": true,
              "type": "string",
              "pattern": "^assets/[^/]+$",
              "location": "path"
            }
          },
          "flatPath": "v1/assets/{assetsId}",
          "id": "poly.assets.get",
          "path": "v1/{+name}",
          "description": "Returns detailed information about an asset given its name.\nPRIVATE assets are returned only if\n the currently authenticated user (via OAuth token) is the author of the\n asset."
        },
        "list": {
          "response": {
            "$ref": "ListAssetsResponse"
          },
          "parameterOrder": [],
          "httpMethod": "GET",
          "parameters": {
            "maxComplexity": {
              "location": "query",
              "enum": [
                "COMPLEXITY_UNSPECIFIED",
                "COMPLEX",
                "MEDIUM",
                "SIMPLE"
              ],
              "description": "Returns assets that are of the specified complexity or less. Defaults to\nCOMPLEX. For example, a request for\nMEDIUM assets also includes\nSIMPLE assets.",
              "type": "string"
            },
            "pageToken": {
              "location": "query",
              "description": "Specifies a continuation token from a previous search whose results were\nsplit into multiple pages. To get the next page, submit the same request\nspecifying the value from\nnext_page_token.",
              "type": "string"
            },
            "pageSize": {
              "location": "query",
              "description": "The maximum number of assets to be returned. This value must be between `1`\nand `100`. Defaults to `20`.",
              "format": "int32",
              "type": "integer"
            },
            "keywords": {
              "location": "query",
              "description": "One or more search terms to be matched against all text that Poly has\nindexed for assets, which includes display_name,\ndescription, and tags. Multiple keywords should be\nseparated by spaces.",
              "type": "string"
            },
            "orderBy": {
              "location": "query",
              "description": "Specifies an ordering for assets. Acceptable values are:\n`BEST`, `NEWEST`, `OLDEST`. Defaults to `BEST`, which ranks assets\nbased on a combination of popularity and other features.",
              "type": "string"
            },
            "format": {
              "location": "query",
              "description": "Return only assets with the matching format. Acceptable values are:\n`BLOCKS`, `FBX`, `GLTF`, `GLTF2`, `OBJ`, `TILT`.",
              "type": "string"
            },
            "curated": {
              "description": "Return only assets that have been curated by the Poly team.",
              "type": "boolean",
              "location": "query"
            },
            "category": {
              "description": "Filter assets based on the specified category. Supported values are:\n`animals`, `architecture`, `art`, `food`, `nature`, `objects`, `people`,\n`scenes`, `technology`, and `transport`.",
              "type": "string",
              "location": "query"
            }
          },
          "flatPath": "v1/assets",
          "path": "v1/assets",
          "id": "poly.assets.list",
          "description": "Lists all public, remixable assets. These are assets with an access level\nof PUBLIC and published under the\nCC-By license."
        }
      }
    },
    "users": {
      "resources": {
        "assets": {
          "methods": {
            "list": {
              "description": "Lists assets authored by the given user. Only the value 'me', representing\nthe currently-authenticated user, is supported. May include assets with an\naccess level of PRIVATE or\nUNLISTED and assets which are\nAll Rights Reserved for the\ncurrently-authenticated user.",
              "response": {
                "$ref": "ListUserAssetsResponse"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "parameters": {
                "visibility": {
                  "type": "string",
                  "location": "query",
                  "enum": [
                    "VISIBILITY_UNSPECIFIED",
                    "PUBLISHED",
                    "PRIVATE"
                  ],
                  "description": "The visibility of the assets to be returned.\nDefaults to\nVISIBILITY_UNSPECIFIED\nwhich returns all assets."
                },
                "name": {
                  "description": "A valid user id. Currently, only the special value 'me', representing the\ncurrently-authenticated user is supported. To use 'me', you must pass\nan OAuth token with the request.",
                  "required": true,
                  "type": "string",
                  "pattern": "^users/[^/]+$",
                  "location": "path"
                },
                "orderBy": {
                  "description": "Specifies an ordering for assets. Acceptable values are:\n`BEST`, `NEWEST`, `OLDEST`. Defaults to `BEST`, which ranks assets\nbased on a combination of popularity and other features.",
                  "type": "string",
                  "location": "query"
                },
                "format": {
                  "location": "query",
                  "description": "Return only assets with the matching format. Acceptable values are:\n`BLOCKS`, `FBX`, `GLTF`, `GLTF2`, `OBJ`, and `TILT`.",
                  "type": "string"
                },
                "pageToken": {
                  "description": "Specifies a continuation token from a previous search whose results were\nsplit into multiple pages. To get the next page, submit the same request\nspecifying the value from\nnext_page_token.",
                  "type": "string",
                  "location": "query"
                },
                "pageSize": {
                  "description": "The maximum number of assets to be returned. This value must be between `1`\nand `100`. Defaults to `20`.",
                  "format": "int32",
                  "type": "integer",
                  "location": "query"
                }
              },
              "flatPath": "v1/users/{usersId}/assets",
              "path": "v1/{+name}/assets",
              "id": "poly.users.assets.list"
            }
          }
        },
        "likedassets": {
          "methods": {
            "list": {
              "description": "Lists assets that the user has liked. Only the value 'me', representing\nthe currently-authenticated user, is supported. May include assets with an\naccess level of UNLISTED.",
              "httpMethod": "GET",
              "response": {
                "$ref": "ListLikedAssetsResponse"
              },
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "pattern": "^users/[^/]+$",
                  "location": "path",
                  "description": "A valid user id. Currently, only the special value 'me', representing the\ncurrently-authenticated user is supported. To use 'me', you must pass\nan OAuth token with the request.",
                  "required": true,
                  "type": "string"
                },
                "orderBy": {
                  "type": "string",
                  "location": "query",
                  "description": "Specifies an ordering for assets. Acceptable values are:\n`BEST`, `NEWEST`, `OLDEST`, 'LIKED_TIME'. Defaults to `LIKED_TIME`, which\nranks assets based on how recently they were liked."
                },
                "pageToken": {
                  "location": "query",
                  "description": "Specifies a continuation token from a previous search whose results were\nsplit into multiple pages. To get the next page, submit the same request\nspecifying the value from\nnext_page_token.",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The maximum number of assets to be returned. This value must be between `1`\nand `100`. Defaults to `20`.",
                  "format": "int32",
                  "type": "integer",
                  "location": "query"
                },
                "format": {
                  "location": "query",
                  "description": "Return only assets with the matching format. Acceptable values are:\n`BLOCKS`, `FBX`, `GLTF`, `GLTF2`, `OBJ`, `TILT`.",
                  "type": "string"
                }
              },
              "flatPath": "v1/users/{usersId}/likedassets",
              "id": "poly.users.likedassets.list",
              "path": "v1/{+name}/likedassets"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    }
  },
  "version": "v1",
  "baseUrl": "https://poly.googleapis.com/"
}
