/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidmanagement.v1.model;

/**
 * Access Point Name (APN) policy. Configuration for Access Point Names (APNs) which may override
 * any other APNs on the device. See OVERRIDE_APNS_ENABLED and overrideApns for details.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Android Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ApnPolicy extends com.google.api.client.json.GenericJson {

  /**
   * Optional. APN settings for override APNs. There must not be any conflict between any of APN
   * settings provided, otherwise the policy will be rejected. Two ApnSettings are considered to
   * conflict when all of the following fields match on both: numericOperatorId, apn, proxyAddress,
   * proxyPort, mmsProxyAddress, mmsProxyPort, mmsc, mvnoType, protocol, roamingProtocol. If some of
   * the APN settings result in non-compliance of INVALID_VALUE , they will be ignored. This can be
   * set on fully managed devices on Android 10 and above. This can also be set on work profiles on
   * Android 13 and above and only with ApnSetting's with ENTERPRISE APN type. A NonComplianceDetail
   * with API_LEVEL is reported if the Android version is less than 10. A NonComplianceDetail with
   * MANAGEMENT_MODE is reported for work profiles on Android versions less than 13.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ApnSetting> apnSettings;

  /**
   * Optional. Whether override APNs are disabled or enabled. See
   * DevicePolicyManager.setOverrideApnsEnabled (https://developer.android.com/reference/android/app
   * /admin/DevicePolicyManager#setOverrideApnsEnabled) for more details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String overrideApns;

  /**
   * Optional. APN settings for override APNs. There must not be any conflict between any of APN
   * settings provided, otherwise the policy will be rejected. Two ApnSettings are considered to
   * conflict when all of the following fields match on both: numericOperatorId, apn, proxyAddress,
   * proxyPort, mmsProxyAddress, mmsProxyPort, mmsc, mvnoType, protocol, roamingProtocol. If some of
   * the APN settings result in non-compliance of INVALID_VALUE , they will be ignored. This can be
   * set on fully managed devices on Android 10 and above. This can also be set on work profiles on
   * Android 13 and above and only with ApnSetting's with ENTERPRISE APN type. A NonComplianceDetail
   * with API_LEVEL is reported if the Android version is less than 10. A NonComplianceDetail with
   * MANAGEMENT_MODE is reported for work profiles on Android versions less than 13.
   * @return value or {@code null} for none
   */
  public java.util.List<ApnSetting> getApnSettings() {
    return apnSettings;
  }

  /**
   * Optional. APN settings for override APNs. There must not be any conflict between any of APN
   * settings provided, otherwise the policy will be rejected. Two ApnSettings are considered to
   * conflict when all of the following fields match on both: numericOperatorId, apn, proxyAddress,
   * proxyPort, mmsProxyAddress, mmsProxyPort, mmsc, mvnoType, protocol, roamingProtocol. If some of
   * the APN settings result in non-compliance of INVALID_VALUE , they will be ignored. This can be
   * set on fully managed devices on Android 10 and above. This can also be set on work profiles on
   * Android 13 and above and only with ApnSetting's with ENTERPRISE APN type. A NonComplianceDetail
   * with API_LEVEL is reported if the Android version is less than 10. A NonComplianceDetail with
   * MANAGEMENT_MODE is reported for work profiles on Android versions less than 13.
   * @param apnSettings apnSettings or {@code null} for none
   */
  public ApnPolicy setApnSettings(java.util.List<ApnSetting> apnSettings) {
    this.apnSettings = apnSettings;
    return this;
  }

  /**
   * Optional. Whether override APNs are disabled or enabled. See
   * DevicePolicyManager.setOverrideApnsEnabled (https://developer.android.com/reference/android/app
   * /admin/DevicePolicyManager#setOverrideApnsEnabled) for more details.
   * @return value or {@code null} for none
   */
  public java.lang.String getOverrideApns() {
    return overrideApns;
  }

  /**
   * Optional. Whether override APNs are disabled or enabled. See
   * DevicePolicyManager.setOverrideApnsEnabled (https://developer.android.com/reference/android/app
   * /admin/DevicePolicyManager#setOverrideApnsEnabled) for more details.
   * @param overrideApns overrideApns or {@code null} for none
   */
  public ApnPolicy setOverrideApns(java.lang.String overrideApns) {
    this.overrideApns = overrideApns;
    return this;
  }

  @Override
  public ApnPolicy set(String fieldName, Object value) {
    return (ApnPolicy) super.set(fieldName, value);
  }

  @Override
  public ApnPolicy clone() {
    return (ApnPolicy) super.clone();
  }

}
