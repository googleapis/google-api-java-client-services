/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.discoveryengine.v1alpha.model;

/**
 * Request message for Recommend method.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Discovery Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDiscoveryengineV1alphaRecommendRequest extends com.google.api.client.json.GenericJson {

  /**
   * Filter for restricting recommendation results with a length limit of 5,000 characters.
   * Currently, only filter expressions on the `filter_tags` attribute is supported. Examples: *
   * `(filter_tags: ANY("Red", "Blue") OR filter_tags: ANY("Hot", "Cold"))` * `(filter_tags:
   * ANY("Red", "Blue")) AND NOT (filter_tags: ANY("Green"))` If your filter blocks all results, the
   * API will return generic (unfiltered) popular Documents. If you only want results strictly
   * matching the filters, set `strictFiltering` to True in RecommendRequest.params to receive empty
   * results instead. Note that the API will never return Documents with `storageStatus` of
   * `EXPIRED` or `DELETED` regardless of filter choices.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String filter;

  /**
   * Maximum number of results to return. Set this property to the number of recommendation results
   * needed. If zero, the service will choose a reasonable default. The maximum allowed value is
   * 100. Values above 100 will be coerced to 100.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer pageSize;

  /**
   * Additional domain specific parameters for the recommendations. Allowed values: *
   * `returnDocument`: Boolean. If set to true, the associated Document object will be returned in
   * RecommendResponse.RecommendationResult.document. * `returnScore`: Boolean. If set to true, the
   * recommendation 'score' corresponding to each returned Document will be set in
   * RecommendResponse.RecommendationResult.metadata. The given 'score' indicates the probability of
   * a Document conversion given the user's context and history. * `strictFiltering`: Boolean. True
   * by default. If set to false, the service will return generic (unfiltered) popular Documents
   * instead of empty if your filter blocks all recommendation results. * `diversityLevel`: String.
   * Default empty. If set to be non-empty, then it needs to be one of: * `no-diversity` * `low-
   * diversity` * `medium-diversity` * `high-diversity` * `auto-diversity` This gives request-level
   * control and adjusts recommendation results based on Document category.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Object> params;

  /**
   * Required. Context about the user, what they are looking at and what action they took to trigger
   * the Recommend request. Note that this user event detail won't be ingested to userEvent logs.
   * Thus, a separate userEvent write request is required for event logging. Don't set
   * UserEvent.user_pseudo_id or UserEvent.user_info.user_id to the same fixed ID for different
   * users. If you are trying to receive non-personalized recommendations (not recommended; this can
   * negatively impact model performance), instead set UserEvent.user_pseudo_id to a random unique
   * ID and leave UserEvent.user_info.user_id unset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1alphaUserEvent userEvent;

  /**
   * The user labels applied to a resource must meet the following requirements: * Each resource can
   * have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have
   * a minimum length of 1 character and a maximum length of 63 characters and cannot be empty.
   * Values can be empty and have a maximum length of 63 characters. * Keys and values can contain
   * only lowercase letters, numeric characters, underscores, and dashes. All characters must use
   * UTF-8 encoding, and international characters are allowed. * The key portion of a label must be
   * unique. However, you can use the same key with multiple resources. * Keys must start with a
   * lowercase letter or international character. See [Requirements for
   * labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
   * for more details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> userLabels;

  /**
   * Use validate only mode for this recommendation query. If set to true, a fake model will be used
   * that returns arbitrary Document IDs. Note that the validate only mode should only be used for
   * testing the API, or if the model is not ready.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean validateOnly;

  /**
   * Filter for restricting recommendation results with a length limit of 5,000 characters.
   * Currently, only filter expressions on the `filter_tags` attribute is supported. Examples: *
   * `(filter_tags: ANY("Red", "Blue") OR filter_tags: ANY("Hot", "Cold"))` * `(filter_tags:
   * ANY("Red", "Blue")) AND NOT (filter_tags: ANY("Green"))` If your filter blocks all results, the
   * API will return generic (unfiltered) popular Documents. If you only want results strictly
   * matching the filters, set `strictFiltering` to True in RecommendRequest.params to receive empty
   * results instead. Note that the API will never return Documents with `storageStatus` of
   * `EXPIRED` or `DELETED` regardless of filter choices.
   * @return value or {@code null} for none
   */
  public java.lang.String getFilter() {
    return filter;
  }

  /**
   * Filter for restricting recommendation results with a length limit of 5,000 characters.
   * Currently, only filter expressions on the `filter_tags` attribute is supported. Examples: *
   * `(filter_tags: ANY("Red", "Blue") OR filter_tags: ANY("Hot", "Cold"))` * `(filter_tags:
   * ANY("Red", "Blue")) AND NOT (filter_tags: ANY("Green"))` If your filter blocks all results, the
   * API will return generic (unfiltered) popular Documents. If you only want results strictly
   * matching the filters, set `strictFiltering` to True in RecommendRequest.params to receive empty
   * results instead. Note that the API will never return Documents with `storageStatus` of
   * `EXPIRED` or `DELETED` regardless of filter choices.
   * @param filter filter or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1alphaRecommendRequest setFilter(java.lang.String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Maximum number of results to return. Set this property to the number of recommendation results
   * needed. If zero, the service will choose a reasonable default. The maximum allowed value is
   * 100. Values above 100 will be coerced to 100.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPageSize() {
    return pageSize;
  }

  /**
   * Maximum number of results to return. Set this property to the number of recommendation results
   * needed. If zero, the service will choose a reasonable default. The maximum allowed value is
   * 100. Values above 100 will be coerced to 100.
   * @param pageSize pageSize or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1alphaRecommendRequest setPageSize(java.lang.Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Additional domain specific parameters for the recommendations. Allowed values: *
   * `returnDocument`: Boolean. If set to true, the associated Document object will be returned in
   * RecommendResponse.RecommendationResult.document. * `returnScore`: Boolean. If set to true, the
   * recommendation 'score' corresponding to each returned Document will be set in
   * RecommendResponse.RecommendationResult.metadata. The given 'score' indicates the probability of
   * a Document conversion given the user's context and history. * `strictFiltering`: Boolean. True
   * by default. If set to false, the service will return generic (unfiltered) popular Documents
   * instead of empty if your filter blocks all recommendation results. * `diversityLevel`: String.
   * Default empty. If set to be non-empty, then it needs to be one of: * `no-diversity` * `low-
   * diversity` * `medium-diversity` * `high-diversity` * `auto-diversity` This gives request-level
   * control and adjusts recommendation results based on Document category.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Object> getParams() {
    return params;
  }

  /**
   * Additional domain specific parameters for the recommendations. Allowed values: *
   * `returnDocument`: Boolean. If set to true, the associated Document object will be returned in
   * RecommendResponse.RecommendationResult.document. * `returnScore`: Boolean. If set to true, the
   * recommendation 'score' corresponding to each returned Document will be set in
   * RecommendResponse.RecommendationResult.metadata. The given 'score' indicates the probability of
   * a Document conversion given the user's context and history. * `strictFiltering`: Boolean. True
   * by default. If set to false, the service will return generic (unfiltered) popular Documents
   * instead of empty if your filter blocks all recommendation results. * `diversityLevel`: String.
   * Default empty. If set to be non-empty, then it needs to be one of: * `no-diversity` * `low-
   * diversity` * `medium-diversity` * `high-diversity` * `auto-diversity` This gives request-level
   * control and adjusts recommendation results based on Document category.
   * @param params params or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1alphaRecommendRequest setParams(java.util.Map<String, java.lang.Object> params) {
    this.params = params;
    return this;
  }

  /**
   * Required. Context about the user, what they are looking at and what action they took to trigger
   * the Recommend request. Note that this user event detail won't be ingested to userEvent logs.
   * Thus, a separate userEvent write request is required for event logging. Don't set
   * UserEvent.user_pseudo_id or UserEvent.user_info.user_id to the same fixed ID for different
   * users. If you are trying to receive non-personalized recommendations (not recommended; this can
   * negatively impact model performance), instead set UserEvent.user_pseudo_id to a random unique
   * ID and leave UserEvent.user_info.user_id unset.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1alphaUserEvent getUserEvent() {
    return userEvent;
  }

  /**
   * Required. Context about the user, what they are looking at and what action they took to trigger
   * the Recommend request. Note that this user event detail won't be ingested to userEvent logs.
   * Thus, a separate userEvent write request is required for event logging. Don't set
   * UserEvent.user_pseudo_id or UserEvent.user_info.user_id to the same fixed ID for different
   * users. If you are trying to receive non-personalized recommendations (not recommended; this can
   * negatively impact model performance), instead set UserEvent.user_pseudo_id to a random unique
   * ID and leave UserEvent.user_info.user_id unset.
   * @param userEvent userEvent or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1alphaRecommendRequest setUserEvent(GoogleCloudDiscoveryengineV1alphaUserEvent userEvent) {
    this.userEvent = userEvent;
    return this;
  }

  /**
   * The user labels applied to a resource must meet the following requirements: * Each resource can
   * have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have
   * a minimum length of 1 character and a maximum length of 63 characters and cannot be empty.
   * Values can be empty and have a maximum length of 63 characters. * Keys and values can contain
   * only lowercase letters, numeric characters, underscores, and dashes. All characters must use
   * UTF-8 encoding, and international characters are allowed. * The key portion of a label must be
   * unique. However, you can use the same key with multiple resources. * Keys must start with a
   * lowercase letter or international character. See [Requirements for
   * labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
   * for more details.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getUserLabels() {
    return userLabels;
  }

  /**
   * The user labels applied to a resource must meet the following requirements: * Each resource can
   * have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have
   * a minimum length of 1 character and a maximum length of 63 characters and cannot be empty.
   * Values can be empty and have a maximum length of 63 characters. * Keys and values can contain
   * only lowercase letters, numeric characters, underscores, and dashes. All characters must use
   * UTF-8 encoding, and international characters are allowed. * The key portion of a label must be
   * unique. However, you can use the same key with multiple resources. * Keys must start with a
   * lowercase letter or international character. See [Requirements for
   * labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
   * for more details.
   * @param userLabels userLabels or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1alphaRecommendRequest setUserLabels(java.util.Map<String, java.lang.String> userLabels) {
    this.userLabels = userLabels;
    return this;
  }

  /**
   * Use validate only mode for this recommendation query. If set to true, a fake model will be used
   * that returns arbitrary Document IDs. Note that the validate only mode should only be used for
   * testing the API, or if the model is not ready.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getValidateOnly() {
    return validateOnly;
  }

  /**
   * Use validate only mode for this recommendation query. If set to true, a fake model will be used
   * that returns arbitrary Document IDs. Note that the validate only mode should only be used for
   * testing the API, or if the model is not ready.
   * @param validateOnly validateOnly or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1alphaRecommendRequest setValidateOnly(java.lang.Boolean validateOnly) {
    this.validateOnly = validateOnly;
    return this;
  }

  @Override
  public GoogleCloudDiscoveryengineV1alphaRecommendRequest set(String fieldName, Object value) {
    return (GoogleCloudDiscoveryengineV1alphaRecommendRequest) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDiscoveryengineV1alphaRecommendRequest clone() {
    return (GoogleCloudDiscoveryengineV1alphaRecommendRequest) super.clone();
  }

}
