/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.binaryauthorization.v1beta1;

/**
 * Service definition for BinaryAuthorization (v1beta1).
 *
 * <p>
 * The management interface for Binary Authorization, a system providing policy control for images deployed to Kubernetes Engine clusters.

 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/binary-authorization/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link BinaryAuthorizationRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class BinaryAuthorization extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Binary Authorization API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://binaryauthorization.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public BinaryAuthorization(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  BinaryAuthorization(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code BinaryAuthorization binaryauthorization = new BinaryAuthorization(...);}
   *   {@code BinaryAuthorization.Projects.List request = binaryauthorization.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * Gets the policy for this project. Returns a default policy if the project does not have one.
     *
     * Create a request for the method "projects.getPolicy".
     *
     * This request holds the parameters needed by the binaryauthorization server.  After setting any
     * optional parameters, call the {@link GetPolicy#execute()} method to invoke the remote operation.
     *
     * @param name Required. The resource name of the policy to retrieve,
    in the format `projects/policy`.
     * @return the request
     */
    public GetPolicy getPolicy(java.lang.String name) throws java.io.IOException {
      GetPolicy result = new GetPolicy(name);
      initialize(result);
      return result;
    }

    public class GetPolicy extends BinaryAuthorizationRequest<com.google.api.services.binaryauthorization.v1beta1.model.Policy> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/policy$");

      /**
       * Gets the policy for this project. Returns a default policy if the project does not have one.
       *
       * Create a request for the method "projects.getPolicy".
       *
       * This request holds the parameters needed by the the binaryauthorization server.  After setting
       * any optional parameters, call the {@link GetPolicy#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The resource name of the policy to retrieve,
    in the format `projects/policy`.
       * @since 1.13
       */
      protected GetPolicy(java.lang.String name) {
        super(BinaryAuthorization.this, "GET", REST_PATH, null, com.google.api.services.binaryauthorization.v1beta1.model.Policy.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/policy$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetPolicy set$Xgafv(java.lang.String $Xgafv) {
        return (GetPolicy) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetPolicy setAccessToken(java.lang.String accessToken) {
        return (GetPolicy) super.setAccessToken(accessToken);
      }

      @Override
      public GetPolicy setAlt(java.lang.String alt) {
        return (GetPolicy) super.setAlt(alt);
      }

      @Override
      public GetPolicy setCallback(java.lang.String callback) {
        return (GetPolicy) super.setCallback(callback);
      }

      @Override
      public GetPolicy setFields(java.lang.String fields) {
        return (GetPolicy) super.setFields(fields);
      }

      @Override
      public GetPolicy setKey(java.lang.String key) {
        return (GetPolicy) super.setKey(key);
      }

      @Override
      public GetPolicy setOauthToken(java.lang.String oauthToken) {
        return (GetPolicy) super.setOauthToken(oauthToken);
      }

      @Override
      public GetPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetPolicy) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetPolicy setQuotaUser(java.lang.String quotaUser) {
        return (GetPolicy) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetPolicy setUploadType(java.lang.String uploadType) {
        return (GetPolicy) super.setUploadType(uploadType);
      }

      @Override
      public GetPolicy setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetPolicy) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The resource name of the policy to retrieve, in the format `projects/policy`.
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The resource name of the policy to retrieve, in the format `projects/policy`.
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The resource name of the policy to retrieve, in the format `projects/policy`.
       */
      public GetPolicy setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/policy$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetPolicy set(String parameterName, Object value) {
        return (GetPolicy) super.set(parameterName, value);
      }
    }
    /**
     * Creates or updates a project's policy, and returns a copy of the new policy. A policy is always
     * updated as a whole, to avoid race conditions with concurrent policy enforcement (or management!)
     * requests. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is
     * malformed.
     *
     * Create a request for the method "projects.updatePolicy".
     *
     * This request holds the parameters needed by the binaryauthorization server.  After setting any
     * optional parameters, call the {@link UpdatePolicy#execute()} method to invoke the remote
     * operation.
     *
     * @param name Output only. The resource name, in the format `projects/policy`. There is
    at most one policy per
     *        project.
     * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.Policy}
     * @return the request
     */
    public UpdatePolicy updatePolicy(java.lang.String name, com.google.api.services.binaryauthorization.v1beta1.model.Policy content) throws java.io.IOException {
      UpdatePolicy result = new UpdatePolicy(name, content);
      initialize(result);
      return result;
    }

    public class UpdatePolicy extends BinaryAuthorizationRequest<com.google.api.services.binaryauthorization.v1beta1.model.Policy> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/policy$");

      /**
       * Creates or updates a project's policy, and returns a copy of the new policy. A policy is always
       * updated as a whole, to avoid race conditions with concurrent policy enforcement (or
       * management!) requests. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the
       * request is malformed.
       *
       * Create a request for the method "projects.updatePolicy".
       *
       * This request holds the parameters needed by the the binaryauthorization server.  After setting
       * any optional parameters, call the {@link UpdatePolicy#execute()} method to invoke the remote
       * operation. <p> {@link
       * UpdatePolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Output only. The resource name, in the format `projects/policy`. There is
    at most one policy per
     *        project.
       * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.Policy}
       * @since 1.13
       */
      protected UpdatePolicy(java.lang.String name, com.google.api.services.binaryauthorization.v1beta1.model.Policy content) {
        super(BinaryAuthorization.this, "PUT", REST_PATH, content, com.google.api.services.binaryauthorization.v1beta1.model.Policy.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/policy$");
        }
      }

      @Override
      public UpdatePolicy set$Xgafv(java.lang.String $Xgafv) {
        return (UpdatePolicy) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdatePolicy setAccessToken(java.lang.String accessToken) {
        return (UpdatePolicy) super.setAccessToken(accessToken);
      }

      @Override
      public UpdatePolicy setAlt(java.lang.String alt) {
        return (UpdatePolicy) super.setAlt(alt);
      }

      @Override
      public UpdatePolicy setCallback(java.lang.String callback) {
        return (UpdatePolicy) super.setCallback(callback);
      }

      @Override
      public UpdatePolicy setFields(java.lang.String fields) {
        return (UpdatePolicy) super.setFields(fields);
      }

      @Override
      public UpdatePolicy setKey(java.lang.String key) {
        return (UpdatePolicy) super.setKey(key);
      }

      @Override
      public UpdatePolicy setOauthToken(java.lang.String oauthToken) {
        return (UpdatePolicy) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdatePolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdatePolicy) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdatePolicy setQuotaUser(java.lang.String quotaUser) {
        return (UpdatePolicy) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdatePolicy setUploadType(java.lang.String uploadType) {
        return (UpdatePolicy) super.setUploadType(uploadType);
      }

      @Override
      public UpdatePolicy setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdatePolicy) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Output only. The resource name, in the format `projects/policy`. There is at most one
       * policy per project.
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Output only. The resource name, in the format `projects/policy`. There is at most one policy per
     project.
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Output only. The resource name, in the format `projects/policy`. There is at most one
       * policy per project.
       */
      public UpdatePolicy setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/policy$");
        }
        this.name = name;
        return this;
      }

      @Override
      public UpdatePolicy set(String parameterName, Object value) {
        return (UpdatePolicy) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Attestors collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code BinaryAuthorization binaryauthorization = new BinaryAuthorization(...);}
     *   {@code BinaryAuthorization.Attestors.List request = binaryauthorization.attestors().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Attestors attestors() {
      return new Attestors();
    }

    /**
     * The "attestors" collection of methods.
     */
    public class Attestors {

      /**
       * Creates an attestor, and returns a copy of the new attestor. Returns NOT_FOUND if the project
       * does not exist, INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the attestor
       * already exists.
       *
       * Create a request for the method "attestors.create".
       *
       * This request holds the parameters needed by the binaryauthorization server.  After setting any
       * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The parent of this attestor.
       * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.Attestor}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.binaryauthorization.v1beta1.model.Attestor content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends BinaryAuthorizationRequest<com.google.api.services.binaryauthorization.v1beta1.model.Attestor> {

        private static final String REST_PATH = "v1beta1/{+parent}/attestors";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Creates an attestor, and returns a copy of the new attestor. Returns NOT_FOUND if the project
         * does not exist, INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the attestor
         * already exists.
         *
         * Create a request for the method "attestors.create".
         *
         * This request holds the parameters needed by the the binaryauthorization server.  After setting
         * any optional parameters, call the {@link Create#execute()} method to invoke the remote
         * operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The parent of this attestor.
         * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.Attestor}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.binaryauthorization.v1beta1.model.Attestor content) {
          super(BinaryAuthorization.this, "POST", REST_PATH, content, com.google.api.services.binaryauthorization.v1beta1.model.Attestor.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. The parent of this attestor. */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The parent of this attestor.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /** Required. The parent of this attestor. */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /** Required. The attestors ID. */
        @com.google.api.client.util.Key
        private java.lang.String attestorId;

        /** Required. The attestors ID.
         */
        public java.lang.String getAttestorId() {
          return attestorId;
        }

        /** Required. The attestors ID. */
        public Create setAttestorId(java.lang.String attestorId) {
          this.attestorId = attestorId;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes an attestor. Returns NOT_FOUND if the attestor does not exist.
       *
       * Create a request for the method "attestors.delete".
       *
       * This request holds the parameters needed by the binaryauthorization server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the attestors to delete, in the format
      `projects/attestors`.
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends BinaryAuthorizationRequest<com.google.api.services.binaryauthorization.v1beta1.model.Empty> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/attestors/[^/]+$");

        /**
         * Deletes an attestor. Returns NOT_FOUND if the attestor does not exist.
         *
         * Create a request for the method "attestors.delete".
         *
         * This request holds the parameters needed by the the binaryauthorization server.  After setting
         * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
         * operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the attestors to delete, in the format
      `projects/attestors`.
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(BinaryAuthorization.this, "DELETE", REST_PATH, null, com.google.api.services.binaryauthorization.v1beta1.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/attestors/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the attestors to delete, in the format `projects/attestors`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the attestors to delete, in the format `projects/attestors`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the attestors to delete, in the format `projects/attestors`.
         */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/attestors/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Gets an attestor. Returns NOT_FOUND if the attestor does not exist.
       *
       * Create a request for the method "attestors.get".
       *
       * This request holds the parameters needed by the binaryauthorization server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the attestor to retrieve, in the format
      `projects/attestors`.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends BinaryAuthorizationRequest<com.google.api.services.binaryauthorization.v1beta1.model.Attestor> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/attestors/[^/]+$");

        /**
         * Gets an attestor. Returns NOT_FOUND if the attestor does not exist.
         *
         * Create a request for the method "attestors.get".
         *
         * This request holds the parameters needed by the the binaryauthorization server.  After setting
         * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         * <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the attestor to retrieve, in the format
      `projects/attestors`.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(BinaryAuthorization.this, "GET", REST_PATH, null, com.google.api.services.binaryauthorization.v1beta1.model.Attestor.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/attestors/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the attestor to retrieve, in the format `projects/attestors`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the attestor to retrieve, in the format `projects/attestors`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the attestor to retrieve, in the format `projects/attestors`.
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/attestors/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Gets the access control policy for a resource. Returns an empty policy if the resource exists and
       * does not have a policy set.
       *
       * Create a request for the method "attestors.getIamPolicy".
       *
       * This request holds the parameters needed by the binaryauthorization server.  After setting any
       * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy is being requested.
      See the operation documentation for
       *        the appropriate value for this field.
       * @return the request
       */
      public GetIamPolicy getIamPolicy(java.lang.String resource) throws java.io.IOException {
        GetIamPolicy result = new GetIamPolicy(resource);
        initialize(result);
        return result;
      }

      public class GetIamPolicy extends BinaryAuthorizationRequest<com.google.api.services.binaryauthorization.v1beta1.model.IamPolicy> {

        private static final String REST_PATH = "v1beta1/{+resource}:getIamPolicy";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/attestors/[^/]+$");

        /**
         * Gets the access control policy for a resource. Returns an empty policy if the resource exists
         * and does not have a policy set.
         *
         * Create a request for the method "attestors.getIamPolicy".
         *
         * This request holds the parameters needed by the the binaryauthorization server.  After setting
         * any optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
         * operation. <p> {@link
         * GetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy is being requested.
      See the operation documentation for
       *        the appropriate value for this field.
         * @since 1.13
         */
        protected GetIamPolicy(java.lang.String resource) {
          super(BinaryAuthorization.this, "GET", REST_PATH, null, com.google.api.services.binaryauthorization.v1beta1.model.IamPolicy.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/attestors/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public GetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
          return (GetIamPolicy) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetIamPolicy setAccessToken(java.lang.String accessToken) {
          return (GetIamPolicy) super.setAccessToken(accessToken);
        }

        @Override
        public GetIamPolicy setAlt(java.lang.String alt) {
          return (GetIamPolicy) super.setAlt(alt);
        }

        @Override
        public GetIamPolicy setCallback(java.lang.String callback) {
          return (GetIamPolicy) super.setCallback(callback);
        }

        @Override
        public GetIamPolicy setFields(java.lang.String fields) {
          return (GetIamPolicy) super.setFields(fields);
        }

        @Override
        public GetIamPolicy setKey(java.lang.String key) {
          return (GetIamPolicy) super.setKey(key);
        }

        @Override
        public GetIamPolicy setOauthToken(java.lang.String oauthToken) {
          return (GetIamPolicy) super.setOauthToken(oauthToken);
        }

        @Override
        public GetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetIamPolicy) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetIamPolicy setQuotaUser(java.lang.String quotaUser) {
          return (GetIamPolicy) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetIamPolicy setUploadType(java.lang.String uploadType) {
          return (GetIamPolicy) super.setUploadType(uploadType);
        }

        @Override
        public GetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetIamPolicy) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy is being requested. See the operation documentation for
       the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        public GetIamPolicy setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/attestors/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public GetIamPolicy set(String parameterName, Object value) {
          return (GetIamPolicy) super.set(parameterName, value);
        }
      }
      /**
       * Lists attestors. Returns INVALID_ARGUMENT if the project does not exist.
       *
       * Create a request for the method "attestors.list".
       *
       * This request holds the parameters needed by the binaryauthorization server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The resource name of the project associated with the
      attestors, in the format `projects`.
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends BinaryAuthorizationRequest<com.google.api.services.binaryauthorization.v1beta1.model.ListAttestorsResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/attestors";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists attestors. Returns INVALID_ARGUMENT if the project does not exist.
         *
         * Create a request for the method "attestors.list".
         *
         * This request holds the parameters needed by the the binaryauthorization server.  After setting
         * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         * <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The resource name of the project associated with the
      attestors, in the format `projects`.
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(BinaryAuthorization.this, "GET", REST_PATH, null, com.google.api.services.binaryauthorization.v1beta1.model.ListAttestorsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The resource name of the project associated with the attestors, in the format
         * `projects`.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The resource name of the project associated with the attestors, in the format `projects`.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The resource name of the project associated with the attestors, in the format
         * `projects`.
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * Requested page size. The server may return fewer results than requested. If unspecified,
         * the server will pick an appropriate default.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Requested page size. The server may return fewer results than requested. If unspecified, the server
       will pick an appropriate default.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Requested page size. The server may return fewer results than requested. If unspecified,
         * the server will pick an appropriate default.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * A token identifying a page of results the server should return. Typically, this is the
         * value of ListAttestorsResponse.next_page_token returned from the previous call to the
         * `ListAttestors` method.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A token identifying a page of results the server should return. Typically, this is the value of
       ListAttestorsResponse.next_page_token returned from the previous call to the `ListAttestors`
       method.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A token identifying a page of results the server should return. Typically, this is the
         * value of ListAttestorsResponse.next_page_token returned from the previous call to the
         * `ListAttestors` method.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Sets the access control policy on the specified resource. Replaces any existing policy.
       *
       * Create a request for the method "attestors.setIamPolicy".
       *
       * This request holds the parameters needed by the binaryauthorization server.  After setting any
       * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy is being specified.
      See the operation documentation for
       *        the appropriate value for this field.
       * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.SetIamPolicyRequest}
       * @return the request
       */
      public SetIamPolicy setIamPolicy(java.lang.String resource, com.google.api.services.binaryauthorization.v1beta1.model.SetIamPolicyRequest content) throws java.io.IOException {
        SetIamPolicy result = new SetIamPolicy(resource, content);
        initialize(result);
        return result;
      }

      public class SetIamPolicy extends BinaryAuthorizationRequest<com.google.api.services.binaryauthorization.v1beta1.model.IamPolicy> {

        private static final String REST_PATH = "v1beta1/{+resource}:setIamPolicy";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/attestors/[^/]+$");

        /**
         * Sets the access control policy on the specified resource. Replaces any existing policy.
         *
         * Create a request for the method "attestors.setIamPolicy".
         *
         * This request holds the parameters needed by the the binaryauthorization server.  After setting
         * any optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
         * operation. <p> {@link
         * SetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy is being specified.
      See the operation documentation for
       *        the appropriate value for this field.
         * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.SetIamPolicyRequest}
         * @since 1.13
         */
        protected SetIamPolicy(java.lang.String resource, com.google.api.services.binaryauthorization.v1beta1.model.SetIamPolicyRequest content) {
          super(BinaryAuthorization.this, "POST", REST_PATH, content, com.google.api.services.binaryauthorization.v1beta1.model.IamPolicy.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/attestors/[^/]+$");
          }
        }

        @Override
        public SetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
          return (SetIamPolicy) super.set$Xgafv($Xgafv);
        }

        @Override
        public SetIamPolicy setAccessToken(java.lang.String accessToken) {
          return (SetIamPolicy) super.setAccessToken(accessToken);
        }

        @Override
        public SetIamPolicy setAlt(java.lang.String alt) {
          return (SetIamPolicy) super.setAlt(alt);
        }

        @Override
        public SetIamPolicy setCallback(java.lang.String callback) {
          return (SetIamPolicy) super.setCallback(callback);
        }

        @Override
        public SetIamPolicy setFields(java.lang.String fields) {
          return (SetIamPolicy) super.setFields(fields);
        }

        @Override
        public SetIamPolicy setKey(java.lang.String key) {
          return (SetIamPolicy) super.setKey(key);
        }

        @Override
        public SetIamPolicy setOauthToken(java.lang.String oauthToken) {
          return (SetIamPolicy) super.setOauthToken(oauthToken);
        }

        @Override
        public SetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (SetIamPolicy) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public SetIamPolicy setQuotaUser(java.lang.String quotaUser) {
          return (SetIamPolicy) super.setQuotaUser(quotaUser);
        }

        @Override
        public SetIamPolicy setUploadType(java.lang.String uploadType) {
          return (SetIamPolicy) super.setUploadType(uploadType);
        }

        @Override
        public SetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
          return (SetIamPolicy) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy is being specified. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy is being specified. See the operation documentation for
       the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy is being specified. See the operation
         * documentation for the appropriate value for this field.
         */
        public SetIamPolicy setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/attestors/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public SetIamPolicy set(String parameterName, Object value) {
          return (SetIamPolicy) super.set(parameterName, value);
        }
      }
      /**
       * Returns permissions that a caller has on the specified resource. If the resource does not exist,
       * this will return an empty set of permissions, not a NOT_FOUND error.
       *
       * Note: This operation is designed to be used for building permission-aware UIs and command-line
       * tools, not for authorization checking. This operation may "fail open" without warning.
       *
       * Create a request for the method "attestors.testIamPermissions".
       *
       * This request holds the parameters needed by the binaryauthorization server.  After setting any
       * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy detail is being requested.
      See the operation
       *        documentation for the appropriate value for this field.
       * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.TestIamPermissionsRequest}
       * @return the request
       */
      public TestIamPermissions testIamPermissions(java.lang.String resource, com.google.api.services.binaryauthorization.v1beta1.model.TestIamPermissionsRequest content) throws java.io.IOException {
        TestIamPermissions result = new TestIamPermissions(resource, content);
        initialize(result);
        return result;
      }

      public class TestIamPermissions extends BinaryAuthorizationRequest<com.google.api.services.binaryauthorization.v1beta1.model.TestIamPermissionsResponse> {

        private static final String REST_PATH = "v1beta1/{+resource}:testIamPermissions";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/attestors/[^/]+$");

        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not
         * exist, this will return an empty set of permissions, not a NOT_FOUND error.
         *
         * Note: This operation is designed to be used for building permission-aware UIs and command-line
         * tools, not for authorization checking. This operation may "fail open" without warning.
         *
         * Create a request for the method "attestors.testIamPermissions".
         *
         * This request holds the parameters needed by the the binaryauthorization server.  After setting
         * any optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the
         * remote operation. <p> {@link TestIamPermissions#initialize(com.google.api.client.googleapis.ser
         * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
         * after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy detail is being requested.
      See the operation
       *        documentation for the appropriate value for this field.
         * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.TestIamPermissionsRequest}
         * @since 1.13
         */
        protected TestIamPermissions(java.lang.String resource, com.google.api.services.binaryauthorization.v1beta1.model.TestIamPermissionsRequest content) {
          super(BinaryAuthorization.this, "POST", REST_PATH, content, com.google.api.services.binaryauthorization.v1beta1.model.TestIamPermissionsResponse.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/attestors/[^/]+$");
          }
        }

        @Override
        public TestIamPermissions set$Xgafv(java.lang.String $Xgafv) {
          return (TestIamPermissions) super.set$Xgafv($Xgafv);
        }

        @Override
        public TestIamPermissions setAccessToken(java.lang.String accessToken) {
          return (TestIamPermissions) super.setAccessToken(accessToken);
        }

        @Override
        public TestIamPermissions setAlt(java.lang.String alt) {
          return (TestIamPermissions) super.setAlt(alt);
        }

        @Override
        public TestIamPermissions setCallback(java.lang.String callback) {
          return (TestIamPermissions) super.setCallback(callback);
        }

        @Override
        public TestIamPermissions setFields(java.lang.String fields) {
          return (TestIamPermissions) super.setFields(fields);
        }

        @Override
        public TestIamPermissions setKey(java.lang.String key) {
          return (TestIamPermissions) super.setKey(key);
        }

        @Override
        public TestIamPermissions setOauthToken(java.lang.String oauthToken) {
          return (TestIamPermissions) super.setOauthToken(oauthToken);
        }

        @Override
        public TestIamPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (TestIamPermissions) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public TestIamPermissions setQuotaUser(java.lang.String quotaUser) {
          return (TestIamPermissions) super.setQuotaUser(quotaUser);
        }

        @Override
        public TestIamPermissions setUploadType(java.lang.String uploadType) {
          return (TestIamPermissions) super.setUploadType(uploadType);
        }

        @Override
        public TestIamPermissions setUploadProtocol(java.lang.String uploadProtocol) {
          return (TestIamPermissions) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy detail is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy detail is being requested. See the operation
       documentation for the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy detail is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        public TestIamPermissions setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/attestors/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public TestIamPermissions set(String parameterName, Object value) {
          return (TestIamPermissions) super.set(parameterName, value);
        }
      }
      /**
       * Updates an attestor. Returns NOT_FOUND if the attestor does not exist.
       *
       * Create a request for the method "attestors.update".
       *
       * This request holds the parameters needed by the binaryauthorization server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * @param name Required. The resource name, in the format:
      `projects/attestors`. This field may not be updated.
       * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.Attestor}
       * @return the request
       */
      public Update update(java.lang.String name, com.google.api.services.binaryauthorization.v1beta1.model.Attestor content) throws java.io.IOException {
        Update result = new Update(name, content);
        initialize(result);
        return result;
      }

      public class Update extends BinaryAuthorizationRequest<com.google.api.services.binaryauthorization.v1beta1.model.Attestor> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/attestors/[^/]+$");

        /**
         * Updates an attestor. Returns NOT_FOUND if the attestor does not exist.
         *
         * Create a request for the method "attestors.update".
         *
         * This request holds the parameters needed by the the binaryauthorization server.  After setting
         * any optional parameters, call the {@link Update#execute()} method to invoke the remote
         * operation. <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The resource name, in the format:
      `projects/attestors`. This field may not be updated.
         * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.Attestor}
         * @since 1.13
         */
        protected Update(java.lang.String name, com.google.api.services.binaryauthorization.v1beta1.model.Attestor content) {
          super(BinaryAuthorization.this, "PUT", REST_PATH, content, com.google.api.services.binaryauthorization.v1beta1.model.Attestor.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/attestors/[^/]+$");
          }
        }

        @Override
        public Update set$Xgafv(java.lang.String $Xgafv) {
          return (Update) super.set$Xgafv($Xgafv);
        }

        @Override
        public Update setAccessToken(java.lang.String accessToken) {
          return (Update) super.setAccessToken(accessToken);
        }

        @Override
        public Update setAlt(java.lang.String alt) {
          return (Update) super.setAlt(alt);
        }

        @Override
        public Update setCallback(java.lang.String callback) {
          return (Update) super.setCallback(callback);
        }

        @Override
        public Update setFields(java.lang.String fields) {
          return (Update) super.setFields(fields);
        }

        @Override
        public Update setKey(java.lang.String key) {
          return (Update) super.setKey(key);
        }

        @Override
        public Update setOauthToken(java.lang.String oauthToken) {
          return (Update) super.setOauthToken(oauthToken);
        }

        @Override
        public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Update) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Update setQuotaUser(java.lang.String quotaUser) {
          return (Update) super.setQuotaUser(quotaUser);
        }

        @Override
        public Update setUploadType(java.lang.String uploadType) {
          return (Update) super.setUploadType(uploadType);
        }

        @Override
        public Update setUploadProtocol(java.lang.String uploadProtocol) {
          return (Update) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The resource name, in the format: `projects/attestors`. This field may not be
         * updated.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The resource name, in the format: `projects/attestors`. This field may not be updated.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The resource name, in the format: `projects/attestors`. This field may not be
         * updated.
         */
        public Update setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/attestors/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Update set(String parameterName, Object value) {
          return (Update) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Policy collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code BinaryAuthorization binaryauthorization = new BinaryAuthorization(...);}
     *   {@code BinaryAuthorization.Policy.List request = binaryauthorization.policy().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Policy policy() {
      return new Policy();
    }

    /**
     * The "policy" collection of methods.
     */
    public class Policy {

      /**
       * Gets the access control policy for a resource. Returns an empty policy if the resource exists and
       * does not have a policy set.
       *
       * Create a request for the method "policy.getIamPolicy".
       *
       * This request holds the parameters needed by the binaryauthorization server.  After setting any
       * optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy is being requested.
      See the operation documentation for
       *        the appropriate value for this field.
       * @return the request
       */
      public GetIamPolicy getIamPolicy(java.lang.String resource) throws java.io.IOException {
        GetIamPolicy result = new GetIamPolicy(resource);
        initialize(result);
        return result;
      }

      public class GetIamPolicy extends BinaryAuthorizationRequest<com.google.api.services.binaryauthorization.v1beta1.model.IamPolicy> {

        private static final String REST_PATH = "v1beta1/{+resource}:getIamPolicy";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/policy$");

        /**
         * Gets the access control policy for a resource. Returns an empty policy if the resource exists
         * and does not have a policy set.
         *
         * Create a request for the method "policy.getIamPolicy".
         *
         * This request holds the parameters needed by the the binaryauthorization server.  After setting
         * any optional parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote
         * operation. <p> {@link
         * GetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy is being requested.
      See the operation documentation for
       *        the appropriate value for this field.
         * @since 1.13
         */
        protected GetIamPolicy(java.lang.String resource) {
          super(BinaryAuthorization.this, "GET", REST_PATH, null, com.google.api.services.binaryauthorization.v1beta1.model.IamPolicy.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/policy$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public GetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
          return (GetIamPolicy) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetIamPolicy setAccessToken(java.lang.String accessToken) {
          return (GetIamPolicy) super.setAccessToken(accessToken);
        }

        @Override
        public GetIamPolicy setAlt(java.lang.String alt) {
          return (GetIamPolicy) super.setAlt(alt);
        }

        @Override
        public GetIamPolicy setCallback(java.lang.String callback) {
          return (GetIamPolicy) super.setCallback(callback);
        }

        @Override
        public GetIamPolicy setFields(java.lang.String fields) {
          return (GetIamPolicy) super.setFields(fields);
        }

        @Override
        public GetIamPolicy setKey(java.lang.String key) {
          return (GetIamPolicy) super.setKey(key);
        }

        @Override
        public GetIamPolicy setOauthToken(java.lang.String oauthToken) {
          return (GetIamPolicy) super.setOauthToken(oauthToken);
        }

        @Override
        public GetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetIamPolicy) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetIamPolicy setQuotaUser(java.lang.String quotaUser) {
          return (GetIamPolicy) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetIamPolicy setUploadType(java.lang.String uploadType) {
          return (GetIamPolicy) super.setUploadType(uploadType);
        }

        @Override
        public GetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetIamPolicy) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy is being requested. See the operation documentation for
       the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        public GetIamPolicy setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/policy$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public GetIamPolicy set(String parameterName, Object value) {
          return (GetIamPolicy) super.set(parameterName, value);
        }
      }
      /**
       * Sets the access control policy on the specified resource. Replaces any existing policy.
       *
       * Create a request for the method "policy.setIamPolicy".
       *
       * This request holds the parameters needed by the binaryauthorization server.  After setting any
       * optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy is being specified.
      See the operation documentation for
       *        the appropriate value for this field.
       * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.SetIamPolicyRequest}
       * @return the request
       */
      public SetIamPolicy setIamPolicy(java.lang.String resource, com.google.api.services.binaryauthorization.v1beta1.model.SetIamPolicyRequest content) throws java.io.IOException {
        SetIamPolicy result = new SetIamPolicy(resource, content);
        initialize(result);
        return result;
      }

      public class SetIamPolicy extends BinaryAuthorizationRequest<com.google.api.services.binaryauthorization.v1beta1.model.IamPolicy> {

        private static final String REST_PATH = "v1beta1/{+resource}:setIamPolicy";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/policy$");

        /**
         * Sets the access control policy on the specified resource. Replaces any existing policy.
         *
         * Create a request for the method "policy.setIamPolicy".
         *
         * This request holds the parameters needed by the the binaryauthorization server.  After setting
         * any optional parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote
         * operation. <p> {@link
         * SetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy is being specified.
      See the operation documentation for
       *        the appropriate value for this field.
         * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.SetIamPolicyRequest}
         * @since 1.13
         */
        protected SetIamPolicy(java.lang.String resource, com.google.api.services.binaryauthorization.v1beta1.model.SetIamPolicyRequest content) {
          super(BinaryAuthorization.this, "POST", REST_PATH, content, com.google.api.services.binaryauthorization.v1beta1.model.IamPolicy.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/policy$");
          }
        }

        @Override
        public SetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
          return (SetIamPolicy) super.set$Xgafv($Xgafv);
        }

        @Override
        public SetIamPolicy setAccessToken(java.lang.String accessToken) {
          return (SetIamPolicy) super.setAccessToken(accessToken);
        }

        @Override
        public SetIamPolicy setAlt(java.lang.String alt) {
          return (SetIamPolicy) super.setAlt(alt);
        }

        @Override
        public SetIamPolicy setCallback(java.lang.String callback) {
          return (SetIamPolicy) super.setCallback(callback);
        }

        @Override
        public SetIamPolicy setFields(java.lang.String fields) {
          return (SetIamPolicy) super.setFields(fields);
        }

        @Override
        public SetIamPolicy setKey(java.lang.String key) {
          return (SetIamPolicy) super.setKey(key);
        }

        @Override
        public SetIamPolicy setOauthToken(java.lang.String oauthToken) {
          return (SetIamPolicy) super.setOauthToken(oauthToken);
        }

        @Override
        public SetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (SetIamPolicy) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public SetIamPolicy setQuotaUser(java.lang.String quotaUser) {
          return (SetIamPolicy) super.setQuotaUser(quotaUser);
        }

        @Override
        public SetIamPolicy setUploadType(java.lang.String uploadType) {
          return (SetIamPolicy) super.setUploadType(uploadType);
        }

        @Override
        public SetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
          return (SetIamPolicy) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy is being specified. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy is being specified. See the operation documentation for
       the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy is being specified. See the operation
         * documentation for the appropriate value for this field.
         */
        public SetIamPolicy setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/policy$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public SetIamPolicy set(String parameterName, Object value) {
          return (SetIamPolicy) super.set(parameterName, value);
        }
      }
      /**
       * Returns permissions that a caller has on the specified resource. If the resource does not exist,
       * this will return an empty set of permissions, not a NOT_FOUND error.
       *
       * Note: This operation is designed to be used for building permission-aware UIs and command-line
       * tools, not for authorization checking. This operation may "fail open" without warning.
       *
       * Create a request for the method "policy.testIamPermissions".
       *
       * This request holds the parameters needed by the binaryauthorization server.  After setting any
       * optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
       * operation.
       *
       * @param resource REQUIRED: The resource for which the policy detail is being requested.
      See the operation
       *        documentation for the appropriate value for this field.
       * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.TestIamPermissionsRequest}
       * @return the request
       */
      public TestIamPermissions testIamPermissions(java.lang.String resource, com.google.api.services.binaryauthorization.v1beta1.model.TestIamPermissionsRequest content) throws java.io.IOException {
        TestIamPermissions result = new TestIamPermissions(resource, content);
        initialize(result);
        return result;
      }

      public class TestIamPermissions extends BinaryAuthorizationRequest<com.google.api.services.binaryauthorization.v1beta1.model.TestIamPermissionsResponse> {

        private static final String REST_PATH = "v1beta1/{+resource}:testIamPermissions";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/policy$");

        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not
         * exist, this will return an empty set of permissions, not a NOT_FOUND error.
         *
         * Note: This operation is designed to be used for building permission-aware UIs and command-line
         * tools, not for authorization checking. This operation may "fail open" without warning.
         *
         * Create a request for the method "policy.testIamPermissions".
         *
         * This request holds the parameters needed by the the binaryauthorization server.  After setting
         * any optional parameters, call the {@link TestIamPermissions#execute()} method to invoke the
         * remote operation. <p> {@link TestIamPermissions#initialize(com.google.api.client.googleapis.ser
         * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
         * after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The resource for which the policy detail is being requested.
      See the operation
       *        documentation for the appropriate value for this field.
         * @param content the {@link com.google.api.services.binaryauthorization.v1beta1.model.TestIamPermissionsRequest}
         * @since 1.13
         */
        protected TestIamPermissions(java.lang.String resource, com.google.api.services.binaryauthorization.v1beta1.model.TestIamPermissionsRequest content) {
          super(BinaryAuthorization.this, "POST", REST_PATH, content, com.google.api.services.binaryauthorization.v1beta1.model.TestIamPermissionsResponse.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/policy$");
          }
        }

        @Override
        public TestIamPermissions set$Xgafv(java.lang.String $Xgafv) {
          return (TestIamPermissions) super.set$Xgafv($Xgafv);
        }

        @Override
        public TestIamPermissions setAccessToken(java.lang.String accessToken) {
          return (TestIamPermissions) super.setAccessToken(accessToken);
        }

        @Override
        public TestIamPermissions setAlt(java.lang.String alt) {
          return (TestIamPermissions) super.setAlt(alt);
        }

        @Override
        public TestIamPermissions setCallback(java.lang.String callback) {
          return (TestIamPermissions) super.setCallback(callback);
        }

        @Override
        public TestIamPermissions setFields(java.lang.String fields) {
          return (TestIamPermissions) super.setFields(fields);
        }

        @Override
        public TestIamPermissions setKey(java.lang.String key) {
          return (TestIamPermissions) super.setKey(key);
        }

        @Override
        public TestIamPermissions setOauthToken(java.lang.String oauthToken) {
          return (TestIamPermissions) super.setOauthToken(oauthToken);
        }

        @Override
        public TestIamPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (TestIamPermissions) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public TestIamPermissions setQuotaUser(java.lang.String quotaUser) {
          return (TestIamPermissions) super.setQuotaUser(quotaUser);
        }

        @Override
        public TestIamPermissions setUploadType(java.lang.String uploadType) {
          return (TestIamPermissions) super.setUploadType(uploadType);
        }

        @Override
        public TestIamPermissions setUploadProtocol(java.lang.String uploadProtocol) {
          return (TestIamPermissions) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The resource for which the policy detail is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The resource for which the policy detail is being requested. See the operation
       documentation for the appropriate value for this field.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The resource for which the policy detail is being requested. See the operation
         * documentation for the appropriate value for this field.
         */
        public TestIamPermissions setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/policy$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public TestIamPermissions set(String parameterName, Object value) {
          return (TestIamPermissions) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link BinaryAuthorization}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link BinaryAuthorization}. */
    @Override
    public BinaryAuthorization build() {
      return new BinaryAuthorization(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link BinaryAuthorizationRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setBinaryAuthorizationRequestInitializer(
        BinaryAuthorizationRequestInitializer binaryauthorizationRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(binaryauthorizationRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
