/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataproc.model;

/**
 * Runtime information about workload execution.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Dataproc API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RuntimeInfo extends com.google.api.client.json.GenericJson {

  /**
   * Output only. A URI pointing to the location of the diagnostics tarball.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String diagnosticOutputUri;

  /**
   * Output only. Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> endpoints;

  /**
   * Output only. A URI pointing to the location of the stdout and stderr of the workload.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String outputUri;

  /**
   * Output only. A URI pointing to the location of the diagnostics tarball.
   * @return value or {@code null} for none
   */
  public java.lang.String getDiagnosticOutputUri() {
    return diagnosticOutputUri;
  }

  /**
   * Output only. A URI pointing to the location of the diagnostics tarball.
   * @param diagnosticOutputUri diagnosticOutputUri or {@code null} for none
   */
  public RuntimeInfo setDiagnosticOutputUri(java.lang.String diagnosticOutputUri) {
    this.diagnosticOutputUri = diagnosticOutputUri;
    return this;
  }

  /**
   * Output only. Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getEndpoints() {
    return endpoints;
  }

  /**
   * Output only. Map of remote access endpoints (such as web interfaces and APIs) to their URIs.
   * @param endpoints endpoints or {@code null} for none
   */
  public RuntimeInfo setEndpoints(java.util.Map<String, java.lang.String> endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  /**
   * Output only. A URI pointing to the location of the stdout and stderr of the workload.
   * @return value or {@code null} for none
   */
  public java.lang.String getOutputUri() {
    return outputUri;
  }

  /**
   * Output only. A URI pointing to the location of the stdout and stderr of the workload.
   * @param outputUri outputUri or {@code null} for none
   */
  public RuntimeInfo setOutputUri(java.lang.String outputUri) {
    this.outputUri = outputUri;
    return this;
  }

  @Override
  public RuntimeInfo set(String fieldName, Object value) {
    return (RuntimeInfo) super.set(fieldName, value);
  }

  @Override
  public RuntimeInfo clone() {
    return (RuntimeInfo) super.clone();
  }

}
