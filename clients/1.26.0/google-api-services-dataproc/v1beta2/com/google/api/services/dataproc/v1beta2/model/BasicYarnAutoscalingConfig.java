/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataproc.v1beta2.model;

/**
 * Basic autoscaling configurations for YARN.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Dataproc API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BasicYarnAutoscalingConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Timeout used during an autoscaling event (cluster update) between 0 seconds (no
   * graceful decommission) and 1 day.Default: 0s.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String gracefulDecommissionTimeout;

  /**
   * Optional. Fraction of suggested decrease in workers to scale down by between 0 and 1. Suggested
   * decrease when scaling down is determined by the amount of average available memory since the
   * last cooldown period.Default: 1.0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double scaleDownFactor;

  /**
   * Optional. Minimum workers as a fraction of the current cluster size to to scale down by between
   * 0 and 1.Default: 0.0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double scaleDownMinWorkerFraction;

  /**
   * Required. Fraction of suggested increase in workers to scale up by between 0 and 1. Suggested
   * increase when scaling up is determined by the amount of average pending memory since the last
   * cooldown period.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double scaleUpFactor;

  /**
   * Optional. Minimum workers as a fraction of the current cluster size to to scale up by between 0
   * and 1.Default: 0.0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double scaleUpMinWorkerFraction;

  /**
   * Optional. Timeout used during an autoscaling event (cluster update) between 0 seconds (no
   * graceful decommission) and 1 day.Default: 0s.
   * @return value or {@code null} for none
   */
  public String getGracefulDecommissionTimeout() {
    return gracefulDecommissionTimeout;
  }

  /**
   * Optional. Timeout used during an autoscaling event (cluster update) between 0 seconds (no
   * graceful decommission) and 1 day.Default: 0s.
   * @param gracefulDecommissionTimeout gracefulDecommissionTimeout or {@code null} for none
   */
  public BasicYarnAutoscalingConfig setGracefulDecommissionTimeout(String gracefulDecommissionTimeout) {
    this.gracefulDecommissionTimeout = gracefulDecommissionTimeout;
    return this;
  }

  /**
   * Optional. Fraction of suggested decrease in workers to scale down by between 0 and 1. Suggested
   * decrease when scaling down is determined by the amount of average available memory since the
   * last cooldown period.Default: 1.0.
   * @return value or {@code null} for none
   */
  public java.lang.Double getScaleDownFactor() {
    return scaleDownFactor;
  }

  /**
   * Optional. Fraction of suggested decrease in workers to scale down by between 0 and 1. Suggested
   * decrease when scaling down is determined by the amount of average available memory since the
   * last cooldown period.Default: 1.0.
   * @param scaleDownFactor scaleDownFactor or {@code null} for none
   */
  public BasicYarnAutoscalingConfig setScaleDownFactor(java.lang.Double scaleDownFactor) {
    this.scaleDownFactor = scaleDownFactor;
    return this;
  }

  /**
   * Optional. Minimum workers as a fraction of the current cluster size to to scale down by between
   * 0 and 1.Default: 0.0.
   * @return value or {@code null} for none
   */
  public java.lang.Double getScaleDownMinWorkerFraction() {
    return scaleDownMinWorkerFraction;
  }

  /**
   * Optional. Minimum workers as a fraction of the current cluster size to to scale down by between
   * 0 and 1.Default: 0.0.
   * @param scaleDownMinWorkerFraction scaleDownMinWorkerFraction or {@code null} for none
   */
  public BasicYarnAutoscalingConfig setScaleDownMinWorkerFraction(java.lang.Double scaleDownMinWorkerFraction) {
    this.scaleDownMinWorkerFraction = scaleDownMinWorkerFraction;
    return this;
  }

  /**
   * Required. Fraction of suggested increase in workers to scale up by between 0 and 1. Suggested
   * increase when scaling up is determined by the amount of average pending memory since the last
   * cooldown period.
   * @return value or {@code null} for none
   */
  public java.lang.Double getScaleUpFactor() {
    return scaleUpFactor;
  }

  /**
   * Required. Fraction of suggested increase in workers to scale up by between 0 and 1. Suggested
   * increase when scaling up is determined by the amount of average pending memory since the last
   * cooldown period.
   * @param scaleUpFactor scaleUpFactor or {@code null} for none
   */
  public BasicYarnAutoscalingConfig setScaleUpFactor(java.lang.Double scaleUpFactor) {
    this.scaleUpFactor = scaleUpFactor;
    return this;
  }

  /**
   * Optional. Minimum workers as a fraction of the current cluster size to to scale up by between 0
   * and 1.Default: 0.0.
   * @return value or {@code null} for none
   */
  public java.lang.Double getScaleUpMinWorkerFraction() {
    return scaleUpMinWorkerFraction;
  }

  /**
   * Optional. Minimum workers as a fraction of the current cluster size to to scale up by between 0
   * and 1.Default: 0.0.
   * @param scaleUpMinWorkerFraction scaleUpMinWorkerFraction or {@code null} for none
   */
  public BasicYarnAutoscalingConfig setScaleUpMinWorkerFraction(java.lang.Double scaleUpMinWorkerFraction) {
    this.scaleUpMinWorkerFraction = scaleUpMinWorkerFraction;
    return this;
  }

  @Override
  public BasicYarnAutoscalingConfig set(String fieldName, Object value) {
    return (BasicYarnAutoscalingConfig) super.set(fieldName, value);
  }

  @Override
  public BasicYarnAutoscalingConfig clone() {
    return (BasicYarnAutoscalingConfig) super.clone();
  }

}
