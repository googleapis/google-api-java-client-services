/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.jobs.v2.model;

/**
 * Input only.
 *
 * Parameters needed for commute search.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Talent Solution API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CommutePreference extends com.google.api.client.json.GenericJson {

  /**
   * Optional. If `true`, jobs without street level addresses may also be returned. For city level
   * addresses, the city center is used. For state and coarser level addresses, text matching is
   * used. If this field is set to `false` or is not specified, only jobs that include street level
   * addresses will be returned by commute search.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowNonStreetLevelAddress;

  /**
   * Optional. The departure hour to use to calculate traffic impact. Accepts an integer between 0
   * and 23, representing the hour in the time zone of the start_location. Must not be present if
   * road_traffic is specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer departureHourLocal;

  /**
   * Required. The method of transportation for which to calculate the commute time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String method;

  /**
   * Optional. Specifies the traffic density to use when calculating commute time. Must not be
   * present if departure_hour_local is specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String roadTraffic;

  /**
   * Required. The latitude and longitude of the location from which to calculate the commute time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LatLng startLocation;

  /**
   * Required. The maximum travel time in seconds. The maximum allowed value is `3600s` (one hour).
   * Format is `123s`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String travelTime;

  /**
   * Optional. If `true`, jobs without street level addresses may also be returned. For city level
   * addresses, the city center is used. For state and coarser level addresses, text matching is
   * used. If this field is set to `false` or is not specified, only jobs that include street level
   * addresses will be returned by commute search.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowNonStreetLevelAddress() {
    return allowNonStreetLevelAddress;
  }

  /**
   * Optional. If `true`, jobs without street level addresses may also be returned. For city level
   * addresses, the city center is used. For state and coarser level addresses, text matching is
   * used. If this field is set to `false` or is not specified, only jobs that include street level
   * addresses will be returned by commute search.
   * @param allowNonStreetLevelAddress allowNonStreetLevelAddress or {@code null} for none
   */
  public CommutePreference setAllowNonStreetLevelAddress(java.lang.Boolean allowNonStreetLevelAddress) {
    this.allowNonStreetLevelAddress = allowNonStreetLevelAddress;
    return this;
  }

  /**
   * Optional. The departure hour to use to calculate traffic impact. Accepts an integer between 0
   * and 23, representing the hour in the time zone of the start_location. Must not be present if
   * road_traffic is specified.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDepartureHourLocal() {
    return departureHourLocal;
  }

  /**
   * Optional. The departure hour to use to calculate traffic impact. Accepts an integer between 0
   * and 23, representing the hour in the time zone of the start_location. Must not be present if
   * road_traffic is specified.
   * @param departureHourLocal departureHourLocal or {@code null} for none
   */
  public CommutePreference setDepartureHourLocal(java.lang.Integer departureHourLocal) {
    this.departureHourLocal = departureHourLocal;
    return this;
  }

  /**
   * Required. The method of transportation for which to calculate the commute time.
   * @return value or {@code null} for none
   */
  public java.lang.String getMethod() {
    return method;
  }

  /**
   * Required. The method of transportation for which to calculate the commute time.
   * @param method method or {@code null} for none
   */
  public CommutePreference setMethod(java.lang.String method) {
    this.method = method;
    return this;
  }

  /**
   * Optional. Specifies the traffic density to use when calculating commute time. Must not be
   * present if departure_hour_local is specified.
   * @return value or {@code null} for none
   */
  public java.lang.String getRoadTraffic() {
    return roadTraffic;
  }

  /**
   * Optional. Specifies the traffic density to use when calculating commute time. Must not be
   * present if departure_hour_local is specified.
   * @param roadTraffic roadTraffic or {@code null} for none
   */
  public CommutePreference setRoadTraffic(java.lang.String roadTraffic) {
    this.roadTraffic = roadTraffic;
    return this;
  }

  /**
   * Required. The latitude and longitude of the location from which to calculate the commute time.
   * @return value or {@code null} for none
   */
  public LatLng getStartLocation() {
    return startLocation;
  }

  /**
   * Required. The latitude and longitude of the location from which to calculate the commute time.
   * @param startLocation startLocation or {@code null} for none
   */
  public CommutePreference setStartLocation(LatLng startLocation) {
    this.startLocation = startLocation;
    return this;
  }

  /**
   * Required. The maximum travel time in seconds. The maximum allowed value is `3600s` (one hour).
   * Format is `123s`.
   * @return value or {@code null} for none
   */
  public String getTravelTime() {
    return travelTime;
  }

  /**
   * Required. The maximum travel time in seconds. The maximum allowed value is `3600s` (one hour).
   * Format is `123s`.
   * @param travelTime travelTime or {@code null} for none
   */
  public CommutePreference setTravelTime(String travelTime) {
    this.travelTime = travelTime;
    return this;
  }

  @Override
  public CommutePreference set(String fieldName, Object value) {
    return (CommutePreference) super.set(fieldName, value);
  }

  @Override
  public CommutePreference clone() {
    return (CommutePreference) super.clone();
  }

}
