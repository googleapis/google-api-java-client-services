/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.documentai.v1beta3;

/**
 * Service definition for Document (v1beta3).
 *
 * <p>
 * Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/document-ai/docs/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link DocumentRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Document extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1)),
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "1.31.0 of the Cloud Document AI API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://documentai.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://documentai.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Document(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Document(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Document documentai = new Document(...);}
   *   {@code Document.Projects.List request = documentai.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Document documentai = new Document(...);}
     *   {@code Document.Locations.List request = documentai.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * Gets information about a location.
       *
       * Create a request for the method "locations.get".
       *
       * This request holds the parameters needed by the documentai server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Resource name for the location.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends DocumentRequest<com.google.api.services.documentai.v1beta3.model.GoogleCloudLocationLocation> {

        private static final String REST_PATH = "v1beta3/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

        /**
         * Gets information about a location.
         *
         * Create a request for the method "locations.get".
         *
         * This request holds the parameters needed by the the documentai server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Resource name for the location.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(Document.this, "GET", REST_PATH, null, com.google.api.services.documentai.v1beta3.model.GoogleCloudLocationLocation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Resource name for the location. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Resource name for the location.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Resource name for the location. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists information about the supported locations for this service.
       *
       * Create a request for the method "locations.list".
       *
       * This request holds the parameters needed by the documentai server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param name The resource that owns the locations collection, if applicable.
       * @return the request
       */
      public List list(java.lang.String name) throws java.io.IOException {
        List result = new List(name);
        initialize(result);
        return result;
      }

      public class List extends DocumentRequest<com.google.api.services.documentai.v1beta3.model.GoogleCloudLocationListLocationsResponse> {

        private static final String REST_PATH = "v1beta3/{+name}/locations";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists information about the supported locations for this service.
         *
         * Create a request for the method "locations.list".
         *
         * This request holds the parameters needed by the the documentai server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource that owns the locations collection, if applicable.
         * @since 1.13
         */
        protected List(java.lang.String name) {
          super(Document.this, "GET", REST_PATH, null, com.google.api.services.documentai.v1beta3.model.GoogleCloudLocationListLocationsResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** The resource that owns the locations collection, if applicable. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource that owns the locations collection, if applicable.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The resource that owns the locations collection, if applicable. */
        public List setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** The standard list filter. */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** The standard list filter.
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /** The standard list filter. */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** The standard list page size. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The standard list page size.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The standard list page size. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** The standard list page token. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** The standard list page token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** The standard list page token. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Operations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Document documentai = new Document(...);}
       *   {@code Document.Operations.List request = documentai.operations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Operations operations() {
        return new Operations();
      }

      /**
       * The "operations" collection of methods.
       */
      public class Operations {

        /**
         * Gets the latest state of a long-running operation. Clients can use this method to poll the
         * operation result at intervals as recommended by the API service.
         *
         * Create a request for the method "operations.get".
         *
         * This request holds the parameters needed by the documentai server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends DocumentRequest<com.google.api.services.documentai.v1beta3.model.GoogleLongrunningOperation> {

          private static final String REST_PATH = "v1beta3/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Gets the latest state of a long-running operation. Clients can use this method to poll the
           * operation result at intervals as recommended by the API service.
           *
           * Create a request for the method "operations.get".
           *
           * This request holds the parameters needed by the the documentai server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Document.this, "GET", REST_PATH, null, com.google.api.services.documentai.v1beta3.model.GoogleLongrunningOperation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the Processors collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Document documentai = new Document(...);}
       *   {@code Document.Processors.List request = documentai.processors().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Processors processors() {
        return new Processors();
      }

      /**
       * The "processors" collection of methods.
       */
      public class Processors {

        /**
         * LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in
         * the [Document] format.
         *
         * Create a request for the method "processors.batchProcess".
         *
         * This request holds the parameters needed by the documentai server.  After setting any optional
         * parameters, call the {@link BatchProcess#execute()} method to invoke the remote operation.
         *
         * @param name Required. The resource name of Processor or ProcessorVersion. Format:
         *        projects/{project}/locations/{location}/processors/{processor}, or projects/{project}/loca
         *        tions/{location}/processors/{processor}/processorVerions/{processorVersion}
         * @param content the {@link com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3BatchProcessRequest}
         * @return the request
         */
        public BatchProcess batchProcess(java.lang.String name, com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3BatchProcessRequest content) throws java.io.IOException {
          BatchProcess result = new BatchProcess(name, content);
          initialize(result);
          return result;
        }

        public class BatchProcess extends DocumentRequest<com.google.api.services.documentai.v1beta3.model.GoogleLongrunningOperation> {

          private static final String REST_PATH = "v1beta3/{+name}:batchProcess";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/processors/[^/]+$");

          /**
           * LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in
           * the [Document] format.
           *
           * Create a request for the method "processors.batchProcess".
           *
           * This request holds the parameters needed by the the documentai server.  After setting any
           * optional parameters, call the {@link BatchProcess#execute()} method to invoke the remote
           * operation. <p> {@link
           * BatchProcess#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The resource name of Processor or ProcessorVersion. Format:
         *        projects/{project}/locations/{location}/processors/{processor}, or projects/{project}/loca
         *        tions/{location}/processors/{processor}/processorVerions/{processorVersion}
           * @param content the {@link com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3BatchProcessRequest}
           * @since 1.13
           */
          protected BatchProcess(java.lang.String name, com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3BatchProcessRequest content) {
            super(Document.this, "POST", REST_PATH, content, com.google.api.services.documentai.v1beta3.model.GoogleLongrunningOperation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/processors/[^/]+$");
            }
          }

          @Override
          public BatchProcess set$Xgafv(java.lang.String $Xgafv) {
            return (BatchProcess) super.set$Xgafv($Xgafv);
          }

          @Override
          public BatchProcess setAccessToken(java.lang.String accessToken) {
            return (BatchProcess) super.setAccessToken(accessToken);
          }

          @Override
          public BatchProcess setAlt(java.lang.String alt) {
            return (BatchProcess) super.setAlt(alt);
          }

          @Override
          public BatchProcess setCallback(java.lang.String callback) {
            return (BatchProcess) super.setCallback(callback);
          }

          @Override
          public BatchProcess setFields(java.lang.String fields) {
            return (BatchProcess) super.setFields(fields);
          }

          @Override
          public BatchProcess setKey(java.lang.String key) {
            return (BatchProcess) super.setKey(key);
          }

          @Override
          public BatchProcess setOauthToken(java.lang.String oauthToken) {
            return (BatchProcess) super.setOauthToken(oauthToken);
          }

          @Override
          public BatchProcess setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (BatchProcess) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public BatchProcess setQuotaUser(java.lang.String quotaUser) {
            return (BatchProcess) super.setQuotaUser(quotaUser);
          }

          @Override
          public BatchProcess setUploadType(java.lang.String uploadType) {
            return (BatchProcess) super.setUploadType(uploadType);
          }

          @Override
          public BatchProcess setUploadProtocol(java.lang.String uploadProtocol) {
            return (BatchProcess) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The resource name of Processor or ProcessorVersion. Format:
           * projects/{project}/locations/{location}/processors/{processor}, or projects/{project}/l
           * ocations/{location}/processors/{processor}/processorVerions/{processorVersion}
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The resource name of Processor or ProcessorVersion. Format:
         projects/{project}/locations/{location}/processors/{processor}, or
         projects/{project}/locations/{location}/processors/{processor}/processorVerions/{processorVersion}
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The resource name of Processor or ProcessorVersion. Format:
           * projects/{project}/locations/{location}/processors/{processor}, or projects/{project}/l
           * ocations/{location}/processors/{processor}/processorVerions/{processorVersion}
           */
          public BatchProcess setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/processors/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public BatchProcess set(String parameterName, Object value) {
            return (BatchProcess) super.set(parameterName, value);
          }
        }
        /**
         * Processes a single document.
         *
         * Create a request for the method "processors.process".
         *
         * This request holds the parameters needed by the documentai server.  After setting any optional
         * parameters, call the {@link Process#execute()} method to invoke the remote operation.
         *
         * @param name Required. The resource name of the Processor or ProcessorVersion to use for processing. If a
         *        Processor is specified, the server will use its default version. Format:
         *        projects/{project}/locations/{location}/processors/{processor}, or projects/{project}/loca
         *        tions/{location}/processors/{processor}/processorVerions/{processorVersion}
         * @param content the {@link com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ProcessRequest}
         * @return the request
         */
        public Process process(java.lang.String name, com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ProcessRequest content) throws java.io.IOException {
          Process result = new Process(name, content);
          initialize(result);
          return result;
        }

        public class Process extends DocumentRequest<com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ProcessResponse> {

          private static final String REST_PATH = "v1beta3/{+name}:process";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/processors/[^/]+$");

          /**
           * Processes a single document.
           *
           * Create a request for the method "processors.process".
           *
           * This request holds the parameters needed by the the documentai server.  After setting any
           * optional parameters, call the {@link Process#execute()} method to invoke the remote operation.
           * <p> {@link
           * Process#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The resource name of the Processor or ProcessorVersion to use for processing. If a
         *        Processor is specified, the server will use its default version. Format:
         *        projects/{project}/locations/{location}/processors/{processor}, or projects/{project}/loca
         *        tions/{location}/processors/{processor}/processorVerions/{processorVersion}
           * @param content the {@link com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ProcessRequest}
           * @since 1.13
           */
          protected Process(java.lang.String name, com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ProcessRequest content) {
            super(Document.this, "POST", REST_PATH, content, com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ProcessResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/processors/[^/]+$");
            }
          }

          @Override
          public Process set$Xgafv(java.lang.String $Xgafv) {
            return (Process) super.set$Xgafv($Xgafv);
          }

          @Override
          public Process setAccessToken(java.lang.String accessToken) {
            return (Process) super.setAccessToken(accessToken);
          }

          @Override
          public Process setAlt(java.lang.String alt) {
            return (Process) super.setAlt(alt);
          }

          @Override
          public Process setCallback(java.lang.String callback) {
            return (Process) super.setCallback(callback);
          }

          @Override
          public Process setFields(java.lang.String fields) {
            return (Process) super.setFields(fields);
          }

          @Override
          public Process setKey(java.lang.String key) {
            return (Process) super.setKey(key);
          }

          @Override
          public Process setOauthToken(java.lang.String oauthToken) {
            return (Process) super.setOauthToken(oauthToken);
          }

          @Override
          public Process setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Process) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Process setQuotaUser(java.lang.String quotaUser) {
            return (Process) super.setQuotaUser(quotaUser);
          }

          @Override
          public Process setUploadType(java.lang.String uploadType) {
            return (Process) super.setUploadType(uploadType);
          }

          @Override
          public Process setUploadProtocol(java.lang.String uploadProtocol) {
            return (Process) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The resource name of the Processor or ProcessorVersion to use for processing.
           * If a Processor is specified, the server will use its default version. Format:
           * projects/{project}/locations/{location}/processors/{processor}, or projects/{project}/l
           * ocations/{location}/processors/{processor}/processorVerions/{processorVersion}
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The resource name of the Processor or ProcessorVersion to use for processing. If a
         Processor is specified, the server will use its default version. Format:
         projects/{project}/locations/{location}/processors/{processor}, or
         projects/{project}/locations/{location}/processors/{processor}/processorVerions/{processorVersion}
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The resource name of the Processor or ProcessorVersion to use for processing.
           * If a Processor is specified, the server will use its default version. Format:
           * projects/{project}/locations/{location}/processors/{processor}, or projects/{project}/l
           * ocations/{location}/processors/{processor}/processorVerions/{processorVersion}
           */
          public Process setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/processors/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Process set(String parameterName, Object value) {
            return (Process) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the HumanReviewConfig collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Document documentai = new Document(...);}
         *   {@code Document.HumanReviewConfig.List request = documentai.humanReviewConfig().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public HumanReviewConfig humanReviewConfig() {
          return new HumanReviewConfig();
        }

        /**
         * The "humanReviewConfig" collection of methods.
         */
        public class HumanReviewConfig {

          /**
           * Send a document for Human Review. The input document should be processed by the specified
           * processor.
           *
           * Create a request for the method "humanReviewConfig.reviewDocument".
           *
           * This request holds the parameters needed by the documentai server.  After setting any optional
           * parameters, call the {@link ReviewDocument#execute()} method to invoke the remote operation.
           *
           * @param humanReviewConfig Required. The resource name of the HumanReviewConfig that the document will be reviewed with.
           * @param content the {@link com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ReviewDocumentRequest}
           * @return the request
           */
          public ReviewDocument reviewDocument(java.lang.String humanReviewConfig, com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ReviewDocumentRequest content) throws java.io.IOException {
            ReviewDocument result = new ReviewDocument(humanReviewConfig, content);
            initialize(result);
            return result;
          }

          public class ReviewDocument extends DocumentRequest<com.google.api.services.documentai.v1beta3.model.GoogleLongrunningOperation> {

            private static final String REST_PATH = "v1beta3/{+humanReviewConfig}:reviewDocument";

            private final java.util.regex.Pattern HUMAN_REVIEW_CONFIG_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/processors/[^/]+/humanReviewConfig$");

            /**
             * Send a document for Human Review. The input document should be processed by the specified
             * processor.
             *
             * Create a request for the method "humanReviewConfig.reviewDocument".
             *
             * This request holds the parameters needed by the the documentai server.  After setting any
             * optional parameters, call the {@link ReviewDocument#execute()} method to invoke the remote
             * operation. <p> {@link ReviewDocument#initialize(com.google.api.client.googleapis.services.Abstr
             * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
             * the constructor. </p>
             *
             * @param humanReviewConfig Required. The resource name of the HumanReviewConfig that the document will be reviewed with.
             * @param content the {@link com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ReviewDocumentRequest}
             * @since 1.13
             */
            protected ReviewDocument(java.lang.String humanReviewConfig, com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ReviewDocumentRequest content) {
              super(Document.this, "POST", REST_PATH, content, com.google.api.services.documentai.v1beta3.model.GoogleLongrunningOperation.class);
              this.humanReviewConfig = com.google.api.client.util.Preconditions.checkNotNull(humanReviewConfig, "Required parameter humanReviewConfig must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(HUMAN_REVIEW_CONFIG_PATTERN.matcher(humanReviewConfig).matches(),
                    "Parameter humanReviewConfig must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/processors/[^/]+/humanReviewConfig$");
              }
            }

            @Override
            public ReviewDocument set$Xgafv(java.lang.String $Xgafv) {
              return (ReviewDocument) super.set$Xgafv($Xgafv);
            }

            @Override
            public ReviewDocument setAccessToken(java.lang.String accessToken) {
              return (ReviewDocument) super.setAccessToken(accessToken);
            }

            @Override
            public ReviewDocument setAlt(java.lang.String alt) {
              return (ReviewDocument) super.setAlt(alt);
            }

            @Override
            public ReviewDocument setCallback(java.lang.String callback) {
              return (ReviewDocument) super.setCallback(callback);
            }

            @Override
            public ReviewDocument setFields(java.lang.String fields) {
              return (ReviewDocument) super.setFields(fields);
            }

            @Override
            public ReviewDocument setKey(java.lang.String key) {
              return (ReviewDocument) super.setKey(key);
            }

            @Override
            public ReviewDocument setOauthToken(java.lang.String oauthToken) {
              return (ReviewDocument) super.setOauthToken(oauthToken);
            }

            @Override
            public ReviewDocument setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ReviewDocument) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ReviewDocument setQuotaUser(java.lang.String quotaUser) {
              return (ReviewDocument) super.setQuotaUser(quotaUser);
            }

            @Override
            public ReviewDocument setUploadType(java.lang.String uploadType) {
              return (ReviewDocument) super.setUploadType(uploadType);
            }

            @Override
            public ReviewDocument setUploadProtocol(java.lang.String uploadProtocol) {
              return (ReviewDocument) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The resource name of the HumanReviewConfig that the document will be
             * reviewed with.
             */
            @com.google.api.client.util.Key
            private java.lang.String humanReviewConfig;

            /** Required. The resource name of the HumanReviewConfig that the document will be reviewed with.
             */
            public java.lang.String getHumanReviewConfig() {
              return humanReviewConfig;
            }

            /**
             * Required. The resource name of the HumanReviewConfig that the document will be
             * reviewed with.
             */
            public ReviewDocument setHumanReviewConfig(java.lang.String humanReviewConfig) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(HUMAN_REVIEW_CONFIG_PATTERN.matcher(humanReviewConfig).matches(),
                    "Parameter humanReviewConfig must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/processors/[^/]+/humanReviewConfig$");
              }
              this.humanReviewConfig = humanReviewConfig;
              return this;
            }

            @Override
            public ReviewDocument set(String parameterName, Object value) {
              return (ReviewDocument) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the ProcessorVersions collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Document documentai = new Document(...);}
         *   {@code Document.ProcessorVersions.List request = documentai.processorVersions().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public ProcessorVersions processorVersions() {
          return new ProcessorVersions();
        }

        /**
         * The "processorVersions" collection of methods.
         */
        public class ProcessorVersions {

          /**
           * LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in
           * the [Document] format.
           *
           * Create a request for the method "processorVersions.batchProcess".
           *
           * This request holds the parameters needed by the documentai server.  After setting any optional
           * parameters, call the {@link BatchProcess#execute()} method to invoke the remote operation.
           *
           * @param name Required. The resource name of Processor or ProcessorVersion. Format:
           *        projects/{project}/locations/{location}/processors/{processor}, or projects/{project}/loca
           *        tions/{location}/processors/{processor}/processorVerions/{processorVersion}
           * @param content the {@link com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3BatchProcessRequest}
           * @return the request
           */
          public BatchProcess batchProcess(java.lang.String name, com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3BatchProcessRequest content) throws java.io.IOException {
            BatchProcess result = new BatchProcess(name, content);
            initialize(result);
            return result;
          }

          public class BatchProcess extends DocumentRequest<com.google.api.services.documentai.v1beta3.model.GoogleLongrunningOperation> {

            private static final String REST_PATH = "v1beta3/{+name}:batchProcess";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/processors/[^/]+/processorVersions/[^/]+$");

            /**
             * LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in
             * the [Document] format.
             *
             * Create a request for the method "processorVersions.batchProcess".
             *
             * This request holds the parameters needed by the the documentai server.  After setting any
             * optional parameters, call the {@link BatchProcess#execute()} method to invoke the remote
             * operation. <p> {@link
             * BatchProcess#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The resource name of Processor or ProcessorVersion. Format:
           *        projects/{project}/locations/{location}/processors/{processor}, or projects/{project}/loca
           *        tions/{location}/processors/{processor}/processorVerions/{processorVersion}
             * @param content the {@link com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3BatchProcessRequest}
             * @since 1.13
             */
            protected BatchProcess(java.lang.String name, com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3BatchProcessRequest content) {
              super(Document.this, "POST", REST_PATH, content, com.google.api.services.documentai.v1beta3.model.GoogleLongrunningOperation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/processors/[^/]+/processorVersions/[^/]+$");
              }
            }

            @Override
            public BatchProcess set$Xgafv(java.lang.String $Xgafv) {
              return (BatchProcess) super.set$Xgafv($Xgafv);
            }

            @Override
            public BatchProcess setAccessToken(java.lang.String accessToken) {
              return (BatchProcess) super.setAccessToken(accessToken);
            }

            @Override
            public BatchProcess setAlt(java.lang.String alt) {
              return (BatchProcess) super.setAlt(alt);
            }

            @Override
            public BatchProcess setCallback(java.lang.String callback) {
              return (BatchProcess) super.setCallback(callback);
            }

            @Override
            public BatchProcess setFields(java.lang.String fields) {
              return (BatchProcess) super.setFields(fields);
            }

            @Override
            public BatchProcess setKey(java.lang.String key) {
              return (BatchProcess) super.setKey(key);
            }

            @Override
            public BatchProcess setOauthToken(java.lang.String oauthToken) {
              return (BatchProcess) super.setOauthToken(oauthToken);
            }

            @Override
            public BatchProcess setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (BatchProcess) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public BatchProcess setQuotaUser(java.lang.String quotaUser) {
              return (BatchProcess) super.setQuotaUser(quotaUser);
            }

            @Override
            public BatchProcess setUploadType(java.lang.String uploadType) {
              return (BatchProcess) super.setUploadType(uploadType);
            }

            @Override
            public BatchProcess setUploadProtocol(java.lang.String uploadProtocol) {
              return (BatchProcess) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The resource name of Processor or ProcessorVersion. Format:
             * projects/{project}/locations/{location}/processors/{processor}, or projects/{project}
             * /locations/{location}/processors/{processor}/processorVerions/{processorVersion}
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The resource name of Processor or ProcessorVersion. Format:
           projects/{project}/locations/{location}/processors/{processor}, or
           projects/{project}/locations/{location}/processors/{processor}/processorVerions/{processorVersion}
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The resource name of Processor or ProcessorVersion. Format:
             * projects/{project}/locations/{location}/processors/{processor}, or projects/{project}
             * /locations/{location}/processors/{processor}/processorVerions/{processorVersion}
             */
            public BatchProcess setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/processors/[^/]+/processorVersions/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public BatchProcess set(String parameterName, Object value) {
              return (BatchProcess) super.set(parameterName, value);
            }
          }
          /**
           * Processes a single document.
           *
           * Create a request for the method "processorVersions.process".
           *
           * This request holds the parameters needed by the documentai server.  After setting any optional
           * parameters, call the {@link Process#execute()} method to invoke the remote operation.
           *
           * @param name Required. The resource name of the Processor or ProcessorVersion to use for processing. If a
           *        Processor is specified, the server will use its default version. Format:
           *        projects/{project}/locations/{location}/processors/{processor}, or projects/{project}/loca
           *        tions/{location}/processors/{processor}/processorVerions/{processorVersion}
           * @param content the {@link com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ProcessRequest}
           * @return the request
           */
          public Process process(java.lang.String name, com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ProcessRequest content) throws java.io.IOException {
            Process result = new Process(name, content);
            initialize(result);
            return result;
          }

          public class Process extends DocumentRequest<com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ProcessResponse> {

            private static final String REST_PATH = "v1beta3/{+name}:process";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/processors/[^/]+/processorVersions/[^/]+$");

            /**
             * Processes a single document.
             *
             * Create a request for the method "processorVersions.process".
             *
             * This request holds the parameters needed by the the documentai server.  After setting any
             * optional parameters, call the {@link Process#execute()} method to invoke the remote operation.
             * <p> {@link
             * Process#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The resource name of the Processor or ProcessorVersion to use for processing. If a
           *        Processor is specified, the server will use its default version. Format:
           *        projects/{project}/locations/{location}/processors/{processor}, or projects/{project}/loca
           *        tions/{location}/processors/{processor}/processorVerions/{processorVersion}
             * @param content the {@link com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ProcessRequest}
             * @since 1.13
             */
            protected Process(java.lang.String name, com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ProcessRequest content) {
              super(Document.this, "POST", REST_PATH, content, com.google.api.services.documentai.v1beta3.model.GoogleCloudDocumentaiV1beta3ProcessResponse.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/processors/[^/]+/processorVersions/[^/]+$");
              }
            }

            @Override
            public Process set$Xgafv(java.lang.String $Xgafv) {
              return (Process) super.set$Xgafv($Xgafv);
            }

            @Override
            public Process setAccessToken(java.lang.String accessToken) {
              return (Process) super.setAccessToken(accessToken);
            }

            @Override
            public Process setAlt(java.lang.String alt) {
              return (Process) super.setAlt(alt);
            }

            @Override
            public Process setCallback(java.lang.String callback) {
              return (Process) super.setCallback(callback);
            }

            @Override
            public Process setFields(java.lang.String fields) {
              return (Process) super.setFields(fields);
            }

            @Override
            public Process setKey(java.lang.String key) {
              return (Process) super.setKey(key);
            }

            @Override
            public Process setOauthToken(java.lang.String oauthToken) {
              return (Process) super.setOauthToken(oauthToken);
            }

            @Override
            public Process setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Process) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Process setQuotaUser(java.lang.String quotaUser) {
              return (Process) super.setQuotaUser(quotaUser);
            }

            @Override
            public Process setUploadType(java.lang.String uploadType) {
              return (Process) super.setUploadType(uploadType);
            }

            @Override
            public Process setUploadProtocol(java.lang.String uploadProtocol) {
              return (Process) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The resource name of the Processor or ProcessorVersion to use for
             * processing. If a Processor is specified, the server will use its default version.
             * Format: projects/{project}/locations/{location}/processors/{processor}, or projects/{
             * project}/locations/{location}/processors/{processor}/processorVerions/{processorVersi
             * on}
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The resource name of the Processor or ProcessorVersion to use for processing. If a
           Processor is specified, the server will use its default version. Format:
           projects/{project}/locations/{location}/processors/{processor}, or
           projects/{project}/locations/{location}/processors/{processor}/processorVerions/{processorVersion}
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The resource name of the Processor or ProcessorVersion to use for
             * processing. If a Processor is specified, the server will use its default version.
             * Format: projects/{project}/locations/{location}/processors/{processor}, or projects/{
             * project}/locations/{location}/processors/{processor}/processorVerions/{processorVersi
             * on}
             */
            public Process setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/processors/[^/]+/processorVersions/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Process set(String parameterName, Object value) {
              return (Process) super.set(parameterName, value);
            }
          }

        }
      }
    }
  }

  /**
   * Builder for {@link Document}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Document}. */
    @Override
    public Document build() {
      return new Document(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link DocumentRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setDocumentRequestInitializer(
        DocumentRequestInitializer documentRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(documentRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
