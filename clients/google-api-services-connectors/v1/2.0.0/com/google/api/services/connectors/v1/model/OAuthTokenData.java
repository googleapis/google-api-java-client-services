/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.connectors.v1.model;

/**
 * pass only at create and not update using updateMask Auth Code Data
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Connectors API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class OAuthTokenData extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Access token for the connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EUASecret accessToken;

  /**
   * Optional. Timestamp when the access token was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. Time in seconds when the access token expires.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String expiry;

  /**
   * Optional. Refresh token for the connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EUASecret refreshToken;

  /**
   * Optional. Access token for the connection.
   * @return value or {@code null} for none
   */
  public EUASecret getAccessToken() {
    return accessToken;
  }

  /**
   * Optional. Access token for the connection.
   * @param accessToken accessToken or {@code null} for none
   */
  public OAuthTokenData setAccessToken(EUASecret accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  /**
   * Optional. Timestamp when the access token was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Optional. Timestamp when the access token was created.
   * @param createTime createTime or {@code null} for none
   */
  public OAuthTokenData setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. Time in seconds when the access token expires.
   * @return value or {@code null} for none
   */
  public String getExpiry() {
    return expiry;
  }

  /**
   * Optional. Time in seconds when the access token expires.
   * @param expiry expiry or {@code null} for none
   */
  public OAuthTokenData setExpiry(String expiry) {
    this.expiry = expiry;
    return this;
  }

  /**
   * Optional. Refresh token for the connection.
   * @return value or {@code null} for none
   */
  public EUASecret getRefreshToken() {
    return refreshToken;
  }

  /**
   * Optional. Refresh token for the connection.
   * @param refreshToken refreshToken or {@code null} for none
   */
  public OAuthTokenData setRefreshToken(EUASecret refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

  @Override
  public OAuthTokenData set(String fieldName, Object value) {
    return (OAuthTokenData) super.set(fieldName, value);
  }

  @Override
  public OAuthTokenData clone() {
    return (OAuthTokenData) super.clone();
  }

}
