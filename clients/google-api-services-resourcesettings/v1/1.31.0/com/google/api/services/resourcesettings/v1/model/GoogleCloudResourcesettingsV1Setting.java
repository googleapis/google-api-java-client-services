/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.resourcesettings.v1.model;

/**
 * The schema for settings.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Resource Settings API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudResourcesettingsV1Setting extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The effective value of the setting at the given parent resource, evaluated based
   * on the resource hierarchy The effective value evaluates to one of the following options, in
   * this order. If an option is not valid or doesn't exist, then the next option is used: 1. The
   * local setting value on the given resource: Setting.local_value 2. If one of the given
   * resource's ancestors in the resource hierarchy have a local setting value, the local value at
   * the nearest such ancestor. 3. The setting's default value: SettingMetadata.default_value 4. An
   * empty value, defined as a `Value` with all fields unset. The data type of Value must always be
   * consistent with the data type defined in Setting.metadata.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudResourcesettingsV1Value effectiveValue;

  /**
   * A fingerprint used for optimistic concurrency. See UpdateSetting for more details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * The configured value of the setting at the given parent resource, ignoring the resource
   * hierarchy. The data type of Value must always be consistent with the data type defined in
   * Setting.metadata.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudResourcesettingsV1Value localValue;

  /**
   * Output only. Metadata about a setting which is not editable by the end user.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudResourcesettingsV1SettingMetadata metadata;

  /**
   * The resource name of the setting. Must be in one of the following forms: *
   * `projects/{project_number}/settings/{setting_name}` *
   * `folders/{folder_id}/settings/{setting_name}` *
   * `organizations/{organization_id}/settings/{setting_name}` For example, "/projects/123/settings
   * /gcp-enableMyFeature"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The effective value of the setting at the given parent resource, evaluated based
   * on the resource hierarchy The effective value evaluates to one of the following options, in
   * this order. If an option is not valid or doesn't exist, then the next option is used: 1. The
   * local setting value on the given resource: Setting.local_value 2. If one of the given
   * resource's ancestors in the resource hierarchy have a local setting value, the local value at
   * the nearest such ancestor. 3. The setting's default value: SettingMetadata.default_value 4. An
   * empty value, defined as a `Value` with all fields unset. The data type of Value must always be
   * consistent with the data type defined in Setting.metadata.
   * @return value or {@code null} for none
   */
  public GoogleCloudResourcesettingsV1Value getEffectiveValue() {
    return effectiveValue;
  }

  /**
   * Output only. The effective value of the setting at the given parent resource, evaluated based
   * on the resource hierarchy The effective value evaluates to one of the following options, in
   * this order. If an option is not valid or doesn't exist, then the next option is used: 1. The
   * local setting value on the given resource: Setting.local_value 2. If one of the given
   * resource's ancestors in the resource hierarchy have a local setting value, the local value at
   * the nearest such ancestor. 3. The setting's default value: SettingMetadata.default_value 4. An
   * empty value, defined as a `Value` with all fields unset. The data type of Value must always be
   * consistent with the data type defined in Setting.metadata.
   * @param effectiveValue effectiveValue or {@code null} for none
   */
  public GoogleCloudResourcesettingsV1Setting setEffectiveValue(GoogleCloudResourcesettingsV1Value effectiveValue) {
    this.effectiveValue = effectiveValue;
    return this;
  }

  /**
   * A fingerprint used for optimistic concurrency. See UpdateSetting for more details.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * A fingerprint used for optimistic concurrency. See UpdateSetting for more details.
   * @param etag etag or {@code null} for none
   */
  public GoogleCloudResourcesettingsV1Setting setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * The configured value of the setting at the given parent resource, ignoring the resource
   * hierarchy. The data type of Value must always be consistent with the data type defined in
   * Setting.metadata.
   * @return value or {@code null} for none
   */
  public GoogleCloudResourcesettingsV1Value getLocalValue() {
    return localValue;
  }

  /**
   * The configured value of the setting at the given parent resource, ignoring the resource
   * hierarchy. The data type of Value must always be consistent with the data type defined in
   * Setting.metadata.
   * @param localValue localValue or {@code null} for none
   */
  public GoogleCloudResourcesettingsV1Setting setLocalValue(GoogleCloudResourcesettingsV1Value localValue) {
    this.localValue = localValue;
    return this;
  }

  /**
   * Output only. Metadata about a setting which is not editable by the end user.
   * @return value or {@code null} for none
   */
  public GoogleCloudResourcesettingsV1SettingMetadata getMetadata() {
    return metadata;
  }

  /**
   * Output only. Metadata about a setting which is not editable by the end user.
   * @param metadata metadata or {@code null} for none
   */
  public GoogleCloudResourcesettingsV1Setting setMetadata(GoogleCloudResourcesettingsV1SettingMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The resource name of the setting. Must be in one of the following forms: *
   * `projects/{project_number}/settings/{setting_name}` *
   * `folders/{folder_id}/settings/{setting_name}` *
   * `organizations/{organization_id}/settings/{setting_name}` For example, "/projects/123/settings
   * /gcp-enableMyFeature"
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The resource name of the setting. Must be in one of the following forms: *
   * `projects/{project_number}/settings/{setting_name}` *
   * `folders/{folder_id}/settings/{setting_name}` *
   * `organizations/{organization_id}/settings/{setting_name}` For example, "/projects/123/settings
   * /gcp-enableMyFeature"
   * @param name name or {@code null} for none
   */
  public GoogleCloudResourcesettingsV1Setting setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  @Override
  public GoogleCloudResourcesettingsV1Setting set(String fieldName, Object value) {
    return (GoogleCloudResourcesettingsV1Setting) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudResourcesettingsV1Setting clone() {
    return (GoogleCloudResourcesettingsV1Setting) super.clone();
  }

}
