/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Instructions (eg., logging, disambiguation, ads serving) of handling a sensitive intent and its
 * data. LINT.IfChange NextId: 8
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KnowledgeAnswersSensitivityInstruction extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private KnowledgeAnswersSensitivityInstructionArgument argument;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private KnowledgeAnswersSensitivityInstructionIntent intent;

  /**
   * This field is for backward compatibility.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SearchPolicyRankableSensitivity legacyAssistantSensitivity;

  /**
   * Controls whether a top-level intent is multi-account approved. NLU will do go/cross-account-
   * understanding only for intents with this bit on. Also, this bit should be propagated to user
   * turn Attentionl Entities to extend protection of cross-account data to next turns. In principle
   * fulfillment services (e.g., Monastery) should only dispatch such intents to multi-account
   * approved fulfillers (schemas), at least when the user has a linked dasher account. The
   * Assistant runtime policy engine should treat a query as dasher data if 1) this bit is true in
   * the string redaction, and 2) the user has a linked dasher account, and apply a more restrictive
   * rule for whitelisting, regardless of the actual account provenance in Sensitivity. Example:
   * [User logged in to their personal gmail account.] Q1: "Schedule a meeting tiltled okr review at
   * 3pm". Assistant: "Should I scheduled it on your xyz@gmail.com account?" Q2: "No, add it to my
   * xyz@bigcorp.com account." We don't know Q1 is dasher data until Q2. To prevent leaking of Q1 to
   * non-dasher approved binaries, this bit should be used as a proactive measure. It might
   * introduce some over-triggering (e.g., user says "Yes" in Q2), but is much better than blindly
   * treating every query as dasher, not considering whether it actually triggers any multi-account
   * capable intents or not (see b/164420114 for example).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean multiAccountAllowed;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private KnowledgeAnswersSensitivityInstructionPreviousQuery previousQuery;

  /**
   * @return value or {@code null} for none
   */
  public KnowledgeAnswersSensitivityInstructionArgument getArgument() {
    return argument;
  }

  /**
   * @param argument argument or {@code null} for none
   */
  public KnowledgeAnswersSensitivityInstruction setArgument(KnowledgeAnswersSensitivityInstructionArgument argument) {
    this.argument = argument;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public KnowledgeAnswersSensitivityInstructionIntent getIntent() {
    return intent;
  }

  /**
   * @param intent intent or {@code null} for none
   */
  public KnowledgeAnswersSensitivityInstruction setIntent(KnowledgeAnswersSensitivityInstructionIntent intent) {
    this.intent = intent;
    return this;
  }

  /**
   * This field is for backward compatibility.
   * @return value or {@code null} for none
   */
  public SearchPolicyRankableSensitivity getLegacyAssistantSensitivity() {
    return legacyAssistantSensitivity;
  }

  /**
   * This field is for backward compatibility.
   * @param legacyAssistantSensitivity legacyAssistantSensitivity or {@code null} for none
   */
  public KnowledgeAnswersSensitivityInstruction setLegacyAssistantSensitivity(SearchPolicyRankableSensitivity legacyAssistantSensitivity) {
    this.legacyAssistantSensitivity = legacyAssistantSensitivity;
    return this;
  }

  /**
   * Controls whether a top-level intent is multi-account approved. NLU will do go/cross-account-
   * understanding only for intents with this bit on. Also, this bit should be propagated to user
   * turn Attentionl Entities to extend protection of cross-account data to next turns. In principle
   * fulfillment services (e.g., Monastery) should only dispatch such intents to multi-account
   * approved fulfillers (schemas), at least when the user has a linked dasher account. The
   * Assistant runtime policy engine should treat a query as dasher data if 1) this bit is true in
   * the string redaction, and 2) the user has a linked dasher account, and apply a more restrictive
   * rule for whitelisting, regardless of the actual account provenance in Sensitivity. Example:
   * [User logged in to their personal gmail account.] Q1: "Schedule a meeting tiltled okr review at
   * 3pm". Assistant: "Should I scheduled it on your xyz@gmail.com account?" Q2: "No, add it to my
   * xyz@bigcorp.com account." We don't know Q1 is dasher data until Q2. To prevent leaking of Q1 to
   * non-dasher approved binaries, this bit should be used as a proactive measure. It might
   * introduce some over-triggering (e.g., user says "Yes" in Q2), but is much better than blindly
   * treating every query as dasher, not considering whether it actually triggers any multi-account
   * capable intents or not (see b/164420114 for example).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMultiAccountAllowed() {
    return multiAccountAllowed;
  }

  /**
   * Controls whether a top-level intent is multi-account approved. NLU will do go/cross-account-
   * understanding only for intents with this bit on. Also, this bit should be propagated to user
   * turn Attentionl Entities to extend protection of cross-account data to next turns. In principle
   * fulfillment services (e.g., Monastery) should only dispatch such intents to multi-account
   * approved fulfillers (schemas), at least when the user has a linked dasher account. The
   * Assistant runtime policy engine should treat a query as dasher data if 1) this bit is true in
   * the string redaction, and 2) the user has a linked dasher account, and apply a more restrictive
   * rule for whitelisting, regardless of the actual account provenance in Sensitivity. Example:
   * [User logged in to their personal gmail account.] Q1: "Schedule a meeting tiltled okr review at
   * 3pm". Assistant: "Should I scheduled it on your xyz@gmail.com account?" Q2: "No, add it to my
   * xyz@bigcorp.com account." We don't know Q1 is dasher data until Q2. To prevent leaking of Q1 to
   * non-dasher approved binaries, this bit should be used as a proactive measure. It might
   * introduce some over-triggering (e.g., user says "Yes" in Q2), but is much better than blindly
   * treating every query as dasher, not considering whether it actually triggers any multi-account
   * capable intents or not (see b/164420114 for example).
   * @param multiAccountAllowed multiAccountAllowed or {@code null} for none
   */
  public KnowledgeAnswersSensitivityInstruction setMultiAccountAllowed(java.lang.Boolean multiAccountAllowed) {
    this.multiAccountAllowed = multiAccountAllowed;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public KnowledgeAnswersSensitivityInstructionPreviousQuery getPreviousQuery() {
    return previousQuery;
  }

  /**
   * @param previousQuery previousQuery or {@code null} for none
   */
  public KnowledgeAnswersSensitivityInstruction setPreviousQuery(KnowledgeAnswersSensitivityInstructionPreviousQuery previousQuery) {
    this.previousQuery = previousQuery;
    return this;
  }

  @Override
  public KnowledgeAnswersSensitivityInstruction set(String fieldName, Object value) {
    return (KnowledgeAnswersSensitivityInstruction) super.set(fieldName, value);
  }

  @Override
  public KnowledgeAnswersSensitivityInstruction clone() {
    return (KnowledgeAnswersSensitivityInstruction) super.clone();
  }

}
