/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.genomics.model;

/**
 * The pipeline object. Represents a transformation from a set of input parameters to a set of
 * output parameters. The transformation is defined as a docker image and command to run within that
 * image. Each pipeline is run on a Google Compute Engine VM. A pipeline can be created with the
 * `create` method and then later run with the `run` method, or a pipeline can be defined and run
 * all at once with the `run` method.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Genomics API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Pipeline extends com.google.api.client.json.GenericJson {

  /**
   * User-specified description.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Specifies the docker run information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DockerExecutor docker;

  /**
   * Input parameters of the pipeline.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PipelineParameter> inputParameters;

  /**
   * Required. A user specified pipeline name that does not have to be unique. This name can be used
   * for filtering Pipelines in ListPipelines.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output parameters of the pipeline.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PipelineParameter> outputParameters;

  /**
   * Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be
   * specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the
   * response to CreatePipeline and all subsequent Get and List calls. Indicates that the service
   * has registered this pipeline.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pipelineId;

  /**
   * Required. The project in which to create the pipeline. The caller must have WRITE access.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String projectId;

  /**
   * Required. Specifies resource requirements for the pipeline run. Required fields:
   *
   * * minimumCpuCores
   *
   * * minimumRamGb
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PipelineResources resources;

  /**
   * User-specified description.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * User-specified description.
   * @param description description or {@code null} for none
   */
  public Pipeline setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Specifies the docker run information.
   * @return value or {@code null} for none
   */
  public DockerExecutor getDocker() {
    return docker;
  }

  /**
   * Specifies the docker run information.
   * @param docker docker or {@code null} for none
   */
  public Pipeline setDocker(DockerExecutor docker) {
    this.docker = docker;
    return this;
  }

  /**
   * Input parameters of the pipeline.
   * @return value or {@code null} for none
   */
  public java.util.List<PipelineParameter> getInputParameters() {
    return inputParameters;
  }

  /**
   * Input parameters of the pipeline.
   * @param inputParameters inputParameters or {@code null} for none
   */
  public Pipeline setInputParameters(java.util.List<PipelineParameter> inputParameters) {
    this.inputParameters = inputParameters;
    return this;
  }

  /**
   * Required. A user specified pipeline name that does not have to be unique. This name can be used
   * for filtering Pipelines in ListPipelines.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required. A user specified pipeline name that does not have to be unique. This name can be used
   * for filtering Pipelines in ListPipelines.
   * @param name name or {@code null} for none
   */
  public Pipeline setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output parameters of the pipeline.
   * @return value or {@code null} for none
   */
  public java.util.List<PipelineParameter> getOutputParameters() {
    return outputParameters;
  }

  /**
   * Output parameters of the pipeline.
   * @param outputParameters outputParameters or {@code null} for none
   */
  public Pipeline setOutputParameters(java.util.List<PipelineParameter> outputParameters) {
    this.outputParameters = outputParameters;
    return this;
  }

  /**
   * Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be
   * specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the
   * response to CreatePipeline and all subsequent Get and List calls. Indicates that the service
   * has registered this pipeline.
   * @return value or {@code null} for none
   */
  public java.lang.String getPipelineId() {
    return pipelineId;
  }

  /**
   * Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be
   * specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the
   * response to CreatePipeline and all subsequent Get and List calls. Indicates that the service
   * has registered this pipeline.
   * @param pipelineId pipelineId or {@code null} for none
   */
  public Pipeline setPipelineId(java.lang.String pipelineId) {
    this.pipelineId = pipelineId;
    return this;
  }

  /**
   * Required. The project in which to create the pipeline. The caller must have WRITE access.
   * @return value or {@code null} for none
   */
  public java.lang.String getProjectId() {
    return projectId;
  }

  /**
   * Required. The project in which to create the pipeline. The caller must have WRITE access.
   * @param projectId projectId or {@code null} for none
   */
  public Pipeline setProjectId(java.lang.String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Required. Specifies resource requirements for the pipeline run. Required fields:
   *
   * * minimumCpuCores
   *
   * * minimumRamGb
   * @return value or {@code null} for none
   */
  public PipelineResources getResources() {
    return resources;
  }

  /**
   * Required. Specifies resource requirements for the pipeline run. Required fields:
   *
   * * minimumCpuCores
   *
   * * minimumRamGb
   * @param resources resources or {@code null} for none
   */
  public Pipeline setResources(PipelineResources resources) {
    this.resources = resources;
    return this;
  }

  @Override
  public Pipeline set(String fieldName, Object value) {
    return (Pipeline) super.set(fieldName, value);
  }

  @Override
  public Pipeline clone() {
    return (Pipeline) super.clone();
  }

}
