/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networkmanagement.v1.model;

/**
 * For display only. Metadata associated with NAT.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NatInfo extends com.google.api.client.json.GenericJson {

  /**
   * The name of Cloud NAT Gateway. Only valid when type is CLOUD_NAT.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String natGatewayName;

  /**
   * URI of the network where NAT translation takes place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String networkUri;

  /**
   * Destination IP address after NAT translation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String newDestinationIp;

  /**
   * Destination port after NAT translation. Only valid when protocol is TCP or UDP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer newDestinationPort;

  /**
   * Source IP address after NAT translation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String newSourceIp;

  /**
   * Source port after NAT translation. Only valid when protocol is TCP or UDP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer newSourcePort;

  /**
   * Destination IP address before NAT translation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String oldDestinationIp;

  /**
   * Destination port before NAT translation. Only valid when protocol is TCP or UDP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer oldDestinationPort;

  /**
   * Source IP address before NAT translation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String oldSourceIp;

  /**
   * Source port before NAT translation. Only valid when protocol is TCP or UDP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer oldSourcePort;

  /**
   * IP protocol in string format, for example: "TCP", "UDP", "ICMP".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String protocol;

  /**
   * Uri of the Cloud Router. Only valid when type is CLOUD_NAT.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String routerUri;

  /**
   * Type of NAT.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The name of Cloud NAT Gateway. Only valid when type is CLOUD_NAT.
   * @return value or {@code null} for none
   */
  public java.lang.String getNatGatewayName() {
    return natGatewayName;
  }

  /**
   * The name of Cloud NAT Gateway. Only valid when type is CLOUD_NAT.
   * @param natGatewayName natGatewayName or {@code null} for none
   */
  public NatInfo setNatGatewayName(java.lang.String natGatewayName) {
    this.natGatewayName = natGatewayName;
    return this;
  }

  /**
   * URI of the network where NAT translation takes place.
   * @return value or {@code null} for none
   */
  public java.lang.String getNetworkUri() {
    return networkUri;
  }

  /**
   * URI of the network where NAT translation takes place.
   * @param networkUri networkUri or {@code null} for none
   */
  public NatInfo setNetworkUri(java.lang.String networkUri) {
    this.networkUri = networkUri;
    return this;
  }

  /**
   * Destination IP address after NAT translation.
   * @return value or {@code null} for none
   */
  public java.lang.String getNewDestinationIp() {
    return newDestinationIp;
  }

  /**
   * Destination IP address after NAT translation.
   * @param newDestinationIp newDestinationIp or {@code null} for none
   */
  public NatInfo setNewDestinationIp(java.lang.String newDestinationIp) {
    this.newDestinationIp = newDestinationIp;
    return this;
  }

  /**
   * Destination port after NAT translation. Only valid when protocol is TCP or UDP.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNewDestinationPort() {
    return newDestinationPort;
  }

  /**
   * Destination port after NAT translation. Only valid when protocol is TCP or UDP.
   * @param newDestinationPort newDestinationPort or {@code null} for none
   */
  public NatInfo setNewDestinationPort(java.lang.Integer newDestinationPort) {
    this.newDestinationPort = newDestinationPort;
    return this;
  }

  /**
   * Source IP address after NAT translation.
   * @return value or {@code null} for none
   */
  public java.lang.String getNewSourceIp() {
    return newSourceIp;
  }

  /**
   * Source IP address after NAT translation.
   * @param newSourceIp newSourceIp or {@code null} for none
   */
  public NatInfo setNewSourceIp(java.lang.String newSourceIp) {
    this.newSourceIp = newSourceIp;
    return this;
  }

  /**
   * Source port after NAT translation. Only valid when protocol is TCP or UDP.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNewSourcePort() {
    return newSourcePort;
  }

  /**
   * Source port after NAT translation. Only valid when protocol is TCP or UDP.
   * @param newSourcePort newSourcePort or {@code null} for none
   */
  public NatInfo setNewSourcePort(java.lang.Integer newSourcePort) {
    this.newSourcePort = newSourcePort;
    return this;
  }

  /**
   * Destination IP address before NAT translation.
   * @return value or {@code null} for none
   */
  public java.lang.String getOldDestinationIp() {
    return oldDestinationIp;
  }

  /**
   * Destination IP address before NAT translation.
   * @param oldDestinationIp oldDestinationIp or {@code null} for none
   */
  public NatInfo setOldDestinationIp(java.lang.String oldDestinationIp) {
    this.oldDestinationIp = oldDestinationIp;
    return this;
  }

  /**
   * Destination port before NAT translation. Only valid when protocol is TCP or UDP.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOldDestinationPort() {
    return oldDestinationPort;
  }

  /**
   * Destination port before NAT translation. Only valid when protocol is TCP or UDP.
   * @param oldDestinationPort oldDestinationPort or {@code null} for none
   */
  public NatInfo setOldDestinationPort(java.lang.Integer oldDestinationPort) {
    this.oldDestinationPort = oldDestinationPort;
    return this;
  }

  /**
   * Source IP address before NAT translation.
   * @return value or {@code null} for none
   */
  public java.lang.String getOldSourceIp() {
    return oldSourceIp;
  }

  /**
   * Source IP address before NAT translation.
   * @param oldSourceIp oldSourceIp or {@code null} for none
   */
  public NatInfo setOldSourceIp(java.lang.String oldSourceIp) {
    this.oldSourceIp = oldSourceIp;
    return this;
  }

  /**
   * Source port before NAT translation. Only valid when protocol is TCP or UDP.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOldSourcePort() {
    return oldSourcePort;
  }

  /**
   * Source port before NAT translation. Only valid when protocol is TCP or UDP.
   * @param oldSourcePort oldSourcePort or {@code null} for none
   */
  public NatInfo setOldSourcePort(java.lang.Integer oldSourcePort) {
    this.oldSourcePort = oldSourcePort;
    return this;
  }

  /**
   * IP protocol in string format, for example: "TCP", "UDP", "ICMP".
   * @return value or {@code null} for none
   */
  public java.lang.String getProtocol() {
    return protocol;
  }

  /**
   * IP protocol in string format, for example: "TCP", "UDP", "ICMP".
   * @param protocol protocol or {@code null} for none
   */
  public NatInfo setProtocol(java.lang.String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Uri of the Cloud Router. Only valid when type is CLOUD_NAT.
   * @return value or {@code null} for none
   */
  public java.lang.String getRouterUri() {
    return routerUri;
  }

  /**
   * Uri of the Cloud Router. Only valid when type is CLOUD_NAT.
   * @param routerUri routerUri or {@code null} for none
   */
  public NatInfo setRouterUri(java.lang.String routerUri) {
    this.routerUri = routerUri;
    return this;
  }

  /**
   * Type of NAT.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Type of NAT.
   * @param type type or {@code null} for none
   */
  public NatInfo setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public NatInfo set(String fieldName, Object value) {
    return (NatInfo) super.set(fieldName, value);
  }

  @Override
  public NatInfo clone() {
    return (NatInfo) super.clone();
  }

}
