/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This proto contains the information of a calendar event, including title, start time, end time,
 * etc. IMPORTANT: The definition of CalendarEvent proto is being moved to
 * //assistant/api/core_types/governed/calendar_event_type.proto. All existing references will be
 * updated to point to the new location. If you are adding a reference, use the new one instead.
 * LINT.IfChange(CalendarEvent) NEXT_ID: 26
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiCoreTypesCalendarEvent extends com.google.api.client.json.GenericJson {

  /**
   * Attendees invited to the event, usually includes also the organizer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantApiCoreTypesCalendarEventAttendee> attendees;

  /**
   * The background color of the event, in RGB format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer backgroundColor;

  /**
   * Optional calendar containing the event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String calendarId;

  /**
   * The person who created this event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiCoreTypesCalendarEventAttendee creator;

  /**
   * Optional description of the event (plain text).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * The end time of the event. Start and end time must either both be date or both be datetime. End
   * is exclusive, ie. the first day / first second when the event is over.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiDateTime end;

  /**
   * Optional event id provided by assistant server. Needs to be unique, at least on a per-user and
   * calendar level, ideally globally unique. If none is given, the server will assign an id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String eventId;

  /**
   * The flair name, calculated according to the event title (go/as-cal-flair). With the flair name,
   * background images can be got from gstatic (go/scs):
   * https://ssl.gstatic.com/tmly/f8944938hffheth4ew890ht4i8/flairs/
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String flairName;

  /**
   * The foreground color of the event, in RGB format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer foregroundColor;

  /**
   * Whether the guests can invite other guests.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean guestsCanInviteOthers;

  /**
   * Whether the guests can modify the event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean guestsCanModify;

  /**
   * Whether the guests of the event can be seen. If false, the user is reported as the only
   * attendee to the event, even though there may be more attendees.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean guestsCanSeeGuests;

  /**
   * Optional id of the Habit (Calendar Goal) this event is linked to
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String habitId;

  /**
   * Optional status for this habit event instance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String habitStatus;

  /**
   * Absolute link to this event in the Calendar web UI.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String htmlLink;

  /**
   * Optional location of the event (plain text).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String location;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantApiCoreTypesCalendarEventMeetingContact> meetingContacts;

  /**
   * The organizer of this event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiCoreTypesCalendarEventAttendee organizer;

  /**
   * Whether not all attendees are included in the attendee list. This is set when the attendees
   * list has been truncated (e.g., when the number of attendees is beyond the maxAttendees
   * limitation).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean otherAttendeesExcluded;

  /**
   * The user's response (the owner of this copy of the event) to this event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String participationResponse;

  /**
   * If this is an instance of a recurring event, recurring_event_id identifies the recurring series
   * as a whole.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String recurringEventId;

  /**
   * Meeting rooms associated to this event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantApiCoreTypesCalendarEventRoom> rooms;

  /**
   * The start time of the event. This event is an all-day event if start has no time_of_day.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiDateTime start;

  /**
   * The title of the event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String summary;

  /**
   * Optional visibility of the event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String visibility;

  /**
   * Attendees invited to the event, usually includes also the organizer.
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantApiCoreTypesCalendarEventAttendee> getAttendees() {
    return attendees;
  }

  /**
   * Attendees invited to the event, usually includes also the organizer.
   * @param attendees attendees or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setAttendees(java.util.List<AssistantApiCoreTypesCalendarEventAttendee> attendees) {
    this.attendees = attendees;
    return this;
  }

  /**
   * The background color of the event, in RGB format.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBackgroundColor() {
    return backgroundColor;
  }

  /**
   * The background color of the event, in RGB format.
   * @param backgroundColor backgroundColor or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setBackgroundColor(java.lang.Integer backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Optional calendar containing the event.
   * @return value or {@code null} for none
   */
  public java.lang.String getCalendarId() {
    return calendarId;
  }

  /**
   * Optional calendar containing the event.
   * @param calendarId calendarId or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setCalendarId(java.lang.String calendarId) {
    this.calendarId = calendarId;
    return this;
  }

  /**
   * The person who created this event.
   * @return value or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEventAttendee getCreator() {
    return creator;
  }

  /**
   * The person who created this event.
   * @param creator creator or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setCreator(AssistantApiCoreTypesCalendarEventAttendee creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Optional description of the event (plain text).
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Optional description of the event (plain text).
   * @param description description or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * The end time of the event. Start and end time must either both be date or both be datetime. End
   * is exclusive, ie. the first day / first second when the event is over.
   * @return value or {@code null} for none
   */
  public AssistantApiDateTime getEnd() {
    return end;
  }

  /**
   * The end time of the event. Start and end time must either both be date or both be datetime. End
   * is exclusive, ie. the first day / first second when the event is over.
   * @param end end or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setEnd(AssistantApiDateTime end) {
    this.end = end;
    return this;
  }

  /**
   * Optional event id provided by assistant server. Needs to be unique, at least on a per-user and
   * calendar level, ideally globally unique. If none is given, the server will assign an id.
   * @return value or {@code null} for none
   */
  public java.lang.String getEventId() {
    return eventId;
  }

  /**
   * Optional event id provided by assistant server. Needs to be unique, at least on a per-user and
   * calendar level, ideally globally unique. If none is given, the server will assign an id.
   * @param eventId eventId or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setEventId(java.lang.String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * The flair name, calculated according to the event title (go/as-cal-flair). With the flair name,
   * background images can be got from gstatic (go/scs):
   * https://ssl.gstatic.com/tmly/f8944938hffheth4ew890ht4i8/flairs/
   * @return value or {@code null} for none
   */
  public java.lang.String getFlairName() {
    return flairName;
  }

  /**
   * The flair name, calculated according to the event title (go/as-cal-flair). With the flair name,
   * background images can be got from gstatic (go/scs):
   * https://ssl.gstatic.com/tmly/f8944938hffheth4ew890ht4i8/flairs/
   * @param flairName flairName or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setFlairName(java.lang.String flairName) {
    this.flairName = flairName;
    return this;
  }

  /**
   * The foreground color of the event, in RGB format.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getForegroundColor() {
    return foregroundColor;
  }

  /**
   * The foreground color of the event, in RGB format.
   * @param foregroundColor foregroundColor or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setForegroundColor(java.lang.Integer foregroundColor) {
    this.foregroundColor = foregroundColor;
    return this;
  }

  /**
   * Whether the guests can invite other guests.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getGuestsCanInviteOthers() {
    return guestsCanInviteOthers;
  }

  /**
   * Whether the guests can invite other guests.
   * @param guestsCanInviteOthers guestsCanInviteOthers or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setGuestsCanInviteOthers(java.lang.Boolean guestsCanInviteOthers) {
    this.guestsCanInviteOthers = guestsCanInviteOthers;
    return this;
  }

  /**
   * Whether the guests can modify the event.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getGuestsCanModify() {
    return guestsCanModify;
  }

  /**
   * Whether the guests can modify the event.
   * @param guestsCanModify guestsCanModify or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setGuestsCanModify(java.lang.Boolean guestsCanModify) {
    this.guestsCanModify = guestsCanModify;
    return this;
  }

  /**
   * Whether the guests of the event can be seen. If false, the user is reported as the only
   * attendee to the event, even though there may be more attendees.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getGuestsCanSeeGuests() {
    return guestsCanSeeGuests;
  }

  /**
   * Whether the guests of the event can be seen. If false, the user is reported as the only
   * attendee to the event, even though there may be more attendees.
   * @param guestsCanSeeGuests guestsCanSeeGuests or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setGuestsCanSeeGuests(java.lang.Boolean guestsCanSeeGuests) {
    this.guestsCanSeeGuests = guestsCanSeeGuests;
    return this;
  }

  /**
   * Optional id of the Habit (Calendar Goal) this event is linked to
   * @return value or {@code null} for none
   */
  public java.lang.String getHabitId() {
    return habitId;
  }

  /**
   * Optional id of the Habit (Calendar Goal) this event is linked to
   * @param habitId habitId or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setHabitId(java.lang.String habitId) {
    this.habitId = habitId;
    return this;
  }

  /**
   * Optional status for this habit event instance.
   * @return value or {@code null} for none
   */
  public java.lang.String getHabitStatus() {
    return habitStatus;
  }

  /**
   * Optional status for this habit event instance.
   * @param habitStatus habitStatus or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setHabitStatus(java.lang.String habitStatus) {
    this.habitStatus = habitStatus;
    return this;
  }

  /**
   * Absolute link to this event in the Calendar web UI.
   * @return value or {@code null} for none
   */
  public java.lang.String getHtmlLink() {
    return htmlLink;
  }

  /**
   * Absolute link to this event in the Calendar web UI.
   * @param htmlLink htmlLink or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setHtmlLink(java.lang.String htmlLink) {
    this.htmlLink = htmlLink;
    return this;
  }

  /**
   * Optional location of the event (plain text).
   * @return value or {@code null} for none
   */
  public java.lang.String getLocation() {
    return location;
  }

  /**
   * Optional location of the event (plain text).
   * @param location location or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setLocation(java.lang.String location) {
    this.location = location;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantApiCoreTypesCalendarEventMeetingContact> getMeetingContacts() {
    return meetingContacts;
  }

  /**
   * @param meetingContacts meetingContacts or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setMeetingContacts(java.util.List<AssistantApiCoreTypesCalendarEventMeetingContact> meetingContacts) {
    this.meetingContacts = meetingContacts;
    return this;
  }

  /**
   * The organizer of this event.
   * @return value or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEventAttendee getOrganizer() {
    return organizer;
  }

  /**
   * The organizer of this event.
   * @param organizer organizer or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setOrganizer(AssistantApiCoreTypesCalendarEventAttendee organizer) {
    this.organizer = organizer;
    return this;
  }

  /**
   * Whether not all attendees are included in the attendee list. This is set when the attendees
   * list has been truncated (e.g., when the number of attendees is beyond the maxAttendees
   * limitation).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getOtherAttendeesExcluded() {
    return otherAttendeesExcluded;
  }

  /**
   * Whether not all attendees are included in the attendee list. This is set when the attendees
   * list has been truncated (e.g., when the number of attendees is beyond the maxAttendees
   * limitation).
   * @param otherAttendeesExcluded otherAttendeesExcluded or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setOtherAttendeesExcluded(java.lang.Boolean otherAttendeesExcluded) {
    this.otherAttendeesExcluded = otherAttendeesExcluded;
    return this;
  }

  /**
   * The user's response (the owner of this copy of the event) to this event.
   * @return value or {@code null} for none
   */
  public java.lang.String getParticipationResponse() {
    return participationResponse;
  }

  /**
   * The user's response (the owner of this copy of the event) to this event.
   * @param participationResponse participationResponse or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setParticipationResponse(java.lang.String participationResponse) {
    this.participationResponse = participationResponse;
    return this;
  }

  /**
   * If this is an instance of a recurring event, recurring_event_id identifies the recurring series
   * as a whole.
   * @return value or {@code null} for none
   */
  public java.lang.String getRecurringEventId() {
    return recurringEventId;
  }

  /**
   * If this is an instance of a recurring event, recurring_event_id identifies the recurring series
   * as a whole.
   * @param recurringEventId recurringEventId or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setRecurringEventId(java.lang.String recurringEventId) {
    this.recurringEventId = recurringEventId;
    return this;
  }

  /**
   * Meeting rooms associated to this event.
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantApiCoreTypesCalendarEventRoom> getRooms() {
    return rooms;
  }

  /**
   * Meeting rooms associated to this event.
   * @param rooms rooms or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setRooms(java.util.List<AssistantApiCoreTypesCalendarEventRoom> rooms) {
    this.rooms = rooms;
    return this;
  }

  /**
   * The start time of the event. This event is an all-day event if start has no time_of_day.
   * @return value or {@code null} for none
   */
  public AssistantApiDateTime getStart() {
    return start;
  }

  /**
   * The start time of the event. This event is an all-day event if start has no time_of_day.
   * @param start start or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setStart(AssistantApiDateTime start) {
    this.start = start;
    return this;
  }

  /**
   * The title of the event.
   * @return value or {@code null} for none
   */
  public java.lang.String getSummary() {
    return summary;
  }

  /**
   * The title of the event.
   * @param summary summary or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setSummary(java.lang.String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Optional visibility of the event.
   * @return value or {@code null} for none
   */
  public java.lang.String getVisibility() {
    return visibility;
  }

  /**
   * Optional visibility of the event.
   * @param visibility visibility or {@code null} for none
   */
  public AssistantApiCoreTypesCalendarEvent setVisibility(java.lang.String visibility) {
    this.visibility = visibility;
    return this;
  }

  @Override
  public AssistantApiCoreTypesCalendarEvent set(String fieldName, Object value) {
    return (AssistantApiCoreTypesCalendarEvent) super.set(fieldName, value);
  }

  @Override
  public AssistantApiCoreTypesCalendarEvent clone() {
    return (AssistantApiCoreTypesCalendarEvent) super.clone();
  }

}
