/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Geo-specific information about the entity. Next available tag: 34.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefGeoMetadataProto extends com.google.api.client.json.GenericJson {

  /**
   * Stores parent/container information containing city, province & country.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreAddressProto address;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefGeoMetadataProtoAddressSynonym> addressSynonyms;

  /**
   * Area in km^2 of the feature if the feature has polygon.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double areaKm2;

  /**
   * The tight bounds of this feature. Note that these are different from the FeatureProto.bound
   * field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreRectProto bound;

  /**
   * Country code of the country of the entity. Only available in qref-metadata.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String countryCode;

  /**
   * The geographic location (center) and geometry of this entity. See geostore.FeatureProto for
   * more details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostorePointProto location;

  /**
   * The best name from Oyster for this entity. Is only included for some types of entities, and is
   * a trimmed version of the proto (some fields are cleared).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreNameProto name;

  /**
   * The oyster id of the entity
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto oysterId;

  /**
   * Numerical country code, converted with i18n/identifiers/stableinternalregionconverter.h. It is
   * the same as country_code, but it is available in the annotator model (and takes less space).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer stableIntegerCountryCode;

  /**
   * Timezone if the feature is contained inside one.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String timezone;

  /**
   * Information about the geographic location (center) extracted from the wikijoins.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefWikipediaGeocode> wpLocation;

  /**
   * Stores parent/container information containing city, province & country.
   * @return value or {@code null} for none
   */
  public GeostoreAddressProto getAddress() {
    return address;
  }

  /**
   * Stores parent/container information containing city, province & country.
   * @param address address or {@code null} for none
   */
  public RepositoryWebrefGeoMetadataProto setAddress(GeostoreAddressProto address) {
    this.address = address;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefGeoMetadataProtoAddressSynonym> getAddressSynonyms() {
    return addressSynonyms;
  }

  /**
   * @param addressSynonyms addressSynonyms or {@code null} for none
   */
  public RepositoryWebrefGeoMetadataProto setAddressSynonyms(java.util.List<RepositoryWebrefGeoMetadataProtoAddressSynonym> addressSynonyms) {
    this.addressSynonyms = addressSynonyms;
    return this;
  }

  /**
   * Area in km^2 of the feature if the feature has polygon.
   * @return value or {@code null} for none
   */
  public java.lang.Double getAreaKm2() {
    return areaKm2;
  }

  /**
   * Area in km^2 of the feature if the feature has polygon.
   * @param areaKm2 areaKm2 or {@code null} for none
   */
  public RepositoryWebrefGeoMetadataProto setAreaKm2(java.lang.Double areaKm2) {
    this.areaKm2 = areaKm2;
    return this;
  }

  /**
   * The tight bounds of this feature. Note that these are different from the FeatureProto.bound
   * field.
   * @return value or {@code null} for none
   */
  public GeostoreRectProto getBound() {
    return bound;
  }

  /**
   * The tight bounds of this feature. Note that these are different from the FeatureProto.bound
   * field.
   * @param bound bound or {@code null} for none
   */
  public RepositoryWebrefGeoMetadataProto setBound(GeostoreRectProto bound) {
    this.bound = bound;
    return this;
  }

  /**
   * Country code of the country of the entity. Only available in qref-metadata.
   * @return value or {@code null} for none
   */
  public java.lang.String getCountryCode() {
    return countryCode;
  }

  /**
   * Country code of the country of the entity. Only available in qref-metadata.
   * @param countryCode countryCode or {@code null} for none
   */
  public RepositoryWebrefGeoMetadataProto setCountryCode(java.lang.String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The geographic location (center) and geometry of this entity. See geostore.FeatureProto for
   * more details.
   * @return value or {@code null} for none
   */
  public GeostorePointProto getLocation() {
    return location;
  }

  /**
   * The geographic location (center) and geometry of this entity. See geostore.FeatureProto for
   * more details.
   * @param location location or {@code null} for none
   */
  public RepositoryWebrefGeoMetadataProto setLocation(GeostorePointProto location) {
    this.location = location;
    return this;
  }

  /**
   * The best name from Oyster for this entity. Is only included for some types of entities, and is
   * a trimmed version of the proto (some fields are cleared).
   * @return value or {@code null} for none
   */
  public GeostoreNameProto getName() {
    return name;
  }

  /**
   * The best name from Oyster for this entity. Is only included for some types of entities, and is
   * a trimmed version of the proto (some fields are cleared).
   * @param name name or {@code null} for none
   */
  public RepositoryWebrefGeoMetadataProto setName(GeostoreNameProto name) {
    this.name = name;
    return this;
  }

  /**
   * The oyster id of the entity
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getOysterId() {
    return oysterId;
  }

  /**
   * The oyster id of the entity
   * @param oysterId oysterId or {@code null} for none
   */
  public RepositoryWebrefGeoMetadataProto setOysterId(GeostoreFeatureIdProto oysterId) {
    this.oysterId = oysterId;
    return this;
  }

  /**
   * Numerical country code, converted with i18n/identifiers/stableinternalregionconverter.h. It is
   * the same as country_code, but it is available in the annotator model (and takes less space).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getStableIntegerCountryCode() {
    return stableIntegerCountryCode;
  }

  /**
   * Numerical country code, converted with i18n/identifiers/stableinternalregionconverter.h. It is
   * the same as country_code, but it is available in the annotator model (and takes less space).
   * @param stableIntegerCountryCode stableIntegerCountryCode or {@code null} for none
   */
  public RepositoryWebrefGeoMetadataProto setStableIntegerCountryCode(java.lang.Integer stableIntegerCountryCode) {
    this.stableIntegerCountryCode = stableIntegerCountryCode;
    return this;
  }

  /**
   * Timezone if the feature is contained inside one.
   * @return value or {@code null} for none
   */
  public java.lang.String getTimezone() {
    return timezone;
  }

  /**
   * Timezone if the feature is contained inside one.
   * @param timezone timezone or {@code null} for none
   */
  public RepositoryWebrefGeoMetadataProto setTimezone(java.lang.String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Information about the geographic location (center) extracted from the wikijoins.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefWikipediaGeocode> getWpLocation() {
    return wpLocation;
  }

  /**
   * Information about the geographic location (center) extracted from the wikijoins.
   * @param wpLocation wpLocation or {@code null} for none
   */
  public RepositoryWebrefGeoMetadataProto setWpLocation(java.util.List<RepositoryWebrefWikipediaGeocode> wpLocation) {
    this.wpLocation = wpLocation;
    return this;
  }

  @Override
  public RepositoryWebrefGeoMetadataProto set(String fieldName, Object value) {
    return (RepositoryWebrefGeoMetadataProto) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefGeoMetadataProto clone() {
    return (RepositoryWebrefGeoMetadataProto) super.clone();
  }

}
