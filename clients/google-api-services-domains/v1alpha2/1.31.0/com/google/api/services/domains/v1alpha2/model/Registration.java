/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.domains.v1alpha2.model;

/**
 * The `Registration` resource facilitates managing and configuring domain name registrations. To
 * create a new `Registration` resource, find a suitable domain name by calling the `SearchDomains`
 * method with a query to see available domain name options. After choosing a name, call
 * `RetrieveRegisterParameters` to ensure availability and obtain information like pricing, which is
 * needed to build a call to `RegisterDomain`.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Domains API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Registration extends com.google.api.client.json.GenericJson {

  /**
   * Required. Settings for contact information linked to the `Registration`. You cannot update
   * these with the `UpdateRegistration` method. To update these settings, use the
   * `ConfigureContactSettings` method.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ContactSettings contactSettings;

  /**
   * Output only. The creation timestamp of the `Registration` resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Settings controlling the DNS configuration of the `Registration`. You cannot update these with
   * the `UpdateRegistration` method. To update these settings, use the `ConfigureDnsSettings`
   * method.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DnsSettings dnsSettings;

  /**
   * Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode
   * format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String domainName;

  /**
   * Output only. The expiration timestamp of the `Registration`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String expireTime;

  /**
   * Output only. The set of issues with the `Registration` that require attention.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> issues;

  /**
   * Set of labels associated with the `Registration`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Settings for management of the `Registration`, including renewal, billing, and transfer. You
   * cannot update these with the `UpdateRegistration` method. To update these settings, use the
   * `ConfigureManagementSettings` method.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ManagementSettings managementSettings;

  /**
   * Output only. Name of the `Registration` resource, in the format
   * `projects/locations/registrations/`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. Pending contact settings for the `Registration`. Updates to the `contact_settings`
   * field that change its `registrant_contact` or `privacy` fields require email confirmation by
   * the `registrant_contact` before taking effect. This field is set only if there are pending
   * updates to the `contact_settings` that have not yet been confirmed. To confirm the changes, the
   * `registrant_contact` must follow the instructions in the email they receive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ContactSettings pendingContactSettings;

  /**
   * Output only. The state of the `Registration`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Set of options for the `contact_settings.privacy` field that this `Registration`
   * supports.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> supportedPrivacy;

  /**
   * Required. Settings for contact information linked to the `Registration`. You cannot update
   * these with the `UpdateRegistration` method. To update these settings, use the
   * `ConfigureContactSettings` method.
   * @return value or {@code null} for none
   */
  public ContactSettings getContactSettings() {
    return contactSettings;
  }

  /**
   * Required. Settings for contact information linked to the `Registration`. You cannot update
   * these with the `UpdateRegistration` method. To update these settings, use the
   * `ConfigureContactSettings` method.
   * @param contactSettings contactSettings or {@code null} for none
   */
  public Registration setContactSettings(ContactSettings contactSettings) {
    this.contactSettings = contactSettings;
    return this;
  }

  /**
   * Output only. The creation timestamp of the `Registration` resource.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The creation timestamp of the `Registration` resource.
   * @param createTime createTime or {@code null} for none
   */
  public Registration setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Settings controlling the DNS configuration of the `Registration`. You cannot update these with
   * the `UpdateRegistration` method. To update these settings, use the `ConfigureDnsSettings`
   * method.
   * @return value or {@code null} for none
   */
  public DnsSettings getDnsSettings() {
    return dnsSettings;
  }

  /**
   * Settings controlling the DNS configuration of the `Registration`. You cannot update these with
   * the `UpdateRegistration` method. To update these settings, use the `ConfigureDnsSettings`
   * method.
   * @param dnsSettings dnsSettings or {@code null} for none
   */
  public Registration setDnsSettings(DnsSettings dnsSettings) {
    this.dnsSettings = dnsSettings;
    return this;
  }

  /**
   * Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode
   * format.
   * @return value or {@code null} for none
   */
  public java.lang.String getDomainName() {
    return domainName;
  }

  /**
   * Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode
   * format.
   * @param domainName domainName or {@code null} for none
   */
  public Registration setDomainName(java.lang.String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Output only. The expiration timestamp of the `Registration`.
   * @return value or {@code null} for none
   */
  public String getExpireTime() {
    return expireTime;
  }

  /**
   * Output only. The expiration timestamp of the `Registration`.
   * @param expireTime expireTime or {@code null} for none
   */
  public Registration setExpireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Output only. The set of issues with the `Registration` that require attention.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getIssues() {
    return issues;
  }

  /**
   * Output only. The set of issues with the `Registration` that require attention.
   * @param issues issues or {@code null} for none
   */
  public Registration setIssues(java.util.List<java.lang.String> issues) {
    this.issues = issues;
    return this;
  }

  /**
   * Set of labels associated with the `Registration`.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Set of labels associated with the `Registration`.
   * @param labels labels or {@code null} for none
   */
  public Registration setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Settings for management of the `Registration`, including renewal, billing, and transfer. You
   * cannot update these with the `UpdateRegistration` method. To update these settings, use the
   * `ConfigureManagementSettings` method.
   * @return value or {@code null} for none
   */
  public ManagementSettings getManagementSettings() {
    return managementSettings;
  }

  /**
   * Settings for management of the `Registration`, including renewal, billing, and transfer. You
   * cannot update these with the `UpdateRegistration` method. To update these settings, use the
   * `ConfigureManagementSettings` method.
   * @param managementSettings managementSettings or {@code null} for none
   */
  public Registration setManagementSettings(ManagementSettings managementSettings) {
    this.managementSettings = managementSettings;
    return this;
  }

  /**
   * Output only. Name of the `Registration` resource, in the format
   * `projects/locations/registrations/`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. Name of the `Registration` resource, in the format
   * `projects/locations/registrations/`.
   * @param name name or {@code null} for none
   */
  public Registration setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. Pending contact settings for the `Registration`. Updates to the `contact_settings`
   * field that change its `registrant_contact` or `privacy` fields require email confirmation by
   * the `registrant_contact` before taking effect. This field is set only if there are pending
   * updates to the `contact_settings` that have not yet been confirmed. To confirm the changes, the
   * `registrant_contact` must follow the instructions in the email they receive.
   * @return value or {@code null} for none
   */
  public ContactSettings getPendingContactSettings() {
    return pendingContactSettings;
  }

  /**
   * Output only. Pending contact settings for the `Registration`. Updates to the `contact_settings`
   * field that change its `registrant_contact` or `privacy` fields require email confirmation by
   * the `registrant_contact` before taking effect. This field is set only if there are pending
   * updates to the `contact_settings` that have not yet been confirmed. To confirm the changes, the
   * `registrant_contact` must follow the instructions in the email they receive.
   * @param pendingContactSettings pendingContactSettings or {@code null} for none
   */
  public Registration setPendingContactSettings(ContactSettings pendingContactSettings) {
    this.pendingContactSettings = pendingContactSettings;
    return this;
  }

  /**
   * Output only. The state of the `Registration`
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The state of the `Registration`
   * @param state state or {@code null} for none
   */
  public Registration setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Set of options for the `contact_settings.privacy` field that this `Registration`
   * supports.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSupportedPrivacy() {
    return supportedPrivacy;
  }

  /**
   * Output only. Set of options for the `contact_settings.privacy` field that this `Registration`
   * supports.
   * @param supportedPrivacy supportedPrivacy or {@code null} for none
   */
  public Registration setSupportedPrivacy(java.util.List<java.lang.String> supportedPrivacy) {
    this.supportedPrivacy = supportedPrivacy;
    return this;
  }

  @Override
  public Registration set(String fieldName, Object value) {
    return (Registration) super.set(fieldName, value);
  }

  @Override
  public Registration clone() {
    return (Registration) super.clone();
  }

}
