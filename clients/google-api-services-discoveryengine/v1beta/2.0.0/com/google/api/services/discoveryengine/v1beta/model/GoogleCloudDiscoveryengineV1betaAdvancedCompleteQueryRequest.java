/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.discoveryengine.v1beta.model;

/**
 * Request message for CompletionService.AdvancedCompleteQuery method. .
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Discovery Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequest extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Specification to boost suggestions matching the condition.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequestBoostSpec boostSpec;

  /**
   * Indicates if tail suggestions should be returned if there are no suggestions that match the
   * full query. Even if set to true, if there are suggestions that match the full query, those are
   * returned and no tail suggestions are returned.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean includeTailSuggestions;

  /**
   * Required. The typeahead input used to fetch suggestions. Maximum length is 128 characters. The
   * query can not be empty for most of the suggestion types. If it is empty, an `INVALID_ARGUMENT`
   * error is returned. The exception is when the suggestion_types contains only the type
   * `RECENT_SEARCH`, the query can be an empty string. The is called "zero prefix" feature, which
   * returns user's recently searched queries given the empty query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String query;

  /**
   * Specifies the autocomplete data model. This overrides any model specified in the Configuration
   * > Autocomplete section of the Cloud console. Currently supported values: * `document` - Using
   * suggestions generated from user-imported documents. * `search-history` - Using suggestions
   * generated from the past history of SearchService.Search API calls. Do not use it when there is
   * no traffic for Search API. * `user-event` - Using suggestions generated from user-imported
   * search events. * `document-completable` - Using suggestions taken directly from user-imported
   * document fields marked as completable. Default values: * `document` is the default model for
   * regular dataStores. * `search-history` is the default model for site search dataStores.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String queryModel;

  /**
   * Optional. Suggestion types to return. If empty or unspecified, query suggestions are returned.
   * Only one suggestion type is supported at the moment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> suggestionTypes;

  /**
   * Optional. Information about the end user. This should be the same identifier information as
   * UserEvent.user_info and SearchRequest.user_info.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1betaUserInfo userInfo;

  /**
   * A unique identifier for tracking visitors. For example, this could be implemented with an HTTP
   * cookie, which should be able to uniquely identify a visitor on a single device. This unique
   * identifier should not change if the visitor logs in or out of the website. This field should
   * NOT have a fixed value such as `unknown_visitor`. This should be the same identifier as
   * UserEvent.user_pseudo_id and SearchRequest.user_pseudo_id. The field must be a UTF-8 encoded
   * string with a length limit of 128
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String userPseudoId;

  /**
   * Optional. Specification to boost suggestions matching the condition.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequestBoostSpec getBoostSpec() {
    return boostSpec;
  }

  /**
   * Optional. Specification to boost suggestions matching the condition.
   * @param boostSpec boostSpec or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequest setBoostSpec(GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequestBoostSpec boostSpec) {
    this.boostSpec = boostSpec;
    return this;
  }

  /**
   * Indicates if tail suggestions should be returned if there are no suggestions that match the
   * full query. Even if set to true, if there are suggestions that match the full query, those are
   * returned and no tail suggestions are returned.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIncludeTailSuggestions() {
    return includeTailSuggestions;
  }

  /**
   * Indicates if tail suggestions should be returned if there are no suggestions that match the
   * full query. Even if set to true, if there are suggestions that match the full query, those are
   * returned and no tail suggestions are returned.
   * @param includeTailSuggestions includeTailSuggestions or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequest setIncludeTailSuggestions(java.lang.Boolean includeTailSuggestions) {
    this.includeTailSuggestions = includeTailSuggestions;
    return this;
  }

  /**
   * Required. The typeahead input used to fetch suggestions. Maximum length is 128 characters. The
   * query can not be empty for most of the suggestion types. If it is empty, an `INVALID_ARGUMENT`
   * error is returned. The exception is when the suggestion_types contains only the type
   * `RECENT_SEARCH`, the query can be an empty string. The is called "zero prefix" feature, which
   * returns user's recently searched queries given the empty query.
   * @return value or {@code null} for none
   */
  public java.lang.String getQuery() {
    return query;
  }

  /**
   * Required. The typeahead input used to fetch suggestions. Maximum length is 128 characters. The
   * query can not be empty for most of the suggestion types. If it is empty, an `INVALID_ARGUMENT`
   * error is returned. The exception is when the suggestion_types contains only the type
   * `RECENT_SEARCH`, the query can be an empty string. The is called "zero prefix" feature, which
   * returns user's recently searched queries given the empty query.
   * @param query query or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequest setQuery(java.lang.String query) {
    this.query = query;
    return this;
  }

  /**
   * Specifies the autocomplete data model. This overrides any model specified in the Configuration
   * > Autocomplete section of the Cloud console. Currently supported values: * `document` - Using
   * suggestions generated from user-imported documents. * `search-history` - Using suggestions
   * generated from the past history of SearchService.Search API calls. Do not use it when there is
   * no traffic for Search API. * `user-event` - Using suggestions generated from user-imported
   * search events. * `document-completable` - Using suggestions taken directly from user-imported
   * document fields marked as completable. Default values: * `document` is the default model for
   * regular dataStores. * `search-history` is the default model for site search dataStores.
   * @return value or {@code null} for none
   */
  public java.lang.String getQueryModel() {
    return queryModel;
  }

  /**
   * Specifies the autocomplete data model. This overrides any model specified in the Configuration
   * > Autocomplete section of the Cloud console. Currently supported values: * `document` - Using
   * suggestions generated from user-imported documents. * `search-history` - Using suggestions
   * generated from the past history of SearchService.Search API calls. Do not use it when there is
   * no traffic for Search API. * `user-event` - Using suggestions generated from user-imported
   * search events. * `document-completable` - Using suggestions taken directly from user-imported
   * document fields marked as completable. Default values: * `document` is the default model for
   * regular dataStores. * `search-history` is the default model for site search dataStores.
   * @param queryModel queryModel or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequest setQueryModel(java.lang.String queryModel) {
    this.queryModel = queryModel;
    return this;
  }

  /**
   * Optional. Suggestion types to return. If empty or unspecified, query suggestions are returned.
   * Only one suggestion type is supported at the moment.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSuggestionTypes() {
    return suggestionTypes;
  }

  /**
   * Optional. Suggestion types to return. If empty or unspecified, query suggestions are returned.
   * Only one suggestion type is supported at the moment.
   * @param suggestionTypes suggestionTypes or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequest setSuggestionTypes(java.util.List<java.lang.String> suggestionTypes) {
    this.suggestionTypes = suggestionTypes;
    return this;
  }

  /**
   * Optional. Information about the end user. This should be the same identifier information as
   * UserEvent.user_info and SearchRequest.user_info.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaUserInfo getUserInfo() {
    return userInfo;
  }

  /**
   * Optional. Information about the end user. This should be the same identifier information as
   * UserEvent.user_info and SearchRequest.user_info.
   * @param userInfo userInfo or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequest setUserInfo(GoogleCloudDiscoveryengineV1betaUserInfo userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  /**
   * A unique identifier for tracking visitors. For example, this could be implemented with an HTTP
   * cookie, which should be able to uniquely identify a visitor on a single device. This unique
   * identifier should not change if the visitor logs in or out of the website. This field should
   * NOT have a fixed value such as `unknown_visitor`. This should be the same identifier as
   * UserEvent.user_pseudo_id and SearchRequest.user_pseudo_id. The field must be a UTF-8 encoded
   * string with a length limit of 128
   * @return value or {@code null} for none
   */
  public java.lang.String getUserPseudoId() {
    return userPseudoId;
  }

  /**
   * A unique identifier for tracking visitors. For example, this could be implemented with an HTTP
   * cookie, which should be able to uniquely identify a visitor on a single device. This unique
   * identifier should not change if the visitor logs in or out of the website. This field should
   * NOT have a fixed value such as `unknown_visitor`. This should be the same identifier as
   * UserEvent.user_pseudo_id and SearchRequest.user_pseudo_id. The field must be a UTF-8 encoded
   * string with a length limit of 128
   * @param userPseudoId userPseudoId or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequest setUserPseudoId(java.lang.String userPseudoId) {
    this.userPseudoId = userPseudoId;
    return this;
  }

  @Override
  public GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequest set(String fieldName, Object value) {
    return (GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequest) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequest clone() {
    return (GoogleCloudDiscoveryengineV1betaAdvancedCompleteQueryRequest) super.clone();
  }

}
