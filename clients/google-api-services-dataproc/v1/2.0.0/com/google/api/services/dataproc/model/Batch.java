/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataproc.model;

/**
 * A representation of a batch workload in the service.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Dataproc API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Batch extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The time when the batch was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Output only. The email address of the user who created the batch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String creator;

  /**
   * Optional. Environment configuration for the batch execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EnvironmentConfig environmentConfig;

  /**
   * Optional. The labels to associate with this batch. Label keys must contain 1 to 63 characters,
   * and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty,
   * but, if present, must contain 1 to 63 characters, and must conform to RFC 1035
   * (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a batch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Output only. The resource name of the batch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The resource name of the operation associated with this batch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String operation;

  /**
   * Optional. PySpark batch config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PySparkBatch pysparkBatch;

  /**
   * Optional. Runtime configuration for the batch execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RuntimeConfig runtimeConfig;

  /**
   * Output only. Runtime information about batch execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RuntimeInfo runtimeInfo;

  /**
   * Optional. Spark batch config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SparkBatch sparkBatch;

  /**
   * Optional. SparkR batch config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SparkRBatch sparkRBatch;

  /**
   * Optional. SparkSql batch config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SparkSqlBatch sparkSqlBatch;

  /**
   * Output only. The state of the batch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Historical state information for the batch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<StateHistory> stateHistory;

  /**
   * Output only. Batch state details, such as a failure description if the state is FAILED.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stateMessage;

  /**
   * Output only. The time when the batch entered a current state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String stateTime;

  /**
   * Output only. A batch UUID (Unique Universal Identifier). The service generates this value when
   * it creates the batch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uuid;

  /**
   * Output only. The time when the batch was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time when the batch was created.
   * @param createTime createTime or {@code null} for none
   */
  public Batch setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. The email address of the user who created the batch.
   * @return value or {@code null} for none
   */
  public java.lang.String getCreator() {
    return creator;
  }

  /**
   * Output only. The email address of the user who created the batch.
   * @param creator creator or {@code null} for none
   */
  public Batch setCreator(java.lang.String creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Optional. Environment configuration for the batch execution.
   * @return value or {@code null} for none
   */
  public EnvironmentConfig getEnvironmentConfig() {
    return environmentConfig;
  }

  /**
   * Optional. Environment configuration for the batch execution.
   * @param environmentConfig environmentConfig or {@code null} for none
   */
  public Batch setEnvironmentConfig(EnvironmentConfig environmentConfig) {
    this.environmentConfig = environmentConfig;
    return this;
  }

  /**
   * Optional. The labels to associate with this batch. Label keys must contain 1 to 63 characters,
   * and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty,
   * but, if present, must contain 1 to 63 characters, and must conform to RFC 1035
   * (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a batch.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. The labels to associate with this batch. Label keys must contain 1 to 63 characters,
   * and must conform to RFC 1035 (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty,
   * but, if present, must contain 1 to 63 characters, and must conform to RFC 1035
   * (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a batch.
   * @param labels labels or {@code null} for none
   */
  public Batch setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Output only. The resource name of the batch.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The resource name of the batch.
   * @param name name or {@code null} for none
   */
  public Batch setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The resource name of the operation associated with this batch.
   * @return value or {@code null} for none
   */
  public java.lang.String getOperation() {
    return operation;
  }

  /**
   * Output only. The resource name of the operation associated with this batch.
   * @param operation operation or {@code null} for none
   */
  public Batch setOperation(java.lang.String operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Optional. PySpark batch config.
   * @return value or {@code null} for none
   */
  public PySparkBatch getPysparkBatch() {
    return pysparkBatch;
  }

  /**
   * Optional. PySpark batch config.
   * @param pysparkBatch pysparkBatch or {@code null} for none
   */
  public Batch setPysparkBatch(PySparkBatch pysparkBatch) {
    this.pysparkBatch = pysparkBatch;
    return this;
  }

  /**
   * Optional. Runtime configuration for the batch execution.
   * @return value or {@code null} for none
   */
  public RuntimeConfig getRuntimeConfig() {
    return runtimeConfig;
  }

  /**
   * Optional. Runtime configuration for the batch execution.
   * @param runtimeConfig runtimeConfig or {@code null} for none
   */
  public Batch setRuntimeConfig(RuntimeConfig runtimeConfig) {
    this.runtimeConfig = runtimeConfig;
    return this;
  }

  /**
   * Output only. Runtime information about batch execution.
   * @return value or {@code null} for none
   */
  public RuntimeInfo getRuntimeInfo() {
    return runtimeInfo;
  }

  /**
   * Output only. Runtime information about batch execution.
   * @param runtimeInfo runtimeInfo or {@code null} for none
   */
  public Batch setRuntimeInfo(RuntimeInfo runtimeInfo) {
    this.runtimeInfo = runtimeInfo;
    return this;
  }

  /**
   * Optional. Spark batch config.
   * @return value or {@code null} for none
   */
  public SparkBatch getSparkBatch() {
    return sparkBatch;
  }

  /**
   * Optional. Spark batch config.
   * @param sparkBatch sparkBatch or {@code null} for none
   */
  public Batch setSparkBatch(SparkBatch sparkBatch) {
    this.sparkBatch = sparkBatch;
    return this;
  }

  /**
   * Optional. SparkR batch config.
   * @return value or {@code null} for none
   */
  public SparkRBatch getSparkRBatch() {
    return sparkRBatch;
  }

  /**
   * Optional. SparkR batch config.
   * @param sparkRBatch sparkRBatch or {@code null} for none
   */
  public Batch setSparkRBatch(SparkRBatch sparkRBatch) {
    this.sparkRBatch = sparkRBatch;
    return this;
  }

  /**
   * Optional. SparkSql batch config.
   * @return value or {@code null} for none
   */
  public SparkSqlBatch getSparkSqlBatch() {
    return sparkSqlBatch;
  }

  /**
   * Optional. SparkSql batch config.
   * @param sparkSqlBatch sparkSqlBatch or {@code null} for none
   */
  public Batch setSparkSqlBatch(SparkSqlBatch sparkSqlBatch) {
    this.sparkSqlBatch = sparkSqlBatch;
    return this;
  }

  /**
   * Output only. The state of the batch.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The state of the batch.
   * @param state state or {@code null} for none
   */
  public Batch setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Historical state information for the batch.
   * @return value or {@code null} for none
   */
  public java.util.List<StateHistory> getStateHistory() {
    return stateHistory;
  }

  /**
   * Output only. Historical state information for the batch.
   * @param stateHistory stateHistory or {@code null} for none
   */
  public Batch setStateHistory(java.util.List<StateHistory> stateHistory) {
    this.stateHistory = stateHistory;
    return this;
  }

  /**
   * Output only. Batch state details, such as a failure description if the state is FAILED.
   * @return value or {@code null} for none
   */
  public java.lang.String getStateMessage() {
    return stateMessage;
  }

  /**
   * Output only. Batch state details, such as a failure description if the state is FAILED.
   * @param stateMessage stateMessage or {@code null} for none
   */
  public Batch setStateMessage(java.lang.String stateMessage) {
    this.stateMessage = stateMessage;
    return this;
  }

  /**
   * Output only. The time when the batch entered a current state.
   * @return value or {@code null} for none
   */
  public String getStateTime() {
    return stateTime;
  }

  /**
   * Output only. The time when the batch entered a current state.
   * @param stateTime stateTime or {@code null} for none
   */
  public Batch setStateTime(String stateTime) {
    this.stateTime = stateTime;
    return this;
  }

  /**
   * Output only. A batch UUID (Unique Universal Identifier). The service generates this value when
   * it creates the batch.
   * @return value or {@code null} for none
   */
  public java.lang.String getUuid() {
    return uuid;
  }

  /**
   * Output only. A batch UUID (Unique Universal Identifier). The service generates this value when
   * it creates the batch.
   * @param uuid uuid or {@code null} for none
   */
  public Batch setUuid(java.lang.String uuid) {
    this.uuid = uuid;
    return this;
  }

  @Override
  public Batch set(String fieldName, Object value) {
    return (Batch) super.set(fieldName, value);
  }

  @Override
  public Batch clone() {
    return (Batch) super.clone();
  }

}
