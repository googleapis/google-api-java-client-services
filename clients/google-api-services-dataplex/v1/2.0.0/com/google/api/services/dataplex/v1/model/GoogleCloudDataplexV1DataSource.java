/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataplex.v1.model;

/**
 * The data source for DataScan.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Dataplex API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDataplexV1DataSource extends com.google.api.client.json.GenericJson {

  /**
   * Immutable. The Dataplex entity that represents the data source (e.g. BigQuery table) for
   * DataScan, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/
   * {zone_id}/entities/{entity_id}.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String entity;

  /**
   * Immutable. The service-qualified full resource name of the cloud resource for a DataScan job to
   * scan against. The field could be: BigQuery table of type "TABLE" for
   * DataProfileScan/DataQualityScan Format:
   * //bigquery.googleapis.com/projects/PROJECT_ID/datasets/DATASET_ID/tables/TABLE_ID
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String resource;

  /**
   * Immutable. The Dataplex entity that represents the data source (e.g. BigQuery table) for
   * DataScan, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/
   * {zone_id}/entities/{entity_id}.
   * @return value or {@code null} for none
   */
  public java.lang.String getEntity() {
    return entity;
  }

  /**
   * Immutable. The Dataplex entity that represents the data source (e.g. BigQuery table) for
   * DataScan, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/
   * {zone_id}/entities/{entity_id}.
   * @param entity entity or {@code null} for none
   */
  public GoogleCloudDataplexV1DataSource setEntity(java.lang.String entity) {
    this.entity = entity;
    return this;
  }

  /**
   * Immutable. The service-qualified full resource name of the cloud resource for a DataScan job to
   * scan against. The field could be: BigQuery table of type "TABLE" for
   * DataProfileScan/DataQualityScan Format:
   * //bigquery.googleapis.com/projects/PROJECT_ID/datasets/DATASET_ID/tables/TABLE_ID
   * @return value or {@code null} for none
   */
  public java.lang.String getResource() {
    return resource;
  }

  /**
   * Immutable. The service-qualified full resource name of the cloud resource for a DataScan job to
   * scan against. The field could be: BigQuery table of type "TABLE" for
   * DataProfileScan/DataQualityScan Format:
   * //bigquery.googleapis.com/projects/PROJECT_ID/datasets/DATASET_ID/tables/TABLE_ID
   * @param resource resource or {@code null} for none
   */
  public GoogleCloudDataplexV1DataSource setResource(java.lang.String resource) {
    this.resource = resource;
    return this;
  }

  @Override
  public GoogleCloudDataplexV1DataSource set(String fieldName, Object value) {
    return (GoogleCloudDataplexV1DataSource) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDataplexV1DataSource clone() {
    return (GoogleCloudDataplexV1DataSource) super.clone();
  }

}
