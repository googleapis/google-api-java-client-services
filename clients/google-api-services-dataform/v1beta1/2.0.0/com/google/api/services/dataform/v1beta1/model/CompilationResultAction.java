/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataform.v1beta1.model;

/**
 * Represents a single Dataform action in a compilation result.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Dataform API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CompilationResultAction extends com.google.api.client.json.GenericJson {

  /**
   * The assertion executed by this action.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Assertion assertion;

  /**
   * The action's identifier if the project had been compiled without any overrides configured.
   * Unique within the compilation result.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Target canonicalTarget;

  /**
   * The declaration declared by this action.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Declaration declaration;

  /**
   * The full path including filename in which this action is located, relative to the workspace
   * root.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String filePath;

  /**
   * Output only. All the metadata information that is used internally to serve the resource. For
   * example: timestamps, flags, status fields, etc. The format of this field is a JSON string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String internalMetadata;

  /**
   * The notebook executed by this action.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Notebook notebook;

  /**
   * The database operations executed by this action.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Operations operations;

  /**
   * The database relation created/updated by this action.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Relation relation;

  /**
   * This action's identifier. Unique within the compilation result.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Target target;

  /**
   * The assertion executed by this action.
   * @return value or {@code null} for none
   */
  public Assertion getAssertion() {
    return assertion;
  }

  /**
   * The assertion executed by this action.
   * @param assertion assertion or {@code null} for none
   */
  public CompilationResultAction setAssertion(Assertion assertion) {
    this.assertion = assertion;
    return this;
  }

  /**
   * The action's identifier if the project had been compiled without any overrides configured.
   * Unique within the compilation result.
   * @return value or {@code null} for none
   */
  public Target getCanonicalTarget() {
    return canonicalTarget;
  }

  /**
   * The action's identifier if the project had been compiled without any overrides configured.
   * Unique within the compilation result.
   * @param canonicalTarget canonicalTarget or {@code null} for none
   */
  public CompilationResultAction setCanonicalTarget(Target canonicalTarget) {
    this.canonicalTarget = canonicalTarget;
    return this;
  }

  /**
   * The declaration declared by this action.
   * @return value or {@code null} for none
   */
  public Declaration getDeclaration() {
    return declaration;
  }

  /**
   * The declaration declared by this action.
   * @param declaration declaration or {@code null} for none
   */
  public CompilationResultAction setDeclaration(Declaration declaration) {
    this.declaration = declaration;
    return this;
  }

  /**
   * The full path including filename in which this action is located, relative to the workspace
   * root.
   * @return value or {@code null} for none
   */
  public java.lang.String getFilePath() {
    return filePath;
  }

  /**
   * The full path including filename in which this action is located, relative to the workspace
   * root.
   * @param filePath filePath or {@code null} for none
   */
  public CompilationResultAction setFilePath(java.lang.String filePath) {
    this.filePath = filePath;
    return this;
  }

  /**
   * Output only. All the metadata information that is used internally to serve the resource. For
   * example: timestamps, flags, status fields, etc. The format of this field is a JSON string.
   * @return value or {@code null} for none
   */
  public java.lang.String getInternalMetadata() {
    return internalMetadata;
  }

  /**
   * Output only. All the metadata information that is used internally to serve the resource. For
   * example: timestamps, flags, status fields, etc. The format of this field is a JSON string.
   * @param internalMetadata internalMetadata or {@code null} for none
   */
  public CompilationResultAction setInternalMetadata(java.lang.String internalMetadata) {
    this.internalMetadata = internalMetadata;
    return this;
  }

  /**
   * The notebook executed by this action.
   * @return value or {@code null} for none
   */
  public Notebook getNotebook() {
    return notebook;
  }

  /**
   * The notebook executed by this action.
   * @param notebook notebook or {@code null} for none
   */
  public CompilationResultAction setNotebook(Notebook notebook) {
    this.notebook = notebook;
    return this;
  }

  /**
   * The database operations executed by this action.
   * @return value or {@code null} for none
   */
  public Operations getOperations() {
    return operations;
  }

  /**
   * The database operations executed by this action.
   * @param operations operations or {@code null} for none
   */
  public CompilationResultAction setOperations(Operations operations) {
    this.operations = operations;
    return this;
  }

  /**
   * The database relation created/updated by this action.
   * @return value or {@code null} for none
   */
  public Relation getRelation() {
    return relation;
  }

  /**
   * The database relation created/updated by this action.
   * @param relation relation or {@code null} for none
   */
  public CompilationResultAction setRelation(Relation relation) {
    this.relation = relation;
    return this;
  }

  /**
   * This action's identifier. Unique within the compilation result.
   * @return value or {@code null} for none
   */
  public Target getTarget() {
    return target;
  }

  /**
   * This action's identifier. Unique within the compilation result.
   * @param target target or {@code null} for none
   */
  public CompilationResultAction setTarget(Target target) {
    this.target = target;
    return this;
  }

  @Override
  public CompilationResultAction set(String fieldName, Object value) {
    return (CompilationResultAction) super.set(fieldName, value);
  }

  @Override
  public CompilationResultAction clone() {
    return (CompilationResultAction) super.clone();
  }

}
