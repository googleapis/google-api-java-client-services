/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudbilling.v1beta.model;

/**
 * A timeline of usage rates. Consists of a series of entries, each of which specifies a constant
 * rate of usage during a time interval. Each entry contains an effective time. The usage rate is in
 * effect from that time until the effective time of the subsequent entry, or, for the last entry,
 * for the remaining portion of estimation time frame. Effective times are specified as an offset
 * into the estimation time frame. Usage is considered to be zero until the `effective_time` of the
 * first entry. All subsequent entries must have an effective time greater than the previous entry
 * and less than the estimate time frame. The effective time on all entries must be an integer
 * number of hours.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Billing API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class UsageRateTimeline extends com.google.api.client.json.GenericJson {

  /**
   * The unit for the usage rate in each timeline entry. If you provide an incorrect unit for an
   * instance, the correct unit is provided in the error message. The supported units are a subset
   * of [The Unified Code for Units of Measure](https://ucum.org/ucum.html) standard: * **Time units
   * (TIME-UNIT)** * `s` second * `min` minute * `h` hour * `d` day * `wk` week * `mo` month * `yr`
   * year * `ms` millisecond * `us` microsecond * `ns` nanosecond * **Basic storage units (BASIC-
   * STORAGE-UNIT)** * `bit` bit * `By` byte * **Count units (COUNT-UNIT)** * `count` count *
   * **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12)
   * * `P` peta (10^15) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40)
   * * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or
   * ratio (as an infix operator). For example: `kBy/{email}` or `MiBy/10ms`. * `.` multiplication
   * or composition (as an infix operator). For example: `GBy.d` or `k{watt}.h`. The grammar for a
   * unit is as follows: ``` Expression = Component { "." Component } { "/" Component } ; Component
   * = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; UNIT = TIME-UNIT | STORAGE-UNIT
   * | DATA-UNIT | COUNT-UNIT Annotation = "{" NAME "}" ; ``` Examples: * Request per second: `1/s`
   * or `{requests}/s` * GibiBytes: `GiBy` * GibiBytes * seconds: `GiBy.s`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String unit;

  /**
   * The timeline entries. Each entry has a start time and usage rate. The start time specifies the
   * effective time of the usage rate. The entries must be sorted by start time in an increasing
   * order.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<UsageRateTimelineEntry> usageRateTimelineEntries;

  /**
   * The unit for the usage rate in each timeline entry. If you provide an incorrect unit for an
   * instance, the correct unit is provided in the error message. The supported units are a subset
   * of [The Unified Code for Units of Measure](https://ucum.org/ucum.html) standard: * **Time units
   * (TIME-UNIT)** * `s` second * `min` minute * `h` hour * `d` day * `wk` week * `mo` month * `yr`
   * year * `ms` millisecond * `us` microsecond * `ns` nanosecond * **Basic storage units (BASIC-
   * STORAGE-UNIT)** * `bit` bit * `By` byte * **Count units (COUNT-UNIT)** * `count` count *
   * **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12)
   * * `P` peta (10^15) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40)
   * * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or
   * ratio (as an infix operator). For example: `kBy/{email}` or `MiBy/10ms`. * `.` multiplication
   * or composition (as an infix operator). For example: `GBy.d` or `k{watt}.h`. The grammar for a
   * unit is as follows: ``` Expression = Component { "." Component } { "/" Component } ; Component
   * = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; UNIT = TIME-UNIT | STORAGE-UNIT
   * | DATA-UNIT | COUNT-UNIT Annotation = "{" NAME "}" ; ``` Examples: * Request per second: `1/s`
   * or `{requests}/s` * GibiBytes: `GiBy` * GibiBytes * seconds: `GiBy.s`
   * @return value or {@code null} for none
   */
  public java.lang.String getUnit() {
    return unit;
  }

  /**
   * The unit for the usage rate in each timeline entry. If you provide an incorrect unit for an
   * instance, the correct unit is provided in the error message. The supported units are a subset
   * of [The Unified Code for Units of Measure](https://ucum.org/ucum.html) standard: * **Time units
   * (TIME-UNIT)** * `s` second * `min` minute * `h` hour * `d` day * `wk` week * `mo` month * `yr`
   * year * `ms` millisecond * `us` microsecond * `ns` nanosecond * **Basic storage units (BASIC-
   * STORAGE-UNIT)** * `bit` bit * `By` byte * **Count units (COUNT-UNIT)** * `count` count *
   * **Prefixes (PREFIX)** * `k` kilo (10^3) * `M` mega (10^6) * `G` giga (10^9) * `T` tera (10^12)
   * * `P` peta (10^15) * `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40)
   * * `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: * `/` division or
   * ratio (as an infix operator). For example: `kBy/{email}` or `MiBy/10ms`. * `.` multiplication
   * or composition (as an infix operator). For example: `GBy.d` or `k{watt}.h`. The grammar for a
   * unit is as follows: ``` Expression = Component { "." Component } { "/" Component } ; Component
   * = ( [ PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; UNIT = TIME-UNIT | STORAGE-UNIT
   * | DATA-UNIT | COUNT-UNIT Annotation = "{" NAME "}" ; ``` Examples: * Request per second: `1/s`
   * or `{requests}/s` * GibiBytes: `GiBy` * GibiBytes * seconds: `GiBy.s`
   * @param unit unit or {@code null} for none
   */
  public UsageRateTimeline setUnit(java.lang.String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * The timeline entries. Each entry has a start time and usage rate. The start time specifies the
   * effective time of the usage rate. The entries must be sorted by start time in an increasing
   * order.
   * @return value or {@code null} for none
   */
  public java.util.List<UsageRateTimelineEntry> getUsageRateTimelineEntries() {
    return usageRateTimelineEntries;
  }

  /**
   * The timeline entries. Each entry has a start time and usage rate. The start time specifies the
   * effective time of the usage rate. The entries must be sorted by start time in an increasing
   * order.
   * @param usageRateTimelineEntries usageRateTimelineEntries or {@code null} for none
   */
  public UsageRateTimeline setUsageRateTimelineEntries(java.util.List<UsageRateTimelineEntry> usageRateTimelineEntries) {
    this.usageRateTimelineEntries = usageRateTimelineEntries;
    return this;
  }

  @Override
  public UsageRateTimeline set(String fieldName, Object value) {
    return (UsageRateTimeline) super.set(fieldName, value);
  }

  @Override
  public UsageRateTimeline clone() {
    return (UsageRateTimeline) super.clone();
  }

}
