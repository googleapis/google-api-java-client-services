/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebaseapphosting.v1beta.model;

/**
 * Additional configuration to apply to the Cloud Run [`service`](https://cloud.google.com/run/docs/
 * reference/rest/v2/projects.locations.services#resource:-service).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase App Hosting API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RunConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Maximum number of requests that each Cloud Run instance can receive. By default, each
   * instance can receive Cloud Run's default of up to 80 requests at the same time. Concurrency can
   * be set to any integer value up to 1000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer concurrency;

  /**
   * Optional. Number of CPUs used for each serving instance. By default, cpu defaults to the Cloud
   * Run's default of 1.0. CPU can be set to value 1, 2, 4, 6, or 8 CPUs, and for less than 1 CPU, a
   * value from 0.08 to less than 1.00, in increments of 0.01. If you set a value of less than 1
   * CPU, you must set concurrency to 1, and CPU will only be allocated during request processing.
   * Increasing CPUs limit may require increase in memory limits: - 4 CPUs: at least 2 GiB - 6 CPUs:
   * at least 4 GiB - 8 CPUs: at least 4 GiB
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float cpu;

  /**
   * Optional. Number of Cloud Run instances to maintain at maximum for each revision. By default,
   * each Cloud Run [`service`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locatio
   * ns.services#resource:-service) scales out to Cloud Run's default of a maximum of 100 instances.
   * The maximum max_instances limit is based on your quota. See
   * https://cloud.google.com/run/docs/configuring/max-instances#limits.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxInstances;

  /**
   * Optional. Amount of memory allocated for each serving instance in MiB. By default, memory
   * defaults to the Cloud Run's default where each instance is allocated 512 MiB of memory. Memory
   * can be set to any integer value between 128 to 32768. Increasing memory limit may require
   * increase in CPUs limits: - Over 4 GiB: at least 2 CPUs - Over 8 GiB: at least 4 CPUs - Over 16
   * GiB: at least 6 CPUs - Over 24 GiB: at least 8 CPUs
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer memoryMib;

  /**
   * Optional. Number of Cloud Run instances to maintain at minimum for each Cloud Run Service. By
   * default, there are no minimum. Even if the service splits traffic across multiple revisions,
   * the total number of instances for a service will be capped at this value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minInstances;

  /**
   * Optional. Maximum number of requests that each Cloud Run instance can receive. By default, each
   * instance can receive Cloud Run's default of up to 80 requests at the same time. Concurrency can
   * be set to any integer value up to 1000.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getConcurrency() {
    return concurrency;
  }

  /**
   * Optional. Maximum number of requests that each Cloud Run instance can receive. By default, each
   * instance can receive Cloud Run's default of up to 80 requests at the same time. Concurrency can
   * be set to any integer value up to 1000.
   * @param concurrency concurrency or {@code null} for none
   */
  public RunConfig setConcurrency(java.lang.Integer concurrency) {
    this.concurrency = concurrency;
    return this;
  }

  /**
   * Optional. Number of CPUs used for each serving instance. By default, cpu defaults to the Cloud
   * Run's default of 1.0. CPU can be set to value 1, 2, 4, 6, or 8 CPUs, and for less than 1 CPU, a
   * value from 0.08 to less than 1.00, in increments of 0.01. If you set a value of less than 1
   * CPU, you must set concurrency to 1, and CPU will only be allocated during request processing.
   * Increasing CPUs limit may require increase in memory limits: - 4 CPUs: at least 2 GiB - 6 CPUs:
   * at least 4 GiB - 8 CPUs: at least 4 GiB
   * @return value or {@code null} for none
   */
  public java.lang.Float getCpu() {
    return cpu;
  }

  /**
   * Optional. Number of CPUs used for each serving instance. By default, cpu defaults to the Cloud
   * Run's default of 1.0. CPU can be set to value 1, 2, 4, 6, or 8 CPUs, and for less than 1 CPU, a
   * value from 0.08 to less than 1.00, in increments of 0.01. If you set a value of less than 1
   * CPU, you must set concurrency to 1, and CPU will only be allocated during request processing.
   * Increasing CPUs limit may require increase in memory limits: - 4 CPUs: at least 2 GiB - 6 CPUs:
   * at least 4 GiB - 8 CPUs: at least 4 GiB
   * @param cpu cpu or {@code null} for none
   */
  public RunConfig setCpu(java.lang.Float cpu) {
    this.cpu = cpu;
    return this;
  }

  /**
   * Optional. Number of Cloud Run instances to maintain at maximum for each revision. By default,
   * each Cloud Run [`service`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locatio
   * ns.services#resource:-service) scales out to Cloud Run's default of a maximum of 100 instances.
   * The maximum max_instances limit is based on your quota. See
   * https://cloud.google.com/run/docs/configuring/max-instances#limits.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxInstances() {
    return maxInstances;
  }

  /**
   * Optional. Number of Cloud Run instances to maintain at maximum for each revision. By default,
   * each Cloud Run [`service`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locatio
   * ns.services#resource:-service) scales out to Cloud Run's default of a maximum of 100 instances.
   * The maximum max_instances limit is based on your quota. See
   * https://cloud.google.com/run/docs/configuring/max-instances#limits.
   * @param maxInstances maxInstances or {@code null} for none
   */
  public RunConfig setMaxInstances(java.lang.Integer maxInstances) {
    this.maxInstances = maxInstances;
    return this;
  }

  /**
   * Optional. Amount of memory allocated for each serving instance in MiB. By default, memory
   * defaults to the Cloud Run's default where each instance is allocated 512 MiB of memory. Memory
   * can be set to any integer value between 128 to 32768. Increasing memory limit may require
   * increase in CPUs limits: - Over 4 GiB: at least 2 CPUs - Over 8 GiB: at least 4 CPUs - Over 16
   * GiB: at least 6 CPUs - Over 24 GiB: at least 8 CPUs
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMemoryMib() {
    return memoryMib;
  }

  /**
   * Optional. Amount of memory allocated for each serving instance in MiB. By default, memory
   * defaults to the Cloud Run's default where each instance is allocated 512 MiB of memory. Memory
   * can be set to any integer value between 128 to 32768. Increasing memory limit may require
   * increase in CPUs limits: - Over 4 GiB: at least 2 CPUs - Over 8 GiB: at least 4 CPUs - Over 16
   * GiB: at least 6 CPUs - Over 24 GiB: at least 8 CPUs
   * @param memoryMib memoryMib or {@code null} for none
   */
  public RunConfig setMemoryMib(java.lang.Integer memoryMib) {
    this.memoryMib = memoryMib;
    return this;
  }

  /**
   * Optional. Number of Cloud Run instances to maintain at minimum for each Cloud Run Service. By
   * default, there are no minimum. Even if the service splits traffic across multiple revisions,
   * the total number of instances for a service will be capped at this value.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinInstances() {
    return minInstances;
  }

  /**
   * Optional. Number of Cloud Run instances to maintain at minimum for each Cloud Run Service. By
   * default, there are no minimum. Even if the service splits traffic across multiple revisions,
   * the total number of instances for a service will be capped at this value.
   * @param minInstances minInstances or {@code null} for none
   */
  public RunConfig setMinInstances(java.lang.Integer minInstances) {
    this.minInstances = minInstances;
    return this;
  }

  @Override
  public RunConfig set(String fieldName, Object value) {
    return (RunConfig) super.set(fieldName, value);
  }

  @Override
  public RunConfig clone() {
    return (RunConfig) super.clone();
  }

}
