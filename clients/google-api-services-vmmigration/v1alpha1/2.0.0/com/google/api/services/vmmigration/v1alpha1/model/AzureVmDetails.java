/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vmmigration.v1alpha1.model;

/**
 * AzureVmDetails describes a VM in Azure.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the VM Migration API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AzureVmDetails extends com.google.api.client.json.GenericJson {

  /**
   * The CPU architecture.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String architecture;

  /**
   * The VM Boot Option.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bootOption;

  /**
   * The total size of the storage allocated to the VM in MB.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long committedStorageMb;

  /**
   * The VM's ComputerName.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String computerName;

  /**
   * The number of cpus the VM has.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer cpuCount;

  /**
   * The number of disks the VM has, including OS disk.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer diskCount;

  /**
   * Description of the data disks.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Disk> disks;

  /**
   * The memory size of the VM in MB.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer memoryMb;

  /**
   * Description of the OS.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OSDescription osDescription;

  /**
   * Description of the OS disk.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OSDisk osDisk;

  /**
   * The power state of the VM at the moment list was taken.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String powerState;

  /**
   * The tags of the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> tags;

  /**
   * The VM full path in Azure.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vmId;

  /**
   * VM size as configured in Azure. Determines the VM's hardware spec.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vmSize;

  /**
   * The CPU architecture.
   * @return value or {@code null} for none
   */
  public java.lang.String getArchitecture() {
    return architecture;
  }

  /**
   * The CPU architecture.
   * @param architecture architecture or {@code null} for none
   */
  public AzureVmDetails setArchitecture(java.lang.String architecture) {
    this.architecture = architecture;
    return this;
  }

  /**
   * The VM Boot Option.
   * @return value or {@code null} for none
   */
  public java.lang.String getBootOption() {
    return bootOption;
  }

  /**
   * The VM Boot Option.
   * @param bootOption bootOption or {@code null} for none
   */
  public AzureVmDetails setBootOption(java.lang.String bootOption) {
    this.bootOption = bootOption;
    return this;
  }

  /**
   * The total size of the storage allocated to the VM in MB.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCommittedStorageMb() {
    return committedStorageMb;
  }

  /**
   * The total size of the storage allocated to the VM in MB.
   * @param committedStorageMb committedStorageMb or {@code null} for none
   */
  public AzureVmDetails setCommittedStorageMb(java.lang.Long committedStorageMb) {
    this.committedStorageMb = committedStorageMb;
    return this;
  }

  /**
   * The VM's ComputerName.
   * @return value or {@code null} for none
   */
  public java.lang.String getComputerName() {
    return computerName;
  }

  /**
   * The VM's ComputerName.
   * @param computerName computerName or {@code null} for none
   */
  public AzureVmDetails setComputerName(java.lang.String computerName) {
    this.computerName = computerName;
    return this;
  }

  /**
   * The number of cpus the VM has.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCpuCount() {
    return cpuCount;
  }

  /**
   * The number of cpus the VM has.
   * @param cpuCount cpuCount or {@code null} for none
   */
  public AzureVmDetails setCpuCount(java.lang.Integer cpuCount) {
    this.cpuCount = cpuCount;
    return this;
  }

  /**
   * The number of disks the VM has, including OS disk.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDiskCount() {
    return diskCount;
  }

  /**
   * The number of disks the VM has, including OS disk.
   * @param diskCount diskCount or {@code null} for none
   */
  public AzureVmDetails setDiskCount(java.lang.Integer diskCount) {
    this.diskCount = diskCount;
    return this;
  }

  /**
   * Description of the data disks.
   * @return value or {@code null} for none
   */
  public java.util.List<Disk> getDisks() {
    return disks;
  }

  /**
   * Description of the data disks.
   * @param disks disks or {@code null} for none
   */
  public AzureVmDetails setDisks(java.util.List<Disk> disks) {
    this.disks = disks;
    return this;
  }

  /**
   * The memory size of the VM in MB.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMemoryMb() {
    return memoryMb;
  }

  /**
   * The memory size of the VM in MB.
   * @param memoryMb memoryMb or {@code null} for none
   */
  public AzureVmDetails setMemoryMb(java.lang.Integer memoryMb) {
    this.memoryMb = memoryMb;
    return this;
  }

  /**
   * Description of the OS.
   * @return value or {@code null} for none
   */
  public OSDescription getOsDescription() {
    return osDescription;
  }

  /**
   * Description of the OS.
   * @param osDescription osDescription or {@code null} for none
   */
  public AzureVmDetails setOsDescription(OSDescription osDescription) {
    this.osDescription = osDescription;
    return this;
  }

  /**
   * Description of the OS disk.
   * @return value or {@code null} for none
   */
  public OSDisk getOsDisk() {
    return osDisk;
  }

  /**
   * Description of the OS disk.
   * @param osDisk osDisk or {@code null} for none
   */
  public AzureVmDetails setOsDisk(OSDisk osDisk) {
    this.osDisk = osDisk;
    return this;
  }

  /**
   * The power state of the VM at the moment list was taken.
   * @return value or {@code null} for none
   */
  public java.lang.String getPowerState() {
    return powerState;
  }

  /**
   * The power state of the VM at the moment list was taken.
   * @param powerState powerState or {@code null} for none
   */
  public AzureVmDetails setPowerState(java.lang.String powerState) {
    this.powerState = powerState;
    return this;
  }

  /**
   * The tags of the VM.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getTags() {
    return tags;
  }

  /**
   * The tags of the VM.
   * @param tags tags or {@code null} for none
   */
  public AzureVmDetails setTags(java.util.Map<String, java.lang.String> tags) {
    this.tags = tags;
    return this;
  }

  /**
   * The VM full path in Azure.
   * @return value or {@code null} for none
   */
  public java.lang.String getVmId() {
    return vmId;
  }

  /**
   * The VM full path in Azure.
   * @param vmId vmId or {@code null} for none
   */
  public AzureVmDetails setVmId(java.lang.String vmId) {
    this.vmId = vmId;
    return this;
  }

  /**
   * VM size as configured in Azure. Determines the VM's hardware spec.
   * @return value or {@code null} for none
   */
  public java.lang.String getVmSize() {
    return vmSize;
  }

  /**
   * VM size as configured in Azure. Determines the VM's hardware spec.
   * @param vmSize vmSize or {@code null} for none
   */
  public AzureVmDetails setVmSize(java.lang.String vmSize) {
    this.vmSize = vmSize;
    return this;
  }

  @Override
  public AzureVmDetails set(String fieldName, Object value) {
    return (AzureVmDetails) super.set(fieldName, value);
  }

  @Override
  public AzureVmDetails clone() {
    return (AzureVmDetails) super.clone();
  }

}
