/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Configuration for the response. Next Id: 11
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleAssistantAccessoryV1ResponseConfig extends com.google.api.client.json.GenericJson {

  /**
   * Specifies the current audio mode on the device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAssistantAccessoryV1AudioOutConfig audioOutConfig;

  /**
   * Configuration related to a specific device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAssistantAccessoryV1DeviceConfig deviceConfig;

  /**
   * The client interaction to be sent to Assistant. This is a
   * assistant.embedded.v1.DeviceInteraction message in serialized binary proto format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deviceInteraction;

  /**
   * Device state to pass to the Assistant server to use in calculating the response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAssistantAccessoryV1DeviceState deviceState;

  /**
   * Specifies the initial bytes of TTS audio to send.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer initialAudioBytes;

  /**
   * If true, the server will treat the request as a new conversation and not use state from the
   * prior request. Set this field to true when the conversation should be restarted, such as after
   * a device reboot, or after a significant lapse of time since the prior query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isNewConversation;

  /**
   * Specifies the desired audio sample rate of the output TTS stream in Hz.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer outputSampleRateHz;

  /**
   * Specifies the requested response type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String responseType;

  /**
   * Specifies the desired format to use when server returns a visual screen response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAssistantAccessoryV1ScreenOutConfig screenOutConfig;

  /**
   * Specifies the current audio mode on the device.
   * @return value or {@code null} for none
   */
  public GoogleAssistantAccessoryV1AudioOutConfig getAudioOutConfig() {
    return audioOutConfig;
  }

  /**
   * Specifies the current audio mode on the device.
   * @param audioOutConfig audioOutConfig or {@code null} for none
   */
  public GoogleAssistantAccessoryV1ResponseConfig setAudioOutConfig(GoogleAssistantAccessoryV1AudioOutConfig audioOutConfig) {
    this.audioOutConfig = audioOutConfig;
    return this;
  }

  /**
   * Configuration related to a specific device.
   * @return value or {@code null} for none
   */
  public GoogleAssistantAccessoryV1DeviceConfig getDeviceConfig() {
    return deviceConfig;
  }

  /**
   * Configuration related to a specific device.
   * @param deviceConfig deviceConfig or {@code null} for none
   */
  public GoogleAssistantAccessoryV1ResponseConfig setDeviceConfig(GoogleAssistantAccessoryV1DeviceConfig deviceConfig) {
    this.deviceConfig = deviceConfig;
    return this;
  }

  /**
   * The client interaction to be sent to Assistant. This is a
   * assistant.embedded.v1.DeviceInteraction message in serialized binary proto format.
   * @see #decodeDeviceInteraction()
   * @return value or {@code null} for none
   */
  public java.lang.String getDeviceInteraction() {
    return deviceInteraction;
  }

  /**
   * The client interaction to be sent to Assistant. This is a
   * assistant.embedded.v1.DeviceInteraction message in serialized binary proto format.
   * @see #getDeviceInteraction()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeDeviceInteraction() {
    return com.google.api.client.util.Base64.decodeBase64(deviceInteraction);
  }

  /**
   * The client interaction to be sent to Assistant. This is a
   * assistant.embedded.v1.DeviceInteraction message in serialized binary proto format.
   * @see #encodeDeviceInteraction()
   * @param deviceInteraction deviceInteraction or {@code null} for none
   */
  public GoogleAssistantAccessoryV1ResponseConfig setDeviceInteraction(java.lang.String deviceInteraction) {
    this.deviceInteraction = deviceInteraction;
    return this;
  }

  /**
   * The client interaction to be sent to Assistant. This is a
   * assistant.embedded.v1.DeviceInteraction message in serialized binary proto format.
   * @see #setDeviceInteraction()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public GoogleAssistantAccessoryV1ResponseConfig encodeDeviceInteraction(byte[] deviceInteraction) {
    this.deviceInteraction = com.google.api.client.util.Base64.encodeBase64URLSafeString(deviceInteraction);
    return this;
  }

  /**
   * Device state to pass to the Assistant server to use in calculating the response.
   * @return value or {@code null} for none
   */
  public GoogleAssistantAccessoryV1DeviceState getDeviceState() {
    return deviceState;
  }

  /**
   * Device state to pass to the Assistant server to use in calculating the response.
   * @param deviceState deviceState or {@code null} for none
   */
  public GoogleAssistantAccessoryV1ResponseConfig setDeviceState(GoogleAssistantAccessoryV1DeviceState deviceState) {
    this.deviceState = deviceState;
    return this;
  }

  /**
   * Specifies the initial bytes of TTS audio to send.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getInitialAudioBytes() {
    return initialAudioBytes;
  }

  /**
   * Specifies the initial bytes of TTS audio to send.
   * @param initialAudioBytes initialAudioBytes or {@code null} for none
   */
  public GoogleAssistantAccessoryV1ResponseConfig setInitialAudioBytes(java.lang.Integer initialAudioBytes) {
    this.initialAudioBytes = initialAudioBytes;
    return this;
  }

  /**
   * If true, the server will treat the request as a new conversation and not use state from the
   * prior request. Set this field to true when the conversation should be restarted, such as after
   * a device reboot, or after a significant lapse of time since the prior query.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsNewConversation() {
    return isNewConversation;
  }

  /**
   * If true, the server will treat the request as a new conversation and not use state from the
   * prior request. Set this field to true when the conversation should be restarted, such as after
   * a device reboot, or after a significant lapse of time since the prior query.
   * @param isNewConversation isNewConversation or {@code null} for none
   */
  public GoogleAssistantAccessoryV1ResponseConfig setIsNewConversation(java.lang.Boolean isNewConversation) {
    this.isNewConversation = isNewConversation;
    return this;
  }

  /**
   * Specifies the desired audio sample rate of the output TTS stream in Hz.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOutputSampleRateHz() {
    return outputSampleRateHz;
  }

  /**
   * Specifies the desired audio sample rate of the output TTS stream in Hz.
   * @param outputSampleRateHz outputSampleRateHz or {@code null} for none
   */
  public GoogleAssistantAccessoryV1ResponseConfig setOutputSampleRateHz(java.lang.Integer outputSampleRateHz) {
    this.outputSampleRateHz = outputSampleRateHz;
    return this;
  }

  /**
   * Specifies the requested response type.
   * @return value or {@code null} for none
   */
  public java.lang.String getResponseType() {
    return responseType;
  }

  /**
   * Specifies the requested response type.
   * @param responseType responseType or {@code null} for none
   */
  public GoogleAssistantAccessoryV1ResponseConfig setResponseType(java.lang.String responseType) {
    this.responseType = responseType;
    return this;
  }

  /**
   * Specifies the desired format to use when server returns a visual screen response.
   * @return value or {@code null} for none
   */
  public GoogleAssistantAccessoryV1ScreenOutConfig getScreenOutConfig() {
    return screenOutConfig;
  }

  /**
   * Specifies the desired format to use when server returns a visual screen response.
   * @param screenOutConfig screenOutConfig or {@code null} for none
   */
  public GoogleAssistantAccessoryV1ResponseConfig setScreenOutConfig(GoogleAssistantAccessoryV1ScreenOutConfig screenOutConfig) {
    this.screenOutConfig = screenOutConfig;
    return this;
  }

  @Override
  public GoogleAssistantAccessoryV1ResponseConfig set(String fieldName, Object value) {
    return (GoogleAssistantAccessoryV1ResponseConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleAssistantAccessoryV1ResponseConfig clone() {
    return (GoogleAssistantAccessoryV1ResponseConfig) super.clone();
  }

}
