/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.doubleclickbidmanager.model;

/**
 * Parameters of a query or report.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the DoubleClick Bid Manager API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Parameters extends com.google.api.client.json.GenericJson {

  /**
   * Filters used to match traffic data in your report.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<FilterPair> filters;

  static {
    // hack to force ProGuard to consider FilterPair used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(FilterPair.class);
  }

  /**
   * Data is grouped by the filters listed in this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> groupBys;

  /**
   * Deprecated. This field is no longer in use.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean includeInviteData;

  /**
   * Metrics to include as columns in your report.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> metrics;

  /**
   * Report type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Filters used to match traffic data in your report.
   * @return value or {@code null} for none
   */
  public java.util.List<FilterPair> getFilters() {
    return filters;
  }

  /**
   * Filters used to match traffic data in your report.
   * @param filters filters or {@code null} for none
   */
  public Parameters setFilters(java.util.List<FilterPair> filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Data is grouped by the filters listed in this field.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getGroupBys() {
    return groupBys;
  }

  /**
   * Data is grouped by the filters listed in this field.
   * @param groupBys groupBys or {@code null} for none
   */
  public Parameters setGroupBys(java.util.List<java.lang.String> groupBys) {
    this.groupBys = groupBys;
    return this;
  }

  /**
   * Deprecated. This field is no longer in use.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIncludeInviteData() {
    return includeInviteData;
  }

  /**
   * Deprecated. This field is no longer in use.
   * @param includeInviteData includeInviteData or {@code null} for none
   */
  public Parameters setIncludeInviteData(java.lang.Boolean includeInviteData) {
    this.includeInviteData = includeInviteData;
    return this;
  }

  /**
   * Metrics to include as columns in your report.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMetrics() {
    return metrics;
  }

  /**
   * Metrics to include as columns in your report.
   * @param metrics metrics or {@code null} for none
   */
  public Parameters setMetrics(java.util.List<java.lang.String> metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Report type.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Report type.
   * @param type type or {@code null} for none
   */
  public Parameters setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public Parameters set(String fieldName, Object value) {
    return (Parameters) super.set(fieldName, value);
  }

  @Override
  public Parameters clone() {
    return (Parameters) super.clone();
  }

}
