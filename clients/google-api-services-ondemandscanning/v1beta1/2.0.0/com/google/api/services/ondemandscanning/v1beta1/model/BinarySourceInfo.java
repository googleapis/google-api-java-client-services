/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.ondemandscanning.v1beta1.model;

/**
 * Model definition for BinarySourceInfo.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the On-Demand Scanning API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BinarySourceInfo extends com.google.api.client.json.GenericJson {

  /**
   * The binary package. This is significant when the source is different than the binary itself.
   * Historically if they've differed, we've stored the name of the source and its version in the
   * package/version fields, but we should also store the binary package info, as that's what's
   * actually installed. See b/175908657#comment15.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PackageVersion binaryVersion;

  /**
   * The source package. Similar to the above, this is significant when the source is different than
   * the binary itself. Since the top-level package/version fields are based on an if/else, we need
   * a separate field for both binary and source if we want to know definitively where the data is
   * coming from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PackageVersion sourceVersion;

  /**
   * The binary package. This is significant when the source is different than the binary itself.
   * Historically if they've differed, we've stored the name of the source and its version in the
   * package/version fields, but we should also store the binary package info, as that's what's
   * actually installed. See b/175908657#comment15.
   * @return value or {@code null} for none
   */
  public PackageVersion getBinaryVersion() {
    return binaryVersion;
  }

  /**
   * The binary package. This is significant when the source is different than the binary itself.
   * Historically if they've differed, we've stored the name of the source and its version in the
   * package/version fields, but we should also store the binary package info, as that's what's
   * actually installed. See b/175908657#comment15.
   * @param binaryVersion binaryVersion or {@code null} for none
   */
  public BinarySourceInfo setBinaryVersion(PackageVersion binaryVersion) {
    this.binaryVersion = binaryVersion;
    return this;
  }

  /**
   * The source package. Similar to the above, this is significant when the source is different than
   * the binary itself. Since the top-level package/version fields are based on an if/else, we need
   * a separate field for both binary and source if we want to know definitively where the data is
   * coming from.
   * @return value or {@code null} for none
   */
  public PackageVersion getSourceVersion() {
    return sourceVersion;
  }

  /**
   * The source package. Similar to the above, this is significant when the source is different than
   * the binary itself. Since the top-level package/version fields are based on an if/else, we need
   * a separate field for both binary and source if we want to know definitively where the data is
   * coming from.
   * @param sourceVersion sourceVersion or {@code null} for none
   */
  public BinarySourceInfo setSourceVersion(PackageVersion sourceVersion) {
    this.sourceVersion = sourceVersion;
    return this;
  }

  @Override
  public BinarySourceInfo set(String fieldName, Object value) {
    return (BinarySourceInfo) super.set(fieldName, value);
  }

  @Override
  public BinarySourceInfo clone() {
    return (BinarySourceInfo) super.clone();
  }

}
