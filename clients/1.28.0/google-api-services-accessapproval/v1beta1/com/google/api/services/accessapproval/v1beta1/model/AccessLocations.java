/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.accessapproval.v1beta1.model;

/**
 * Home office and physical location of the principal.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Access Approval API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AccessLocations extends com.google.api.client.json.GenericJson {

  /**
   * The "home office" location of the principal. A two-letter country code (ISO 3166-1 alpha-2),
   * such as "US", "DE" or "GB" or a region code. In some limited situations Google systems may
   * refer refer to a region code instead of a country code. Possible Region Codes:
   *
   *   ASI: Asia   EUR: Europe   OCE: Oceania   AFR: Africa   NAM: North America   SAM: South
   * America   ANT: Antarctica   ANY: Any location
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String principalOfficeCountry;

  /**
   * Physical location of the principal at the time of the access. A two-letter country code (ISO
   * 3166-1 alpha-2), such as "US", "DE" or "GB" or a region code. In some limited situations Google
   * systems may refer refer to a region code instead of a country code. Possible Region Codes:
   *
   *   ASI: Asia   EUR: Europe   OCE: Oceania   AFR: Africa   NAM: North America   SAM: South
   * America   ANT: Antarctica   ANY: Any location
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String principalPhysicalLocationCountry;

  /**
   * The "home office" location of the principal. A two-letter country code (ISO 3166-1 alpha-2),
   * such as "US", "DE" or "GB" or a region code. In some limited situations Google systems may
   * refer refer to a region code instead of a country code. Possible Region Codes:
   *
   *   ASI: Asia   EUR: Europe   OCE: Oceania   AFR: Africa   NAM: North America   SAM: South
   * America   ANT: Antarctica   ANY: Any location
   * @return value or {@code null} for none
   */
  public java.lang.String getPrincipalOfficeCountry() {
    return principalOfficeCountry;
  }

  /**
   * The "home office" location of the principal. A two-letter country code (ISO 3166-1 alpha-2),
   * such as "US", "DE" or "GB" or a region code. In some limited situations Google systems may
   * refer refer to a region code instead of a country code. Possible Region Codes:
   *
   *   ASI: Asia   EUR: Europe   OCE: Oceania   AFR: Africa   NAM: North America   SAM: South
   * America   ANT: Antarctica   ANY: Any location
   * @param principalOfficeCountry principalOfficeCountry or {@code null} for none
   */
  public AccessLocations setPrincipalOfficeCountry(java.lang.String principalOfficeCountry) {
    this.principalOfficeCountry = principalOfficeCountry;
    return this;
  }

  /**
   * Physical location of the principal at the time of the access. A two-letter country code (ISO
   * 3166-1 alpha-2), such as "US", "DE" or "GB" or a region code. In some limited situations Google
   * systems may refer refer to a region code instead of a country code. Possible Region Codes:
   *
   *   ASI: Asia   EUR: Europe   OCE: Oceania   AFR: Africa   NAM: North America   SAM: South
   * America   ANT: Antarctica   ANY: Any location
   * @return value or {@code null} for none
   */
  public java.lang.String getPrincipalPhysicalLocationCountry() {
    return principalPhysicalLocationCountry;
  }

  /**
   * Physical location of the principal at the time of the access. A two-letter country code (ISO
   * 3166-1 alpha-2), such as "US", "DE" or "GB" or a region code. In some limited situations Google
   * systems may refer refer to a region code instead of a country code. Possible Region Codes:
   *
   *   ASI: Asia   EUR: Europe   OCE: Oceania   AFR: Africa   NAM: North America   SAM: South
   * America   ANT: Antarctica   ANY: Any location
   * @param principalPhysicalLocationCountry principalPhysicalLocationCountry or {@code null} for none
   */
  public AccessLocations setPrincipalPhysicalLocationCountry(java.lang.String principalPhysicalLocationCountry) {
    this.principalPhysicalLocationCountry = principalPhysicalLocationCountry;
    return this;
  }

  @Override
  public AccessLocations set(String fieldName, Object value) {
    return (AccessLocations) super.set(fieldName, value);
  }

  @Override
  public AccessLocations clone() {
    return (AccessLocations) super.clone();
  }

}
