/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Canonical representation of query sensitivites. See go/sensitive-intents for more details.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KnowledgeAnswersSensitivitySensitivity extends com.google.api.client.json.GenericJson {

  /**
   * Used to annotate the provenace of cross-account personal data. See go/cross-account-
   * understanding. Sensitivity could be annotated at query, intent, and argument levels. Query and
   * intent could have data from multiple accounts, so this field is repeated. A sensitive
   * knowledge_context.PreviousQuery might be dropped to prevent leaking cross-account data via
   * Genie rewrite. For arguments, the best practice is to not blend multi-account data, and this
   * field should be treated as singular to make ownership clear. When publishing attentional
   * entities, contextual NLU might drop an argument that contains data from a different account for
   * data protection. Mixing multi-account data in one argument will cause data from the primary
   * account to be dropped altogether, which is an unnecessary quality loss.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<QualityQrewriteAccountProvenance> accountProvenance;

  /**
   * Instruction of handling sensitive intent/argument data. Can be specified in Intent Catalog.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private KnowledgeAnswersSensitivityInstruction instruction;

  /**
   * This should be systematically added without requiring the feature developers to add a source.
   * This is for debug purpose as to whether the Sensitivity's trace/path included any of landmark
   * code path helpful for tracing back the sensitivity sources. One should add a new source when
   * one sees fits. It's chronological order as to which source is added first. One should not
   * manually add a source. The same source can be repeated if the Sensitivity object went through
   * the same code path twice.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> source;

  /**
   * Sensitivity type. See the enum definition below.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Used to annotate the provenace of cross-account personal data. See go/cross-account-
   * understanding. Sensitivity could be annotated at query, intent, and argument levels. Query and
   * intent could have data from multiple accounts, so this field is repeated. A sensitive
   * knowledge_context.PreviousQuery might be dropped to prevent leaking cross-account data via
   * Genie rewrite. For arguments, the best practice is to not blend multi-account data, and this
   * field should be treated as singular to make ownership clear. When publishing attentional
   * entities, contextual NLU might drop an argument that contains data from a different account for
   * data protection. Mixing multi-account data in one argument will cause data from the primary
   * account to be dropped altogether, which is an unnecessary quality loss.
   * @return value or {@code null} for none
   */
  public java.util.List<QualityQrewriteAccountProvenance> getAccountProvenance() {
    return accountProvenance;
  }

  /**
   * Used to annotate the provenace of cross-account personal data. See go/cross-account-
   * understanding. Sensitivity could be annotated at query, intent, and argument levels. Query and
   * intent could have data from multiple accounts, so this field is repeated. A sensitive
   * knowledge_context.PreviousQuery might be dropped to prevent leaking cross-account data via
   * Genie rewrite. For arguments, the best practice is to not blend multi-account data, and this
   * field should be treated as singular to make ownership clear. When publishing attentional
   * entities, contextual NLU might drop an argument that contains data from a different account for
   * data protection. Mixing multi-account data in one argument will cause data from the primary
   * account to be dropped altogether, which is an unnecessary quality loss.
   * @param accountProvenance accountProvenance or {@code null} for none
   */
  public KnowledgeAnswersSensitivitySensitivity setAccountProvenance(java.util.List<QualityQrewriteAccountProvenance> accountProvenance) {
    this.accountProvenance = accountProvenance;
    return this;
  }

  /**
   * Instruction of handling sensitive intent/argument data. Can be specified in Intent Catalog.
   * @return value or {@code null} for none
   */
  public KnowledgeAnswersSensitivityInstruction getInstruction() {
    return instruction;
  }

  /**
   * Instruction of handling sensitive intent/argument data. Can be specified in Intent Catalog.
   * @param instruction instruction or {@code null} for none
   */
  public KnowledgeAnswersSensitivitySensitivity setInstruction(KnowledgeAnswersSensitivityInstruction instruction) {
    this.instruction = instruction;
    return this;
  }

  /**
   * This should be systematically added without requiring the feature developers to add a source.
   * This is for debug purpose as to whether the Sensitivity's trace/path included any of landmark
   * code path helpful for tracing back the sensitivity sources. One should add a new source when
   * one sees fits. It's chronological order as to which source is added first. One should not
   * manually add a source. The same source can be repeated if the Sensitivity object went through
   * the same code path twice.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSource() {
    return source;
  }

  /**
   * This should be systematically added without requiring the feature developers to add a source.
   * This is for debug purpose as to whether the Sensitivity's trace/path included any of landmark
   * code path helpful for tracing back the sensitivity sources. One should add a new source when
   * one sees fits. It's chronological order as to which source is added first. One should not
   * manually add a source. The same source can be repeated if the Sensitivity object went through
   * the same code path twice.
   * @param source source or {@code null} for none
   */
  public KnowledgeAnswersSensitivitySensitivity setSource(java.util.List<java.lang.String> source) {
    this.source = source;
    return this;
  }

  /**
   * Sensitivity type. See the enum definition below.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Sensitivity type. See the enum definition below.
   * @param type type or {@code null} for none
   */
  public KnowledgeAnswersSensitivitySensitivity setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public KnowledgeAnswersSensitivitySensitivity set(String fieldName, Object value) {
    return (KnowledgeAnswersSensitivitySensitivity) super.set(fieldName, value);
  }

  @Override
  public KnowledgeAnswersSensitivitySensitivity clone() {
    return (KnowledgeAnswersSensitivitySensitivity) super.clone();
  }

}
