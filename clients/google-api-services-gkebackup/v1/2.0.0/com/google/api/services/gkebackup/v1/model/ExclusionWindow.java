/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.gkebackup.v1.model;

/**
 * Defines a time window during which no backup should happen. All time and date are in UTC.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Backup for GKE API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ExclusionWindow extends com.google.api.client.json.GenericJson {

  /**
   * The exclusion window occurs every day if set to "True". Specifying this field to "False" is an
   * error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean daily;

  /**
   * The exclusion window occurs on these days of each week in UTC.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DayOfWeekList daysOfWeek;

  /**
   * Required. Specifies duration of the window. Restrictions for duration based on the recurrence
   * type to allow some time for backup to happen: - single_occurrence_date: no restriction, but UI
   * may warn about this when duration >= target RPO - daily window: duration < 24 hours - weekly
   * window: - days of week includes all seven days of a week: duration < 24 hours - all other
   * weekly window: duration < 168 hours (i.e., 24 * 7 hours)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String duration;

  /**
   * No recurrence. The exclusion window occurs only once and on this date in UTC.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Date singleOccurrenceDate;

  /**
   * Required. Specifies the start time of the window using time of the day in UTC.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TimeOfDay startTime;

  /**
   * The exclusion window occurs every day if set to "True". Specifying this field to "False" is an
   * error.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDaily() {
    return daily;
  }

  /**
   * The exclusion window occurs every day if set to "True". Specifying this field to "False" is an
   * error.
   * @param daily daily or {@code null} for none
   */
  public ExclusionWindow setDaily(java.lang.Boolean daily) {
    this.daily = daily;
    return this;
  }

  /**
   * The exclusion window occurs on these days of each week in UTC.
   * @return value or {@code null} for none
   */
  public DayOfWeekList getDaysOfWeek() {
    return daysOfWeek;
  }

  /**
   * The exclusion window occurs on these days of each week in UTC.
   * @param daysOfWeek daysOfWeek or {@code null} for none
   */
  public ExclusionWindow setDaysOfWeek(DayOfWeekList daysOfWeek) {
    this.daysOfWeek = daysOfWeek;
    return this;
  }

  /**
   * Required. Specifies duration of the window. Restrictions for duration based on the recurrence
   * type to allow some time for backup to happen: - single_occurrence_date: no restriction, but UI
   * may warn about this when duration >= target RPO - daily window: duration < 24 hours - weekly
   * window: - days of week includes all seven days of a week: duration < 24 hours - all other
   * weekly window: duration < 168 hours (i.e., 24 * 7 hours)
   * @return value or {@code null} for none
   */
  public String getDuration() {
    return duration;
  }

  /**
   * Required. Specifies duration of the window. Restrictions for duration based on the recurrence
   * type to allow some time for backup to happen: - single_occurrence_date: no restriction, but UI
   * may warn about this when duration >= target RPO - daily window: duration < 24 hours - weekly
   * window: - days of week includes all seven days of a week: duration < 24 hours - all other
   * weekly window: duration < 168 hours (i.e., 24 * 7 hours)
   * @param duration duration or {@code null} for none
   */
  public ExclusionWindow setDuration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * No recurrence. The exclusion window occurs only once and on this date in UTC.
   * @return value or {@code null} for none
   */
  public Date getSingleOccurrenceDate() {
    return singleOccurrenceDate;
  }

  /**
   * No recurrence. The exclusion window occurs only once and on this date in UTC.
   * @param singleOccurrenceDate singleOccurrenceDate or {@code null} for none
   */
  public ExclusionWindow setSingleOccurrenceDate(Date singleOccurrenceDate) {
    this.singleOccurrenceDate = singleOccurrenceDate;
    return this;
  }

  /**
   * Required. Specifies the start time of the window using time of the day in UTC.
   * @return value or {@code null} for none
   */
  public TimeOfDay getStartTime() {
    return startTime;
  }

  /**
   * Required. Specifies the start time of the window using time of the day in UTC.
   * @param startTime startTime or {@code null} for none
   */
  public ExclusionWindow setStartTime(TimeOfDay startTime) {
    this.startTime = startTime;
    return this;
  }

  @Override
  public ExclusionWindow set(String fieldName, Object value) {
    return (ExclusionWindow) super.set(fieldName, value);
  }

  @Override
  public ExclusionWindow clone() {
    return (ExclusionWindow) super.clone();
  }

}
