/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.netapp.v1.model;

/**
 * TransferStats reports all statistics related to replication transfer.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the NetApp API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TransferStats extends com.google.api.client.json.GenericJson {

  /**
   * Lag duration indicates the duration by which Destination region volume content lags behind the
   * primary region volume content.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lagDuration;

  /**
   * Last transfer size in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long lastTransferBytes;

  /**
   * Time taken during last transfer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lastTransferDuration;

  /**
   * Time when last transfer completed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lastTransferEndTime;

  /**
   * A message describing the cause of the last transfer failure.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lastTransferError;

  /**
   * Cumulative time taken across all transfers for the replication relationship.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String totalTransferDuration;

  /**
   * Cumulative bytes trasferred so far for the replication relatinonship.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long transferBytes;

  /**
   * Time when progress was updated last.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Lag duration indicates the duration by which Destination region volume content lags behind the
   * primary region volume content.
   * @return value or {@code null} for none
   */
  public String getLagDuration() {
    return lagDuration;
  }

  /**
   * Lag duration indicates the duration by which Destination region volume content lags behind the
   * primary region volume content.
   * @param lagDuration lagDuration or {@code null} for none
   */
  public TransferStats setLagDuration(String lagDuration) {
    this.lagDuration = lagDuration;
    return this;
  }

  /**
   * Last transfer size in bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Long getLastTransferBytes() {
    return lastTransferBytes;
  }

  /**
   * Last transfer size in bytes.
   * @param lastTransferBytes lastTransferBytes or {@code null} for none
   */
  public TransferStats setLastTransferBytes(java.lang.Long lastTransferBytes) {
    this.lastTransferBytes = lastTransferBytes;
    return this;
  }

  /**
   * Time taken during last transfer.
   * @return value or {@code null} for none
   */
  public String getLastTransferDuration() {
    return lastTransferDuration;
  }

  /**
   * Time taken during last transfer.
   * @param lastTransferDuration lastTransferDuration or {@code null} for none
   */
  public TransferStats setLastTransferDuration(String lastTransferDuration) {
    this.lastTransferDuration = lastTransferDuration;
    return this;
  }

  /**
   * Time when last transfer completed.
   * @return value or {@code null} for none
   */
  public String getLastTransferEndTime() {
    return lastTransferEndTime;
  }

  /**
   * Time when last transfer completed.
   * @param lastTransferEndTime lastTransferEndTime or {@code null} for none
   */
  public TransferStats setLastTransferEndTime(String lastTransferEndTime) {
    this.lastTransferEndTime = lastTransferEndTime;
    return this;
  }

  /**
   * A message describing the cause of the last transfer failure.
   * @return value or {@code null} for none
   */
  public java.lang.String getLastTransferError() {
    return lastTransferError;
  }

  /**
   * A message describing the cause of the last transfer failure.
   * @param lastTransferError lastTransferError or {@code null} for none
   */
  public TransferStats setLastTransferError(java.lang.String lastTransferError) {
    this.lastTransferError = lastTransferError;
    return this;
  }

  /**
   * Cumulative time taken across all transfers for the replication relationship.
   * @return value or {@code null} for none
   */
  public String getTotalTransferDuration() {
    return totalTransferDuration;
  }

  /**
   * Cumulative time taken across all transfers for the replication relationship.
   * @param totalTransferDuration totalTransferDuration or {@code null} for none
   */
  public TransferStats setTotalTransferDuration(String totalTransferDuration) {
    this.totalTransferDuration = totalTransferDuration;
    return this;
  }

  /**
   * Cumulative bytes trasferred so far for the replication relatinonship.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTransferBytes() {
    return transferBytes;
  }

  /**
   * Cumulative bytes trasferred so far for the replication relatinonship.
   * @param transferBytes transferBytes or {@code null} for none
   */
  public TransferStats setTransferBytes(java.lang.Long transferBytes) {
    this.transferBytes = transferBytes;
    return this;
  }

  /**
   * Time when progress was updated last.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Time when progress was updated last.
   * @param updateTime updateTime or {@code null} for none
   */
  public TransferStats setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public TransferStats set(String fieldName, Object value) {
    return (TransferStats) super.set(fieldName, value);
  }

  @Override
  public TransferStats clone() {
    return (TransferStats) super.clone();
  }

}
