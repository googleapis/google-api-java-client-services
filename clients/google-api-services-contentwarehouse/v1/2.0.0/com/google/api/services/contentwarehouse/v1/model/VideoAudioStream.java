/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Next tag: 10
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoAudioStream extends com.google.api.client.json.GenericJson {

  /**
   * Audio bitrate in bits/s.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long bitrate;

  /**
   * Number of audio channels.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer channels;

  /**
   * Audio codec ID. Uses the numeric value corresponding to the CodecId enum object, in order to
   * avoid the dependency on vsi/videostreaminfo.proto.
   * http://cs/symbol:CodecId%20f:google3/video/vidproc/vsi/videostreaminfo.proto
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer codecId;

  /**
   * Content type of the stream. Only populated with valid "acont" xtag values at the moment.
   * Supported acont xtag values can be found in google3/video/storage/common/xtag_validation.cc.
   * Examples: "original", "dubbed", "descriptive", "commentary", etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String contentType;

  /**
   * Language, examples: "eng", "en", "enG", etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String language;

  /**
   * Audio length, in seconds. This value is derived from metadata in the source video, and often
   * differs from the actual duration of any given transcode. In videos without valid timestamps,
   * this value is not calculable, and is reported as zero.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double lengthSec;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float loudness1770Lkfs;

  /**
   * Audio sample rate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long sampleRate;

  /**
   * Index of the stream in the file, 0-based.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long streamIndex;

  /**
   * Audio bitrate in bits/s.
   * @return value or {@code null} for none
   */
  public java.lang.Long getBitrate() {
    return bitrate;
  }

  /**
   * Audio bitrate in bits/s.
   * @param bitrate bitrate or {@code null} for none
   */
  public VideoAudioStream setBitrate(java.lang.Long bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * Number of audio channels.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getChannels() {
    return channels;
  }

  /**
   * Number of audio channels.
   * @param channels channels or {@code null} for none
   */
  public VideoAudioStream setChannels(java.lang.Integer channels) {
    this.channels = channels;
    return this;
  }

  /**
   * Audio codec ID. Uses the numeric value corresponding to the CodecId enum object, in order to
   * avoid the dependency on vsi/videostreaminfo.proto.
   * http://cs/symbol:CodecId%20f:google3/video/vidproc/vsi/videostreaminfo.proto
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCodecId() {
    return codecId;
  }

  /**
   * Audio codec ID. Uses the numeric value corresponding to the CodecId enum object, in order to
   * avoid the dependency on vsi/videostreaminfo.proto.
   * http://cs/symbol:CodecId%20f:google3/video/vidproc/vsi/videostreaminfo.proto
   * @param codecId codecId or {@code null} for none
   */
  public VideoAudioStream setCodecId(java.lang.Integer codecId) {
    this.codecId = codecId;
    return this;
  }

  /**
   * Content type of the stream. Only populated with valid "acont" xtag values at the moment.
   * Supported acont xtag values can be found in google3/video/storage/common/xtag_validation.cc.
   * Examples: "original", "dubbed", "descriptive", "commentary", etc.
   * @return value or {@code null} for none
   */
  public java.lang.String getContentType() {
    return contentType;
  }

  /**
   * Content type of the stream. Only populated with valid "acont" xtag values at the moment.
   * Supported acont xtag values can be found in google3/video/storage/common/xtag_validation.cc.
   * Examples: "original", "dubbed", "descriptive", "commentary", etc.
   * @param contentType contentType or {@code null} for none
   */
  public VideoAudioStream setContentType(java.lang.String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Language, examples: "eng", "en", "enG", etc.
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguage() {
    return language;
  }

  /**
   * Language, examples: "eng", "en", "enG", etc.
   * @param language language or {@code null} for none
   */
  public VideoAudioStream setLanguage(java.lang.String language) {
    this.language = language;
    return this;
  }

  /**
   * Audio length, in seconds. This value is derived from metadata in the source video, and often
   * differs from the actual duration of any given transcode. In videos without valid timestamps,
   * this value is not calculable, and is reported as zero.
   * @return value or {@code null} for none
   */
  public java.lang.Double getLengthSec() {
    return lengthSec;
  }

  /**
   * Audio length, in seconds. This value is derived from metadata in the source video, and often
   * differs from the actual duration of any given transcode. In videos without valid timestamps,
   * this value is not calculable, and is reported as zero.
   * @param lengthSec lengthSec or {@code null} for none
   */
  public VideoAudioStream setLengthSec(java.lang.Double lengthSec) {
    this.lengthSec = lengthSec;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getLoudness1770Lkfs() {
    return loudness1770Lkfs;
  }

  /**
   * @param loudness1770Lkfs loudness1770Lkfs or {@code null} for none
   */
  public VideoAudioStream setLoudness1770Lkfs(java.lang.Float loudness1770Lkfs) {
    this.loudness1770Lkfs = loudness1770Lkfs;
    return this;
  }

  /**
   * Audio sample rate.
   * @return value or {@code null} for none
   */
  public java.lang.Long getSampleRate() {
    return sampleRate;
  }

  /**
   * Audio sample rate.
   * @param sampleRate sampleRate or {@code null} for none
   */
  public VideoAudioStream setSampleRate(java.lang.Long sampleRate) {
    this.sampleRate = sampleRate;
    return this;
  }

  /**
   * Index of the stream in the file, 0-based.
   * @return value or {@code null} for none
   */
  public java.lang.Long getStreamIndex() {
    return streamIndex;
  }

  /**
   * Index of the stream in the file, 0-based.
   * @param streamIndex streamIndex or {@code null} for none
   */
  public VideoAudioStream setStreamIndex(java.lang.Long streamIndex) {
    this.streamIndex = streamIndex;
    return this;
  }

  @Override
  public VideoAudioStream set(String fieldName, Object value) {
    return (VideoAudioStream) super.set(fieldName, value);
  }

  @Override
  public VideoAudioStream clone() {
    return (VideoAudioStream) super.clone();
  }

}
