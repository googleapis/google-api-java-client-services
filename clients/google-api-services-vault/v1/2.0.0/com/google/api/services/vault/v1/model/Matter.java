/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vault.v1.model;

/**
 * Represents a matter. To work with Vault resources, the account must have the [required Vault
 * privileges] (https://support.google.com/vault/answer/2799699) and access to the matter. To access
 * a matter, the account must have created the matter, have the matter shared with them, or have the
 * **View All Matters** privilege.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Vault API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Matter extends com.google.api.client.json.GenericJson {

  /**
   * An optional description for the matter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * The matter ID, which is generated by the server. Leave blank when creating a matter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String matterId;

  /**
   * Lists the users and their permission for the matter. Currently there is no programmer defined
   * limit on the number of permissions a matter can have.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<MatterPermission> matterPermissions;

  /**
   * The name of the matter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The state of the matter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * An optional description for the matter.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * An optional description for the matter.
   * @param description description or {@code null} for none
   */
  public Matter setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * The matter ID, which is generated by the server. Leave blank when creating a matter.
   * @return value or {@code null} for none
   */
  public java.lang.String getMatterId() {
    return matterId;
  }

  /**
   * The matter ID, which is generated by the server. Leave blank when creating a matter.
   * @param matterId matterId or {@code null} for none
   */
  public Matter setMatterId(java.lang.String matterId) {
    this.matterId = matterId;
    return this;
  }

  /**
   * Lists the users and their permission for the matter. Currently there is no programmer defined
   * limit on the number of permissions a matter can have.
   * @return value or {@code null} for none
   */
  public java.util.List<MatterPermission> getMatterPermissions() {
    return matterPermissions;
  }

  /**
   * Lists the users and their permission for the matter. Currently there is no programmer defined
   * limit on the number of permissions a matter can have.
   * @param matterPermissions matterPermissions or {@code null} for none
   */
  public Matter setMatterPermissions(java.util.List<MatterPermission> matterPermissions) {
    this.matterPermissions = matterPermissions;
    return this;
  }

  /**
   * The name of the matter.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name of the matter.
   * @param name name or {@code null} for none
   */
  public Matter setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The state of the matter.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * The state of the matter.
   * @param state state or {@code null} for none
   */
  public Matter setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  @Override
  public Matter set(String fieldName, Object value) {
    return (Matter) super.set(fieldName, value);
  }

  @Override
  public Matter clone() {
    return (Matter) super.clone();
  }

}
