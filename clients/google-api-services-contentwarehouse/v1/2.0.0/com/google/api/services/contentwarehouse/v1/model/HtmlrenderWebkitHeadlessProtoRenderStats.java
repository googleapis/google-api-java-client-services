/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Next id: 17.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HtmlrenderWebkitHeadlessProtoRenderStats extends com.google.api.client.json.GenericJson {

  /**
   * Deliberately non-named fine timing stats. These are all related to each other and unrelated to
   * other timing stats in this message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoAnonTimingStatPair> anonRenderFineTimingStats;

  static {
    // hack to force ProGuard to consider HtmlrenderWebkitHeadlessProtoAnonTimingStatPair used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(HtmlrenderWebkitHeadlessProtoAnonTimingStatPair.class);
  }

  /**
   * Any messages logged by the renderer to the console. Note that we capture a subset of the
   * messages logged by the renderer here to avoid explosion.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoConsoleLogEntry> consoleLogEntry;

  static {
    // hack to force ProGuard to consider HtmlrenderWebkitHeadlessProtoConsoleLogEntry used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(HtmlrenderWebkitHeadlessProtoConsoleLogEntry.class);
  }

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoRenderStatsCounter> counter;

  /**
   * Time to build document and render tree response data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer documentBuildTimeMsec;

  /**
   * Number of dropped log messages. Since we capture only a subset of the messages in
   * console_log_entry this field is included just so that the consumers can get an idea of how many
   * actual attempts were made by the renderer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer droppedLogEntryCount;

  /**
   * Image encoding (e.g. raw -> PNG) time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer imageEncodingTimeMsec;

  /**
   * Image scaling time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer imageScalingTimeMsec;

  /**
   * Time from starting render to document finished loading. This includes all fetches, parsing,
   * decoding, running JavaScript, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer layoutTimeMsec;

  /**
   * Time required to paint a document into our buffer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer paintTimeMsec;

  /**
   * Total cost this render spent running and RPC cost in milliGCUs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer renderCostMgcu;

  /**
   * Render engine used to render this document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String renderEngine;

  /**
   * Total CPU time this render spent running in milliseconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer renderRunningTimeMsec;

  /**
   * The CL from which the render engine was built.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long renderServerBaselineCl;

  /**
   * Total wall time taken to render a document in milliseconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer renderTimeMsec;

  /**
   * Total time spent in the sandbox in milliseconds. This time includes all phases measured
   * individually below.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sandboxRenderTimeMsec;

  /**
   * Deliberately non-named fine timing stats. These are all related to each other and unrelated to
   * other timing stats in this message.
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoAnonTimingStatPair> getAnonRenderFineTimingStats() {
    return anonRenderFineTimingStats;
  }

  /**
   * Deliberately non-named fine timing stats. These are all related to each other and unrelated to
   * other timing stats in this message.
   * @param anonRenderFineTimingStats anonRenderFineTimingStats or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setAnonRenderFineTimingStats(java.util.List<HtmlrenderWebkitHeadlessProtoAnonTimingStatPair> anonRenderFineTimingStats) {
    this.anonRenderFineTimingStats = anonRenderFineTimingStats;
    return this;
  }

  /**
   * Any messages logged by the renderer to the console. Note that we capture a subset of the
   * messages logged by the renderer here to avoid explosion.
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoConsoleLogEntry> getConsoleLogEntry() {
    return consoleLogEntry;
  }

  /**
   * Any messages logged by the renderer to the console. Note that we capture a subset of the
   * messages logged by the renderer here to avoid explosion.
   * @param consoleLogEntry consoleLogEntry or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setConsoleLogEntry(java.util.List<HtmlrenderWebkitHeadlessProtoConsoleLogEntry> consoleLogEntry) {
    this.consoleLogEntry = consoleLogEntry;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoRenderStatsCounter> getCounter() {
    return counter;
  }

  /**
   * @param counter counter or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setCounter(java.util.List<HtmlrenderWebkitHeadlessProtoRenderStatsCounter> counter) {
    this.counter = counter;
    return this;
  }

  /**
   * Time to build document and render tree response data.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDocumentBuildTimeMsec() {
    return documentBuildTimeMsec;
  }

  /**
   * Time to build document and render tree response data.
   * @param documentBuildTimeMsec documentBuildTimeMsec or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setDocumentBuildTimeMsec(java.lang.Integer documentBuildTimeMsec) {
    this.documentBuildTimeMsec = documentBuildTimeMsec;
    return this;
  }

  /**
   * Number of dropped log messages. Since we capture only a subset of the messages in
   * console_log_entry this field is included just so that the consumers can get an idea of how many
   * actual attempts were made by the renderer.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDroppedLogEntryCount() {
    return droppedLogEntryCount;
  }

  /**
   * Number of dropped log messages. Since we capture only a subset of the messages in
   * console_log_entry this field is included just so that the consumers can get an idea of how many
   * actual attempts were made by the renderer.
   * @param droppedLogEntryCount droppedLogEntryCount or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setDroppedLogEntryCount(java.lang.Integer droppedLogEntryCount) {
    this.droppedLogEntryCount = droppedLogEntryCount;
    return this;
  }

  /**
   * Image encoding (e.g. raw -> PNG) time.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getImageEncodingTimeMsec() {
    return imageEncodingTimeMsec;
  }

  /**
   * Image encoding (e.g. raw -> PNG) time.
   * @param imageEncodingTimeMsec imageEncodingTimeMsec or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setImageEncodingTimeMsec(java.lang.Integer imageEncodingTimeMsec) {
    this.imageEncodingTimeMsec = imageEncodingTimeMsec;
    return this;
  }

  /**
   * Image scaling time.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getImageScalingTimeMsec() {
    return imageScalingTimeMsec;
  }

  /**
   * Image scaling time.
   * @param imageScalingTimeMsec imageScalingTimeMsec or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setImageScalingTimeMsec(java.lang.Integer imageScalingTimeMsec) {
    this.imageScalingTimeMsec = imageScalingTimeMsec;
    return this;
  }

  /**
   * Time from starting render to document finished loading. This includes all fetches, parsing,
   * decoding, running JavaScript, etc.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLayoutTimeMsec() {
    return layoutTimeMsec;
  }

  /**
   * Time from starting render to document finished loading. This includes all fetches, parsing,
   * decoding, running JavaScript, etc.
   * @param layoutTimeMsec layoutTimeMsec or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setLayoutTimeMsec(java.lang.Integer layoutTimeMsec) {
    this.layoutTimeMsec = layoutTimeMsec;
    return this;
  }

  /**
   * Time required to paint a document into our buffer.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPaintTimeMsec() {
    return paintTimeMsec;
  }

  /**
   * Time required to paint a document into our buffer.
   * @param paintTimeMsec paintTimeMsec or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setPaintTimeMsec(java.lang.Integer paintTimeMsec) {
    this.paintTimeMsec = paintTimeMsec;
    return this;
  }

  /**
   * Total cost this render spent running and RPC cost in milliGCUs.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRenderCostMgcu() {
    return renderCostMgcu;
  }

  /**
   * Total cost this render spent running and RPC cost in milliGCUs.
   * @param renderCostMgcu renderCostMgcu or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setRenderCostMgcu(java.lang.Integer renderCostMgcu) {
    this.renderCostMgcu = renderCostMgcu;
    return this;
  }

  /**
   * Render engine used to render this document.
   * @return value or {@code null} for none
   */
  public java.lang.String getRenderEngine() {
    return renderEngine;
  }

  /**
   * Render engine used to render this document.
   * @param renderEngine renderEngine or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setRenderEngine(java.lang.String renderEngine) {
    this.renderEngine = renderEngine;
    return this;
  }

  /**
   * Total CPU time this render spent running in milliseconds.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRenderRunningTimeMsec() {
    return renderRunningTimeMsec;
  }

  /**
   * Total CPU time this render spent running in milliseconds.
   * @param renderRunningTimeMsec renderRunningTimeMsec or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setRenderRunningTimeMsec(java.lang.Integer renderRunningTimeMsec) {
    this.renderRunningTimeMsec = renderRunningTimeMsec;
    return this;
  }

  /**
   * The CL from which the render engine was built.
   * @return value or {@code null} for none
   */
  public java.lang.Long getRenderServerBaselineCl() {
    return renderServerBaselineCl;
  }

  /**
   * The CL from which the render engine was built.
   * @param renderServerBaselineCl renderServerBaselineCl or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setRenderServerBaselineCl(java.lang.Long renderServerBaselineCl) {
    this.renderServerBaselineCl = renderServerBaselineCl;
    return this;
  }

  /**
   * Total wall time taken to render a document in milliseconds.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRenderTimeMsec() {
    return renderTimeMsec;
  }

  /**
   * Total wall time taken to render a document in milliseconds.
   * @param renderTimeMsec renderTimeMsec or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setRenderTimeMsec(java.lang.Integer renderTimeMsec) {
    this.renderTimeMsec = renderTimeMsec;
    return this;
  }

  /**
   * Total time spent in the sandbox in milliseconds. This time includes all phases measured
   * individually below.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSandboxRenderTimeMsec() {
    return sandboxRenderTimeMsec;
  }

  /**
   * Total time spent in the sandbox in milliseconds. This time includes all phases measured
   * individually below.
   * @param sandboxRenderTimeMsec sandboxRenderTimeMsec or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderStats setSandboxRenderTimeMsec(java.lang.Integer sandboxRenderTimeMsec) {
    this.sandboxRenderTimeMsec = sandboxRenderTimeMsec;
    return this;
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoRenderStats set(String fieldName, Object value) {
    return (HtmlrenderWebkitHeadlessProtoRenderStats) super.set(fieldName, value);
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoRenderStats clone() {
    return (HtmlrenderWebkitHeadlessProtoRenderStats) super.clone();
  }

}
