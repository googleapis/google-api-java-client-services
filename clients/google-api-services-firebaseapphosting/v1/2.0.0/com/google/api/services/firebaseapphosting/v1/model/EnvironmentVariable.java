/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebaseapphosting.v1.model;

/**
 * Environment variables for this build.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase App Hosting API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class EnvironmentVariable extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Where this variable should be made available. If left unspecified, will be available
   * in both BUILD and BACKEND.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> availability;

  /**
   * A fully qualified secret version. The value of the secret will be accessed once while building
   * the application and once per cold start of the container at runtime. The service account used
   * by Cloud Build and by Cloud Run must each have the `secretmanager.versions.access` permission
   * on the secret.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String secret;

  /**
   * A plaintext value. This value is encrypted at rest, but all project readers can view the value
   * when reading your backend configuration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String value;

  /**
   * Required. The name of the environment variable. - Must be a valid environment variable name
   * (e.g. A-Z or underscores). - May not start with "FIREBASE" or "GOOGLE". - May not be a reserved
   * environment variable for KNative/Cloud Run
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String variable;

  /**
   * Optional. Where this variable should be made available. If left unspecified, will be available
   * in both BUILD and BACKEND.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAvailability() {
    return availability;
  }

  /**
   * Optional. Where this variable should be made available. If left unspecified, will be available
   * in both BUILD and BACKEND.
   * @param availability availability or {@code null} for none
   */
  public EnvironmentVariable setAvailability(java.util.List<java.lang.String> availability) {
    this.availability = availability;
    return this;
  }

  /**
   * A fully qualified secret version. The value of the secret will be accessed once while building
   * the application and once per cold start of the container at runtime. The service account used
   * by Cloud Build and by Cloud Run must each have the `secretmanager.versions.access` permission
   * on the secret.
   * @return value or {@code null} for none
   */
  public java.lang.String getSecret() {
    return secret;
  }

  /**
   * A fully qualified secret version. The value of the secret will be accessed once while building
   * the application and once per cold start of the container at runtime. The service account used
   * by Cloud Build and by Cloud Run must each have the `secretmanager.versions.access` permission
   * on the secret.
   * @param secret secret or {@code null} for none
   */
  public EnvironmentVariable setSecret(java.lang.String secret) {
    this.secret = secret;
    return this;
  }

  /**
   * A plaintext value. This value is encrypted at rest, but all project readers can view the value
   * when reading your backend configuration.
   * @return value or {@code null} for none
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * A plaintext value. This value is encrypted at rest, but all project readers can view the value
   * when reading your backend configuration.
   * @param value value or {@code null} for none
   */
  public EnvironmentVariable setValue(java.lang.String value) {
    this.value = value;
    return this;
  }

  /**
   * Required. The name of the environment variable. - Must be a valid environment variable name
   * (e.g. A-Z or underscores). - May not start with "FIREBASE" or "GOOGLE". - May not be a reserved
   * environment variable for KNative/Cloud Run
   * @return value or {@code null} for none
   */
  public java.lang.String getVariable() {
    return variable;
  }

  /**
   * Required. The name of the environment variable. - Must be a valid environment variable name
   * (e.g. A-Z or underscores). - May not start with "FIREBASE" or "GOOGLE". - May not be a reserved
   * environment variable for KNative/Cloud Run
   * @param variable variable or {@code null} for none
   */
  public EnvironmentVariable setVariable(java.lang.String variable) {
    this.variable = variable;
    return this;
  }

  @Override
  public EnvironmentVariable set(String fieldName, Object value) {
    return (EnvironmentVariable) super.set(fieldName, value);
  }

  @Override
  public EnvironmentVariable clone() {
    return (EnvironmentVariable) super.clone();
  }

}
