/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.managedkafka.v1.model;

/**
 * The TLS configuration for the Kafka cluster.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Managed Service for Apache Kafka API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TlsConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. A list of rules for mapping from SSL principal names to short names. These are
   * applied in order by Kafka. Refer to the Apache Kafka documentation for
   * `ssl.principal.mapping.rules` for the precise formatting details and syntax. Example:
   * "RULE:^CN=(.*?),OU=ServiceUsers.*$/$1@example.com/,DEFAULT" This is a static Kafka broker
   * configuration. Setting or modifying this field will trigger a rolling restart of the Kafka
   * brokers to apply the change. An empty string means no rules are applied (Kafka default).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sslPrincipalMappingRules;

  /**
   * Optional. The configuration of the broker truststore. If specified, clients can use mTLS for
   * authentication.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TrustConfig trustConfig;

  /**
   * Optional. A list of rules for mapping from SSL principal names to short names. These are
   * applied in order by Kafka. Refer to the Apache Kafka documentation for
   * `ssl.principal.mapping.rules` for the precise formatting details and syntax. Example:
   * "RULE:^CN=(.*?),OU=ServiceUsers.*$/$1@example.com/,DEFAULT" This is a static Kafka broker
   * configuration. Setting or modifying this field will trigger a rolling restart of the Kafka
   * brokers to apply the change. An empty string means no rules are applied (Kafka default).
   * @return value or {@code null} for none
   */
  public java.lang.String getSslPrincipalMappingRules() {
    return sslPrincipalMappingRules;
  }

  /**
   * Optional. A list of rules for mapping from SSL principal names to short names. These are
   * applied in order by Kafka. Refer to the Apache Kafka documentation for
   * `ssl.principal.mapping.rules` for the precise formatting details and syntax. Example:
   * "RULE:^CN=(.*?),OU=ServiceUsers.*$/$1@example.com/,DEFAULT" This is a static Kafka broker
   * configuration. Setting or modifying this field will trigger a rolling restart of the Kafka
   * brokers to apply the change. An empty string means no rules are applied (Kafka default).
   * @param sslPrincipalMappingRules sslPrincipalMappingRules or {@code null} for none
   */
  public TlsConfig setSslPrincipalMappingRules(java.lang.String sslPrincipalMappingRules) {
    this.sslPrincipalMappingRules = sslPrincipalMappingRules;
    return this;
  }

  /**
   * Optional. The configuration of the broker truststore. If specified, clients can use mTLS for
   * authentication.
   * @return value or {@code null} for none
   */
  public TrustConfig getTrustConfig() {
    return trustConfig;
  }

  /**
   * Optional. The configuration of the broker truststore. If specified, clients can use mTLS for
   * authentication.
   * @param trustConfig trustConfig or {@code null} for none
   */
  public TlsConfig setTrustConfig(TrustConfig trustConfig) {
    this.trustConfig = trustConfig;
    return this;
  }

  @Override
  public TlsConfig set(String fieldName, Object value) {
    return (TlsConfig) super.set(fieldName, value);
  }

  @Override
  public TlsConfig clone() {
    return (TlsConfig) super.clone();
  }

}
