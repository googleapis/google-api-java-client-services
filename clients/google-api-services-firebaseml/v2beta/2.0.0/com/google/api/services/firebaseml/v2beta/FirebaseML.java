/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebaseml.v2beta;

/**
 * Service definition for FirebaseML (v2beta).
 *
 * <p>
 * Access custom machine learning models hosted via Firebase ML.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://firebase.google.com" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FirebaseMLRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class FirebaseML extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Firebase ML API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://firebaseml.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://firebaseml.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public FirebaseML(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  FirebaseML(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code FirebaseML firebaseml = new FirebaseML(...);}
   *   {@code FirebaseML.Projects.List request = firebaseml.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseML firebaseml = new FirebaseML(...);}
     *   {@code FirebaseML.Locations.List request = firebaseml.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * An accessor for creating requests from the Publishers collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseML firebaseml = new FirebaseML(...);}
       *   {@code FirebaseML.Publishers.List request = firebaseml.publishers().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Publishers publishers() {
        return new Publishers();
      }

      /**
       * The "publishers" collection of methods.
       */
      public class Publishers {

        /**
         * An accessor for creating requests from the Models collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code FirebaseML firebaseml = new FirebaseML(...);}
         *   {@code FirebaseML.Models.List request = firebaseml.models().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Models models() {
          return new Models();
        }

        /**
         * The "models" collection of methods.
         */
        public class Models {

          /**
           * Perform a token counting.
           *
           * Create a request for the method "models.countTokens".
           *
           * This request holds the parameters needed by the firebaseml server.  After setting any optional
           * parameters, call the {@link CountTokens#execute()} method to invoke the remote operation.
           *
           * @param endpoint Required. The name of the Endpoint requested to perform token counting. Format:
           *        `projects/{project}/locations/{location}/endpoints/{endpoint}`
           * @param content the {@link com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1CountTokensRequest}
           * @return the request
           */
          public CountTokens countTokens(java.lang.String endpoint, com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1CountTokensRequest content) throws java.io.IOException {
            CountTokens result = new CountTokens(endpoint, content);
            initialize(result);
            return result;
          }

          public class CountTokens extends FirebaseMLRequest<com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1CountTokensResponse> {

            private static final String REST_PATH = "v2beta/{+endpoint}:countTokens";

            private final java.util.regex.Pattern ENDPOINT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/publishers/[^/]+/models/[^/]+$");

            /**
             * Perform a token counting.
             *
             * Create a request for the method "models.countTokens".
             *
             * This request holds the parameters needed by the the firebaseml server.  After setting any
             * optional parameters, call the {@link CountTokens#execute()} method to invoke the remote
             * operation. <p> {@link
             * CountTokens#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param endpoint Required. The name of the Endpoint requested to perform token counting. Format:
           *        `projects/{project}/locations/{location}/endpoints/{endpoint}`
             * @param content the {@link com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1CountTokensRequest}
             * @since 1.13
             */
            protected CountTokens(java.lang.String endpoint, com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1CountTokensRequest content) {
              super(FirebaseML.this, "POST", REST_PATH, content, com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1CountTokensResponse.class);
              this.endpoint = com.google.api.client.util.Preconditions.checkNotNull(endpoint, "Required parameter endpoint must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(ENDPOINT_PATTERN.matcher(endpoint).matches(),
                    "Parameter endpoint must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/publishers/[^/]+/models/[^/]+$");
              }
            }

            @Override
            public CountTokens set$Xgafv(java.lang.String $Xgafv) {
              return (CountTokens) super.set$Xgafv($Xgafv);
            }

            @Override
            public CountTokens setAccessToken(java.lang.String accessToken) {
              return (CountTokens) super.setAccessToken(accessToken);
            }

            @Override
            public CountTokens setAlt(java.lang.String alt) {
              return (CountTokens) super.setAlt(alt);
            }

            @Override
            public CountTokens setCallback(java.lang.String callback) {
              return (CountTokens) super.setCallback(callback);
            }

            @Override
            public CountTokens setFields(java.lang.String fields) {
              return (CountTokens) super.setFields(fields);
            }

            @Override
            public CountTokens setKey(java.lang.String key) {
              return (CountTokens) super.setKey(key);
            }

            @Override
            public CountTokens setOauthToken(java.lang.String oauthToken) {
              return (CountTokens) super.setOauthToken(oauthToken);
            }

            @Override
            public CountTokens setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (CountTokens) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public CountTokens setQuotaUser(java.lang.String quotaUser) {
              return (CountTokens) super.setQuotaUser(quotaUser);
            }

            @Override
            public CountTokens setUploadType(java.lang.String uploadType) {
              return (CountTokens) super.setUploadType(uploadType);
            }

            @Override
            public CountTokens setUploadProtocol(java.lang.String uploadProtocol) {
              return (CountTokens) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the Endpoint requested to perform token counting. Format:
             * `projects/{project}/locations/{location}/endpoints/{endpoint}`
             */
            @com.google.api.client.util.Key
            private java.lang.String endpoint;

            /** Required. The name of the Endpoint requested to perform token counting. Format:
           `projects/{project}/locations/{location}/endpoints/{endpoint}`
             */
            public java.lang.String getEndpoint() {
              return endpoint;
            }

            /**
             * Required. The name of the Endpoint requested to perform token counting. Format:
             * `projects/{project}/locations/{location}/endpoints/{endpoint}`
             */
            public CountTokens setEndpoint(java.lang.String endpoint) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(ENDPOINT_PATTERN.matcher(endpoint).matches(),
                    "Parameter endpoint must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/publishers/[^/]+/models/[^/]+$");
              }
              this.endpoint = endpoint;
              return this;
            }

            @Override
            public CountTokens set(String parameterName, Object value) {
              return (CountTokens) super.set(parameterName, value);
            }
          }
          /**
           * Generate content with multimodal inputs.
           *
           * Create a request for the method "models.generateContent".
           *
           * This request holds the parameters needed by the firebaseml server.  After setting any optional
           * parameters, call the {@link GenerateContent#execute()} method to invoke the remote operation.
           *
           * @param model Required. The name of the publisher model requested to serve the prediction. Format:
           *        `projects/{project}/locations/{location}/publishers/models`
           * @param content the {@link com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1GenerateContentRequest}
           * @return the request
           */
          public GenerateContent generateContent(java.lang.String model, com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1GenerateContentRequest content) throws java.io.IOException {
            GenerateContent result = new GenerateContent(model, content);
            initialize(result);
            return result;
          }

          public class GenerateContent extends FirebaseMLRequest<com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1GenerateContentResponse> {

            private static final String REST_PATH = "v2beta/{+model}:generateContent";

            private final java.util.regex.Pattern MODEL_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/publishers/[^/]+/models/[^/]+$");

            /**
             * Generate content with multimodal inputs.
             *
             * Create a request for the method "models.generateContent".
             *
             * This request holds the parameters needed by the the firebaseml server.  After setting any
             * optional parameters, call the {@link GenerateContent#execute()} method to invoke the remote
             * operation. <p> {@link GenerateContent#initialize(com.google.api.client.googleapis.services.Abst
             * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
             * the constructor. </p>
             *
             * @param model Required. The name of the publisher model requested to serve the prediction. Format:
           *        `projects/{project}/locations/{location}/publishers/models`
             * @param content the {@link com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1GenerateContentRequest}
             * @since 1.13
             */
            protected GenerateContent(java.lang.String model, com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1GenerateContentRequest content) {
              super(FirebaseML.this, "POST", REST_PATH, content, com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1GenerateContentResponse.class);
              this.model = com.google.api.client.util.Preconditions.checkNotNull(model, "Required parameter model must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(MODEL_PATTERN.matcher(model).matches(),
                    "Parameter model must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/publishers/[^/]+/models/[^/]+$");
              }
            }

            @Override
            public GenerateContent set$Xgafv(java.lang.String $Xgafv) {
              return (GenerateContent) super.set$Xgafv($Xgafv);
            }

            @Override
            public GenerateContent setAccessToken(java.lang.String accessToken) {
              return (GenerateContent) super.setAccessToken(accessToken);
            }

            @Override
            public GenerateContent setAlt(java.lang.String alt) {
              return (GenerateContent) super.setAlt(alt);
            }

            @Override
            public GenerateContent setCallback(java.lang.String callback) {
              return (GenerateContent) super.setCallback(callback);
            }

            @Override
            public GenerateContent setFields(java.lang.String fields) {
              return (GenerateContent) super.setFields(fields);
            }

            @Override
            public GenerateContent setKey(java.lang.String key) {
              return (GenerateContent) super.setKey(key);
            }

            @Override
            public GenerateContent setOauthToken(java.lang.String oauthToken) {
              return (GenerateContent) super.setOauthToken(oauthToken);
            }

            @Override
            public GenerateContent setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (GenerateContent) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public GenerateContent setQuotaUser(java.lang.String quotaUser) {
              return (GenerateContent) super.setQuotaUser(quotaUser);
            }

            @Override
            public GenerateContent setUploadType(java.lang.String uploadType) {
              return (GenerateContent) super.setUploadType(uploadType);
            }

            @Override
            public GenerateContent setUploadProtocol(java.lang.String uploadProtocol) {
              return (GenerateContent) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the publisher model requested to serve the prediction. Format:
             * `projects/{project}/locations/{location}/publishers/models`
             */
            @com.google.api.client.util.Key
            private java.lang.String model;

            /** Required. The name of the publisher model requested to serve the prediction. Format:
           `projects/{project}/locations/{location}/publishers/models`
             */
            public java.lang.String getModel() {
              return model;
            }

            /**
             * Required. The name of the publisher model requested to serve the prediction. Format:
             * `projects/{project}/locations/{location}/publishers/models`
             */
            public GenerateContent setModel(java.lang.String model) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(MODEL_PATTERN.matcher(model).matches(),
                    "Parameter model must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/publishers/[^/]+/models/[^/]+$");
              }
              this.model = model;
              return this;
            }

            @Override
            public GenerateContent set(String parameterName, Object value) {
              return (GenerateContent) super.set(parameterName, value);
            }
          }
          /**
           * Generate content with multimodal inputs with streaming support.
           *
           * Create a request for the method "models.streamGenerateContent".
           *
           * This request holds the parameters needed by the firebaseml server.  After setting any optional
           * parameters, call the {@link StreamGenerateContent#execute()} method to invoke the remote
           * operation.
           *
           * @param model Required. The name of the publisher model requested to serve the prediction. Format:
           *        `projects/{project}/locations/{location}/publishers/models`
           * @param content the {@link com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1GenerateContentRequest}
           * @return the request
           */
          public StreamGenerateContent streamGenerateContent(java.lang.String model, com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1GenerateContentRequest content) throws java.io.IOException {
            StreamGenerateContent result = new StreamGenerateContent(model, content);
            initialize(result);
            return result;
          }

          public class StreamGenerateContent extends FirebaseMLRequest<com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1GenerateContentResponse> {

            private static final String REST_PATH = "v2beta/{+model}:streamGenerateContent";

            private final java.util.regex.Pattern MODEL_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/publishers/[^/]+/models/[^/]+$");

            /**
             * Generate content with multimodal inputs with streaming support.
             *
             * Create a request for the method "models.streamGenerateContent".
             *
             * This request holds the parameters needed by the the firebaseml server.  After setting any
             * optional parameters, call the {@link StreamGenerateContent#execute()} method to invoke the
             * remote operation. <p> {@link StreamGenerateContent#initialize(com.google.api.client.googleapis.
             * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
             * after invoking the constructor. </p>
             *
             * @param model Required. The name of the publisher model requested to serve the prediction. Format:
           *        `projects/{project}/locations/{location}/publishers/models`
             * @param content the {@link com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1GenerateContentRequest}
             * @since 1.13
             */
            protected StreamGenerateContent(java.lang.String model, com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1GenerateContentRequest content) {
              super(FirebaseML.this, "POST", REST_PATH, content, com.google.api.services.firebaseml.v2beta.model.GoogleCloudAiplatformV1beta1GenerateContentResponse.class);
              this.model = com.google.api.client.util.Preconditions.checkNotNull(model, "Required parameter model must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(MODEL_PATTERN.matcher(model).matches(),
                    "Parameter model must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/publishers/[^/]+/models/[^/]+$");
              }
            }

            @Override
            public StreamGenerateContent set$Xgafv(java.lang.String $Xgafv) {
              return (StreamGenerateContent) super.set$Xgafv($Xgafv);
            }

            @Override
            public StreamGenerateContent setAccessToken(java.lang.String accessToken) {
              return (StreamGenerateContent) super.setAccessToken(accessToken);
            }

            @Override
            public StreamGenerateContent setAlt(java.lang.String alt) {
              return (StreamGenerateContent) super.setAlt(alt);
            }

            @Override
            public StreamGenerateContent setCallback(java.lang.String callback) {
              return (StreamGenerateContent) super.setCallback(callback);
            }

            @Override
            public StreamGenerateContent setFields(java.lang.String fields) {
              return (StreamGenerateContent) super.setFields(fields);
            }

            @Override
            public StreamGenerateContent setKey(java.lang.String key) {
              return (StreamGenerateContent) super.setKey(key);
            }

            @Override
            public StreamGenerateContent setOauthToken(java.lang.String oauthToken) {
              return (StreamGenerateContent) super.setOauthToken(oauthToken);
            }

            @Override
            public StreamGenerateContent setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (StreamGenerateContent) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public StreamGenerateContent setQuotaUser(java.lang.String quotaUser) {
              return (StreamGenerateContent) super.setQuotaUser(quotaUser);
            }

            @Override
            public StreamGenerateContent setUploadType(java.lang.String uploadType) {
              return (StreamGenerateContent) super.setUploadType(uploadType);
            }

            @Override
            public StreamGenerateContent setUploadProtocol(java.lang.String uploadProtocol) {
              return (StreamGenerateContent) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the publisher model requested to serve the prediction. Format:
             * `projects/{project}/locations/{location}/publishers/models`
             */
            @com.google.api.client.util.Key
            private java.lang.String model;

            /** Required. The name of the publisher model requested to serve the prediction. Format:
           `projects/{project}/locations/{location}/publishers/models`
             */
            public java.lang.String getModel() {
              return model;
            }

            /**
             * Required. The name of the publisher model requested to serve the prediction. Format:
             * `projects/{project}/locations/{location}/publishers/models`
             */
            public StreamGenerateContent setModel(java.lang.String model) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(MODEL_PATTERN.matcher(model).matches(),
                    "Parameter model must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/publishers/[^/]+/models/[^/]+$");
              }
              this.model = model;
              return this;
            }

            @Override
            public StreamGenerateContent set(String parameterName, Object value) {
              return (StreamGenerateContent) super.set(parameterName, value);
            }
          }

        }
      }
    }
  }

  /**
   * Builder for {@link FirebaseML}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link FirebaseML}. */
    @Override
    public FirebaseML build() {
      return new FirebaseML(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FirebaseMLRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFirebaseMLRequestInitializer(
        FirebaseMLRequestInitializer firebasemlRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(firebasemlRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
