/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.gkehub.v1.model;

/**
 * Defines where users exist in the LDAP directory.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the GKE Hub API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IdentityServiceUserConfig extends com.google.api.client.json.GenericJson {

  /**
   * Required. The location of the subtree in the LDAP directory to search for user entries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String baseDn;

  /**
   * Optional. Filter to apply when searching for the user. This can be used to further restrict the
   * user accounts which are allowed to login. This defaults to "(objectClass=User)".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String filter;

  /**
   * Optional. Determines which attribute to use as the user's identity after they are
   * authenticated. This is distinct from the loginAttribute field to allow users to login with a
   * username, but then have their actual identifier be an email address or full Distinguished Name
   * (DN). For example, setting loginAttribute to "sAMAccountName" and identifierAttribute to
   * "userPrincipalName" would allow a user to login as "bsmith", but actual RBAC policies for the
   * user would be written as "bsmith@example.com". Using "userPrincipalName" is recommended since
   * this will be unique for each user. This defaults to "userPrincipalName".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String idAttribute;

  /**
   * Optional. The name of the attribute which matches against the input username. This is used to
   * find the user in the LDAP database e.g. "(=)" and is combined with the optional filter field.
   * This defaults to "userPrincipalName".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String loginAttribute;

  /**
   * Required. The location of the subtree in the LDAP directory to search for user entries.
   * @return value or {@code null} for none
   */
  public java.lang.String getBaseDn() {
    return baseDn;
  }

  /**
   * Required. The location of the subtree in the LDAP directory to search for user entries.
   * @param baseDn baseDn or {@code null} for none
   */
  public IdentityServiceUserConfig setBaseDn(java.lang.String baseDn) {
    this.baseDn = baseDn;
    return this;
  }

  /**
   * Optional. Filter to apply when searching for the user. This can be used to further restrict the
   * user accounts which are allowed to login. This defaults to "(objectClass=User)".
   * @return value or {@code null} for none
   */
  public java.lang.String getFilter() {
    return filter;
  }

  /**
   * Optional. Filter to apply when searching for the user. This can be used to further restrict the
   * user accounts which are allowed to login. This defaults to "(objectClass=User)".
   * @param filter filter or {@code null} for none
   */
  public IdentityServiceUserConfig setFilter(java.lang.String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Optional. Determines which attribute to use as the user's identity after they are
   * authenticated. This is distinct from the loginAttribute field to allow users to login with a
   * username, but then have their actual identifier be an email address or full Distinguished Name
   * (DN). For example, setting loginAttribute to "sAMAccountName" and identifierAttribute to
   * "userPrincipalName" would allow a user to login as "bsmith", but actual RBAC policies for the
   * user would be written as "bsmith@example.com". Using "userPrincipalName" is recommended since
   * this will be unique for each user. This defaults to "userPrincipalName".
   * @return value or {@code null} for none
   */
  public java.lang.String getIdAttribute() {
    return idAttribute;
  }

  /**
   * Optional. Determines which attribute to use as the user's identity after they are
   * authenticated. This is distinct from the loginAttribute field to allow users to login with a
   * username, but then have their actual identifier be an email address or full Distinguished Name
   * (DN). For example, setting loginAttribute to "sAMAccountName" and identifierAttribute to
   * "userPrincipalName" would allow a user to login as "bsmith", but actual RBAC policies for the
   * user would be written as "bsmith@example.com". Using "userPrincipalName" is recommended since
   * this will be unique for each user. This defaults to "userPrincipalName".
   * @param idAttribute idAttribute or {@code null} for none
   */
  public IdentityServiceUserConfig setIdAttribute(java.lang.String idAttribute) {
    this.idAttribute = idAttribute;
    return this;
  }

  /**
   * Optional. The name of the attribute which matches against the input username. This is used to
   * find the user in the LDAP database e.g. "(=)" and is combined with the optional filter field.
   * This defaults to "userPrincipalName".
   * @return value or {@code null} for none
   */
  public java.lang.String getLoginAttribute() {
    return loginAttribute;
  }

  /**
   * Optional. The name of the attribute which matches against the input username. This is used to
   * find the user in the LDAP database e.g. "(=)" and is combined with the optional filter field.
   * This defaults to "userPrincipalName".
   * @param loginAttribute loginAttribute or {@code null} for none
   */
  public IdentityServiceUserConfig setLoginAttribute(java.lang.String loginAttribute) {
    this.loginAttribute = loginAttribute;
    return this;
  }

  @Override
  public IdentityServiceUserConfig set(String fieldName, Object value) {
    return (IdentityServiceUserConfig) super.set(fieldName, value);
  }

  @Override
  public IdentityServiceUserConfig clone() {
    return (IdentityServiceUserConfig) super.clone();
  }

}
