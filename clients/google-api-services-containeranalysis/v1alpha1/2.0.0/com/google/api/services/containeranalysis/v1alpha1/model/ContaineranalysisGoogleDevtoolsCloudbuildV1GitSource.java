/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.containeranalysis.v1alpha1.model;

/**
 * Location of the source in any accessible Git repository.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Container Analysis API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource extends com.google.api.client.json.GenericJson {

  /**
   * Directory, relative to the source root, in which to run the build. This must be a relative
   * path. If a step's `dir` is specified and is an absolute path, this value is ignored for that
   * step's execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dir;

  /**
   * The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git
   * ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make
   * sure that the string you provide for `revision` is parsable by the command. For information on
   * string values accepted by `git fetch`, see https://git-
   * scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https
   * ://git-scm.com/docs/git-fetch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String revision;

  /**
   * Location of the Git repo to build. This will be used as a `git remote`, see https://git-
   * scm.com/docs/git-remote.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * Directory, relative to the source root, in which to run the build. This must be a relative
   * path. If a step's `dir` is specified and is an absolute path, this value is ignored for that
   * step's execution.
   * @return value or {@code null} for none
   */
  public java.lang.String getDir() {
    return dir;
  }

  /**
   * Directory, relative to the source root, in which to run the build. This must be a relative
   * path. If a step's `dir` is specified and is an absolute path, this value is ignored for that
   * step's execution.
   * @param dir dir or {@code null} for none
   */
  public ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource setDir(java.lang.String dir) {
    this.dir = dir;
    return this;
  }

  /**
   * The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git
   * ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make
   * sure that the string you provide for `revision` is parsable by the command. For information on
   * string values accepted by `git fetch`, see https://git-
   * scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https
   * ://git-scm.com/docs/git-fetch.
   * @return value or {@code null} for none
   */
  public java.lang.String getRevision() {
    return revision;
  }

  /**
   * The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git
   * ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make
   * sure that the string you provide for `revision` is parsable by the command. For information on
   * string values accepted by `git fetch`, see https://git-
   * scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https
   * ://git-scm.com/docs/git-fetch.
   * @param revision revision or {@code null} for none
   */
  public ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource setRevision(java.lang.String revision) {
    this.revision = revision;
    return this;
  }

  /**
   * Location of the Git repo to build. This will be used as a `git remote`, see https://git-
   * scm.com/docs/git-remote.
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * Location of the Git repo to build. This will be used as a `git remote`, see https://git-
   * scm.com/docs/git-remote.
   * @param url url or {@code null} for none
   */
  public ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  @Override
  public ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource set(String fieldName, Object value) {
    return (ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource) super.set(fieldName, value);
  }

  @Override
  public ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource clone() {
    return (ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource) super.clone();
  }

}
