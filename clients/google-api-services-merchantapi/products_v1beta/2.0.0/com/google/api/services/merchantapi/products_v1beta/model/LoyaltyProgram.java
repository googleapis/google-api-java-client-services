/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.merchantapi.products_v1beta.model;

/**
 * A message that represents loyalty program.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Merchant API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LoyaltyProgram extends com.google.api.client.json.GenericJson {

  /**
   * The cashback that can be used for future purchases.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Price cashbackForFutureUse;

  /**
   * The amount of loyalty points earned on a purchase.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long loyaltyPoints;

  /**
   * A date range during which the item is eligible for member price. If not specified, the member
   * price is always applicable. The date range is represented by a pair of ISO 8601 dates separated
   * by a space, comma, or slash.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Interval memberPriceEffectiveDate;

  /**
   * The price for members of the given tier, that is, the instant discount price. Must be smaller
   * or equal to the regular price.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Price price;

  /**
   * The label of the loyalty program. This is an internal label that uniquely identifies the
   * relationship between a merchant entity and a loyalty program entity. The label must be provided
   * so that the system can associate the assets below (for example, price and points) with a
   * merchant. The corresponding program must be linked to the merchant account.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String programLabel;

  /**
   * The label of the shipping benefit. If the field has value, this offer has loyalty shipping
   * benefit. If the field value isn't provided, the item is not eligible for loyalty shipping for
   * the given loyalty tier.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String shippingLabel;

  /**
   * The label of the tier within the loyalty program. Must match one of the labels within the
   * program.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tierLabel;

  /**
   * The cashback that can be used for future purchases.
   * @return value or {@code null} for none
   */
  public Price getCashbackForFutureUse() {
    return cashbackForFutureUse;
  }

  /**
   * The cashback that can be used for future purchases.
   * @param cashbackForFutureUse cashbackForFutureUse or {@code null} for none
   */
  public LoyaltyProgram setCashbackForFutureUse(Price cashbackForFutureUse) {
    this.cashbackForFutureUse = cashbackForFutureUse;
    return this;
  }

  /**
   * The amount of loyalty points earned on a purchase.
   * @return value or {@code null} for none
   */
  public java.lang.Long getLoyaltyPoints() {
    return loyaltyPoints;
  }

  /**
   * The amount of loyalty points earned on a purchase.
   * @param loyaltyPoints loyaltyPoints or {@code null} for none
   */
  public LoyaltyProgram setLoyaltyPoints(java.lang.Long loyaltyPoints) {
    this.loyaltyPoints = loyaltyPoints;
    return this;
  }

  /**
   * A date range during which the item is eligible for member price. If not specified, the member
   * price is always applicable. The date range is represented by a pair of ISO 8601 dates separated
   * by a space, comma, or slash.
   * @return value or {@code null} for none
   */
  public Interval getMemberPriceEffectiveDate() {
    return memberPriceEffectiveDate;
  }

  /**
   * A date range during which the item is eligible for member price. If not specified, the member
   * price is always applicable. The date range is represented by a pair of ISO 8601 dates separated
   * by a space, comma, or slash.
   * @param memberPriceEffectiveDate memberPriceEffectiveDate or {@code null} for none
   */
  public LoyaltyProgram setMemberPriceEffectiveDate(Interval memberPriceEffectiveDate) {
    this.memberPriceEffectiveDate = memberPriceEffectiveDate;
    return this;
  }

  /**
   * The price for members of the given tier, that is, the instant discount price. Must be smaller
   * or equal to the regular price.
   * @return value or {@code null} for none
   */
  public Price getPrice() {
    return price;
  }

  /**
   * The price for members of the given tier, that is, the instant discount price. Must be smaller
   * or equal to the regular price.
   * @param price price or {@code null} for none
   */
  public LoyaltyProgram setPrice(Price price) {
    this.price = price;
    return this;
  }

  /**
   * The label of the loyalty program. This is an internal label that uniquely identifies the
   * relationship between a merchant entity and a loyalty program entity. The label must be provided
   * so that the system can associate the assets below (for example, price and points) with a
   * merchant. The corresponding program must be linked to the merchant account.
   * @return value or {@code null} for none
   */
  public java.lang.String getProgramLabel() {
    return programLabel;
  }

  /**
   * The label of the loyalty program. This is an internal label that uniquely identifies the
   * relationship between a merchant entity and a loyalty program entity. The label must be provided
   * so that the system can associate the assets below (for example, price and points) with a
   * merchant. The corresponding program must be linked to the merchant account.
   * @param programLabel programLabel or {@code null} for none
   */
  public LoyaltyProgram setProgramLabel(java.lang.String programLabel) {
    this.programLabel = programLabel;
    return this;
  }

  /**
   * The label of the shipping benefit. If the field has value, this offer has loyalty shipping
   * benefit. If the field value isn't provided, the item is not eligible for loyalty shipping for
   * the given loyalty tier.
   * @return value or {@code null} for none
   */
  public java.lang.String getShippingLabel() {
    return shippingLabel;
  }

  /**
   * The label of the shipping benefit. If the field has value, this offer has loyalty shipping
   * benefit. If the field value isn't provided, the item is not eligible for loyalty shipping for
   * the given loyalty tier.
   * @param shippingLabel shippingLabel or {@code null} for none
   */
  public LoyaltyProgram setShippingLabel(java.lang.String shippingLabel) {
    this.shippingLabel = shippingLabel;
    return this;
  }

  /**
   * The label of the tier within the loyalty program. Must match one of the labels within the
   * program.
   * @return value or {@code null} for none
   */
  public java.lang.String getTierLabel() {
    return tierLabel;
  }

  /**
   * The label of the tier within the loyalty program. Must match one of the labels within the
   * program.
   * @param tierLabel tierLabel or {@code null} for none
   */
  public LoyaltyProgram setTierLabel(java.lang.String tierLabel) {
    this.tierLabel = tierLabel;
    return this;
  }

  @Override
  public LoyaltyProgram set(String fieldName, Object value) {
    return (LoyaltyProgram) super.set(fieldName, value);
  }

  @Override
  public LoyaltyProgram clone() {
    return (LoyaltyProgram) super.clone();
  }

}
