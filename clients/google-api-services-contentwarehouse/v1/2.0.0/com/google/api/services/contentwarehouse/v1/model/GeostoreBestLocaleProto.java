/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A BestLocaleProto holds information about the best-match locale for a feature. Clients may use
 * this information to determine the appropriate local name of a feature.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreBestLocaleProto extends com.google.api.client.json.GenericJson {

  /**
   * The ID of the best-match TYPE_LOCALE feature for this feature.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto locale;

  /**
   * The ID of the localization policy to apply when selecting a name for a feature. This field
   * should always be set. If feature_id is also defined, this field should have the same
   * localization policy ID as the referenced locale feature. Localization policy IDs are arbitrary
   * identifiers (up to some number of bytes; see geostore/base/public/constants.h) that uniquely
   * distinguish a set of language-selection rules.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String localizationPolicyId;

  /**
   * Field-level metadata for this best locale.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFieldMetadataProto metadata;

  /**
   * The ID of the best-match TYPE_LOCALE feature for this feature.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getLocale() {
    return locale;
  }

  /**
   * The ID of the best-match TYPE_LOCALE feature for this feature.
   * @param locale locale or {@code null} for none
   */
  public GeostoreBestLocaleProto setLocale(GeostoreFeatureIdProto locale) {
    this.locale = locale;
    return this;
  }

  /**
   * The ID of the localization policy to apply when selecting a name for a feature. This field
   * should always be set. If feature_id is also defined, this field should have the same
   * localization policy ID as the referenced locale feature. Localization policy IDs are arbitrary
   * identifiers (up to some number of bytes; see geostore/base/public/constants.h) that uniquely
   * distinguish a set of language-selection rules.
   * @return value or {@code null} for none
   */
  public java.lang.String getLocalizationPolicyId() {
    return localizationPolicyId;
  }

  /**
   * The ID of the localization policy to apply when selecting a name for a feature. This field
   * should always be set. If feature_id is also defined, this field should have the same
   * localization policy ID as the referenced locale feature. Localization policy IDs are arbitrary
   * identifiers (up to some number of bytes; see geostore/base/public/constants.h) that uniquely
   * distinguish a set of language-selection rules.
   * @param localizationPolicyId localizationPolicyId or {@code null} for none
   */
  public GeostoreBestLocaleProto setLocalizationPolicyId(java.lang.String localizationPolicyId) {
    this.localizationPolicyId = localizationPolicyId;
    return this;
  }

  /**
   * Field-level metadata for this best locale.
   * @return value or {@code null} for none
   */
  public GeostoreFieldMetadataProto getMetadata() {
    return metadata;
  }

  /**
   * Field-level metadata for this best locale.
   * @param metadata metadata or {@code null} for none
   */
  public GeostoreBestLocaleProto setMetadata(GeostoreFieldMetadataProto metadata) {
    this.metadata = metadata;
    return this;
  }

  @Override
  public GeostoreBestLocaleProto set(String fieldName, Object value) {
    return (GeostoreBestLocaleProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreBestLocaleProto clone() {
    return (GeostoreBestLocaleProto) super.clone();
  }

}
