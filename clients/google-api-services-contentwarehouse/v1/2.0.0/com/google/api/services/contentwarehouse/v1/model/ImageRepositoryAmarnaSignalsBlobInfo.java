/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for ImageRepositoryAmarnaSignalsBlobInfo.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImageRepositoryAmarnaSignalsBlobInfo extends com.google.api.client.json.GenericJson {

  /**
   * Blob id for AmarnaSignalsBlob (see `Blob proto` section of go/revisit-frame-level-signals-
   * amarna).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String signalsBlobId;

  /**
   * Additional timestamp field for when the blob is written/updated, serving as the dirty field to
   * help checksum-based update push (see `Dirty field` section in go/revisit-frame-level-signals-
   * amarna).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String signalsBlobUpdateTimestamp;

  /**
   * Blob id for AmarnaSignalsBlob (see `Blob proto` section of go/revisit-frame-level-signals-
   * amarna).
   * @return value or {@code null} for none
   */
  public java.lang.String getSignalsBlobId() {
    return signalsBlobId;
  }

  /**
   * Blob id for AmarnaSignalsBlob (see `Blob proto` section of go/revisit-frame-level-signals-
   * amarna).
   * @param signalsBlobId signalsBlobId or {@code null} for none
   */
  public ImageRepositoryAmarnaSignalsBlobInfo setSignalsBlobId(java.lang.String signalsBlobId) {
    this.signalsBlobId = signalsBlobId;
    return this;
  }

  /**
   * Additional timestamp field for when the blob is written/updated, serving as the dirty field to
   * help checksum-based update push (see `Dirty field` section in go/revisit-frame-level-signals-
   * amarna).
   * @return value or {@code null} for none
   */
  public String getSignalsBlobUpdateTimestamp() {
    return signalsBlobUpdateTimestamp;
  }

  /**
   * Additional timestamp field for when the blob is written/updated, serving as the dirty field to
   * help checksum-based update push (see `Dirty field` section in go/revisit-frame-level-signals-
   * amarna).
   * @param signalsBlobUpdateTimestamp signalsBlobUpdateTimestamp or {@code null} for none
   */
  public ImageRepositoryAmarnaSignalsBlobInfo setSignalsBlobUpdateTimestamp(String signalsBlobUpdateTimestamp) {
    this.signalsBlobUpdateTimestamp = signalsBlobUpdateTimestamp;
    return this;
  }

  @Override
  public ImageRepositoryAmarnaSignalsBlobInfo set(String fieldName, Object value) {
    return (ImageRepositoryAmarnaSignalsBlobInfo) super.set(fieldName, value);
  }

  @Override
  public ImageRepositoryAmarnaSignalsBlobInfo clone() {
    return (ImageRepositoryAmarnaSignalsBlobInfo) super.clone();
  }

}
