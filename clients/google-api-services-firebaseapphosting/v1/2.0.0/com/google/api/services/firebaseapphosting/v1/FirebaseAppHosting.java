/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebaseapphosting.v1;

/**
 * Service definition for FirebaseAppHosting (v1).
 *
 * <p>
 * Firebase App Hosting streamlines the development and deployment of dynamic Next.js and Angular applications, offering built-in framework support, GitHub integration, and integration with other Firebase products. You can use this API to intervene in the Firebase App Hosting build process and add custom functionality not supported in our default Console & CLI flows, including triggering builds from external CI/CD workflows or deploying from pre-built container images. 
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://firebase.google.com/docs/app-hosting" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FirebaseAppHostingRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class FirebaseAppHosting extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Firebase App Hosting API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://firebaseapphosting.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://firebaseapphosting.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public FirebaseAppHosting(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  FirebaseAppHosting(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code FirebaseAppHosting firebaseapphosting = new FirebaseAppHosting(...);}
   *   {@code FirebaseAppHosting.Projects.List request = firebaseapphosting.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseAppHosting firebaseapphosting = new FirebaseAppHosting(...);}
     *   {@code FirebaseAppHosting.Locations.List request = firebaseapphosting.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * Gets information about a location.
       *
       * Create a request for the method "locations.get".
       *
       * This request holds the parameters needed by the firebaseapphosting server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Resource name for the location.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Location> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

        /**
         * Gets information about a location.
         *
         * Create a request for the method "locations.get".
         *
         * This request holds the parameters needed by the the firebaseapphosting server.  After setting
         * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         * <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Resource name for the location.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(FirebaseAppHosting.this, "GET", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.Location.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Resource name for the location. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Resource name for the location.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Resource name for the location. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists information about the supported locations for this service.
       *
       * Create a request for the method "locations.list".
       *
       * This request holds the parameters needed by the firebaseapphosting server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param name The resource that owns the locations collection, if applicable.
       * @return the request
       */
      public List list(java.lang.String name) throws java.io.IOException {
        List result = new List(name);
        initialize(result);
        return result;
      }

      public class List extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.ListLocationsResponse> {

        private static final String REST_PATH = "v1/{+name}/locations";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists information about the supported locations for this service.
         *
         * Create a request for the method "locations.list".
         *
         * This request holds the parameters needed by the the firebaseapphosting server.  After setting
         * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         * <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource that owns the locations collection, if applicable.
         * @since 1.13
         */
        protected List(java.lang.String name) {
          super(FirebaseAppHosting.this, "GET", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.ListLocationsResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** The resource that owns the locations collection, if applicable. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource that owns the locations collection, if applicable.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The resource that owns the locations collection, if applicable. */
        public List setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * Optional. A list of extra location types that should be used as conditions for
         * controlling the visibility of the locations.
         */
        @com.google.api.client.util.Key
        private java.util.List<java.lang.String> extraLocationTypes;

        /** Optional. A list of extra location types that should be used as conditions for controlling the
       visibility of the locations.
         */
        public java.util.List<java.lang.String> getExtraLocationTypes() {
          return extraLocationTypes;
        }

        /**
         * Optional. A list of extra location types that should be used as conditions for
         * controlling the visibility of the locations.
         */
        public List setExtraLocationTypes(java.util.List<java.lang.String> extraLocationTypes) {
          this.extraLocationTypes = extraLocationTypes;
          return this;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** A filter to narrow down results to a preferred subset. The filtering language accepts strings like
       `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of results to return. If not set, the service selects a default.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A page token received from the `next_page_token` field in the response. Send that page token to
       receive the subsequent page.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Backends collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseAppHosting firebaseapphosting = new FirebaseAppHosting(...);}
       *   {@code FirebaseAppHosting.Backends.List request = firebaseapphosting.backends().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Backends backends() {
        return new Backends();
      }

      /**
       * The "backends" collection of methods.
       */
      public class Backends {

        /**
         * Creates a new backend in a given project and location.
         *
         * Create a request for the method "backends.create".
         *
         * This request holds the parameters needed by the firebaseapphosting server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. A parent name of the form `projects/{project}/locations/{locationId}`.
         * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Backend}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.firebaseapphosting.v1.model.Backend content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+parent}/backends";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a new backend in a given project and location.
           *
           * Create a request for the method "backends.create".
           *
           * This request holds the parameters needed by the the firebaseapphosting server.  After setting
           * any optional parameters, call the {@link Create#execute()} method to invoke the remote
           * operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. A parent name of the form `projects/{project}/locations/{locationId}`.
           * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Backend}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.firebaseapphosting.v1.model.Backend content) {
            super(FirebaseAppHosting.this, "POST", REST_PATH, content, com.google.api.services.firebaseapphosting.v1.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. A parent name of the form `projects/{project}/locations/{locationId}`. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. A parent name of the form `projects/{project}/locations/{locationId}`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. A parent name of the form `projects/{project}/locations/{locationId}`. */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. Id of the backend. Also used as the service ID for Cloud Run, and as part of
           * the default domain name.
           */
          @com.google.api.client.util.Key
          private java.lang.String backendId;

          /** Required. Id of the backend. Also used as the service ID for Cloud Run, and as part of the default
         domain name.
           */
          public java.lang.String getBackendId() {
            return backendId;
          }

          /**
           * Required. Id of the backend. Also used as the service ID for Cloud Run, and as part of
           * the default domain name.
           */
          public Create setBackendId(java.lang.String backendId) {
            this.backendId = backendId;
            return this;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and t he request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          @com.google.api.client.util.Key
          private java.lang.String requestId;

          /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
         must retry your request, the server will know to ignore the request if it has already been
         completed. The server will guarantee that for at least 60 minutes since the first request. For
         example, consider a situation where you make an initial request and t he request times out. If you
         make the request again with the same request ID, the server can check if original operation with
         the same request ID was received, and if so, will ignore the second request. This prevents clients
         from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
         exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public java.lang.String getRequestId() {
            return requestId;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and t he request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public Create setRequestId(java.lang.String requestId) {
            this.requestId = requestId;
            return this;
          }

          /**
           * Optional. Indicates that the request should be validated and default values populated,
           * without persisting the request or creating any resources.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean validateOnly;

          /** Optional. Indicates that the request should be validated and default values populated, without
         persisting the request or creating any resources.
           */
          public java.lang.Boolean getValidateOnly() {
            return validateOnly;
          }

          /**
           * Optional. Indicates that the request should be validated and default values populated,
           * without persisting the request or creating any resources.
           */
          public Create setValidateOnly(java.lang.Boolean validateOnly) {
            this.validateOnly = validateOnly;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a single backend.
         *
         * Create a request for the method "backends.delete".
         *
         * This request holds the parameters needed by the firebaseapphosting server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. Name of the resource in the format:
         *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+$");

          /**
           * Deletes a single backend.
           *
           * Create a request for the method "backends.delete".
           *
           * This request holds the parameters needed by the the firebaseapphosting server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. Name of the resource in the format:
         *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(FirebaseAppHosting.this, "DELETE", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Name of the resource in the format:
           * `projects/{project}/locations/{locationId}/backends/{backendId}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. Name of the resource in the format:
         `projects/{project}/locations/{locationId}/backends/{backendId}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. Name of the resource in the format:
           * `projects/{project}/locations/{locationId}/backends/{backendId}`.
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Optional. If the client provided etag is out of date, delete will be returned
           * FAILED_PRECONDITION error.
           */
          @com.google.api.client.util.Key
          private java.lang.String etag;

          /** Optional. If the client provided etag is out of date, delete will be returned FAILED_PRECONDITION
         error.
           */
          public java.lang.String getEtag() {
            return etag;
          }

          /**
           * Optional. If the client provided etag is out of date, delete will be returned
           * FAILED_PRECONDITION error.
           */
          public Delete setEtag(java.lang.String etag) {
            this.etag = etag;
            return this;
          }

          /**
           * Optional. If set to true, any resources for this backend will also be deleted.
           * Otherwise, any children resources will block deletion.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean force;

          /** Optional. If set to true, any resources for this backend will also be deleted. Otherwise, any
         children resources will block deletion.
           */
          public java.lang.Boolean getForce() {
            return force;
          }

          /**
           * Optional. If set to true, any resources for this backend will also be deleted.
           * Otherwise, any children resources will block deletion.
           */
          public Delete setForce(java.lang.Boolean force) {
            this.force = force;
            return this;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * after the first request. For example, consider a situation where you make an initial
           * request and t he request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          @com.google.api.client.util.Key
          private java.lang.String requestId;

          /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
         must retry your request, the server will know to ignore the request if it has already been
         completed. The server will guarantee that for at least 60 minutes after the first request. For
         example, consider a situation where you make an initial request and t he request times out. If you
         make the request again with the same request ID, the server can check if original operation with
         the same request ID was received, and if so, will ignore the second request. This prevents clients
         from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
         exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public java.lang.String getRequestId() {
            return requestId;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * after the first request. For example, consider a situation where you make an initial
           * request and t he request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public Delete setRequestId(java.lang.String requestId) {
            this.requestId = requestId;
            return this;
          }

          /**
           * Optional. Indicates that the request should be validated, without persisting the
           * request or updating any resources.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean validateOnly;

          /** Optional. Indicates that the request should be validated, without persisting the request or
         updating any resources.
           */
          public java.lang.Boolean getValidateOnly() {
            return validateOnly;
          }

          /**
           * Optional. Indicates that the request should be validated, without persisting the
           * request or updating any resources.
           */
          public Delete setValidateOnly(java.lang.Boolean validateOnly) {
            this.validateOnly = validateOnly;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets information about a backend.
         *
         * Create a request for the method "backends.get".
         *
         * This request holds the parameters needed by the firebaseapphosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. Name of the resource in the format:
         *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Backend> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+$");

          /**
           * Gets information about a backend.
           *
           * Create a request for the method "backends.get".
           *
           * This request holds the parameters needed by the the firebaseapphosting server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. Name of the resource in the format:
         *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(FirebaseAppHosting.this, "GET", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.Backend.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Name of the resource in the format:
           * `projects/{project}/locations/{locationId}/backends/{backendId}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. Name of the resource in the format:
         `projects/{project}/locations/{locationId}/backends/{backendId}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. Name of the resource in the format:
           * `projects/{project}/locations/{locationId}/backends/{backendId}`.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists backends in a given project and location.
         *
         * Create a request for the method "backends.list".
         *
         * This request holds the parameters needed by the firebaseapphosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. A parent name of the form `projects/{project}/locations/{locationId}`.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.ListBackendsResponse> {

          private static final String REST_PATH = "v1/{+parent}/backends";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists backends in a given project and location.
           *
           * Create a request for the method "backends.list".
           *
           * This request holds the parameters needed by the the firebaseapphosting server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. A parent name of the form `projects/{project}/locations/{locationId}`.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(FirebaseAppHosting.this, "GET", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.ListBackendsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. A parent name of the form `projects/{project}/locations/{locationId}`. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. A parent name of the form `projects/{project}/locations/{locationId}`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. A parent name of the form `projects/{project}/locations/{locationId}`. */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Optional. A filter to narrow down results to a preferred subset. Learn more about
           * filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
           */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Optional. A filter to narrow down results to a preferred subset. Learn more about filtering in
         Google's [AIP 160 standard](https://google.aip.dev/160).
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /**
           * Optional. A filter to narrow down results to a preferred subset. Learn more about
           * filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
           */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /**
           * Optional. Hint for how to order the results. Supported fields are `name` and
           * `createTime`. To specify descending order, append a `desc` suffix.
           */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** Optional. Hint for how to order the results. Supported fields are `name` and `createTime`. To
         specify descending order, append a `desc` suffix.
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /**
           * Optional. Hint for how to order the results. Supported fields are `name` and
           * `createTime`. To specify descending order, append a `desc` suffix.
           */
          public List setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /**
           * Optional. The maximum number of results to return. If not set, the service selects a
           * default.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. The maximum number of results to return. If not set, the service selects a default.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * Optional. The maximum number of results to return. If not set, the service selects a
           * default.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * Optional. A page token received from the nextPageToken field in the response. Send that
           * page token to receive the subsequent page.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. A page token received from the nextPageToken field in the response. Send that page token
         to receive the subsequent page.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * Optional. A page token received from the nextPageToken field in the response. Send that
           * page token to receive the subsequent page.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          /**
           * Optional. If true, the request returns soft-deleted resources that haven't been fully-
           * deleted yet.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean showDeleted;

          /** Optional. If true, the request returns soft-deleted resources that haven't been fully-deleted yet.
           */
          public java.lang.Boolean getShowDeleted() {
            return showDeleted;
          }

          /**
           * Optional. If true, the request returns soft-deleted resources that haven't been fully-
           * deleted yet.
           */
          public List setShowDeleted(java.lang.Boolean showDeleted) {
            this.showDeleted = showDeleted;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates the information for a single backend.
         *
         * Create a request for the method "backends.patch".
         *
         * This request holds the parameters needed by the firebaseapphosting server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Identifier. The resource name of the backend. Format:
         *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
         * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Backend}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firebaseapphosting.v1.model.Backend content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+$");

          /**
           * Updates the information for a single backend.
           *
           * Create a request for the method "backends.patch".
           *
           * This request holds the parameters needed by the the firebaseapphosting server.  After setting
           * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
           * operation. <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Identifier. The resource name of the backend. Format:
         *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
           * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Backend}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firebaseapphosting.v1.model.Backend content) {
            super(FirebaseAppHosting.this, "PATCH", REST_PATH, content, com.google.api.services.firebaseapphosting.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier. The resource name of the backend. Format:
           * `projects/{project}/locations/{locationId}/backends/{backendId}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Identifier. The resource name of the backend. Format:
         `projects/{project}/locations/{locationId}/backends/{backendId}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Identifier. The resource name of the backend. Format:
           * `projects/{project}/locations/{locationId}/backends/{backendId}`.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Optional. If set to true, and the backend is not found, a new backend will be created.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean allowMissing;

          /** Optional. If set to true, and the backend is not found, a new backend will be created.
           */
          public java.lang.Boolean getAllowMissing() {
            return allowMissing;
          }

          /**
           * Optional. If set to true, and the backend is not found, a new backend will be created.
           */
          public Patch setAllowMissing(java.lang.Boolean allowMissing) {
            this.allowMissing = allowMissing;
            return this;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and t he request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          @com.google.api.client.util.Key
          private java.lang.String requestId;

          /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
         must retry your request, the server will know to ignore the request if it has already been
         completed. The server will guarantee that for at least 60 minutes since the first request. For
         example, consider a situation where you make an initial request and t he request times out. If you
         make the request again with the same request ID, the server can check if original operation with
         the same request ID was received, and if so, will ignore the second request. This prevents clients
         from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
         exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public java.lang.String getRequestId() {
            return requestId;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and t he request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public Patch setRequestId(java.lang.String requestId) {
            this.requestId = requestId;
            return this;
          }

          /**
           * Optional. Field mask is used to specify the fields to be overwritten in the backend
           * resource by the update. The fields specified in the update_mask are relative to the
           * resource, not the full request. A field will be overwritten if it is in the mask. If
           * the user does not provide a mask then all fields will be overwritten.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Optional. Field mask is used to specify the fields to be overwritten in the backend resource by the
         update. The fields specified in the update_mask are relative to the resource, not the full request.
         A field will be overwritten if it is in the mask. If the user does not provide a mask then all
         fields will be overwritten.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Optional. Field mask is used to specify the fields to be overwritten in the backend
           * resource by the update. The fields specified in the update_mask are relative to the
           * resource, not the full request. A field will be overwritten if it is in the mask. If
           * the user does not provide a mask then all fields will be overwritten.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          /**
           * Optional. Indicates that the request should be validated, without persisting the
           * request or updating any resources.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean validateOnly;

          /** Optional. Indicates that the request should be validated, without persisting the request or
         updating any resources.
           */
          public java.lang.Boolean getValidateOnly() {
            return validateOnly;
          }

          /**
           * Optional. Indicates that the request should be validated, without persisting the
           * request or updating any resources.
           */
          public Patch setValidateOnly(java.lang.Boolean validateOnly) {
            this.validateOnly = validateOnly;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the Builds collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code FirebaseAppHosting firebaseapphosting = new FirebaseAppHosting(...);}
         *   {@code FirebaseAppHosting.Builds.List request = firebaseapphosting.builds().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Builds builds() {
          return new Builds();
        }

        /**
         * The "builds" collection of methods.
         */
        public class Builds {

          /**
           * Creates a new build for a backend.
           *
           * Create a request for the method "builds.create".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent backend in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
           * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Build}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.firebaseapphosting.v1.model.Build content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+parent}/builds";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+$");

            /**
             * Creates a new build for a backend.
             *
             * Create a request for the method "builds.create".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link Create#execute()} method to invoke the remote
             * operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent backend in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
             * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Build}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.firebaseapphosting.v1.model.Build content) {
              super(FirebaseAppHosting.this, "POST", REST_PATH, content, com.google.api.services.firebaseapphosting.v1.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent backend in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent backend in the format:
           `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent backend in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Required. Desired ID of the build being created. */
            @com.google.api.client.util.Key
            private java.lang.String buildId;

            /** Required. Desired ID of the build being created.
             */
            public java.lang.String getBuildId() {
              return buildId;
            }

            /** Required. Desired ID of the build being created. */
            public Create setBuildId(java.lang.String buildId) {
              this.buildId = buildId;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes since the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Create setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /**
             * Optional. Indicates that the request should be validated and default values
             * populated, without persisting the request or creating any resources.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. Indicates that the request should be validated and default values populated, without
           persisting the request or creating any resources.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. Indicates that the request should be validated and default values
             * populated, without persisting the request or creating any resources.
             */
            public Create setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a single build.
           *
           * Create a request for the method "builds.delete".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the resource in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+/builds/[^/]+$");

            /**
             * Deletes a single build.
             *
             * Create a request for the method "builds.delete".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
             * operation. <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the resource in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(FirebaseAppHosting.this, "DELETE", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/builds/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the resource in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the resource in the format:
           `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the resource in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/builds/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. If the client provided etag is out of date, delete will be returned
             * FAILED_PRECONDITION error.
             */
            @com.google.api.client.util.Key
            private java.lang.String etag;

            /** Optional. If the client provided etag is out of date, delete will be returned FAILED_PRECONDITION
           error.
             */
            public java.lang.String getEtag() {
              return etag;
            }

            /**
             * Optional. If the client provided etag is out of date, delete will be returned
             * FAILED_PRECONDITION error.
             */
            public Delete setEtag(java.lang.String etag) {
              this.etag = etag;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * after the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes after the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * after the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Delete setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /**
             * Optional. Indicates that the request should be validated and default values
             * populated, without persisting the request or deleting any resources.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. Indicates that the request should be validated and default values populated, without
           persisting the request or deleting any resources.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. Indicates that the request should be validated and default values
             * populated, without persisting the request or deleting any resources.
             */
            public Delete setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets information about a build.
           *
           * Create a request for the method "builds.get".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the resource in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Build> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+/builds/[^/]+$");

            /**
             * Gets information about a build.
             *
             * Create a request for the method "builds.get".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             * <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the resource in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(FirebaseAppHosting.this, "GET", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.Build.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/builds/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the resource in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the resource in the format:
           `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the resource in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/builds/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists builds in a given project, location, and backend.
           *
           * Create a request for the method "builds.list".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent backend in the form
           *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.ListBuildsResponse> {

            private static final String REST_PATH = "v1/{+parent}/builds";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+$");

            /**
             * Lists builds in a given project, location, and backend.
             *
             * Create a request for the method "builds.list".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             * <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent backend in the form
           *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(FirebaseAppHosting.this, "GET", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.ListBuildsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent backend in the form
             * `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent backend in the form
           `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent backend in the form
             * `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Optional. A filter to narrow down results to a preferred subset. Learn more about
             * filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
             */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** Optional. A filter to narrow down results to a preferred subset. Learn more about filtering in
           Google's [AIP 160 standard](https://google.aip.dev/160).
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /**
             * Optional. A filter to narrow down results to a preferred subset. Learn more about
             * filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
             */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /**
             * Optional. Hint for how to order the results. Supported fields are `name` and
             * `createTime`. To specify descending order, append a `desc` suffix.
             */
            @com.google.api.client.util.Key
            private java.lang.String orderBy;

            /** Optional. Hint for how to order the results. Supported fields are `name` and `createTime`. To
           specify descending order, append a `desc` suffix.
             */
            public java.lang.String getOrderBy() {
              return orderBy;
            }

            /**
             * Optional. Hint for how to order the results. Supported fields are `name` and
             * `createTime`. To specify descending order, append a `desc` suffix.
             */
            public List setOrderBy(java.lang.String orderBy) {
              this.orderBy = orderBy;
              return this;
            }

            /**
             * Optional. The maximum number of results to return. If not set, the service selects a
             * default.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. The maximum number of results to return. If not set, the service selects a default.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * Optional. The maximum number of results to return. If not set, the service selects a
             * default.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * Optional. A page token received from the nextPageToken field in the response. Send
             * that page token to receive the subsequent page.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. A page token received from the nextPageToken field in the response. Send that page token
           to receive the subsequent page.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * Optional. A page token received from the nextPageToken field in the response. Send
             * that page token to receive the subsequent page.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            /**
             * Optional. If true, the request returns soft-deleted resources that haven't been
             * fully-deleted yet.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean showDeleted;

            /** Optional. If true, the request returns soft-deleted resources that haven't been fully-deleted yet.
             */
            public java.lang.Boolean getShowDeleted() {
              return showDeleted;
            }

            /**
             * Optional. If true, the request returns soft-deleted resources that haven't been
             * fully-deleted yet.
             */
            public List setShowDeleted(java.lang.Boolean showDeleted) {
              this.showDeleted = showDeleted;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Domains collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code FirebaseAppHosting firebaseapphosting = new FirebaseAppHosting(...);}
         *   {@code FirebaseAppHosting.Domains.List request = firebaseapphosting.domains().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Domains domains() {
          return new Domains();
        }

        /**
         * The "domains" collection of methods.
         */
        public class Domains {

          /**
           * Links a new domain to a backend.
           *
           * Create a request for the method "domains.create".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent backend in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
           * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Domain}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.firebaseapphosting.v1.model.Domain content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+parent}/domains";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+$");

            /**
             * Links a new domain to a backend.
             *
             * Create a request for the method "domains.create".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link Create#execute()} method to invoke the remote
             * operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent backend in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
             * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Domain}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.firebaseapphosting.v1.model.Domain content) {
              super(FirebaseAppHosting.this, "POST", REST_PATH, content, com.google.api.services.firebaseapphosting.v1.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent backend in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent backend in the format:
           `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent backend in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Required. Id of the domain to create. Must be a valid domain name. */
            @com.google.api.client.util.Key
            private java.lang.String domainId;

            /** Required. Id of the domain to create. Must be a valid domain name.
             */
            public java.lang.String getDomainId() {
              return domainId;
            }

            /** Required. Id of the domain to create. Must be a valid domain name. */
            public Create setDomainId(java.lang.String domainId) {
              this.domainId = domainId;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes since the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Create setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /**
             * Optional. Indicates that the request should be validated and default values
             * populated, without persisting the request or creating any resources.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. Indicates that the request should be validated and default values populated, without
           persisting the request or creating any resources.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. Indicates that the request should be validated and default values
             * populated, without persisting the request or creating any resources.
             */
            public Create setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a single domain.
           *
           * Create a request for the method "domains.delete".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the resource in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+/domains/[^/]+$");

            /**
             * Deletes a single domain.
             *
             * Create a request for the method "domains.delete".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
             * operation. <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the resource in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(FirebaseAppHosting.this, "DELETE", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/domains/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the resource in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the resource in the format:
           `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the resource in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/domains/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. If the client provided etag is out of date, delete will be returned
             * FAILED_PRECONDITION error.
             */
            @com.google.api.client.util.Key
            private java.lang.String etag;

            /** Optional. If the client provided etag is out of date, delete will be returned FAILED_PRECONDITION
           error.
             */
            public java.lang.String getEtag() {
              return etag;
            }

            /**
             * Optional. If the client provided etag is out of date, delete will be returned
             * FAILED_PRECONDITION error.
             */
            public Delete setEtag(java.lang.String etag) {
              this.etag = etag;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * after the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes after the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * after the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Delete setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /**
             * Optional. Indicates that the request should be validated and default values
             * populated, without persisting the request or deleting any resources.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. Indicates that the request should be validated and default values populated, without
           persisting the request or deleting any resources.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. Indicates that the request should be validated and default values
             * populated, without persisting the request or deleting any resources.
             */
            public Delete setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets information about a domain.
           *
           * Create a request for the method "domains.get".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the resource in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Domain> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+/domains/[^/]+$");

            /**
             * Gets information about a domain.
             *
             * Create a request for the method "domains.get".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             * <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the resource in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(FirebaseAppHosting.this, "GET", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.Domain.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/domains/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the resource in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the resource in the format:
           `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the resource in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/domains/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists domains of a backend.
           *
           * Create a request for the method "domains.list".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent backend in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.ListDomainsResponse> {

            private static final String REST_PATH = "v1/{+parent}/domains";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+$");

            /**
             * Lists domains of a backend.
             *
             * Create a request for the method "domains.list".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             * <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent backend in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(FirebaseAppHosting.this, "GET", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.ListDomainsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent backend in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent backend in the format:
           `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent backend in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Optional. A filter to narrow down results to a preferred subset. Learn more about
             * filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
             */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** Optional. A filter to narrow down results to a preferred subset. Learn more about filtering in
           Google's [AIP 160 standard](https://google.aip.dev/160).
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /**
             * Optional. A filter to narrow down results to a preferred subset. Learn more about
             * filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
             */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /**
             * Optional. Hint for how to order the results. Supported fields are `name` and
             * `createTime`. To specify descending order, append a `desc` suffix.
             */
            @com.google.api.client.util.Key
            private java.lang.String orderBy;

            /** Optional. Hint for how to order the results. Supported fields are `name` and `createTime`. To
           specify descending order, append a `desc` suffix.
             */
            public java.lang.String getOrderBy() {
              return orderBy;
            }

            /**
             * Optional. Hint for how to order the results. Supported fields are `name` and
             * `createTime`. To specify descending order, append a `desc` suffix.
             */
            public List setOrderBy(java.lang.String orderBy) {
              this.orderBy = orderBy;
              return this;
            }

            /**
             * Optional. The maximum number of results to return. If not set, the service selects a
             * default.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. The maximum number of results to return. If not set, the service selects a default.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * Optional. The maximum number of results to return. If not set, the service selects a
             * default.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * Optional. A page token received from the nextPageToken field in the response. Send
             * that page token to receive the subsequent page.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. A page token received from the nextPageToken field in the response. Send that page token
           to receive the subsequent page.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * Optional. A page token received from the nextPageToken field in the response. Send
             * that page token to receive the subsequent page.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            /**
             * Optional. If true, the request returns soft-deleted resources that haven't been
             * fully-deleted yet.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean showDeleted;

            /** Optional. If true, the request returns soft-deleted resources that haven't been fully-deleted yet.
             */
            public java.lang.Boolean getShowDeleted() {
              return showDeleted;
            }

            /**
             * Optional. If true, the request returns soft-deleted resources that haven't been
             * fully-deleted yet.
             */
            public List setShowDeleted(java.lang.Boolean showDeleted) {
              this.showDeleted = showDeleted;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates the information for a single domain.
           *
           * Create a request for the method "domains.patch".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name Identifier. The resource name of the domain, e.g.
           *        `/projects/p/locations/l/backends/b/domains/foo.com`
           * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Domain}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.firebaseapphosting.v1.model.Domain content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+/domains/[^/]+$");

            /**
             * Updates the information for a single domain.
             *
             * Create a request for the method "domains.patch".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
             * operation. <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Identifier. The resource name of the domain, e.g.
           *        `/projects/p/locations/l/backends/b/domains/foo.com`
             * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Domain}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.firebaseapphosting.v1.model.Domain content) {
              super(FirebaseAppHosting.this, "PATCH", REST_PATH, content, com.google.api.services.firebaseapphosting.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/domains/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Identifier. The resource name of the domain, e.g.
             * `/projects/p/locations/l/backends/b/domains/foo.com`
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Identifier. The resource name of the domain, e.g.
           `/projects/p/locations/l/backends/b/domains/foo.com`
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Identifier. The resource name of the domain, e.g.
             * `/projects/p/locations/l/backends/b/domains/foo.com`
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/domains/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. If set to true, and the domain is not found, a new domain will be created.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean allowMissing;

            /** Optional. If set to true, and the domain is not found, a new domain will be created.
             */
            public java.lang.Boolean getAllowMissing() {
              return allowMissing;
            }

            /**
             * Optional. If set to true, and the domain is not found, a new domain will be created.
             */
            public Patch setAllowMissing(java.lang.Boolean allowMissing) {
              this.allowMissing = allowMissing;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes since the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Patch setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /**
             * Optional. Field mask is used to specify the fields to be overwritten in the Domain
             * resource by the update. The fields specified in the update_mask are relative to the
             * resource, not the full request. A field will be overwritten if it is in the mask. If
             * the user does not provide a mask then all fields will be overwritten.
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Optional. Field mask is used to specify the fields to be overwritten in the Domain resource by the
           update. The fields specified in the update_mask are relative to the resource, not the full request.
           A field will be overwritten if it is in the mask. If the user does not provide a mask then all
           fields will be overwritten.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * Optional. Field mask is used to specify the fields to be overwritten in the Domain
             * resource by the update. The fields specified in the update_mask are relative to the
             * resource, not the full request. A field will be overwritten if it is in the mask. If
             * the user does not provide a mask then all fields will be overwritten.
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            /**
             * Optional. Indicates that the request should be validated and default values
             * populated, without persisting the request or modifying any resources.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. Indicates that the request should be validated and default values populated, without
           persisting the request or modifying any resources.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. Indicates that the request should be validated and default values
             * populated, without persisting the request or modifying any resources.
             */
            public Patch setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Rollouts collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code FirebaseAppHosting firebaseapphosting = new FirebaseAppHosting(...);}
         *   {@code FirebaseAppHosting.Rollouts.List request = firebaseapphosting.rollouts().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Rollouts rollouts() {
          return new Rollouts();
        }

        /**
         * The "rollouts" collection of methods.
         */
        public class Rollouts {

          /**
           * Creates a new rollout for a backend.
           *
           * Create a request for the method "rollouts.create".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent backend in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
           * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Rollout}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.firebaseapphosting.v1.model.Rollout content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+parent}/rollouts";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+$");

            /**
             * Creates a new rollout for a backend.
             *
             * Create a request for the method "rollouts.create".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link Create#execute()} method to invoke the remote
             * operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent backend in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
             * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Rollout}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.firebaseapphosting.v1.model.Rollout content) {
              super(FirebaseAppHosting.this, "POST", REST_PATH, content, com.google.api.services.firebaseapphosting.v1.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent backend in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent backend in the format:
           `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent backend in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes since the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Create setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /** Optional. Desired ID of the rollout being created. */
            @com.google.api.client.util.Key
            private java.lang.String rolloutId;

            /** Optional. Desired ID of the rollout being created.
             */
            public java.lang.String getRolloutId() {
              return rolloutId;
            }

            /** Optional. Desired ID of the rollout being created. */
            public Create setRolloutId(java.lang.String rolloutId) {
              this.rolloutId = rolloutId;
              return this;
            }

            /**
             * Optional. Indicates that the request should be validated and default values
             * populated, without persisting the request or creating any resources.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. Indicates that the request should be validated and default values populated, without
           persisting the request or creating any resources.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. Indicates that the request should be validated and default values
             * populated, without persisting the request or creating any resources.
             */
            public Create setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Gets information about a rollout.
           *
           * Create a request for the method "rollouts.get".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the resource in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/rollouts/{rolloutId}`.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Rollout> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+/rollouts/[^/]+$");

            /**
             * Gets information about a rollout.
             *
             * Create a request for the method "rollouts.get".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             * <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the resource in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/rollouts/{rolloutId}`.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(FirebaseAppHosting.this, "GET", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.Rollout.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/rollouts/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the resource in the format: `projects/{project}/locations/{location
             * Id}/backends/{backendId}/rollouts/{rolloutId}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the resource in the format:
           `projects/{project}/locations/{locationId}/backends/{backendId}/rollouts/{rolloutId}`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the resource in the format: `projects/{project}/locations/{location
             * Id}/backends/{backendId}/rollouts/{rolloutId}`.
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/rollouts/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists rollouts for a backend.
           *
           * Create a request for the method "rollouts.list".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent backend in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.ListRolloutsResponse> {

            private static final String REST_PATH = "v1/{+parent}/rollouts";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+$");

            /**
             * Lists rollouts for a backend.
             *
             * Create a request for the method "rollouts.list".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             * <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent backend in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}`.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(FirebaseAppHosting.this, "GET", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.ListRolloutsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent backend in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent backend in the format:
           `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent backend in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}`.
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Optional. A filter to narrow down results to a preferred subset. Learn more about
             * filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
             */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** Optional. A filter to narrow down results to a preferred subset. Learn more about filtering in
           Google's [AIP 160 standard](https://google.aip.dev/160).
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /**
             * Optional. A filter to narrow down results to a preferred subset. Learn more about
             * filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
             */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /**
             * Optional. Hint for how to order the results. Supported fields are `name` and
             * `createTime`. To specify descending order, append a `desc` suffix.
             */
            @com.google.api.client.util.Key
            private java.lang.String orderBy;

            /** Optional. Hint for how to order the results. Supported fields are `name` and `createTime`. To
           specify descending order, append a `desc` suffix.
             */
            public java.lang.String getOrderBy() {
              return orderBy;
            }

            /**
             * Optional. Hint for how to order the results. Supported fields are `name` and
             * `createTime`. To specify descending order, append a `desc` suffix.
             */
            public List setOrderBy(java.lang.String orderBy) {
              this.orderBy = orderBy;
              return this;
            }

            /**
             * Optional. The maximum number of results to return. If not set, the service selects a
             * default.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. The maximum number of results to return. If not set, the service selects a default.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * Optional. The maximum number of results to return. If not set, the service selects a
             * default.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * Optional. A page token received from the nextPageToken field in the response. Send
             * that page token to receive the subsequent page.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. A page token received from the nextPageToken field in the response. Send that page token
           to receive the subsequent page.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * Optional. A page token received from the nextPageToken field in the response. Send
             * that page token to receive the subsequent page.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            /**
             * Optional. If true, the request returns soft-deleted resources that haven't been
             * fully-deleted yet.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean showDeleted;

            /** Optional. If true, the request returns soft-deleted resources that haven't been fully-deleted yet.
             */
            public java.lang.Boolean getShowDeleted() {
              return showDeleted;
            }

            /**
             * Optional. If true, the request returns soft-deleted resources that haven't been
             * fully-deleted yet.
             */
            public List setShowDeleted(java.lang.Boolean showDeleted) {
              this.showDeleted = showDeleted;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Traffic collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code FirebaseAppHosting firebaseapphosting = new FirebaseAppHosting(...);}
         *   {@code FirebaseAppHosting.Traffic.List request = firebaseapphosting.traffic().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Traffic traffic() {
          return new Traffic();
        }

        /**
         * The "traffic" collection of methods.
         */
        public class Traffic {

          /**
           * Gets information about a backend's traffic.
           *
           * Create a request for the method "traffic.get".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the resource in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Traffic> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+/traffic$");

            /**
             * Gets information about a backend's traffic.
             *
             * Create a request for the method "traffic.get".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             * <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the resource in the format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(FirebaseAppHosting.this, "GET", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.Traffic.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/traffic$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Name of the resource in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the resource in the format:
           `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Name of the resource in the format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/traffic$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Updates a backend's traffic.
           *
           * Create a request for the method "traffic.patch".
           *
           * This request holds the parameters needed by the firebaseapphosting server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name Identifier. The resource name of the backend's traffic. Format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
           * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Traffic}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.firebaseapphosting.v1.model.Traffic content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/backends/[^/]+/traffic$");

            /**
             * Updates a backend's traffic.
             *
             * Create a request for the method "traffic.patch".
             *
             * This request holds the parameters needed by the the firebaseapphosting server.  After setting
             * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
             * operation. <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Identifier. The resource name of the backend's traffic. Format:
           *        `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
             * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.Traffic}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.firebaseapphosting.v1.model.Traffic content) {
              super(FirebaseAppHosting.this, "PATCH", REST_PATH, content, com.google.api.services.firebaseapphosting.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/traffic$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Identifier. The resource name of the backend's traffic. Format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Identifier. The resource name of the backend's traffic. Format:
           `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Identifier. The resource name of the backend's traffic. Format:
             * `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/backends/[^/]+/traffic$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and t he request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes since the first request. For
           example, consider a situation where you make an initial request and t he request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and t he request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Patch setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /**
             * Optional. Field mask is used to specify the fields to be overwritten in the traffic
             * resource by the update. The fields specified in the update_mask are relative to the
             * resource, not the full request. A field will be overwritten if it is in the mask. If
             * the user does not provide a mask then all fields will be overwritten.
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Optional. Field mask is used to specify the fields to be overwritten in the traffic resource by the
           update. The fields specified in the update_mask are relative to the resource, not the full request.
           A field will be overwritten if it is in the mask. If the user does not provide a mask then all
           fields will be overwritten.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * Optional. Field mask is used to specify the fields to be overwritten in the traffic
             * resource by the update. The fields specified in the update_mask are relative to the
             * resource, not the full request. A field will be overwritten if it is in the mask. If
             * the user does not provide a mask then all fields will be overwritten.
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            /**
             * Optional. Indicates that the request should be validated, without persisting the
             * request or updating any resources.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. Indicates that the request should be validated, without persisting the request or
           updating any resources.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. Indicates that the request should be validated, without persisting the
             * request or updating any resources.
             */
            public Patch setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

        }
      }
      /**
       * An accessor for creating requests from the Operations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseAppHosting firebaseapphosting = new FirebaseAppHosting(...);}
       *   {@code FirebaseAppHosting.Operations.List request = firebaseapphosting.operations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Operations operations() {
        return new Operations();
      }

      /**
       * The "operations" collection of methods.
       */
      public class Operations {

        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
         * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
         * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
         * methods to check whether the cancellation succeeded or whether the operation completed despite
         * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
         * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
         * `Code.CANCELLED`.
         *
         * Create a request for the method "operations.cancel".
         *
         * This request holds the parameters needed by the firebaseapphosting server.  After setting any
         * optional parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be cancelled.
         * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.CancelOperationRequest}
         * @return the request
         */
        public Cancel cancel(java.lang.String name, com.google.api.services.firebaseapphosting.v1.model.CancelOperationRequest content) throws java.io.IOException {
          Cancel result = new Cancel(name, content);
          initialize(result);
          return result;
        }

        public class Cancel extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}:cancel";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
           * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
           * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
           * methods to check whether the cancellation succeeded or whether the operation completed despite
           * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
           * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
           * `Code.CANCELLED`.
           *
           * Create a request for the method "operations.cancel".
           *
           * This request holds the parameters needed by the the firebaseapphosting server.  After setting
           * any optional parameters, call the {@link Cancel#execute()} method to invoke the remote
           * operation. <p> {@link
           * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be cancelled.
           * @param content the {@link com.google.api.services.firebaseapphosting.v1.model.CancelOperationRequest}
           * @since 1.13
           */
          protected Cancel(java.lang.String name, com.google.api.services.firebaseapphosting.v1.model.CancelOperationRequest content) {
            super(FirebaseAppHosting.this, "POST", REST_PATH, content, com.google.api.services.firebaseapphosting.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Cancel set$Xgafv(java.lang.String $Xgafv) {
            return (Cancel) super.set$Xgafv($Xgafv);
          }

          @Override
          public Cancel setAccessToken(java.lang.String accessToken) {
            return (Cancel) super.setAccessToken(accessToken);
          }

          @Override
          public Cancel setAlt(java.lang.String alt) {
            return (Cancel) super.setAlt(alt);
          }

          @Override
          public Cancel setCallback(java.lang.String callback) {
            return (Cancel) super.setCallback(callback);
          }

          @Override
          public Cancel setFields(java.lang.String fields) {
            return (Cancel) super.setFields(fields);
          }

          @Override
          public Cancel setKey(java.lang.String key) {
            return (Cancel) super.setKey(key);
          }

          @Override
          public Cancel setOauthToken(java.lang.String oauthToken) {
            return (Cancel) super.setOauthToken(oauthToken);
          }

          @Override
          public Cancel setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Cancel) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Cancel setQuotaUser(java.lang.String quotaUser) {
            return (Cancel) super.setQuotaUser(quotaUser);
          }

          @Override
          public Cancel setUploadType(java.lang.String uploadType) {
            return (Cancel) super.setUploadType(uploadType);
          }

          @Override
          public Cancel setUploadProtocol(java.lang.String uploadProtocol) {
            return (Cancel) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be cancelled. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be cancelled.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be cancelled. */
          public Cancel setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Cancel set(String parameterName, Object value) {
            return (Cancel) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested
         * in the operation result. It does not cancel the operation. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.delete".
         *
         * This request holds the parameters needed by the firebaseapphosting server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be deleted.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Deletes a long-running operation. This method indicates that the client is no longer interested
           * in the operation result. It does not cancel the operation. If the server doesn't support this
           * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.delete".
           *
           * This request holds the parameters needed by the the firebaseapphosting server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be deleted.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(FirebaseAppHosting.this, "DELETE", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be deleted. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be deleted.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be deleted. */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets the latest state of a long-running operation. Clients can use this method to poll the
         * operation result at intervals as recommended by the API service.
         *
         * Create a request for the method "operations.get".
         *
         * This request holds the parameters needed by the firebaseapphosting server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Gets the latest state of a long-running operation. Clients can use this method to poll the
           * operation result at intervals as recommended by the API service.
           *
           * Create a request for the method "operations.get".
           *
           * This request holds the parameters needed by the the firebaseapphosting server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(FirebaseAppHosting.this, "GET", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support
         * this method, it returns `UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.list".
         *
         * This request holds the parameters needed by the firebaseapphosting server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation's parent resource.
         * @return the request
         */
        public List list(java.lang.String name) throws java.io.IOException {
          List result = new List(name);
          initialize(result);
          return result;
        }

        public class List extends FirebaseAppHostingRequest<com.google.api.services.firebaseapphosting.v1.model.ListOperationsResponse> {

          private static final String REST_PATH = "v1/{+name}/operations";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists operations that match the specified filter in the request. If the server doesn't support
           * this method, it returns `UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.list".
           *
           * This request holds the parameters needed by the the firebaseapphosting server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation's parent resource.
           * @since 1.13
           */
          protected List(java.lang.String name) {
            super(FirebaseAppHosting.this, "GET", REST_PATH, null, com.google.api.services.firebaseapphosting.v1.model.ListOperationsResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation's parent resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation's parent resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation's parent resource. */
          public List setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /** The standard list filter. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** The standard list filter.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** The standard list filter. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** The standard list page size. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The standard list page size.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The standard list page size. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The standard list page token. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The standard list page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The standard list page token. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link FirebaseAppHosting}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link FirebaseAppHosting}. */
    @Override
    public FirebaseAppHosting build() {
      return new FirebaseAppHosting(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FirebaseAppHostingRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFirebaseAppHostingRequestInitializer(
        FirebaseAppHostingRequestInitializer firebaseapphostingRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(firebaseapphostingRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
