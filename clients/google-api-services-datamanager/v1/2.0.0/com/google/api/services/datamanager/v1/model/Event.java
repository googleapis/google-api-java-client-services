/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datamanager.v1.model;

/**
 * An event representing a user interaction with an advertiser's website or app.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Data Manager API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Event extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Identifiers and other information used to match the conversion event with other
   * online activity (such as ad clicks).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AdIdentifiers adIdentifiers;

  /**
   * Optional. Information about the transaction and items associated with the event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CartData cartData;

  /**
   * Optional. Information about whether the associated user has provided different types of
   * consent.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Consent consent;

  /**
   * Optional. The conversion value associated with the event, for value-based conversions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double conversionValue;

  /**
   * Optional. The currency code associated with all monetary values within this event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String currency;

  /**
   * Optional. Additional key/value pair information to send to the conversion containers
   * (conversion action or FL activity).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CustomVariable> customVariables;

  static {
    // hack to force ProGuard to consider CustomVariable used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CustomVariable.class);
  }

  /**
   * Optional. Reference string used to determine the destination. If empty, the event will be sent
   * to all destinations in the request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> destinationReferences;

  /**
   * Optional. Information gathered about the device being used (if any) when the event happened.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DeviceInfo eventDeviceInfo;

  /**
   * Optional. Signal for where the event happened (web, app, in-store, etc.).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String eventSource;

  /**
   * Required. The time the event occurred.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String eventTimestamp;

  /**
   * Optional. A list of key/value pairs for experimental fields that may eventually be promoted to
   * be part of the API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ExperimentalField> experimentalFields;

  /**
   * Optional. The last time the event was updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lastUpdatedTimestamp;

  /**
   * Optional. The unique identifier for this event. Required for conversions using multiple data
   * sources.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String transactionId;

  /**
   * Optional. Pieces of user provided data, representing the user the event is associated with.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private UserData userData;

  /**
   * Optional. Advertiser-assessed information about the user at the time that the event happened.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private UserProperties userProperties;

  /**
   * Optional. Identifiers and other information used to match the conversion event with other
   * online activity (such as ad clicks).
   * @return value or {@code null} for none
   */
  public AdIdentifiers getAdIdentifiers() {
    return adIdentifiers;
  }

  /**
   * Optional. Identifiers and other information used to match the conversion event with other
   * online activity (such as ad clicks).
   * @param adIdentifiers adIdentifiers or {@code null} for none
   */
  public Event setAdIdentifiers(AdIdentifiers adIdentifiers) {
    this.adIdentifiers = adIdentifiers;
    return this;
  }

  /**
   * Optional. Information about the transaction and items associated with the event.
   * @return value or {@code null} for none
   */
  public CartData getCartData() {
    return cartData;
  }

  /**
   * Optional. Information about the transaction and items associated with the event.
   * @param cartData cartData or {@code null} for none
   */
  public Event setCartData(CartData cartData) {
    this.cartData = cartData;
    return this;
  }

  /**
   * Optional. Information about whether the associated user has provided different types of
   * consent.
   * @return value or {@code null} for none
   */
  public Consent getConsent() {
    return consent;
  }

  /**
   * Optional. Information about whether the associated user has provided different types of
   * consent.
   * @param consent consent or {@code null} for none
   */
  public Event setConsent(Consent consent) {
    this.consent = consent;
    return this;
  }

  /**
   * Optional. The conversion value associated with the event, for value-based conversions.
   * @return value or {@code null} for none
   */
  public java.lang.Double getConversionValue() {
    return conversionValue;
  }

  /**
   * Optional. The conversion value associated with the event, for value-based conversions.
   * @param conversionValue conversionValue or {@code null} for none
   */
  public Event setConversionValue(java.lang.Double conversionValue) {
    this.conversionValue = conversionValue;
    return this;
  }

  /**
   * Optional. The currency code associated with all monetary values within this event.
   * @return value or {@code null} for none
   */
  public java.lang.String getCurrency() {
    return currency;
  }

  /**
   * Optional. The currency code associated with all monetary values within this event.
   * @param currency currency or {@code null} for none
   */
  public Event setCurrency(java.lang.String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Optional. Additional key/value pair information to send to the conversion containers
   * (conversion action or FL activity).
   * @return value or {@code null} for none
   */
  public java.util.List<CustomVariable> getCustomVariables() {
    return customVariables;
  }

  /**
   * Optional. Additional key/value pair information to send to the conversion containers
   * (conversion action or FL activity).
   * @param customVariables customVariables or {@code null} for none
   */
  public Event setCustomVariables(java.util.List<CustomVariable> customVariables) {
    this.customVariables = customVariables;
    return this;
  }

  /**
   * Optional. Reference string used to determine the destination. If empty, the event will be sent
   * to all destinations in the request.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDestinationReferences() {
    return destinationReferences;
  }

  /**
   * Optional. Reference string used to determine the destination. If empty, the event will be sent
   * to all destinations in the request.
   * @param destinationReferences destinationReferences or {@code null} for none
   */
  public Event setDestinationReferences(java.util.List<java.lang.String> destinationReferences) {
    this.destinationReferences = destinationReferences;
    return this;
  }

  /**
   * Optional. Information gathered about the device being used (if any) when the event happened.
   * @return value or {@code null} for none
   */
  public DeviceInfo getEventDeviceInfo() {
    return eventDeviceInfo;
  }

  /**
   * Optional. Information gathered about the device being used (if any) when the event happened.
   * @param eventDeviceInfo eventDeviceInfo or {@code null} for none
   */
  public Event setEventDeviceInfo(DeviceInfo eventDeviceInfo) {
    this.eventDeviceInfo = eventDeviceInfo;
    return this;
  }

  /**
   * Optional. Signal for where the event happened (web, app, in-store, etc.).
   * @return value or {@code null} for none
   */
  public java.lang.String getEventSource() {
    return eventSource;
  }

  /**
   * Optional. Signal for where the event happened (web, app, in-store, etc.).
   * @param eventSource eventSource or {@code null} for none
   */
  public Event setEventSource(java.lang.String eventSource) {
    this.eventSource = eventSource;
    return this;
  }

  /**
   * Required. The time the event occurred.
   * @return value or {@code null} for none
   */
  public String getEventTimestamp() {
    return eventTimestamp;
  }

  /**
   * Required. The time the event occurred.
   * @param eventTimestamp eventTimestamp or {@code null} for none
   */
  public Event setEventTimestamp(String eventTimestamp) {
    this.eventTimestamp = eventTimestamp;
    return this;
  }

  /**
   * Optional. A list of key/value pairs for experimental fields that may eventually be promoted to
   * be part of the API.
   * @return value or {@code null} for none
   */
  public java.util.List<ExperimentalField> getExperimentalFields() {
    return experimentalFields;
  }

  /**
   * Optional. A list of key/value pairs for experimental fields that may eventually be promoted to
   * be part of the API.
   * @param experimentalFields experimentalFields or {@code null} for none
   */
  public Event setExperimentalFields(java.util.List<ExperimentalField> experimentalFields) {
    this.experimentalFields = experimentalFields;
    return this;
  }

  /**
   * Optional. The last time the event was updated.
   * @return value or {@code null} for none
   */
  public String getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }

  /**
   * Optional. The last time the event was updated.
   * @param lastUpdatedTimestamp lastUpdatedTimestamp or {@code null} for none
   */
  public Event setLastUpdatedTimestamp(String lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
    return this;
  }

  /**
   * Optional. The unique identifier for this event. Required for conversions using multiple data
   * sources.
   * @return value or {@code null} for none
   */
  public java.lang.String getTransactionId() {
    return transactionId;
  }

  /**
   * Optional. The unique identifier for this event. Required for conversions using multiple data
   * sources.
   * @param transactionId transactionId or {@code null} for none
   */
  public Event setTransactionId(java.lang.String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Optional. Pieces of user provided data, representing the user the event is associated with.
   * @return value or {@code null} for none
   */
  public UserData getUserData() {
    return userData;
  }

  /**
   * Optional. Pieces of user provided data, representing the user the event is associated with.
   * @param userData userData or {@code null} for none
   */
  public Event setUserData(UserData userData) {
    this.userData = userData;
    return this;
  }

  /**
   * Optional. Advertiser-assessed information about the user at the time that the event happened.
   * @return value or {@code null} for none
   */
  public UserProperties getUserProperties() {
    return userProperties;
  }

  /**
   * Optional. Advertiser-assessed information about the user at the time that the event happened.
   * @param userProperties userProperties or {@code null} for none
   */
  public Event setUserProperties(UserProperties userProperties) {
    this.userProperties = userProperties;
    return this;
  }

  @Override
  public Event set(String fieldName, Object value) {
    return (Event) super.set(fieldName, value);
  }

  @Override
  public Event clone() {
    return (Event) super.clone();
  }

}
