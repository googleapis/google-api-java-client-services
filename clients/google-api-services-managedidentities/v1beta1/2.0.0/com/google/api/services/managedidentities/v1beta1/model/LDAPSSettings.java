/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.managedidentities.v1beta1.model;

/**
 * LDAPSSettings represents the ldaps settings for domain resource. LDAP is the Lightweight
 * Directory Access Protocol, defined in https://tools.ietf.org/html/rfc4511. The settings object
 * configures LDAP over SSL/TLS, whether it is over port 636 or the StartTLS operation. If
 * LDAPSSettings is being changed, it will be placed into the UPDATING state, which indicates that
 * the resource is being reconciled. At this point, Get will reflect an intermediate state.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Managed Service for Microsoft Active Directory API.
 * For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LDAPSSettings extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The certificate used to configure LDAPS. Certificates can be chained with a
   * maximum length of 15.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Certificate certificate;

  /**
   * Input only. The password used to encrypt the uploaded pfx certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String certificatePassword;

  /**
   * Input only. The uploaded PKCS12-formatted certificate to configure LDAPS with. It will enable
   * the domain controllers in this domain to accept LDAPS connections (either LDAP over SSL/TLS or
   * the StartTLS operation). A valid certificate chain must form a valid x.509 certificate chain
   * (or be comprised of a single self-signed certificate. It must be encrypted with either: 1)
   * PBES2 + PBKDF2 + AES256 encryption and SHA256 PRF; or 2) pbeWithSHA1And3-KeyTripleDES-CBC
   * Private key must be included for the leaf / single self-signed certificate. Note: For a fqdn
   * your-example-domain.com, the wildcard fqdn is *.your-example-domain.com. Specifically the leaf
   * certificate must have: - Either a blank subject or a subject with CN matching the wildcard
   * fqdn. - Exactly two SANs - the fqdn and wildcard fqdn. - Encipherment and digital key signature
   * key usages. - Server authentication extended key usage (OID=1.3.6.1.5.5.7.3.1) - Private key
   * must be in one of the following formats: RSA, ECDSA, ED25519. - Private key must have
   * appropriate key length: 2048 for RSA, 256 for ECDSA - Signature algorithm of the leaf
   * certificate cannot be MD2, MD5 or SHA1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String certificatePfx;

  /**
   * The resource name of the LDAPS settings. Uses the form:
   * `projects/{project}/locations/{location}/domains/{domain}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The current state of this LDAPS settings.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Last update time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. The certificate used to configure LDAPS. Certificates can be chained with a
   * maximum length of 15.
   * @return value or {@code null} for none
   */
  public Certificate getCertificate() {
    return certificate;
  }

  /**
   * Output only. The certificate used to configure LDAPS. Certificates can be chained with a
   * maximum length of 15.
   * @param certificate certificate or {@code null} for none
   */
  public LDAPSSettings setCertificate(Certificate certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Input only. The password used to encrypt the uploaded pfx certificate.
   * @return value or {@code null} for none
   */
  public java.lang.String getCertificatePassword() {
    return certificatePassword;
  }

  /**
   * Input only. The password used to encrypt the uploaded pfx certificate.
   * @param certificatePassword certificatePassword or {@code null} for none
   */
  public LDAPSSettings setCertificatePassword(java.lang.String certificatePassword) {
    this.certificatePassword = certificatePassword;
    return this;
  }

  /**
   * Input only. The uploaded PKCS12-formatted certificate to configure LDAPS with. It will enable
   * the domain controllers in this domain to accept LDAPS connections (either LDAP over SSL/TLS or
   * the StartTLS operation). A valid certificate chain must form a valid x.509 certificate chain
   * (or be comprised of a single self-signed certificate. It must be encrypted with either: 1)
   * PBES2 + PBKDF2 + AES256 encryption and SHA256 PRF; or 2) pbeWithSHA1And3-KeyTripleDES-CBC
   * Private key must be included for the leaf / single self-signed certificate. Note: For a fqdn
   * your-example-domain.com, the wildcard fqdn is *.your-example-domain.com. Specifically the leaf
   * certificate must have: - Either a blank subject or a subject with CN matching the wildcard
   * fqdn. - Exactly two SANs - the fqdn and wildcard fqdn. - Encipherment and digital key signature
   * key usages. - Server authentication extended key usage (OID=1.3.6.1.5.5.7.3.1) - Private key
   * must be in one of the following formats: RSA, ECDSA, ED25519. - Private key must have
   * appropriate key length: 2048 for RSA, 256 for ECDSA - Signature algorithm of the leaf
   * certificate cannot be MD2, MD5 or SHA1.
   * @see #decodeCertificatePfx()
   * @return value or {@code null} for none
   */
  public java.lang.String getCertificatePfx() {
    return certificatePfx;
  }

  /**
   * Input only. The uploaded PKCS12-formatted certificate to configure LDAPS with. It will enable
   * the domain controllers in this domain to accept LDAPS connections (either LDAP over SSL/TLS or
   * the StartTLS operation). A valid certificate chain must form a valid x.509 certificate chain
   * (or be comprised of a single self-signed certificate. It must be encrypted with either: 1)
   * PBES2 + PBKDF2 + AES256 encryption and SHA256 PRF; or 2) pbeWithSHA1And3-KeyTripleDES-CBC
   * Private key must be included for the leaf / single self-signed certificate. Note: For a fqdn
   * your-example-domain.com, the wildcard fqdn is *.your-example-domain.com. Specifically the leaf
   * certificate must have: - Either a blank subject or a subject with CN matching the wildcard
   * fqdn. - Exactly two SANs - the fqdn and wildcard fqdn. - Encipherment and digital key signature
   * key usages. - Server authentication extended key usage (OID=1.3.6.1.5.5.7.3.1) - Private key
   * must be in one of the following formats: RSA, ECDSA, ED25519. - Private key must have
   * appropriate key length: 2048 for RSA, 256 for ECDSA - Signature algorithm of the leaf
   * certificate cannot be MD2, MD5 or SHA1.
   * @see #getCertificatePfx()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeCertificatePfx() {
    return com.google.api.client.util.Base64.decodeBase64(certificatePfx);
  }

  /**
   * Input only. The uploaded PKCS12-formatted certificate to configure LDAPS with. It will enable
   * the domain controllers in this domain to accept LDAPS connections (either LDAP over SSL/TLS or
   * the StartTLS operation). A valid certificate chain must form a valid x.509 certificate chain
   * (or be comprised of a single self-signed certificate. It must be encrypted with either: 1)
   * PBES2 + PBKDF2 + AES256 encryption and SHA256 PRF; or 2) pbeWithSHA1And3-KeyTripleDES-CBC
   * Private key must be included for the leaf / single self-signed certificate. Note: For a fqdn
   * your-example-domain.com, the wildcard fqdn is *.your-example-domain.com. Specifically the leaf
   * certificate must have: - Either a blank subject or a subject with CN matching the wildcard
   * fqdn. - Exactly two SANs - the fqdn and wildcard fqdn. - Encipherment and digital key signature
   * key usages. - Server authentication extended key usage (OID=1.3.6.1.5.5.7.3.1) - Private key
   * must be in one of the following formats: RSA, ECDSA, ED25519. - Private key must have
   * appropriate key length: 2048 for RSA, 256 for ECDSA - Signature algorithm of the leaf
   * certificate cannot be MD2, MD5 or SHA1.
   * @see #encodeCertificatePfx()
   * @param certificatePfx certificatePfx or {@code null} for none
   */
  public LDAPSSettings setCertificatePfx(java.lang.String certificatePfx) {
    this.certificatePfx = certificatePfx;
    return this;
  }

  /**
   * Input only. The uploaded PKCS12-formatted certificate to configure LDAPS with. It will enable
   * the domain controllers in this domain to accept LDAPS connections (either LDAP over SSL/TLS or
   * the StartTLS operation). A valid certificate chain must form a valid x.509 certificate chain
   * (or be comprised of a single self-signed certificate. It must be encrypted with either: 1)
   * PBES2 + PBKDF2 + AES256 encryption and SHA256 PRF; or 2) pbeWithSHA1And3-KeyTripleDES-CBC
   * Private key must be included for the leaf / single self-signed certificate. Note: For a fqdn
   * your-example-domain.com, the wildcard fqdn is *.your-example-domain.com. Specifically the leaf
   * certificate must have: - Either a blank subject or a subject with CN matching the wildcard
   * fqdn. - Exactly two SANs - the fqdn and wildcard fqdn. - Encipherment and digital key signature
   * key usages. - Server authentication extended key usage (OID=1.3.6.1.5.5.7.3.1) - Private key
   * must be in one of the following formats: RSA, ECDSA, ED25519. - Private key must have
   * appropriate key length: 2048 for RSA, 256 for ECDSA - Signature algorithm of the leaf
   * certificate cannot be MD2, MD5 or SHA1.
   * @see #setCertificatePfx()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public LDAPSSettings encodeCertificatePfx(byte[] certificatePfx) {
    this.certificatePfx = com.google.api.client.util.Base64.encodeBase64URLSafeString(certificatePfx);
    return this;
  }

  /**
   * The resource name of the LDAPS settings. Uses the form:
   * `projects/{project}/locations/{location}/domains/{domain}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The resource name of the LDAPS settings. Uses the form:
   * `projects/{project}/locations/{location}/domains/{domain}`.
   * @param name name or {@code null} for none
   */
  public LDAPSSettings setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The current state of this LDAPS settings.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The current state of this LDAPS settings.
   * @param state state or {@code null} for none
   */
  public LDAPSSettings setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Last update time.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Last update time.
   * @param updateTime updateTime or {@code null} for none
   */
  public LDAPSSettings setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public LDAPSSettings set(String fieldName, Object value) {
    return (LDAPSSettings) super.set(fieldName, value);
  }

  @Override
  public LDAPSSettings clone() {
    return (LDAPSSettings) super.clone();
  }

}
