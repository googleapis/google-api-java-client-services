/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Each SubSet contains LocalDescriptors of a specific type. The type indicates which algorithm has
 * been used to generate the descriptors. No enum is defined for the descriptor_type. For most
 * applications it is sufficient to know if two descriptors are of the same or a different type,
 * while ignoring the details of their generation. The descriptor type '0' is reserved and must not
 * be used.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PhotosVisionObjectrecImageTemplateSubSet extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PhotosVisionObjectrecLocalDescriptor> descriptor;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer descriptorType;

  /**
   * Used to indicate if the descriptor is binary or not. When decompressing feature this is useful
   * to decide calling different decompression functions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isBinaryDescriptor;

  /**
   * Used to store the number of descriptors for statistical purposes, if the descriptors themselves
   * are not stored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numDescriptors;

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<PhotosVisionObjectrecLocalDescriptor> getDescriptor() {
    return descriptor;
  }

  /**
   * @param descriptor descriptor or {@code null} for none
   */
  public PhotosVisionObjectrecImageTemplateSubSet setDescriptor(java.util.List<PhotosVisionObjectrecLocalDescriptor> descriptor) {
    this.descriptor = descriptor;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDescriptorType() {
    return descriptorType;
  }

  /**
   * @param descriptorType descriptorType or {@code null} for none
   */
  public PhotosVisionObjectrecImageTemplateSubSet setDescriptorType(java.lang.Integer descriptorType) {
    this.descriptorType = descriptorType;
    return this;
  }

  /**
   * Used to indicate if the descriptor is binary or not. When decompressing feature this is useful
   * to decide calling different decompression functions.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsBinaryDescriptor() {
    return isBinaryDescriptor;
  }

  /**
   * Used to indicate if the descriptor is binary or not. When decompressing feature this is useful
   * to decide calling different decompression functions.
   * @param isBinaryDescriptor isBinaryDescriptor or {@code null} for none
   */
  public PhotosVisionObjectrecImageTemplateSubSet setIsBinaryDescriptor(java.lang.Boolean isBinaryDescriptor) {
    this.isBinaryDescriptor = isBinaryDescriptor;
    return this;
  }

  /**
   * Used to store the number of descriptors for statistical purposes, if the descriptors themselves
   * are not stored.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumDescriptors() {
    return numDescriptors;
  }

  /**
   * Used to store the number of descriptors for statistical purposes, if the descriptors themselves
   * are not stored.
   * @param numDescriptors numDescriptors or {@code null} for none
   */
  public PhotosVisionObjectrecImageTemplateSubSet setNumDescriptors(java.lang.Integer numDescriptors) {
    this.numDescriptors = numDescriptors;
    return this;
  }

  @Override
  public PhotosVisionObjectrecImageTemplateSubSet set(String fieldName, Object value) {
    return (PhotosVisionObjectrecImageTemplateSubSet) super.set(fieldName, value);
  }

  @Override
  public PhotosVisionObjectrecImageTemplateSubSet clone() {
    return (PhotosVisionObjectrecImageTemplateSubSet) super.clone();
  }

}
