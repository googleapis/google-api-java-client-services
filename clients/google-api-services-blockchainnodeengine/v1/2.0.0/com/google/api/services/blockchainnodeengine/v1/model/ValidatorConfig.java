/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.blockchainnodeengine.v1.model;

/**
 * Configuration for validator-related parameters on the beacon client, and for any GCP-managed
 * validator client.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Blockchain Node Engine API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ValidatorConfig extends com.google.api.client.json.GenericJson {

  /**
   * An Ethereum address which the beacon client will send fee rewards to if no recipient is
   * configured in the validator client. See https://lighthouse-book.sigmaprime.io/suggested-fee-
   * recipient.html or https://docs.prylabs.network/docs/execution-node/fee-recipient for examples
   * of how this is used. Note that while this is often described as "suggested", as we run the
   * execution node we can trust the execution node, and therefore this is considered enforced.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String beaconFeeRecipient;

  /**
   * Immutable. When true, deploys a GCP-managed validator client alongside the beacon client.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean managedValidatorClient;

  /**
   * URLs for MEV-relay services to use for block building. When set, a GCP-managed MEV-boost
   * service is configured on the beacon client.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> mevRelayUrls;

  /**
   * An Ethereum address which the beacon client will send fee rewards to if no recipient is
   * configured in the validator client. See https://lighthouse-book.sigmaprime.io/suggested-fee-
   * recipient.html or https://docs.prylabs.network/docs/execution-node/fee-recipient for examples
   * of how this is used. Note that while this is often described as "suggested", as we run the
   * execution node we can trust the execution node, and therefore this is considered enforced.
   * @return value or {@code null} for none
   */
  public java.lang.String getBeaconFeeRecipient() {
    return beaconFeeRecipient;
  }

  /**
   * An Ethereum address which the beacon client will send fee rewards to if no recipient is
   * configured in the validator client. See https://lighthouse-book.sigmaprime.io/suggested-fee-
   * recipient.html or https://docs.prylabs.network/docs/execution-node/fee-recipient for examples
   * of how this is used. Note that while this is often described as "suggested", as we run the
   * execution node we can trust the execution node, and therefore this is considered enforced.
   * @param beaconFeeRecipient beaconFeeRecipient or {@code null} for none
   */
  public ValidatorConfig setBeaconFeeRecipient(java.lang.String beaconFeeRecipient) {
    this.beaconFeeRecipient = beaconFeeRecipient;
    return this;
  }

  /**
   * Immutable. When true, deploys a GCP-managed validator client alongside the beacon client.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getManagedValidatorClient() {
    return managedValidatorClient;
  }

  /**
   * Immutable. When true, deploys a GCP-managed validator client alongside the beacon client.
   * @param managedValidatorClient managedValidatorClient or {@code null} for none
   */
  public ValidatorConfig setManagedValidatorClient(java.lang.Boolean managedValidatorClient) {
    this.managedValidatorClient = managedValidatorClient;
    return this;
  }

  /**
   * URLs for MEV-relay services to use for block building. When set, a GCP-managed MEV-boost
   * service is configured on the beacon client.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMevRelayUrls() {
    return mevRelayUrls;
  }

  /**
   * URLs for MEV-relay services to use for block building. When set, a GCP-managed MEV-boost
   * service is configured on the beacon client.
   * @param mevRelayUrls mevRelayUrls or {@code null} for none
   */
  public ValidatorConfig setMevRelayUrls(java.util.List<java.lang.String> mevRelayUrls) {
    this.mevRelayUrls = mevRelayUrls;
    return this;
  }

  @Override
  public ValidatorConfig set(String fieldName, Object value) {
    return (ValidatorConfig) super.set(fieldName, value);
  }

  @Override
  public ValidatorConfig clone() {
    return (ValidatorConfig) super.clone();
  }

}
