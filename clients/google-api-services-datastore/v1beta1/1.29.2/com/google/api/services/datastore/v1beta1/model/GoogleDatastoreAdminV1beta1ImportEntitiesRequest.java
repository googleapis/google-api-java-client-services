/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastore.v1beta1.model;

/**
 * The request for google.datastore.admin.v1beta1.DatastoreAdmin.ImportEntities.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Datastore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleDatastoreAdminV1beta1ImportEntitiesRequest extends com.google.api.client.json.GenericJson {

  /**
   * Optionally specify which kinds/namespaces are to be imported. If provided, the list must be a
   * subset of the EntityFilter used in creating the export, otherwise a FAILED_PRECONDITION error
   * will be returned. If no filter is specified then all entities from the export are imported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleDatastoreAdminV1beta1EntityFilter entityFilter;

  /**
   * The full resource URL of the external storage location. Currently, only Google Cloud Storage is
   * supported. So input_url should be of the form:
   * `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where `BUCKET_NAME` is the
   * name of the Cloud Storage bucket, `NAMESPACE_PATH` is an optional Cloud Storage namespace path
   * (this is not a Cloud Datastore namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata
   * file written by the ExportEntities operation. For more information about Cloud Storage
   * namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming
   * #object-considerations).
   *
   * For more information, see google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String inputUrl;

  /**
   * Client-assigned labels.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Optionally specify which kinds/namespaces are to be imported. If provided, the list must be a
   * subset of the EntityFilter used in creating the export, otherwise a FAILED_PRECONDITION error
   * will be returned. If no filter is specified then all entities from the export are imported.
   * @return value or {@code null} for none
   */
  public GoogleDatastoreAdminV1beta1EntityFilter getEntityFilter() {
    return entityFilter;
  }

  /**
   * Optionally specify which kinds/namespaces are to be imported. If provided, the list must be a
   * subset of the EntityFilter used in creating the export, otherwise a FAILED_PRECONDITION error
   * will be returned. If no filter is specified then all entities from the export are imported.
   * @param entityFilter entityFilter or {@code null} for none
   */
  public GoogleDatastoreAdminV1beta1ImportEntitiesRequest setEntityFilter(GoogleDatastoreAdminV1beta1EntityFilter entityFilter) {
    this.entityFilter = entityFilter;
    return this;
  }

  /**
   * The full resource URL of the external storage location. Currently, only Google Cloud Storage is
   * supported. So input_url should be of the form:
   * `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where `BUCKET_NAME` is the
   * name of the Cloud Storage bucket, `NAMESPACE_PATH` is an optional Cloud Storage namespace path
   * (this is not a Cloud Datastore namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata
   * file written by the ExportEntities operation. For more information about Cloud Storage
   * namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming
   * #object-considerations).
   *
   * For more information, see google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
   * @return value or {@code null} for none
   */
  public java.lang.String getInputUrl() {
    return inputUrl;
  }

  /**
   * The full resource URL of the external storage location. Currently, only Google Cloud Storage is
   * supported. So input_url should be of the form:
   * `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where `BUCKET_NAME` is the
   * name of the Cloud Storage bucket, `NAMESPACE_PATH` is an optional Cloud Storage namespace path
   * (this is not a Cloud Datastore namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata
   * file written by the ExportEntities operation. For more information about Cloud Storage
   * namespace paths, see [Object name considerations](https://cloud.google.com/storage/docs/naming
   * #object-considerations).
   *
   * For more information, see google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url.
   * @param inputUrl inputUrl or {@code null} for none
   */
  public GoogleDatastoreAdminV1beta1ImportEntitiesRequest setInputUrl(java.lang.String inputUrl) {
    this.inputUrl = inputUrl;
    return this;
  }

  /**
   * Client-assigned labels.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Client-assigned labels.
   * @param labels labels or {@code null} for none
   */
  public GoogleDatastoreAdminV1beta1ImportEntitiesRequest setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  @Override
  public GoogleDatastoreAdminV1beta1ImportEntitiesRequest set(String fieldName, Object value) {
    return (GoogleDatastoreAdminV1beta1ImportEntitiesRequest) super.set(fieldName, value);
  }

  @Override
  public GoogleDatastoreAdminV1beta1ImportEntitiesRequest clone() {
    return (GoogleDatastoreAdminV1beta1ImportEntitiesRequest) super.clone();
  }

}
