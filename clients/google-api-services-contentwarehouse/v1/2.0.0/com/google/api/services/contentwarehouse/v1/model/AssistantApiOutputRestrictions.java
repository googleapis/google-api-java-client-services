/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * These are user configurable permissions representing what the device is allowed to output. Next
 * ID: 11
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiOutputRestrictions extends com.google.api.client.json.GenericJson {

  /**
   * Access settings for all providers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiAccessControlOutput accessControlOutput;

  /**
   * The type of Google Photo content which the device can output.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String googlePhotoContent;

  /**
   * DEPRECATED: Use access_control_output instead. Access settings for guests.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiGuestAccessOutput guestAccessOutput;

  /**
   * The level of personal data which the device can output. See go/personal-readout for detail.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String personalData;

  /**
   * This controls if the server can proactively send notification to users, and it does not affect
   * scenarios that users ask for information. The notification may include TTS and lights. It could
   * be only lights for chirp.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String proactiveNotificationOutput;

  /**
   * Restrictions on displaying and interacting with content on proactive surfaces (e.g. Dragonglass
   * home screen). Note: NEVER access this field of OutputRestrictions directly, use the code in
   * assistant/assistant_server/settings/device/device_settings_util.h instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiProactiveOutput proactiveOutput;

  /**
   * Whether YouTube autoplay is allowed for queries from the user to this device. See go/assistant-
   * youtube-settings for details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String youtubeAutoplayRestriction;

  /**
   * The type of YouTube content which the device can output.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String youtubeContent;

  /**
   * The type of YouTube TV content which the device can output.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String youtubeTvContent;

  /**
   * Access settings for all providers.
   * @return value or {@code null} for none
   */
  public AssistantApiAccessControlOutput getAccessControlOutput() {
    return accessControlOutput;
  }

  /**
   * Access settings for all providers.
   * @param accessControlOutput accessControlOutput or {@code null} for none
   */
  public AssistantApiOutputRestrictions setAccessControlOutput(AssistantApiAccessControlOutput accessControlOutput) {
    this.accessControlOutput = accessControlOutput;
    return this;
  }

  /**
   * The type of Google Photo content which the device can output.
   * @return value or {@code null} for none
   */
  public java.lang.String getGooglePhotoContent() {
    return googlePhotoContent;
  }

  /**
   * The type of Google Photo content which the device can output.
   * @param googlePhotoContent googlePhotoContent or {@code null} for none
   */
  public AssistantApiOutputRestrictions setGooglePhotoContent(java.lang.String googlePhotoContent) {
    this.googlePhotoContent = googlePhotoContent;
    return this;
  }

  /**
   * DEPRECATED: Use access_control_output instead. Access settings for guests.
   * @return value or {@code null} for none
   */
  public AssistantApiGuestAccessOutput getGuestAccessOutput() {
    return guestAccessOutput;
  }

  /**
   * DEPRECATED: Use access_control_output instead. Access settings for guests.
   * @param guestAccessOutput guestAccessOutput or {@code null} for none
   */
  public AssistantApiOutputRestrictions setGuestAccessOutput(AssistantApiGuestAccessOutput guestAccessOutput) {
    this.guestAccessOutput = guestAccessOutput;
    return this;
  }

  /**
   * The level of personal data which the device can output. See go/personal-readout for detail.
   * @return value or {@code null} for none
   */
  public java.lang.String getPersonalData() {
    return personalData;
  }

  /**
   * The level of personal data which the device can output. See go/personal-readout for detail.
   * @param personalData personalData or {@code null} for none
   */
  public AssistantApiOutputRestrictions setPersonalData(java.lang.String personalData) {
    this.personalData = personalData;
    return this;
  }

  /**
   * This controls if the server can proactively send notification to users, and it does not affect
   * scenarios that users ask for information. The notification may include TTS and lights. It could
   * be only lights for chirp.
   * @return value or {@code null} for none
   */
  public java.lang.String getProactiveNotificationOutput() {
    return proactiveNotificationOutput;
  }

  /**
   * This controls if the server can proactively send notification to users, and it does not affect
   * scenarios that users ask for information. The notification may include TTS and lights. It could
   * be only lights for chirp.
   * @param proactiveNotificationOutput proactiveNotificationOutput or {@code null} for none
   */
  public AssistantApiOutputRestrictions setProactiveNotificationOutput(java.lang.String proactiveNotificationOutput) {
    this.proactiveNotificationOutput = proactiveNotificationOutput;
    return this;
  }

  /**
   * Restrictions on displaying and interacting with content on proactive surfaces (e.g. Dragonglass
   * home screen). Note: NEVER access this field of OutputRestrictions directly, use the code in
   * assistant/assistant_server/settings/device/device_settings_util.h instead.
   * @return value or {@code null} for none
   */
  public AssistantApiProactiveOutput getProactiveOutput() {
    return proactiveOutput;
  }

  /**
   * Restrictions on displaying and interacting with content on proactive surfaces (e.g. Dragonglass
   * home screen). Note: NEVER access this field of OutputRestrictions directly, use the code in
   * assistant/assistant_server/settings/device/device_settings_util.h instead.
   * @param proactiveOutput proactiveOutput or {@code null} for none
   */
  public AssistantApiOutputRestrictions setProactiveOutput(AssistantApiProactiveOutput proactiveOutput) {
    this.proactiveOutput = proactiveOutput;
    return this;
  }

  /**
   * Whether YouTube autoplay is allowed for queries from the user to this device. See go/assistant-
   * youtube-settings for details.
   * @return value or {@code null} for none
   */
  public java.lang.String getYoutubeAutoplayRestriction() {
    return youtubeAutoplayRestriction;
  }

  /**
   * Whether YouTube autoplay is allowed for queries from the user to this device. See go/assistant-
   * youtube-settings for details.
   * @param youtubeAutoplayRestriction youtubeAutoplayRestriction or {@code null} for none
   */
  public AssistantApiOutputRestrictions setYoutubeAutoplayRestriction(java.lang.String youtubeAutoplayRestriction) {
    this.youtubeAutoplayRestriction = youtubeAutoplayRestriction;
    return this;
  }

  /**
   * The type of YouTube content which the device can output.
   * @return value or {@code null} for none
   */
  public java.lang.String getYoutubeContent() {
    return youtubeContent;
  }

  /**
   * The type of YouTube content which the device can output.
   * @param youtubeContent youtubeContent or {@code null} for none
   */
  public AssistantApiOutputRestrictions setYoutubeContent(java.lang.String youtubeContent) {
    this.youtubeContent = youtubeContent;
    return this;
  }

  /**
   * The type of YouTube TV content which the device can output.
   * @return value or {@code null} for none
   */
  public java.lang.String getYoutubeTvContent() {
    return youtubeTvContent;
  }

  /**
   * The type of YouTube TV content which the device can output.
   * @param youtubeTvContent youtubeTvContent or {@code null} for none
   */
  public AssistantApiOutputRestrictions setYoutubeTvContent(java.lang.String youtubeTvContent) {
    this.youtubeTvContent = youtubeTvContent;
    return this;
  }

  @Override
  public AssistantApiOutputRestrictions set(String fieldName, Object value) {
    return (AssistantApiOutputRestrictions) super.set(fieldName, value);
  }

  @Override
  public AssistantApiOutputRestrictions clone() {
    return (AssistantApiOutputRestrictions) super.clone();
  }

}
