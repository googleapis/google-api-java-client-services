/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.backupdr.v1.model;

/**
 * Message for finalizing a Backup.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Backup and DR Service API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FinalizeBackupRequest extends com.google.api.client.json.GenericJson {

  /**
   * Required. Resource ID of the Backup resource to be finalized. This must be the same backup_id
   * that was used in the InitiateBackupRequest.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String backupId;

  /**
   * The point in time when this backup was captured from the source. This will be assigned to the
   * consistency_time field of the newly created Backup.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String consistencyTime;

  /**
   * This will be assigned to the description field of the newly created Backup.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * The latest timestamp of data available in this Backup. This will be set on the newly created
   * Backup.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String recoveryRangeEndTime;

  /**
   * The earliest timestamp of data available in this Backup. This will set on the newly created
   * Backup.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String recoveryRangeStartTime;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID so that if
   * you must retry your request, the server will know to ignore the request if it has already been
   * completed. The server will guarantee that for at least 60 minutes after the first request. For
   * example, consider a situation where you make an initial request and the request times out. If
   * you make the request again with the same request ID, the server can check if original operation
   * with the same request ID was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments. The request ID must be a valid UUID
   * with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String requestId;

  /**
   * The ExpireTime on the backup will be set to FinalizeTime plus this duration. If the resulting
   * ExpireTime is less than EnforcedRetentionEndTime, then ExpireTime is set to
   * EnforcedRetentionEndTime.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String retentionDuration;

  /**
   * Required. Resource ID of the Backup resource to be finalized. This must be the same backup_id
   * that was used in the InitiateBackupRequest.
   * @return value or {@code null} for none
   */
  public java.lang.String getBackupId() {
    return backupId;
  }

  /**
   * Required. Resource ID of the Backup resource to be finalized. This must be the same backup_id
   * that was used in the InitiateBackupRequest.
   * @param backupId backupId or {@code null} for none
   */
  public FinalizeBackupRequest setBackupId(java.lang.String backupId) {
    this.backupId = backupId;
    return this;
  }

  /**
   * The point in time when this backup was captured from the source. This will be assigned to the
   * consistency_time field of the newly created Backup.
   * @return value or {@code null} for none
   */
  public String getConsistencyTime() {
    return consistencyTime;
  }

  /**
   * The point in time when this backup was captured from the source. This will be assigned to the
   * consistency_time field of the newly created Backup.
   * @param consistencyTime consistencyTime or {@code null} for none
   */
  public FinalizeBackupRequest setConsistencyTime(String consistencyTime) {
    this.consistencyTime = consistencyTime;
    return this;
  }

  /**
   * This will be assigned to the description field of the newly created Backup.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * This will be assigned to the description field of the newly created Backup.
   * @param description description or {@code null} for none
   */
  public FinalizeBackupRequest setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * The latest timestamp of data available in this Backup. This will be set on the newly created
   * Backup.
   * @return value or {@code null} for none
   */
  public String getRecoveryRangeEndTime() {
    return recoveryRangeEndTime;
  }

  /**
   * The latest timestamp of data available in this Backup. This will be set on the newly created
   * Backup.
   * @param recoveryRangeEndTime recoveryRangeEndTime or {@code null} for none
   */
  public FinalizeBackupRequest setRecoveryRangeEndTime(String recoveryRangeEndTime) {
    this.recoveryRangeEndTime = recoveryRangeEndTime;
    return this;
  }

  /**
   * The earliest timestamp of data available in this Backup. This will set on the newly created
   * Backup.
   * @return value or {@code null} for none
   */
  public String getRecoveryRangeStartTime() {
    return recoveryRangeStartTime;
  }

  /**
   * The earliest timestamp of data available in this Backup. This will set on the newly created
   * Backup.
   * @param recoveryRangeStartTime recoveryRangeStartTime or {@code null} for none
   */
  public FinalizeBackupRequest setRecoveryRangeStartTime(String recoveryRangeStartTime) {
    this.recoveryRangeStartTime = recoveryRangeStartTime;
    return this;
  }

  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID so that if
   * you must retry your request, the server will know to ignore the request if it has already been
   * completed. The server will guarantee that for at least 60 minutes after the first request. For
   * example, consider a situation where you make an initial request and the request times out. If
   * you make the request again with the same request ID, the server can check if original operation
   * with the same request ID was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments. The request ID must be a valid UUID
   * with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
   * @return value or {@code null} for none
   */
  public java.lang.String getRequestId() {
    return requestId;
  }

  /**
   * Optional. An optional request ID to identify requests. Specify a unique request ID so that if
   * you must retry your request, the server will know to ignore the request if it has already been
   * completed. The server will guarantee that for at least 60 minutes after the first request. For
   * example, consider a situation where you make an initial request and the request times out. If
   * you make the request again with the same request ID, the server can check if original operation
   * with the same request ID was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments. The request ID must be a valid UUID
   * with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
   * @param requestId requestId or {@code null} for none
   */
  public FinalizeBackupRequest setRequestId(java.lang.String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * The ExpireTime on the backup will be set to FinalizeTime plus this duration. If the resulting
   * ExpireTime is less than EnforcedRetentionEndTime, then ExpireTime is set to
   * EnforcedRetentionEndTime.
   * @return value or {@code null} for none
   */
  public String getRetentionDuration() {
    return retentionDuration;
  }

  /**
   * The ExpireTime on the backup will be set to FinalizeTime plus this duration. If the resulting
   * ExpireTime is less than EnforcedRetentionEndTime, then ExpireTime is set to
   * EnforcedRetentionEndTime.
   * @param retentionDuration retentionDuration or {@code null} for none
   */
  public FinalizeBackupRequest setRetentionDuration(String retentionDuration) {
    this.retentionDuration = retentionDuration;
    return this;
  }

  @Override
  public FinalizeBackupRequest set(String fieldName, Object value) {
    return (FinalizeBackupRequest) super.set(fieldName, value);
  }

  @Override
  public FinalizeBackupRequest clone() {
    return (FinalizeBackupRequest) super.clone();
  }

}
