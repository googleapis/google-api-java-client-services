/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Stats on HDR10+ (SMPTE 2094-40:2016 standard) over video frames.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoFileHDR10PlusStats extends com.google.api.client.json.GenericJson {

  /**
   * Application version is set to max version over all frames.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer applicationVersion;

  /**
   * The average of the nominal maximum display luminance of the targeted system display over all
   * frames.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double averageTargetedSystemDisplayMaximumLuminance;

  /**
   * This flag is set if any frame has it.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean masteringDisplayActualPeakLuminanceFlag;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxNumWindows;

  /**
   * This flag is set if any frame has it.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean targetedSystemDisplayActualPeakLuminanceFlag;

  /**
   * Application version is set to max version over all frames.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getApplicationVersion() {
    return applicationVersion;
  }

  /**
   * Application version is set to max version over all frames.
   * @param applicationVersion applicationVersion or {@code null} for none
   */
  public VideoFileHDR10PlusStats setApplicationVersion(java.lang.Integer applicationVersion) {
    this.applicationVersion = applicationVersion;
    return this;
  }

  /**
   * The average of the nominal maximum display luminance of the targeted system display over all
   * frames.
   * @return value or {@code null} for none
   */
  public java.lang.Double getAverageTargetedSystemDisplayMaximumLuminance() {
    return averageTargetedSystemDisplayMaximumLuminance;
  }

  /**
   * The average of the nominal maximum display luminance of the targeted system display over all
   * frames.
   * @param averageTargetedSystemDisplayMaximumLuminance averageTargetedSystemDisplayMaximumLuminance or {@code null} for none
   */
  public VideoFileHDR10PlusStats setAverageTargetedSystemDisplayMaximumLuminance(java.lang.Double averageTargetedSystemDisplayMaximumLuminance) {
    this.averageTargetedSystemDisplayMaximumLuminance = averageTargetedSystemDisplayMaximumLuminance;
    return this;
  }

  /**
   * This flag is set if any frame has it.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMasteringDisplayActualPeakLuminanceFlag() {
    return masteringDisplayActualPeakLuminanceFlag;
  }

  /**
   * This flag is set if any frame has it.
   * @param masteringDisplayActualPeakLuminanceFlag masteringDisplayActualPeakLuminanceFlag or {@code null} for none
   */
  public VideoFileHDR10PlusStats setMasteringDisplayActualPeakLuminanceFlag(java.lang.Boolean masteringDisplayActualPeakLuminanceFlag) {
    this.masteringDisplayActualPeakLuminanceFlag = masteringDisplayActualPeakLuminanceFlag;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxNumWindows() {
    return maxNumWindows;
  }

  /**
   * @param maxNumWindows maxNumWindows or {@code null} for none
   */
  public VideoFileHDR10PlusStats setMaxNumWindows(java.lang.Integer maxNumWindows) {
    this.maxNumWindows = maxNumWindows;
    return this;
  }

  /**
   * This flag is set if any frame has it.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getTargetedSystemDisplayActualPeakLuminanceFlag() {
    return targetedSystemDisplayActualPeakLuminanceFlag;
  }

  /**
   * This flag is set if any frame has it.
   * @param targetedSystemDisplayActualPeakLuminanceFlag targetedSystemDisplayActualPeakLuminanceFlag or {@code null} for none
   */
  public VideoFileHDR10PlusStats setTargetedSystemDisplayActualPeakLuminanceFlag(java.lang.Boolean targetedSystemDisplayActualPeakLuminanceFlag) {
    this.targetedSystemDisplayActualPeakLuminanceFlag = targetedSystemDisplayActualPeakLuminanceFlag;
    return this;
  }

  @Override
  public VideoFileHDR10PlusStats set(String fieldName, Object value) {
    return (VideoFileHDR10PlusStats) super.set(fieldName, value);
  }

  @Override
  public VideoFileHDR10PlusStats clone() {
    return (VideoFileHDR10PlusStats) super.clone();
  }

}
