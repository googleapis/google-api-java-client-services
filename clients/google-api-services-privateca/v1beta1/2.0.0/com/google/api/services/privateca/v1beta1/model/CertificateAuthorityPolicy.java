/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.privateca.v1beta1.model;

/**
 * The issuing policy for a CertificateAuthority. Certificates will not be successfully issued from
 * this CertificateAuthority if they violate the policy.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Certificate Authority API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CertificateAuthorityPolicy extends com.google.api.client.json.GenericJson {

  /**
   * Optional. If any value is specified here, then all Certificates issued by the
   * CertificateAuthority must match at least one listed value. If no value is specified, all values
   * will be allowed for this fied. Glob patterns are also supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> allowedCommonNames;

  /**
   * Optional. All Certificates issued by the CertificateAuthority must match at least one listed
   * ReusableConfigWrapper in the list.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AllowedConfigList allowedConfigList;

  /**
   * Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue
   * Certificates.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IssuanceModes allowedIssuanceModes;

  /**
   * Optional. If any Subject is specified here, then all Certificates issued by the
   * CertificateAuthority must match at least one listed Subject. If a Subject has an empty field,
   * any value will be allowed for that field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Subject> allowedLocationsAndOrganizations;

  /**
   * Optional. If a AllowedSubjectAltNames is specified here, then all Certificates issued by the
   * CertificateAuthority must match AllowedSubjectAltNames. If no value or an empty value is
   * specified, any value will be allowed for the SubjectAltNames field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AllowedSubjectAltNames allowedSans;

  /**
   * Optional. The maximum lifetime allowed by the CertificateAuthority. Note that if the any part
   * if the issuing chain expires before a Certificate's requested maximum_lifetime, the effective
   * lifetime will be explicitly truncated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String maximumLifetime;

  /**
   * Optional. All Certificates issued by the CertificateAuthority will use the provided
   * configuration values, overwriting any requested configuration values.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ReusableConfigWrapper overwriteConfigValues;

  /**
   * Optional. If any value is specified here, then all Certificates issued by the
   * CertificateAuthority must match at least one listed value. If no value is specified, all values
   * will be allowed for this fied. Glob patterns are also supported.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAllowedCommonNames() {
    return allowedCommonNames;
  }

  /**
   * Optional. If any value is specified here, then all Certificates issued by the
   * CertificateAuthority must match at least one listed value. If no value is specified, all values
   * will be allowed for this fied. Glob patterns are also supported.
   * @param allowedCommonNames allowedCommonNames or {@code null} for none
   */
  public CertificateAuthorityPolicy setAllowedCommonNames(java.util.List<java.lang.String> allowedCommonNames) {
    this.allowedCommonNames = allowedCommonNames;
    return this;
  }

  /**
   * Optional. All Certificates issued by the CertificateAuthority must match at least one listed
   * ReusableConfigWrapper in the list.
   * @return value or {@code null} for none
   */
  public AllowedConfigList getAllowedConfigList() {
    return allowedConfigList;
  }

  /**
   * Optional. All Certificates issued by the CertificateAuthority must match at least one listed
   * ReusableConfigWrapper in the list.
   * @param allowedConfigList allowedConfigList or {@code null} for none
   */
  public CertificateAuthorityPolicy setAllowedConfigList(AllowedConfigList allowedConfigList) {
    this.allowedConfigList = allowedConfigList;
    return this;
  }

  /**
   * Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue
   * Certificates.
   * @return value or {@code null} for none
   */
  public IssuanceModes getAllowedIssuanceModes() {
    return allowedIssuanceModes;
  }

  /**
   * Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue
   * Certificates.
   * @param allowedIssuanceModes allowedIssuanceModes or {@code null} for none
   */
  public CertificateAuthorityPolicy setAllowedIssuanceModes(IssuanceModes allowedIssuanceModes) {
    this.allowedIssuanceModes = allowedIssuanceModes;
    return this;
  }

  /**
   * Optional. If any Subject is specified here, then all Certificates issued by the
   * CertificateAuthority must match at least one listed Subject. If a Subject has an empty field,
   * any value will be allowed for that field.
   * @return value or {@code null} for none
   */
  public java.util.List<Subject> getAllowedLocationsAndOrganizations() {
    return allowedLocationsAndOrganizations;
  }

  /**
   * Optional. If any Subject is specified here, then all Certificates issued by the
   * CertificateAuthority must match at least one listed Subject. If a Subject has an empty field,
   * any value will be allowed for that field.
   * @param allowedLocationsAndOrganizations allowedLocationsAndOrganizations or {@code null} for none
   */
  public CertificateAuthorityPolicy setAllowedLocationsAndOrganizations(java.util.List<Subject> allowedLocationsAndOrganizations) {
    this.allowedLocationsAndOrganizations = allowedLocationsAndOrganizations;
    return this;
  }

  /**
   * Optional. If a AllowedSubjectAltNames is specified here, then all Certificates issued by the
   * CertificateAuthority must match AllowedSubjectAltNames. If no value or an empty value is
   * specified, any value will be allowed for the SubjectAltNames field.
   * @return value or {@code null} for none
   */
  public AllowedSubjectAltNames getAllowedSans() {
    return allowedSans;
  }

  /**
   * Optional. If a AllowedSubjectAltNames is specified here, then all Certificates issued by the
   * CertificateAuthority must match AllowedSubjectAltNames. If no value or an empty value is
   * specified, any value will be allowed for the SubjectAltNames field.
   * @param allowedSans allowedSans or {@code null} for none
   */
  public CertificateAuthorityPolicy setAllowedSans(AllowedSubjectAltNames allowedSans) {
    this.allowedSans = allowedSans;
    return this;
  }

  /**
   * Optional. The maximum lifetime allowed by the CertificateAuthority. Note that if the any part
   * if the issuing chain expires before a Certificate's requested maximum_lifetime, the effective
   * lifetime will be explicitly truncated.
   * @return value or {@code null} for none
   */
  public String getMaximumLifetime() {
    return maximumLifetime;
  }

  /**
   * Optional. The maximum lifetime allowed by the CertificateAuthority. Note that if the any part
   * if the issuing chain expires before a Certificate's requested maximum_lifetime, the effective
   * lifetime will be explicitly truncated.
   * @param maximumLifetime maximumLifetime or {@code null} for none
   */
  public CertificateAuthorityPolicy setMaximumLifetime(String maximumLifetime) {
    this.maximumLifetime = maximumLifetime;
    return this;
  }

  /**
   * Optional. All Certificates issued by the CertificateAuthority will use the provided
   * configuration values, overwriting any requested configuration values.
   * @return value or {@code null} for none
   */
  public ReusableConfigWrapper getOverwriteConfigValues() {
    return overwriteConfigValues;
  }

  /**
   * Optional. All Certificates issued by the CertificateAuthority will use the provided
   * configuration values, overwriting any requested configuration values.
   * @param overwriteConfigValues overwriteConfigValues or {@code null} for none
   */
  public CertificateAuthorityPolicy setOverwriteConfigValues(ReusableConfigWrapper overwriteConfigValues) {
    this.overwriteConfigValues = overwriteConfigValues;
    return this;
  }

  @Override
  public CertificateAuthorityPolicy set(String fieldName, Object value) {
    return (CertificateAuthorityPolicy) super.set(fieldName, value);
  }

  @Override
  public CertificateAuthorityPolicy clone() {
    return (CertificateAuthorityPolicy) super.clone();
  }

}
