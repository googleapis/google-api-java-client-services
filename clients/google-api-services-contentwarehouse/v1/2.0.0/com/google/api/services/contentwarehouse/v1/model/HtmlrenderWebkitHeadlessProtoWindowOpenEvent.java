/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Corresponds to a call to window.open(). Note that a WindowOpenEvent will be present whether or
 * not the call was successful.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HtmlrenderWebkitHeadlessProtoWindowOpenEvent extends com.google.api.client.json.GenericJson {

  /**
   * Whether or not the window was allowed to be opened by the popup blocker. Unless user events are
   * created with a render extension this should be false.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowed;

  /**
   * The URL for the new window. Note that this is the URL after it has been processed by WebKit,
   * so, for example, relative links passed to window.create() will have been made absolute.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * Window features passed to window.open().
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String windowFeatures;

  /**
   * Window name passed to window.open(). If no name is provided this defaults to "_blank".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String windowName;

  /**
   * Whether or not the window was allowed to be opened by the popup blocker. Unless user events are
   * created with a render extension this should be false.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowed() {
    return allowed;
  }

  /**
   * Whether or not the window was allowed to be opened by the popup blocker. Unless user events are
   * created with a render extension this should be false.
   * @param allowed allowed or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoWindowOpenEvent setAllowed(java.lang.Boolean allowed) {
    this.allowed = allowed;
    return this;
  }

  /**
   * The URL for the new window. Note that this is the URL after it has been processed by WebKit,
   * so, for example, relative links passed to window.create() will have been made absolute.
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * The URL for the new window. Note that this is the URL after it has been processed by WebKit,
   * so, for example, relative links passed to window.create() will have been made absolute.
   * @param url url or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoWindowOpenEvent setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  /**
   * Window features passed to window.open().
   * @return value or {@code null} for none
   */
  public java.lang.String getWindowFeatures() {
    return windowFeatures;
  }

  /**
   * Window features passed to window.open().
   * @param windowFeatures windowFeatures or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoWindowOpenEvent setWindowFeatures(java.lang.String windowFeatures) {
    this.windowFeatures = windowFeatures;
    return this;
  }

  /**
   * Window name passed to window.open(). If no name is provided this defaults to "_blank".
   * @return value or {@code null} for none
   */
  public java.lang.String getWindowName() {
    return windowName;
  }

  /**
   * Window name passed to window.open(). If no name is provided this defaults to "_blank".
   * @param windowName windowName or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoWindowOpenEvent setWindowName(java.lang.String windowName) {
    this.windowName = windowName;
    return this;
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoWindowOpenEvent set(String fieldName, Object value) {
    return (HtmlrenderWebkitHeadlessProtoWindowOpenEvent) super.set(fieldName, value);
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoWindowOpenEvent clone() {
    return (HtmlrenderWebkitHeadlessProtoWindowOpenEvent) super.clone();
  }

}
