/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vectortile.v1.model;

/**
 * Represents the geometry of a feature, that is, the shape that it has on the map. The local tile
 * coordinate system has the origin at the north-west (upper-left) corner of the tile, and is scaled
 * to 4096 units across each edge. The height (Z) axis has the same scale factor: an extruded area
 * with a max_z value of 4096 has the same height as the width of the tile that it is on. There is
 * no clipping boundary, so it is possible that some coordinates will lie outside the tile
 * boundaries.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Semantic Tile API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Geometry extends com.google.api.client.json.GenericJson {

  /**
   * The areas present in this geometry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Area> areas;

  static {
    // hack to force ProGuard to consider Area used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Area.class);
  }

  /**
   * The extruded areas present in this geometry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ExtrudedArea> extrudedAreas;

  static {
    // hack to force ProGuard to consider ExtrudedArea used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ExtrudedArea.class);
  }

  /**
   * The lines present in this geometry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Line> lines;

  /**
   * The modeled volumes present in this geometry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ModeledVolume> modeledVolumes;

  /**
   * The areas present in this geometry.
   * @return value or {@code null} for none
   */
  public java.util.List<Area> getAreas() {
    return areas;
  }

  /**
   * The areas present in this geometry.
   * @param areas areas or {@code null} for none
   */
  public Geometry setAreas(java.util.List<Area> areas) {
    this.areas = areas;
    return this;
  }

  /**
   * The extruded areas present in this geometry.
   * @return value or {@code null} for none
   */
  public java.util.List<ExtrudedArea> getExtrudedAreas() {
    return extrudedAreas;
  }

  /**
   * The extruded areas present in this geometry.
   * @param extrudedAreas extrudedAreas or {@code null} for none
   */
  public Geometry setExtrudedAreas(java.util.List<ExtrudedArea> extrudedAreas) {
    this.extrudedAreas = extrudedAreas;
    return this;
  }

  /**
   * The lines present in this geometry.
   * @return value or {@code null} for none
   */
  public java.util.List<Line> getLines() {
    return lines;
  }

  /**
   * The lines present in this geometry.
   * @param lines lines or {@code null} for none
   */
  public Geometry setLines(java.util.List<Line> lines) {
    this.lines = lines;
    return this;
  }

  /**
   * The modeled volumes present in this geometry.
   * @return value or {@code null} for none
   */
  public java.util.List<ModeledVolume> getModeledVolumes() {
    return modeledVolumes;
  }

  /**
   * The modeled volumes present in this geometry.
   * @param modeledVolumes modeledVolumes or {@code null} for none
   */
  public Geometry setModeledVolumes(java.util.List<ModeledVolume> modeledVolumes) {
    this.modeledVolumes = modeledVolumes;
    return this;
  }

  @Override
  public Geometry set(String fieldName, Object value) {
    return (Geometry) super.set(fieldName, value);
  }

  @Override
  public Geometry clone() {
    return (Geometry) super.clone();
  }

}
