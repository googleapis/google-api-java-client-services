/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This class represents an address, partial address, or address range. It is intended to be
 * attached to features to identify their address(es). Some important points about addresses: - The
 * addresses in the Geo Schema do *not* include a component for the name of the feature, i.e. they
 * are not self-referential. For example, the name of a feature might be "Zack's Pizza" and its
 * address would be "123 Main Street". Similarly, streets, cities, and counties do not include
 * themselves as part of their address. The address of "Seattle" is "King County, Washington, USA".
 * If want to construct an address that *does* include the feature name, you can simply prepend it
 * to the other address components. - Lakes, mountains, and other natural features do not normally
 * have addresses. Countries also do not have addresses because they are at the top of the political
 * hierarchy. - Address components in the Geo Schema are listed in a particular order, independent
 * of the conventions used by the country in which they occur. The basic order is "smallest to
 * largest" starting with street numbers and routes, then political features, and ending with postal
 * features. The exact rules are defined by the implementation of the
 * AddressComponentOrdering::IsLessThan() function. - Some types of address components may occur
 * more than once in an address. For example, a UK address with a "dependent thoroughfare" would
 * have two components of TYPE_ROUTE (i.e. street names). These are listed in the order they are
 * normally written.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreAddressProto extends com.google.api.client.json.GenericJson {

  /**
   * The unparsed portion (lines) of the address. An address can have multiple unparsed portions.
   * Multiple unparsed portions sharing the same language should be modeled as one address_lines
   * instance having multiple lines. Historically, we also supported uparsed portions in different
   * languages, but we no longer do. Consequently, only one value is allowed for this field despite
   * the fact that it is repeated. See go/address-lines-multi-language for information about why we
   * made this change. If any components are filled in, this is supplemental to (i.e. disjoint from)
   * them. Furthermore, this must be the most specific portion of the address (except for the
   * portion, if any, stored in the name field of feature.proto). Unparsed lines are always
   * formatted together in a block. Other address components are never formatted between the address
   * lines. This doesn't imply that the address lines are always either the first or the last part
   * of the formatted output.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreAddressLinesProto> addressLines;

  static {
    // hack to force ProGuard to consider GeostoreAddressLinesProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreAddressLinesProto.class);
  }

  /**
   * A list of parsed address components, e.g. the street, city, etc. An address range is one type
   * of component.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreAddressComponentProto> component;

  static {
    // hack to force ProGuard to consider GeostoreAddressComponentProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreAddressComponentProto.class);
  }

  /**
   * ** DEPRECATED ** This field is now deprecated (see b/33268032). If you want to store cross
   * street information as part of an address, use the address_lines field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreAddressComponentProto> crossStreet;

  static {
    // hack to force ProGuard to consider GeostoreAddressComponentProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreAddressComponentProto.class);
  }

  /**
   * Field-level metadata for this address.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFieldMetadataProto metadata;

  /**
   * reserved
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreAddressProto partialDenormalization;

  /**
   * The opaque ID of the address template that contains rules for structuring this address. The id
   * of the address template can be retrieved using
   * google3/geostore/address_templates/public/address_templates.h
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String templateId;

  /**
   * A place for clients to attach arbitrary data to an address. Never set in MapFacts.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet temporaryData;

  /**
   * The unparsed portion (lines) of the address. An address can have multiple unparsed portions.
   * Multiple unparsed portions sharing the same language should be modeled as one address_lines
   * instance having multiple lines. Historically, we also supported uparsed portions in different
   * languages, but we no longer do. Consequently, only one value is allowed for this field despite
   * the fact that it is repeated. See go/address-lines-multi-language for information about why we
   * made this change. If any components are filled in, this is supplemental to (i.e. disjoint from)
   * them. Furthermore, this must be the most specific portion of the address (except for the
   * portion, if any, stored in the name field of feature.proto). Unparsed lines are always
   * formatted together in a block. Other address components are never formatted between the address
   * lines. This doesn't imply that the address lines are always either the first or the last part
   * of the formatted output.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreAddressLinesProto> getAddressLines() {
    return addressLines;
  }

  /**
   * The unparsed portion (lines) of the address. An address can have multiple unparsed portions.
   * Multiple unparsed portions sharing the same language should be modeled as one address_lines
   * instance having multiple lines. Historically, we also supported uparsed portions in different
   * languages, but we no longer do. Consequently, only one value is allowed for this field despite
   * the fact that it is repeated. See go/address-lines-multi-language for information about why we
   * made this change. If any components are filled in, this is supplemental to (i.e. disjoint from)
   * them. Furthermore, this must be the most specific portion of the address (except for the
   * portion, if any, stored in the name field of feature.proto). Unparsed lines are always
   * formatted together in a block. Other address components are never formatted between the address
   * lines. This doesn't imply that the address lines are always either the first or the last part
   * of the formatted output.
   * @param addressLines addressLines or {@code null} for none
   */
  public GeostoreAddressProto setAddressLines(java.util.List<GeostoreAddressLinesProto> addressLines) {
    this.addressLines = addressLines;
    return this;
  }

  /**
   * A list of parsed address components, e.g. the street, city, etc. An address range is one type
   * of component.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreAddressComponentProto> getComponent() {
    return component;
  }

  /**
   * A list of parsed address components, e.g. the street, city, etc. An address range is one type
   * of component.
   * @param component component or {@code null} for none
   */
  public GeostoreAddressProto setComponent(java.util.List<GeostoreAddressComponentProto> component) {
    this.component = component;
    return this;
  }

  /**
   * ** DEPRECATED ** This field is now deprecated (see b/33268032). If you want to store cross
   * street information as part of an address, use the address_lines field.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreAddressComponentProto> getCrossStreet() {
    return crossStreet;
  }

  /**
   * ** DEPRECATED ** This field is now deprecated (see b/33268032). If you want to store cross
   * street information as part of an address, use the address_lines field.
   * @param crossStreet crossStreet or {@code null} for none
   */
  public GeostoreAddressProto setCrossStreet(java.util.List<GeostoreAddressComponentProto> crossStreet) {
    this.crossStreet = crossStreet;
    return this;
  }

  /**
   * Field-level metadata for this address.
   * @return value or {@code null} for none
   */
  public GeostoreFieldMetadataProto getMetadata() {
    return metadata;
  }

  /**
   * Field-level metadata for this address.
   * @param metadata metadata or {@code null} for none
   */
  public GeostoreAddressProto setMetadata(GeostoreFieldMetadataProto metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * reserved
   * @return value or {@code null} for none
   */
  public GeostoreAddressProto getPartialDenormalization() {
    return partialDenormalization;
  }

  /**
   * reserved
   * @param partialDenormalization partialDenormalization or {@code null} for none
   */
  public GeostoreAddressProto setPartialDenormalization(GeostoreAddressProto partialDenormalization) {
    this.partialDenormalization = partialDenormalization;
    return this;
  }

  /**
   * The opaque ID of the address template that contains rules for structuring this address. The id
   * of the address template can be retrieved using
   * google3/geostore/address_templates/public/address_templates.h
   * @return value or {@code null} for none
   */
  public java.lang.String getTemplateId() {
    return templateId;
  }

  /**
   * The opaque ID of the address template that contains rules for structuring this address. The id
   * of the address template can be retrieved using
   * google3/geostore/address_templates/public/address_templates.h
   * @param templateId templateId or {@code null} for none
   */
  public GeostoreAddressProto setTemplateId(java.lang.String templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * A place for clients to attach arbitrary data to an address. Never set in MapFacts.
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getTemporaryData() {
    return temporaryData;
  }

  /**
   * A place for clients to attach arbitrary data to an address. Never set in MapFacts.
   * @param temporaryData temporaryData or {@code null} for none
   */
  public GeostoreAddressProto setTemporaryData(Proto2BridgeMessageSet temporaryData) {
    this.temporaryData = temporaryData;
    return this;
  }

  @Override
  public GeostoreAddressProto set(String fieldName, Object value) {
    return (GeostoreAddressProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreAddressProto clone() {
    return (GeostoreAddressProto) super.clone();
  }

}
