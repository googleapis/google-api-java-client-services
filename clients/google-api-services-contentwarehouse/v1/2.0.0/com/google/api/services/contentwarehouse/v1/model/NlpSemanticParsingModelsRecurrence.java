/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Recurrence rule for specifying date- and time-based repetition for tasks. Next id: 12.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSemanticParsingModelsRecurrence extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Specifies when in the day the task should occur. Applies to all frequencies DAILY and
   * greater. If absent, the repeating tasks are considered "all day" type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingModelsRecurrenceDailyPattern dailyPattern;

  /**
   * This field of the Recurrence message should not in general be used by outside clients of the
   * grammar. It is intended to be used internally in Aqua for evaluation purposes. The rationale is
   * that token counts depend on the particular tokenization used in Aqua which may be different
   * from the one used by the client and may change from time to time. Outside clients should not
   * create a dependency on the current tokenization used in Aqua.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingAnnotationEvalData evalData;

  /**
   * Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X
   * days, months, years, etc. Example: [remind me to call mom every 2nd week]. Default is 1 (every
   * day, every month, every year). Floating point numbers are understood and rounded to the nearest
   * integer. E.g. "every 2.8 months" => (every 3)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer every;

  /**
   * Required. The high-level frequency of the recurrence.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String frequency;

  /**
   * Specify a monthly recurrence. Valid and required for MONTHLY frequencies only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingModelsRecurrenceMonthlyPattern monthlyPattern;

  /**
   * How many times the task should be repeated within the frequency interval. Floating point
   * numbers are understood and rounded to the nearest integer. E.g. "3.8 times per week" =>
   * (num_instances_in_frequency 4)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numInstancesInFrequency;

  /**
   * Required. The end condition for the recurrence.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingModelsRecurrenceRecurrenceEnd recurrenceEnd;

  /**
   * Required. The start of the recurrence.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingModelsRecurrenceRecurrenceStart recurrenceStart;

  /**
   * Optional time included with some types of recurrence phrases, such as "every morning".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingDatetimeDateTime time;

  /**
   * Specify a weekly recurrence. Valid and required for WEEKLY frequencies only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingModelsRecurrenceWeeklyPattern weeklyPattern;

  /**
   * Specify a yearly recurrence. Valid only for YEARLY frequencies.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingModelsRecurrenceYearlyPattern yearlyPattern;

  /**
   * Optional. Specifies when in the day the task should occur. Applies to all frequencies DAILY and
   * greater. If absent, the repeating tasks are considered "all day" type.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrenceDailyPattern getDailyPattern() {
    return dailyPattern;
  }

  /**
   * Optional. Specifies when in the day the task should occur. Applies to all frequencies DAILY and
   * greater. If absent, the repeating tasks are considered "all day" type.
   * @param dailyPattern dailyPattern or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrence setDailyPattern(NlpSemanticParsingModelsRecurrenceDailyPattern dailyPattern) {
    this.dailyPattern = dailyPattern;
    return this;
  }

  /**
   * This field of the Recurrence message should not in general be used by outside clients of the
   * grammar. It is intended to be used internally in Aqua for evaluation purposes. The rationale is
   * that token counts depend on the particular tokenization used in Aqua which may be different
   * from the one used by the client and may change from time to time. Outside clients should not
   * create a dependency on the current tokenization used in Aqua.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingAnnotationEvalData getEvalData() {
    return evalData;
  }

  /**
   * This field of the Recurrence message should not in general be used by outside clients of the
   * grammar. It is intended to be used internally in Aqua for evaluation purposes. The rationale is
   * that token counts depend on the particular tokenization used in Aqua which may be different
   * from the one used by the client and may change from time to time. Outside clients should not
   * create a dependency on the current tokenization used in Aqua.
   * @param evalData evalData or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrence setEvalData(NlpSemanticParsingAnnotationEvalData evalData) {
    this.evalData = evalData;
    return this;
  }

  /**
   * Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X
   * days, months, years, etc. Example: [remind me to call mom every 2nd week]. Default is 1 (every
   * day, every month, every year). Floating point numbers are understood and rounded to the nearest
   * integer. E.g. "every 2.8 months" => (every 3)
   * @return value or {@code null} for none
   */
  public java.lang.Integer getEvery() {
    return every;
  }

  /**
   * Multiplier on the frequency of the recurrence. Use this to specify patterns that recur every X
   * days, months, years, etc. Example: [remind me to call mom every 2nd week]. Default is 1 (every
   * day, every month, every year). Floating point numbers are understood and rounded to the nearest
   * integer. E.g. "every 2.8 months" => (every 3)
   * @param every every or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrence setEvery(java.lang.Integer every) {
    this.every = every;
    return this;
  }

  /**
   * Required. The high-level frequency of the recurrence.
   * @return value or {@code null} for none
   */
  public java.lang.String getFrequency() {
    return frequency;
  }

  /**
   * Required. The high-level frequency of the recurrence.
   * @param frequency frequency or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrence setFrequency(java.lang.String frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Specify a monthly recurrence. Valid and required for MONTHLY frequencies only.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrenceMonthlyPattern getMonthlyPattern() {
    return monthlyPattern;
  }

  /**
   * Specify a monthly recurrence. Valid and required for MONTHLY frequencies only.
   * @param monthlyPattern monthlyPattern or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrence setMonthlyPattern(NlpSemanticParsingModelsRecurrenceMonthlyPattern monthlyPattern) {
    this.monthlyPattern = monthlyPattern;
    return this;
  }

  /**
   * How many times the task should be repeated within the frequency interval. Floating point
   * numbers are understood and rounded to the nearest integer. E.g. "3.8 times per week" =>
   * (num_instances_in_frequency 4)
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumInstancesInFrequency() {
    return numInstancesInFrequency;
  }

  /**
   * How many times the task should be repeated within the frequency interval. Floating point
   * numbers are understood and rounded to the nearest integer. E.g. "3.8 times per week" =>
   * (num_instances_in_frequency 4)
   * @param numInstancesInFrequency numInstancesInFrequency or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrence setNumInstancesInFrequency(java.lang.Integer numInstancesInFrequency) {
    this.numInstancesInFrequency = numInstancesInFrequency;
    return this;
  }

  /**
   * Required. The end condition for the recurrence.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrenceRecurrenceEnd getRecurrenceEnd() {
    return recurrenceEnd;
  }

  /**
   * Required. The end condition for the recurrence.
   * @param recurrenceEnd recurrenceEnd or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrence setRecurrenceEnd(NlpSemanticParsingModelsRecurrenceRecurrenceEnd recurrenceEnd) {
    this.recurrenceEnd = recurrenceEnd;
    return this;
  }

  /**
   * Required. The start of the recurrence.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrenceRecurrenceStart getRecurrenceStart() {
    return recurrenceStart;
  }

  /**
   * Required. The start of the recurrence.
   * @param recurrenceStart recurrenceStart or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrence setRecurrenceStart(NlpSemanticParsingModelsRecurrenceRecurrenceStart recurrenceStart) {
    this.recurrenceStart = recurrenceStart;
    return this;
  }

  /**
   * Optional time included with some types of recurrence phrases, such as "every morning".
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingDatetimeDateTime getTime() {
    return time;
  }

  /**
   * Optional time included with some types of recurrence phrases, such as "every morning".
   * @param time time or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrence setTime(NlpSemanticParsingDatetimeDateTime time) {
    this.time = time;
    return this;
  }

  /**
   * Specify a weekly recurrence. Valid and required for WEEKLY frequencies only.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrenceWeeklyPattern getWeeklyPattern() {
    return weeklyPattern;
  }

  /**
   * Specify a weekly recurrence. Valid and required for WEEKLY frequencies only.
   * @param weeklyPattern weeklyPattern or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrence setWeeklyPattern(NlpSemanticParsingModelsRecurrenceWeeklyPattern weeklyPattern) {
    this.weeklyPattern = weeklyPattern;
    return this;
  }

  /**
   * Specify a yearly recurrence. Valid only for YEARLY frequencies.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrenceYearlyPattern getYearlyPattern() {
    return yearlyPattern;
  }

  /**
   * Specify a yearly recurrence. Valid only for YEARLY frequencies.
   * @param yearlyPattern yearlyPattern or {@code null} for none
   */
  public NlpSemanticParsingModelsRecurrence setYearlyPattern(NlpSemanticParsingModelsRecurrenceYearlyPattern yearlyPattern) {
    this.yearlyPattern = yearlyPattern;
    return this;
  }

  @Override
  public NlpSemanticParsingModelsRecurrence set(String fieldName, Object value) {
    return (NlpSemanticParsingModelsRecurrence) super.set(fieldName, value);
  }

  @Override
  public NlpSemanticParsingModelsRecurrence clone() {
    return (NlpSemanticParsingModelsRecurrence) super.clone();
  }

}
