/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.run.v1alpha1.model;

/**
 * The desired state of the Domain Mapping.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Run API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DomainMappingSpec extends com.google.api.client.json.GenericJson {

  /**
   * The mode of the certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String certificateMode;

  /**
   * If set, the mapping will override any mapping set before this spec was set. It is recommended
   * that the user leaves this empty to receive an error warning about a potential conflict and only
   * set it once the respective UI has given such a warning.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean forceOverride;

  /**
   * The name of the Knative Route that this DomainMapping applies to. The route must exist.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String routeName;

  /**
   * The mode of the certificate.
   * @return value or {@code null} for none
   */
  public java.lang.String getCertificateMode() {
    return certificateMode;
  }

  /**
   * The mode of the certificate.
   * @param certificateMode certificateMode or {@code null} for none
   */
  public DomainMappingSpec setCertificateMode(java.lang.String certificateMode) {
    this.certificateMode = certificateMode;
    return this;
  }

  /**
   * If set, the mapping will override any mapping set before this spec was set. It is recommended
   * that the user leaves this empty to receive an error warning about a potential conflict and only
   * set it once the respective UI has given such a warning.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getForceOverride() {
    return forceOverride;
  }

  /**
   * If set, the mapping will override any mapping set before this spec was set. It is recommended
   * that the user leaves this empty to receive an error warning about a potential conflict and only
   * set it once the respective UI has given such a warning.
   * @param forceOverride forceOverride or {@code null} for none
   */
  public DomainMappingSpec setForceOverride(java.lang.Boolean forceOverride) {
    this.forceOverride = forceOverride;
    return this;
  }

  /**
   * The name of the Knative Route that this DomainMapping applies to. The route must exist.
   * @return value or {@code null} for none
   */
  public java.lang.String getRouteName() {
    return routeName;
  }

  /**
   * The name of the Knative Route that this DomainMapping applies to. The route must exist.
   * @param routeName routeName or {@code null} for none
   */
  public DomainMappingSpec setRouteName(java.lang.String routeName) {
    this.routeName = routeName;
    return this;
  }

  @Override
  public DomainMappingSpec set(String fieldName, Object value) {
    return (DomainMappingSpec) super.set(fieldName, value);
  }

  @Override
  public DomainMappingSpec clone() {
    return (DomainMappingSpec) super.clone();
  }

}
