/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Annotators whose semantics are represented via a protocol message should add to that message a
 * field or extension of this type and set it using Annotator::PopulateAnnotationEvalData to enable
 * span-based evaluation metrics in training. Evaluation is done based on token spans. The byte span
 * aligns with the token span and is used when saving examples. Background: In some settings, the
 * examples used to induce/train a grammar do not specify complete semantics of an annotation. For
 * example, some examples that come from Ewok specify only the span associated with each annotation.
 * This message allows evaluation metrics to test the span by embedding it in the semantics.
 * LINT.IfChange
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSemanticParsingAnnotationEvalData extends com.google.api.client.json.GenericJson {

  /**
   * Additional spans after the first. Empty in all additional_spans.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingAnnotationEvalData> additionalSpans;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numBytes;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numTokens;

  /**
   * Byte position within the utterance. Safe to use across different components of the NLU stack as
   * long as said components have access to the same query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer startByte;

  /**
   * Token position. This is cleared when normalizing examples for storage because tokenization
   * changes over time. DO NOT use these two fields across components that use different
   * tokenizations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer startToken;

  /**
   * Additional spans after the first. Empty in all additional_spans.
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingAnnotationEvalData> getAdditionalSpans() {
    return additionalSpans;
  }

  /**
   * Additional spans after the first. Empty in all additional_spans.
   * @param additionalSpans additionalSpans or {@code null} for none
   */
  public NlpSemanticParsingAnnotationEvalData setAdditionalSpans(java.util.List<NlpSemanticParsingAnnotationEvalData> additionalSpans) {
    this.additionalSpans = additionalSpans;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumBytes() {
    return numBytes;
  }

  /**
   * @param numBytes numBytes or {@code null} for none
   */
  public NlpSemanticParsingAnnotationEvalData setNumBytes(java.lang.Integer numBytes) {
    this.numBytes = numBytes;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumTokens() {
    return numTokens;
  }

  /**
   * @param numTokens numTokens or {@code null} for none
   */
  public NlpSemanticParsingAnnotationEvalData setNumTokens(java.lang.Integer numTokens) {
    this.numTokens = numTokens;
    return this;
  }

  /**
   * Byte position within the utterance. Safe to use across different components of the NLU stack as
   * long as said components have access to the same query.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getStartByte() {
    return startByte;
  }

  /**
   * Byte position within the utterance. Safe to use across different components of the NLU stack as
   * long as said components have access to the same query.
   * @param startByte startByte or {@code null} for none
   */
  public NlpSemanticParsingAnnotationEvalData setStartByte(java.lang.Integer startByte) {
    this.startByte = startByte;
    return this;
  }

  /**
   * Token position. This is cleared when normalizing examples for storage because tokenization
   * changes over time. DO NOT use these two fields across components that use different
   * tokenizations.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getStartToken() {
    return startToken;
  }

  /**
   * Token position. This is cleared when normalizing examples for storage because tokenization
   * changes over time. DO NOT use these two fields across components that use different
   * tokenizations.
   * @param startToken startToken or {@code null} for none
   */
  public NlpSemanticParsingAnnotationEvalData setStartToken(java.lang.Integer startToken) {
    this.startToken = startToken;
    return this;
  }

  @Override
  public NlpSemanticParsingAnnotationEvalData set(String fieldName, Object value) {
    return (NlpSemanticParsingAnnotationEvalData) super.set(fieldName, value);
  }

  @Override
  public NlpSemanticParsingAnnotationEvalData clone() {
    return (NlpSemanticParsingAnnotationEvalData) super.clone();
  }

}
