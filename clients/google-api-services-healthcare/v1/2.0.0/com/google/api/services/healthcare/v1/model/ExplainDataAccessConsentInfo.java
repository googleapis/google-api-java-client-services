/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.healthcare.v1.model;

/**
 * The enforcing consent's metadata.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Healthcare API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ExplainDataAccessConsentInfo extends com.google.api.client.json.GenericJson {

  /**
   * The compartment base resources that matched a cascading policy. Each resource has the following
   * format: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_s
   * tore_id}/fhir/{resource_type}/{resource_id}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> cascadeOrigins;

  /**
   * The resource name of this consent resource, in the format: `projects/{project_id}/locations/{lo
   * cation}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String consentResource;

  /**
   * Last enforcement timestamp of this consent resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String enforcementTime;

  /**
   * A list of all the matching accessor scopes of this consent policy that enforced
   * ExplainDataAccessConsentScope.accessor_scope.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ConsentAccessorScope> matchingAccessorScopes;

  static {
    // hack to force ProGuard to consider ConsentAccessorScope used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ConsentAccessorScope.class);
  }

  /**
   * The patient owning the consent (only applicable for patient consents), in the format: `projects
   * /{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Pat
   * ient/{patient_id}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String patientConsentOwner;

  /**
   * The policy type of consent resource (e.g. PATIENT, ADMIN).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The consent's variant combinations. A single consent may have multiple variants.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> variants;

  /**
   * The compartment base resources that matched a cascading policy. Each resource has the following
   * format: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_s
   * tore_id}/fhir/{resource_type}/{resource_id}`
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCascadeOrigins() {
    return cascadeOrigins;
  }

  /**
   * The compartment base resources that matched a cascading policy. Each resource has the following
   * format: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_s
   * tore_id}/fhir/{resource_type}/{resource_id}`
   * @param cascadeOrigins cascadeOrigins or {@code null} for none
   */
  public ExplainDataAccessConsentInfo setCascadeOrigins(java.util.List<java.lang.String> cascadeOrigins) {
    this.cascadeOrigins = cascadeOrigins;
    return this;
  }

  /**
   * The resource name of this consent resource, in the format: `projects/{project_id}/locations/{lo
   * cation}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getConsentResource() {
    return consentResource;
  }

  /**
   * The resource name of this consent resource, in the format: `projects/{project_id}/locations/{lo
   * cation}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Consent/{resource_id}`.
   * @param consentResource consentResource or {@code null} for none
   */
  public ExplainDataAccessConsentInfo setConsentResource(java.lang.String consentResource) {
    this.consentResource = consentResource;
    return this;
  }

  /**
   * Last enforcement timestamp of this consent resource.
   * @return value or {@code null} for none
   */
  public String getEnforcementTime() {
    return enforcementTime;
  }

  /**
   * Last enforcement timestamp of this consent resource.
   * @param enforcementTime enforcementTime or {@code null} for none
   */
  public ExplainDataAccessConsentInfo setEnforcementTime(String enforcementTime) {
    this.enforcementTime = enforcementTime;
    return this;
  }

  /**
   * A list of all the matching accessor scopes of this consent policy that enforced
   * ExplainDataAccessConsentScope.accessor_scope.
   * @return value or {@code null} for none
   */
  public java.util.List<ConsentAccessorScope> getMatchingAccessorScopes() {
    return matchingAccessorScopes;
  }

  /**
   * A list of all the matching accessor scopes of this consent policy that enforced
   * ExplainDataAccessConsentScope.accessor_scope.
   * @param matchingAccessorScopes matchingAccessorScopes or {@code null} for none
   */
  public ExplainDataAccessConsentInfo setMatchingAccessorScopes(java.util.List<ConsentAccessorScope> matchingAccessorScopes) {
    this.matchingAccessorScopes = matchingAccessorScopes;
    return this;
  }

  /**
   * The patient owning the consent (only applicable for patient consents), in the format: `projects
   * /{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Pat
   * ient/{patient_id}`
   * @return value or {@code null} for none
   */
  public java.lang.String getPatientConsentOwner() {
    return patientConsentOwner;
  }

  /**
   * The patient owning the consent (only applicable for patient consents), in the format: `projects
   * /{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}/fhir/Pat
   * ient/{patient_id}`
   * @param patientConsentOwner patientConsentOwner or {@code null} for none
   */
  public ExplainDataAccessConsentInfo setPatientConsentOwner(java.lang.String patientConsentOwner) {
    this.patientConsentOwner = patientConsentOwner;
    return this;
  }

  /**
   * The policy type of consent resource (e.g. PATIENT, ADMIN).
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The policy type of consent resource (e.g. PATIENT, ADMIN).
   * @param type type or {@code null} for none
   */
  public ExplainDataAccessConsentInfo setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * The consent's variant combinations. A single consent may have multiple variants.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getVariants() {
    return variants;
  }

  /**
   * The consent's variant combinations. A single consent may have multiple variants.
   * @param variants variants or {@code null} for none
   */
  public ExplainDataAccessConsentInfo setVariants(java.util.List<java.lang.String> variants) {
    this.variants = variants;
    return this;
  }

  @Override
  public ExplainDataAccessConsentInfo set(String fieldName, Object value) {
    return (ExplainDataAccessConsentInfo) super.set(fieldName, value);
  }

  @Override
  public ExplainDataAccessConsentInfo clone() {
    return (ExplainDataAccessConsentInfo) super.clone();
  }

}
