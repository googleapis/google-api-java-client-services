/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebaseapphosting.v1beta.model;

/**
 * The URI of an storage archive or a signed URL to use as the build source.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase App Hosting API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ArchiveSource extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The author contained in the metadata of a version control change.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SourceUserMetadata author;

  /**
   * Optional. An optional message that describes the uploaded version of the source code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Signed URL to an archive in a storage bucket.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String externalSignedUri;

  /**
   * Optional. Relative path in the archive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rootDirectory;

  /**
   * URI to an archive in Cloud Storage. The object must be a zipped (.zip) or gzipped archive file
   * (.tar.gz) containing source to deploy.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String userStorageUri;

  /**
   * Optional. The author contained in the metadata of a version control change.
   * @return value or {@code null} for none
   */
  public SourceUserMetadata getAuthor() {
    return author;
  }

  /**
   * Optional. The author contained in the metadata of a version control change.
   * @param author author or {@code null} for none
   */
  public ArchiveSource setAuthor(SourceUserMetadata author) {
    this.author = author;
    return this;
  }

  /**
   * Optional. An optional message that describes the uploaded version of the source code.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Optional. An optional message that describes the uploaded version of the source code.
   * @param description description or {@code null} for none
   */
  public ArchiveSource setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Signed URL to an archive in a storage bucket.
   * @return value or {@code null} for none
   */
  public java.lang.String getExternalSignedUri() {
    return externalSignedUri;
  }

  /**
   * Signed URL to an archive in a storage bucket.
   * @param externalSignedUri externalSignedUri or {@code null} for none
   */
  public ArchiveSource setExternalSignedUri(java.lang.String externalSignedUri) {
    this.externalSignedUri = externalSignedUri;
    return this;
  }

  /**
   * Optional. Relative path in the archive.
   * @return value or {@code null} for none
   */
  public java.lang.String getRootDirectory() {
    return rootDirectory;
  }

  /**
   * Optional. Relative path in the archive.
   * @param rootDirectory rootDirectory or {@code null} for none
   */
  public ArchiveSource setRootDirectory(java.lang.String rootDirectory) {
    this.rootDirectory = rootDirectory;
    return this;
  }

  /**
   * URI to an archive in Cloud Storage. The object must be a zipped (.zip) or gzipped archive file
   * (.tar.gz) containing source to deploy.
   * @return value or {@code null} for none
   */
  public java.lang.String getUserStorageUri() {
    return userStorageUri;
  }

  /**
   * URI to an archive in Cloud Storage. The object must be a zipped (.zip) or gzipped archive file
   * (.tar.gz) containing source to deploy.
   * @param userStorageUri userStorageUri or {@code null} for none
   */
  public ArchiveSource setUserStorageUri(java.lang.String userStorageUri) {
    this.userStorageUri = userStorageUri;
    return this;
  }

  @Override
  public ArchiveSource set(String fieldName, Object value) {
    return (ArchiveSource) super.set(fieldName, value);
  }

  @Override
  public ArchiveSource clone() {
    return (ArchiveSource) super.clone();
  }

}
