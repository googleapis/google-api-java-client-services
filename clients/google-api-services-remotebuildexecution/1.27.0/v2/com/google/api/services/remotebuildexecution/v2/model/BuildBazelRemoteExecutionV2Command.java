/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.remotebuildexecution.v2.model;

/**
 * A `Command` is the actual command executed by a worker running an Action and specifications of
 * its environment.
 *
 * Except as otherwise required, the environment (such as which system libraries or binaries are
 * available, and what filesystems are mounted where) is defined by and specific to the
 * implementation of the remote execution API.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Remote Build Execution API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BuildBazelRemoteExecutionV2Command extends com.google.api.client.json.GenericJson {

  /**
   * The arguments to the command. The first argument must be the path to the executable, which must
   * be either a relative path, in which case it is evaluated with respect to the input root, or an
   * absolute path.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> arguments;

  /**
   * The environment variables to set when running the program. The worker may provide its own
   * default environment variables; these defaults can be overridden using this field. Additional
   * variables can also be specified.
   *
   * In order to ensure that equivalent Commands always hash to the same value, the environment
   * variables MUST be lexicographically sorted by name. Sorting of strings is done by code point,
   * equivalently, by the UTF-8 bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<BuildBazelRemoteExecutionV2CommandEnvironmentVariable> environmentVariables;

  /**
   * A list of the output directories that the client expects to retrieve from the action. Only the
   * listed directories will be returned (an entire directory structure will be returned as a Tree
   * message digest, see OutputDirectory), as well as files listed in `output_files`. Other files or
   * directories that may be created during command execution are discarded.
   *
   * The paths are relative to the working directory of the action execution. The paths are
   * specified using a single forward slash (`/`) as a path separator, even if the execution
   * platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a
   * leading slash, being a relative path. The special value of empty string is allowed, although
   * not recommended, and can be used to capture the entire working directory tree, including
   * inputs.
   *
   * In order to ensure consistent hashing of the same Action, the output paths MUST be sorted
   * lexicographically by code point (or, equivalently, by UTF-8 bytes).
   *
   * An output directory cannot be duplicated or have the same path as any of the listed output
   * files.
   *
   * Directories leading up to the output directories (but not the output directories themselves)
   * are created by the worker prior to execution, even if they are not explicitly part of the input
   * root.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> outputDirectories;

  /**
   * A list of the output files that the client expects to retrieve from the action. Only the listed
   * files, as well as directories listed in `output_directories`, will be returned to the client as
   * output. Other files or directories that may be created during command execution are discarded.
   *
   * The paths are relative to the working directory of the action execution. The paths are
   * specified using a single forward slash (`/`) as a path separator, even if the execution
   * platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a
   * leading slash, being a relative path.
   *
   * In order to ensure consistent hashing of the same Action, the output paths MUST be sorted
   * lexicographically by code point (or, equivalently, by UTF-8 bytes).
   *
   * An output file cannot be duplicated, be a parent of another output file, or have the same path
   * as any of the listed output directories.
   *
   * Directories leading up to the output files are created by the worker prior to execution, even
   * if they are not explicitly part of the input root.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> outputFiles;

  /**
   * The platform requirements for the execution environment. The server MAY choose to execute the
   * action on any worker satisfying the requirements, so the client SHOULD ensure that running the
   * action on any such worker will have the same result.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BuildBazelRemoteExecutionV2Platform platform;

  /**
   * The working directory, relative to the input root, for the command to run in. It must be a
   * directory which exists in the input tree. If it is left empty, then the action is run in the
   * input root.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String workingDirectory;

  /**
   * The arguments to the command. The first argument must be the path to the executable, which must
   * be either a relative path, in which case it is evaluated with respect to the input root, or an
   * absolute path.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getArguments() {
    return arguments;
  }

  /**
   * The arguments to the command. The first argument must be the path to the executable, which must
   * be either a relative path, in which case it is evaluated with respect to the input root, or an
   * absolute path.
   * @param arguments arguments or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Command setArguments(java.util.List<java.lang.String> arguments) {
    this.arguments = arguments;
    return this;
  }

  /**
   * The environment variables to set when running the program. The worker may provide its own
   * default environment variables; these defaults can be overridden using this field. Additional
   * variables can also be specified.
   *
   * In order to ensure that equivalent Commands always hash to the same value, the environment
   * variables MUST be lexicographically sorted by name. Sorting of strings is done by code point,
   * equivalently, by the UTF-8 bytes.
   * @return value or {@code null} for none
   */
  public java.util.List<BuildBazelRemoteExecutionV2CommandEnvironmentVariable> getEnvironmentVariables() {
    return environmentVariables;
  }

  /**
   * The environment variables to set when running the program. The worker may provide its own
   * default environment variables; these defaults can be overridden using this field. Additional
   * variables can also be specified.
   *
   * In order to ensure that equivalent Commands always hash to the same value, the environment
   * variables MUST be lexicographically sorted by name. Sorting of strings is done by code point,
   * equivalently, by the UTF-8 bytes.
   * @param environmentVariables environmentVariables or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Command setEnvironmentVariables(java.util.List<BuildBazelRemoteExecutionV2CommandEnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  /**
   * A list of the output directories that the client expects to retrieve from the action. Only the
   * listed directories will be returned (an entire directory structure will be returned as a Tree
   * message digest, see OutputDirectory), as well as files listed in `output_files`. Other files or
   * directories that may be created during command execution are discarded.
   *
   * The paths are relative to the working directory of the action execution. The paths are
   * specified using a single forward slash (`/`) as a path separator, even if the execution
   * platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a
   * leading slash, being a relative path. The special value of empty string is allowed, although
   * not recommended, and can be used to capture the entire working directory tree, including
   * inputs.
   *
   * In order to ensure consistent hashing of the same Action, the output paths MUST be sorted
   * lexicographically by code point (or, equivalently, by UTF-8 bytes).
   *
   * An output directory cannot be duplicated or have the same path as any of the listed output
   * files.
   *
   * Directories leading up to the output directories (but not the output directories themselves)
   * are created by the worker prior to execution, even if they are not explicitly part of the input
   * root.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getOutputDirectories() {
    return outputDirectories;
  }

  /**
   * A list of the output directories that the client expects to retrieve from the action. Only the
   * listed directories will be returned (an entire directory structure will be returned as a Tree
   * message digest, see OutputDirectory), as well as files listed in `output_files`. Other files or
   * directories that may be created during command execution are discarded.
   *
   * The paths are relative to the working directory of the action execution. The paths are
   * specified using a single forward slash (`/`) as a path separator, even if the execution
   * platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a
   * leading slash, being a relative path. The special value of empty string is allowed, although
   * not recommended, and can be used to capture the entire working directory tree, including
   * inputs.
   *
   * In order to ensure consistent hashing of the same Action, the output paths MUST be sorted
   * lexicographically by code point (or, equivalently, by UTF-8 bytes).
   *
   * An output directory cannot be duplicated or have the same path as any of the listed output
   * files.
   *
   * Directories leading up to the output directories (but not the output directories themselves)
   * are created by the worker prior to execution, even if they are not explicitly part of the input
   * root.
   * @param outputDirectories outputDirectories or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Command setOutputDirectories(java.util.List<java.lang.String> outputDirectories) {
    this.outputDirectories = outputDirectories;
    return this;
  }

  /**
   * A list of the output files that the client expects to retrieve from the action. Only the listed
   * files, as well as directories listed in `output_directories`, will be returned to the client as
   * output. Other files or directories that may be created during command execution are discarded.
   *
   * The paths are relative to the working directory of the action execution. The paths are
   * specified using a single forward slash (`/`) as a path separator, even if the execution
   * platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a
   * leading slash, being a relative path.
   *
   * In order to ensure consistent hashing of the same Action, the output paths MUST be sorted
   * lexicographically by code point (or, equivalently, by UTF-8 bytes).
   *
   * An output file cannot be duplicated, be a parent of another output file, or have the same path
   * as any of the listed output directories.
   *
   * Directories leading up to the output files are created by the worker prior to execution, even
   * if they are not explicitly part of the input root.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getOutputFiles() {
    return outputFiles;
  }

  /**
   * A list of the output files that the client expects to retrieve from the action. Only the listed
   * files, as well as directories listed in `output_directories`, will be returned to the client as
   * output. Other files or directories that may be created during command execution are discarded.
   *
   * The paths are relative to the working directory of the action execution. The paths are
   * specified using a single forward slash (`/`) as a path separator, even if the execution
   * platform natively uses a different separator. The path MUST NOT include a trailing slash, nor a
   * leading slash, being a relative path.
   *
   * In order to ensure consistent hashing of the same Action, the output paths MUST be sorted
   * lexicographically by code point (or, equivalently, by UTF-8 bytes).
   *
   * An output file cannot be duplicated, be a parent of another output file, or have the same path
   * as any of the listed output directories.
   *
   * Directories leading up to the output files are created by the worker prior to execution, even
   * if they are not explicitly part of the input root.
   * @param outputFiles outputFiles or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Command setOutputFiles(java.util.List<java.lang.String> outputFiles) {
    this.outputFiles = outputFiles;
    return this;
  }

  /**
   * The platform requirements for the execution environment. The server MAY choose to execute the
   * action on any worker satisfying the requirements, so the client SHOULD ensure that running the
   * action on any such worker will have the same result.
   * @return value or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Platform getPlatform() {
    return platform;
  }

  /**
   * The platform requirements for the execution environment. The server MAY choose to execute the
   * action on any worker satisfying the requirements, so the client SHOULD ensure that running the
   * action on any such worker will have the same result.
   * @param platform platform or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Command setPlatform(BuildBazelRemoteExecutionV2Platform platform) {
    this.platform = platform;
    return this;
  }

  /**
   * The working directory, relative to the input root, for the command to run in. It must be a
   * directory which exists in the input tree. If it is left empty, then the action is run in the
   * input root.
   * @return value or {@code null} for none
   */
  public java.lang.String getWorkingDirectory() {
    return workingDirectory;
  }

  /**
   * The working directory, relative to the input root, for the command to run in. It must be a
   * directory which exists in the input tree. If it is left empty, then the action is run in the
   * input root.
   * @param workingDirectory workingDirectory or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Command setWorkingDirectory(java.lang.String workingDirectory) {
    this.workingDirectory = workingDirectory;
    return this;
  }

  @Override
  public BuildBazelRemoteExecutionV2Command set(String fieldName, Object value) {
    return (BuildBazelRemoteExecutionV2Command) super.set(fieldName, value);
  }

  @Override
  public BuildBazelRemoteExecutionV2Command clone() {
    return (BuildBazelRemoteExecutionV2Command) super.clone();
  }

}
