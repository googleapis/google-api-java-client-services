/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataplex.v1.model;

/**
 * MetadataTemplate definition for an AspectType.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Dataplex API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDataplexV1AspectTypeMetadataTemplate extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Specifies annotations on this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDataplexV1AspectTypeMetadataTemplateAnnotations annotations;

  /**
   * Optional. If the type is array, set array_items. array_items can refer to a primitive field or
   * a complex (record only) field. To specify a primitive field, you only need to set name and type
   * in the nested MetadataTemplate. The recommended value for the name field is item, as this isn't
   * used in the actual payload.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDataplexV1AspectTypeMetadataTemplate arrayItems;

  /**
   * Optional. Specifies the constraints on this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDataplexV1AspectTypeMetadataTemplateConstraints constraints;

  /**
   * Optional. The list of values for an enum type. You must define it if the type is enum.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudDataplexV1AspectTypeMetadataTemplateEnumValue> enumValues;

  /**
   * Optional. Index is used to encode Template messages. The value of index can range between 1 and
   * 2,147,483,647. Index must be unique within all fields in a Template. (Nested Templates can
   * reuse indexes). Once a Template is defined, the index cannot be changed, because it identifies
   * the field in the actual storage format. Index is a mandatory field, but it is optional for top
   * level fields, and map/array "values" definitions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer index;

  /**
   * Optional. If the type is map, set map_items. map_items can refer to a primitive field or a
   * complex (record only) field. To specify a primitive field, you only need to set name and type
   * in the nested MetadataTemplate. The recommended value for the name field is item, as this isn't
   * used in the actual payload.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDataplexV1AspectTypeMetadataTemplate mapItems;

  /**
   * Required. The name of the field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. Field definition. You must specify it if the type is record. It defines the nested
   * fields.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudDataplexV1AspectTypeMetadataTemplate> recordFields;

  /**
   * Required. The datatype of this field. The following values are supported:Primitive types:
   * string integer boolean double datetime. Must be of the format RFC3339 UTC "Zulu" (Examples:
   * "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z").Complex types: enum array map
   * record
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Optional. You can use type id if this definition of the field needs to be reused later. The
   * type id must be unique across the entire template. You can only specify it if the field type is
   * record.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String typeId;

  /**
   * Optional. A reference to another field definition (not an inline definition). The value must be
   * equal to the value of an id field defined elsewhere in the MetadataTemplate. Only fields with
   * record type can refer to other fields.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String typeRef;

  /**
   * Optional. Specifies annotations on this field.
   * @return value or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplateAnnotations getAnnotations() {
    return annotations;
  }

  /**
   * Optional. Specifies annotations on this field.
   * @param annotations annotations or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate setAnnotations(GoogleCloudDataplexV1AspectTypeMetadataTemplateAnnotations annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Optional. If the type is array, set array_items. array_items can refer to a primitive field or
   * a complex (record only) field. To specify a primitive field, you only need to set name and type
   * in the nested MetadataTemplate. The recommended value for the name field is item, as this isn't
   * used in the actual payload.
   * @return value or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate getArrayItems() {
    return arrayItems;
  }

  /**
   * Optional. If the type is array, set array_items. array_items can refer to a primitive field or
   * a complex (record only) field. To specify a primitive field, you only need to set name and type
   * in the nested MetadataTemplate. The recommended value for the name field is item, as this isn't
   * used in the actual payload.
   * @param arrayItems arrayItems or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate setArrayItems(GoogleCloudDataplexV1AspectTypeMetadataTemplate arrayItems) {
    this.arrayItems = arrayItems;
    return this;
  }

  /**
   * Optional. Specifies the constraints on this field.
   * @return value or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplateConstraints getConstraints() {
    return constraints;
  }

  /**
   * Optional. Specifies the constraints on this field.
   * @param constraints constraints or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate setConstraints(GoogleCloudDataplexV1AspectTypeMetadataTemplateConstraints constraints) {
    this.constraints = constraints;
    return this;
  }

  /**
   * Optional. The list of values for an enum type. You must define it if the type is enum.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudDataplexV1AspectTypeMetadataTemplateEnumValue> getEnumValues() {
    return enumValues;
  }

  /**
   * Optional. The list of values for an enum type. You must define it if the type is enum.
   * @param enumValues enumValues or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate setEnumValues(java.util.List<GoogleCloudDataplexV1AspectTypeMetadataTemplateEnumValue> enumValues) {
    this.enumValues = enumValues;
    return this;
  }

  /**
   * Optional. Index is used to encode Template messages. The value of index can range between 1 and
   * 2,147,483,647. Index must be unique within all fields in a Template. (Nested Templates can
   * reuse indexes). Once a Template is defined, the index cannot be changed, because it identifies
   * the field in the actual storage format. Index is a mandatory field, but it is optional for top
   * level fields, and map/array "values" definitions.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getIndex() {
    return index;
  }

  /**
   * Optional. Index is used to encode Template messages. The value of index can range between 1 and
   * 2,147,483,647. Index must be unique within all fields in a Template. (Nested Templates can
   * reuse indexes). Once a Template is defined, the index cannot be changed, because it identifies
   * the field in the actual storage format. Index is a mandatory field, but it is optional for top
   * level fields, and map/array "values" definitions.
   * @param index index or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate setIndex(java.lang.Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Optional. If the type is map, set map_items. map_items can refer to a primitive field or a
   * complex (record only) field. To specify a primitive field, you only need to set name and type
   * in the nested MetadataTemplate. The recommended value for the name field is item, as this isn't
   * used in the actual payload.
   * @return value or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate getMapItems() {
    return mapItems;
  }

  /**
   * Optional. If the type is map, set map_items. map_items can refer to a primitive field or a
   * complex (record only) field. To specify a primitive field, you only need to set name and type
   * in the nested MetadataTemplate. The recommended value for the name field is item, as this isn't
   * used in the actual payload.
   * @param mapItems mapItems or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate setMapItems(GoogleCloudDataplexV1AspectTypeMetadataTemplate mapItems) {
    this.mapItems = mapItems;
    return this;
  }

  /**
   * Required. The name of the field.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required. The name of the field.
   * @param name name or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Field definition. You must specify it if the type is record. It defines the nested
   * fields.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudDataplexV1AspectTypeMetadataTemplate> getRecordFields() {
    return recordFields;
  }

  /**
   * Optional. Field definition. You must specify it if the type is record. It defines the nested
   * fields.
   * @param recordFields recordFields or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate setRecordFields(java.util.List<GoogleCloudDataplexV1AspectTypeMetadataTemplate> recordFields) {
    this.recordFields = recordFields;
    return this;
  }

  /**
   * Required. The datatype of this field. The following values are supported:Primitive types:
   * string integer boolean double datetime. Must be of the format RFC3339 UTC "Zulu" (Examples:
   * "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z").Complex types: enum array map
   * record
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Required. The datatype of this field. The following values are supported:Primitive types:
   * string integer boolean double datetime. Must be of the format RFC3339 UTC "Zulu" (Examples:
   * "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z").Complex types: enum array map
   * record
   * @param type type or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * Optional. You can use type id if this definition of the field needs to be reused later. The
   * type id must be unique across the entire template. You can only specify it if the field type is
   * record.
   * @return value or {@code null} for none
   */
  public java.lang.String getTypeId() {
    return typeId;
  }

  /**
   * Optional. You can use type id if this definition of the field needs to be reused later. The
   * type id must be unique across the entire template. You can only specify it if the field type is
   * record.
   * @param typeId typeId or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate setTypeId(java.lang.String typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * Optional. A reference to another field definition (not an inline definition). The value must be
   * equal to the value of an id field defined elsewhere in the MetadataTemplate. Only fields with
   * record type can refer to other fields.
   * @return value or {@code null} for none
   */
  public java.lang.String getTypeRef() {
    return typeRef;
  }

  /**
   * Optional. A reference to another field definition (not an inline definition). The value must be
   * equal to the value of an id field defined elsewhere in the MetadataTemplate. Only fields with
   * record type can refer to other fields.
   * @param typeRef typeRef or {@code null} for none
   */
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate setTypeRef(java.lang.String typeRef) {
    this.typeRef = typeRef;
    return this;
  }

  @Override
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate set(String fieldName, Object value) {
    return (GoogleCloudDataplexV1AspectTypeMetadataTemplate) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDataplexV1AspectTypeMetadataTemplate clone() {
    return (GoogleCloudDataplexV1AspectTypeMetadataTemplate) super.clone();
  }

}
