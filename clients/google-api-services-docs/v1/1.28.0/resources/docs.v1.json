{
  "kind": "discovery#restDescription",
  "description": "Reads and writes Google Docs documents.",
  "servicePath": "",
  "basePath": "",
  "revision": "20200107",
  "documentationLink": "https://developers.google.com/docs/",
  "id": "docs:v1",
  "discoveryVersion": "v1",
  "version_module": true,
  "schemas": {
    "ImageProperties": {
      "description": "The properties of an image.",
      "type": "object",
      "properties": {
        "transparency": {
          "description": "The transparency effect of the image. The value should be in the interval\n[0.0, 1.0], where 0 means no effect and 1 means completely transparent.",
          "format": "float",
          "type": "number"
        },
        "angle": {
          "description": "The clockwise rotation angle of the image, in radians.",
          "format": "float",
          "type": "number"
        },
        "contentUri": {
          "description": "A URI to the image with a default lifetime of 30 minutes.\nThis URI is tagged with the account of the requester. Anyone with the URI\neffectively accesses the image as the original requester. Access to the\nimage may be lost if the document's sharing settings change.",
          "type": "string"
        },
        "sourceUri": {
          "description": "The source URI is the URI used to insert the image. The source URI can be\nempty.",
          "type": "string"
        },
        "contrast": {
          "description": "The contrast effect of the image. The value should be in the interval\n[-1.0, 1.0], where 0 means no effect.",
          "format": "float",
          "type": "number"
        },
        "cropProperties": {
          "description": "The crop properties of the image.",
          "$ref": "CropProperties"
        },
        "brightness": {
          "type": "number",
          "description": "The brightness effect of the image. The value should be in the interval\n[-1.0, 1.0], where 0 means no effect.",
          "format": "float"
        }
      },
      "id": "ImageProperties"
    },
    "CreateHeaderRequest": {
      "properties": {
        "type": {
          "description": "The type of header to create.",
          "type": "string",
          "enumDescriptions": [
            "The header/footer type is unspecified.",
            "A default header/footer."
          ],
          "enum": [
            "HEADER_FOOTER_TYPE_UNSPECIFIED",
            "DEFAULT"
          ]
        }
      },
      "id": "CreateHeaderRequest",
      "description": "Creates a Header. The new header is applied to\nthe DocumentStyle.\n\nIf a header of the specified type already exists, a 400 bad request error\nis returned.",
      "type": "object"
    },
    "TabStop": {
      "type": "object",
      "properties": {
        "alignment": {
          "enumDescriptions": [
            "The tab stop alignment is unspecified.",
            "The tab stop is aligned to the start of the line. This is the default.",
            "The tab stop is aligned to the center of the line.",
            "The tab stop is aligned to the end of the line."
          ],
          "enum": [
            "TAB_STOP_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "description": "The alignment of this tab stop. If unset, the value defaults to START.",
          "type": "string"
        },
        "offset": {
          "description": "The offset between this tab stop and the start margin.",
          "$ref": "Dimension"
        }
      },
      "id": "TabStop",
      "description": "A tab stop within a paragraph."
    },
    "SuggestedNamedStyles": {
      "description": "A suggested change to the NamedStyles.",
      "type": "object",
      "properties": {
        "namedStyles": {
          "description": "A NamedStyles that only includes the\nchanges made in this suggestion. This can be used along with the\nnamed_styles_suggestion_state to\nsee which fields have changed and their new values.",
          "$ref": "NamedStyles"
        },
        "namedStylesSuggestionState": {
          "description": "A mask that indicates which of the fields on the base NamedStyles have been changed in this suggestion.",
          "$ref": "NamedStylesSuggestionState"
        }
      },
      "id": "SuggestedNamedStyles"
    },
    "Response": {
      "description": "A single response from an update.",
      "type": "object",
      "properties": {
        "createNamedRange": {
          "$ref": "CreateNamedRangeResponse",
          "description": "The result of creating a named range."
        },
        "insertInlineSheetsChart": {
          "$ref": "InsertInlineSheetsChartResponse",
          "description": "The result of inserting an inline Google Sheets chart."
        },
        "replaceAllText": {
          "description": "The result of replacing text.",
          "$ref": "ReplaceAllTextResponse"
        },
        "createFootnote": {
          "$ref": "CreateFootnoteResponse",
          "description": "The result of creating a footnote."
        },
        "insertInlineImage": {
          "$ref": "InsertInlineImageResponse",
          "description": "The result of inserting an inline image."
        },
        "createHeader": {
          "description": "The result of creating a header.",
          "$ref": "CreateHeaderResponse"
        },
        "createFooter": {
          "description": "The result of creating a footer.",
          "$ref": "CreateFooterResponse"
        }
      },
      "id": "Response"
    },
    "SubstringMatchCriteria": {
      "description": "A criteria that matches a specific string of text in the document.",
      "type": "object",
      "properties": {
        "text": {
          "description": "The text to search for in the document.",
          "type": "string"
        },
        "matchCase": {
          "description": "Indicates whether the search should respect case:\n\n- `True`: the search is case sensitive.\n- `False`: the search is case insensitive.",
          "type": "boolean"
        }
      },
      "id": "SubstringMatchCriteria"
    },
    "TextRun": {
      "properties": {
        "suggestedInsertionIds": {
          "description": "The suggested insertion IDs. A TextRun may\nhave multiple insertion IDs if it is a nested suggested change. If empty,\nthen this is not a suggested insertion.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "suggestedTextStyleChanges": {
          "type": "object",
          "additionalProperties": {
            "$ref": "SuggestedTextStyle"
          },
          "description": "The suggested text style changes to this run, keyed by suggestion ID."
        },
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "textStyle": {
          "$ref": "TextStyle",
          "description": "The text style of this run."
        },
        "content": {
          "description": "The text of this run.\n\nAny non-text elements in the run are replaced with the Unicode character\nU+E907.",
          "type": "string"
        }
      },
      "id": "TextRun",
      "description": "A ParagraphElement that represents a\nrun of text that all has the same styling.",
      "type": "object"
    },
    "StructuralElement": {
      "description": "A StructuralElement describes content that provides structure to the\ndocument.",
      "type": "object",
      "properties": {
        "table": {
          "$ref": "Table",
          "description": "A table type of structural element."
        },
        "paragraph": {
          "$ref": "Paragraph",
          "description": "A paragraph type of structural element."
        },
        "sectionBreak": {
          "$ref": "SectionBreak",
          "description": "A section break type of structural element."
        },
        "endIndex": {
          "description": "The zero-based end index of this structural element, exclusive, in UTF-16\ncode units.",
          "format": "int32",
          "type": "integer"
        },
        "tableOfContents": {
          "$ref": "TableOfContents",
          "description": "A table of contents type of structural element."
        },
        "startIndex": {
          "description": "The zero-based start index of this structural element, in UTF-16 code\nunits.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "StructuralElement"
    },
    "TableRange": {
      "type": "object",
      "properties": {
        "tableCellLocation": {
          "description": "The cell location where the table range starts.",
          "$ref": "TableCellLocation"
        },
        "rowSpan": {
          "description": "The row span of the table range.",
          "format": "int32",
          "type": "integer"
        },
        "columnSpan": {
          "description": "The column span of the table range.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "TableRange",
      "description": "A table range represents a reference to a subset of a table.\n\nIt's important to note that the cells specified by a table range do not\nnecessarily form a rectangle. For example, let's say we have a 3 x 3 table\nwhere all the cells of the last row are merged together. The table looks\nlike this:\n\n              \n     [             ]\n\nA table range with table cell location = (table_start_location, row = 0,\ncolumn = 0), row span = 3 and column span = 2 specifies the following cells:\n\n      x     x \n     [ x    x    x ]"
    },
    "TableRowStyle": {
      "id": "TableRowStyle",
      "description": "Styles that apply to a table row.",
      "type": "object",
      "properties": {
        "minRowHeight": {
          "$ref": "Dimension",
          "description": "The minimum height of the row. The row will be rendered in the Docs editor\nat a height equal to or greater than this value in order to show all the\ncontent in the row's cells."
        }
      }
    },
    "InlineObjectElement": {
      "properties": {
        "suggestedInsertionIds": {
          "description": "The suggested insertion IDs. An InlineObjectElement may have multiple insertion IDs\nif it is a nested suggested change. If empty, then this is not a suggested\ninsertion.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "suggestedTextStyleChanges": {
          "additionalProperties": {
            "$ref": "SuggestedTextStyle"
          },
          "description": "The suggested text style changes to this InlineObject, keyed by suggestion\nID.",
          "type": "object"
        },
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "textStyle": {
          "description": "The text style of this InlineObjectElement.\n\nSimilar to text content, like text runs and footnote references, the text\nstyle of an inline object element can affect content layout as well as the\nstyling of text inserted adjacent to it.",
          "$ref": "TextStyle"
        },
        "inlineObjectId": {
          "description": "The ID of the InlineObject this\nelement contains.",
          "type": "string"
        }
      },
      "id": "InlineObjectElement",
      "description": "A ParagraphElement that contains\nan InlineObject.",
      "type": "object"
    },
    "InsertInlineImageResponse": {
      "id": "InsertInlineImageResponse",
      "description": "The result of inserting an inline image.",
      "type": "object",
      "properties": {
        "objectId": {
          "description": "The ID of the created InlineObject.",
          "type": "string"
        }
      }
    },
    "Table": {
      "id": "Table",
      "description": "A StructuralElement representing a\ntable.",
      "type": "object",
      "properties": {
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rows": {
          "description": "Number of rows in the table.",
          "format": "int32",
          "type": "integer"
        },
        "columns": {
          "description": "Number of columns in the table.\n\nIt is possible for a table to be non-rectangular, so some rows may have a\ndifferent number of cells.",
          "format": "int32",
          "type": "integer"
        },
        "tableRows": {
          "description": "The contents and style of each row.",
          "type": "array",
          "items": {
            "$ref": "TableRow"
          }
        },
        "tableStyle": {
          "description": "The style of the table.",
          "$ref": "TableStyle"
        },
        "suggestedInsertionIds": {
          "description": "The suggested insertion IDs. A Table may have\nmultiple insertion IDs if it is a nested suggested change. If empty, then\nthis is not a suggested insertion.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PositionedObjectPositioning": {
      "properties": {
        "layout": {
          "enumDescriptions": [
            "The layout is unspecified.",
            "The text wraps around the positioned object.",
            "Breaks text such that the positioned object is on the left and text is on\nthe right.",
            "Breaks text such that the positioned object is on the right and text is on\nthe left.",
            "Breaks text such that there is no text on the left or right of the\npositioned object.",
            "The positioned object is in front of the text."
          ],
          "enum": [
            "POSITIONED_OBJECT_LAYOUT_UNSPECIFIED",
            "WRAP_TEXT",
            "BREAK_LEFT",
            "BREAK_RIGHT",
            "BREAK_LEFT_RIGHT",
            "IN_FRONT_OF_TEXT"
          ],
          "description": "The layout of this positioned object.",
          "type": "string"
        },
        "topOffset": {
          "$ref": "Dimension",
          "description": "The offset of the top edge of the positioned object relative to the\nbeginning of the Paragraph it is tethered\nto. The exact positioning of the object can depend on other content in the\ndocument and the document's styling."
        },
        "leftOffset": {
          "$ref": "Dimension",
          "description": "The offset of the left edge of the positioned object relative to the\nbeginning of the Paragraph it is tethered\nto. The exact positioning of the object can depend on other content in the\ndocument and the document's styling."
        }
      },
      "id": "PositionedObjectPositioning",
      "description": "The positioning of a PositionedObject. The positioned object is positioned\nrelative to the beginning of the Paragraph\nit is tethered to.",
      "type": "object"
    },
    "ParagraphStyleSuggestionState": {
      "description": "A mask that indicates which of the fields on the base ParagraphStyle have been changed in this suggestion.\nFor any field set to true, there is a new suggested value.",
      "type": "object",
      "properties": {
        "headingIdSuggested": {
          "description": "Indicates if there was a suggested change to heading_id.",
          "type": "boolean"
        },
        "keepWithNextSuggested": {
          "description": "Indicates if there was a suggested change to keep_with_next.",
          "type": "boolean"
        },
        "spacingModeSuggested": {
          "type": "boolean",
          "description": "Indicates if there was a suggested change to spacing_mode."
        },
        "borderBetweenSuggested": {
          "description": "Indicates if there was a suggested change to border_between.",
          "type": "boolean"
        },
        "avoidWidowAndOrphanSuggested": {
          "description": "Indicates if there was a suggested change to avoid_widow_and_orphan.",
          "type": "boolean"
        },
        "shadingSuggestionState": {
          "description": "A mask that indicates which of the fields in shading have been changed in\nthis suggestion.",
          "$ref": "ShadingSuggestionState"
        },
        "alignmentSuggested": {
          "description": "Indicates if there was a suggested change to alignment.",
          "type": "boolean"
        },
        "spaceBelowSuggested": {
          "description": "Indicates if there was a suggested change to space_below.",
          "type": "boolean"
        },
        "borderLeftSuggested": {
          "description": "Indicates if there was a suggested change to border_left.",
          "type": "boolean"
        },
        "directionSuggested": {
          "description": "Indicates if there was a suggested change to direction.",
          "type": "boolean"
        },
        "borderBottomSuggested": {
          "description": "Indicates if there was a suggested change to border_bottom.",
          "type": "boolean"
        },
        "namedStyleTypeSuggested": {
          "description": "Indicates if there was a suggested change to named_style_type.",
          "type": "boolean"
        },
        "indentFirstLineSuggested": {
          "type": "boolean",
          "description": "Indicates if there was a suggested change to indent_first_line."
        },
        "borderTopSuggested": {
          "description": "Indicates if there was a suggested change to border_top.",
          "type": "boolean"
        },
        "lineSpacingSuggested": {
          "description": "Indicates if there was a suggested change to line_spacing.",
          "type": "boolean"
        },
        "indentEndSuggested": {
          "description": "Indicates if there was a suggested change to indent_end.",
          "type": "boolean"
        },
        "borderRightSuggested": {
          "description": "Indicates if there was a suggested change to border_right.",
          "type": "boolean"
        },
        "spaceAboveSuggested": {
          "type": "boolean",
          "description": "Indicates if there was a suggested change to space_above."
        },
        "keepLinesTogetherSuggested": {
          "description": "Indicates if there was a suggested change to keep_lines_together.",
          "type": "boolean"
        },
        "indentStartSuggested": {
          "description": "Indicates if there was a suggested change to indent_start.",
          "type": "boolean"
        }
      },
      "id": "ParagraphStyleSuggestionState"
    },
    "LinkedContentReference": {
      "properties": {
        "sheetsChartReference": {
          "description": "A reference to the linked chart.",
          "$ref": "SheetsChartReference"
        }
      },
      "id": "LinkedContentReference",
      "description": "A reference to the external linked source content.",
      "type": "object"
    },
    "ListPropertiesSuggestionState": {
      "description": "A mask that indicates which of the fields on the base ListProperties have been changed in this suggestion.\nFor any field set to true, there is a new suggested value.",
      "type": "object",
      "properties": {
        "nestingLevelsSuggestionStates": {
          "description": "A mask that indicates which of the fields on the corresponding\nNestingLevel in nesting_levels have been changed in\nthis suggestion.\n\nThe nesting level suggestion states are returned in ascending order of the\nnesting level with the least nested returned first.",
          "type": "array",
          "items": {
            "$ref": "NestingLevelSuggestionState"
          }
        }
      },
      "id": "ListPropertiesSuggestionState"
    },
    "Body": {
      "type": "object",
      "properties": {
        "content": {
          "description": "The contents of the body.\n\nThe indexes for the body's content begin at zero.",
          "type": "array",
          "items": {
            "$ref": "StructuralElement"
          }
        }
      },
      "id": "Body",
      "description": "The document body.\n\nThe body typically contains the full document contents except for\nheaders, footers\nand footnotes."
    },
    "PositionedObjectProperties": {
      "description": "Properties of a PositionedObject.",
      "type": "object",
      "properties": {
        "positioning": {
          "$ref": "PositionedObjectPositioning",
          "description": "The positioning of this positioned object relative to the newline of the\nParagraph that references this positioned\nobject."
        },
        "embeddedObject": {
          "$ref": "EmbeddedObject",
          "description": "The embedded object of this positioned object."
        }
      },
      "id": "PositionedObjectProperties"
    },
    "OptionalColor": {
      "description": "A color that can either be fully opaque or fully transparent.",
      "type": "object",
      "properties": {
        "color": {
          "description": "If set, this will be used as an opaque color. If unset, this represents\na transparent color.",
          "$ref": "Color"
        }
      },
      "id": "OptionalColor"
    },
    "TableCellStyle": {
      "properties": {
        "paddingTop": {
          "$ref": "Dimension",
          "description": "The top padding of the cell."
        },
        "rowSpan": {
          "description": "The row span of the cell.\n\nThis property is read-only.",
          "format": "int32",
          "type": "integer"
        },
        "columnSpan": {
          "description": "The column span of the cell.\n\nThis property is read-only.",
          "format": "int32",
          "type": "integer"
        },
        "borderBottom": {
          "$ref": "TableCellBorder",
          "description": "The bottom border of the cell."
        },
        "borderLeft": {
          "description": "The left border of the cell.",
          "$ref": "TableCellBorder"
        },
        "paddingLeft": {
          "$ref": "Dimension",
          "description": "The left padding of the cell."
        },
        "paddingBottom": {
          "description": "The bottom padding of the cell.",
          "$ref": "Dimension"
        },
        "borderRight": {
          "$ref": "TableCellBorder",
          "description": "The right border of the cell."
        },
        "paddingRight": {
          "description": "The right padding of the cell.",
          "$ref": "Dimension"
        },
        "contentAlignment": {
          "enumDescriptions": [
            "An unspecified content alignment. The content alignment is inherited from\nthe parent if one exists.",
            "An unsupported content alignment.",
            "An alignment that aligns the content to the top of the content holder.\nCorresponds to ECMA-376 ST_TextAnchoringType 't'.",
            "An alignment that aligns the content to the middle of the content holder.\nCorresponds to ECMA-376 ST_TextAnchoringType 'ctr'.",
            "An alignment that aligns the content to the bottom of the content holder.\nCorresponds to ECMA-376 ST_TextAnchoringType 'b'."
          ],
          "enum": [
            "CONTENT_ALIGNMENT_UNSPECIFIED",
            "CONTENT_ALIGNMENT_UNSUPPORTED",
            "TOP",
            "MIDDLE",
            "BOTTOM"
          ],
          "description": "The alignment of the content in the table cell. The default alignment\nmatches the alignment for newly created table cells in the Docs editor.",
          "type": "string"
        },
        "borderTop": {
          "$ref": "TableCellBorder",
          "description": "The top border of the cell."
        },
        "backgroundColor": {
          "$ref": "OptionalColor",
          "description": "The background color of the cell."
        }
      },
      "id": "TableCellStyle",
      "description": "The style of a TableCell.\n\nInherited table cell styles are represented as unset fields in this message.\nA table cell style can inherit from the table's style.",
      "type": "object"
    },
    "UpdateTextStyleRequest": {
      "description": "Update the styling of text.",
      "type": "object",
      "properties": {
        "range": {
          "$ref": "Range",
          "description": "The range of text to style.\n\nThe range may be extended to include adjacent newlines.\n\nIf the range fully contains a paragraph belonging to a list, the\nparagraph's bullet is also updated with the matching text style.\n\nRanges cannot be inserted inside a relative UpdateTextStyleRequest."
        },
        "textStyle": {
          "$ref": "TextStyle",
          "description": "The styles to set on the text.\n\nIf the value for a particular style matches that of the parent, that style\nwill be set to inherit.\n\nCertain text style changes may cause other changes in order to to mirror\nthe behavior of the Docs editor. See the documentation of\nTextStyle for more information."
        },
        "fields": {
          "type": "string",
          "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `text_style` is implied and\nshould not be specified. A single `\"*\"` can be used as short-hand for\nlisting every field.\n\nFor example, to update the text style to bold, set `fields` to `\"bold\"`.\n\nTo reset a property to its default value, include its field name in the\nfield mask but leave the field itself unset.",
          "format": "google-fieldmask"
        }
      },
      "id": "UpdateTextStyleRequest"
    },
    "DeleteTableColumnRequest": {
      "description": "Deletes a column from a table.",
      "type": "object",
      "properties": {
        "tableCellLocation": {
          "$ref": "TableCellLocation",
          "description": "The reference table cell location from which the column will be deleted.\n\nThe column this cell spans will be deleted. If this is a merged cell that\nspans multiple columns, all columns that the cell spans will be deleted. If\nno columns remain in the table after this deletion, the whole table is\ndeleted."
        }
      },
      "id": "DeleteTableColumnRequest"
    },
    "NestingLevelSuggestionState": {
      "type": "object",
      "properties": {
        "glyphFormatSuggested": {
          "description": "Indicates if there was a suggested change to\nglyph_format.",
          "type": "boolean"
        },
        "bulletAlignmentSuggested": {
          "description": "Indicates if there was a suggested change to\nbullet_alignment.",
          "type": "boolean"
        },
        "indentFirstLineSuggested": {
          "description": "Indicates if there was a suggested change to\nindent_first_line.",
          "type": "boolean"
        },
        "textStyleSuggestionState": {
          "description": "A mask that indicates which of the fields in text style have been changed in this\nsuggestion.",
          "$ref": "TextStyleSuggestionState"
        },
        "startNumberSuggested": {
          "description": "Indicates if there was a suggested change to\nstart_number.",
          "type": "boolean"
        },
        "glyphTypeSuggested": {
          "description": "Indicates if there was a suggested change to\nglyph_type.",
          "type": "boolean"
        },
        "glyphSymbolSuggested": {
          "description": "Indicates if there was a suggested change to\nglyph_symbol.",
          "type": "boolean"
        },
        "indentStartSuggested": {
          "description": "Indicates if there was a suggested change to\nindent_start.",
          "type": "boolean"
        }
      },
      "id": "NestingLevelSuggestionState",
      "description": "A mask that indicates which of the fields on the base NestingLevel have been changed in this suggestion. For\nany field set to true, there is a new suggested value."
    },
    "List": {
      "description": "A List represents the list attributes for a group of paragraphs that all\nbelong to the same list. A paragraph that is part of a list has a reference\nto the list's ID in its bullet.",
      "type": "object",
      "properties": {
        "suggestedListPropertiesChanges": {
          "type": "object",
          "additionalProperties": {
            "$ref": "SuggestedListProperties"
          },
          "description": "The suggested changes to the list properties, keyed by suggestion\nID."
        },
        "listProperties": {
          "$ref": "ListProperties",
          "description": "The properties of the list."
        },
        "suggestedInsertionId": {
          "description": "The suggested insertion ID. If empty, then this is not a suggested\ninsertion.",
          "type": "string"
        },
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "List"
    },
    "UpdateTableRowStyleRequest": {
      "description": "Updates the TableRowStyle of rows in a\ntable.",
      "type": "object",
      "properties": {
        "tableRowStyle": {
          "$ref": "TableRowStyle",
          "description": "The styles to be set on the rows."
        },
        "rowIndices": {
          "description": "The list of zero-based row indices whose style should be updated. If no\nindices are specified, all rows will be updated.",
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "tableStartLocation": {
          "$ref": "Location",
          "description": "The location where the table starts in the document."
        },
        "fields": {
          "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `tableRowStyle` is implied\nand should not be specified. A single `\"*\"` can be used as short-hand for\nlisting every field.\n\nFor example to update the minimum row height, set `fields` to\n`\"min_row_height\"`.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "UpdateTableRowStyleRequest"
    },
    "CreateFootnoteResponse": {
      "description": "The result of creating a footnote.",
      "type": "object",
      "properties": {
        "footnoteId": {
          "description": "The ID of the created footnote.",
          "type": "string"
        }
      },
      "id": "CreateFootnoteResponse"
    },
    "SuggestedTextStyle": {
      "type": "object",
      "properties": {
        "textStyle": {
          "$ref": "TextStyle",
          "description": "A TextStyle that only includes\nthe changes made in this suggestion. This can be used along with the\ntext_style_suggestion_state\nto see which fields have changed and their new values."
        },
        "textStyleSuggestionState": {
          "$ref": "TextStyleSuggestionState",
          "description": "A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion."
        }
      },
      "id": "SuggestedTextStyle",
      "description": "A suggested change to a TextStyle."
    },
    "DocumentStyleSuggestionState": {
      "properties": {
        "evenPageFooterIdSuggested": {
          "description": "Indicates if there was a suggested change to even_page_footer_id.",
          "type": "boolean"
        },
        "marginTopSuggested": {
          "description": "Indicates if there was a suggested change to margin_top.",
          "type": "boolean"
        },
        "firstPageHeaderIdSuggested": {
          "description": "Indicates if there was a suggested change to first_page_header_id.",
          "type": "boolean"
        },
        "backgroundSuggestionState": {
          "$ref": "BackgroundSuggestionState",
          "description": "A mask that indicates which of the fields in background have been changed in this\nsuggestion."
        },
        "marginLeftSuggested": {
          "description": "Indicates if there was a suggested change to margin_left.",
          "type": "boolean"
        },
        "pageSizeSuggestionState": {
          "description": "A mask that indicates which of the fields in size have been changed in this\nsuggestion.",
          "$ref": "SizeSuggestionState"
        },
        "defaultHeaderIdSuggested": {
          "description": "Indicates if there was a suggested change to default_header_id.",
          "type": "boolean"
        },
        "useEvenPageHeaderFooterSuggested": {
          "description": "Indicates if there was a suggested change to use_even_page_header_footer.",
          "type": "boolean"
        },
        "marginRightSuggested": {
          "description": "Indicates if there was a suggested change to margin_right.",
          "type": "boolean"
        },
        "defaultFooterIdSuggested": {
          "description": "Indicates if there was a suggested change to default_footer_id.",
          "type": "boolean"
        },
        "useFirstPageHeaderFooterSuggested": {
          "description": "Indicates if there was a suggested change to use_first_page_header_footer.",
          "type": "boolean"
        },
        "evenPageHeaderIdSuggested": {
          "description": "Indicates if there was a suggested change to even_page_header_id.",
          "type": "boolean"
        },
        "marginBottomSuggested": {
          "description": "Indicates if there was a suggested change to margin_bottom.",
          "type": "boolean"
        },
        "pageNumberStartSuggested": {
          "type": "boolean",
          "description": "Indicates if there was a suggested change to page_number_start."
        },
        "firstPageFooterIdSuggested": {
          "description": "Indicates if there was a suggested change to first_page_footer_id.",
          "type": "boolean"
        }
      },
      "id": "DocumentStyleSuggestionState",
      "description": "A mask that indicates which of the fields on the base DocumentStyle have been changed in this suggestion.\nFor any field set to true, there is a new suggested value.",
      "type": "object"
    },
    "Document": {
      "description": "A Google Docs document.",
      "type": "object",
      "properties": {
        "footnotes": {
          "additionalProperties": {
            "$ref": "Footnote"
          },
          "description": "Output only. The footnotes in the document, keyed by footnote ID.",
          "type": "object"
        },
        "inlineObjects": {
          "additionalProperties": {
            "$ref": "InlineObject"
          },
          "description": "Output only. The inline objects in the document, keyed by object ID.",
          "type": "object"
        },
        "suggestedNamedStylesChanges": {
          "type": "object",
          "additionalProperties": {
            "$ref": "SuggestedNamedStyles"
          },
          "description": "Output only. The suggested changes to the named styles of the document,\nkeyed by suggestion ID."
        },
        "title": {
          "description": "The title of the document.",
          "type": "string"
        },
        "suggestionsViewMode": {
          "enumDescriptions": [
            "The SuggestionsViewMode applied to the returned document depends on the\nuser's current access level. If the user only has view access,\nPREVIEW_WITHOUT_SUGGESTIONS is\napplied. Otherwise, SUGGESTIONS_INLINE is applied.\nThis is the default suggestions view mode.",
            "The returned document has suggestions inline. Suggested changes will be\ndifferentiated from base content within the document.\n\nRequests to retrieve a document using this mode will return a 403 error if\nthe user does not have permission to view suggested changes.",
            "The returned document is a preview with all suggested changes accepted.\n\nRequests to retrieve a document using this mode will return a 403 error if\nthe user does not have permission to view suggested changes.",
            "The returned document is a preview with all suggested changes rejected if\nthere are any suggestions in the document."
          ],
          "enum": [
            "DEFAULT_FOR_CURRENT_ACCESS",
            "SUGGESTIONS_INLINE",
            "PREVIEW_SUGGESTIONS_ACCEPTED",
            "PREVIEW_WITHOUT_SUGGESTIONS"
          ],
          "description": "Output only. The suggestions view mode applied to the document.\n\nNote: When editing a document, changes must be based on a document with\nSUGGESTIONS_INLINE.",
          "type": "string"
        },
        "documentStyle": {
          "$ref": "DocumentStyle",
          "description": "Output only. The style of the document."
        },
        "namedStyles": {
          "$ref": "NamedStyles",
          "description": "Output only. The named styles of the document."
        },
        "positionedObjects": {
          "additionalProperties": {
            "$ref": "PositionedObject"
          },
          "description": "Output only. The positioned objects in the document, keyed by object ID.",
          "type": "object"
        },
        "suggestedDocumentStyleChanges": {
          "additionalProperties": {
            "$ref": "SuggestedDocumentStyle"
          },
          "description": "Output only. The suggested changes to the style of the document, keyed by\nsuggestion ID.",
          "type": "object"
        },
        "namedRanges": {
          "type": "object",
          "additionalProperties": {
            "$ref": "NamedRanges"
          },
          "description": "Output only. The named ranges in the document, keyed by name."
        },
        "footers": {
          "description": "Output only. The footers in the document, keyed by footer ID.",
          "type": "object",
          "additionalProperties": {
            "$ref": "Footer"
          }
        },
        "lists": {
          "additionalProperties": {
            "$ref": "List"
          },
          "description": "Output only. The lists in the document, keyed by list ID.",
          "type": "object"
        },
        "body": {
          "description": "Output only. The main body of the document.",
          "$ref": "Body"
        },
        "revisionId": {
          "description": "Output only. The revision ID of the document. Can be used in update\nrequests to specify which revision of a document to apply updates to and\nhow the request should behave if the document has been edited since that\nrevision. Only populated if the user has edit access to the document.\n\nThe format of the revision ID may change over time, so it should be treated\nopaquely. A returned revision ID is only guaranteed to be valid for 24\nhours after it has been returned and cannot be shared across users. If the\nrevision ID is unchanged between calls, then the document has not changed.\nConversely, a changed ID (for the same document and user) usually means the\ndocument has been updated; however, a changed ID can also be due to\ninternal factors such as ID format changes.",
          "type": "string"
        },
        "documentId": {
          "description": "Output only. The ID of the document.",
          "type": "string"
        },
        "headers": {
          "additionalProperties": {
            "$ref": "Header"
          },
          "description": "Output only. The headers in the document, keyed by header ID.",
          "type": "object"
        }
      },
      "id": "Document"
    },
    "InsertTableColumnRequest": {
      "description": "Inserts an empty column into a table.",
      "type": "object",
      "properties": {
        "tableCellLocation": {
          "$ref": "TableCellLocation",
          "description": "The reference table cell location from which columns will be inserted.\n\nA new column will be inserted to the left (or right) of the column where\nthe reference cell is. If the reference cell is a merged cell, a new\ncolumn will be inserted to the left (or right) of the merged cell."
        },
        "insertRight": {
          "description": "Whether to insert new column to the right of the reference cell location.\n\n- `True`: insert to the right.\n- `False`: insert to the left.",
          "type": "boolean"
        }
      },
      "id": "InsertTableColumnRequest"
    },
    "UpdateTableCellStyleRequest": {
      "type": "object",
      "properties": {
        "tableRange": {
          "$ref": "TableRange",
          "description": "The table range representing the subset of the table to which the updates\nare applied."
        },
        "tableStartLocation": {
          "description": "The location where the table starts in the document. When specified, the\nupdates are applied to all the cells in the table.",
          "$ref": "Location"
        },
        "tableCellStyle": {
          "$ref": "TableCellStyle",
          "description": "The style to set on the table cells.\n\nWhen updating borders, if a cell shares a border with an adjacent cell, the\ncorresponding border property of the adjacent cell is updated as well.\nBorders that are merged and invisible are not updated.\n\nSince updating a border shared by adjacent cells in the same request can\ncause conflicting border updates, border updates are applied in the\nfollowing order:\n\n- `border_right`\n- `border_left`\n- `border_bottom`\n- `border_top`"
        },
        "fields": {
          "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `tableCellStyle` is implied\nand should not be specified. A single `\"*\"` can be used as short-hand for\nlisting every field.\n\nFor example to update the table cell background color, set `fields` to\n`\"backgroundColor\"`.\n\nTo reset a property to its default value, include its field name in the\nfield mask but leave the field itself unset.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "UpdateTableCellStyleRequest",
      "description": "Updates the style of a range of table cells."
    },
    "WeightedFontFamily": {
      "type": "object",
      "properties": {
        "fontFamily": {
          "description": "The font family of the text.\n\nThe font family can be any font from the Font menu in Docs or from\n[Google Fonts] (https://fonts.google.com/). If the font name is\nunrecognized, the text is rendered in `Arial`.",
          "type": "string"
        },
        "weight": {
          "description": "The weight of the font. This field can have any value that is a multiple of\n`100` between `100` and `900`, inclusive. This range corresponds to the\nnumerical values described in the CSS 2.1 Specification,\n[section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with\nnon-numerical values disallowed.\n\nThe default value is `400` (\"normal\").\n\nThe font weight makes up just one component of the rendered font weight.\nThe rendered weight is determined by a combination of the `weight` and the\ntext style's resolved `bold` value, after accounting for inheritance:\n\n* If the text is bold and the weight is less than `400`, the rendered\n  weight is 400.\n* If the text is bold and the weight is greater than or equal to `400` but\n  is less than `700`, the rendered weight is `700`.\n* If the weight is greater than or equal to `700`, the rendered weight is\n  equal to the weight.\n* If the text is not bold, the rendered weight is equal to the weight.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "WeightedFontFamily",
      "description": "Represents a font family and weight of text."
    },
    "CreateFooterResponse": {
      "description": "The result of creating a footer.",
      "type": "object",
      "properties": {
        "footerId": {
          "type": "string",
          "description": "The ID of the created footer."
        }
      },
      "id": "CreateFooterResponse"
    },
    "ParagraphBorder": {
      "description": "A border around a paragraph.",
      "type": "object",
      "properties": {
        "dashStyle": {
          "description": "The dash style of the border.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified dash style.",
            "Solid line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'solid'.\nThis is the default dash style.",
            "Dotted line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dot'.",
            "Dashed line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dash'."
          ],
          "enum": [
            "DASH_STYLE_UNSPECIFIED",
            "SOLID",
            "DOT",
            "DASH"
          ]
        },
        "color": {
          "description": "The color of the border.",
          "$ref": "OptionalColor"
        },
        "width": {
          "$ref": "Dimension",
          "description": "The width of the border."
        },
        "padding": {
          "$ref": "Dimension",
          "description": "The padding of the border."
        }
      },
      "id": "ParagraphBorder"
    },
    "CreateParagraphBulletsRequest": {
      "description": "Creates bullets for all of the paragraphs that overlap with the given range.\n\nThe nesting level of each paragraph will be determined by counting leading\ntabs in front of each paragraph. To avoid excess space between the bullet and\nthe corresponding paragraph, these leading tabs are removed by this request.\nThis may change the indices of parts of the text.\n\nIf the paragraph immediately before paragraphs being updated is in a list\nwith a matching preset, the paragraphs being updated are added to that\npreceding list.",
      "type": "object",
      "properties": {
        "bulletPreset": {
          "enumDescriptions": [
            "The bullet glyph preset is unspecified.",
            "A bulleted list with a `DISC`, `CIRCLE` and `SQUARE` bullet glyph for the\nfirst 3 list nesting levels.",
            "A bulleted list with a `DIAMONDX`, `ARROW3D` and `SQUARE` bullet glyph for\nthe first 3 list nesting levels.",
            "A bulleted list with `CHECKBOX` bullet glyphs for all list nesting levels.",
            "A bulleted list with a `ARROW`, `DIAMOND` and `DISC` bullet glyph for\nthe first 3 list nesting levels.",
            "A bulleted list with a `STAR`, `CIRCLE` and `SQUARE` bullet glyph for\nthe first 3 list nesting levels.",
            "A bulleted list with a `ARROW3D`, `CIRCLE` and `SQUARE` bullet glyph for\nthe first 3 list nesting levels.",
            "A bulleted list with a `LEFTTRIANGLE`, `DIAMOND` and `DISC` bullet glyph\nfor the first 3 list nesting levels.",
            "A bulleted list with a `DIAMONDX`, `HOLLOWDIAMOND` and `SQUARE` bullet\nglyph for the first 3 list nesting levels.",
            "A bulleted list with a `DIAMOND`, `CIRCLE` and `SQUARE` bullet glyph\nfor the first 3 list nesting levels.",
            "A numbered list with `DECIMAL`, `ALPHA` and `ROMAN` numeric glyphs for\nthe first 3 list nesting levels, followed by periods.",
            "A numbered list with `DECIMAL`, `ALPHA` and `ROMAN` numeric glyphs for\nthe first 3 list nesting levels, followed by parenthesis.",
            "A numbered list with `DECIMAL` numeric glyphs separated by periods, where\neach nesting level uses the previous nesting level's glyph as a prefix.\nFor example: '1.', '1.1.', '2.', '2.2.'.",
            "A numbered list with `UPPERALPHA`, `ALPHA` and `ROMAN` numeric glyphs for\nthe first 3 list nesting levels, followed by periods.",
            "A numbered list with `UPPERROMAN`, `UPPERALPHA` and `DECIMAL` numeric\nglyphs for the first 3 list nesting levels, followed by periods.",
            "A numbered list with `ZERODECIMAL`, `ALPHA` and `ROMAN` numeric glyphs for\nthe first 3 list nesting levels, followed by periods."
          ],
          "enum": [
            "BULLET_GLYPH_PRESET_UNSPECIFIED",
            "BULLET_DISC_CIRCLE_SQUARE",
            "BULLET_DIAMONDX_ARROW3D_SQUARE",
            "BULLET_CHECKBOX",
            "BULLET_ARROW_DIAMOND_DISC",
            "BULLET_STAR_CIRCLE_SQUARE",
            "BULLET_ARROW3D_CIRCLE_SQUARE",
            "BULLET_LEFTTRIANGLE_DIAMOND_DISC",
            "BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE",
            "BULLET_DIAMOND_CIRCLE_SQUARE",
            "NUMBERED_DECIMAL_ALPHA_ROMAN",
            "NUMBERED_DECIMAL_ALPHA_ROMAN_PARENS",
            "NUMBERED_DECIMAL_NESTED",
            "NUMBERED_UPPERALPHA_ALPHA_ROMAN",
            "NUMBERED_UPPERROMAN_UPPERALPHA_DECIMAL",
            "NUMBERED_ZERODECIMAL_ALPHA_ROMAN"
          ],
          "description": "The kinds of bullet glyphs to be used.",
          "type": "string"
        },
        "range": {
          "$ref": "Range",
          "description": "The range to apply the bullet preset to."
        }
      },
      "id": "CreateParagraphBulletsRequest"
    },
    "Size": {
      "description": "A width and height.",
      "type": "object",
      "properties": {
        "height": {
          "description": "The height of the object.",
          "$ref": "Dimension"
        },
        "width": {
          "description": "The width of the object.",
          "$ref": "Dimension"
        }
      },
      "id": "Size"
    },
    "TextStyle": {
      "description": "Represents the styling that can be applied to text.\n\nInherited text styles are represented as unset fields in this message. A\ntext style's parent depends on where the text style is defined:\n\n  * The TextStyle of text in a Paragraph\n    inherits from the paragraph's corresponding named style type.\n  * The TextStyle on a named style\n    inherits from the normal text named style.\n  * The TextStyle of the normal text named style inherits\n    from the default text style in the Docs editor.\n  * The TextStyle on a Paragraph element\n    that is contained in a table may inherit its text style from the table\n    style.\n\nIf the text style does not inherit from a parent, unsetting fields will\nrevert the style to a value matching the defaults in the Docs editor.",
      "type": "object",
      "properties": {
        "italic": {
          "description": "Whether or not the text is italicized.",
          "type": "boolean"
        },
        "strikethrough": {
          "description": "Whether or not the text is struck through.",
          "type": "boolean"
        },
        "fontSize": {
          "description": "The size of the text's font.",
          "$ref": "Dimension"
        },
        "smallCaps": {
          "description": "Whether or not the text is in small capital letters.",
          "type": "boolean"
        },
        "baselineOffset": {
          "type": "string",
          "enumDescriptions": [
            "The text's baseline offset is inherited from the parent.",
            "The text is not vertically offset.",
            "The text is vertically offset upwards (superscript).",
            "The text is vertically offset downwards (subscript)."
          ],
          "enum": [
            "BASELINE_OFFSET_UNSPECIFIED",
            "NONE",
            "SUPERSCRIPT",
            "SUBSCRIPT"
          ],
          "description": "The text's vertical offset from its normal position.\n\nText with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically\nrendered in a smaller font size, computed based on the `font_size` field.\nThe `font_size` itself is not affected by changes in this field."
        },
        "backgroundColor": {
          "description": "The background color of the text. If set, the color is either an RGB color\nor transparent, depending on the `color` field.",
          "$ref": "OptionalColor"
        },
        "underline": {
          "description": "Whether or not the text is underlined.",
          "type": "boolean"
        },
        "link": {
          "description": "The hyperlink destination of the text. If unset, there is no link. Links\nare not inherited from parent text.\n\nChanging the link in an update request causes some other changes to the\ntext style of the range:\n\n* When setting a link, the text foreground color will be updated to the\n  default link color and the text will be underlined. If these fields are\n  modified in the same request, those values will be used instead of the\n  link defaults.\n* Setting a link on a text range that overlaps with an existing link will\n  also update the existing link to point to the new URL.\n* Links are not settable on newline characters. As a result, setting a link\n  on a text range that crosses a paragraph boundary, such as `\"ABC\\n123\"`,\n  will separate the newline character(s) into their own text runs. The\n  link will be applied separately to the runs before and after the newline.\n* Removing a link will update the text style of the range to match the\n  style of the preceding text (or the default text styles if the preceding\n  text is another link) unless different styles are being set in the same\n  request.",
          "$ref": "Link"
        },
        "weightedFontFamily": {
          "$ref": "WeightedFontFamily",
          "description": "The font family and rendered weight of the text.\n\nIf an update request specifies values for both `weighted_font_family` and\n`bold`, the `weighted_font_family` is applied first, then `bold`.\n\nIf `weighted_font_family#weight` is not set, it defaults to `400`.\n\nIf `weighted_font_family` is set, then `weighted_font_family#font_family`\nmust also be set with a non-empty value. Otherwise, a 400 bad request error\nis returned."
        },
        "foregroundColor": {
          "$ref": "OptionalColor",
          "description": "The foreground color of the text. If set, the color is either an RGB color\nor transparent, depending on the `color` field."
        },
        "bold": {
          "description": "Whether or not the text is rendered as bold.",
          "type": "boolean"
        }
      },
      "id": "TextStyle"
    },
    "EmbeddedDrawingProperties": {
      "id": "EmbeddedDrawingProperties",
      "description": "The properties of an embedded drawing.",
      "type": "object",
      "properties": {}
    },
    "InsertTableRequest": {
      "description": "Inserts a table at the specified location.\n\nA newline character will be inserted before the inserted table.",
      "type": "object",
      "properties": {
        "columns": {
          "description": "The number of columns in the table.",
          "format": "int32",
          "type": "integer"
        },
        "endOfSegmentLocation": {
          "$ref": "EndOfSegmentLocation",
          "description": "Inserts the table at the end of the given header, footer or document\nbody. A newline character will be inserted before the inserted table.\n\nTables cannot be inserted inside a footnote."
        },
        "location": {
          "description": "Inserts the table at a specific model index.\n\nA newline character will be inserted before the inserted table, therefore\nthe table start index will be at the specified location index + 1.\n\nThe table must be inserted inside the bounds of an existing\nParagraph. For instance, it cannot be\ninserted at a table's start index (i.e. between an existing table and its\npreceding paragraph).\n\nTables cannot be inserted inside a footnote or equation.",
          "$ref": "Location"
        },
        "rows": {
          "description": "The number of rows in the table.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "InsertTableRequest"
    },
    "InsertTableRowRequest": {
      "description": "Inserts an empty row into a table.",
      "type": "object",
      "properties": {
        "insertBelow": {
          "description": "Whether to insert new row below the reference cell location.\n\n- `True`: insert below the cell.\n- `False`: insert above the cell.",
          "type": "boolean"
        },
        "tableCellLocation": {
          "$ref": "TableCellLocation",
          "description": "The reference table cell location from which rows will be inserted.\n\nA new row will be inserted above (or below) the row where the reference\ncell is. If the reference cell is a merged cell, a new row will be\ninserted above (or below) the merged cell."
        }
      },
      "id": "InsertTableRowRequest"
    },
    "EmbeddedObjectBorder": {
      "type": "object",
      "properties": {
        "color": {
          "$ref": "OptionalColor",
          "description": "The color of the border."
        },
        "width": {
          "$ref": "Dimension",
          "description": "The width of the border."
        },
        "dashStyle": {
          "description": "The dash style of the border.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified dash style.",
            "Solid line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'solid'.\nThis is the default dash style.",
            "Dotted line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dot'.",
            "Dashed line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dash'."
          ],
          "enum": [
            "DASH_STYLE_UNSPECIFIED",
            "SOLID",
            "DOT",
            "DASH"
          ]
        },
        "propertyState": {
          "enumDescriptions": [
            "If a property's state is RENDERED, then the element has the corresponding\nproperty when rendered in the document. This is the default value.",
            "If a property's state is NOT_RENDERED, then the element does not have the\ncorresponding property when rendered in the document."
          ],
          "enum": [
            "RENDERED",
            "NOT_RENDERED"
          ],
          "description": "The property state of the border property.",
          "type": "string"
        }
      },
      "id": "EmbeddedObjectBorder",
      "description": "A border around an EmbeddedObject."
    },
    "BackgroundSuggestionState": {
      "id": "BackgroundSuggestionState",
      "description": "A mask that indicates which of the fields on the base Background have been changed in this suggestion.\nFor any field set to true, the Backgound has a new suggested value.",
      "type": "object",
      "properties": {
        "backgroundColorSuggested": {
          "description": "Indicates whether the current background color has been modified in this\nsuggestion.",
          "type": "boolean"
        }
      }
    },
    "DeletePositionedObjectRequest": {
      "id": "DeletePositionedObjectRequest",
      "description": "Deletes a PositionedObject from the\ndocument.",
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string",
          "description": "The ID of the positioned object to delete."
        }
      }
    },
    "Request": {
      "description": "A single update to apply to a document.",
      "type": "object",
      "properties": {
        "deleteNamedRange": {
          "$ref": "DeleteNamedRangeRequest",
          "description": "Deletes a named range."
        },
        "replaceAllText": {
          "$ref": "ReplaceAllTextRequest",
          "description": "Replaces all instances of the specified text."
        },
        "insertInlineImage": {
          "$ref": "InsertInlineImageRequest",
          "description": "Inserts an inline image at the specified location."
        },
        "updateTableCellStyle": {
          "description": "Updates the style of table cells.",
          "$ref": "UpdateTableCellStyleRequest"
        },
        "replaceImage": {
          "description": "Replaces an image in the document.",
          "$ref": "ReplaceImageRequest"
        },
        "updateDocumentStyle": {
          "description": "Updates the style of the document.",
          "$ref": "UpdateDocumentStyleRequest"
        },
        "createHeader": {
          "$ref": "CreateHeaderRequest",
          "description": "Creates a header."
        },
        "deleteTableRow": {
          "$ref": "DeleteTableRowRequest",
          "description": "Deletes a row from a table."
        },
        "updateTableRowStyle": {
          "$ref": "UpdateTableRowStyleRequest",
          "description": "Updates the row style in a table."
        },
        "insertText": {
          "$ref": "InsertTextRequest",
          "description": "Inserts text at the specified location."
        },
        "updateTableColumnProperties": {
          "description": "Updates the properties of columns in a table.",
          "$ref": "UpdateTableColumnPropertiesRequest"
        },
        "deleteContentRange": {
          "$ref": "DeleteContentRangeRequest",
          "description": "Deletes content from the document."
        },
        "insertSectionBreak": {
          "description": "Inserts a section break at the specified location.",
          "$ref": "InsertSectionBreakRequest"
        },
        "deleteParagraphBullets": {
          "$ref": "DeleteParagraphBulletsRequest",
          "description": "Deletes bullets from paragraphs."
        },
        "createFooter": {
          "$ref": "CreateFooterRequest",
          "description": "Creates a footer."
        },
        "updateSectionStyle": {
          "$ref": "UpdateSectionStyleRequest",
          "description": "Updates the section style of the specified range."
        },
        "mergeTableCells": {
          "$ref": "MergeTableCellsRequest",
          "description": "Merges cells in a table."
        },
        "createNamedRange": {
          "description": "Creates a named range.",
          "$ref": "CreateNamedRangeRequest"
        },
        "insertTable": {
          "description": "Inserts a table at the specified location.",
          "$ref": "InsertTableRequest"
        },
        "updateParagraphStyle": {
          "$ref": "UpdateParagraphStyleRequest",
          "description": "Updates the paragraph style at the specified range."
        },
        "deleteTableColumn": {
          "$ref": "DeleteTableColumnRequest",
          "description": "Deletes a column from a table."
        },
        "deletePositionedObject": {
          "$ref": "DeletePositionedObjectRequest",
          "description": "Deletes a positioned object from the document."
        },
        "replaceNamedRangeContent": {
          "$ref": "ReplaceNamedRangeContentRequest",
          "description": "Replaces the content in a named range."
        },
        "insertTableColumn": {
          "$ref": "InsertTableColumnRequest",
          "description": "Inserts an empty column into a table."
        },
        "createParagraphBullets": {
          "$ref": "CreateParagraphBulletsRequest",
          "description": "Creates bullets for paragraphs."
        },
        "insertTableRow": {
          "description": "Inserts an empty row into a table.",
          "$ref": "InsertTableRowRequest"
        },
        "unmergeTableCells": {
          "$ref": "UnmergeTableCellsRequest",
          "description": "Unmerges cells in a table."
        },
        "updateTextStyle": {
          "$ref": "UpdateTextStyleRequest",
          "description": "Updates the text style at the specified range."
        },
        "createFootnote": {
          "$ref": "CreateFootnoteRequest",
          "description": "Creates a footnote."
        },
        "insertPageBreak": {
          "$ref": "InsertPageBreakRequest",
          "description": "Inserts a page break at the specified location."
        }
      },
      "id": "Request"
    },
    "InlineObjectProperties": {
      "id": "InlineObjectProperties",
      "description": "Properties of an InlineObject.",
      "type": "object",
      "properties": {
        "embeddedObject": {
          "$ref": "EmbeddedObject",
          "description": "The embedded object of this inline object."
        }
      }
    },
    "ParagraphStyle": {
      "id": "ParagraphStyle",
      "description": "Styles that apply to a whole paragraph.\n\nInherited paragraph styles are represented as unset fields in this message.\nA paragraph style's parent depends on where the paragraph style is defined:\n\n  * The ParagraphStyle on a Paragraph\n    inherits from the paragraph's corresponding named style type.\n  * The ParagraphStyle on a named style\n    inherits from the normal text named style.\n  * The ParagraphStyle of the normal text named style inherits\n    from the default paragraph style in the Docs editor.\n  * The ParagraphStyle on a Paragraph\n    element that is contained in a table may inherit its paragraph style from\n    the table style.\n\nIf the paragraph style does not inherit from a parent, unsetting fields will\nrevert the style to a value matching the defaults in the Docs editor.",
      "type": "object",
      "properties": {
        "lineSpacing": {
          "description": "The amount of space between lines, as a percentage of normal, where normal\nis represented as 100.0. If unset, the value is inherited from the parent.",
          "format": "float",
          "type": "number"
        },
        "borderTop": {
          "$ref": "ParagraphBorder",
          "description": "The border at the top of this paragraph. If unset, the value is inherited\nfrom the parent.\n\nThe top border is rendered when the paragraph above has different border\nand indent properties.\n\nParagraph borders cannot be partially updated. When making\nchanges to a paragraph border the new border must be specified in\nits entirety."
        },
        "shading": {
          "$ref": "Shading",
          "description": "The shading of the paragraph. If unset, the value is inherited from the\nparent."
        },
        "keepLinesTogether": {
          "description": "Whether all lines of the paragraph should be laid out on the same page or\ncolumn if possible. If unset, the value is inherited from the parent.",
          "type": "boolean"
        },
        "spacingMode": {
          "enumDescriptions": [
            "The spacing mode is inherited from the parent.",
            "Paragraph spacing is always rendered.",
            "Paragraph spacing is skipped between list elements."
          ],
          "enum": [
            "SPACING_MODE_UNSPECIFIED",
            "NEVER_COLLAPSE",
            "COLLAPSE_LISTS"
          ],
          "description": "The spacing mode for the paragraph.",
          "type": "string"
        },
        "indentStart": {
          "$ref": "Dimension",
          "description": "The amount of indentation for the paragraph on the side that corresponds to\nthe start of the text, based on the current paragraph direction. If unset,\nthe value is inherited from the parent."
        },
        "spaceAbove": {
          "$ref": "Dimension",
          "description": "The amount of extra space above the paragraph. If unset, the value is\ninherited from the parent."
        },
        "tabStops": {
          "description": "A list of the tab stops for this paragraph. The list of tab stops is not\ninherited.\n\nThis property is read-only.",
          "type": "array",
          "items": {
            "$ref": "TabStop"
          }
        },
        "borderBetween": {
          "$ref": "ParagraphBorder",
          "description": "The border between this paragraph and the next and previous paragraphs.\nIf unset, the value is inherited from the parent.\n\nThe between border is rendered when the adjacent paragraph has the same\nborder and indent properties.\n\nParagraph borders cannot be partially updated. When making\nchanges to a paragraph border the new border must be specified in\nits entirety."
        },
        "alignment": {
          "enumDescriptions": [
            "The paragraph alignment is inherited from the parent.",
            "The paragraph is aligned to the start of the line. Left-aligned for LTR\ntext, right-aligned otherwise.",
            "The paragraph is centered.",
            "The paragraph is aligned to the end of the line. Right-aligned for LTR\ntext, left-aligned otherwise.",
            "The paragraph is justified."
          ],
          "enum": [
            "ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END",
            "JUSTIFIED"
          ],
          "description": "The text alignment for this paragraph.",
          "type": "string"
        },
        "indentFirstLine": {
          "description": "The amount of indentation for the first line of the paragraph. If unset,\nthe value is inherited from the parent.",
          "$ref": "Dimension"
        },
        "headingId": {
          "description": "The heading ID of the paragraph. If empty, then this paragraph is not a\nheading.\n\nThis property is read-only.",
          "type": "string"
        },
        "avoidWidowAndOrphan": {
          "description": "Whether to avoid widows and orphans for the paragraph. If unset, the value\nis inherited from the parent.",
          "type": "boolean"
        },
        "spaceBelow": {
          "description": "The amount of extra space below the paragraph. If unset, the value is\ninherited from the parent.",
          "$ref": "Dimension"
        },
        "keepWithNext": {
          "description": "Whether at least a part of this paragraph should be laid out on the same\npage or column as the next paragraph if possible. If unset, the value is\ninherited from the parent.",
          "type": "boolean"
        },
        "borderBottom": {
          "$ref": "ParagraphBorder",
          "description": "The border at the bottom of this paragraph. If unset, the value is\ninherited from the parent.\n\nThe bottom border is rendered when the paragraph below has different border\nand indent properties.\n\nParagraph borders cannot be partially updated. When making\nchanges to a paragraph border the new border must be specified in\nits entirety."
        },
        "direction": {
          "enum": [
            "CONTENT_DIRECTION_UNSPECIFIED",
            "LEFT_TO_RIGHT",
            "RIGHT_TO_LEFT"
          ],
          "description": "The text direction of this paragraph. If unset, the value defaults to\nLEFT_TO_RIGHT since\nparagraph direction is not inherited.",
          "type": "string",
          "enumDescriptions": [
            "The content direction is unspecified.",
            "The content goes from left to right.",
            "The content goes from right to left."
          ]
        },
        "borderLeft": {
          "description": "The border to the left of this paragraph. If unset, the value is inherited\nfrom the parent.\n\nParagraph borders cannot be partially updated. When making\nchanges to a paragraph border the new border must be specified in\nits entirety.",
          "$ref": "ParagraphBorder"
        },
        "indentEnd": {
          "$ref": "Dimension",
          "description": "The amount of indentation for the paragraph on the side that corresponds to\nthe end of the text, based on the current paragraph direction. If unset,\nthe value is inherited from the parent."
        },
        "namedStyleType": {
          "enumDescriptions": [
            "The type of named style is unspecified.",
            "Normal text.",
            "Title.",
            "Subtitle.",
            "Heading 1.",
            "Heading 2.",
            "Heading 3.",
            "Heading 4.",
            "Heading 5.",
            "Heading 6."
          ],
          "enum": [
            "NAMED_STYLE_TYPE_UNSPECIFIED",
            "NORMAL_TEXT",
            "TITLE",
            "SUBTITLE",
            "HEADING_1",
            "HEADING_2",
            "HEADING_3",
            "HEADING_4",
            "HEADING_5",
            "HEADING_6"
          ],
          "description": "The named style type of the paragraph.\n\nSince updating the named style type affects other properties within\nParagraphStyle, the named style type is applied before the other properties\nare updated.",
          "type": "string"
        },
        "borderRight": {
          "$ref": "ParagraphBorder",
          "description": "The border to the right of this paragraph. If unset, the value is inherited\nfrom the parent.\n\nParagraph borders cannot be partially updated. When making\nchanges to a paragraph border the new border must be specified in\nits entirety."
        }
      }
    },
    "Location": {
      "description": "A particular location in the document.",
      "type": "object",
      "properties": {
        "index": {
          "description": "The zero-based index, in UTF-16 code units.\n\nThe index is relative to the beginning of the segment specified by\nsegment_id.",
          "format": "int32",
          "type": "integer"
        },
        "segmentId": {
          "description": "The ID of the header, footer or footnote the location is in. An empty\nsegment ID signifies the document's body.",
          "type": "string"
        }
      },
      "id": "Location"
    },
    "SuggestedDocumentStyle": {
      "description": "A suggested change to the DocumentStyle.",
      "type": "object",
      "properties": {
        "documentStyleSuggestionState": {
          "description": "A mask that indicates which of the fields on the base DocumentStyle have been changed in this suggestion.",
          "$ref": "DocumentStyleSuggestionState"
        },
        "documentStyle": {
          "$ref": "DocumentStyle",
          "description": "A DocumentStyle that only includes\nthe changes made in this suggestion. This can be used along with the\ndocument_style_suggestion_state\nto see which fields have changed and their new values."
        }
      },
      "id": "SuggestedDocumentStyle"
    },
    "TableOfContents": {
      "description": "A StructuralElement representing\na table of contents.",
      "type": "object",
      "properties": {
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "content": {
          "description": "The content of the table of contents.",
          "type": "array",
          "items": {
            "$ref": "StructuralElement"
          }
        },
        "suggestedInsertionIds": {
          "description": "The suggested insertion IDs. A TableOfContents may have multiple insertion IDs if it\nis a nested suggested change. If empty, then this is not a suggested\ninsertion.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "TableOfContents"
    },
    "TableColumnProperties": {
      "id": "TableColumnProperties",
      "description": "The properties of a column in a table.",
      "type": "object",
      "properties": {
        "widthType": {
          "enum": [
            "WIDTH_TYPE_UNSPECIFIED",
            "EVENLY_DISTRIBUTED",
            "FIXED_WIDTH"
          ],
          "description": "The width type of the column.",
          "type": "string",
          "enumDescriptions": [
            "The column width type is unspecified.",
            "The column width is evenly distributed among the other evenly distrubted\ncolumns.\n\nThe width of the column is automatically determined and will\nhave an equal portion of the width remaining for the table after\naccounting for all columns with specified widths.",
            "A fixed column width. The\nwidth property\ncontains the column's width."
          ]
        },
        "width": {
          "$ref": "Dimension",
          "description": "The width of the column. Set when the column's `width_type` is\nFIXED_WIDTH."
        }
      }
    },
    "InlineObject": {
      "type": "object",
      "properties": {
        "suggestedInsertionId": {
          "description": "The suggested insertion ID. If empty, then this is not a suggested\ninsertion.",
          "type": "string"
        },
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inlineObjectProperties": {
          "$ref": "InlineObjectProperties",
          "description": "The properties of this inline object."
        },
        "objectId": {
          "description": "The ID of this inline object.",
          "type": "string"
        },
        "suggestedInlineObjectPropertiesChanges": {
          "additionalProperties": {
            "$ref": "SuggestedInlineObjectProperties"
          },
          "description": "The suggested changes to the inline object properties, keyed by suggestion\nID.",
          "type": "object"
        }
      },
      "id": "InlineObject",
      "description": "An object that appears inline with text. An InlineObject contains\nan EmbeddedObject such as an image."
    },
    "TableRow": {
      "description": "The contents and style of a row in a Table.",
      "type": "object",
      "properties": {
        "tableCells": {
          "description": "The contents and style of each cell in this row.\n\nIt is possible for a table to be non-rectangular, so some rows may have a\ndifferent number of cells than other rows in the same table.",
          "type": "array",
          "items": {
            "$ref": "TableCell"
          }
        },
        "suggestedTableRowStyleChanges": {
          "additionalProperties": {
            "$ref": "SuggestedTableRowStyle"
          },
          "description": "The suggested style changes to this row, keyed by suggestion ID.",
          "type": "object"
        },
        "suggestedInsertionIds": {
          "description": "The suggested insertion IDs. A TableRow\nmay have multiple insertion IDs if it is a nested suggested change. If\nempty, then this is not a suggested insertion.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startIndex": {
          "description": "The zero-based start index of this row, in UTF-16 code units.",
          "format": "int32",
          "type": "integer"
        },
        "endIndex": {
          "description": "The zero-based end index of this row, exclusive, in UTF-16 code units.",
          "format": "int32",
          "type": "integer"
        },
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tableRowStyle": {
          "$ref": "TableRowStyle",
          "description": "The style of the table row."
        }
      },
      "id": "TableRow"
    },
    "ReplaceImageRequest": {
      "id": "ReplaceImageRequest",
      "description": "Replaces an existing image with a new image.\n\nReplacing an image removes some image effects from the existing image in order to\nmirror the behavior of the Docs editor.",
      "type": "object",
      "properties": {
        "imageObjectId": {
          "description": "The ID of the existing image that will be replaced.",
          "type": "string"
        },
        "uri": {
          "description": "The URI of the new image.\n\nThe image is fetched once at insertion time and a copy is stored for\ndisplay inside the document. Images must be less than 50MB in size, cannot\nexceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format.\n\nThe provided URI can be at most 2 kB in length. The URI itself is saved\nwith the image, and exposed via the ImageProperties.source_uri field.",
          "type": "string"
        },
        "imageReplaceMethod": {
          "enum": [
            "IMAGE_REPLACE_METHOD_UNSPECIFIED",
            "CENTER_CROP"
          ],
          "description": "The replacement method.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified image replace method. This value must not be used.",
            "Scales and centers the image to fill the bounds of the original image.\nThe image may be cropped in order to fill the original image's bounds. The\nrendered size of the image will be the same as that of the original image."
          ]
        }
      }
    },
    "CreateNamedRangeRequest": {
      "description": "Creates a NamedRange referencing the given\nrange.",
      "type": "object",
      "properties": {
        "range": {
          "$ref": "Range",
          "description": "The range to apply the name to."
        },
        "name": {
          "description": "The name of the NamedRange. Names do not need to be unique.\n\nNames must be at least 1 character and no more than 256 characters,\nmeasured in UTF-16 code units.",
          "type": "string"
        }
      },
      "id": "CreateNamedRangeRequest"
    },
    "NamedStylesSuggestionState": {
      "type": "object",
      "properties": {
        "stylesSuggestionStates": {
          "description": "A mask that indicates which of the fields on the corresponding NamedStyle in styles have been changed in this\nsuggestion.\n\nThe order of these named style suggestion states match the order of the\ncorresponding named style within the named styles suggestion.",
          "type": "array",
          "items": {
            "$ref": "NamedStyleSuggestionState"
          }
        }
      },
      "id": "NamedStylesSuggestionState",
      "description": "The suggestion state of a NamedStyles\nmessage."
    },
    "ImagePropertiesSuggestionState": {
      "description": "A mask that indicates which of the fields on the base ImageProperties have been changed in this suggestion.\nFor any field set to true, there is a new suggested value.",
      "type": "object",
      "properties": {
        "contentUriSuggested": {
          "description": "Indicates if there was a suggested change to\ncontent_uri.",
          "type": "boolean"
        },
        "contrastSuggested": {
          "description": "Indicates if there was a suggested change to contrast.",
          "type": "boolean"
        },
        "angleSuggested": {
          "description": "Indicates if there was a suggested change to angle.",
          "type": "boolean"
        },
        "cropPropertiesSuggestionState": {
          "description": "A mask that indicates which of the fields in crop_properties have been changed in\nthis suggestion.",
          "$ref": "CropPropertiesSuggestionState"
        },
        "brightnessSuggested": {
          "description": "Indicates if there was a suggested change to brightness.",
          "type": "boolean"
        },
        "sourceUriSuggested": {
          "type": "boolean",
          "description": "Indicates if there was a suggested change to source_uri."
        },
        "transparencySuggested": {
          "description": "Indicates if there was a suggested change to transparency.",
          "type": "boolean"
        }
      },
      "id": "ImagePropertiesSuggestionState"
    },
    "WriteControl": {
      "description": "Provides control over how write requests are executed.",
      "type": "object",
      "properties": {
        "targetRevisionId": {
          "description": "The target revision ID of the\ndocument that the write request will be applied to.\n\nIf collaborator changes have occurred after the document was read using\nthe API, the changes produced by this write request will be transformed\nagainst the collaborator changes. This results in a new revision of the\ndocument which incorporates both the changes in the request and the\ncollaborator changes, and the Docs server will resolve conflicting\nchanges. When using `target_revision_id`, the API client can be thought\nof as another collaborator of the document.\n\nThe target revision ID may only be used to write to recent versions of a\ndocument. If the target revision is too far behind the latest revision,\nthe request will not be processed and will return a 400 bad request error\nand the request should be retried after reading the latest version of the\ndocument. In most cases a `revision_id` will remain valid for use as a\ntarget revision for several minutes after it is read, but for\nfrequently-edited documents this window may be shorter.",
          "type": "string"
        },
        "requiredRevisionId": {
          "type": "string",
          "description": "The revision ID of the\ndocument that the write request will be applied to. If this is not the\nlatest revision of the document, the request will not be processed and\nwill return a 400 bad request error.\n\nWhen a required revision ID is returned in a response, it indicates the\nrevision ID of the document after the request was applied."
        }
      },
      "id": "WriteControl"
    },
    "DeleteParagraphBulletsRequest": {
      "type": "object",
      "properties": {
        "range": {
          "description": "The range to delete bullets from.",
          "$ref": "Range"
        }
      },
      "id": "DeleteParagraphBulletsRequest",
      "description": "Deletes bullets from all of the paragraphs that overlap with the given range.\n\nThe nesting level of each paragraph will be visually preserved by adding\nindent to the start of the corresponding paragraph."
    },
    "SheetsChartReferenceSuggestionState": {
      "description": "A mask that indicates which of the fields on the base SheetsChartReference have been changed in this\nsuggestion. For any field set to true, there is a new suggested value.",
      "type": "object",
      "properties": {
        "chartIdSuggested": {
          "description": "Indicates if there was a suggested change to chart_id.",
          "type": "boolean"
        },
        "spreadsheetIdSuggested": {
          "description": "Indicates if there was a suggested change to spreadsheet_id.",
          "type": "boolean"
        }
      },
      "id": "SheetsChartReferenceSuggestionState"
    },
    "Footnote": {
      "description": "A document footnote.",
      "type": "object",
      "properties": {
        "footnoteId": {
          "type": "string",
          "description": "The ID of the footnote."
        },
        "content": {
          "description": "The contents of the footnote.\n\nThe indexes for a footnote's content begin at zero.",
          "type": "array",
          "items": {
            "$ref": "StructuralElement"
          }
        }
      },
      "id": "Footnote"
    },
    "CropPropertiesSuggestionState": {
      "description": "A mask that indicates which of the fields on the base CropProperties have been changed in this suggestion.\nFor any field set to true, there is a new suggested value.",
      "type": "object",
      "properties": {
        "offsetRightSuggested": {
          "description": "Indicates if there was a suggested change to offset_right.",
          "type": "boolean"
        },
        "offsetLeftSuggested": {
          "description": "Indicates if there was a suggested change to offset_left.",
          "type": "boolean"
        },
        "offsetBottomSuggested": {
          "type": "boolean",
          "description": "Indicates if there was a suggested change to offset_bottom."
        },
        "offsetTopSuggested": {
          "description": "Indicates if there was a suggested change to offset_top.",
          "type": "boolean"
        },
        "angleSuggested": {
          "description": "Indicates if there was a suggested change to angle.",
          "type": "boolean"
        }
      },
      "id": "CropPropertiesSuggestionState"
    },
    "SuggestedListProperties": {
      "description": "A suggested change to ListProperties.",
      "type": "object",
      "properties": {
        "listPropertiesSuggestionState": {
          "$ref": "ListPropertiesSuggestionState",
          "description": "A mask that indicates which of the fields on the base ListProperties have been changed in this suggestion."
        },
        "listProperties": {
          "description": "A ListProperties that only includes\nthe changes made in this suggestion. This can be used along with the\nlist_properties_suggestion_state\nto see which fields have changed and their new values.",
          "$ref": "ListProperties"
        }
      },
      "id": "SuggestedListProperties"
    },
    "DeleteContentRangeRequest": {
      "description": "Deletes content from the document.",
      "type": "object",
      "properties": {
        "range": {
          "description": "The range of content to delete.\n\nDeleting text that crosses a paragraph boundary may result in changes\nto paragraph styles, lists, positioned objects and bookmarks as the two\nparagraphs are merged.\n\nAttempting to delete certain ranges can result in an invalid document\nstructure in which case a 400 bad request error is returned.\n\nSome examples of invalid delete requests include:\n\n* Deleting one code unit of a surrogate pair.\n* Deleting the last newline character of a Body, Header,\n  Footer, Footnote, TableCell or TableOfContents.\n* Deleting the start or end of a Table,\n  TableOfContents or Equation without deleting the entire element.\n* Deleting the newline character before a\n  Table,\n  TableOfContents or\n  SectionBreak without deleting the\n  element.\n* Deleting individual rows or cells of a table. Deleting the content within\n  a table cell is allowed.",
          "$ref": "Range"
        }
      },
      "id": "DeleteContentRangeRequest"
    },
    "UpdateDocumentStyleRequest": {
      "properties": {
        "fields": {
          "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `document_style` is\nimplied and should not be specified. A single `\"*\"` can be used as\nshort-hand for listing every field.\n\nFor example to update the background, set `fields` to `\"background\"`.",
          "format": "google-fieldmask",
          "type": "string"
        },
        "documentStyle": {
          "description": "The styles to set on the document.\n\nCertain document style changes may cause other changes in order to mirror\nthe behavior of the Docs editor. See the documentation of DocumentStyle for more information.",
          "$ref": "DocumentStyle"
        }
      },
      "id": "UpdateDocumentStyleRequest",
      "description": "Updates the DocumentStyle.",
      "type": "object"
    },
    "LinkedContentReferenceSuggestionState": {
      "type": "object",
      "properties": {
        "sheetsChartReferenceSuggestionState": {
          "$ref": "SheetsChartReferenceSuggestionState",
          "description": "A mask that indicates which of the fields in sheets_chart_reference have\nbeen changed in this suggestion."
        }
      },
      "id": "LinkedContentReferenceSuggestionState",
      "description": "A mask that indicates which of the fields on the base\nLinkedContentReference have\nbeen changed in this suggestion. For any field set to true, there is a new\nsuggested value."
    },
    "InsertInlineSheetsChartResponse": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string",
          "description": "The object ID of the inserted chart."
        }
      },
      "id": "InsertInlineSheetsChartResponse",
      "description": "The result of inserting an embedded Google Sheets chart."
    },
    "UpdateTableColumnPropertiesRequest": {
      "description": "Updates the\nTableColumnProperties of columns\nin a table.",
      "type": "object",
      "properties": {
        "columnIndices": {
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "description": "The list of zero-based column indices whose property should be updated. If\nno indices are specified, all columns will be updated."
        },
        "tableColumnProperties": {
          "$ref": "TableColumnProperties",
          "description": "The table column properties to update.\n\nIf the value of `table_column_properties#width` is less than 5 points\n(5/72 inch), a 400 bad request error is returned."
        },
        "tableStartLocation": {
          "description": "The location where the table starts in the document.",
          "$ref": "Location"
        },
        "fields": {
          "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `tableColumnProperties` is\nimplied and should not be specified. A single `\"*\"` can be used as\nshort-hand for listing every field.\n\nFor example to update the column width, set `fields` to `\"width\"`.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "UpdateTableColumnPropertiesRequest"
    },
    "Background": {
      "description": "Represents the background of a document.",
      "type": "object",
      "properties": {
        "color": {
          "$ref": "OptionalColor",
          "description": "The background color."
        }
      },
      "id": "Background"
    },
    "Shading": {
      "type": "object",
      "properties": {
        "backgroundColor": {
          "description": "The background color of this paragraph shading.",
          "$ref": "OptionalColor"
        }
      },
      "id": "Shading",
      "description": "The shading of a paragraph."
    },
    "Link": {
      "id": "Link",
      "description": "A reference to another portion of a document or an external URL resource.",
      "type": "object",
      "properties": {
        "headingId": {
          "description": "The ID of a heading in this document.",
          "type": "string"
        },
        "url": {
          "description": "An external URL.",
          "type": "string"
        },
        "bookmarkId": {
          "description": "The ID of a bookmark in this document.",
          "type": "string"
        }
      }
    },
    "ColumnBreak": {
      "description": "A ParagraphElement representing a\ncolumn break. A column break makes the subsequent text start at the top of\nthe next column.",
      "type": "object",
      "properties": {
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "textStyle": {
          "$ref": "TextStyle",
          "description": "The text style of this ColumnBreak.\n\nSimilar to text content, like text runs and footnote references, the text\nstyle of a column break can affect content layout as well as the styling of\ntext inserted adjacent to it."
        },
        "suggestedInsertionIds": {
          "description": "The suggested insertion IDs. A ColumnBreak may have multiple insertion IDs if it is\na nested suggested change. If empty, then this is not a suggested\ninsertion.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "suggestedTextStyleChanges": {
          "type": "object",
          "additionalProperties": {
            "$ref": "SuggestedTextStyle"
          },
          "description": "The suggested text style changes to this ColumnBreak, keyed by suggestion\nID."
        }
      },
      "id": "ColumnBreak"
    },
    "TableRowStyleSuggestionState": {
      "properties": {
        "minRowHeightSuggested": {
          "type": "boolean",
          "description": "Indicates if there was a suggested change to min_row_height."
        }
      },
      "id": "TableRowStyleSuggestionState",
      "description": "A mask that indicates which of the fields on the base TableRowStyle have been changed in this suggestion.\nFor any field set to true, there is a new suggested value.",
      "type": "object"
    },
    "RgbColor": {
      "id": "RgbColor",
      "description": "An RGB color.",
      "type": "object",
      "properties": {
        "green": {
          "description": "The green component of the color, from 0.0 to 1.0.",
          "format": "float",
          "type": "number"
        },
        "blue": {
          "description": "The blue component of the color, from 0.0 to 1.0.",
          "format": "float",
          "type": "number"
        },
        "red": {
          "description": "The red component of the color, from 0.0 to 1.0.",
          "format": "float",
          "type": "number"
        }
      }
    },
    "HorizontalRule": {
      "description": "A ParagraphElement representing a\nhorizontal line.",
      "type": "object",
      "properties": {
        "suggestedInsertionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The suggested insertion IDs. A HorizontalRule may have multiple insertion IDs if it\nis a nested suggested change. If empty, then this is not a suggested\ninsertion."
        },
        "suggestedTextStyleChanges": {
          "additionalProperties": {
            "$ref": "SuggestedTextStyle"
          },
          "description": "The suggested text style changes to this HorizontalRule, keyed by\nsuggestion ID.",
          "type": "object"
        },
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "textStyle": {
          "$ref": "TextStyle",
          "description": "The text style of this HorizontalRule.\n\nSimilar to text content, like text runs and footnote references, the text\nstyle of a horizontal rule can affect content layout as well as the styling\nof text inserted adjacent to it."
        }
      },
      "id": "HorizontalRule"
    },
    "NamedStyleSuggestionState": {
      "description": "A suggestion state of a NamedStyle message.",
      "type": "object",
      "properties": {
        "textStyleSuggestionState": {
          "description": "A mask that indicates which of the fields in text style have been changed in this\nsuggestion.",
          "$ref": "TextStyleSuggestionState"
        },
        "namedStyleType": {
          "description": "The named style type that this suggestion state corresponds to.\n\nThis field is provided as a convenience for matching the\nNamedStyleSuggestionState with its corresponding NamedStyle.",
          "type": "string",
          "enumDescriptions": [
            "The type of named style is unspecified.",
            "Normal text.",
            "Title.",
            "Subtitle.",
            "Heading 1.",
            "Heading 2.",
            "Heading 3.",
            "Heading 4.",
            "Heading 5.",
            "Heading 6."
          ],
          "enum": [
            "NAMED_STYLE_TYPE_UNSPECIFIED",
            "NORMAL_TEXT",
            "TITLE",
            "SUBTITLE",
            "HEADING_1",
            "HEADING_2",
            "HEADING_3",
            "HEADING_4",
            "HEADING_5",
            "HEADING_6"
          ]
        },
        "paragraphStyleSuggestionState": {
          "description": "A mask that indicates which of the fields in paragraph style have been changed in this\nsuggestion.",
          "$ref": "ParagraphStyleSuggestionState"
        }
      },
      "id": "NamedStyleSuggestionState"
    },
    "ShadingSuggestionState": {
      "description": "A mask that indicates which of the fields on the base Shading have been changed in this\nsuggested change. For any field set to true, there is a new suggested value.",
      "type": "object",
      "properties": {
        "backgroundColorSuggested": {
          "description": "Indicates if there was a suggested change to the Shading.",
          "type": "boolean"
        }
      },
      "id": "ShadingSuggestionState"
    },
    "SuggestedParagraphStyle": {
      "properties": {
        "paragraphStyle": {
          "$ref": "ParagraphStyle",
          "description": "A ParagraphStyle that only includes\nthe changes made in this suggestion. This can be used along with the\nparagraph_suggestion_state\nto see which fields have changed and their new values."
        },
        "paragraphStyleSuggestionState": {
          "$ref": "ParagraphStyleSuggestionState",
          "description": "A mask that indicates which of the fields on the base ParagraphStyle have been changed in this suggestion."
        }
      },
      "id": "SuggestedParagraphStyle",
      "description": "A suggested change to a\nParagraphStyle.",
      "type": "object"
    },
    "InlineObjectPropertiesSuggestionState": {
      "properties": {
        "embeddedObjectSuggestionState": {
          "$ref": "EmbeddedObjectSuggestionState",
          "description": "A mask that indicates which of the fields in embedded_object have been\nchanged in this suggestion."
        }
      },
      "id": "InlineObjectPropertiesSuggestionState",
      "description": "A mask that indicates which of the fields on the base\nInlineObjectProperties have\nbeen changed in this suggestion. For any field set to true, there is a new\nsuggested value.",
      "type": "object"
    },
    "SuggestedTableRowStyle": {
      "id": "SuggestedTableRowStyle",
      "description": "A suggested change to a\nTableRowStyle.",
      "type": "object",
      "properties": {
        "tableRowStyleSuggestionState": {
          "$ref": "TableRowStyleSuggestionState",
          "description": "A mask that indicates which of the fields on the base TableRowStyle have been changed in this suggestion."
        },
        "tableRowStyle": {
          "$ref": "TableRowStyle",
          "description": "A TableRowStyle that only includes\nthe changes made in this suggestion. This can be used along with the\ntable_row_style_suggestion_state\nto see which fields have changed and their new values."
        }
      }
    },
    "SuggestedBullet": {
      "type": "object",
      "properties": {
        "bulletSuggestionState": {
          "description": "A mask that indicates which of the fields on the base\nBullet have been changed in this suggestion.",
          "$ref": "BulletSuggestionState"
        },
        "bullet": {
          "$ref": "Bullet",
          "description": "A Bullet that only includes the changes made\nin this suggestion. This can be used along with the\nbullet_suggestion_state to see which\nfields have changed and their new values."
        }
      },
      "id": "SuggestedBullet",
      "description": "A suggested change to a Bullet."
    },
    "TextStyleSuggestionState": {
      "properties": {
        "smallCapsSuggested": {
          "description": "Indicates if there was a suggested change to small_caps.",
          "type": "boolean"
        },
        "italicSuggested": {
          "description": "Indicates if there was a suggested change to italic.",
          "type": "boolean"
        },
        "foregroundColorSuggested": {
          "description": "Indicates if there was a suggested change to foreground_color.",
          "type": "boolean"
        },
        "boldSuggested": {
          "description": "Indicates if there was a suggested change to bold.",
          "type": "boolean"
        },
        "linkSuggested": {
          "description": "Indicates if there was a suggested change to link.",
          "type": "boolean"
        },
        "fontSizeSuggested": {
          "description": "Indicates if there was a suggested change to font_size.",
          "type": "boolean"
        },
        "strikethroughSuggested": {
          "description": "Indicates if there was a suggested change to strikethrough.",
          "type": "boolean"
        },
        "underlineSuggested": {
          "description": "Indicates if there was a suggested change to underline.",
          "type": "boolean"
        },
        "baselineOffsetSuggested": {
          "description": "Indicates if there was a suggested change to baseline_offset.",
          "type": "boolean"
        },
        "weightedFontFamilySuggested": {
          "description": "Indicates if there was a suggested change to weighted_font_family.",
          "type": "boolean"
        },
        "backgroundColorSuggested": {
          "description": "Indicates if there was a suggested change to background_color.",
          "type": "boolean"
        }
      },
      "id": "TextStyleSuggestionState",
      "description": "A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion.\nFor any field set to true, there is a new suggested value.",
      "type": "object"
    },
    "Header": {
      "properties": {
        "headerId": {
          "type": "string",
          "description": "The ID of the header."
        },
        "content": {
          "description": "The contents of the header.\n\nThe indexes for a header's content begin at zero.",
          "type": "array",
          "items": {
            "$ref": "StructuralElement"
          }
        }
      },
      "id": "Header",
      "description": "A document header.",
      "type": "object"
    },
    "TableCell": {
      "id": "TableCell",
      "description": "The contents and style of a cell in a Table.",
      "type": "object",
      "properties": {
        "suggestedTableCellStyleChanges": {
          "additionalProperties": {
            "$ref": "SuggestedTableCellStyle"
          },
          "description": "The suggested changes to the table cell style, keyed by suggestion ID.",
          "type": "object"
        },
        "content": {
          "description": "The content of the cell.",
          "type": "array",
          "items": {
            "$ref": "StructuralElement"
          }
        },
        "suggestedInsertionIds": {
          "description": "The suggested insertion IDs. A TableCell\nmay have multiple insertion IDs if it is a nested suggested change. If\nempty, then this is not a suggested insertion.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startIndex": {
          "description": "The zero-based start index of this cell, in UTF-16 code units.",
          "format": "int32",
          "type": "integer"
        },
        "endIndex": {
          "description": "The zero-based end index of this cell, exclusive, in UTF-16 code units.",
          "format": "int32",
          "type": "integer"
        },
        "tableCellStyle": {
          "$ref": "TableCellStyle",
          "description": "The style of the cell."
        },
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NestingLevel": {
      "description": "Contains properties describing the look and feel of a list bullet at a given\nlevel of nesting.",
      "type": "object",
      "properties": {
        "indentFirstLine": {
          "$ref": "Dimension",
          "description": "The amount of indentation for the first line of paragraphs at this level of\nnesting."
        },
        "glyphType": {
          "type": "string",
          "enumDescriptions": [
            "The glyph type is unspecified or unsupported.",
            "An empty string.",
            "A number, like `1`, `2`, or `3`.",
            "A number where single digit numbers are prefixed with a zero, like `01`,\n`02`, or `03`. Numbers with more than one digit are not prefixed with a\nzero.",
            "An uppercase letter, like `A`, `B`, or `C`.",
            "A lowercase letter, like `a`, `b`, or `c`.",
            "An uppercase Roman numeral, like `I`, `II`, or `III`.",
            "A lowercase Roman numeral, like `i`, `ii`, or `iii`."
          ],
          "enum": [
            "GLYPH_TYPE_UNSPECIFIED",
            "NONE",
            "DECIMAL",
            "ZERO_DECIMAL",
            "UPPER_ALPHA",
            "ALPHA",
            "UPPER_ROMAN",
            "ROMAN"
          ],
          "description": "The type of glyph used by bullets when paragraphs at this level of\nnesting are ordered.\n\nThe glyph type determines the type of glyph used to replace placeholders\nwithin the glyph_format\nwhen paragraphs at this level of nesting are ordered. For example, if the\nnesting level is 0, the glyph_format is `%0.` and the glyph\ntype is DECIMAL,\nthen the rendered glyph would replace the placeholder `%0` in the glyph\nformat with a number corresponding to list item's order within the list."
        },
        "startNumber": {
          "description": "The number of the first list item at this nesting level.\n\nA value of 0 is treated as a value of 1 for lettered lists and roman\nnumeraled lists, i.e. for values of both 0 and 1, lettered and roman\nnumeraled lists will begin at `a` and `i` respectively.\n\nThis value is ignored for nesting levels with unordered glyphs.",
          "format": "int32",
          "type": "integer"
        },
        "textStyle": {
          "$ref": "TextStyle",
          "description": "The text style of bullets at this level of nesting."
        },
        "bulletAlignment": {
          "enumDescriptions": [
            "The bullet alignment is unspecified.",
            "The bullet is aligned to the start of the space allotted for rendering\nthe bullet. Left-aligned for LTR text, right-aligned otherwise.",
            "The bullet is aligned to the center of the space allotted for rendering\nthe bullet.",
            "The bullet is aligned to the end of the space allotted for rendering the\nbullet. Right-aligned for LTR text, left-aligned otherwise."
          ],
          "enum": [
            "BULLET_ALIGNMENT_UNSPECIFIED",
            "START",
            "CENTER",
            "END"
          ],
          "description": "The alignment of the bullet within the space allotted for rendering the\nbullet.",
          "type": "string"
        },
        "glyphSymbol": {
          "type": "string",
          "description": "A custom glyph symbol used by bullets when paragraphs at this level of\nnesting are unordered.\n\nThe glyph symbol replaces placeholders within the glyph_format. For example, if the\nglyph_symbol is the solid circle corresponding to Unicode U+25cf code\npoint and the glyph_format is `%0`, the rendered\nglyph would be the solid circle."
        },
        "indentStart": {
          "description": "The amount of indentation for paragraphs at this level of nesting. Applied\nto the side that corresponds to the start of the text, based on the\nparagraph's content direction.",
          "$ref": "Dimension"
        },
        "glyphFormat": {
          "description": "The format string used by bullets at this level of nesting.\n\nThe glyph format contains one or more placeholders, and these placeholder\nare replaced with the appropriate values depending on the glyph_type or glyph_symbol. The placeholders follow\nthe pattern `%[nesting_level]`. Furthermore, placeholders can have prefixes\nand suffixes. Thus, the glyph format follows the pattern\n`\u003cprefix\u003e%[nesting_level]\u003csuffix\u003e`. Note that the prefix and suffix are\noptional and can be arbitrary strings.\n\nFor example, the glyph format `%0.` indicates that the rendered glyph will\nreplace the placeholder with the corresponding glyph for nesting level 0\nfollowed by a period as the suffix. So a list with a glyph type of\nUPPER_ALPHA and\nglyph format `%0.` at nesting level 0 will result in a list with rendered\nglyphs\n\u003cp\u003e`A.`\n\u003cp\u003e`B.`\n\u003cp\u003e`C.`\n\nThe glyph format can contain placeholders for the current nesting level as\nwell as placeholders for parent nesting levels. For example, a\nlist can have a glyph format of `%0.` at nesting level 0 and a\nglyph format of `%0.%1.` at nesting level 1. Assuming both nesting levels\nhave DECIMAL glyph\ntypes, this would result in a list with rendered glyphs\n\u003cp\u003e`1.`\n\u003cp\u003e`2.`\n\u003cp\u003e`  2.1.`\n\u003cp\u003e`  2.2.`\n\u003cp\u003e`3.`\n\nFor nesting levels that are ordered, the string that replaces a placeholder\nin the glyph format for a particular paragraph depends on the paragraph's\norder within the list.",
          "type": "string"
        }
      },
      "id": "NestingLevel"
    },
    "CreateHeaderResponse": {
      "description": "The result of creating a header.",
      "type": "object",
      "properties": {
        "headerId": {
          "description": "The ID of the created header.",
          "type": "string"
        }
      },
      "id": "CreateHeaderResponse"
    },
    "ParagraphElement": {
      "description": "A ParagraphElement describes content within a\nParagraph.",
      "type": "object",
      "properties": {
        "footnoteReference": {
          "$ref": "FootnoteReference",
          "description": "A footnote reference paragraph element."
        },
        "textRun": {
          "description": "A text run paragraph element.",
          "$ref": "TextRun"
        },
        "horizontalRule": {
          "description": "A horizontal rule paragraph element.",
          "$ref": "HorizontalRule"
        },
        "equation": {
          "$ref": "Equation",
          "description": "An equation paragraph element."
        },
        "inlineObjectElement": {
          "$ref": "InlineObjectElement",
          "description": "An inline object paragraph element."
        },
        "columnBreak": {
          "description": "A column break paragraph element.",
          "$ref": "ColumnBreak"
        },
        "startIndex": {
          "description": "The zero-based start index of this paragraph element, in UTF-16 code units.",
          "format": "int32",
          "type": "integer"
        },
        "endIndex": {
          "description": "The zero-base end index of this paragraph element, exclusive, in UTF-16\ncode units.",
          "format": "int32",
          "type": "integer"
        },
        "pageBreak": {
          "description": "A page break paragraph element.",
          "$ref": "PageBreak"
        },
        "autoText": {
          "$ref": "AutoText",
          "description": "An auto text paragraph element."
        }
      },
      "id": "ParagraphElement"
    },
    "DocumentStyle": {
      "description": "The style of the document.",
      "type": "object",
      "properties": {
        "pageNumberStart": {
          "description": "The page number from which to start counting the number of pages.",
          "format": "int32",
          "type": "integer"
        },
        "useFirstPageHeaderFooter": {
          "description": "Indicates whether to use the first page header / footer IDs for the first\npage.\n\nThis property is read-only.",
          "type": "boolean"
        },
        "evenPageHeaderId": {
          "description": "The ID of the header used only for even pages. The value of\nuse_even_page_header_footer determines\nwhether to use the default_header_id or this value for the\nheader on even pages. If not set, there is no even page header.\n\nThis property is read-only.",
          "type": "string"
        },
        "useEvenPageHeaderFooter": {
          "description": "Indicates whether to use the even page header / footer IDs for the even\npages.\n\nThis property is read-only.",
          "type": "boolean"
        },
        "marginLeft": {
          "description": "The left page margin.\n\nUpdating the left page margin on the document style clears the left page\nmargin on all section styles. It may also cause columns to resize in all\nsections.",
          "$ref": "Dimension"
        },
        "marginFooter": {
          "description": "The amount of space between the bottom of the page and the contents of the\nfooter.",
          "$ref": "Dimension"
        },
        "evenPageFooterId": {
          "type": "string",
          "description": "The ID of the footer used only for even pages. The value of\nuse_even_page_header_footer determines\nwhether to use the default_footer_id or this value for the\nfooter on even pages. If not set, there is no even page footer.\n\nThis property is read-only."
        },
        "firstPageFooterId": {
          "description": "The ID of the footer used only for the first page. If not set then\na unique footer for the first page does not exist. The value of\nuse_first_page_header_footer determines\nwhether to use the default_footer_id or this value for the\nfooter on the first page. If not set, there is no first page footer.\n\nThis property is read-only.",
          "type": "string"
        },
        "useCustomHeaderFooterMargins": {
          "type": "boolean",
          "description": "Indicates whether DocumentStyle\nmargin_header,\nSectionStyle\nmargin_header and\nDocumentStyle\nmargin_footer,\nSectionStyle\nmargin_footer are\nrespected. When false, the default values in the Docs editor for header and\nfooter margin are used.\n\nThis property is read-only."
        },
        "defaultFooterId": {
          "type": "string",
          "description": "The ID of the default footer. If not set, there is no default footer.\n\nThis property is read-only."
        },
        "marginTop": {
          "$ref": "Dimension",
          "description": "The top page margin.\n\nUpdating the top page margin on the document style clears the top page\nmargin on all section styles."
        },
        "pageSize": {
          "$ref": "Size",
          "description": "The size of a page in the document."
        },
        "marginBottom": {
          "$ref": "Dimension",
          "description": "The bottom page margin.\n\nUpdating the bottom page margin on the document style clears the bottom\npage margin on all section styles."
        },
        "firstPageHeaderId": {
          "type": "string",
          "description": "The ID of the header used only for the first page. If not set then\na unique header for the first page does not exist.\nThe value of use_first_page_header_footer determines\nwhether to use the default_header_id or this value for the\nheader on the first page. If not set, there is no first page header.\n\nThis property is read-only."
        },
        "background": {
          "$ref": "Background",
          "description": "The background of the document. Documents cannot have a transparent\nbackground color."
        },
        "marginHeader": {
          "description": "The amount of space between the top of the page and the contents of the\nheader.",
          "$ref": "Dimension"
        },
        "defaultHeaderId": {
          "description": "The ID of the default header. If not set, there is no default header.\n\nThis property is read-only.",
          "type": "string"
        },
        "marginRight": {
          "description": "The right page margin.\n\nUpdating the right page margin on the document style clears the right page\nmargin on all section styles. It may also cause columns to resize in all\nsections.",
          "$ref": "Dimension"
        }
      },
      "id": "DocumentStyle"
    },
    "NamedRanges": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name that all the named ranges share."
        },
        "namedRanges": {
          "description": "The NamedRanges that share the same name.",
          "type": "array",
          "items": {
            "$ref": "NamedRange"
          }
        }
      },
      "id": "NamedRanges",
      "description": "A collection of all the NamedRanges in the\ndocument that share a given name.",
      "type": "object"
    },
    "FootnoteReference": {
      "properties": {
        "suggestedTextStyleChanges": {
          "additionalProperties": {
            "$ref": "SuggestedTextStyle"
          },
          "description": "The suggested text style changes to this FootnoteReference, keyed by\nsuggestion ID.",
          "type": "object"
        },
        "suggestedInsertionIds": {
          "description": "The suggested insertion IDs. A FootnoteReference may have multiple insertion IDs if\nit is a nested suggested change. If empty, then this is not a suggested\ninsertion.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "footnoteId": {
          "description": "The ID of the footnote that\ncontains the content of this footnote reference.",
          "type": "string"
        },
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "textStyle": {
          "description": "The text style of this FootnoteReference.",
          "$ref": "TextStyle"
        },
        "footnoteNumber": {
          "description": "The rendered number of this footnote.",
          "type": "string"
        }
      },
      "id": "FootnoteReference",
      "description": "A ParagraphElement representing a\nfootnote reference. A footnote reference is the inline content rendered with\na number and is used to identify the footnote.",
      "type": "object"
    },
    "ListProperties": {
      "description": "The properties of a list which describe the look\nand feel of bullets belonging to paragraphs associated with a list.",
      "type": "object",
      "properties": {
        "nestingLevels": {
          "description": "Describes the properties of the bullets at the associated level.\n\nA list has at most nine levels of nesting with nesting level 0\ncorresponding to the top-most level and nesting level 8 corresponding to\nthe most nested level. The nesting levels are returned in ascending order\nwith the least nested returned first.",
          "type": "array",
          "items": {
            "$ref": "NestingLevel"
          }
        }
      },
      "id": "ListProperties"
    },
    "Footer": {
      "id": "Footer",
      "description": "A document footer.",
      "type": "object",
      "properties": {
        "content": {
          "description": "The contents of the footer.\n\nThe indexes for a footer's content begin at zero.",
          "type": "array",
          "items": {
            "$ref": "StructuralElement"
          }
        },
        "footerId": {
          "description": "The ID of the footer.",
          "type": "string"
        }
      }
    },
    "EmbeddedObjectBorderSuggestionState": {
      "description": "A mask that indicates which of the fields on the base EmbeddedObjectBorder have been changed in this\nsuggestion. For any field set to true, there is a new suggested value.",
      "type": "object",
      "properties": {
        "widthSuggested": {
          "description": "Indicates if there was a suggested change to width.",
          "type": "boolean"
        },
        "dashStyleSuggested": {
          "description": "Indicates if there was a suggested change to dash_style.",
          "type": "boolean"
        },
        "colorSuggested": {
          "description": "Indicates if there was a suggested change to color.",
          "type": "boolean"
        },
        "propertyStateSuggested": {
          "description": "Indicates if there was a suggested change to property_state.",
          "type": "boolean"
        }
      },
      "id": "EmbeddedObjectBorderSuggestionState"
    },
    "SizeSuggestionState": {
      "type": "object",
      "properties": {
        "widthSuggested": {
          "type": "boolean",
          "description": "Indicates if there was a suggested change to width."
        },
        "heightSuggested": {
          "description": "Indicates if there was a suggested change to height.",
          "type": "boolean"
        }
      },
      "id": "SizeSuggestionState",
      "description": "A mask that indicates which of the fields on the base Size have been changed in this suggestion.\nFor any field set to true, the Size has\na new suggested value."
    },
    "NamedStyles": {
      "type": "object",
      "properties": {
        "styles": {
          "type": "array",
          "items": {
            "$ref": "NamedStyle"
          },
          "description": "The named styles.\n\nThere is an entry for each of the possible named style types."
        }
      },
      "id": "NamedStyles",
      "description": "The named styles. Paragraphs in the document can inherit their\nTextStyle and\nParagraphStyle from these named styles."
    },
    "ReplaceAllTextRequest": {
      "description": "Replaces all instances of text matching a criteria with replace text.",
      "type": "object",
      "properties": {
        "replaceText": {
          "description": "The text that will replace the matched text.",
          "type": "string"
        },
        "containsText": {
          "$ref": "SubstringMatchCriteria",
          "description": "Finds text in the document matching this substring."
        }
      },
      "id": "ReplaceAllTextRequest"
    },
    "UnmergeTableCellsRequest": {
      "description": "Unmerges cells in a Table.",
      "type": "object",
      "properties": {
        "tableRange": {
          "description": "The table range specifying which cells of the table to unmerge.\n\nAll merged cells in this range will be unmerged, and cells that are already\nunmerged will not be affected. If the range has no merged cells, the\nrequest will do nothing.\n\nIf there is text in any of the merged cells, the text will remain in the\n\"head\" cell of the resulting block of unmerged cells. The \"head\" cell is\nthe upper-left cell when the content direction is from left to right, and\nthe upper-right otherwise.",
          "$ref": "TableRange"
        }
      },
      "id": "UnmergeTableCellsRequest"
    },
    "SectionBreak": {
      "properties": {
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "suggestedInsertionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The suggested insertion IDs. A SectionBreak may have multiple insertion IDs if it is\na nested suggested change. If empty, then this is not a suggested\ninsertion."
        },
        "sectionStyle": {
          "description": "The style of the section after this section break.",
          "$ref": "SectionStyle"
        }
      },
      "id": "SectionBreak",
      "description": "A StructuralElement representing a\nsection break. A section is a range of content which has the same\nSectionStyle. A section break represents\nthe start of a new section, and the section style applies to the section\nafter the section break.\n\nThe document body always begins with a section break.",
      "type": "object"
    },
    "TableCellBorder": {
      "properties": {
        "dashStyle": {
          "enum": [
            "DASH_STYLE_UNSPECIFIED",
            "SOLID",
            "DOT",
            "DASH"
          ],
          "description": "The dash style of the border.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified dash style.",
            "Solid line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'solid'.\nThis is the default dash style.",
            "Dotted line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dot'.",
            "Dashed line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dash'."
          ]
        },
        "color": {
          "$ref": "OptionalColor",
          "description": "The color of the border.\n\nThis color cannot be transparent."
        },
        "width": {
          "description": "The width of the border.",
          "$ref": "Dimension"
        }
      },
      "id": "TableCellBorder",
      "description": "A border around a table cell.\n\nTable cell borders cannot be transparent. To hide a table cell border, make\nits width 0.",
      "type": "object"
    },
    "CropProperties": {
      "type": "object",
      "properties": {
        "offsetLeft": {
          "description": "The offset specifies how far inwards the left edge of the crop rectangle is\nfrom the left edge of the original content as a fraction of the original\ncontent's width.",
          "format": "float",
          "type": "number"
        },
        "angle": {
          "description": "The clockwise rotation angle of the crop rectangle around its center, in\nradians. Rotation is applied after the offsets.",
          "format": "float",
          "type": "number"
        },
        "offsetRight": {
          "description": "The offset specifies how far inwards the right edge of the crop rectangle\nis from the right edge of the original content as a fraction of the\noriginal content's width.",
          "format": "float",
          "type": "number"
        },
        "offsetBottom": {
          "description": "The offset specifies how far inwards the bottom edge of the crop rectangle\nis from the bottom edge of the original content as a fraction of the\noriginal content's height.",
          "format": "float",
          "type": "number"
        },
        "offsetTop": {
          "description": "The offset specifies how far inwards the top edge of the crop rectangle is\nfrom the top edge of the original content as a fraction of the original\ncontent's height.",
          "format": "float",
          "type": "number"
        }
      },
      "id": "CropProperties",
      "description": "The crop properties of an image.\n\nThe crop rectangle is represented using fractional offsets from the original\ncontent's four edges.\n\n- If the offset is in the interval (0, 1), the corresponding edge of crop\nrectangle is positioned inside of the image's original bounding rectangle.\n- If the offset is negative or greater than 1, the corresponding edge of crop\nrectangle is positioned outside of the image's original bounding rectangle.\n- If all offsets and rotation angle are 0, the image is not cropped."
    },
    "EmbeddedObject": {
      "type": "object",
      "properties": {
        "linkedContentReference": {
          "$ref": "LinkedContentReference",
          "description": "A reference to the external linked source content. For example, it contains\na reference to the source Sheets chart when the embedded object is a linked\nchart.\n\nIf unset, then the embedded object is not linked."
        },
        "marginTop": {
          "description": "The top margin of the embedded object.",
          "$ref": "Dimension"
        },
        "size": {
          "$ref": "Size",
          "description": "The visible size of the image after cropping."
        },
        "marginRight": {
          "$ref": "Dimension",
          "description": "The right margin of the embedded object."
        },
        "title": {
          "description": "The title of the embedded object. The `title` and `description` are both\ncombined to display alt text.",
          "type": "string"
        },
        "description": {
          "description": "The description of the embedded object. The `title` and `description` are\nboth combined to display alt text.",
          "type": "string"
        },
        "imageProperties": {
          "$ref": "ImageProperties",
          "description": "The properties of an image."
        },
        "embeddedDrawingProperties": {
          "description": "The properties of an embedded drawing.",
          "$ref": "EmbeddedDrawingProperties"
        },
        "marginBottom": {
          "description": "The bottom margin of the embedded object.",
          "$ref": "Dimension"
        },
        "marginLeft": {
          "$ref": "Dimension",
          "description": "The left margin of the embedded object."
        },
        "embeddedObjectBorder": {
          "description": "The border of the embedded object.",
          "$ref": "EmbeddedObjectBorder"
        }
      },
      "id": "EmbeddedObject",
      "description": "An embedded object in the document."
    },
    "TableCellStyleSuggestionState": {
      "description": "A mask that indicates which of the fields on the base TableCellStyle have been changed in this suggestion.\nFor any field set to true, there is a new suggested value.",
      "type": "object",
      "properties": {
        "backgroundColorSuggested": {
          "description": "Indicates if there was a suggested change to background_color.",
          "type": "boolean"
        },
        "rowSpanSuggested": {
          "description": "Indicates if there was a suggested change to row_span.",
          "type": "boolean"
        },
        "borderLeftSuggested": {
          "description": "Indicates if there was a suggested change to border_left.",
          "type": "boolean"
        },
        "contentAlignmentSuggested": {
          "description": "Indicates if there was a suggested change to content_alignment.",
          "type": "boolean"
        },
        "paddingBottomSuggested": {
          "description": "Indicates if there was a suggested change to padding_bottom.",
          "type": "boolean"
        },
        "borderBottomSuggested": {
          "description": "Indicates if there was a suggested change to border_bottom.",
          "type": "boolean"
        },
        "borderTopSuggested": {
          "description": "Indicates if there was a suggested change to border_top.",
          "type": "boolean"
        },
        "paddingLeftSuggested": {
          "description": "Indicates if there was a suggested change to padding_left.",
          "type": "boolean"
        },
        "borderRightSuggested": {
          "description": "Indicates if there was a suggested change to border_right.",
          "type": "boolean"
        },
        "paddingTopSuggested": {
          "description": "Indicates if there was a suggested change to padding_top.",
          "type": "boolean"
        },
        "paddingRightSuggested": {
          "description": "Indicates if there was a suggested change to padding_right.",
          "type": "boolean"
        },
        "columnSpanSuggested": {
          "description": "Indicates if there was a suggested change to column_span.",
          "type": "boolean"
        }
      },
      "id": "TableCellStyleSuggestionState"
    },
    "EmbeddedObjectSuggestionState": {
      "id": "EmbeddedObjectSuggestionState",
      "description": "A mask that indicates which of the fields on the base EmbeddedObject have been changed in this suggestion.\nFor any field set to true, there is a new suggested value.",
      "type": "object",
      "properties": {
        "marginRightSuggested": {
          "description": "Indicates if there was a suggested change to margin_right.",
          "type": "boolean"
        },
        "marginTopSuggested": {
          "description": "Indicates if there was a suggested change to margin_top.",
          "type": "boolean"
        },
        "titleSuggested": {
          "description": "Indicates if there was a suggested change to title.",
          "type": "boolean"
        },
        "marginBottomSuggested": {
          "description": "Indicates if there was a suggested change to margin_bottom.",
          "type": "boolean"
        },
        "marginLeftSuggested": {
          "type": "boolean",
          "description": "Indicates if there was a suggested change to margin_left."
        },
        "embeddedObjectBorderSuggestionState": {
          "$ref": "EmbeddedObjectBorderSuggestionState",
          "description": "A mask that indicates which of the fields in embedded_object_border have been\nchanged in this suggestion."
        },
        "embeddedDrawingPropertiesSuggestionState": {
          "$ref": "EmbeddedDrawingPropertiesSuggestionState",
          "description": "A mask that indicates which of the fields in embedded_drawing_properties have been\nchanged in this suggestion."
        },
        "imagePropertiesSuggestionState": {
          "$ref": "ImagePropertiesSuggestionState",
          "description": "A mask that indicates which of the fields in image_properties have been changed in\nthis suggestion."
        },
        "linkedContentReferenceSuggestionState": {
          "$ref": "LinkedContentReferenceSuggestionState",
          "description": "A mask that indicates which of the fields in linked_content_reference have been\nchanged in this suggestion."
        },
        "sizeSuggestionState": {
          "$ref": "SizeSuggestionState",
          "description": "A mask that indicates which of the fields in size have been changed in this\nsuggestion."
        },
        "descriptionSuggested": {
          "description": "Indicates if there was a suggested change to description.",
          "type": "boolean"
        }
      }
    },
    "BatchUpdateDocumentRequest": {
      "type": "object",
      "properties": {
        "writeControl": {
          "$ref": "WriteControl",
          "description": "Provides control over how write requests are executed."
        },
        "requests": {
          "description": "A list of updates to apply to the document.",
          "type": "array",
          "items": {
            "$ref": "Request"
          }
        }
      },
      "id": "BatchUpdateDocumentRequest",
      "description": "Request message for BatchUpdateDocument."
    },
    "Equation": {
      "description": "A ParagraphElement representing an\nequation.",
      "type": "object",
      "properties": {
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "suggestedInsertionIds": {
          "description": "The suggested insertion IDs. A Equation\nmay have multiple insertion IDs if it is a nested suggested change. If\nempty, then this is not a suggested insertion.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "Equation"
    },
    "Range": {
      "description": "Specifies a contiguous range of text.",
      "type": "object",
      "properties": {
        "segmentId": {
          "description": "The ID of the header, footer or footnote that this range is contained in.\nAn empty segment ID signifies the document's body.",
          "type": "string"
        },
        "startIndex": {
          "description": "The zero-based start index of this range, in UTF-16 code units.\n\nIn all current uses, a start index must be provided. This field is an\nInt32Value in order to accommodate future use cases with open-ended ranges.",
          "format": "int32",
          "type": "integer"
        },
        "endIndex": {
          "description": "The zero-based end index of this range, exclusive, in UTF-16 code units.\n\nIn all current uses, an end index must be provided. This field is an\nInt32Value in order to accommodate future use cases with open-ended ranges.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "Range"
    },
    "PageBreak": {
      "description": "A ParagraphElement representing a\npage break. A page break makes the subsequent text start at the top of the\nnext page.",
      "type": "object",
      "properties": {
        "suggestedInsertionIds": {
          "description": "The suggested insertion IDs. A PageBreak\nmay have multiple insertion IDs if it is a nested suggested change. If\nempty, then this is not a suggested insertion.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "suggestedTextStyleChanges": {
          "type": "object",
          "additionalProperties": {
            "$ref": "SuggestedTextStyle"
          },
          "description": "The suggested text style changes to this PageBreak, keyed by suggestion ID."
        },
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "textStyle": {
          "description": "The text style of this PageBreak.\n\nSimilar to text content, like text runs and footnote references, the text\nstyle of a page break can affect content layout as well as the styling of\ntext inserted adjacent to it.",
          "$ref": "TextStyle"
        }
      },
      "id": "PageBreak"
    },
    "ObjectReferences": {
      "description": "A collection of object IDs.",
      "type": "object",
      "properties": {
        "objectIds": {
          "description": "The object IDs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "ObjectReferences"
    },
    "PositionedObjectPositioningSuggestionState": {
      "description": "A mask that indicates which of the fields on the base\nPositionedObjectPositioning have been changed in this\nsuggestion. For any field set to true, there is a new suggested value.",
      "type": "object",
      "properties": {
        "leftOffsetSuggested": {
          "description": "Indicates if there was a suggested change to left_offset.",
          "type": "boolean"
        },
        "layoutSuggested": {
          "description": "Indicates if there was a suggested change to layout.",
          "type": "boolean"
        },
        "topOffsetSuggested": {
          "description": "Indicates if there was a suggested change to top_offset.",
          "type": "boolean"
        }
      },
      "id": "PositionedObjectPositioningSuggestionState"
    },
    "InsertInlineImageRequest": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The image URI.\n\nThe image is fetched once at insertion time and a copy is stored for\ndisplay inside the document. Images must be less than 50MB in size, cannot\nexceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format.\n\nThe provided URI can be at most 2 kB in length. The URI itself is saved\nwith the image, and exposed via the ImageProperties.content_uri field."
        },
        "objectSize": {
          "$ref": "Size",
          "description": "The size that the image should appear as in the document. This property is\noptional and the final size of the image in the document is determined by\nthe following rules:\n * If neither width nor height is specified, then a default size of the\n image is calculated based on its resolution.\n * If one dimension is specified then the other dimension is calculated to\n preserve the aspect ratio of the image.\n * If both width and height are specified, the image is scaled to fit\n within the provided dimensions while maintaining its aspect ratio."
        },
        "endOfSegmentLocation": {
          "$ref": "EndOfSegmentLocation",
          "description": "Inserts the text at the end of a header, footer or the document body.\n\nInline images cannot be inserted inside a footnote."
        },
        "location": {
          "$ref": "Location",
          "description": "Inserts the image at a specific index in the document.\n\nThe image must be inserted inside the bounds of an existing\nParagraph. For instance, it cannot be\ninserted at a table's start index (i.e. between the table and its\npreceding paragraph).\n\nInline images cannot be inserted inside a footnote or equation."
        }
      },
      "id": "InsertInlineImageRequest",
      "description": "Inserts an InlineObject containing an\nimage at the given location."
    },
    "CreateFooterRequest": {
      "id": "CreateFooterRequest",
      "description": "Creates a Footer. The new footer is applied to\nthe DocumentStyle.\n\nIf a footer of the specified type already exists, a 400 bad request error\nis returned.",
      "type": "object",
      "properties": {
        "type": {
          "enumDescriptions": [
            "The header/footer type is unspecified.",
            "A default header/footer."
          ],
          "enum": [
            "HEADER_FOOTER_TYPE_UNSPECIFIED",
            "DEFAULT"
          ],
          "description": "The type of footer to create.",
          "type": "string"
        }
      }
    },
    "SectionColumnProperties": {
      "properties": {
        "width": {
          "$ref": "Dimension",
          "description": "The width of the column."
        },
        "paddingEnd": {
          "$ref": "Dimension",
          "description": "The padding at the end of the column."
        }
      },
      "id": "SectionColumnProperties",
      "description": "Properties that apply to a section's column.",
      "type": "object"
    },
    "MergeTableCellsRequest": {
      "description": "Merges cells in a Table.",
      "type": "object",
      "properties": {
        "tableRange": {
          "$ref": "TableRange",
          "description": "The table range specifying which cells of the table to merge.\n\nAny text in the cells being merged will be concatenated and stored in the\n\"head\" cell of the range. This is the upper-left cell of the range when\nthe content direction is left to right, and the upper-right cell of the\nrange otherwise.\n\nIf the range is non-rectangular (which can occur in some cases where the\nrange covers cells that are already merged or where the table is\nnon-rectangular), a 400 bad request error is returned."
        }
      },
      "id": "MergeTableCellsRequest"
    },
    "CreateNamedRangeResponse": {
      "description": "The result of creating a named range.",
      "type": "object",
      "properties": {
        "namedRangeId": {
          "description": "The ID of the created named range.",
          "type": "string"
        }
      },
      "id": "CreateNamedRangeResponse"
    },
    "SuggestedPositionedObjectProperties": {
      "description": "A suggested change to PositionedObjectProperties.",
      "type": "object",
      "properties": {
        "positionedObjectProperties": {
          "$ref": "PositionedObjectProperties",
          "description": "A PositionedObjectProperties that only includes the\nchanges made in this suggestion. This can be used along with the\npositioned_object_properties_suggestion_state\nto see which fields have changed and their new values."
        },
        "positionedObjectPropertiesSuggestionState": {
          "description": "A mask that indicates which of the fields on the base\nPositionedObjectProperties have been changed in this\nsuggestion.",
          "$ref": "PositionedObjectPropertiesSuggestionState"
        }
      },
      "id": "SuggestedPositionedObjectProperties"
    },
    "BatchUpdateDocumentResponse": {
      "id": "BatchUpdateDocumentResponse",
      "description": "Response message from a BatchUpdateDocument request.",
      "type": "object",
      "properties": {
        "replies": {
          "description": "The reply of the updates. This maps 1:1 with the updates, although replies\nto some requests may be empty.",
          "type": "array",
          "items": {
            "$ref": "Response"
          }
        },
        "documentId": {
          "description": "The ID of the document to which the updates were applied to.",
          "type": "string"
        },
        "writeControl": {
          "$ref": "WriteControl",
          "description": "The updated write control after applying the request."
        }
      }
    },
    "CreateFootnoteRequest": {
      "description": "Creates a Footnote segment\nand inserts a new FootnoteReference\nto it at the given location.\n\nThe new Footnote segment will contain a\nspace followed by a newline character.",
      "type": "object",
      "properties": {
        "endOfSegmentLocation": {
          "$ref": "EndOfSegmentLocation",
          "description": "Inserts the footnote reference at the end of the document body.\n\nFootnote references cannot be inserted inside a header, footer or\nfootnote. Since footnote references can only be inserted in the body, the\nsegment ID field\nmust be empty."
        },
        "location": {
          "description": "Inserts the footnote reference at a specific index in the document.\n\nThe footnote reference must be inserted inside the bounds of an existing\nParagraph. For instance, it cannot be\ninserted at a table's start index (i.e. between the table and its\npreceding paragraph).\n\nFootnote references cannot be inserted inside an equation,\nheader, footer or footnote. Since footnote references can only be\ninserted in the body, the segment ID field must be empty.",
          "$ref": "Location"
        }
      },
      "id": "CreateFootnoteRequest"
    },
    "DeleteTableRowRequest": {
      "description": "Deletes a row from a table.",
      "type": "object",
      "properties": {
        "tableCellLocation": {
          "description": "The reference table cell location from which the row will be deleted.\n\nThe row this cell spans will be deleted. If this is a merged cell that\nspans multiple rows, all rows that the cell spans will be deleted. If no\nrows remain in the table after this deletion, the whole table is deleted.",
          "$ref": "TableCellLocation"
        }
      },
      "id": "DeleteTableRowRequest"
    },
    "Bullet": {
      "id": "Bullet",
      "description": "Describes the bullet of a paragraph.",
      "type": "object",
      "properties": {
        "nestingLevel": {
          "type": "integer",
          "description": "The nesting level of this paragraph in the list.",
          "format": "int32"
        },
        "listId": {
          "description": "The ID of the list this paragraph belongs to.",
          "type": "string"
        },
        "textStyle": {
          "description": "The paragraph specific text style applied to this bullet.",
          "$ref": "TextStyle"
        }
      }
    },
    "InsertPageBreakRequest": {
      "description": "Inserts a page break followed by a newline at the specified location.",
      "type": "object",
      "properties": {
        "endOfSegmentLocation": {
          "$ref": "EndOfSegmentLocation",
          "description": "Inserts the page break at the end of the document body.\n\nPage breaks cannot be inserted inside a footnote, header or footer.\nSince page breaks can only be inserted inside the body, the segment ID field must be\nempty."
        },
        "location": {
          "$ref": "Location",
          "description": "Inserts the page break at a specific index in the document.\n\nThe page break must be inserted inside the bounds of an existing\nParagraph. For instance, it cannot be\ninserted at a table's start index (i.e. between the table and its\npreceding paragraph).\n\nPage breaks cannot be inserted inside a table, equation, footnote, header\nor footer. Since page breaks can only be inserted inside the body, the\nsegment ID field must be\nempty."
        }
      },
      "id": "InsertPageBreakRequest"
    },
    "TableCellLocation": {
      "properties": {
        "tableStartLocation": {
          "$ref": "Location",
          "description": "The location where the table starts in the document."
        },
        "rowIndex": {
          "description": "The zero-based row index. For example, the second row in the table has a\nrow index of 1.",
          "format": "int32",
          "type": "integer"
        },
        "columnIndex": {
          "description": "The zero-based column index. For example, the second column in the table\nhas a column index of 1.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "TableCellLocation",
      "description": "Location of a single cell within a table.",
      "type": "object"
    },
    "SectionStyle": {
      "description": "The styling that applies to a section.",
      "type": "object",
      "properties": {
        "columnSeparatorStyle": {
          "enum": [
            "COLUMN_SEPARATOR_STYLE_UNSPECIFIED",
            "NONE",
            "BETWEEN_EACH_COLUMN"
          ],
          "description": "The style of column separators.\n\nThis style can be set even when there is one column in the section.",
          "type": "string",
          "enumDescriptions": [
            "An unspecified column separator style.",
            "No column separator lines between columns.",
            "Renders a column separator line between each column."
          ]
        },
        "marginTop": {
          "description": "The top page margin of the section. If unset, uses margin_top from DocumentStyle.\n\nWhen updating this property, setting a concrete value is required.\nUnsetting this property results in a 400 bad request error.",
          "$ref": "Dimension"
        },
        "marginRight": {
          "$ref": "Dimension",
          "description": "The right page margin of the section. If unset, uses margin_right from DocumentStyle.\nUpdating right margin causes columns in this section to resize. Since\nthe margin affects column width, it is applied before column properties.\n\nWhen updating this property, setting a concrete value is required.\nUnsetting this property results in a 400 bad request error."
        },
        "marginBottom": {
          "description": "The bottom page margin of the section. If unset, uses margin_bottom from DocumentStyle.\n\nWhen updating this property, setting a concrete value is required.\nUnsetting this property results in a 400 bad request error.",
          "$ref": "Dimension"
        },
        "columnProperties": {
          "description": "The section's columns properties.\n\nIf empty, the section contains one column with the default properties in\nthe Docs editor.",
          "type": "array",
          "items": {
            "$ref": "SectionColumnProperties"
          }
        },
        "marginLeft": {
          "$ref": "Dimension",
          "description": "The left page margin of the section. If unset, uses margin_left from DocumentStyle.\nUpdating left margin causes columns in this section to resize. Since\nthe margin affects column width, it is applied before column properties.\n\nWhen updating this property, setting a concrete value is required.\nUnsetting this property results in a 400 bad request error."
        },
        "marginFooter": {
          "$ref": "Dimension",
          "description": "The footer margin of the section. If unset, uses margin_footer from DocumentStyle. If\nupdated, use_custom_header_footer_margins is set\nto true on DocumentStyle. The value of use_custom_header_footer_margins on\nDocumentStyle indicates if a footer margin is being respected for this\nsection\n\nWhen updating this property, setting a concrete value is required.\nUnsetting this property results in a 400 bad request error."
        },
        "contentDirection": {
          "description": "The content direction of this section. If unset, the value defaults to\nLEFT_TO_RIGHT.",
          "type": "string",
          "enumDescriptions": [
            "The content direction is unspecified.",
            "The content goes from left to right.",
            "The content goes from right to left."
          ],
          "enum": [
            "CONTENT_DIRECTION_UNSPECIFIED",
            "LEFT_TO_RIGHT",
            "RIGHT_TO_LEFT"
          ]
        },
        "sectionType": {
          "description": "Output only. The type of section.",
          "type": "string",
          "enumDescriptions": [
            "The section type is unspecified.",
            "The section starts immediately after the last paragraph of the previous\nsection.",
            "The section starts on the next page."
          ],
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "CONTINUOUS",
            "NEXT_PAGE"
          ]
        },
        "marginHeader": {
          "description": "The header margin of the section. If unset, uses margin_header from DocumentStyle. If\nupdated, use_custom_header_footer_margins is set\nto true on DocumentStyle. The value of use_custom_header_footer_margins on\nDocumentStyle indicates if a header margin is being respected for this\nsection.\n\nWhen updating this property, setting a concrete value is required.\nUnsetting this property results in a 400 bad request error.",
          "$ref": "Dimension"
        }
      },
      "id": "SectionStyle"
    },
    "ReplaceAllTextResponse": {
      "type": "object",
      "properties": {
        "occurrencesChanged": {
          "description": "The number of occurrences changed by replacing all text.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "ReplaceAllTextResponse",
      "description": "The result of replacing text."
    },
    "EndOfSegmentLocation": {
      "description": "Location at the end of a body, header, footer or footnote. The location is\nimmediately before the last newline in the document segment.",
      "type": "object",
      "properties": {
        "segmentId": {
          "type": "string",
          "description": "The ID of the header, footer or footnote the location is in. An empty\nsegment ID signifies the document's body."
        }
      },
      "id": "EndOfSegmentLocation"
    },
    "EmbeddedDrawingPropertiesSuggestionState": {
      "description": "A mask that indicates which of the fields on the base\nEmbeddedDrawingProperties\nhave been changed in this suggestion. For any field set to true, there is a\nnew suggested value.",
      "type": "object",
      "properties": {},
      "id": "EmbeddedDrawingPropertiesSuggestionState"
    },
    "SheetsChartReference": {
      "type": "object",
      "properties": {
        "spreadsheetId": {
          "description": "The ID of the Google Sheets spreadsheet that contains the source chart.",
          "type": "string"
        },
        "chartId": {
          "description": "The ID of the specific chart in the Google Sheets spreadsheet that is\nembedded.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "SheetsChartReference",
      "description": "A reference to a linked chart embedded from Google Sheets."
    },
    "SuggestedTableCellStyle": {
      "description": "A suggested change to a TableCellStyle.",
      "type": "object",
      "properties": {
        "tableCellStyle": {
          "$ref": "TableCellStyle",
          "description": "A TableCellStyle that only includes\nthe changes made in this suggestion. This can be used along with the\ntable_cell_style_suggestion_state\nto see which fields have changed and their new values."
        },
        "tableCellStyleSuggestionState": {
          "$ref": "TableCellStyleSuggestionState",
          "description": "A mask that indicates which of the fields on the base TableCellStyle have been changed in this suggestion."
        }
      },
      "id": "SuggestedTableCellStyle"
    },
    "UpdateParagraphStyleRequest": {
      "id": "UpdateParagraphStyleRequest",
      "description": "Update the styling of all paragraphs that overlap with the given range.",
      "type": "object",
      "properties": {
        "range": {
          "$ref": "Range",
          "description": "The range overlapping the paragraphs to style."
        },
        "paragraphStyle": {
          "$ref": "ParagraphStyle",
          "description": "The styles to set on the paragraphs.\n\nCertain paragraph style changes may cause other changes in order to mirror\nthe behavior of the Docs editor. See the documentation of ParagraphStyle for more information."
        },
        "fields": {
          "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `paragraph_style` is implied\nand should not be specified.\n\nFor example, to update the paragraph style's alignment property, set\n`fields` to `\"alignment\"`.\n\nTo reset a property to its default value, include its field name in the\nfield mask but leave the field itself unset.",
          "format": "google-fieldmask",
          "type": "string"
        }
      }
    },
    "SuggestedInlineObjectProperties": {
      "type": "object",
      "properties": {
        "inlineObjectPropertiesSuggestionState": {
          "$ref": "InlineObjectPropertiesSuggestionState",
          "description": "A mask that indicates which of the fields on the base\nInlineObjectProperties have\nbeen changed in this suggestion."
        },
        "inlineObjectProperties": {
          "$ref": "InlineObjectProperties",
          "description": "An InlineObjectProperties\nthat only includes the changes made in this suggestion. This can be used\nalong with the inline_object_properties_suggestion_state\nto see which fields have changed and their new values."
        }
      },
      "id": "SuggestedInlineObjectProperties",
      "description": "A suggested change to InlineObjectProperties."
    },
    "NamedRange": {
      "description": "A collection of Ranges with the same named range\nID.\n\nNamed ranges allow developers to associate parts of a document with an\narbitrary user-defined label so their contents can be programmatically read\nor edited at a later time. A document can contain multiple named ranges with\nthe same name, but every named range has a unique ID.\n\nA named range is created with a single Range,\nand content inserted inside a named range generally expands that range.\nHowever, certain document changes can cause the range to be split into\nmultiple ranges.\n\nNamed ranges are not private. All applications and collaborators that have\naccess to the document can see its named ranges.",
      "type": "object",
      "properties": {
        "namedRangeId": {
          "description": "The ID of the named range.",
          "type": "string"
        },
        "name": {
          "description": "The name of the named range.",
          "type": "string"
        },
        "ranges": {
          "type": "array",
          "items": {
            "$ref": "Range"
          },
          "description": "The ranges that belong to this named range."
        }
      },
      "id": "NamedRange"
    },
    "ReplaceNamedRangeContentRequest": {
      "description": "Replaces the contents of the specified\nNamedRange or\nNamedRanges with the given replacement\ncontent.\n\nNote that an individual NamedRange may\nconsist of multiple discontinuous\nranges. In this case, only the\ncontent in the first range will be replaced. The other ranges and their\ncontent will be deleted.\n\nIn cases where replacing or deleting any ranges would result in an invalid\ndocument structure, a 400 bad request error is returned.",
      "type": "object",
      "properties": {
        "text": {
          "description": "Replaces the content of the specified named range(s) with the given text.",
          "type": "string"
        },
        "namedRangeName": {
          "description": "The name of the NamedRanges whose\ncontent will be replaced.\n\nIf there are multiple named ranges with the given name, then\nthe content of each one will be replaced. If there are no named ranges\nwith the given name, then the request will be a no-op.",
          "type": "string"
        },
        "namedRangeId": {
          "description": "The ID of the named range whose content will be replaced.\n\nIf there is no named range with the given ID a 400 bad request error is\nreturned.",
          "type": "string"
        }
      },
      "id": "ReplaceNamedRangeContentRequest"
    },
    "NamedStyle": {
      "description": "A named style. Paragraphs in the document can inherit their\nTextStyle and\nParagraphStyle from this named style\nwhen they have the same named style type.",
      "type": "object",
      "properties": {
        "paragraphStyle": {
          "description": "The paragraph style of this named style.",
          "$ref": "ParagraphStyle"
        },
        "namedStyleType": {
          "description": "The type of this named style.",
          "type": "string",
          "enumDescriptions": [
            "The type of named style is unspecified.",
            "Normal text.",
            "Title.",
            "Subtitle.",
            "Heading 1.",
            "Heading 2.",
            "Heading 3.",
            "Heading 4.",
            "Heading 5.",
            "Heading 6."
          ],
          "enum": [
            "NAMED_STYLE_TYPE_UNSPECIFIED",
            "NORMAL_TEXT",
            "TITLE",
            "SUBTITLE",
            "HEADING_1",
            "HEADING_2",
            "HEADING_3",
            "HEADING_4",
            "HEADING_5",
            "HEADING_6"
          ]
        },
        "textStyle": {
          "$ref": "TextStyle",
          "description": "The text style of this named style."
        }
      },
      "id": "NamedStyle"
    },
    "Paragraph": {
      "id": "Paragraph",
      "description": "A StructuralElement representing a\nparagraph. A paragraph is a range of content that is terminated with a\nnewline character.",
      "type": "object",
      "properties": {
        "elements": {
          "description": "The content of the paragraph broken down into its component parts.",
          "type": "array",
          "items": {
            "$ref": "ParagraphElement"
          }
        },
        "paragraphStyle": {
          "description": "The style of this paragraph.",
          "$ref": "ParagraphStyle"
        },
        "bullet": {
          "description": "The bullet for this paragraph. If not present, the paragraph does not\nbelong to a list.",
          "$ref": "Bullet"
        },
        "suggestedParagraphStyleChanges": {
          "description": "The suggested paragraph style changes to this paragraph, keyed by\nsuggestion ID.",
          "type": "object",
          "additionalProperties": {
            "$ref": "SuggestedParagraphStyle"
          }
        },
        "suggestedPositionedObjectIds": {
          "description": "The IDs of the positioned objects that are suggested to be attached to this\nparagraph, keyed by suggestion ID.",
          "type": "object",
          "additionalProperties": {
            "$ref": "ObjectReferences"
          }
        },
        "positionedObjectIds": {
          "description": "The IDs of the positioned objects tethered to this paragraph.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "suggestedBulletChanges": {
          "additionalProperties": {
            "$ref": "SuggestedBullet"
          },
          "description": "The suggested changes to this paragraph's bullet.",
          "type": "object"
        }
      }
    },
    "UpdateSectionStyleRequest": {
      "description": "Updates the SectionStyle.",
      "type": "object",
      "properties": {
        "range": {
          "$ref": "Range",
          "description": "The range overlapping the sections to style.\n\nBecause section breaks can only be inserted inside the body, the segment\nID field must be empty."
        },
        "fields": {
          "description": "The fields that should be updated.\n\nAt least one field must be specified. The root `section_style` is\nimplied and must not be specified. A single `\"*\"` can be used as\nshort-hand for listing every field.\n\nFor example to update the left margin, set `fields` to `\"margin_left\"`.",
          "format": "google-fieldmask",
          "type": "string"
        },
        "sectionStyle": {
          "description": "The styles to  be set on the section.\n\nCertain section style changes may cause other changes in order to mirror\nthe behavior of the Docs editor. See the documentation of SectionStyle for more information.",
          "$ref": "SectionStyle"
        }
      },
      "id": "UpdateSectionStyleRequest"
    },
    "InsertTextRequest": {
      "description": "Inserts text at the specified location.",
      "type": "object",
      "properties": {
        "endOfSegmentLocation": {
          "$ref": "EndOfSegmentLocation",
          "description": "Inserts the text at the end of a header, footer, footnote or\nthe document body."
        },
        "location": {
          "description": "Inserts the text at a specific index in the document.\n\nText must be inserted inside the bounds of an existing\nParagraph. For instance, text cannot be\ninserted at a table's start index (i.e. between the table and its\npreceding paragraph). The text must be inserted in the preceding\nparagraph.",
          "$ref": "Location"
        },
        "text": {
          "type": "string",
          "description": "The text to be inserted.\n\nInserting a newline character will implicitly create a new\nParagraph at that index.\nThe paragraph style of the new paragraph will be copied from the paragraph\nat the current insertion index, including lists and bullets.\n\nText styles for inserted text will be determined automatically, generally\npreserving the styling of neighboring text. In most cases, the text style\nfor the inserted text will match the text immediately before the insertion\nindex.\n\nSome control characters (U+0000-U+0008, U+000C-U+001F) and characters\nfrom the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF)\nwill be stripped out of the inserted text."
        }
      },
      "id": "InsertTextRequest"
    },
    "AutoText": {
      "type": "object",
      "properties": {
        "suggestedInsertionIds": {
          "description": "The suggested insertion IDs. An AutoText\nmay have multiple insertion IDs if it is a nested suggested change. If\nempty, then this is not a suggested insertion.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "suggestedTextStyleChanges": {
          "additionalProperties": {
            "$ref": "SuggestedTextStyle"
          },
          "description": "The suggested text style changes to this AutoText, keyed by suggestion ID.",
          "type": "object"
        },
        "suggestedDeletionIds": {
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "textStyle": {
          "$ref": "TextStyle",
          "description": "The text style of this AutoText."
        },
        "type": {
          "enumDescriptions": [
            "An unspecified auto text type.",
            "Type for auto text that represents the current page number.",
            "Type for auto text that represents the total number of pages in the\ndocument."
          ],
          "enum": [
            "TYPE_UNSPECIFIED",
            "PAGE_NUMBER",
            "PAGE_COUNT"
          ],
          "description": "The type of this auto text.",
          "type": "string"
        }
      },
      "id": "AutoText",
      "description": "A ParagraphElement representing a\nspot in the text that is dynamically replaced with content that can change\nover time, like a page number."
    },
    "InsertSectionBreakRequest": {
      "id": "InsertSectionBreakRequest",
      "description": "Inserts a section break at the given location.\n\nA newline character will be inserted before the section break.",
      "type": "object",
      "properties": {
        "endOfSegmentLocation": {
          "description": "Inserts a newline and a section break at the end of the document body.\n\nSection breaks cannot be inserted inside a footnote, header or footer.\nBecause section breaks can only be inserted inside the body, the segment\nID field must be\nempty.",
          "$ref": "EndOfSegmentLocation"
        },
        "location": {
          "description": "Inserts a newline and a section break at a specific index in the\ndocument.\n\nThe section break must be inserted inside the bounds of an existing\nParagraph. For instance, it cannot be\ninserted at a table's start index (i.e. between the table and its\npreceding paragraph).\n\nSection breaks cannot be inserted inside a table, equation, footnote,\nheader, or footer. Since section breaks can only be inserted inside the\nbody, the segment ID field\nmust be empty.",
          "$ref": "Location"
        },
        "sectionType": {
          "enumDescriptions": [
            "The section type is unspecified.",
            "The section starts immediately after the last paragraph of the previous\nsection.",
            "The section starts on the next page."
          ],
          "enum": [
            "SECTION_TYPE_UNSPECIFIED",
            "CONTINUOUS",
            "NEXT_PAGE"
          ],
          "description": "The type of section to insert.",
          "type": "string"
        }
      }
    },
    "PositionedObjectPropertiesSuggestionState": {
      "description": "A mask that indicates which of the fields on the base\nPositionedObjectProperties\nhave been changed in this suggestion. For any field set to true, there is a\nnew suggested value.",
      "type": "object",
      "properties": {
        "embeddedObjectSuggestionState": {
          "description": "A mask that indicates which of the fields in embedded_object have been\nchanged in this suggestion.",
          "$ref": "EmbeddedObjectSuggestionState"
        },
        "positioningSuggestionState": {
          "$ref": "PositionedObjectPositioningSuggestionState",
          "description": "A mask that indicates which of the fields in positioning have been\nchanged in this suggestion."
        }
      },
      "id": "PositionedObjectPropertiesSuggestionState"
    },
    "BulletSuggestionState": {
      "description": "A mask that indicates which of the fields on the base\nBullet have been changed in this suggestion.\nFor any field set to true, there is a new suggested value.",
      "type": "object",
      "properties": {
        "nestingLevelSuggested": {
          "description": "Indicates if there was a suggested change to the\nnesting_level.",
          "type": "boolean"
        },
        "textStyleSuggestionState": {
          "description": "A mask that indicates which of the fields in text style have been changed in this\nsuggestion.",
          "$ref": "TextStyleSuggestionState"
        },
        "listIdSuggested": {
          "description": "Indicates if there was a suggested change to the\nlist_id.",
          "type": "boolean"
        }
      },
      "id": "BulletSuggestionState"
    },
    "Dimension": {
      "id": "Dimension",
      "description": "A magnitude in a single direction in the specified units.",
      "type": "object",
      "properties": {
        "magnitude": {
          "description": "The magnitude.",
          "format": "double",
          "type": "number"
        },
        "unit": {
          "description": "The units for magnitude.",
          "type": "string",
          "enumDescriptions": [
            "The units are unknown.",
            "A point, 1/72 of an inch."
          ],
          "enum": [
            "UNIT_UNSPECIFIED",
            "PT"
          ]
        }
      }
    },
    "DeleteNamedRangeRequest": {
      "description": "Deletes a NamedRange.",
      "type": "object",
      "properties": {
        "namedRangeId": {
          "description": "The ID of the named range to delete.",
          "type": "string"
        },
        "name": {
          "description": "The name of the range(s) to delete. All named ranges with the given\nname will be deleted.",
          "type": "string"
        }
      },
      "id": "DeleteNamedRangeRequest"
    },
    "PositionedObject": {
      "description": "An object that is tethered to a Paragraph\nand positioned relative to the beginning of the paragraph. A PositionedObject\ncontains an EmbeddedObject such as an\nimage.",
      "type": "object",
      "properties": {
        "positionedObjectProperties": {
          "$ref": "PositionedObjectProperties",
          "description": "The properties of this positioned object."
        },
        "objectId": {
          "description": "The ID of this positioned object.",
          "type": "string"
        },
        "suggestedPositionedObjectPropertiesChanges": {
          "description": "The suggested changes to the positioned object properties, keyed by\nsuggestion ID.",
          "type": "object",
          "additionalProperties": {
            "$ref": "SuggestedPositionedObjectProperties"
          }
        },
        "suggestedInsertionId": {
          "description": "The suggested insertion ID. If empty, then this is not a suggested\ninsertion.",
          "type": "string"
        },
        "suggestedDeletionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The suggested deletion IDs. If empty, then there are no suggested deletions\nof this content."
        }
      },
      "id": "PositionedObject"
    },
    "TableStyle": {
      "description": "Styles that apply to a table.",
      "type": "object",
      "properties": {
        "tableColumnProperties": {
          "description": "The properties of each column.\n\nNote that in Docs, tables contain rows and rows contain cells, similar to\nHTML. So the properties for a row can be found on the row's\ntable_row_style.",
          "type": "array",
          "items": {
            "$ref": "TableColumnProperties"
          }
        }
      },
      "id": "TableStyle"
    },
    "Color": {
      "properties": {
        "rgbColor": {
          "$ref": "RgbColor",
          "description": "The RGB color value."
        }
      },
      "id": "Color",
      "description": "A solid color.",
      "type": "object"
    }
  },
  "protocol": "rest",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "canonicalName": "Docs",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/documents.readonly": {
          "description": "View your Google Docs documents"
        },
        "https://www.googleapis.com/auth/drive.file": {
          "description": "View and manage Google Drive files and folders that you have opened or created with this app"
        },
        "https://www.googleapis.com/auth/documents": {
          "description": "View and manage your Google Docs documents"
        },
        "https://www.googleapis.com/auth/drive": {
          "description": "See, edit, create, and delete all of your Google Drive files"
        },
        "https://www.googleapis.com/auth/drive.readonly": {
          "description": "See and download all your Google Drive files"
        }
      }
    }
  },
  "rootUrl": "https://docs.googleapis.com/",
  "ownerDomain": "google.com",
  "name": "docs",
  "batchPath": "batch",
  "fullyEncodeReservedExpansion": true,
  "title": "Google Docs API",
  "ownerName": "Google",
  "resources": {
    "documents": {
      "methods": {
        "get": {
          "path": "v1/documents/{documentId}",
          "id": "docs.documents.get",
          "description": "Gets the latest version of the specified document.",
          "response": {
            "$ref": "Document"
          },
          "parameterOrder": [
            "documentId"
          ],
          "httpMethod": "GET",
          "parameters": {
            "documentId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The ID of the document to retrieve."
            },
            "suggestionsViewMode": {
              "location": "query",
              "enum": [
                "DEFAULT_FOR_CURRENT_ACCESS",
                "SUGGESTIONS_INLINE",
                "PREVIEW_SUGGESTIONS_ACCEPTED",
                "PREVIEW_WITHOUT_SUGGESTIONS"
              ],
              "description": "The suggestions view mode to apply to the document. This allows viewing the\ndocument with all suggestions inline, accepted or rejected. If one is not\nspecified, DEFAULT_FOR_CURRENT_ACCESS is\nused.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/documents",
            "https://www.googleapis.com/auth/documents.readonly",
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive.readonly"
          ],
          "flatPath": "v1/documents/{documentId}"
        },
        "create": {
          "response": {
            "$ref": "Document"
          },
          "parameterOrder": [],
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/documents",
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file"
          ],
          "parameters": {},
          "flatPath": "v1/documents",
          "path": "v1/documents",
          "id": "docs.documents.create",
          "request": {
            "$ref": "Document"
          },
          "description": "Creates a blank document using the title given in the request. Other fields\nin the request, including any provided content, are ignored.\n\nReturns the created document."
        },
        "batchUpdate": {
          "description": "Applies one or more updates to the document.\n\nEach request is validated before\nbeing applied. If any request is not valid, then the entire request will\nfail and nothing will be applied.\n\nSome requests have replies to\ngive you some information about how they are applied. Other requests do\nnot need to return information; these each return an empty reply.\nThe order of replies matches that of the requests.\n\nFor example, suppose you call batchUpdate with four updates, and only the\nthird one returns information. The response would have two empty replies,\nthe reply to the third request, and another empty reply, in that order.\n\nBecause other users may be editing the document, the document\nmight not exactly reflect your changes: your changes may\nbe altered with respect to collaborator changes. If there are no\ncollaborators, the document should reflect your changes. In any case,\nthe updates in your request are guaranteed to be applied together\natomically.",
          "request": {
            "$ref": "BatchUpdateDocumentRequest"
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "documentId"
          ],
          "response": {
            "$ref": "BatchUpdateDocumentResponse"
          },
          "parameters": {
            "documentId": {
              "location": "path",
              "description": "The ID of the document to update.",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/documents",
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file"
          ],
          "flatPath": "v1/documents/{documentId}:batchUpdate",
          "id": "docs.documents.batchUpdate",
          "path": "v1/documents/{documentId}:batchUpdate"
        }
      }
    }
  },
  "parameters": {
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "prettyPrint": {
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format."
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string"
    }
  },
  "version": "v1",
  "baseUrl": "https://docs.googleapis.com/"
}
