/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.analyticsadmin.v1alpha.model;

/**
 * Defines a condition for when an Event Edit or Event Creation rule applies to an event.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Analytics Admin API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleAnalyticsAdminV1alphaMatchingCondition extends com.google.api.client.json.GenericJson {

  /**
   * Required. The type of comparison to be applied to the value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String comparisonType;

  /**
   * Required. The name of the field that is compared against for the condition. If 'event_name' is
   * specified this condition will apply to the name of the event. Otherwise the condition will
   * apply to a parameter with the specified name. This value cannot contain spaces.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String field;

  /**
   * Whether or not the result of the comparison should be negated. For example, if `negated` is
   * true, then 'equals' comparisons would function as 'not equals'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean negated;

  /**
   * Required. The value being compared against for this condition. The runtime implementation may
   * perform type coercion of this value to evaluate this condition based on the type of the
   * parameter value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String value;

  /**
   * Required. The type of comparison to be applied to the value.
   * @return value or {@code null} for none
   */
  public java.lang.String getComparisonType() {
    return comparisonType;
  }

  /**
   * Required. The type of comparison to be applied to the value.
   * @param comparisonType comparisonType or {@code null} for none
   */
  public GoogleAnalyticsAdminV1alphaMatchingCondition setComparisonType(java.lang.String comparisonType) {
    this.comparisonType = comparisonType;
    return this;
  }

  /**
   * Required. The name of the field that is compared against for the condition. If 'event_name' is
   * specified this condition will apply to the name of the event. Otherwise the condition will
   * apply to a parameter with the specified name. This value cannot contain spaces.
   * @return value or {@code null} for none
   */
  public java.lang.String getField() {
    return field;
  }

  /**
   * Required. The name of the field that is compared against for the condition. If 'event_name' is
   * specified this condition will apply to the name of the event. Otherwise the condition will
   * apply to a parameter with the specified name. This value cannot contain spaces.
   * @param field field or {@code null} for none
   */
  public GoogleAnalyticsAdminV1alphaMatchingCondition setField(java.lang.String field) {
    this.field = field;
    return this;
  }

  /**
   * Whether or not the result of the comparison should be negated. For example, if `negated` is
   * true, then 'equals' comparisons would function as 'not equals'.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNegated() {
    return negated;
  }

  /**
   * Whether or not the result of the comparison should be negated. For example, if `negated` is
   * true, then 'equals' comparisons would function as 'not equals'.
   * @param negated negated or {@code null} for none
   */
  public GoogleAnalyticsAdminV1alphaMatchingCondition setNegated(java.lang.Boolean negated) {
    this.negated = negated;
    return this;
  }

  /**
   * Required. The value being compared against for this condition. The runtime implementation may
   * perform type coercion of this value to evaluate this condition based on the type of the
   * parameter value.
   * @return value or {@code null} for none
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * Required. The value being compared against for this condition. The runtime implementation may
   * perform type coercion of this value to evaluate this condition based on the type of the
   * parameter value.
   * @param value value or {@code null} for none
   */
  public GoogleAnalyticsAdminV1alphaMatchingCondition setValue(java.lang.String value) {
    this.value = value;
    return this;
  }

  @Override
  public GoogleAnalyticsAdminV1alphaMatchingCondition set(String fieldName, Object value) {
    return (GoogleAnalyticsAdminV1alphaMatchingCondition) super.set(fieldName, value);
  }

  @Override
  public GoogleAnalyticsAdminV1alphaMatchingCondition clone() {
    return (GoogleAnalyticsAdminV1alphaMatchingCondition) super.clone();
  }

}
