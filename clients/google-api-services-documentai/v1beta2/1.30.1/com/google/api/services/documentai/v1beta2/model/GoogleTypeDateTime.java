/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.documentai.v1beta2.model;

/**
 * Represents civil time in one of a few possible ways: * When utc_offset is set and time_zone is
 * unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set
 * and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither
 * time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is
 * relative to the Proleptic Gregorian Calendar. If year is 0, the DateTime is considered not to
 * have a specific year. month and day must have valid, non-zero values. This type is more flexible
 * than some applications may want. Make sure to document and validate your application's
 * limitations.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Document AI API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleTypeDateTime extends com.google.api.client.json.GenericJson {

  /**
   * Required. Day of month. Must be from 1 to 31 and valid for the year and month.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer day;

  /**
   * Required. Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow
   * the value "24:00:00" for scenarios like business closing time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer hours;

  /**
   * Required. Minutes of hour of day. Must be from 0 to 59.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minutes;

  /**
   * Required. Month of year. Must be from 1 to 12.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer month;

  /**
   * Required. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer nanos;

  /**
   * Required. Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the
   * value 60 if it allows leap-seconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer seconds;

  /**
   * Time zone.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeTimeZone timeZone;

  /**
   * UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset
   * of -4:00 would be represented as { seconds: -14400 }.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String utcOffset;

  /**
   * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer year;

  /**
   * Required. Day of month. Must be from 1 to 31 and valid for the year and month.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDay() {
    return day;
  }

  /**
   * Required. Day of month. Must be from 1 to 31 and valid for the year and month.
   * @param day day or {@code null} for none
   */
  public GoogleTypeDateTime setDay(java.lang.Integer day) {
    this.day = day;
    return this;
  }

  /**
   * Required. Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow
   * the value "24:00:00" for scenarios like business closing time.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHours() {
    return hours;
  }

  /**
   * Required. Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow
   * the value "24:00:00" for scenarios like business closing time.
   * @param hours hours or {@code null} for none
   */
  public GoogleTypeDateTime setHours(java.lang.Integer hours) {
    this.hours = hours;
    return this;
  }

  /**
   * Required. Minutes of hour of day. Must be from 0 to 59.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinutes() {
    return minutes;
  }

  /**
   * Required. Minutes of hour of day. Must be from 0 to 59.
   * @param minutes minutes or {@code null} for none
   */
  public GoogleTypeDateTime setMinutes(java.lang.Integer minutes) {
    this.minutes = minutes;
    return this;
  }

  /**
   * Required. Month of year. Must be from 1 to 12.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMonth() {
    return month;
  }

  /**
   * Required. Month of year. Must be from 1 to 12.
   * @param month month or {@code null} for none
   */
  public GoogleTypeDateTime setMonth(java.lang.Integer month) {
    this.month = month;
    return this;
  }

  /**
   * Required. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNanos() {
    return nanos;
  }

  /**
   * Required. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
   * @param nanos nanos or {@code null} for none
   */
  public GoogleTypeDateTime setNanos(java.lang.Integer nanos) {
    this.nanos = nanos;
    return this;
  }

  /**
   * Required. Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the
   * value 60 if it allows leap-seconds.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSeconds() {
    return seconds;
  }

  /**
   * Required. Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the
   * value 60 if it allows leap-seconds.
   * @param seconds seconds or {@code null} for none
   */
  public GoogleTypeDateTime setSeconds(java.lang.Integer seconds) {
    this.seconds = seconds;
    return this;
  }

  /**
   * Time zone.
   * @return value or {@code null} for none
   */
  public GoogleTypeTimeZone getTimeZone() {
    return timeZone;
  }

  /**
   * Time zone.
   * @param timeZone timeZone or {@code null} for none
   */
  public GoogleTypeDateTime setTimeZone(GoogleTypeTimeZone timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset
   * of -4:00 would be represented as { seconds: -14400 }.
   * @return value or {@code null} for none
   */
  public String getUtcOffset() {
    return utcOffset;
  }

  /**
   * UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset
   * of -4:00 would be represented as { seconds: -14400 }.
   * @param utcOffset utcOffset or {@code null} for none
   */
  public GoogleTypeDateTime setUtcOffset(String utcOffset) {
    this.utcOffset = utcOffset;
    return this;
  }

  /**
   * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getYear() {
    return year;
  }

  /**
   * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.
   * @param year year or {@code null} for none
   */
  public GoogleTypeDateTime setYear(java.lang.Integer year) {
    this.year = year;
    return this;
  }

  @Override
  public GoogleTypeDateTime set(String fieldName, Object value) {
    return (GoogleTypeDateTime) super.set(fieldName, value);
  }

  @Override
  public GoogleTypeDateTime clone() {
    return (GoogleTypeDateTime) super.clone();
  }

}
