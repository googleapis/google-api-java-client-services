/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for AssistantTeleportTeleportNicknameSignals.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantTeleportTeleportNicknameSignals extends com.google.api.client.json.GenericJson {

  /**
   * Whether the nickname could also refer to a location. For example, "walmart", "starbucks".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasLocationInterpretation;

  /**
   * Indicates whether the user has the app installed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String installInfo;

  /**
   * True when the name is generic, i.e when it could refer to multiple packages from different
   * developrs. For example, "mail" is considered a generic name (since it can refer to "gmail",
   * "yahoo mail" etc.) but "facebook" although could refer to both "facebook" and "facebook lite"
   * is not considered generic (both packages are from the same third party).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isGeneric;

  /**
   * The tier of the nickname.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nicknameTier;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String source;

  /**
   * Whether the nickname could also refer to a location. For example, "walmart", "starbucks".
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasLocationInterpretation() {
    return hasLocationInterpretation;
  }

  /**
   * Whether the nickname could also refer to a location. For example, "walmart", "starbucks".
   * @param hasLocationInterpretation hasLocationInterpretation or {@code null} for none
   */
  public AssistantTeleportTeleportNicknameSignals setHasLocationInterpretation(java.lang.Boolean hasLocationInterpretation) {
    this.hasLocationInterpretation = hasLocationInterpretation;
    return this;
  }

  /**
   * Indicates whether the user has the app installed.
   * @return value or {@code null} for none
   */
  public java.lang.String getInstallInfo() {
    return installInfo;
  }

  /**
   * Indicates whether the user has the app installed.
   * @param installInfo installInfo or {@code null} for none
   */
  public AssistantTeleportTeleportNicknameSignals setInstallInfo(java.lang.String installInfo) {
    this.installInfo = installInfo;
    return this;
  }

  /**
   * True when the name is generic, i.e when it could refer to multiple packages from different
   * developrs. For example, "mail" is considered a generic name (since it can refer to "gmail",
   * "yahoo mail" etc.) but "facebook" although could refer to both "facebook" and "facebook lite"
   * is not considered generic (both packages are from the same third party).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsGeneric() {
    return isGeneric;
  }

  /**
   * True when the name is generic, i.e when it could refer to multiple packages from different
   * developrs. For example, "mail" is considered a generic name (since it can refer to "gmail",
   * "yahoo mail" etc.) but "facebook" although could refer to both "facebook" and "facebook lite"
   * is not considered generic (both packages are from the same third party).
   * @param isGeneric isGeneric or {@code null} for none
   */
  public AssistantTeleportTeleportNicknameSignals setIsGeneric(java.lang.Boolean isGeneric) {
    this.isGeneric = isGeneric;
    return this;
  }

  /**
   * The tier of the nickname.
   * @return value or {@code null} for none
   */
  public java.lang.String getNicknameTier() {
    return nicknameTier;
  }

  /**
   * The tier of the nickname.
   * @param nicknameTier nicknameTier or {@code null} for none
   */
  public AssistantTeleportTeleportNicknameSignals setNicknameTier(java.lang.String nicknameTier) {
    this.nicknameTier = nicknameTier;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * @param source source or {@code null} for none
   */
  public AssistantTeleportTeleportNicknameSignals setSource(java.lang.String source) {
    this.source = source;
    return this;
  }

  @Override
  public AssistantTeleportTeleportNicknameSignals set(String fieldName, Object value) {
    return (AssistantTeleportTeleportNicknameSignals) super.set(fieldName, value);
  }

  @Override
  public AssistantTeleportTeleportNicknameSignals clone() {
    return (AssistantTeleportTeleportNicknameSignals) super.clone();
  }

}
