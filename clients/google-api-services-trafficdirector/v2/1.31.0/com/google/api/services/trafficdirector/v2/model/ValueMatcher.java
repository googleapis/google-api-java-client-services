/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.trafficdirector.v2.model;

/**
 * Specifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported.
 * StructValue is not supported and is always not matched. [#next-free-field: 7]
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Traffic Director API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ValueMatcher extends com.google.api.client.json.GenericJson {

  /**
   * If specified, a match occurs if and only if the target value is a bool value and is equal to
   * this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean boolMatch;

  /**
   * If specified, a match occurs if and only if the target value is a double value and is matched
   * to this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DoubleMatcher doubleMatch;

  /**
   * If specified, a match occurs if and only if the target value is a list value and is matched to
   * this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ListMatcher listMatch;

  /**
   * If specified, a match occurs if and only if the target value is a NullValue.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NullMatch nullMatch;

  /**
   * If specified, value match will be performed based on whether the path is referring to a valid
   * primitive value in the metadata. If the path is referring to a non-primitive value, the result
   * is always not matched.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean presentMatch;

  /**
   * If specified, a match occurs if and only if the target value is a string value and is matched
   * to this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private StringMatcher stringMatch;

  /**
   * If specified, a match occurs if and only if the target value is a bool value and is equal to
   * this field.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getBoolMatch() {
    return boolMatch;
  }

  /**
   * If specified, a match occurs if and only if the target value is a bool value and is equal to
   * this field.
   * @param boolMatch boolMatch or {@code null} for none
   */
  public ValueMatcher setBoolMatch(java.lang.Boolean boolMatch) {
    this.boolMatch = boolMatch;
    return this;
  }

  /**
   * If specified, a match occurs if and only if the target value is a double value and is matched
   * to this field.
   * @return value or {@code null} for none
   */
  public DoubleMatcher getDoubleMatch() {
    return doubleMatch;
  }

  /**
   * If specified, a match occurs if and only if the target value is a double value and is matched
   * to this field.
   * @param doubleMatch doubleMatch or {@code null} for none
   */
  public ValueMatcher setDoubleMatch(DoubleMatcher doubleMatch) {
    this.doubleMatch = doubleMatch;
    return this;
  }

  /**
   * If specified, a match occurs if and only if the target value is a list value and is matched to
   * this field.
   * @return value or {@code null} for none
   */
  public ListMatcher getListMatch() {
    return listMatch;
  }

  /**
   * If specified, a match occurs if and only if the target value is a list value and is matched to
   * this field.
   * @param listMatch listMatch or {@code null} for none
   */
  public ValueMatcher setListMatch(ListMatcher listMatch) {
    this.listMatch = listMatch;
    return this;
  }

  /**
   * If specified, a match occurs if and only if the target value is a NullValue.
   * @return value or {@code null} for none
   */
  public NullMatch getNullMatch() {
    return nullMatch;
  }

  /**
   * If specified, a match occurs if and only if the target value is a NullValue.
   * @param nullMatch nullMatch or {@code null} for none
   */
  public ValueMatcher setNullMatch(NullMatch nullMatch) {
    this.nullMatch = nullMatch;
    return this;
  }

  /**
   * If specified, value match will be performed based on whether the path is referring to a valid
   * primitive value in the metadata. If the path is referring to a non-primitive value, the result
   * is always not matched.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPresentMatch() {
    return presentMatch;
  }

  /**
   * If specified, value match will be performed based on whether the path is referring to a valid
   * primitive value in the metadata. If the path is referring to a non-primitive value, the result
   * is always not matched.
   * @param presentMatch presentMatch or {@code null} for none
   */
  public ValueMatcher setPresentMatch(java.lang.Boolean presentMatch) {
    this.presentMatch = presentMatch;
    return this;
  }

  /**
   * If specified, a match occurs if and only if the target value is a string value and is matched
   * to this field.
   * @return value or {@code null} for none
   */
  public StringMatcher getStringMatch() {
    return stringMatch;
  }

  /**
   * If specified, a match occurs if and only if the target value is a string value and is matched
   * to this field.
   * @param stringMatch stringMatch or {@code null} for none
   */
  public ValueMatcher setStringMatch(StringMatcher stringMatch) {
    this.stringMatch = stringMatch;
    return this;
  }

  @Override
  public ValueMatcher set(String fieldName, Object value) {
    return (ValueMatcher) super.set(fieldName, value);
  }

  @Override
  public ValueMatcher clone() {
    return (ValueMatcher) super.clone();
  }

}
