/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebaseapphosting.v1beta.model;

/**
 * A backend is the primary resource of App Hosting.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase App Hosting API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Backend extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Unstructured key value map that may be set by external tools to store and arbitrary
   * metadata. They are not queryable and should be preserved when modifying objects.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> annotations;

  /**
   * Optional. The [ID of a Web App](https://firebase.google.com/docs/reference/firebase-
   * management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id) associated with the backend.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String appId;

  /**
   * Optional. If specified, the connection to an external source repository to watch for event-
   * driven updates to the backend.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Codebase codebase;

  /**
   * Output only. Time at which the backend was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Output only. Time at which the backend was deleted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String deleteTime;

  /**
   * Optional. Human-readable name. 63 character limit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Optional. The environment name of the backend, used to load environment variables from
   * environment specific configuration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String environment;

  /**
   * Output only. Server-computed checksum based on other values; may be sent on update or delete to
   * ensure operation is done on expected resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Optional. Unstructured key value map that can be used to organize and categorize objects.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Output only. A list of the resources managed by this backend.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ManagedResource> managedResources;

  /**
   * Optional. Deprecated: Use `environment` instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mode;

  /**
   * Identifier. The resource name of the backend. Format:
   * `projects/{project}/locations/{locationId}/backends/{backendId}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. Override environment variables for this Backend.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<EnvironmentVariable> overrideEnv;

  /**
   * Output only. A field that, if true, indicates that the system is working to make adjustments to
   * the backend during a LRO.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean reconciling;

  /**
   * Optional. A field that, if true, indicates that incoming request logs are disabled for this
   * backend. Incoming request logs are enabled by default.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean requestLogsDisabled;

  /**
   * Required. The name of the service account used for Cloud Build and Cloud Run. Should have the
   * role roles/firebaseapphosting.computeRunner or equivalent permissions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceAccount;

  /**
   * Required. Immutable. Specifies how App Hosting will serve the content for this backend. It will
   * either be contained to a single region (REGIONAL_STRICT) or allowed to use App Hosting's
   * global-replicated serving infrastructure (GLOBAL_ACCESS).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String servingLocality;

  /**
   * Output only. System-assigned, unique identifier.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Output only. Time at which the backend was last updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. The primary URI to communicate with the backend.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uri;

  /**
   * Optional. Unstructured key value map that may be set by external tools to store and arbitrary
   * metadata. They are not queryable and should be preserved when modifying objects.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAnnotations() {
    return annotations;
  }

  /**
   * Optional. Unstructured key value map that may be set by external tools to store and arbitrary
   * metadata. They are not queryable and should be preserved when modifying objects.
   * @param annotations annotations or {@code null} for none
   */
  public Backend setAnnotations(java.util.Map<String, java.lang.String> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Optional. The [ID of a Web App](https://firebase.google.com/docs/reference/firebase-
   * management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id) associated with the backend.
   * @return value or {@code null} for none
   */
  public java.lang.String getAppId() {
    return appId;
  }

  /**
   * Optional. The [ID of a Web App](https://firebase.google.com/docs/reference/firebase-
   * management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id) associated with the backend.
   * @param appId appId or {@code null} for none
   */
  public Backend setAppId(java.lang.String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * Optional. If specified, the connection to an external source repository to watch for event-
   * driven updates to the backend.
   * @return value or {@code null} for none
   */
  public Codebase getCodebase() {
    return codebase;
  }

  /**
   * Optional. If specified, the connection to an external source repository to watch for event-
   * driven updates to the backend.
   * @param codebase codebase or {@code null} for none
   */
  public Backend setCodebase(Codebase codebase) {
    this.codebase = codebase;
    return this;
  }

  /**
   * Output only. Time at which the backend was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Time at which the backend was created.
   * @param createTime createTime or {@code null} for none
   */
  public Backend setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. Time at which the backend was deleted.
   * @return value or {@code null} for none
   */
  public String getDeleteTime() {
    return deleteTime;
  }

  /**
   * Output only. Time at which the backend was deleted.
   * @param deleteTime deleteTime or {@code null} for none
   */
  public Backend setDeleteTime(String deleteTime) {
    this.deleteTime = deleteTime;
    return this;
  }

  /**
   * Optional. Human-readable name. 63 character limit.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Optional. Human-readable name. 63 character limit.
   * @param displayName displayName or {@code null} for none
   */
  public Backend setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. The environment name of the backend, used to load environment variables from
   * environment specific configuration.
   * @return value or {@code null} for none
   */
  public java.lang.String getEnvironment() {
    return environment;
  }

  /**
   * Optional. The environment name of the backend, used to load environment variables from
   * environment specific configuration.
   * @param environment environment or {@code null} for none
   */
  public Backend setEnvironment(java.lang.String environment) {
    this.environment = environment;
    return this;
  }

  /**
   * Output only. Server-computed checksum based on other values; may be sent on update or delete to
   * ensure operation is done on expected resource.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Output only. Server-computed checksum based on other values; may be sent on update or delete to
   * ensure operation is done on expected resource.
   * @param etag etag or {@code null} for none
   */
  public Backend setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. Unstructured key value map that can be used to organize and categorize objects.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. Unstructured key value map that can be used to organize and categorize objects.
   * @param labels labels or {@code null} for none
   */
  public Backend setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Output only. A list of the resources managed by this backend.
   * @return value or {@code null} for none
   */
  public java.util.List<ManagedResource> getManagedResources() {
    return managedResources;
  }

  /**
   * Output only. A list of the resources managed by this backend.
   * @param managedResources managedResources or {@code null} for none
   */
  public Backend setManagedResources(java.util.List<ManagedResource> managedResources) {
    this.managedResources = managedResources;
    return this;
  }

  /**
   * Optional. Deprecated: Use `environment` instead.
   * @return value or {@code null} for none
   */
  public java.lang.String getMode() {
    return mode;
  }

  /**
   * Optional. Deprecated: Use `environment` instead.
   * @param mode mode or {@code null} for none
   */
  public Backend setMode(java.lang.String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Identifier. The resource name of the backend. Format:
   * `projects/{project}/locations/{locationId}/backends/{backendId}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The resource name of the backend. Format:
   * `projects/{project}/locations/{locationId}/backends/{backendId}`.
   * @param name name or {@code null} for none
   */
  public Backend setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Override environment variables for this Backend.
   * @return value or {@code null} for none
   */
  public java.util.List<EnvironmentVariable> getOverrideEnv() {
    return overrideEnv;
  }

  /**
   * Optional. Override environment variables for this Backend.
   * @param overrideEnv overrideEnv or {@code null} for none
   */
  public Backend setOverrideEnv(java.util.List<EnvironmentVariable> overrideEnv) {
    this.overrideEnv = overrideEnv;
    return this;
  }

  /**
   * Output only. A field that, if true, indicates that the system is working to make adjustments to
   * the backend during a LRO.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReconciling() {
    return reconciling;
  }

  /**
   * Output only. A field that, if true, indicates that the system is working to make adjustments to
   * the backend during a LRO.
   * @param reconciling reconciling or {@code null} for none
   */
  public Backend setReconciling(java.lang.Boolean reconciling) {
    this.reconciling = reconciling;
    return this;
  }

  /**
   * Optional. A field that, if true, indicates that incoming request logs are disabled for this
   * backend. Incoming request logs are enabled by default.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRequestLogsDisabled() {
    return requestLogsDisabled;
  }

  /**
   * Optional. A field that, if true, indicates that incoming request logs are disabled for this
   * backend. Incoming request logs are enabled by default.
   * @param requestLogsDisabled requestLogsDisabled or {@code null} for none
   */
  public Backend setRequestLogsDisabled(java.lang.Boolean requestLogsDisabled) {
    this.requestLogsDisabled = requestLogsDisabled;
    return this;
  }

  /**
   * Required. The name of the service account used for Cloud Build and Cloud Run. Should have the
   * role roles/firebaseapphosting.computeRunner or equivalent permissions.
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceAccount() {
    return serviceAccount;
  }

  /**
   * Required. The name of the service account used for Cloud Build and Cloud Run. Should have the
   * role roles/firebaseapphosting.computeRunner or equivalent permissions.
   * @param serviceAccount serviceAccount or {@code null} for none
   */
  public Backend setServiceAccount(java.lang.String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Required. Immutable. Specifies how App Hosting will serve the content for this backend. It will
   * either be contained to a single region (REGIONAL_STRICT) or allowed to use App Hosting's
   * global-replicated serving infrastructure (GLOBAL_ACCESS).
   * @return value or {@code null} for none
   */
  public java.lang.String getServingLocality() {
    return servingLocality;
  }

  /**
   * Required. Immutable. Specifies how App Hosting will serve the content for this backend. It will
   * either be contained to a single region (REGIONAL_STRICT) or allowed to use App Hosting's
   * global-replicated serving infrastructure (GLOBAL_ACCESS).
   * @param servingLocality servingLocality or {@code null} for none
   */
  public Backend setServingLocality(java.lang.String servingLocality) {
    this.servingLocality = servingLocality;
    return this;
  }

  /**
   * Output only. System-assigned, unique identifier.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. System-assigned, unique identifier.
   * @param uid uid or {@code null} for none
   */
  public Backend setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Output only. Time at which the backend was last updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Time at which the backend was last updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public Backend setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Output only. The primary URI to communicate with the backend.
   * @return value or {@code null} for none
   */
  public java.lang.String getUri() {
    return uri;
  }

  /**
   * Output only. The primary URI to communicate with the backend.
   * @param uri uri or {@code null} for none
   */
  public Backend setUri(java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  @Override
  public Backend set(String fieldName, Object value) {
    return (Backend) super.set(fieldName, value);
  }

  @Override
  public Backend clone() {
    return (Backend) super.clone();
  }

}
