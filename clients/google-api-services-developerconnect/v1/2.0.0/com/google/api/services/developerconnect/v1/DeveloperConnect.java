/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.developerconnect.v1;

/**
 * Service definition for DeveloperConnect (v1).
 *
 * <p>
 * Connect third-party source code management to Google
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="http://cloud.google.com/developer-connect/docs/overview" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link DeveloperConnectRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class DeveloperConnect extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Developer Connect API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://developerconnect.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://developerconnect.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public DeveloperConnect(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  DeveloperConnect(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code DeveloperConnect developerconnect = new DeveloperConnect(...);}
   *   {@code DeveloperConnect.Projects.List request = developerconnect.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code DeveloperConnect developerconnect = new DeveloperConnect(...);}
     *   {@code DeveloperConnect.Locations.List request = developerconnect.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * Gets information about a location.
       *
       * Create a request for the method "locations.get".
       *
       * This request holds the parameters needed by the developerconnect server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Resource name for the location.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Location> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

        /**
         * Gets information about a location.
         *
         * Create a request for the method "locations.get".
         *
         * This request holds the parameters needed by the the developerconnect server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Resource name for the location.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(DeveloperConnect.this, "GET", REST_PATH, null, com.google.api.services.developerconnect.v1.model.Location.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Resource name for the location. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Resource name for the location.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Resource name for the location. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists information about the supported locations for this service.
       *
       * Create a request for the method "locations.list".
       *
       * This request holds the parameters needed by the developerconnect server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param name The resource that owns the locations collection, if applicable.
       * @return the request
       */
      public List list(java.lang.String name) throws java.io.IOException {
        List result = new List(name);
        initialize(result);
        return result;
      }

      public class List extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.ListLocationsResponse> {

        private static final String REST_PATH = "v1/{+name}/locations";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists information about the supported locations for this service.
         *
         * Create a request for the method "locations.list".
         *
         * This request holds the parameters needed by the the developerconnect server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource that owns the locations collection, if applicable.
         * @since 1.13
         */
        protected List(java.lang.String name) {
          super(DeveloperConnect.this, "GET", REST_PATH, null, com.google.api.services.developerconnect.v1.model.ListLocationsResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** The resource that owns the locations collection, if applicable. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource that owns the locations collection, if applicable.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The resource that owns the locations collection, if applicable. */
        public List setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** A filter to narrow down results to a preferred subset. The filtering language accepts strings like
       `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of results to return. If not set, the service selects a default.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A page token received from the `next_page_token` field in the response. Send that page token to
       receive the subsequent page.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Connections collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code DeveloperConnect developerconnect = new DeveloperConnect(...);}
       *   {@code DeveloperConnect.Connections.List request = developerconnect.connections().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Connections connections() {
        return new Connections();
      }

      /**
       * The "connections" collection of methods.
       */
      public class Connections {

        /**
         * Creates a new Connection in a given project and location.
         *
         * Create a request for the method "connections.create".
         *
         * This request holds the parameters needed by the developerconnect server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. Value for parent.
         * @param content the {@link com.google.api.services.developerconnect.v1.model.Connection}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.developerconnect.v1.model.Connection content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+parent}/connections";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a new Connection in a given project and location.
           *
           * Create a request for the method "connections.create".
           *
           * This request holds the parameters needed by the the developerconnect server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. Value for parent.
           * @param content the {@link com.google.api.services.developerconnect.v1.model.Connection}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.developerconnect.v1.model.Connection content) {
            super(DeveloperConnect.this, "POST", REST_PATH, content, com.google.api.services.developerconnect.v1.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. Value for parent. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. Value for parent.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. Value for parent. */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Required. Id of the requesting object If auto-generating Id server-side, remove this
           * field and connection_id from the method_signature of Create RPC
           */
          @com.google.api.client.util.Key
          private java.lang.String connectionId;

          /** Required. Id of the requesting object If auto-generating Id server-side, remove this field and
         connection_id from the method_signature of Create RPC
           */
          public java.lang.String getConnectionId() {
            return connectionId;
          }

          /**
           * Required. Id of the requesting object If auto-generating Id server-side, remove this
           * field and connection_id from the method_signature of Create RPC
           */
          public Create setConnectionId(java.lang.String connectionId) {
            this.connectionId = connectionId;
            return this;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          @com.google.api.client.util.Key
          private java.lang.String requestId;

          /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
         must retry your request, the server will know to ignore the request if it has already been
         completed. The server will guarantee that for at least 60 minutes since the first request. For
         example, consider a situation where you make an initial request and the request times out. If you
         make the request again with the same request ID, the server can check if original operation with
         the same request ID was received, and if so, will ignore the second request. This prevents clients
         from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
         exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public java.lang.String getRequestId() {
            return requestId;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public Create setRequestId(java.lang.String requestId) {
            this.requestId = requestId;
            return this;
          }

          /** Optional. If set, validate the request, but do not actually post it. */
          @com.google.api.client.util.Key
          private java.lang.Boolean validateOnly;

          /** Optional. If set, validate the request, but do not actually post it.
           */
          public java.lang.Boolean getValidateOnly() {
            return validateOnly;
          }

          /** Optional. If set, validate the request, but do not actually post it. */
          public Create setValidateOnly(java.lang.Boolean validateOnly) {
            this.validateOnly = validateOnly;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a single Connection.
         *
         * Create a request for the method "connections.delete".
         *
         * This request holds the parameters needed by the developerconnect server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. Name of the resource
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+$");

          /**
           * Deletes a single Connection.
           *
           * Create a request for the method "connections.delete".
           *
           * This request holds the parameters needed by the the developerconnect server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. Name of the resource
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(DeveloperConnect.this, "DELETE", REST_PATH, null, com.google.api.services.developerconnect.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. Name of the resource */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. Name of the resource
           */
          public java.lang.String getName() {
            return name;
          }

          /** Required. Name of the resource */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Optional. The current etag of the Connection. If an etag is provided and does not match
           * the current etag of the Connection, deletion will be blocked and an ABORTED error will
           * be returned.
           */
          @com.google.api.client.util.Key
          private java.lang.String etag;

          /** Optional. The current etag of the Connection. If an etag is provided and does not match the current
         etag of the Connection, deletion will be blocked and an ABORTED error will be returned.
           */
          public java.lang.String getEtag() {
            return etag;
          }

          /**
           * Optional. The current etag of the Connection. If an etag is provided and does not match
           * the current etag of the Connection, deletion will be blocked and an ABORTED error will
           * be returned.
           */
          public Delete setEtag(java.lang.String etag) {
            this.etag = etag;
            return this;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * after the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          @com.google.api.client.util.Key
          private java.lang.String requestId;

          /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
         must retry your request, the server will know to ignore the request if it has already been
         completed. The server will guarantee that for at least 60 minutes after the first request. For
         example, consider a situation where you make an initial request and the request times out. If you
         make the request again with the same request ID, the server can check if original operation with
         the same request ID was received, and if so, will ignore the second request. This prevents clients
         from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
         exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public java.lang.String getRequestId() {
            return requestId;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * after the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public Delete setRequestId(java.lang.String requestId) {
            this.requestId = requestId;
            return this;
          }

          /** Optional. If set, validate the request, but do not actually post it. */
          @com.google.api.client.util.Key
          private java.lang.Boolean validateOnly;

          /** Optional. If set, validate the request, but do not actually post it.
           */
          public java.lang.Boolean getValidateOnly() {
            return validateOnly;
          }

          /** Optional. If set, validate the request, but do not actually post it. */
          public Delete setValidateOnly(java.lang.Boolean validateOnly) {
            this.validateOnly = validateOnly;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * FetchGitHubInstallations returns the list of GitHub Installations that are available to be added
         * to a Connection. For github.com, only installations accessible to the authorizer token are
         * returned. For GitHub Enterprise, all installations are returned.
         *
         * Create a request for the method "connections.fetchGitHubInstallations".
         *
         * This request holds the parameters needed by the developerconnect server.  After setting any
         * optional parameters, call the {@link FetchGitHubInstallations#execute()} method to invoke the
         * remote operation.
         *
         * @param connection Required. The resource name of the connection in the format `projects/locations/connections`.
         * @return the request
         */
        public FetchGitHubInstallations fetchGitHubInstallations(java.lang.String connection) throws java.io.IOException {
          FetchGitHubInstallations result = new FetchGitHubInstallations(connection);
          initialize(result);
          return result;
        }

        public class FetchGitHubInstallations extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.FetchGitHubInstallationsResponse> {

          private static final String REST_PATH = "v1/{+connection}:fetchGitHubInstallations";

          private final java.util.regex.Pattern CONNECTION_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+$");

          /**
           * FetchGitHubInstallations returns the list of GitHub Installations that are available to be
           * added to a Connection. For github.com, only installations accessible to the authorizer token
           * are returned. For GitHub Enterprise, all installations are returned.
           *
           * Create a request for the method "connections.fetchGitHubInstallations".
           *
           * This request holds the parameters needed by the the developerconnect server.  After setting any
           * optional parameters, call the {@link FetchGitHubInstallations#execute()} method to invoke the
           * remote operation. <p> {@link FetchGitHubInstallations#initialize(com.google.api.client.googleap
           * is.services.AbstractGoogleClientRequest)} must be called to initialize this instance
           * immediately after invoking the constructor. </p>
           *
           * @param connection Required. The resource name of the connection in the format `projects/locations/connections`.
           * @since 1.13
           */
          protected FetchGitHubInstallations(java.lang.String connection) {
            super(DeveloperConnect.this, "GET", REST_PATH, null, com.google.api.services.developerconnect.v1.model.FetchGitHubInstallationsResponse.class);
            this.connection = com.google.api.client.util.Preconditions.checkNotNull(connection, "Required parameter connection must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(CONNECTION_PATTERN.matcher(connection).matches(),
                  "Parameter connection must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public FetchGitHubInstallations set$Xgafv(java.lang.String $Xgafv) {
            return (FetchGitHubInstallations) super.set$Xgafv($Xgafv);
          }

          @Override
          public FetchGitHubInstallations setAccessToken(java.lang.String accessToken) {
            return (FetchGitHubInstallations) super.setAccessToken(accessToken);
          }

          @Override
          public FetchGitHubInstallations setAlt(java.lang.String alt) {
            return (FetchGitHubInstallations) super.setAlt(alt);
          }

          @Override
          public FetchGitHubInstallations setCallback(java.lang.String callback) {
            return (FetchGitHubInstallations) super.setCallback(callback);
          }

          @Override
          public FetchGitHubInstallations setFields(java.lang.String fields) {
            return (FetchGitHubInstallations) super.setFields(fields);
          }

          @Override
          public FetchGitHubInstallations setKey(java.lang.String key) {
            return (FetchGitHubInstallations) super.setKey(key);
          }

          @Override
          public FetchGitHubInstallations setOauthToken(java.lang.String oauthToken) {
            return (FetchGitHubInstallations) super.setOauthToken(oauthToken);
          }

          @Override
          public FetchGitHubInstallations setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (FetchGitHubInstallations) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public FetchGitHubInstallations setQuotaUser(java.lang.String quotaUser) {
            return (FetchGitHubInstallations) super.setQuotaUser(quotaUser);
          }

          @Override
          public FetchGitHubInstallations setUploadType(java.lang.String uploadType) {
            return (FetchGitHubInstallations) super.setUploadType(uploadType);
          }

          @Override
          public FetchGitHubInstallations setUploadProtocol(java.lang.String uploadProtocol) {
            return (FetchGitHubInstallations) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The resource name of the connection in the format
           * `projects/locations/connections`.
           */
          @com.google.api.client.util.Key
          private java.lang.String connection;

          /** Required. The resource name of the connection in the format `projects/locations/connections`.
           */
          public java.lang.String getConnection() {
            return connection;
          }

          /**
           * Required. The resource name of the connection in the format
           * `projects/locations/connections`.
           */
          public FetchGitHubInstallations setConnection(java.lang.String connection) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(CONNECTION_PATTERN.matcher(connection).matches(),
                  "Parameter connection must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
            }
            this.connection = connection;
            return this;
          }

          @Override
          public FetchGitHubInstallations set(String parameterName, Object value) {
            return (FetchGitHubInstallations) super.set(parameterName, value);
          }
        }
        /**
         * FetchLinkableGitRepositories returns a list of git repositories from an SCM that are available to
         * be added to a Connection.
         *
         * Create a request for the method "connections.fetchLinkableGitRepositories".
         *
         * This request holds the parameters needed by the developerconnect server.  After setting any
         * optional parameters, call the {@link FetchLinkableGitRepositories#execute()} method to invoke the
         * remote operation.
         *
         * @param connection Required. The name of the Connection. Format: `projects/locations/connections`.
         * @return the request
         */
        public FetchLinkableGitRepositories fetchLinkableGitRepositories(java.lang.String connection) throws java.io.IOException {
          FetchLinkableGitRepositories result = new FetchLinkableGitRepositories(connection);
          initialize(result);
          return result;
        }

        public class FetchLinkableGitRepositories extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.FetchLinkableGitRepositoriesResponse> {

          private static final String REST_PATH = "v1/{+connection}:fetchLinkableGitRepositories";

          private final java.util.regex.Pattern CONNECTION_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+$");

          /**
           * FetchLinkableGitRepositories returns a list of git repositories from an SCM that are available
           * to be added to a Connection.
           *
           * Create a request for the method "connections.fetchLinkableGitRepositories".
           *
           * This request holds the parameters needed by the the developerconnect server.  After setting any
           * optional parameters, call the {@link FetchLinkableGitRepositories#execute()} method to invoke
           * the remote operation. <p> {@link FetchLinkableGitRepositories#initialize(com.google.api.client.
           * googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
           * immediately after invoking the constructor. </p>
           *
           * @param connection Required. The name of the Connection. Format: `projects/locations/connections`.
           * @since 1.13
           */
          protected FetchLinkableGitRepositories(java.lang.String connection) {
            super(DeveloperConnect.this, "GET", REST_PATH, null, com.google.api.services.developerconnect.v1.model.FetchLinkableGitRepositoriesResponse.class);
            this.connection = com.google.api.client.util.Preconditions.checkNotNull(connection, "Required parameter connection must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(CONNECTION_PATTERN.matcher(connection).matches(),
                  "Parameter connection must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public FetchLinkableGitRepositories set$Xgafv(java.lang.String $Xgafv) {
            return (FetchLinkableGitRepositories) super.set$Xgafv($Xgafv);
          }

          @Override
          public FetchLinkableGitRepositories setAccessToken(java.lang.String accessToken) {
            return (FetchLinkableGitRepositories) super.setAccessToken(accessToken);
          }

          @Override
          public FetchLinkableGitRepositories setAlt(java.lang.String alt) {
            return (FetchLinkableGitRepositories) super.setAlt(alt);
          }

          @Override
          public FetchLinkableGitRepositories setCallback(java.lang.String callback) {
            return (FetchLinkableGitRepositories) super.setCallback(callback);
          }

          @Override
          public FetchLinkableGitRepositories setFields(java.lang.String fields) {
            return (FetchLinkableGitRepositories) super.setFields(fields);
          }

          @Override
          public FetchLinkableGitRepositories setKey(java.lang.String key) {
            return (FetchLinkableGitRepositories) super.setKey(key);
          }

          @Override
          public FetchLinkableGitRepositories setOauthToken(java.lang.String oauthToken) {
            return (FetchLinkableGitRepositories) super.setOauthToken(oauthToken);
          }

          @Override
          public FetchLinkableGitRepositories setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (FetchLinkableGitRepositories) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public FetchLinkableGitRepositories setQuotaUser(java.lang.String quotaUser) {
            return (FetchLinkableGitRepositories) super.setQuotaUser(quotaUser);
          }

          @Override
          public FetchLinkableGitRepositories setUploadType(java.lang.String uploadType) {
            return (FetchLinkableGitRepositories) super.setUploadType(uploadType);
          }

          @Override
          public FetchLinkableGitRepositories setUploadProtocol(java.lang.String uploadProtocol) {
            return (FetchLinkableGitRepositories) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The name of the Connection. Format: `projects/locations/connections`. */
          @com.google.api.client.util.Key
          private java.lang.String connection;

          /** Required. The name of the Connection. Format: `projects/locations/connections`.
           */
          public java.lang.String getConnection() {
            return connection;
          }

          /** Required. The name of the Connection. Format: `projects/locations/connections`. */
          public FetchLinkableGitRepositories setConnection(java.lang.String connection) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(CONNECTION_PATTERN.matcher(connection).matches(),
                  "Parameter connection must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
            }
            this.connection = connection;
            return this;
          }

          /** Optional. Number of results to return in the list. Defaults to 20. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. Number of results to return in the list. Defaults to 20.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** Optional. Number of results to return in the list. Defaults to 20. */
          public FetchLinkableGitRepositories setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** Optional. Page start. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. Page start.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** Optional. Page start. */
          public FetchLinkableGitRepositories setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public FetchLinkableGitRepositories set(String parameterName, Object value) {
            return (FetchLinkableGitRepositories) super.set(parameterName, value);
          }
        }
        /**
         * Gets details of a single Connection.
         *
         * Create a request for the method "connections.get".
         *
         * This request holds the parameters needed by the developerconnect server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. Name of the resource
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Connection> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+$");

          /**
           * Gets details of a single Connection.
           *
           * Create a request for the method "connections.get".
           *
           * This request holds the parameters needed by the the developerconnect server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. Name of the resource
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(DeveloperConnect.this, "GET", REST_PATH, null, com.google.api.services.developerconnect.v1.model.Connection.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. Name of the resource */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. Name of the resource
           */
          public java.lang.String getName() {
            return name;
          }

          /** Required. Name of the resource */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists Connections in a given project and location.
         *
         * Create a request for the method "connections.list".
         *
         * This request holds the parameters needed by the developerconnect server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. Parent value for ListConnectionsRequest
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.ListConnectionsResponse> {

          private static final String REST_PATH = "v1/{+parent}/connections";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists Connections in a given project and location.
           *
           * Create a request for the method "connections.list".
           *
           * This request holds the parameters needed by the the developerconnect server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. Parent value for ListConnectionsRequest
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(DeveloperConnect.this, "GET", REST_PATH, null, com.google.api.services.developerconnect.v1.model.ListConnectionsResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. Parent value for ListConnectionsRequest */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. Parent value for ListConnectionsRequest
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. Parent value for ListConnectionsRequest */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Optional. Filtering results */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Optional. Filtering results
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** Optional. Filtering results */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** Optional. Hint for how to order the results */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** Optional. Hint for how to order the results
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /** Optional. Hint for how to order the results */
          public List setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /**
           * Optional. Requested page size. Server may return fewer items than requested. If
           * unspecified, server will pick an appropriate default.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. Requested page size. Server may return fewer items than requested. If unspecified, server
         will pick an appropriate default.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * Optional. Requested page size. Server may return fewer items than requested. If
           * unspecified, server will pick an appropriate default.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** Optional. A token identifying a page of results the server should return. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. A token identifying a page of results the server should return.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** Optional. A token identifying a page of results the server should return. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates the parameters of a single Connection.
         *
         * Create a request for the method "connections.patch".
         *
         * This request holds the parameters needed by the developerconnect server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Identifier. The resource name of the connection, in the format
         *        `projects/{project}/locations/{location}/connections/{connection_id}`.
         * @param content the {@link com.google.api.services.developerconnect.v1.model.Connection}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.developerconnect.v1.model.Connection content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+$");

          /**
           * Updates the parameters of a single Connection.
           *
           * Create a request for the method "connections.patch".
           *
           * This request holds the parameters needed by the the developerconnect server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           * <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Identifier. The resource name of the connection, in the format
         *        `projects/{project}/locations/{location}/connections/{connection_id}`.
           * @param content the {@link com.google.api.services.developerconnect.v1.model.Connection}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.developerconnect.v1.model.Connection content) {
            super(DeveloperConnect.this, "PATCH", REST_PATH, content, com.google.api.services.developerconnect.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier. The resource name of the connection, in the format
           * `projects/{project}/locations/{location}/connections/{connection_id}`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Identifier. The resource name of the connection, in the format
         `projects/{project}/locations/{location}/connections/{connection_id}`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Identifier. The resource name of the connection, in the format
           * `projects/{project}/locations/{location}/connections/{connection_id}`.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Optional. If set to true, and the connection is not found a new connection will be
           * created. In this situation `update_mask` is ignored. The creation will succeed only if
           * the input connection has all the necessary information (e.g a github_config with both
           * user_oauth_token and installation_id properties).
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean allowMissing;

          /** Optional. If set to true, and the connection is not found a new connection will be created. In this
         situation `update_mask` is ignored. The creation will succeed only if the input connection has all
         the necessary information (e.g a github_config with both user_oauth_token and installation_id
         properties).
           */
          public java.lang.Boolean getAllowMissing() {
            return allowMissing;
          }

          /**
           * Optional. If set to true, and the connection is not found a new connection will be
           * created. In this situation `update_mask` is ignored. The creation will succeed only if
           * the input connection has all the necessary information (e.g a github_config with both
           * user_oauth_token and installation_id properties).
           */
          public Patch setAllowMissing(java.lang.Boolean allowMissing) {
            this.allowMissing = allowMissing;
            return this;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          @com.google.api.client.util.Key
          private java.lang.String requestId;

          /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
         must retry your request, the server will know to ignore the request if it has already been
         completed. The server will guarantee that for at least 60 minutes since the first request. For
         example, consider a situation where you make an initial request and the request times out. If you
         make the request again with the same request ID, the server can check if original operation with
         the same request ID was received, and if so, will ignore the second request. This prevents clients
         from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
         exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public java.lang.String getRequestId() {
            return requestId;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public Patch setRequestId(java.lang.String requestId) {
            this.requestId = requestId;
            return this;
          }

          /**
           * Required. Field mask is used to specify the fields to be overwritten in the Connection
           * resource by the update. The fields specified in the update_mask are relative to the
           * resource, not the full request. A field will be overwritten if it is in the mask. If
           * the user does not provide a mask then all fields will be overwritten.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Required. Field mask is used to specify the fields to be overwritten in the Connection resource by
         the update. The fields specified in the update_mask are relative to the resource, not the full
         request. A field will be overwritten if it is in the mask. If the user does not provide a mask then
         all fields will be overwritten.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Required. Field mask is used to specify the fields to be overwritten in the Connection
           * resource by the update. The fields specified in the update_mask are relative to the
           * resource, not the full request. A field will be overwritten if it is in the mask. If
           * the user does not provide a mask then all fields will be overwritten.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          /** Optional. If set, validate the request, but do not actually post it. */
          @com.google.api.client.util.Key
          private java.lang.Boolean validateOnly;

          /** Optional. If set, validate the request, but do not actually post it.
           */
          public java.lang.Boolean getValidateOnly() {
            return validateOnly;
          }

          /** Optional. If set, validate the request, but do not actually post it. */
          public Patch setValidateOnly(java.lang.Boolean validateOnly) {
            this.validateOnly = validateOnly;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }
        /**
         * ProcessGitHubEnterpriseWebhook is called by the external GitHub Enterprise instances for
         * notifying events.
         *
         * Create a request for the method "connections.processGitHubEnterpriseWebhook".
         *
         * This request holds the parameters needed by the developerconnect server.  After setting any
         * optional parameters, call the {@link ProcessGitHubEnterpriseWebhook#execute()} method to invoke
         * the remote operation.
         *
         * @param parent Required. Project and location where the webhook will be received. Format: `projects/locations`.
         * @param content the {@link com.google.api.services.developerconnect.v1.model.ProcessGitHubEnterpriseWebhookRequest}
         * @return the request
         */
        public ProcessGitHubEnterpriseWebhook processGitHubEnterpriseWebhook(java.lang.String parent, com.google.api.services.developerconnect.v1.model.ProcessGitHubEnterpriseWebhookRequest content) throws java.io.IOException {
          ProcessGitHubEnterpriseWebhook result = new ProcessGitHubEnterpriseWebhook(parent, content);
          initialize(result);
          return result;
        }

        public class ProcessGitHubEnterpriseWebhook extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+parent}/connections:processGitHubEnterpriseWebhook";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * ProcessGitHubEnterpriseWebhook is called by the external GitHub Enterprise instances for
           * notifying events.
           *
           * Create a request for the method "connections.processGitHubEnterpriseWebhook".
           *
           * This request holds the parameters needed by the the developerconnect server.  After setting any
           * optional parameters, call the {@link ProcessGitHubEnterpriseWebhook#execute()} method to invoke
           * the remote operation. <p> {@link ProcessGitHubEnterpriseWebhook#initialize(com.google.api.clien
           * t.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
           * immediately after invoking the constructor. </p>
           *
           * @param parent Required. Project and location where the webhook will be received. Format: `projects/locations`.
           * @param content the {@link com.google.api.services.developerconnect.v1.model.ProcessGitHubEnterpriseWebhookRequest}
           * @since 1.13
           */
          protected ProcessGitHubEnterpriseWebhook(java.lang.String parent, com.google.api.services.developerconnect.v1.model.ProcessGitHubEnterpriseWebhookRequest content) {
            super(DeveloperConnect.this, "POST", REST_PATH, content, com.google.api.services.developerconnect.v1.model.Empty.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public ProcessGitHubEnterpriseWebhook set$Xgafv(java.lang.String $Xgafv) {
            return (ProcessGitHubEnterpriseWebhook) super.set$Xgafv($Xgafv);
          }

          @Override
          public ProcessGitHubEnterpriseWebhook setAccessToken(java.lang.String accessToken) {
            return (ProcessGitHubEnterpriseWebhook) super.setAccessToken(accessToken);
          }

          @Override
          public ProcessGitHubEnterpriseWebhook setAlt(java.lang.String alt) {
            return (ProcessGitHubEnterpriseWebhook) super.setAlt(alt);
          }

          @Override
          public ProcessGitHubEnterpriseWebhook setCallback(java.lang.String callback) {
            return (ProcessGitHubEnterpriseWebhook) super.setCallback(callback);
          }

          @Override
          public ProcessGitHubEnterpriseWebhook setFields(java.lang.String fields) {
            return (ProcessGitHubEnterpriseWebhook) super.setFields(fields);
          }

          @Override
          public ProcessGitHubEnterpriseWebhook setKey(java.lang.String key) {
            return (ProcessGitHubEnterpriseWebhook) super.setKey(key);
          }

          @Override
          public ProcessGitHubEnterpriseWebhook setOauthToken(java.lang.String oauthToken) {
            return (ProcessGitHubEnterpriseWebhook) super.setOauthToken(oauthToken);
          }

          @Override
          public ProcessGitHubEnterpriseWebhook setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (ProcessGitHubEnterpriseWebhook) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public ProcessGitHubEnterpriseWebhook setQuotaUser(java.lang.String quotaUser) {
            return (ProcessGitHubEnterpriseWebhook) super.setQuotaUser(quotaUser);
          }

          @Override
          public ProcessGitHubEnterpriseWebhook setUploadType(java.lang.String uploadType) {
            return (ProcessGitHubEnterpriseWebhook) super.setUploadType(uploadType);
          }

          @Override
          public ProcessGitHubEnterpriseWebhook setUploadProtocol(java.lang.String uploadProtocol) {
            return (ProcessGitHubEnterpriseWebhook) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Project and location where the webhook will be received. Format:
           * `projects/locations`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. Project and location where the webhook will be received. Format: `projects/locations`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. Project and location where the webhook will be received. Format:
           * `projects/locations`.
           */
          public ProcessGitHubEnterpriseWebhook setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public ProcessGitHubEnterpriseWebhook set(String parameterName, Object value) {
            return (ProcessGitHubEnterpriseWebhook) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the GitRepositoryLinks collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code DeveloperConnect developerconnect = new DeveloperConnect(...);}
         *   {@code DeveloperConnect.GitRepositoryLinks.List request = developerconnect.gitRepositoryLinks().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public GitRepositoryLinks gitRepositoryLinks() {
          return new GitRepositoryLinks();
        }

        /**
         * The "gitRepositoryLinks" collection of methods.
         */
        public class GitRepositoryLinks {

          /**
           * Creates a GitRepositoryLink. Upon linking a Git Repository, Developer Connect will configure the
           * Git Repository to send webhook events to Developer Connect. Connections that use Firebase GitHub
           * Application will have events forwarded to the Firebase service. All other Connections will have
           * events forwarded to Cloud Build.
           *
           * Create a request for the method "gitRepositoryLinks.create".
           *
           * This request holds the parameters needed by the developerconnect server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. Value for parent.
           * @param content the {@link com.google.api.services.developerconnect.v1.model.GitRepositoryLink}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.developerconnect.v1.model.GitRepositoryLink content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+parent}/gitRepositoryLinks";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+$");

            /**
             * Creates a GitRepositoryLink. Upon linking a Git Repository, Developer Connect will configure
             * the Git Repository to send webhook events to Developer Connect. Connections that use Firebase
             * GitHub Application will have events forwarded to the Firebase service. All other Connections
             * will have events forwarded to Cloud Build.
             *
             * Create a request for the method "gitRepositoryLinks.create".
             *
             * This request holds the parameters needed by the the developerconnect server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             * <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. Value for parent.
             * @param content the {@link com.google.api.services.developerconnect.v1.model.GitRepositoryLink}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.developerconnect.v1.model.GitRepositoryLink content) {
              super(DeveloperConnect.this, "POST", REST_PATH, content, com.google.api.services.developerconnect.v1.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. Value for parent. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. Value for parent.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. Value for parent. */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Required. The ID to use for the repository, which will become the final component of
             * the repository's resource name. This ID should be unique in the connection. Allows
             * alphanumeric characters and any of -._~%!$&'()*+,;=@.
             */
            @com.google.api.client.util.Key
            private java.lang.String gitRepositoryLinkId;

            /** Required. The ID to use for the repository, which will become the final component of the
           repository's resource name. This ID should be unique in the connection. Allows alphanumeric
           characters and any of -._~%!$&'()*+,;=@.
             */
            public java.lang.String getGitRepositoryLinkId() {
              return gitRepositoryLinkId;
            }

            /**
             * Required. The ID to use for the repository, which will become the final component of
             * the repository's resource name. This ID should be unique in the connection. Allows
             * alphanumeric characters and any of -._~%!$&'()*+,;=@.
             */
            public Create setGitRepositoryLinkId(java.lang.String gitRepositoryLinkId) {
              this.gitRepositoryLinkId = gitRepositoryLinkId;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes since the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Create setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /** Optional. If set, validate the request, but do not actually post it. */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. If set, validate the request, but do not actually post it.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /** Optional. If set, validate the request, but do not actually post it. */
            public Create setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a single GitRepositoryLink.
           *
           * Create a request for the method "gitRepositoryLinks.delete".
           *
           * This request holds the parameters needed by the developerconnect server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the resource
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");

            /**
             * Deletes a single GitRepositoryLink.
             *
             * Create a request for the method "gitRepositoryLinks.delete".
             *
             * This request holds the parameters needed by the the developerconnect server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the resource
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(DeveloperConnect.this, "DELETE", REST_PATH, null, com.google.api.services.developerconnect.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. Name of the resource */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the resource
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. Name of the resource */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. This checksum is computed by the server based on the value of other fields,
             * and may be sent on update and delete requests to ensure the client has an up-to-date
             * value before proceeding.
             */
            @com.google.api.client.util.Key
            private java.lang.String etag;

            /** Optional. This checksum is computed by the server based on the value of other fields, and may be
           sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
             */
            public java.lang.String getEtag() {
              return etag;
            }

            /**
             * Optional. This checksum is computed by the server based on the value of other fields,
             * and may be sent on update and delete requests to ensure the client has an up-to-date
             * value before proceeding.
             */
            public Delete setEtag(java.lang.String etag) {
              this.etag = etag;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * after the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes after the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * after the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Delete setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /** Optional. If set, validate the request, but do not actually post it. */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. If set, validate the request, but do not actually post it.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /** Optional. If set, validate the request, but do not actually post it. */
            public Delete setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Fetch the list of branches or tags for a given repository.
           *
           * Create a request for the method "gitRepositoryLinks.fetchGitRefs".
           *
           * This request holds the parameters needed by the developerconnect server.  After setting any
           * optional parameters, call the {@link FetchGitRefs#execute()} method to invoke the remote
           * operation.
           *
           * @param gitRepositoryLink Required. The resource name of GitRepositoryLink in the format
           *        `projects/locations/connections/gitRepositoryLinks`.
           * @return the request
           */
          public FetchGitRefs fetchGitRefs(java.lang.String gitRepositoryLink) throws java.io.IOException {
            FetchGitRefs result = new FetchGitRefs(gitRepositoryLink);
            initialize(result);
            return result;
          }

          public class FetchGitRefs extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.FetchGitRefsResponse> {

            private static final String REST_PATH = "v1/{+gitRepositoryLink}:fetchGitRefs";

            private final java.util.regex.Pattern GIT_REPOSITORY_LINK_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");

            /**
             * Fetch the list of branches or tags for a given repository.
             *
             * Create a request for the method "gitRepositoryLinks.fetchGitRefs".
             *
             * This request holds the parameters needed by the the developerconnect server.  After setting any
             * optional parameters, call the {@link FetchGitRefs#execute()} method to invoke the remote
             * operation. <p> {@link
             * FetchGitRefs#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param gitRepositoryLink Required. The resource name of GitRepositoryLink in the format
           *        `projects/locations/connections/gitRepositoryLinks`.
             * @since 1.13
             */
            protected FetchGitRefs(java.lang.String gitRepositoryLink) {
              super(DeveloperConnect.this, "GET", REST_PATH, null, com.google.api.services.developerconnect.v1.model.FetchGitRefsResponse.class);
              this.gitRepositoryLink = com.google.api.client.util.Preconditions.checkNotNull(gitRepositoryLink, "Required parameter gitRepositoryLink must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(GIT_REPOSITORY_LINK_PATTERN.matcher(gitRepositoryLink).matches(),
                    "Parameter gitRepositoryLink must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public FetchGitRefs set$Xgafv(java.lang.String $Xgafv) {
              return (FetchGitRefs) super.set$Xgafv($Xgafv);
            }

            @Override
            public FetchGitRefs setAccessToken(java.lang.String accessToken) {
              return (FetchGitRefs) super.setAccessToken(accessToken);
            }

            @Override
            public FetchGitRefs setAlt(java.lang.String alt) {
              return (FetchGitRefs) super.setAlt(alt);
            }

            @Override
            public FetchGitRefs setCallback(java.lang.String callback) {
              return (FetchGitRefs) super.setCallback(callback);
            }

            @Override
            public FetchGitRefs setFields(java.lang.String fields) {
              return (FetchGitRefs) super.setFields(fields);
            }

            @Override
            public FetchGitRefs setKey(java.lang.String key) {
              return (FetchGitRefs) super.setKey(key);
            }

            @Override
            public FetchGitRefs setOauthToken(java.lang.String oauthToken) {
              return (FetchGitRefs) super.setOauthToken(oauthToken);
            }

            @Override
            public FetchGitRefs setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (FetchGitRefs) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public FetchGitRefs setQuotaUser(java.lang.String quotaUser) {
              return (FetchGitRefs) super.setQuotaUser(quotaUser);
            }

            @Override
            public FetchGitRefs setUploadType(java.lang.String uploadType) {
              return (FetchGitRefs) super.setUploadType(uploadType);
            }

            @Override
            public FetchGitRefs setUploadProtocol(java.lang.String uploadProtocol) {
              return (FetchGitRefs) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The resource name of GitRepositoryLink in the format
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            @com.google.api.client.util.Key
            private java.lang.String gitRepositoryLink;

            /** Required. The resource name of GitRepositoryLink in the format
           `projects/locations/connections/gitRepositoryLinks`.
             */
            public java.lang.String getGitRepositoryLink() {
              return gitRepositoryLink;
            }

            /**
             * Required. The resource name of GitRepositoryLink in the format
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            public FetchGitRefs setGitRepositoryLink(java.lang.String gitRepositoryLink) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(GIT_REPOSITORY_LINK_PATTERN.matcher(gitRepositoryLink).matches(),
                    "Parameter gitRepositoryLink must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
              this.gitRepositoryLink = gitRepositoryLink;
              return this;
            }

            /** Optional. Number of results to return in the list. Default to 20. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. Number of results to return in the list. Default to 20.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** Optional. Number of results to return in the list. Default to 20. */
            public FetchGitRefs setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** Optional. Page start. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. Page start.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** Optional. Page start. */
            public FetchGitRefs setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            /** Required. Type of refs to fetch. */
            @com.google.api.client.util.Key
            private java.lang.String refType;

            /** Required. Type of refs to fetch.
             */
            public java.lang.String getRefType() {
              return refType;
            }

            /** Required. Type of refs to fetch. */
            public FetchGitRefs setRefType(java.lang.String refType) {
              this.refType = refType;
              return this;
            }

            @Override
            public FetchGitRefs set(String parameterName, Object value) {
              return (FetchGitRefs) super.set(parameterName, value);
            }
          }
          /**
           * Fetches read token of a given gitRepositoryLink.
           *
           * Create a request for the method "gitRepositoryLinks.fetchReadToken".
           *
           * This request holds the parameters needed by the developerconnect server.  After setting any
           * optional parameters, call the {@link FetchReadToken#execute()} method to invoke the remote
           * operation.
           *
           * @param gitRepositoryLink Required. The resource name of the gitRepositoryLink in the format
           *        `projects/locations/connections/gitRepositoryLinks`.
           * @param content the {@link com.google.api.services.developerconnect.v1.model.FetchReadTokenRequest}
           * @return the request
           */
          public FetchReadToken fetchReadToken(java.lang.String gitRepositoryLink, com.google.api.services.developerconnect.v1.model.FetchReadTokenRequest content) throws java.io.IOException {
            FetchReadToken result = new FetchReadToken(gitRepositoryLink, content);
            initialize(result);
            return result;
          }

          public class FetchReadToken extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.FetchReadTokenResponse> {

            private static final String REST_PATH = "v1/{+gitRepositoryLink}:fetchReadToken";

            private final java.util.regex.Pattern GIT_REPOSITORY_LINK_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");

            /**
             * Fetches read token of a given gitRepositoryLink.
             *
             * Create a request for the method "gitRepositoryLinks.fetchReadToken".
             *
             * This request holds the parameters needed by the the developerconnect server.  After setting any
             * optional parameters, call the {@link FetchReadToken#execute()} method to invoke the remote
             * operation. <p> {@link FetchReadToken#initialize(com.google.api.client.googleapis.services.Abstr
             * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
             * the constructor. </p>
             *
             * @param gitRepositoryLink Required. The resource name of the gitRepositoryLink in the format
           *        `projects/locations/connections/gitRepositoryLinks`.
             * @param content the {@link com.google.api.services.developerconnect.v1.model.FetchReadTokenRequest}
             * @since 1.13
             */
            protected FetchReadToken(java.lang.String gitRepositoryLink, com.google.api.services.developerconnect.v1.model.FetchReadTokenRequest content) {
              super(DeveloperConnect.this, "POST", REST_PATH, content, com.google.api.services.developerconnect.v1.model.FetchReadTokenResponse.class);
              this.gitRepositoryLink = com.google.api.client.util.Preconditions.checkNotNull(gitRepositoryLink, "Required parameter gitRepositoryLink must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(GIT_REPOSITORY_LINK_PATTERN.matcher(gitRepositoryLink).matches(),
                    "Parameter gitRepositoryLink must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
            }

            @Override
            public FetchReadToken set$Xgafv(java.lang.String $Xgafv) {
              return (FetchReadToken) super.set$Xgafv($Xgafv);
            }

            @Override
            public FetchReadToken setAccessToken(java.lang.String accessToken) {
              return (FetchReadToken) super.setAccessToken(accessToken);
            }

            @Override
            public FetchReadToken setAlt(java.lang.String alt) {
              return (FetchReadToken) super.setAlt(alt);
            }

            @Override
            public FetchReadToken setCallback(java.lang.String callback) {
              return (FetchReadToken) super.setCallback(callback);
            }

            @Override
            public FetchReadToken setFields(java.lang.String fields) {
              return (FetchReadToken) super.setFields(fields);
            }

            @Override
            public FetchReadToken setKey(java.lang.String key) {
              return (FetchReadToken) super.setKey(key);
            }

            @Override
            public FetchReadToken setOauthToken(java.lang.String oauthToken) {
              return (FetchReadToken) super.setOauthToken(oauthToken);
            }

            @Override
            public FetchReadToken setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (FetchReadToken) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public FetchReadToken setQuotaUser(java.lang.String quotaUser) {
              return (FetchReadToken) super.setQuotaUser(quotaUser);
            }

            @Override
            public FetchReadToken setUploadType(java.lang.String uploadType) {
              return (FetchReadToken) super.setUploadType(uploadType);
            }

            @Override
            public FetchReadToken setUploadProtocol(java.lang.String uploadProtocol) {
              return (FetchReadToken) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The resource name of the gitRepositoryLink in the format
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            @com.google.api.client.util.Key
            private java.lang.String gitRepositoryLink;

            /** Required. The resource name of the gitRepositoryLink in the format
           `projects/locations/connections/gitRepositoryLinks`.
             */
            public java.lang.String getGitRepositoryLink() {
              return gitRepositoryLink;
            }

            /**
             * Required. The resource name of the gitRepositoryLink in the format
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            public FetchReadToken setGitRepositoryLink(java.lang.String gitRepositoryLink) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(GIT_REPOSITORY_LINK_PATTERN.matcher(gitRepositoryLink).matches(),
                    "Parameter gitRepositoryLink must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
              this.gitRepositoryLink = gitRepositoryLink;
              return this;
            }

            @Override
            public FetchReadToken set(String parameterName, Object value) {
              return (FetchReadToken) super.set(parameterName, value);
            }
          }
          /**
           * Fetches read/write token of a given gitRepositoryLink.
           *
           * Create a request for the method "gitRepositoryLinks.fetchReadWriteToken".
           *
           * This request holds the parameters needed by the developerconnect server.  After setting any
           * optional parameters, call the {@link FetchReadWriteToken#execute()} method to invoke the remote
           * operation.
           *
           * @param gitRepositoryLink Required. The resource name of the gitRepositoryLink in the format
           *        `projects/locations/connections/gitRepositoryLinks`.
           * @param content the {@link com.google.api.services.developerconnect.v1.model.FetchReadWriteTokenRequest}
           * @return the request
           */
          public FetchReadWriteToken fetchReadWriteToken(java.lang.String gitRepositoryLink, com.google.api.services.developerconnect.v1.model.FetchReadWriteTokenRequest content) throws java.io.IOException {
            FetchReadWriteToken result = new FetchReadWriteToken(gitRepositoryLink, content);
            initialize(result);
            return result;
          }

          public class FetchReadWriteToken extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.FetchReadWriteTokenResponse> {

            private static final String REST_PATH = "v1/{+gitRepositoryLink}:fetchReadWriteToken";

            private final java.util.regex.Pattern GIT_REPOSITORY_LINK_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");

            /**
             * Fetches read/write token of a given gitRepositoryLink.
             *
             * Create a request for the method "gitRepositoryLinks.fetchReadWriteToken".
             *
             * This request holds the parameters needed by the the developerconnect server.  After setting any
             * optional parameters, call the {@link FetchReadWriteToken#execute()} method to invoke the remote
             * operation. <p> {@link FetchReadWriteToken#initialize(com.google.api.client.googleapis.services.
             * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
             * invoking the constructor. </p>
             *
             * @param gitRepositoryLink Required. The resource name of the gitRepositoryLink in the format
           *        `projects/locations/connections/gitRepositoryLinks`.
             * @param content the {@link com.google.api.services.developerconnect.v1.model.FetchReadWriteTokenRequest}
             * @since 1.13
             */
            protected FetchReadWriteToken(java.lang.String gitRepositoryLink, com.google.api.services.developerconnect.v1.model.FetchReadWriteTokenRequest content) {
              super(DeveloperConnect.this, "POST", REST_PATH, content, com.google.api.services.developerconnect.v1.model.FetchReadWriteTokenResponse.class);
              this.gitRepositoryLink = com.google.api.client.util.Preconditions.checkNotNull(gitRepositoryLink, "Required parameter gitRepositoryLink must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(GIT_REPOSITORY_LINK_PATTERN.matcher(gitRepositoryLink).matches(),
                    "Parameter gitRepositoryLink must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
            }

            @Override
            public FetchReadWriteToken set$Xgafv(java.lang.String $Xgafv) {
              return (FetchReadWriteToken) super.set$Xgafv($Xgafv);
            }

            @Override
            public FetchReadWriteToken setAccessToken(java.lang.String accessToken) {
              return (FetchReadWriteToken) super.setAccessToken(accessToken);
            }

            @Override
            public FetchReadWriteToken setAlt(java.lang.String alt) {
              return (FetchReadWriteToken) super.setAlt(alt);
            }

            @Override
            public FetchReadWriteToken setCallback(java.lang.String callback) {
              return (FetchReadWriteToken) super.setCallback(callback);
            }

            @Override
            public FetchReadWriteToken setFields(java.lang.String fields) {
              return (FetchReadWriteToken) super.setFields(fields);
            }

            @Override
            public FetchReadWriteToken setKey(java.lang.String key) {
              return (FetchReadWriteToken) super.setKey(key);
            }

            @Override
            public FetchReadWriteToken setOauthToken(java.lang.String oauthToken) {
              return (FetchReadWriteToken) super.setOauthToken(oauthToken);
            }

            @Override
            public FetchReadWriteToken setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (FetchReadWriteToken) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public FetchReadWriteToken setQuotaUser(java.lang.String quotaUser) {
              return (FetchReadWriteToken) super.setQuotaUser(quotaUser);
            }

            @Override
            public FetchReadWriteToken setUploadType(java.lang.String uploadType) {
              return (FetchReadWriteToken) super.setUploadType(uploadType);
            }

            @Override
            public FetchReadWriteToken setUploadProtocol(java.lang.String uploadProtocol) {
              return (FetchReadWriteToken) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The resource name of the gitRepositoryLink in the format
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            @com.google.api.client.util.Key
            private java.lang.String gitRepositoryLink;

            /** Required. The resource name of the gitRepositoryLink in the format
           `projects/locations/connections/gitRepositoryLinks`.
             */
            public java.lang.String getGitRepositoryLink() {
              return gitRepositoryLink;
            }

            /**
             * Required. The resource name of the gitRepositoryLink in the format
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            public FetchReadWriteToken setGitRepositoryLink(java.lang.String gitRepositoryLink) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(GIT_REPOSITORY_LINK_PATTERN.matcher(gitRepositoryLink).matches(),
                    "Parameter gitRepositoryLink must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
              this.gitRepositoryLink = gitRepositoryLink;
              return this;
            }

            @Override
            public FetchReadWriteToken set(String parameterName, Object value) {
              return (FetchReadWriteToken) super.set(parameterName, value);
            }
          }
          /**
           * Gets details of a single GitRepositoryLink.
           *
           * Create a request for the method "gitRepositoryLinks.get".
           *
           * This request holds the parameters needed by the developerconnect server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. Name of the resource
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.GitRepositoryLink> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");

            /**
             * Gets details of a single GitRepositoryLink.
             *
             * Create a request for the method "gitRepositoryLinks.get".
             *
             * This request holds the parameters needed by the the developerconnect server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Name of the resource
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(DeveloperConnect.this, "GET", REST_PATH, null, com.google.api.services.developerconnect.v1.model.GitRepositoryLink.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. Name of the resource */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Name of the resource
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. Name of the resource */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists GitRepositoryLinks in a given project, location, and connection.
           *
           * Create a request for the method "gitRepositoryLinks.list".
           *
           * This request holds the parameters needed by the developerconnect server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. Parent value for ListGitRepositoryLinksRequest
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.ListGitRepositoryLinksResponse> {

            private static final String REST_PATH = "v1/{+parent}/gitRepositoryLinks";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+$");

            /**
             * Lists GitRepositoryLinks in a given project, location, and connection.
             *
             * Create a request for the method "gitRepositoryLinks.list".
             *
             * This request holds the parameters needed by the the developerconnect server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. Parent value for ListGitRepositoryLinksRequest
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(DeveloperConnect.this, "GET", REST_PATH, null, com.google.api.services.developerconnect.v1.model.ListGitRepositoryLinksResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. Parent value for ListGitRepositoryLinksRequest */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. Parent value for ListGitRepositoryLinksRequest
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. Parent value for ListGitRepositoryLinksRequest */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Optional. Filtering results */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** Optional. Filtering results
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /** Optional. Filtering results */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** Optional. Hint for how to order the results */
            @com.google.api.client.util.Key
            private java.lang.String orderBy;

            /** Optional. Hint for how to order the results
             */
            public java.lang.String getOrderBy() {
              return orderBy;
            }

            /** Optional. Hint for how to order the results */
            public List setOrderBy(java.lang.String orderBy) {
              this.orderBy = orderBy;
              return this;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. Requested page size. Server may return fewer items than requested. If unspecified, server
           will pick an appropriate default.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** Optional. A token identifying a page of results the server should return. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. A token identifying a page of results the server should return.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** Optional. A token identifying a page of results the server should return. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * ProcessBitbucketCloudWebhook is called by the external Bitbucket Cloud instances for notifying
           * events.
           *
           * Create a request for the method "gitRepositoryLinks.processBitbucketCloudWebhook".
           *
           * This request holds the parameters needed by the developerconnect server.  After setting any
           * optional parameters, call the {@link ProcessBitbucketCloudWebhook#execute()} method to invoke the
           * remote operation.
           *
           * @param name Required. The GitRepositoryLink where the webhook will be received. Format:
           *        `projects/locations/connections/gitRepositoryLinks`.
           * @param content the {@link com.google.api.services.developerconnect.v1.model.ProcessBitbucketCloudWebhookRequest}
           * @return the request
           */
          public ProcessBitbucketCloudWebhook processBitbucketCloudWebhook(java.lang.String name, com.google.api.services.developerconnect.v1.model.ProcessBitbucketCloudWebhookRequest content) throws java.io.IOException {
            ProcessBitbucketCloudWebhook result = new ProcessBitbucketCloudWebhook(name, content);
            initialize(result);
            return result;
          }

          public class ProcessBitbucketCloudWebhook extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Empty> {

            private static final String REST_PATH = "v1/{+name}:processBitbucketCloudWebhook";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");

            /**
             * ProcessBitbucketCloudWebhook is called by the external Bitbucket Cloud instances for notifying
             * events.
             *
             * Create a request for the method "gitRepositoryLinks.processBitbucketCloudWebhook".
             *
             * This request holds the parameters needed by the the developerconnect server.  After setting any
             * optional parameters, call the {@link ProcessBitbucketCloudWebhook#execute()} method to invoke
             * the remote operation. <p> {@link ProcessBitbucketCloudWebhook#initialize(com.google.api.client.
             * googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
             * immediately after invoking the constructor. </p>
             *
             * @param name Required. The GitRepositoryLink where the webhook will be received. Format:
           *        `projects/locations/connections/gitRepositoryLinks`.
             * @param content the {@link com.google.api.services.developerconnect.v1.model.ProcessBitbucketCloudWebhookRequest}
             * @since 1.13
             */
            protected ProcessBitbucketCloudWebhook(java.lang.String name, com.google.api.services.developerconnect.v1.model.ProcessBitbucketCloudWebhookRequest content) {
              super(DeveloperConnect.this, "POST", REST_PATH, content, com.google.api.services.developerconnect.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
            }

            @Override
            public ProcessBitbucketCloudWebhook set$Xgafv(java.lang.String $Xgafv) {
              return (ProcessBitbucketCloudWebhook) super.set$Xgafv($Xgafv);
            }

            @Override
            public ProcessBitbucketCloudWebhook setAccessToken(java.lang.String accessToken) {
              return (ProcessBitbucketCloudWebhook) super.setAccessToken(accessToken);
            }

            @Override
            public ProcessBitbucketCloudWebhook setAlt(java.lang.String alt) {
              return (ProcessBitbucketCloudWebhook) super.setAlt(alt);
            }

            @Override
            public ProcessBitbucketCloudWebhook setCallback(java.lang.String callback) {
              return (ProcessBitbucketCloudWebhook) super.setCallback(callback);
            }

            @Override
            public ProcessBitbucketCloudWebhook setFields(java.lang.String fields) {
              return (ProcessBitbucketCloudWebhook) super.setFields(fields);
            }

            @Override
            public ProcessBitbucketCloudWebhook setKey(java.lang.String key) {
              return (ProcessBitbucketCloudWebhook) super.setKey(key);
            }

            @Override
            public ProcessBitbucketCloudWebhook setOauthToken(java.lang.String oauthToken) {
              return (ProcessBitbucketCloudWebhook) super.setOauthToken(oauthToken);
            }

            @Override
            public ProcessBitbucketCloudWebhook setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ProcessBitbucketCloudWebhook) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ProcessBitbucketCloudWebhook setQuotaUser(java.lang.String quotaUser) {
              return (ProcessBitbucketCloudWebhook) super.setQuotaUser(quotaUser);
            }

            @Override
            public ProcessBitbucketCloudWebhook setUploadType(java.lang.String uploadType) {
              return (ProcessBitbucketCloudWebhook) super.setUploadType(uploadType);
            }

            @Override
            public ProcessBitbucketCloudWebhook setUploadProtocol(java.lang.String uploadProtocol) {
              return (ProcessBitbucketCloudWebhook) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The GitRepositoryLink where the webhook will be received. Format:
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The GitRepositoryLink where the webhook will be received. Format:
           `projects/locations/connections/gitRepositoryLinks`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The GitRepositoryLink where the webhook will be received. Format:
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            public ProcessBitbucketCloudWebhook setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public ProcessBitbucketCloudWebhook set(String parameterName, Object value) {
              return (ProcessBitbucketCloudWebhook) super.set(parameterName, value);
            }
          }
          /**
           * ProcessBitbucketDataCenterWebhook is called by the external Bitbucket Data Center instances for
           * notifying events.
           *
           * Create a request for the method "gitRepositoryLinks.processBitbucketDataCenterWebhook".
           *
           * This request holds the parameters needed by the developerconnect server.  After setting any
           * optional parameters, call the {@link ProcessBitbucketDataCenterWebhook#execute()} method to
           * invoke the remote operation.
           *
           * @param name Required. The GitRepositoryLink where the webhook will be received. Format:
           *        `projects/locations/connections/gitRepositoryLinks`.
           * @param content the {@link com.google.api.services.developerconnect.v1.model.ProcessBitbucketDataCenterWebhookRequest}
           * @return the request
           */
          public ProcessBitbucketDataCenterWebhook processBitbucketDataCenterWebhook(java.lang.String name, com.google.api.services.developerconnect.v1.model.ProcessBitbucketDataCenterWebhookRequest content) throws java.io.IOException {
            ProcessBitbucketDataCenterWebhook result = new ProcessBitbucketDataCenterWebhook(name, content);
            initialize(result);
            return result;
          }

          public class ProcessBitbucketDataCenterWebhook extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Empty> {

            private static final String REST_PATH = "v1/{+name}:processBitbucketDataCenterWebhook";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");

            /**
             * ProcessBitbucketDataCenterWebhook is called by the external Bitbucket Data Center instances for
             * notifying events.
             *
             * Create a request for the method "gitRepositoryLinks.processBitbucketDataCenterWebhook".
             *
             * This request holds the parameters needed by the the developerconnect server.  After setting any
             * optional parameters, call the {@link ProcessBitbucketDataCenterWebhook#execute()} method to
             * invoke the remote operation. <p> {@link ProcessBitbucketDataCenterWebhook#initialize(com.google
             * .api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this
             * instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The GitRepositoryLink where the webhook will be received. Format:
           *        `projects/locations/connections/gitRepositoryLinks`.
             * @param content the {@link com.google.api.services.developerconnect.v1.model.ProcessBitbucketDataCenterWebhookRequest}
             * @since 1.13
             */
            protected ProcessBitbucketDataCenterWebhook(java.lang.String name, com.google.api.services.developerconnect.v1.model.ProcessBitbucketDataCenterWebhookRequest content) {
              super(DeveloperConnect.this, "POST", REST_PATH, content, com.google.api.services.developerconnect.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
            }

            @Override
            public ProcessBitbucketDataCenterWebhook set$Xgafv(java.lang.String $Xgafv) {
              return (ProcessBitbucketDataCenterWebhook) super.set$Xgafv($Xgafv);
            }

            @Override
            public ProcessBitbucketDataCenterWebhook setAccessToken(java.lang.String accessToken) {
              return (ProcessBitbucketDataCenterWebhook) super.setAccessToken(accessToken);
            }

            @Override
            public ProcessBitbucketDataCenterWebhook setAlt(java.lang.String alt) {
              return (ProcessBitbucketDataCenterWebhook) super.setAlt(alt);
            }

            @Override
            public ProcessBitbucketDataCenterWebhook setCallback(java.lang.String callback) {
              return (ProcessBitbucketDataCenterWebhook) super.setCallback(callback);
            }

            @Override
            public ProcessBitbucketDataCenterWebhook setFields(java.lang.String fields) {
              return (ProcessBitbucketDataCenterWebhook) super.setFields(fields);
            }

            @Override
            public ProcessBitbucketDataCenterWebhook setKey(java.lang.String key) {
              return (ProcessBitbucketDataCenterWebhook) super.setKey(key);
            }

            @Override
            public ProcessBitbucketDataCenterWebhook setOauthToken(java.lang.String oauthToken) {
              return (ProcessBitbucketDataCenterWebhook) super.setOauthToken(oauthToken);
            }

            @Override
            public ProcessBitbucketDataCenterWebhook setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ProcessBitbucketDataCenterWebhook) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ProcessBitbucketDataCenterWebhook setQuotaUser(java.lang.String quotaUser) {
              return (ProcessBitbucketDataCenterWebhook) super.setQuotaUser(quotaUser);
            }

            @Override
            public ProcessBitbucketDataCenterWebhook setUploadType(java.lang.String uploadType) {
              return (ProcessBitbucketDataCenterWebhook) super.setUploadType(uploadType);
            }

            @Override
            public ProcessBitbucketDataCenterWebhook setUploadProtocol(java.lang.String uploadProtocol) {
              return (ProcessBitbucketDataCenterWebhook) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The GitRepositoryLink where the webhook will be received. Format:
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The GitRepositoryLink where the webhook will be received. Format:
           `projects/locations/connections/gitRepositoryLinks`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The GitRepositoryLink where the webhook will be received. Format:
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            public ProcessBitbucketDataCenterWebhook setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public ProcessBitbucketDataCenterWebhook set(String parameterName, Object value) {
              return (ProcessBitbucketDataCenterWebhook) super.set(parameterName, value);
            }
          }
          /**
           * ProcessGitLabEnterpriseWebhook is called by the external GitLab Enterprise instances for
           * notifying events.
           *
           * Create a request for the method "gitRepositoryLinks.processGitLabEnterpriseWebhook".
           *
           * This request holds the parameters needed by the developerconnect server.  After setting any
           * optional parameters, call the {@link ProcessGitLabEnterpriseWebhook#execute()} method to invoke
           * the remote operation.
           *
           * @param name Required. The GitRepositoryLink resource where the webhook will be received. Format:
           *        `projects/locations/connections/gitRepositoryLinks`.
           * @param content the {@link com.google.api.services.developerconnect.v1.model.ProcessGitLabEnterpriseWebhookRequest}
           * @return the request
           */
          public ProcessGitLabEnterpriseWebhook processGitLabEnterpriseWebhook(java.lang.String name, com.google.api.services.developerconnect.v1.model.ProcessGitLabEnterpriseWebhookRequest content) throws java.io.IOException {
            ProcessGitLabEnterpriseWebhook result = new ProcessGitLabEnterpriseWebhook(name, content);
            initialize(result);
            return result;
          }

          public class ProcessGitLabEnterpriseWebhook extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Empty> {

            private static final String REST_PATH = "v1/{+name}:processGitLabEnterpriseWebhook";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");

            /**
             * ProcessGitLabEnterpriseWebhook is called by the external GitLab Enterprise instances for
             * notifying events.
             *
             * Create a request for the method "gitRepositoryLinks.processGitLabEnterpriseWebhook".
             *
             * This request holds the parameters needed by the the developerconnect server.  After setting any
             * optional parameters, call the {@link ProcessGitLabEnterpriseWebhook#execute()} method to invoke
             * the remote operation. <p> {@link ProcessGitLabEnterpriseWebhook#initialize(com.google.api.clien
             * t.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
             * immediately after invoking the constructor. </p>
             *
             * @param name Required. The GitRepositoryLink resource where the webhook will be received. Format:
           *        `projects/locations/connections/gitRepositoryLinks`.
             * @param content the {@link com.google.api.services.developerconnect.v1.model.ProcessGitLabEnterpriseWebhookRequest}
             * @since 1.13
             */
            protected ProcessGitLabEnterpriseWebhook(java.lang.String name, com.google.api.services.developerconnect.v1.model.ProcessGitLabEnterpriseWebhookRequest content) {
              super(DeveloperConnect.this, "POST", REST_PATH, content, com.google.api.services.developerconnect.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
            }

            @Override
            public ProcessGitLabEnterpriseWebhook set$Xgafv(java.lang.String $Xgafv) {
              return (ProcessGitLabEnterpriseWebhook) super.set$Xgafv($Xgafv);
            }

            @Override
            public ProcessGitLabEnterpriseWebhook setAccessToken(java.lang.String accessToken) {
              return (ProcessGitLabEnterpriseWebhook) super.setAccessToken(accessToken);
            }

            @Override
            public ProcessGitLabEnterpriseWebhook setAlt(java.lang.String alt) {
              return (ProcessGitLabEnterpriseWebhook) super.setAlt(alt);
            }

            @Override
            public ProcessGitLabEnterpriseWebhook setCallback(java.lang.String callback) {
              return (ProcessGitLabEnterpriseWebhook) super.setCallback(callback);
            }

            @Override
            public ProcessGitLabEnterpriseWebhook setFields(java.lang.String fields) {
              return (ProcessGitLabEnterpriseWebhook) super.setFields(fields);
            }

            @Override
            public ProcessGitLabEnterpriseWebhook setKey(java.lang.String key) {
              return (ProcessGitLabEnterpriseWebhook) super.setKey(key);
            }

            @Override
            public ProcessGitLabEnterpriseWebhook setOauthToken(java.lang.String oauthToken) {
              return (ProcessGitLabEnterpriseWebhook) super.setOauthToken(oauthToken);
            }

            @Override
            public ProcessGitLabEnterpriseWebhook setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ProcessGitLabEnterpriseWebhook) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ProcessGitLabEnterpriseWebhook setQuotaUser(java.lang.String quotaUser) {
              return (ProcessGitLabEnterpriseWebhook) super.setQuotaUser(quotaUser);
            }

            @Override
            public ProcessGitLabEnterpriseWebhook setUploadType(java.lang.String uploadType) {
              return (ProcessGitLabEnterpriseWebhook) super.setUploadType(uploadType);
            }

            @Override
            public ProcessGitLabEnterpriseWebhook setUploadProtocol(java.lang.String uploadProtocol) {
              return (ProcessGitLabEnterpriseWebhook) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The GitRepositoryLink resource where the webhook will be received. Format:
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The GitRepositoryLink resource where the webhook will be received. Format:
           `projects/locations/connections/gitRepositoryLinks`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The GitRepositoryLink resource where the webhook will be received. Format:
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            public ProcessGitLabEnterpriseWebhook setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public ProcessGitLabEnterpriseWebhook set(String parameterName, Object value) {
              return (ProcessGitLabEnterpriseWebhook) super.set(parameterName, value);
            }
          }
          /**
           * ProcessGitLabWebhook is called by the GitLab.com for notifying events.
           *
           * Create a request for the method "gitRepositoryLinks.processGitLabWebhook".
           *
           * This request holds the parameters needed by the developerconnect server.  After setting any
           * optional parameters, call the {@link ProcessGitLabWebhook#execute()} method to invoke the remote
           * operation.
           *
           * @param name Required. The GitRepositoryLink resource where the webhook will be received. Format:
           *        `projects/locations/connections/gitRepositoryLinks`.
           * @param content the {@link com.google.api.services.developerconnect.v1.model.ProcessGitLabWebhookRequest}
           * @return the request
           */
          public ProcessGitLabWebhook processGitLabWebhook(java.lang.String name, com.google.api.services.developerconnect.v1.model.ProcessGitLabWebhookRequest content) throws java.io.IOException {
            ProcessGitLabWebhook result = new ProcessGitLabWebhook(name, content);
            initialize(result);
            return result;
          }

          public class ProcessGitLabWebhook extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Empty> {

            private static final String REST_PATH = "v1/{+name}:processGitLabWebhook";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");

            /**
             * ProcessGitLabWebhook is called by the GitLab.com for notifying events.
             *
             * Create a request for the method "gitRepositoryLinks.processGitLabWebhook".
             *
             * This request holds the parameters needed by the the developerconnect server.  After setting any
             * optional parameters, call the {@link ProcessGitLabWebhook#execute()} method to invoke the
             * remote operation. <p> {@link ProcessGitLabWebhook#initialize(com.google.api.client.googleapis.s
             * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
             * after invoking the constructor. </p>
             *
             * @param name Required. The GitRepositoryLink resource where the webhook will be received. Format:
           *        `projects/locations/connections/gitRepositoryLinks`.
             * @param content the {@link com.google.api.services.developerconnect.v1.model.ProcessGitLabWebhookRequest}
             * @since 1.13
             */
            protected ProcessGitLabWebhook(java.lang.String name, com.google.api.services.developerconnect.v1.model.ProcessGitLabWebhookRequest content) {
              super(DeveloperConnect.this, "POST", REST_PATH, content, com.google.api.services.developerconnect.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
            }

            @Override
            public ProcessGitLabWebhook set$Xgafv(java.lang.String $Xgafv) {
              return (ProcessGitLabWebhook) super.set$Xgafv($Xgafv);
            }

            @Override
            public ProcessGitLabWebhook setAccessToken(java.lang.String accessToken) {
              return (ProcessGitLabWebhook) super.setAccessToken(accessToken);
            }

            @Override
            public ProcessGitLabWebhook setAlt(java.lang.String alt) {
              return (ProcessGitLabWebhook) super.setAlt(alt);
            }

            @Override
            public ProcessGitLabWebhook setCallback(java.lang.String callback) {
              return (ProcessGitLabWebhook) super.setCallback(callback);
            }

            @Override
            public ProcessGitLabWebhook setFields(java.lang.String fields) {
              return (ProcessGitLabWebhook) super.setFields(fields);
            }

            @Override
            public ProcessGitLabWebhook setKey(java.lang.String key) {
              return (ProcessGitLabWebhook) super.setKey(key);
            }

            @Override
            public ProcessGitLabWebhook setOauthToken(java.lang.String oauthToken) {
              return (ProcessGitLabWebhook) super.setOauthToken(oauthToken);
            }

            @Override
            public ProcessGitLabWebhook setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ProcessGitLabWebhook) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ProcessGitLabWebhook setQuotaUser(java.lang.String quotaUser) {
              return (ProcessGitLabWebhook) super.setQuotaUser(quotaUser);
            }

            @Override
            public ProcessGitLabWebhook setUploadType(java.lang.String uploadType) {
              return (ProcessGitLabWebhook) super.setUploadType(uploadType);
            }

            @Override
            public ProcessGitLabWebhook setUploadProtocol(java.lang.String uploadProtocol) {
              return (ProcessGitLabWebhook) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The GitRepositoryLink resource where the webhook will be received. Format:
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The GitRepositoryLink resource where the webhook will be received. Format:
           `projects/locations/connections/gitRepositoryLinks`.
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The GitRepositoryLink resource where the webhook will be received. Format:
             * `projects/locations/connections/gitRepositoryLinks`.
             */
            public ProcessGitLabWebhook setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/gitRepositoryLinks/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public ProcessGitLabWebhook set(String parameterName, Object value) {
              return (ProcessGitLabWebhook) super.set(parameterName, value);
            }
          }

        }
      }
      /**
       * An accessor for creating requests from the Operations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code DeveloperConnect developerconnect = new DeveloperConnect(...);}
       *   {@code DeveloperConnect.Operations.List request = developerconnect.operations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Operations operations() {
        return new Operations();
      }

      /**
       * The "operations" collection of methods.
       */
      public class Operations {

        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
         * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
         * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
         * methods to check whether the cancellation succeeded or whether the operation completed despite
         * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
         * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
         * `Code.CANCELLED`.
         *
         * Create a request for the method "operations.cancel".
         *
         * This request holds the parameters needed by the developerconnect server.  After setting any
         * optional parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be cancelled.
         * @param content the {@link com.google.api.services.developerconnect.v1.model.CancelOperationRequest}
         * @return the request
         */
        public Cancel cancel(java.lang.String name, com.google.api.services.developerconnect.v1.model.CancelOperationRequest content) throws java.io.IOException {
          Cancel result = new Cancel(name, content);
          initialize(result);
          return result;
        }

        public class Cancel extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}:cancel";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
           * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
           * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
           * methods to check whether the cancellation succeeded or whether the operation completed despite
           * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
           * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
           * `Code.CANCELLED`.
           *
           * Create a request for the method "operations.cancel".
           *
           * This request holds the parameters needed by the the developerconnect server.  After setting any
           * optional parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
           * <p> {@link
           * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be cancelled.
           * @param content the {@link com.google.api.services.developerconnect.v1.model.CancelOperationRequest}
           * @since 1.13
           */
          protected Cancel(java.lang.String name, com.google.api.services.developerconnect.v1.model.CancelOperationRequest content) {
            super(DeveloperConnect.this, "POST", REST_PATH, content, com.google.api.services.developerconnect.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Cancel set$Xgafv(java.lang.String $Xgafv) {
            return (Cancel) super.set$Xgafv($Xgafv);
          }

          @Override
          public Cancel setAccessToken(java.lang.String accessToken) {
            return (Cancel) super.setAccessToken(accessToken);
          }

          @Override
          public Cancel setAlt(java.lang.String alt) {
            return (Cancel) super.setAlt(alt);
          }

          @Override
          public Cancel setCallback(java.lang.String callback) {
            return (Cancel) super.setCallback(callback);
          }

          @Override
          public Cancel setFields(java.lang.String fields) {
            return (Cancel) super.setFields(fields);
          }

          @Override
          public Cancel setKey(java.lang.String key) {
            return (Cancel) super.setKey(key);
          }

          @Override
          public Cancel setOauthToken(java.lang.String oauthToken) {
            return (Cancel) super.setOauthToken(oauthToken);
          }

          @Override
          public Cancel setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Cancel) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Cancel setQuotaUser(java.lang.String quotaUser) {
            return (Cancel) super.setQuotaUser(quotaUser);
          }

          @Override
          public Cancel setUploadType(java.lang.String uploadType) {
            return (Cancel) super.setUploadType(uploadType);
          }

          @Override
          public Cancel setUploadProtocol(java.lang.String uploadProtocol) {
            return (Cancel) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be cancelled. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be cancelled.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be cancelled. */
          public Cancel setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Cancel set(String parameterName, Object value) {
            return (Cancel) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested
         * in the operation result. It does not cancel the operation. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.delete".
         *
         * This request holds the parameters needed by the developerconnect server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be deleted.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Deletes a long-running operation. This method indicates that the client is no longer interested
           * in the operation result. It does not cancel the operation. If the server doesn't support this
           * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.delete".
           *
           * This request holds the parameters needed by the the developerconnect server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be deleted.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(DeveloperConnect.this, "DELETE", REST_PATH, null, com.google.api.services.developerconnect.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be deleted. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be deleted.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be deleted. */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets the latest state of a long-running operation. Clients can use this method to poll the
         * operation result at intervals as recommended by the API service.
         *
         * Create a request for the method "operations.get".
         *
         * This request holds the parameters needed by the developerconnect server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Gets the latest state of a long-running operation. Clients can use this method to poll the
           * operation result at intervals as recommended by the API service.
           *
           * Create a request for the method "operations.get".
           *
           * This request holds the parameters needed by the the developerconnect server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
           * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(DeveloperConnect.this, "GET", REST_PATH, null, com.google.api.services.developerconnect.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support
         * this method, it returns `UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.list".
         *
         * This request holds the parameters needed by the developerconnect server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation's parent resource.
         * @return the request
         */
        public List list(java.lang.String name) throws java.io.IOException {
          List result = new List(name);
          initialize(result);
          return result;
        }

        public class List extends DeveloperConnectRequest<com.google.api.services.developerconnect.v1.model.ListOperationsResponse> {

          private static final String REST_PATH = "v1/{+name}/operations";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists operations that match the specified filter in the request. If the server doesn't support
           * this method, it returns `UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.list".
           *
           * This request holds the parameters needed by the the developerconnect server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation's parent resource.
           * @since 1.13
           */
          protected List(java.lang.String name) {
            super(DeveloperConnect.this, "GET", REST_PATH, null, com.google.api.services.developerconnect.v1.model.ListOperationsResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation's parent resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation's parent resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation's parent resource. */
          public List setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /** The standard list filter. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** The standard list filter.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** The standard list filter. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** The standard list page size. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The standard list page size.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The standard list page size. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The standard list page token. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The standard list page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The standard list page token. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link DeveloperConnect}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link DeveloperConnect}. */
    @Override
    public DeveloperConnect build() {
      return new DeveloperConnect(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link DeveloperConnectRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setDeveloperConnectRequestInitializer(
        DeveloperConnectRequestInitializer developerconnectRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(developerconnectRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
