/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebaseapphosting.v1beta.model;

/**
 * A domain name that is associated with a backend.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase App Hosting API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Domain extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Annotations as key value pairs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> annotations;

  /**
   * Output only. Time at which the domain was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Output only. Represents the state and configuration of a `CUSTOM` type domain. It is only
   * present on Domains of that type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CustomDomainStatus customDomainStatus;

  /**
   * Output only. Time at which the domain was deleted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String deleteTime;

  /**
   * Optional. Whether the domain is disabled. Defaults to false.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean disabled;

  /**
   * Optional. Mutable human-readable name for the domain. 63 character limit. e.g. `prod domain`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Output only. Server-computed checksum based on other values; may be sent on update or delete to
   * ensure operation is done on expected resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Optional. Labels as key value pairs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Identifier. The resource name of the domain, e.g.
   * `/projects/p/locations/l/backends/b/domains/foo.com`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. Time at which a soft-deleted domain will be purged, rendering in permanently
   * deleted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String purgeTime;

  /**
   * Output only. A field that, if true, indicates that the build has an ongoing LRO.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean reconciling;

  /**
   * Optional. The serving behavior of the domain. If specified, the domain will serve content other
   * than its backend's live content.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ServingBehavior serve;

  /**
   * Output only. The type of the domain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Output only. System-assigned, unique identifier.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Output only. Time at which the domain was last updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Optional. Annotations as key value pairs.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAnnotations() {
    return annotations;
  }

  /**
   * Optional. Annotations as key value pairs.
   * @param annotations annotations or {@code null} for none
   */
  public Domain setAnnotations(java.util.Map<String, java.lang.String> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Output only. Time at which the domain was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Time at which the domain was created.
   * @param createTime createTime or {@code null} for none
   */
  public Domain setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. Represents the state and configuration of a `CUSTOM` type domain. It is only
   * present on Domains of that type.
   * @return value or {@code null} for none
   */
  public CustomDomainStatus getCustomDomainStatus() {
    return customDomainStatus;
  }

  /**
   * Output only. Represents the state and configuration of a `CUSTOM` type domain. It is only
   * present on Domains of that type.
   * @param customDomainStatus customDomainStatus or {@code null} for none
   */
  public Domain setCustomDomainStatus(CustomDomainStatus customDomainStatus) {
    this.customDomainStatus = customDomainStatus;
    return this;
  }

  /**
   * Output only. Time at which the domain was deleted.
   * @return value or {@code null} for none
   */
  public String getDeleteTime() {
    return deleteTime;
  }

  /**
   * Output only. Time at which the domain was deleted.
   * @param deleteTime deleteTime or {@code null} for none
   */
  public Domain setDeleteTime(String deleteTime) {
    this.deleteTime = deleteTime;
    return this;
  }

  /**
   * Optional. Whether the domain is disabled. Defaults to false.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDisabled() {
    return disabled;
  }

  /**
   * Optional. Whether the domain is disabled. Defaults to false.
   * @param disabled disabled or {@code null} for none
   */
  public Domain setDisabled(java.lang.Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Optional. Mutable human-readable name for the domain. 63 character limit. e.g. `prod domain`.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Optional. Mutable human-readable name for the domain. 63 character limit. e.g. `prod domain`.
   * @param displayName displayName or {@code null} for none
   */
  public Domain setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Output only. Server-computed checksum based on other values; may be sent on update or delete to
   * ensure operation is done on expected resource.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Output only. Server-computed checksum based on other values; may be sent on update or delete to
   * ensure operation is done on expected resource.
   * @param etag etag or {@code null} for none
   */
  public Domain setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. Labels as key value pairs.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. Labels as key value pairs.
   * @param labels labels or {@code null} for none
   */
  public Domain setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Identifier. The resource name of the domain, e.g.
   * `/projects/p/locations/l/backends/b/domains/foo.com`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The resource name of the domain, e.g.
   * `/projects/p/locations/l/backends/b/domains/foo.com`
   * @param name name or {@code null} for none
   */
  public Domain setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. Time at which a soft-deleted domain will be purged, rendering in permanently
   * deleted.
   * @return value or {@code null} for none
   */
  public String getPurgeTime() {
    return purgeTime;
  }

  /**
   * Output only. Time at which a soft-deleted domain will be purged, rendering in permanently
   * deleted.
   * @param purgeTime purgeTime or {@code null} for none
   */
  public Domain setPurgeTime(String purgeTime) {
    this.purgeTime = purgeTime;
    return this;
  }

  /**
   * Output only. A field that, if true, indicates that the build has an ongoing LRO.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReconciling() {
    return reconciling;
  }

  /**
   * Output only. A field that, if true, indicates that the build has an ongoing LRO.
   * @param reconciling reconciling or {@code null} for none
   */
  public Domain setReconciling(java.lang.Boolean reconciling) {
    this.reconciling = reconciling;
    return this;
  }

  /**
   * Optional. The serving behavior of the domain. If specified, the domain will serve content other
   * than its backend's live content.
   * @return value or {@code null} for none
   */
  public ServingBehavior getServe() {
    return serve;
  }

  /**
   * Optional. The serving behavior of the domain. If specified, the domain will serve content other
   * than its backend's live content.
   * @param serve serve or {@code null} for none
   */
  public Domain setServe(ServingBehavior serve) {
    this.serve = serve;
    return this;
  }

  /**
   * Output only. The type of the domain.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Output only. The type of the domain.
   * @param type type or {@code null} for none
   */
  public Domain setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * Output only. System-assigned, unique identifier.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. System-assigned, unique identifier.
   * @param uid uid or {@code null} for none
   */
  public Domain setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Output only. Time at which the domain was last updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Time at which the domain was last updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public Domain setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public Domain set(String fieldName, Object value) {
    return (Domain) super.set(fieldName, value);
  }

  @Override
  public Domain clone() {
    return (Domain) super.clone();
  }

}
