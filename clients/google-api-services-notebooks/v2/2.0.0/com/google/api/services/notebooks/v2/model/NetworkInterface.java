/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.notebooks.v2.model;

/**
 * The definition of a network interface resource attached to a VM.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Notebooks API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NetworkInterface extends com.google.api.client.json.GenericJson {

  /**
   * Optional. An array of configurations for this interface. Currently, only one access config,
   * ONE_TO_ONE_NAT, is supported. If no accessConfigs specified, the instance will have an external
   * internet access through an ephemeral external IP address.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AccessConfig> accessConfigs;

  static {
    // hack to force ProGuard to consider AccessConfig used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(AccessConfig.class);
  }

  /**
   * Optional. The name of the VPC that this VM instance is in. Format:
   * `projects/{project_id}/global/networks/{network_id}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String network;

  /**
   * Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nicType;

  /**
   * Optional. The name of the subnet that this VM instance is in. Format:
   * `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subnet;

  /**
   * Optional. An array of configurations for this interface. Currently, only one access config,
   * ONE_TO_ONE_NAT, is supported. If no accessConfigs specified, the instance will have an external
   * internet access through an ephemeral external IP address.
   * @return value or {@code null} for none
   */
  public java.util.List<AccessConfig> getAccessConfigs() {
    return accessConfigs;
  }

  /**
   * Optional. An array of configurations for this interface. Currently, only one access config,
   * ONE_TO_ONE_NAT, is supported. If no accessConfigs specified, the instance will have an external
   * internet access through an ephemeral external IP address.
   * @param accessConfigs accessConfigs or {@code null} for none
   */
  public NetworkInterface setAccessConfigs(java.util.List<AccessConfig> accessConfigs) {
    this.accessConfigs = accessConfigs;
    return this;
  }

  /**
   * Optional. The name of the VPC that this VM instance is in. Format:
   * `projects/{project_id}/global/networks/{network_id}`
   * @return value or {@code null} for none
   */
  public java.lang.String getNetwork() {
    return network;
  }

  /**
   * Optional. The name of the VPC that this VM instance is in. Format:
   * `projects/{project_id}/global/networks/{network_id}`
   * @param network network or {@code null} for none
   */
  public NetworkInterface setNetwork(java.lang.String network) {
    this.network = network;
    return this;
  }

  /**
   * Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
   * @return value or {@code null} for none
   */
  public java.lang.String getNicType() {
    return nicType;
  }

  /**
   * Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
   * @param nicType nicType or {@code null} for none
   */
  public NetworkInterface setNicType(java.lang.String nicType) {
    this.nicType = nicType;
    return this;
  }

  /**
   * Optional. The name of the subnet that this VM instance is in. Format:
   * `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
   * @return value or {@code null} for none
   */
  public java.lang.String getSubnet() {
    return subnet;
  }

  /**
   * Optional. The name of the subnet that this VM instance is in. Format:
   * `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
   * @param subnet subnet or {@code null} for none
   */
  public NetworkInterface setSubnet(java.lang.String subnet) {
    this.subnet = subnet;
    return this;
  }

  @Override
  public NetworkInterface set(String fieldName, Object value) {
    return (NetworkInterface) super.set(fieldName, value);
  }

  @Override
  public NetworkInterface clone() {
    return (NetworkInterface) super.clone();
  }

}
