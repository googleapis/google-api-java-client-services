/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Features to be passed from Contact GP to HGR. Next ID: 13
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantGroundingRankerContactGroundingProviderFeatures extends com.google.api.client.json.GenericJson {

  /**
   * Concept id for relationships in English, e.g. "Mother" for all non-English locales. It's only
   * populated for source = RELATIONSHIP.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String conceptId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String contactSource;

  /**
   * Whether the query is a relationship query based on the annotation source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isRelationshipFromAnnotation;

  /**
   * Whether the contact has relationship in the contact metadata.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isRelationshipFromSource;

  /**
   * Whether only populates a single candidate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isSingleCandidate;

  /**
   * Whether the contact is starred contact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isStarred;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String matchedNameType;

  /**
   * Number of alternate contact names from fuzzy contact match.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float numAlternateNameFromFuzzyContactMatch;

  /**
   * Number of alternate contact names from S3_HYPOTHESES.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float numAlternateNamesFromS3;

  /**
   * Number of alternate contact names from interpretation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float numAlternativeNamesFromInterpretation;

  /**
   * Number of contacts populated by the contact Grounding Provider.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float numCandidates;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String recognitionAlternateSource;

  /**
   * Concept id for relationships in English, e.g. "Mother" for all non-English locales. It's only
   * populated for source = RELATIONSHIP.
   * @return value or {@code null} for none
   */
  public java.lang.String getConceptId() {
    return conceptId;
  }

  /**
   * Concept id for relationships in English, e.g. "Mother" for all non-English locales. It's only
   * populated for source = RELATIONSHIP.
   * @param conceptId conceptId or {@code null} for none
   */
  public AssistantGroundingRankerContactGroundingProviderFeatures setConceptId(java.lang.String conceptId) {
    this.conceptId = conceptId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getContactSource() {
    return contactSource;
  }

  /**
   * @param contactSource contactSource or {@code null} for none
   */
  public AssistantGroundingRankerContactGroundingProviderFeatures setContactSource(java.lang.String contactSource) {
    this.contactSource = contactSource;
    return this;
  }

  /**
   * Whether the query is a relationship query based on the annotation source.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsRelationshipFromAnnotation() {
    return isRelationshipFromAnnotation;
  }

  /**
   * Whether the query is a relationship query based on the annotation source.
   * @param isRelationshipFromAnnotation isRelationshipFromAnnotation or {@code null} for none
   */
  public AssistantGroundingRankerContactGroundingProviderFeatures setIsRelationshipFromAnnotation(java.lang.Boolean isRelationshipFromAnnotation) {
    this.isRelationshipFromAnnotation = isRelationshipFromAnnotation;
    return this;
  }

  /**
   * Whether the contact has relationship in the contact metadata.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsRelationshipFromSource() {
    return isRelationshipFromSource;
  }

  /**
   * Whether the contact has relationship in the contact metadata.
   * @param isRelationshipFromSource isRelationshipFromSource or {@code null} for none
   */
  public AssistantGroundingRankerContactGroundingProviderFeatures setIsRelationshipFromSource(java.lang.Boolean isRelationshipFromSource) {
    this.isRelationshipFromSource = isRelationshipFromSource;
    return this;
  }

  /**
   * Whether only populates a single candidate.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsSingleCandidate() {
    return isSingleCandidate;
  }

  /**
   * Whether only populates a single candidate.
   * @param isSingleCandidate isSingleCandidate or {@code null} for none
   */
  public AssistantGroundingRankerContactGroundingProviderFeatures setIsSingleCandidate(java.lang.Boolean isSingleCandidate) {
    this.isSingleCandidate = isSingleCandidate;
    return this;
  }

  /**
   * Whether the contact is starred contact.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsStarred() {
    return isStarred;
  }

  /**
   * Whether the contact is starred contact.
   * @param isStarred isStarred or {@code null} for none
   */
  public AssistantGroundingRankerContactGroundingProviderFeatures setIsStarred(java.lang.Boolean isStarred) {
    this.isStarred = isStarred;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getMatchedNameType() {
    return matchedNameType;
  }

  /**
   * @param matchedNameType matchedNameType or {@code null} for none
   */
  public AssistantGroundingRankerContactGroundingProviderFeatures setMatchedNameType(java.lang.String matchedNameType) {
    this.matchedNameType = matchedNameType;
    return this;
  }

  /**
   * Number of alternate contact names from fuzzy contact match.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNumAlternateNameFromFuzzyContactMatch() {
    return numAlternateNameFromFuzzyContactMatch;
  }

  /**
   * Number of alternate contact names from fuzzy contact match.
   * @param numAlternateNameFromFuzzyContactMatch numAlternateNameFromFuzzyContactMatch or {@code null} for none
   */
  public AssistantGroundingRankerContactGroundingProviderFeatures setNumAlternateNameFromFuzzyContactMatch(java.lang.Float numAlternateNameFromFuzzyContactMatch) {
    this.numAlternateNameFromFuzzyContactMatch = numAlternateNameFromFuzzyContactMatch;
    return this;
  }

  /**
   * Number of alternate contact names from S3_HYPOTHESES.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNumAlternateNamesFromS3() {
    return numAlternateNamesFromS3;
  }

  /**
   * Number of alternate contact names from S3_HYPOTHESES.
   * @param numAlternateNamesFromS3 numAlternateNamesFromS3 or {@code null} for none
   */
  public AssistantGroundingRankerContactGroundingProviderFeatures setNumAlternateNamesFromS3(java.lang.Float numAlternateNamesFromS3) {
    this.numAlternateNamesFromS3 = numAlternateNamesFromS3;
    return this;
  }

  /**
   * Number of alternate contact names from interpretation.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNumAlternativeNamesFromInterpretation() {
    return numAlternativeNamesFromInterpretation;
  }

  /**
   * Number of alternate contact names from interpretation.
   * @param numAlternativeNamesFromInterpretation numAlternativeNamesFromInterpretation or {@code null} for none
   */
  public AssistantGroundingRankerContactGroundingProviderFeatures setNumAlternativeNamesFromInterpretation(java.lang.Float numAlternativeNamesFromInterpretation) {
    this.numAlternativeNamesFromInterpretation = numAlternativeNamesFromInterpretation;
    return this;
  }

  /**
   * Number of contacts populated by the contact Grounding Provider.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNumCandidates() {
    return numCandidates;
  }

  /**
   * Number of contacts populated by the contact Grounding Provider.
   * @param numCandidates numCandidates or {@code null} for none
   */
  public AssistantGroundingRankerContactGroundingProviderFeatures setNumCandidates(java.lang.Float numCandidates) {
    this.numCandidates = numCandidates;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getRecognitionAlternateSource() {
    return recognitionAlternateSource;
  }

  /**
   * @param recognitionAlternateSource recognitionAlternateSource or {@code null} for none
   */
  public AssistantGroundingRankerContactGroundingProviderFeatures setRecognitionAlternateSource(java.lang.String recognitionAlternateSource) {
    this.recognitionAlternateSource = recognitionAlternateSource;
    return this;
  }

  @Override
  public AssistantGroundingRankerContactGroundingProviderFeatures set(String fieldName, Object value) {
    return (AssistantGroundingRankerContactGroundingProviderFeatures) super.set(fieldName, value);
  }

  @Override
  public AssistantGroundingRankerContactGroundingProviderFeatures clone() {
    return (AssistantGroundingRankerContactGroundingProviderFeatures) super.clone();
  }

}
