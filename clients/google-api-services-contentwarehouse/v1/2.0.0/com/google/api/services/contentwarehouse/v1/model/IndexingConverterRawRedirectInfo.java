/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The proto to be stored in raw_redirect_info column of document table.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingConverterRawRedirectInfo extends com.google.api.client.json.GenericJson {

  /**
   * Final redirect target found from rendering. It is the same as the last element of
   * raw_redirect_chain_from_rendering. It is used as an input source for the indexable fragment
   * detection pipeline and also downstream phases.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rawFinalTargetFromRendering;

  /**
   * This is with-fragment version of redirect_with_contents. This field is populated only if there
   * was a fragment. This field is used by indexing::mobile::GetRedirectTarget() defined in
   * indexing/mobile/internal/smartphone-util.cc, which extracts the redirect target for smartphone
   * optimized pages. The extracted target in turn is served in search results for smartphone users.
   * We need with-fragment version because with-fragment url can return different content than
   * fragment-stripped url. For example, http://www.example.com/m#article=11 and
   * http://www.example.com/m can return different content. These cases are most typical for Ajaxy
   * sites. This fragment does not have to be indexable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rawFinalTargetFromTrawler;

  /**
   * Redirect chain generated from redirect events in rendering. At the beginning of it, there could
   * be some redirects from trawler (i.e. could be partial or entire trawler redirect chain), other
   * redirects have their RedirectParams::is_redirect_from_rendering fields set to true. Redirects
   * here have no RedirectChain::Hop::raw_target fields populated, and targets stored in
   * RedirectChain::Hop::target fields are likely cleaned while keeping fragments (also sometimes
   * they could be uncleaned ones because of cleaning failures), fragments could be indexable or
   * non-indexable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingConverterRedirectChain rawRedirectChainFromRendering;

  /**
   * This is used to describe how many redirect hops from Webkit were kept in the
   * raw_redirect_chain_from_rendering. If it is -1, it means it kept all the hops from Webkit in
   * redirect chain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer renderingRedirectLimit;

  /**
   * Final redirect target found from rendering. It is the same as the last element of
   * raw_redirect_chain_from_rendering. It is used as an input source for the indexable fragment
   * detection pipeline and also downstream phases.
   * @return value or {@code null} for none
   */
  public java.lang.String getRawFinalTargetFromRendering() {
    return rawFinalTargetFromRendering;
  }

  /**
   * Final redirect target found from rendering. It is the same as the last element of
   * raw_redirect_chain_from_rendering. It is used as an input source for the indexable fragment
   * detection pipeline and also downstream phases.
   * @param rawFinalTargetFromRendering rawFinalTargetFromRendering or {@code null} for none
   */
  public IndexingConverterRawRedirectInfo setRawFinalTargetFromRendering(java.lang.String rawFinalTargetFromRendering) {
    this.rawFinalTargetFromRendering = rawFinalTargetFromRendering;
    return this;
  }

  /**
   * This is with-fragment version of redirect_with_contents. This field is populated only if there
   * was a fragment. This field is used by indexing::mobile::GetRedirectTarget() defined in
   * indexing/mobile/internal/smartphone-util.cc, which extracts the redirect target for smartphone
   * optimized pages. The extracted target in turn is served in search results for smartphone users.
   * We need with-fragment version because with-fragment url can return different content than
   * fragment-stripped url. For example, http://www.example.com/m#article=11 and
   * http://www.example.com/m can return different content. These cases are most typical for Ajaxy
   * sites. This fragment does not have to be indexable.
   * @return value or {@code null} for none
   */
  public java.lang.String getRawFinalTargetFromTrawler() {
    return rawFinalTargetFromTrawler;
  }

  /**
   * This is with-fragment version of redirect_with_contents. This field is populated only if there
   * was a fragment. This field is used by indexing::mobile::GetRedirectTarget() defined in
   * indexing/mobile/internal/smartphone-util.cc, which extracts the redirect target for smartphone
   * optimized pages. The extracted target in turn is served in search results for smartphone users.
   * We need with-fragment version because with-fragment url can return different content than
   * fragment-stripped url. For example, http://www.example.com/m#article=11 and
   * http://www.example.com/m can return different content. These cases are most typical for Ajaxy
   * sites. This fragment does not have to be indexable.
   * @param rawFinalTargetFromTrawler rawFinalTargetFromTrawler or {@code null} for none
   */
  public IndexingConverterRawRedirectInfo setRawFinalTargetFromTrawler(java.lang.String rawFinalTargetFromTrawler) {
    this.rawFinalTargetFromTrawler = rawFinalTargetFromTrawler;
    return this;
  }

  /**
   * Redirect chain generated from redirect events in rendering. At the beginning of it, there could
   * be some redirects from trawler (i.e. could be partial or entire trawler redirect chain), other
   * redirects have their RedirectParams::is_redirect_from_rendering fields set to true. Redirects
   * here have no RedirectChain::Hop::raw_target fields populated, and targets stored in
   * RedirectChain::Hop::target fields are likely cleaned while keeping fragments (also sometimes
   * they could be uncleaned ones because of cleaning failures), fragments could be indexable or
   * non-indexable.
   * @return value or {@code null} for none
   */
  public IndexingConverterRedirectChain getRawRedirectChainFromRendering() {
    return rawRedirectChainFromRendering;
  }

  /**
   * Redirect chain generated from redirect events in rendering. At the beginning of it, there could
   * be some redirects from trawler (i.e. could be partial or entire trawler redirect chain), other
   * redirects have their RedirectParams::is_redirect_from_rendering fields set to true. Redirects
   * here have no RedirectChain::Hop::raw_target fields populated, and targets stored in
   * RedirectChain::Hop::target fields are likely cleaned while keeping fragments (also sometimes
   * they could be uncleaned ones because of cleaning failures), fragments could be indexable or
   * non-indexable.
   * @param rawRedirectChainFromRendering rawRedirectChainFromRendering or {@code null} for none
   */
  public IndexingConverterRawRedirectInfo setRawRedirectChainFromRendering(IndexingConverterRedirectChain rawRedirectChainFromRendering) {
    this.rawRedirectChainFromRendering = rawRedirectChainFromRendering;
    return this;
  }

  /**
   * This is used to describe how many redirect hops from Webkit were kept in the
   * raw_redirect_chain_from_rendering. If it is -1, it means it kept all the hops from Webkit in
   * redirect chain.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRenderingRedirectLimit() {
    return renderingRedirectLimit;
  }

  /**
   * This is used to describe how many redirect hops from Webkit were kept in the
   * raw_redirect_chain_from_rendering. If it is -1, it means it kept all the hops from Webkit in
   * redirect chain.
   * @param renderingRedirectLimit renderingRedirectLimit or {@code null} for none
   */
  public IndexingConverterRawRedirectInfo setRenderingRedirectLimit(java.lang.Integer renderingRedirectLimit) {
    this.renderingRedirectLimit = renderingRedirectLimit;
    return this;
  }

  @Override
  public IndexingConverterRawRedirectInfo set(String fieldName, Object value) {
    return (IndexingConverterRawRedirectInfo) super.set(fieldName, value);
  }

  @Override
  public IndexingConverterRawRedirectInfo clone() {
    return (IndexingConverterRawRedirectInfo) super.clone();
  }

}
