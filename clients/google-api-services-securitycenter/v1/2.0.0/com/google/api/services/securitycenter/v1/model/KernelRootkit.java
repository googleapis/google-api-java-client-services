/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.securitycenter.v1.model;

/**
 * Kernel mode rootkit signatures.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Security Command Center API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KernelRootkit extends com.google.api.client.json.GenericJson {

  /**
   * Rootkit name, when available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * True if unexpected modifications of kernel code memory are present.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean unexpectedCodeModification;

  /**
   * True if `ftrace` points are present with callbacks pointing to regions that are not in the
   * expected kernel or module code range.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean unexpectedFtraceHandler;

  /**
   * True if interrupt handlers that are are not in the expected kernel or module code regions are
   * present.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean unexpectedInterruptHandler;

  /**
   * True if kernel code pages that are not in the expected kernel or module code regions are
   * present.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean unexpectedKernelCodePages;

  /**
   * True if `kprobe` points are present with callbacks pointing to regions that are not in the
   * expected kernel or module code range.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean unexpectedKprobeHandler;

  /**
   * True if unexpected processes in the scheduler run queue are present. Such processes are in the
   * run queue, but not in the process task list.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean unexpectedProcessesInRunqueue;

  /**
   * True if unexpected modifications of kernel read-only data memory are present.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean unexpectedReadOnlyDataModification;

  /**
   * True if system call handlers that are are not in the expected kernel or module code regions are
   * present.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean unexpectedSystemCallHandler;

  /**
   * Rootkit name, when available.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Rootkit name, when available.
   * @param name name or {@code null} for none
   */
  public KernelRootkit setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * True if unexpected modifications of kernel code memory are present.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUnexpectedCodeModification() {
    return unexpectedCodeModification;
  }

  /**
   * True if unexpected modifications of kernel code memory are present.
   * @param unexpectedCodeModification unexpectedCodeModification or {@code null} for none
   */
  public KernelRootkit setUnexpectedCodeModification(java.lang.Boolean unexpectedCodeModification) {
    this.unexpectedCodeModification = unexpectedCodeModification;
    return this;
  }

  /**
   * True if `ftrace` points are present with callbacks pointing to regions that are not in the
   * expected kernel or module code range.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUnexpectedFtraceHandler() {
    return unexpectedFtraceHandler;
  }

  /**
   * True if `ftrace` points are present with callbacks pointing to regions that are not in the
   * expected kernel or module code range.
   * @param unexpectedFtraceHandler unexpectedFtraceHandler or {@code null} for none
   */
  public KernelRootkit setUnexpectedFtraceHandler(java.lang.Boolean unexpectedFtraceHandler) {
    this.unexpectedFtraceHandler = unexpectedFtraceHandler;
    return this;
  }

  /**
   * True if interrupt handlers that are are not in the expected kernel or module code regions are
   * present.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUnexpectedInterruptHandler() {
    return unexpectedInterruptHandler;
  }

  /**
   * True if interrupt handlers that are are not in the expected kernel or module code regions are
   * present.
   * @param unexpectedInterruptHandler unexpectedInterruptHandler or {@code null} for none
   */
  public KernelRootkit setUnexpectedInterruptHandler(java.lang.Boolean unexpectedInterruptHandler) {
    this.unexpectedInterruptHandler = unexpectedInterruptHandler;
    return this;
  }

  /**
   * True if kernel code pages that are not in the expected kernel or module code regions are
   * present.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUnexpectedKernelCodePages() {
    return unexpectedKernelCodePages;
  }

  /**
   * True if kernel code pages that are not in the expected kernel or module code regions are
   * present.
   * @param unexpectedKernelCodePages unexpectedKernelCodePages or {@code null} for none
   */
  public KernelRootkit setUnexpectedKernelCodePages(java.lang.Boolean unexpectedKernelCodePages) {
    this.unexpectedKernelCodePages = unexpectedKernelCodePages;
    return this;
  }

  /**
   * True if `kprobe` points are present with callbacks pointing to regions that are not in the
   * expected kernel or module code range.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUnexpectedKprobeHandler() {
    return unexpectedKprobeHandler;
  }

  /**
   * True if `kprobe` points are present with callbacks pointing to regions that are not in the
   * expected kernel or module code range.
   * @param unexpectedKprobeHandler unexpectedKprobeHandler or {@code null} for none
   */
  public KernelRootkit setUnexpectedKprobeHandler(java.lang.Boolean unexpectedKprobeHandler) {
    this.unexpectedKprobeHandler = unexpectedKprobeHandler;
    return this;
  }

  /**
   * True if unexpected processes in the scheduler run queue are present. Such processes are in the
   * run queue, but not in the process task list.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUnexpectedProcessesInRunqueue() {
    return unexpectedProcessesInRunqueue;
  }

  /**
   * True if unexpected processes in the scheduler run queue are present. Such processes are in the
   * run queue, but not in the process task list.
   * @param unexpectedProcessesInRunqueue unexpectedProcessesInRunqueue or {@code null} for none
   */
  public KernelRootkit setUnexpectedProcessesInRunqueue(java.lang.Boolean unexpectedProcessesInRunqueue) {
    this.unexpectedProcessesInRunqueue = unexpectedProcessesInRunqueue;
    return this;
  }

  /**
   * True if unexpected modifications of kernel read-only data memory are present.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUnexpectedReadOnlyDataModification() {
    return unexpectedReadOnlyDataModification;
  }

  /**
   * True if unexpected modifications of kernel read-only data memory are present.
   * @param unexpectedReadOnlyDataModification unexpectedReadOnlyDataModification or {@code null} for none
   */
  public KernelRootkit setUnexpectedReadOnlyDataModification(java.lang.Boolean unexpectedReadOnlyDataModification) {
    this.unexpectedReadOnlyDataModification = unexpectedReadOnlyDataModification;
    return this;
  }

  /**
   * True if system call handlers that are are not in the expected kernel or module code regions are
   * present.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUnexpectedSystemCallHandler() {
    return unexpectedSystemCallHandler;
  }

  /**
   * True if system call handlers that are are not in the expected kernel or module code regions are
   * present.
   * @param unexpectedSystemCallHandler unexpectedSystemCallHandler or {@code null} for none
   */
  public KernelRootkit setUnexpectedSystemCallHandler(java.lang.Boolean unexpectedSystemCallHandler) {
    this.unexpectedSystemCallHandler = unexpectedSystemCallHandler;
    return this;
  }

  @Override
  public KernelRootkit set(String fieldName, Object value) {
    return (KernelRootkit) super.set(fieldName, value);
  }

  @Override
  public KernelRootkit clone() {
    return (KernelRootkit) super.clone();
  }

}
