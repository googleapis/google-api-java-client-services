/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A single cost which will apply based on the duration of utilization. The cost may apply once, or
 * repeatedly on some interval, to account for the total utilization. If the duration expressed by
 * range_start_seconds and range_end_seconds do not cover the entire duration of the utilization
 * (i.e. from 0 to some time greater than the total utilization time), this must be combined with
 * other DurationBasedRateProtos such that the entire duration of the utilization is accounted for.
 * See go/rate-schema for more details.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreDurationBasedRateProto extends com.google.api.client.json.GenericJson {

  /**
   * If true, represents that the rate is free; i.e. the price is 0 in any currency. If this is
   * true, price must be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isFree;

  /**
   * The billable unit of the rate; i.e. after having utilized the service for exactly
   * periodicity_seconds, the total cost should increase by ‘price’. For example, if the rate
   * expresses a price per hour, then periodicity_seconds should be set to 3600. If this is unset,
   * then the rate does not vary based on duration, and price represents a flat cost. May only be
   * set if price is nonempty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer periodicitySeconds;

  /**
   * The total price, in each applicable currency, of utilizing the service for periodicity_seconds,
   * or for the entire duration expressed by range_start_seconds and range_end_seconds if
   * periodicity_seconds is 0. Each entry should have an ID of /measurement_unit/money_value and
   * consist of two properties: one with an ID of /measurement_unit/money_value/amount and a float
   * value with the amount, and another with the ID /measurement_unit/money_value/currency and an ID
   * value with the MID of the proper currency. May only be set if is_free is false.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<FreebaseTopic> price;

  static {
    // hack to force ProGuard to consider FreebaseTopic used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(FreebaseTopic.class);
  }

  /**
   * Upper bound for durations to match, exclusive. Unset implies indefinite.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rangeEndSeconds;

  /**
   * Lower bound for durations to match, inclusive. Required; a value of 0 expresses that the price
   * applies from the start of the utilization period.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rangeStartSeconds;

  /**
   * If true, represents that the rate is free; i.e. the price is 0 in any currency. If this is
   * true, price must be empty.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsFree() {
    return isFree;
  }

  /**
   * If true, represents that the rate is free; i.e. the price is 0 in any currency. If this is
   * true, price must be empty.
   * @param isFree isFree or {@code null} for none
   */
  public GeostoreDurationBasedRateProto setIsFree(java.lang.Boolean isFree) {
    this.isFree = isFree;
    return this;
  }

  /**
   * The billable unit of the rate; i.e. after having utilized the service for exactly
   * periodicity_seconds, the total cost should increase by ‘price’. For example, if the rate
   * expresses a price per hour, then periodicity_seconds should be set to 3600. If this is unset,
   * then the rate does not vary based on duration, and price represents a flat cost. May only be
   * set if price is nonempty.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPeriodicitySeconds() {
    return periodicitySeconds;
  }

  /**
   * The billable unit of the rate; i.e. after having utilized the service for exactly
   * periodicity_seconds, the total cost should increase by ‘price’. For example, if the rate
   * expresses a price per hour, then periodicity_seconds should be set to 3600. If this is unset,
   * then the rate does not vary based on duration, and price represents a flat cost. May only be
   * set if price is nonempty.
   * @param periodicitySeconds periodicitySeconds or {@code null} for none
   */
  public GeostoreDurationBasedRateProto setPeriodicitySeconds(java.lang.Integer periodicitySeconds) {
    this.periodicitySeconds = periodicitySeconds;
    return this;
  }

  /**
   * The total price, in each applicable currency, of utilizing the service for periodicity_seconds,
   * or for the entire duration expressed by range_start_seconds and range_end_seconds if
   * periodicity_seconds is 0. Each entry should have an ID of /measurement_unit/money_value and
   * consist of two properties: one with an ID of /measurement_unit/money_value/amount and a float
   * value with the amount, and another with the ID /measurement_unit/money_value/currency and an ID
   * value with the MID of the proper currency. May only be set if is_free is false.
   * @return value or {@code null} for none
   */
  public java.util.List<FreebaseTopic> getPrice() {
    return price;
  }

  /**
   * The total price, in each applicable currency, of utilizing the service for periodicity_seconds,
   * or for the entire duration expressed by range_start_seconds and range_end_seconds if
   * periodicity_seconds is 0. Each entry should have an ID of /measurement_unit/money_value and
   * consist of two properties: one with an ID of /measurement_unit/money_value/amount and a float
   * value with the amount, and another with the ID /measurement_unit/money_value/currency and an ID
   * value with the MID of the proper currency. May only be set if is_free is false.
   * @param price price or {@code null} for none
   */
  public GeostoreDurationBasedRateProto setPrice(java.util.List<FreebaseTopic> price) {
    this.price = price;
    return this;
  }

  /**
   * Upper bound for durations to match, exclusive. Unset implies indefinite.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRangeEndSeconds() {
    return rangeEndSeconds;
  }

  /**
   * Upper bound for durations to match, exclusive. Unset implies indefinite.
   * @param rangeEndSeconds rangeEndSeconds or {@code null} for none
   */
  public GeostoreDurationBasedRateProto setRangeEndSeconds(java.lang.Integer rangeEndSeconds) {
    this.rangeEndSeconds = rangeEndSeconds;
    return this;
  }

  /**
   * Lower bound for durations to match, inclusive. Required; a value of 0 expresses that the price
   * applies from the start of the utilization period.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRangeStartSeconds() {
    return rangeStartSeconds;
  }

  /**
   * Lower bound for durations to match, inclusive. Required; a value of 0 expresses that the price
   * applies from the start of the utilization period.
   * @param rangeStartSeconds rangeStartSeconds or {@code null} for none
   */
  public GeostoreDurationBasedRateProto setRangeStartSeconds(java.lang.Integer rangeStartSeconds) {
    this.rangeStartSeconds = rangeStartSeconds;
    return this;
  }

  @Override
  public GeostoreDurationBasedRateProto set(String fieldName, Object value) {
    return (GeostoreDurationBasedRateProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreDurationBasedRateProto clone() {
    return (GeostoreDurationBasedRateProto) super.clone();
  }

}
