/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidmanagement.v1.model;

/**
 * A rule for automatically choosing a private key and certificate to authenticate the device to a
 * server.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Android Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ChoosePrivateKeyRule extends com.google.api.client.json.GenericJson {

  /**
   * The package names for which outgoing requests are subject to this rule. If no package names are
   * specified, then the rule applies to all packages. For each package name listed, the rule
   * applies to that package and all other packages that shared the same Android UID. The SHA256
   * hash of the signing key signatures of each package_name will be verified against those provided
   * by Play
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> packageNames;

  /**
   * The alias of the private key to be used.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String privateKeyAlias;

  /**
   * The URL pattern to match against the URL of the outgoing request. The pattern may contain
   * asterisk (*) wildcards. Any URL is matched if unspecified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String urlPattern;

  /**
   * The package names for which outgoing requests are subject to this rule. If no package names are
   * specified, then the rule applies to all packages. For each package name listed, the rule
   * applies to that package and all other packages that shared the same Android UID. The SHA256
   * hash of the signing key signatures of each package_name will be verified against those provided
   * by Play
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPackageNames() {
    return packageNames;
  }

  /**
   * The package names for which outgoing requests are subject to this rule. If no package names are
   * specified, then the rule applies to all packages. For each package name listed, the rule
   * applies to that package and all other packages that shared the same Android UID. The SHA256
   * hash of the signing key signatures of each package_name will be verified against those provided
   * by Play
   * @param packageNames packageNames or {@code null} for none
   */
  public ChoosePrivateKeyRule setPackageNames(java.util.List<java.lang.String> packageNames) {
    this.packageNames = packageNames;
    return this;
  }

  /**
   * The alias of the private key to be used.
   * @return value or {@code null} for none
   */
  public java.lang.String getPrivateKeyAlias() {
    return privateKeyAlias;
  }

  /**
   * The alias of the private key to be used.
   * @param privateKeyAlias privateKeyAlias or {@code null} for none
   */
  public ChoosePrivateKeyRule setPrivateKeyAlias(java.lang.String privateKeyAlias) {
    this.privateKeyAlias = privateKeyAlias;
    return this;
  }

  /**
   * The URL pattern to match against the URL of the outgoing request. The pattern may contain
   * asterisk (*) wildcards. Any URL is matched if unspecified.
   * @return value or {@code null} for none
   */
  public java.lang.String getUrlPattern() {
    return urlPattern;
  }

  /**
   * The URL pattern to match against the URL of the outgoing request. The pattern may contain
   * asterisk (*) wildcards. Any URL is matched if unspecified.
   * @param urlPattern urlPattern or {@code null} for none
   */
  public ChoosePrivateKeyRule setUrlPattern(java.lang.String urlPattern) {
    this.urlPattern = urlPattern;
    return this;
  }

  @Override
  public ChoosePrivateKeyRule set(String fieldName, Object value) {
    return (ChoosePrivateKeyRule) super.set(fieldName, value);
  }

  @Override
  public ChoosePrivateKeyRule clone() {
    return (ChoosePrivateKeyRule) super.clone();
  }

}
