/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vmwareengine.v1.model;

/**
 * Describes node type.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the VMware Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NodeType extends com.google.api.client.json.GenericJson {

  /**
   * Output only. List of possible values of custom core count.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> availableCustomCoreCounts;

  /**
   * Output only. The amount of storage available, defined in GB.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer diskSizeGb;

  /**
   * Output only. The friendly name for this node type. For example: ve1-standard-72
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Output only. The amount of physical memory available, defined in GB.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer memoryGb;

  /**
   * Output only. The resource name of this node type. Resource names are schemeless URIs that
   * follow the conventions in https://cloud.google.com/apis/design/resource_names. For example:
   * `projects/my-proj/locations/us-central1-a/nodeTypes/standard-72`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The canonical identifier of the node type (corresponds to the `NodeType`). For
   * example: standard-72.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nodeTypeId;

  /**
   * Output only. The total number of CPU cores in a single node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer totalCoreCount;

  /**
   * Output only. The total number of virtual CPUs in a single node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer virtualCpuCount;

  /**
   * Output only. List of possible values of custom core count.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getAvailableCustomCoreCounts() {
    return availableCustomCoreCounts;
  }

  /**
   * Output only. List of possible values of custom core count.
   * @param availableCustomCoreCounts availableCustomCoreCounts or {@code null} for none
   */
  public NodeType setAvailableCustomCoreCounts(java.util.List<java.lang.Integer> availableCustomCoreCounts) {
    this.availableCustomCoreCounts = availableCustomCoreCounts;
    return this;
  }

  /**
   * Output only. The amount of storage available, defined in GB.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDiskSizeGb() {
    return diskSizeGb;
  }

  /**
   * Output only. The amount of storage available, defined in GB.
   * @param diskSizeGb diskSizeGb or {@code null} for none
   */
  public NodeType setDiskSizeGb(java.lang.Integer diskSizeGb) {
    this.diskSizeGb = diskSizeGb;
    return this;
  }

  /**
   * Output only. The friendly name for this node type. For example: ve1-standard-72
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Output only. The friendly name for this node type. For example: ve1-standard-72
   * @param displayName displayName or {@code null} for none
   */
  public NodeType setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Output only. The amount of physical memory available, defined in GB.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMemoryGb() {
    return memoryGb;
  }

  /**
   * Output only. The amount of physical memory available, defined in GB.
   * @param memoryGb memoryGb or {@code null} for none
   */
  public NodeType setMemoryGb(java.lang.Integer memoryGb) {
    this.memoryGb = memoryGb;
    return this;
  }

  /**
   * Output only. The resource name of this node type. Resource names are schemeless URIs that
   * follow the conventions in https://cloud.google.com/apis/design/resource_names. For example:
   * `projects/my-proj/locations/us-central1-a/nodeTypes/standard-72`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The resource name of this node type. Resource names are schemeless URIs that
   * follow the conventions in https://cloud.google.com/apis/design/resource_names. For example:
   * `projects/my-proj/locations/us-central1-a/nodeTypes/standard-72`
   * @param name name or {@code null} for none
   */
  public NodeType setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The canonical identifier of the node type (corresponds to the `NodeType`). For
   * example: standard-72.
   * @return value or {@code null} for none
   */
  public java.lang.String getNodeTypeId() {
    return nodeTypeId;
  }

  /**
   * Output only. The canonical identifier of the node type (corresponds to the `NodeType`). For
   * example: standard-72.
   * @param nodeTypeId nodeTypeId or {@code null} for none
   */
  public NodeType setNodeTypeId(java.lang.String nodeTypeId) {
    this.nodeTypeId = nodeTypeId;
    return this;
  }

  /**
   * Output only. The total number of CPU cores in a single node.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTotalCoreCount() {
    return totalCoreCount;
  }

  /**
   * Output only. The total number of CPU cores in a single node.
   * @param totalCoreCount totalCoreCount or {@code null} for none
   */
  public NodeType setTotalCoreCount(java.lang.Integer totalCoreCount) {
    this.totalCoreCount = totalCoreCount;
    return this;
  }

  /**
   * Output only. The total number of virtual CPUs in a single node.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getVirtualCpuCount() {
    return virtualCpuCount;
  }

  /**
   * Output only. The total number of virtual CPUs in a single node.
   * @param virtualCpuCount virtualCpuCount or {@code null} for none
   */
  public NodeType setVirtualCpuCount(java.lang.Integer virtualCpuCount) {
    this.virtualCpuCount = virtualCpuCount;
    return this;
  }

  @Override
  public NodeType set(String fieldName, Object value) {
    return (NodeType) super.set(fieldName, value);
  }

  @Override
  public NodeType clone() {
    return (NodeType) super.clone();
  }

}
