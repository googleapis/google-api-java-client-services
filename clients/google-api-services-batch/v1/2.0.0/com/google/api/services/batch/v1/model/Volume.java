/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.batch.v1.model;

/**
 * Volume describes a volume and parameters for it to be mounted to a VM.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Batch API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Volume extends com.google.api.client.json.GenericJson {

  /**
   * Device name of an attached disk volume, which should align with a device_name specified by
   * job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance
   * template in job.allocation_policy.instances[0].instance_template.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deviceName;

  /**
   * A Google Cloud Storage (GCS) volume.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GCS gcs;

  /**
   * For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool
   * (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options
   * provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except
   * writing are supported. This is due to restrictions of multi-writer mode
   * (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached
   * disks and Network File System (NFS), mount options are these supported by the mount command
   * (https://man7.org/linux/man-pages/man8/mount.8.html).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> mountOptions;

  /**
   * The mount path for the volume, e.g. /mnt/disks/share.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mountPath;

  /**
   * A Network File System (NFS) volume. For example, a Filestore file share.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NFS nfs;

  /**
   * Device name of an attached disk volume, which should align with a device_name specified by
   * job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance
   * template in job.allocation_policy.instances[0].instance_template.
   * @return value or {@code null} for none
   */
  public java.lang.String getDeviceName() {
    return deviceName;
  }

  /**
   * Device name of an attached disk volume, which should align with a device_name specified by
   * job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance
   * template in job.allocation_policy.instances[0].instance_template.
   * @param deviceName deviceName or {@code null} for none
   */
  public Volume setDeviceName(java.lang.String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * A Google Cloud Storage (GCS) volume.
   * @return value or {@code null} for none
   */
  public GCS getGcs() {
    return gcs;
  }

  /**
   * A Google Cloud Storage (GCS) volume.
   * @param gcs gcs or {@code null} for none
   */
  public Volume setGcs(GCS gcs) {
    this.gcs = gcs;
    return this;
  }

  /**
   * For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool
   * (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options
   * provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except
   * writing are supported. This is due to restrictions of multi-writer mode
   * (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached
   * disks and Network File System (NFS), mount options are these supported by the mount command
   * (https://man7.org/linux/man-pages/man8/mount.8.html).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMountOptions() {
    return mountOptions;
  }

  /**
   * For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool
   * (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options
   * provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except
   * writing are supported. This is due to restrictions of multi-writer mode
   * (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached
   * disks and Network File System (NFS), mount options are these supported by the mount command
   * (https://man7.org/linux/man-pages/man8/mount.8.html).
   * @param mountOptions mountOptions or {@code null} for none
   */
  public Volume setMountOptions(java.util.List<java.lang.String> mountOptions) {
    this.mountOptions = mountOptions;
    return this;
  }

  /**
   * The mount path for the volume, e.g. /mnt/disks/share.
   * @return value or {@code null} for none
   */
  public java.lang.String getMountPath() {
    return mountPath;
  }

  /**
   * The mount path for the volume, e.g. /mnt/disks/share.
   * @param mountPath mountPath or {@code null} for none
   */
  public Volume setMountPath(java.lang.String mountPath) {
    this.mountPath = mountPath;
    return this;
  }

  /**
   * A Network File System (NFS) volume. For example, a Filestore file share.
   * @return value or {@code null} for none
   */
  public NFS getNfs() {
    return nfs;
  }

  /**
   * A Network File System (NFS) volume. For example, a Filestore file share.
   * @param nfs nfs or {@code null} for none
   */
  public Volume setNfs(NFS nfs) {
    this.nfs = nfs;
    return this;
  }

  @Override
  public Volume set(String fieldName, Object value) {
    return (Volume) super.set(fieldName, value);
  }

  @Override
  public Volume clone() {
    return (Volume) super.clone();
  }

}
