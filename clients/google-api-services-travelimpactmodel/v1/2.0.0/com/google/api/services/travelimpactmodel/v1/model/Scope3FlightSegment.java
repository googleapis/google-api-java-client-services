/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.travelimpactmodel.v1.model;

/**
 * Flight parameters with which the Scope 3 emissions are fetched.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Travel Impact Model API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Scope3FlightSegment extends com.google.api.client.json.GenericJson {

  /**
   * Required. The cabin class of the flight.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cabinClass;

  /**
   * Optional. IATA carrier code, e.g. `KE`. This is required if specific flight matching is
   * desired. Otherwise, this is unused for typical flight and distance-based emissions models. This
   * could be both operating and marketing carrier code (i.e. codeshare is covered).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String carrierCode;

  /**
   * Required. Date of the flight in the time zone of the origin airport. Only year is required for
   * typical flight and distance-based emissions models (month and day values are ignored and
   * therefore, can be either omitted, set to 0, or set to a valid date for those cases).
   * Correspondingly, if a specific date is not provided for TIM emissions, we will fallback to
   * typical flight (or distance-based) emissions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Date departureDate;

  /**
   * Optional. IATA airport code for flight destination, e.g. `ICN`. This is used to match specific
   * flight if provided alongside origin, carrier, and flight number. If there is no match, we will
   * first try to match the flight to a typical flight between the provided origin and destination
   * airports. Otherwise, we will use the distance-based emissions model if the flight distance is
   * provided.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String destination;

  /**
   * Optional. Distance in kilometers, e.g. `2423`. This is used to match a flight to distance-based
   * emissions when origin and destination are not provided or there are no matching typical
   * flights. This field supports values between 0 and 2.5e16 km.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long distanceKm;

  /**
   * Optional. Flight number, e.g. `71`. This is first used to match a specific flight if a flight
   * number is specified alongside origin, destination, and carrier. If a flight number is not
   * specified, we will first try to match the flight to a typical flight between the provided
   * origin and destination airports. If that fails and/or origin & destination are not provided, we
   * will use the distance-based emissions model based on the flight distance provided.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer flightNumber;

  /**
   * Optional. IATA airport code for flight origin, e.g. `YVR`. This is used to match specific
   * flight if provided alongside destination, carrier, and flight number. If there is no match, we
   * will first try to match the flight to a typical flight between the provided origin and
   * destination airports. Otherwise, we will use the distance-based emissions model if the flight
   * distance is provided.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String origin;

  /**
   * Required. The cabin class of the flight.
   * @return value or {@code null} for none
   */
  public java.lang.String getCabinClass() {
    return cabinClass;
  }

  /**
   * Required. The cabin class of the flight.
   * @param cabinClass cabinClass or {@code null} for none
   */
  public Scope3FlightSegment setCabinClass(java.lang.String cabinClass) {
    this.cabinClass = cabinClass;
    return this;
  }

  /**
   * Optional. IATA carrier code, e.g. `KE`. This is required if specific flight matching is
   * desired. Otherwise, this is unused for typical flight and distance-based emissions models. This
   * could be both operating and marketing carrier code (i.e. codeshare is covered).
   * @return value or {@code null} for none
   */
  public java.lang.String getCarrierCode() {
    return carrierCode;
  }

  /**
   * Optional. IATA carrier code, e.g. `KE`. This is required if specific flight matching is
   * desired. Otherwise, this is unused for typical flight and distance-based emissions models. This
   * could be both operating and marketing carrier code (i.e. codeshare is covered).
   * @param carrierCode carrierCode or {@code null} for none
   */
  public Scope3FlightSegment setCarrierCode(java.lang.String carrierCode) {
    this.carrierCode = carrierCode;
    return this;
  }

  /**
   * Required. Date of the flight in the time zone of the origin airport. Only year is required for
   * typical flight and distance-based emissions models (month and day values are ignored and
   * therefore, can be either omitted, set to 0, or set to a valid date for those cases).
   * Correspondingly, if a specific date is not provided for TIM emissions, we will fallback to
   * typical flight (or distance-based) emissions.
   * @return value or {@code null} for none
   */
  public Date getDepartureDate() {
    return departureDate;
  }

  /**
   * Required. Date of the flight in the time zone of the origin airport. Only year is required for
   * typical flight and distance-based emissions models (month and day values are ignored and
   * therefore, can be either omitted, set to 0, or set to a valid date for those cases).
   * Correspondingly, if a specific date is not provided for TIM emissions, we will fallback to
   * typical flight (or distance-based) emissions.
   * @param departureDate departureDate or {@code null} for none
   */
  public Scope3FlightSegment setDepartureDate(Date departureDate) {
    this.departureDate = departureDate;
    return this;
  }

  /**
   * Optional. IATA airport code for flight destination, e.g. `ICN`. This is used to match specific
   * flight if provided alongside origin, carrier, and flight number. If there is no match, we will
   * first try to match the flight to a typical flight between the provided origin and destination
   * airports. Otherwise, we will use the distance-based emissions model if the flight distance is
   * provided.
   * @return value or {@code null} for none
   */
  public java.lang.String getDestination() {
    return destination;
  }

  /**
   * Optional. IATA airport code for flight destination, e.g. `ICN`. This is used to match specific
   * flight if provided alongside origin, carrier, and flight number. If there is no match, we will
   * first try to match the flight to a typical flight between the provided origin and destination
   * airports. Otherwise, we will use the distance-based emissions model if the flight distance is
   * provided.
   * @param destination destination or {@code null} for none
   */
  public Scope3FlightSegment setDestination(java.lang.String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Optional. Distance in kilometers, e.g. `2423`. This is used to match a flight to distance-based
   * emissions when origin and destination are not provided or there are no matching typical
   * flights. This field supports values between 0 and 2.5e16 km.
   * @return value or {@code null} for none
   */
  public java.lang.Long getDistanceKm() {
    return distanceKm;
  }

  /**
   * Optional. Distance in kilometers, e.g. `2423`. This is used to match a flight to distance-based
   * emissions when origin and destination are not provided or there are no matching typical
   * flights. This field supports values between 0 and 2.5e16 km.
   * @param distanceKm distanceKm or {@code null} for none
   */
  public Scope3FlightSegment setDistanceKm(java.lang.Long distanceKm) {
    this.distanceKm = distanceKm;
    return this;
  }

  /**
   * Optional. Flight number, e.g. `71`. This is first used to match a specific flight if a flight
   * number is specified alongside origin, destination, and carrier. If a flight number is not
   * specified, we will first try to match the flight to a typical flight between the provided
   * origin and destination airports. If that fails and/or origin & destination are not provided, we
   * will use the distance-based emissions model based on the flight distance provided.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFlightNumber() {
    return flightNumber;
  }

  /**
   * Optional. Flight number, e.g. `71`. This is first used to match a specific flight if a flight
   * number is specified alongside origin, destination, and carrier. If a flight number is not
   * specified, we will first try to match the flight to a typical flight between the provided
   * origin and destination airports. If that fails and/or origin & destination are not provided, we
   * will use the distance-based emissions model based on the flight distance provided.
   * @param flightNumber flightNumber or {@code null} for none
   */
  public Scope3FlightSegment setFlightNumber(java.lang.Integer flightNumber) {
    this.flightNumber = flightNumber;
    return this;
  }

  /**
   * Optional. IATA airport code for flight origin, e.g. `YVR`. This is used to match specific
   * flight if provided alongside destination, carrier, and flight number. If there is no match, we
   * will first try to match the flight to a typical flight between the provided origin and
   * destination airports. Otherwise, we will use the distance-based emissions model if the flight
   * distance is provided.
   * @return value or {@code null} for none
   */
  public java.lang.String getOrigin() {
    return origin;
  }

  /**
   * Optional. IATA airport code for flight origin, e.g. `YVR`. This is used to match specific
   * flight if provided alongside destination, carrier, and flight number. If there is no match, we
   * will first try to match the flight to a typical flight between the provided origin and
   * destination airports. Otherwise, we will use the distance-based emissions model if the flight
   * distance is provided.
   * @param origin origin or {@code null} for none
   */
  public Scope3FlightSegment setOrigin(java.lang.String origin) {
    this.origin = origin;
    return this;
  }

  @Override
  public Scope3FlightSegment set(String fieldName, Object value) {
    return (Scope3FlightSegment) super.set(fieldName, value);
  }

  @Override
  public Scope3FlightSegment clone() {
    return (Scope3FlightSegment) super.clone();
  }

}
