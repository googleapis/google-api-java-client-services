/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.aiplatform.v1.model;

/**
 * Describes what part of the Dataset is to be exported, the destination of the export and how to
 * export.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Vertex AI API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAiplatformV1ExportDataConfig extends com.google.api.client.json.GenericJson {

  /**
   * The Cloud Storage URI that points to a YAML file describing the annotation schema. The schema
   * is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-
   * Specification/blob/main/versions/3.0.2.md#schemaObject). The schema files that can be used here
   * are found in gs://google-cloud-aiplatform/schema/dataset/annotation/, note that the chosen
   * schema must be consistent with metadata of the Dataset specified by ExportDataRequest.name.
   * Only used for custom training data export use cases. Only applicable to Datasets that have
   * DataItems and Annotations. Only Annotations that both match this schema and belong to DataItems
   * not ignored by the split method are used in respectively training, validation or test role,
   * depending on the role of the DataItem they are on. When used in conjunction with
   * annotations_filter, the Annotations used for training are filtered by both annotations_filter
   * and annotation_schema_uri.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String annotationSchemaUri;

  /**
   * An expression for filtering what part of the Dataset is to be exported. Only Annotations that
   * match this filter will be exported. The filter syntax is the same as in ListAnnotations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String annotationsFilter;

  /**
   * Indicates the usage of the exported files.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String exportUse;

  /**
   * Split based on the provided filters for each set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudAiplatformV1ExportFilterSplit filterSplit;

  /**
   * Split based on fractions defining the size of each set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudAiplatformV1ExportFractionSplit fractionSplit;

  /**
   * The Google Cloud Storage location where the output is to be written to. In the given directory
   * a new directory will be created with name: `export-data--` where timestamp is in YYYY-MM-
   * DDThh:mm:ss.sssZ ISO-8601 format. All export output will be written into that directory. Inside
   * that directory, annotations with the same schema will be grouped into sub directories which are
   * named with the corresponding annotations' schema title. Inside these sub directories, a
   * schema.yaml will be created to describe the output format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudAiplatformV1GcsDestination gcsDestination;

  /**
   * The ID of a SavedQuery (annotation set) under the Dataset specified by ExportDataRequest.name
   * used for filtering Annotations for training. Only used for custom training data export use
   * cases. Only applicable to Datasets that have SavedQueries. Only Annotations that are associated
   * with this SavedQuery are used in respectively training. When used in conjunction with
   * annotations_filter, the Annotations used for training are filtered by both saved_query_id and
   * annotations_filter. Only one of saved_query_id and annotation_schema_uri should be specified as
   * both of them represent the same thing: problem type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String savedQueryId;

  /**
   * The Cloud Storage URI that points to a YAML file describing the annotation schema. The schema
   * is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-
   * Specification/blob/main/versions/3.0.2.md#schemaObject). The schema files that can be used here
   * are found in gs://google-cloud-aiplatform/schema/dataset/annotation/, note that the chosen
   * schema must be consistent with metadata of the Dataset specified by ExportDataRequest.name.
   * Only used for custom training data export use cases. Only applicable to Datasets that have
   * DataItems and Annotations. Only Annotations that both match this schema and belong to DataItems
   * not ignored by the split method are used in respectively training, validation or test role,
   * depending on the role of the DataItem they are on. When used in conjunction with
   * annotations_filter, the Annotations used for training are filtered by both annotations_filter
   * and annotation_schema_uri.
   * @return value or {@code null} for none
   */
  public java.lang.String getAnnotationSchemaUri() {
    return annotationSchemaUri;
  }

  /**
   * The Cloud Storage URI that points to a YAML file describing the annotation schema. The schema
   * is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-
   * Specification/blob/main/versions/3.0.2.md#schemaObject). The schema files that can be used here
   * are found in gs://google-cloud-aiplatform/schema/dataset/annotation/, note that the chosen
   * schema must be consistent with metadata of the Dataset specified by ExportDataRequest.name.
   * Only used for custom training data export use cases. Only applicable to Datasets that have
   * DataItems and Annotations. Only Annotations that both match this schema and belong to DataItems
   * not ignored by the split method are used in respectively training, validation or test role,
   * depending on the role of the DataItem they are on. When used in conjunction with
   * annotations_filter, the Annotations used for training are filtered by both annotations_filter
   * and annotation_schema_uri.
   * @param annotationSchemaUri annotationSchemaUri or {@code null} for none
   */
  public GoogleCloudAiplatformV1ExportDataConfig setAnnotationSchemaUri(java.lang.String annotationSchemaUri) {
    this.annotationSchemaUri = annotationSchemaUri;
    return this;
  }

  /**
   * An expression for filtering what part of the Dataset is to be exported. Only Annotations that
   * match this filter will be exported. The filter syntax is the same as in ListAnnotations.
   * @return value or {@code null} for none
   */
  public java.lang.String getAnnotationsFilter() {
    return annotationsFilter;
  }

  /**
   * An expression for filtering what part of the Dataset is to be exported. Only Annotations that
   * match this filter will be exported. The filter syntax is the same as in ListAnnotations.
   * @param annotationsFilter annotationsFilter or {@code null} for none
   */
  public GoogleCloudAiplatformV1ExportDataConfig setAnnotationsFilter(java.lang.String annotationsFilter) {
    this.annotationsFilter = annotationsFilter;
    return this;
  }

  /**
   * Indicates the usage of the exported files.
   * @return value or {@code null} for none
   */
  public java.lang.String getExportUse() {
    return exportUse;
  }

  /**
   * Indicates the usage of the exported files.
   * @param exportUse exportUse or {@code null} for none
   */
  public GoogleCloudAiplatformV1ExportDataConfig setExportUse(java.lang.String exportUse) {
    this.exportUse = exportUse;
    return this;
  }

  /**
   * Split based on the provided filters for each set.
   * @return value or {@code null} for none
   */
  public GoogleCloudAiplatformV1ExportFilterSplit getFilterSplit() {
    return filterSplit;
  }

  /**
   * Split based on the provided filters for each set.
   * @param filterSplit filterSplit or {@code null} for none
   */
  public GoogleCloudAiplatformV1ExportDataConfig setFilterSplit(GoogleCloudAiplatformV1ExportFilterSplit filterSplit) {
    this.filterSplit = filterSplit;
    return this;
  }

  /**
   * Split based on fractions defining the size of each set.
   * @return value or {@code null} for none
   */
  public GoogleCloudAiplatformV1ExportFractionSplit getFractionSplit() {
    return fractionSplit;
  }

  /**
   * Split based on fractions defining the size of each set.
   * @param fractionSplit fractionSplit or {@code null} for none
   */
  public GoogleCloudAiplatformV1ExportDataConfig setFractionSplit(GoogleCloudAiplatformV1ExportFractionSplit fractionSplit) {
    this.fractionSplit = fractionSplit;
    return this;
  }

  /**
   * The Google Cloud Storage location where the output is to be written to. In the given directory
   * a new directory will be created with name: `export-data--` where timestamp is in YYYY-MM-
   * DDThh:mm:ss.sssZ ISO-8601 format. All export output will be written into that directory. Inside
   * that directory, annotations with the same schema will be grouped into sub directories which are
   * named with the corresponding annotations' schema title. Inside these sub directories, a
   * schema.yaml will be created to describe the output format.
   * @return value or {@code null} for none
   */
  public GoogleCloudAiplatformV1GcsDestination getGcsDestination() {
    return gcsDestination;
  }

  /**
   * The Google Cloud Storage location where the output is to be written to. In the given directory
   * a new directory will be created with name: `export-data--` where timestamp is in YYYY-MM-
   * DDThh:mm:ss.sssZ ISO-8601 format. All export output will be written into that directory. Inside
   * that directory, annotations with the same schema will be grouped into sub directories which are
   * named with the corresponding annotations' schema title. Inside these sub directories, a
   * schema.yaml will be created to describe the output format.
   * @param gcsDestination gcsDestination or {@code null} for none
   */
  public GoogleCloudAiplatformV1ExportDataConfig setGcsDestination(GoogleCloudAiplatformV1GcsDestination gcsDestination) {
    this.gcsDestination = gcsDestination;
    return this;
  }

  /**
   * The ID of a SavedQuery (annotation set) under the Dataset specified by ExportDataRequest.name
   * used for filtering Annotations for training. Only used for custom training data export use
   * cases. Only applicable to Datasets that have SavedQueries. Only Annotations that are associated
   * with this SavedQuery are used in respectively training. When used in conjunction with
   * annotations_filter, the Annotations used for training are filtered by both saved_query_id and
   * annotations_filter. Only one of saved_query_id and annotation_schema_uri should be specified as
   * both of them represent the same thing: problem type.
   * @return value or {@code null} for none
   */
  public java.lang.String getSavedQueryId() {
    return savedQueryId;
  }

  /**
   * The ID of a SavedQuery (annotation set) under the Dataset specified by ExportDataRequest.name
   * used for filtering Annotations for training. Only used for custom training data export use
   * cases. Only applicable to Datasets that have SavedQueries. Only Annotations that are associated
   * with this SavedQuery are used in respectively training. When used in conjunction with
   * annotations_filter, the Annotations used for training are filtered by both saved_query_id and
   * annotations_filter. Only one of saved_query_id and annotation_schema_uri should be specified as
   * both of them represent the same thing: problem type.
   * @param savedQueryId savedQueryId or {@code null} for none
   */
  public GoogleCloudAiplatformV1ExportDataConfig setSavedQueryId(java.lang.String savedQueryId) {
    this.savedQueryId = savedQueryId;
    return this;
  }

  @Override
  public GoogleCloudAiplatformV1ExportDataConfig set(String fieldName, Object value) {
    return (GoogleCloudAiplatformV1ExportDataConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAiplatformV1ExportDataConfig clone() {
    return (GoogleCloudAiplatformV1ExportDataConfig) super.clone();
  }

}
