/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Last used tag = 8
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ResearchScamNeighborSelectionOverride extends com.google.api.client.json.GenericJson {

  /**
   * The distance threshold to use for approximate search before exact reordering is performed, if
   * exact reordering is performed. If this is not set and exact reordering is enabled, a reasonable
   * default value will be chosen using a heuristic specified in
   * ScamConfig.ExactReordering.NeighborSelectionOverrideHeuristics. This field is ignored if exact
   * reordering is not enabled. This value must be non-NaN if set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float approxEpsilonDistance;

  /**
   * The number of neighbors to find via approximate search before exact reordering is performed. If
   * this is not set and exact reordering is enabled, a reasonable default value will be chosen
   * using the heuristic specified in
   * ScamConfig.ExactReordering.NeighborSelectionOverrideHeuristics. This field is ignored if exact
   * reordering is not enabled. This value must be > 0 if set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer approxNumNeighbors;

  /**
   * The maximum distance at which to return a neighbor. If this proto is used, at least one of this
   * and num_neighbors must be set. The default is infinity, effectively returning num_neighbors
   * neighbors regardless of distance. This value must be non-NaN if set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float epsilonDistance;

  /**
   * The maximum number of neighbors to return. If this proto is used, at least one of this and
   * epsilon_distance must be set. The default is the largest value representable as an int32,
   * effectively returning all neighbors within epsilon_distance. This value must be > 0 if set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numNeighbors;

  /**
   * If populated, this is the maximum number of neighbors that may be returned from a single shard.
   * If not populated, up to num_neighbors neighbors are returned from each shard. Setting his to a
   * smaller value than num_neighbors will increase speed at the expense of accuray by requiring
   * cross-shard merging of fewer neighbors. If this value is set, num_neighbors must also be set
   * and this value must be <= num_neighbors and >= num_neighbors / number of shards. If set, this
   * value must always be > 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numSingleShardNeighbors;

  /**
   * The maximum number of neighbors to return for a single value of the crowding attribute. The
   * crowding attribute is specified per-datapoint in the GenericFeatureVector proto, or the
   * Document proto for sparse logistic models. Crowding is described more thoroughly in
   * research/scam/utils/crowding_top_n.h. NOTES: Crowding is effectivley enabled if this value is
   * less than num_neighbors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer perCrowdingAttributeNumNeighbors;

  /**
   * The maximum number of neighbors to return from the approximate portion of the nearest-neighbor
   * search algorithm, within each shard, for a single value of the crowding attribute, before
   * performing exact reordering. Ignored if exact reordering is disabled for this dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer perCrowdingAttributePreReorderingNumNeighbors;

  /**
   * Note: currently not implemented for all database shard subclasses! Contact ScaM before using.
   * Overrides max_spill_centers for tree-X hybrid searchers configured with FIXED_NUMBER_OF_CENTERS
   * spilling. The max_spill_centers in the ScaM config is used if this field isn't set. Only valid
   * if: * Used on a tree-X hybrid ScaM config with FIXED_NUMBER_OF_CENTERS. * Value is greater than
   * zero and at most equal to num_children.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer treeXHybridLeavesSearchedOverride;

  /**
   * The distance threshold to use for approximate search before exact reordering is performed, if
   * exact reordering is performed. If this is not set and exact reordering is enabled, a reasonable
   * default value will be chosen using a heuristic specified in
   * ScamConfig.ExactReordering.NeighborSelectionOverrideHeuristics. This field is ignored if exact
   * reordering is not enabled. This value must be non-NaN if set.
   * @return value or {@code null} for none
   */
  public java.lang.Float getApproxEpsilonDistance() {
    return approxEpsilonDistance;
  }

  /**
   * The distance threshold to use for approximate search before exact reordering is performed, if
   * exact reordering is performed. If this is not set and exact reordering is enabled, a reasonable
   * default value will be chosen using a heuristic specified in
   * ScamConfig.ExactReordering.NeighborSelectionOverrideHeuristics. This field is ignored if exact
   * reordering is not enabled. This value must be non-NaN if set.
   * @param approxEpsilonDistance approxEpsilonDistance or {@code null} for none
   */
  public ResearchScamNeighborSelectionOverride setApproxEpsilonDistance(java.lang.Float approxEpsilonDistance) {
    this.approxEpsilonDistance = approxEpsilonDistance;
    return this;
  }

  /**
   * The number of neighbors to find via approximate search before exact reordering is performed. If
   * this is not set and exact reordering is enabled, a reasonable default value will be chosen
   * using the heuristic specified in
   * ScamConfig.ExactReordering.NeighborSelectionOverrideHeuristics. This field is ignored if exact
   * reordering is not enabled. This value must be > 0 if set.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getApproxNumNeighbors() {
    return approxNumNeighbors;
  }

  /**
   * The number of neighbors to find via approximate search before exact reordering is performed. If
   * this is not set and exact reordering is enabled, a reasonable default value will be chosen
   * using the heuristic specified in
   * ScamConfig.ExactReordering.NeighborSelectionOverrideHeuristics. This field is ignored if exact
   * reordering is not enabled. This value must be > 0 if set.
   * @param approxNumNeighbors approxNumNeighbors or {@code null} for none
   */
  public ResearchScamNeighborSelectionOverride setApproxNumNeighbors(java.lang.Integer approxNumNeighbors) {
    this.approxNumNeighbors = approxNumNeighbors;
    return this;
  }

  /**
   * The maximum distance at which to return a neighbor. If this proto is used, at least one of this
   * and num_neighbors must be set. The default is infinity, effectively returning num_neighbors
   * neighbors regardless of distance. This value must be non-NaN if set.
   * @return value or {@code null} for none
   */
  public java.lang.Float getEpsilonDistance() {
    return epsilonDistance;
  }

  /**
   * The maximum distance at which to return a neighbor. If this proto is used, at least one of this
   * and num_neighbors must be set. The default is infinity, effectively returning num_neighbors
   * neighbors regardless of distance. This value must be non-NaN if set.
   * @param epsilonDistance epsilonDistance or {@code null} for none
   */
  public ResearchScamNeighborSelectionOverride setEpsilonDistance(java.lang.Float epsilonDistance) {
    this.epsilonDistance = epsilonDistance;
    return this;
  }

  /**
   * The maximum number of neighbors to return. If this proto is used, at least one of this and
   * epsilon_distance must be set. The default is the largest value representable as an int32,
   * effectively returning all neighbors within epsilon_distance. This value must be > 0 if set.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumNeighbors() {
    return numNeighbors;
  }

  /**
   * The maximum number of neighbors to return. If this proto is used, at least one of this and
   * epsilon_distance must be set. The default is the largest value representable as an int32,
   * effectively returning all neighbors within epsilon_distance. This value must be > 0 if set.
   * @param numNeighbors numNeighbors or {@code null} for none
   */
  public ResearchScamNeighborSelectionOverride setNumNeighbors(java.lang.Integer numNeighbors) {
    this.numNeighbors = numNeighbors;
    return this;
  }

  /**
   * If populated, this is the maximum number of neighbors that may be returned from a single shard.
   * If not populated, up to num_neighbors neighbors are returned from each shard. Setting his to a
   * smaller value than num_neighbors will increase speed at the expense of accuray by requiring
   * cross-shard merging of fewer neighbors. If this value is set, num_neighbors must also be set
   * and this value must be <= num_neighbors and >= num_neighbors / number of shards. If set, this
   * value must always be > 0.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumSingleShardNeighbors() {
    return numSingleShardNeighbors;
  }

  /**
   * If populated, this is the maximum number of neighbors that may be returned from a single shard.
   * If not populated, up to num_neighbors neighbors are returned from each shard. Setting his to a
   * smaller value than num_neighbors will increase speed at the expense of accuray by requiring
   * cross-shard merging of fewer neighbors. If this value is set, num_neighbors must also be set
   * and this value must be <= num_neighbors and >= num_neighbors / number of shards. If set, this
   * value must always be > 0.
   * @param numSingleShardNeighbors numSingleShardNeighbors or {@code null} for none
   */
  public ResearchScamNeighborSelectionOverride setNumSingleShardNeighbors(java.lang.Integer numSingleShardNeighbors) {
    this.numSingleShardNeighbors = numSingleShardNeighbors;
    return this;
  }

  /**
   * The maximum number of neighbors to return for a single value of the crowding attribute. The
   * crowding attribute is specified per-datapoint in the GenericFeatureVector proto, or the
   * Document proto for sparse logistic models. Crowding is described more thoroughly in
   * research/scam/utils/crowding_top_n.h. NOTES: Crowding is effectivley enabled if this value is
   * less than num_neighbors.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPerCrowdingAttributeNumNeighbors() {
    return perCrowdingAttributeNumNeighbors;
  }

  /**
   * The maximum number of neighbors to return for a single value of the crowding attribute. The
   * crowding attribute is specified per-datapoint in the GenericFeatureVector proto, or the
   * Document proto for sparse logistic models. Crowding is described more thoroughly in
   * research/scam/utils/crowding_top_n.h. NOTES: Crowding is effectivley enabled if this value is
   * less than num_neighbors.
   * @param perCrowdingAttributeNumNeighbors perCrowdingAttributeNumNeighbors or {@code null} for none
   */
  public ResearchScamNeighborSelectionOverride setPerCrowdingAttributeNumNeighbors(java.lang.Integer perCrowdingAttributeNumNeighbors) {
    this.perCrowdingAttributeNumNeighbors = perCrowdingAttributeNumNeighbors;
    return this;
  }

  /**
   * The maximum number of neighbors to return from the approximate portion of the nearest-neighbor
   * search algorithm, within each shard, for a single value of the crowding attribute, before
   * performing exact reordering. Ignored if exact reordering is disabled for this dataset.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPerCrowdingAttributePreReorderingNumNeighbors() {
    return perCrowdingAttributePreReorderingNumNeighbors;
  }

  /**
   * The maximum number of neighbors to return from the approximate portion of the nearest-neighbor
   * search algorithm, within each shard, for a single value of the crowding attribute, before
   * performing exact reordering. Ignored if exact reordering is disabled for this dataset.
   * @param perCrowdingAttributePreReorderingNumNeighbors perCrowdingAttributePreReorderingNumNeighbors or {@code null} for none
   */
  public ResearchScamNeighborSelectionOverride setPerCrowdingAttributePreReorderingNumNeighbors(java.lang.Integer perCrowdingAttributePreReorderingNumNeighbors) {
    this.perCrowdingAttributePreReorderingNumNeighbors = perCrowdingAttributePreReorderingNumNeighbors;
    return this;
  }

  /**
   * Note: currently not implemented for all database shard subclasses! Contact ScaM before using.
   * Overrides max_spill_centers for tree-X hybrid searchers configured with FIXED_NUMBER_OF_CENTERS
   * spilling. The max_spill_centers in the ScaM config is used if this field isn't set. Only valid
   * if: * Used on a tree-X hybrid ScaM config with FIXED_NUMBER_OF_CENTERS. * Value is greater than
   * zero and at most equal to num_children.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTreeXHybridLeavesSearchedOverride() {
    return treeXHybridLeavesSearchedOverride;
  }

  /**
   * Note: currently not implemented for all database shard subclasses! Contact ScaM before using.
   * Overrides max_spill_centers for tree-X hybrid searchers configured with FIXED_NUMBER_OF_CENTERS
   * spilling. The max_spill_centers in the ScaM config is used if this field isn't set. Only valid
   * if: * Used on a tree-X hybrid ScaM config with FIXED_NUMBER_OF_CENTERS. * Value is greater than
   * zero and at most equal to num_children.
   * @param treeXHybridLeavesSearchedOverride treeXHybridLeavesSearchedOverride or {@code null} for none
   */
  public ResearchScamNeighborSelectionOverride setTreeXHybridLeavesSearchedOverride(java.lang.Integer treeXHybridLeavesSearchedOverride) {
    this.treeXHybridLeavesSearchedOverride = treeXHybridLeavesSearchedOverride;
    return this;
  }

  @Override
  public ResearchScamNeighborSelectionOverride set(String fieldName, Object value) {
    return (ResearchScamNeighborSelectionOverride) super.set(fieldName, value);
  }

  @Override
  public ResearchScamNeighborSelectionOverride clone() {
    return (ResearchScamNeighborSelectionOverride) super.clone();
  }

}
