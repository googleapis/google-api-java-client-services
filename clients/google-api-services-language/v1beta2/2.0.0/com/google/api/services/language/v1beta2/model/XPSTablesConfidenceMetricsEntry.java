/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.language.v1beta2.model;

/**
 * Metrics for a single confidence threshold.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Natural Language API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class XPSTablesConfidenceMetricsEntry extends com.google.api.client.json.GenericJson {

  /**
   * The confidence threshold value used to compute the metrics.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double confidenceThreshold;

  /**
   * The harmonic mean of recall and precision. (2 * precision * recall) / (precision + recall)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double f1Score;

  /**
   * False negative count.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long falseNegativeCount;

  /**
   * False positive count.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long falsePositiveCount;

  /**
   * FPR = #false positives / (#false positives + #true negatives)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double falsePositiveRate;

  /**
   * Precision = #true positives / (#true positives + #false positives).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double precision;

  /**
   * Recall = #true positives / (#true positives + #false negatives).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double recall;

  /**
   * True negative count.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long trueNegativeCount;

  /**
   * True positive count.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long truePositiveCount;

  /**
   * TPR = #true positives / (#true positives + #false negatvies)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double truePositiveRate;

  /**
   * The confidence threshold value used to compute the metrics.
   * @return value or {@code null} for none
   */
  public java.lang.Double getConfidenceThreshold() {
    return confidenceThreshold;
  }

  /**
   * The confidence threshold value used to compute the metrics.
   * @param confidenceThreshold confidenceThreshold or {@code null} for none
   */
  public XPSTablesConfidenceMetricsEntry setConfidenceThreshold(java.lang.Double confidenceThreshold) {
    this.confidenceThreshold = confidenceThreshold;
    return this;
  }

  /**
   * The harmonic mean of recall and precision. (2 * precision * recall) / (precision + recall)
   * @return value or {@code null} for none
   */
  public java.lang.Double getF1Score() {
    return f1Score;
  }

  /**
   * The harmonic mean of recall and precision. (2 * precision * recall) / (precision + recall)
   * @param f1Score f1Score or {@code null} for none
   */
  public XPSTablesConfidenceMetricsEntry setF1Score(java.lang.Double f1Score) {
    this.f1Score = f1Score;
    return this;
  }

  /**
   * False negative count.
   * @return value or {@code null} for none
   */
  public java.lang.Long getFalseNegativeCount() {
    return falseNegativeCount;
  }

  /**
   * False negative count.
   * @param falseNegativeCount falseNegativeCount or {@code null} for none
   */
  public XPSTablesConfidenceMetricsEntry setFalseNegativeCount(java.lang.Long falseNegativeCount) {
    this.falseNegativeCount = falseNegativeCount;
    return this;
  }

  /**
   * False positive count.
   * @return value or {@code null} for none
   */
  public java.lang.Long getFalsePositiveCount() {
    return falsePositiveCount;
  }

  /**
   * False positive count.
   * @param falsePositiveCount falsePositiveCount or {@code null} for none
   */
  public XPSTablesConfidenceMetricsEntry setFalsePositiveCount(java.lang.Long falsePositiveCount) {
    this.falsePositiveCount = falsePositiveCount;
    return this;
  }

  /**
   * FPR = #false positives / (#false positives + #true negatives)
   * @return value or {@code null} for none
   */
  public java.lang.Double getFalsePositiveRate() {
    return falsePositiveRate;
  }

  /**
   * FPR = #false positives / (#false positives + #true negatives)
   * @param falsePositiveRate falsePositiveRate or {@code null} for none
   */
  public XPSTablesConfidenceMetricsEntry setFalsePositiveRate(java.lang.Double falsePositiveRate) {
    this.falsePositiveRate = falsePositiveRate;
    return this;
  }

  /**
   * Precision = #true positives / (#true positives + #false positives).
   * @return value or {@code null} for none
   */
  public java.lang.Double getPrecision() {
    return precision;
  }

  /**
   * Precision = #true positives / (#true positives + #false positives).
   * @param precision precision or {@code null} for none
   */
  public XPSTablesConfidenceMetricsEntry setPrecision(java.lang.Double precision) {
    this.precision = precision;
    return this;
  }

  /**
   * Recall = #true positives / (#true positives + #false negatives).
   * @return value or {@code null} for none
   */
  public java.lang.Double getRecall() {
    return recall;
  }

  /**
   * Recall = #true positives / (#true positives + #false negatives).
   * @param recall recall or {@code null} for none
   */
  public XPSTablesConfidenceMetricsEntry setRecall(java.lang.Double recall) {
    this.recall = recall;
    return this;
  }

  /**
   * True negative count.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTrueNegativeCount() {
    return trueNegativeCount;
  }

  /**
   * True negative count.
   * @param trueNegativeCount trueNegativeCount or {@code null} for none
   */
  public XPSTablesConfidenceMetricsEntry setTrueNegativeCount(java.lang.Long trueNegativeCount) {
    this.trueNegativeCount = trueNegativeCount;
    return this;
  }

  /**
   * True positive count.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTruePositiveCount() {
    return truePositiveCount;
  }

  /**
   * True positive count.
   * @param truePositiveCount truePositiveCount or {@code null} for none
   */
  public XPSTablesConfidenceMetricsEntry setTruePositiveCount(java.lang.Long truePositiveCount) {
    this.truePositiveCount = truePositiveCount;
    return this;
  }

  /**
   * TPR = #true positives / (#true positives + #false negatvies)
   * @return value or {@code null} for none
   */
  public java.lang.Double getTruePositiveRate() {
    return truePositiveRate;
  }

  /**
   * TPR = #true positives / (#true positives + #false negatvies)
   * @param truePositiveRate truePositiveRate or {@code null} for none
   */
  public XPSTablesConfidenceMetricsEntry setTruePositiveRate(java.lang.Double truePositiveRate) {
    this.truePositiveRate = truePositiveRate;
    return this;
  }

  @Override
  public XPSTablesConfidenceMetricsEntry set(String fieldName, Object value) {
    return (XPSTablesConfidenceMetricsEntry) super.set(fieldName, value);
  }

  @Override
  public XPSTablesConfidenceMetricsEntry clone() {
    return (XPSTablesConfidenceMetricsEntry) super.clone();
  }

}
