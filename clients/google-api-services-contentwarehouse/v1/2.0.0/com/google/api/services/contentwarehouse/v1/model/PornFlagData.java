/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A protocol buffer to store the url, referer and porn flag for a url. and an optional image score.
 * Next available tag id: 51.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PornFlagData extends com.google.api.client.json.GenericJson {

  /**
   * Content score - computed on the image pixel data only. Additionally, we store a version and
   * minor version number of the model which was used to compute this score. Note: these fields are
   * copies of adaboost_image_feature_porn* in ImageData.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float adaboostContentScore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer adaboostContentScoreMinorVersion;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer adaboostContentScoreVersion;

  /**
   * Aggregated brain_porn_scores for navboost co-clicked images. Historical: this signal is
   * deprecated and no longer populated as of 2020-12-01. Refer to b/172897542 for more information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageSafesearchContentBrainPornAnnotation coclickBrainScores;

  /**
   * Score predicting how likely an image is offensive or suggestive about CSAI (child sexual abuse
   * imagery).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float csaiScore;

  /**
   * DebugInfo stores debug information from the overall classifier. This allows for instance to
   * update counters related to blacklisting without running the full classifier again.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ImagePornDebugInfo> debugInfo;

  static {
    // hack to force ProGuard to consider ImagePornDebugInfo used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ImagePornDebugInfo.class);
  }

  /**
   * Final offensive score based on image salient terms and image OCR vulgar and offensive scores.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float finalOffensiveScore;

  /**
   * Final violence score based on some image signals (brain pixel score, co-clicked images violence
   * score, navboost queries score, etc.).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float finalViolenceScore;

  /**
   * A string that indicates the version of SafeSearch classifier used to compute
   * final_violence_score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String finalViolenceScoreVersion;

  /**
   * PornStatsImage is repeated even though we use only a single version, to help with rolling out
   * new versions with miminum risk. Multiple versions should exist only for a short window of time.
   * Once the new version is rolled out, the data for older versions should no longer be generated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PornStatsImage> imageStats;

  /**
   * A proto that stores SafeSearch internal signals that are not exported to clients. SafeSearch
   * team does not provide any guarantees about the presence or the semantics of these signals in
   * the future.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SafesearchInternalImageSignals internalSignals;

  /**
   * largest face, scaled by 1000 This field is same as ImageData.largest_face_frac.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float largestFaceFrac;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer largestFaceFraction;

  /**
   * number of faces
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numberFaces;

  /**
   * Information about image OCR text. For details see
   * image/safesearch/content/public/ocr_annotation.proto.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageSafesearchContentOCRAnnotation ocrAnnotation;

  /**
   * Vulgar score of the text found by OCR in the image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float ocrVulgarScore;

  /**
   * QuimbyCongas-based detection of offensive symbols in the image (currently swastika and Nazi
   * yellow badge).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageSafesearchContentOffensiveSymbolDetection offensiveSymbolDetection;

  /**
   * Overall porn score that determines the porn restricts used during image search retrieval.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float overallPornScore;

  /**
   * Binary version of the PhotoDNA hash (144 bytes long). If not set (has_photodna_hash() == false)
   * it means that it was not computed, if empty (has_photodna_hash() == true && photodna_hash() ==
   * "") it means that the computation failed (cannot be computed for images smaller than 50 x 50).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String photodnaHash;

  /**
   * This field is set to true when we are pretty confident that the image is porn (with higher
   * precision than the img_porn_moderate restrict). In particular, it means that the image might be
   * demoted for non-porn queries when SafeSearch is Off.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean pornWithHighConfidence;

  /**
   * OR of the prop_porn_flag and prop_softporn_flag.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean propAnyPornFlag;

  /**
   * Text classifier properties for the referrer page.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean propPornFlag;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean propSoftpornFlag;

  /**
   * QBST-based image offensive score, Navboost based
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float qbstOffensiveScore;

  /**
   * QBST-based image spoof score, Navboost based, unrelated to the pixel-based score in
   * PornAnnotation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float qbstSpoofScore;

  /**
   * Query statistics from Navboost logs. For more details see
   * classifier/porn/proto/image_porn_classifier_signals.proto.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ClassifierPornQueryStats queryStats;

  /**
   * Aggregated navboost query violence score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float queryTextViolenceScore;

  /**
   * url of the referer page
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String referer;

  /**
   * Information about referrers and their porn classification. For details see
   * classifier/porn/proto/image_porn_classifier_signals.proto.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ClassifierPornReferrerCounts referrerCounts;

  /**
   * Starburst-based score predicting sexualization level of the image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float semanticSexualizationScore;

  /**
   * PornStatsText is repeated even though we use only a single version, to help with rolling out
   * new versions with miminum risk. Multiple versions should exist only for a short window of time.
   * Once the new version is rolled out, the data for older versions should no longer be generated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PornStatsText> textStats;

  /**
   * url of the image
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * Information about the URL porn scores for image URLs associated with this image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ClassifierPornAggregatedUrlPornScores urlPornScores;

  /**
   * Content score - computed on the image pixel data only. Additionally, we store a version and
   * minor version number of the model which was used to compute this score. Note: these fields are
   * copies of adaboost_image_feature_porn* in ImageData.
   * @return value or {@code null} for none
   */
  public java.lang.Float getAdaboostContentScore() {
    return adaboostContentScore;
  }

  /**
   * Content score - computed on the image pixel data only. Additionally, we store a version and
   * minor version number of the model which was used to compute this score. Note: these fields are
   * copies of adaboost_image_feature_porn* in ImageData.
   * @param adaboostContentScore adaboostContentScore or {@code null} for none
   */
  public PornFlagData setAdaboostContentScore(java.lang.Float adaboostContentScore) {
    this.adaboostContentScore = adaboostContentScore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAdaboostContentScoreMinorVersion() {
    return adaboostContentScoreMinorVersion;
  }

  /**
   * @param adaboostContentScoreMinorVersion adaboostContentScoreMinorVersion or {@code null} for none
   */
  public PornFlagData setAdaboostContentScoreMinorVersion(java.lang.Integer adaboostContentScoreMinorVersion) {
    this.adaboostContentScoreMinorVersion = adaboostContentScoreMinorVersion;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAdaboostContentScoreVersion() {
    return adaboostContentScoreVersion;
  }

  /**
   * @param adaboostContentScoreVersion adaboostContentScoreVersion or {@code null} for none
   */
  public PornFlagData setAdaboostContentScoreVersion(java.lang.Integer adaboostContentScoreVersion) {
    this.adaboostContentScoreVersion = adaboostContentScoreVersion;
    return this;
  }

  /**
   * Aggregated brain_porn_scores for navboost co-clicked images. Historical: this signal is
   * deprecated and no longer populated as of 2020-12-01. Refer to b/172897542 for more information.
   * @return value or {@code null} for none
   */
  public ImageSafesearchContentBrainPornAnnotation getCoclickBrainScores() {
    return coclickBrainScores;
  }

  /**
   * Aggregated brain_porn_scores for navboost co-clicked images. Historical: this signal is
   * deprecated and no longer populated as of 2020-12-01. Refer to b/172897542 for more information.
   * @param coclickBrainScores coclickBrainScores or {@code null} for none
   */
  public PornFlagData setCoclickBrainScores(ImageSafesearchContentBrainPornAnnotation coclickBrainScores) {
    this.coclickBrainScores = coclickBrainScores;
    return this;
  }

  /**
   * Score predicting how likely an image is offensive or suggestive about CSAI (child sexual abuse
   * imagery).
   * @return value or {@code null} for none
   */
  public java.lang.Float getCsaiScore() {
    return csaiScore;
  }

  /**
   * Score predicting how likely an image is offensive or suggestive about CSAI (child sexual abuse
   * imagery).
   * @param csaiScore csaiScore or {@code null} for none
   */
  public PornFlagData setCsaiScore(java.lang.Float csaiScore) {
    this.csaiScore = csaiScore;
    return this;
  }

  /**
   * DebugInfo stores debug information from the overall classifier. This allows for instance to
   * update counters related to blacklisting without running the full classifier again.
   * @return value or {@code null} for none
   */
  public java.util.List<ImagePornDebugInfo> getDebugInfo() {
    return debugInfo;
  }

  /**
   * DebugInfo stores debug information from the overall classifier. This allows for instance to
   * update counters related to blacklisting without running the full classifier again.
   * @param debugInfo debugInfo or {@code null} for none
   */
  public PornFlagData setDebugInfo(java.util.List<ImagePornDebugInfo> debugInfo) {
    this.debugInfo = debugInfo;
    return this;
  }

  /**
   * Final offensive score based on image salient terms and image OCR vulgar and offensive scores.
   * @return value or {@code null} for none
   */
  public java.lang.Float getFinalOffensiveScore() {
    return finalOffensiveScore;
  }

  /**
   * Final offensive score based on image salient terms and image OCR vulgar and offensive scores.
   * @param finalOffensiveScore finalOffensiveScore or {@code null} for none
   */
  public PornFlagData setFinalOffensiveScore(java.lang.Float finalOffensiveScore) {
    this.finalOffensiveScore = finalOffensiveScore;
    return this;
  }

  /**
   * Final violence score based on some image signals (brain pixel score, co-clicked images violence
   * score, navboost queries score, etc.).
   * @return value or {@code null} for none
   */
  public java.lang.Float getFinalViolenceScore() {
    return finalViolenceScore;
  }

  /**
   * Final violence score based on some image signals (brain pixel score, co-clicked images violence
   * score, navboost queries score, etc.).
   * @param finalViolenceScore finalViolenceScore or {@code null} for none
   */
  public PornFlagData setFinalViolenceScore(java.lang.Float finalViolenceScore) {
    this.finalViolenceScore = finalViolenceScore;
    return this;
  }

  /**
   * A string that indicates the version of SafeSearch classifier used to compute
   * final_violence_score.
   * @return value or {@code null} for none
   */
  public java.lang.String getFinalViolenceScoreVersion() {
    return finalViolenceScoreVersion;
  }

  /**
   * A string that indicates the version of SafeSearch classifier used to compute
   * final_violence_score.
   * @param finalViolenceScoreVersion finalViolenceScoreVersion or {@code null} for none
   */
  public PornFlagData setFinalViolenceScoreVersion(java.lang.String finalViolenceScoreVersion) {
    this.finalViolenceScoreVersion = finalViolenceScoreVersion;
    return this;
  }

  /**
   * PornStatsImage is repeated even though we use only a single version, to help with rolling out
   * new versions with miminum risk. Multiple versions should exist only for a short window of time.
   * Once the new version is rolled out, the data for older versions should no longer be generated.
   * @return value or {@code null} for none
   */
  public java.util.List<PornStatsImage> getImageStats() {
    return imageStats;
  }

  /**
   * PornStatsImage is repeated even though we use only a single version, to help with rolling out
   * new versions with miminum risk. Multiple versions should exist only for a short window of time.
   * Once the new version is rolled out, the data for older versions should no longer be generated.
   * @param imageStats imageStats or {@code null} for none
   */
  public PornFlagData setImageStats(java.util.List<PornStatsImage> imageStats) {
    this.imageStats = imageStats;
    return this;
  }

  /**
   * A proto that stores SafeSearch internal signals that are not exported to clients. SafeSearch
   * team does not provide any guarantees about the presence or the semantics of these signals in
   * the future.
   * @return value or {@code null} for none
   */
  public SafesearchInternalImageSignals getInternalSignals() {
    return internalSignals;
  }

  /**
   * A proto that stores SafeSearch internal signals that are not exported to clients. SafeSearch
   * team does not provide any guarantees about the presence or the semantics of these signals in
   * the future.
   * @param internalSignals internalSignals or {@code null} for none
   */
  public PornFlagData setInternalSignals(SafesearchInternalImageSignals internalSignals) {
    this.internalSignals = internalSignals;
    return this;
  }

  /**
   * largest face, scaled by 1000 This field is same as ImageData.largest_face_frac.
   * @return value or {@code null} for none
   */
  public java.lang.Float getLargestFaceFrac() {
    return largestFaceFrac;
  }

  /**
   * largest face, scaled by 1000 This field is same as ImageData.largest_face_frac.
   * @param largestFaceFrac largestFaceFrac or {@code null} for none
   */
  public PornFlagData setLargestFaceFrac(java.lang.Float largestFaceFrac) {
    this.largestFaceFrac = largestFaceFrac;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLargestFaceFraction() {
    return largestFaceFraction;
  }

  /**
   * @param largestFaceFraction largestFaceFraction or {@code null} for none
   */
  public PornFlagData setLargestFaceFraction(java.lang.Integer largestFaceFraction) {
    this.largestFaceFraction = largestFaceFraction;
    return this;
  }

  /**
   * number of faces
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumberFaces() {
    return numberFaces;
  }

  /**
   * number of faces
   * @param numberFaces numberFaces or {@code null} for none
   */
  public PornFlagData setNumberFaces(java.lang.Integer numberFaces) {
    this.numberFaces = numberFaces;
    return this;
  }

  /**
   * Information about image OCR text. For details see
   * image/safesearch/content/public/ocr_annotation.proto.
   * @return value or {@code null} for none
   */
  public ImageSafesearchContentOCRAnnotation getOcrAnnotation() {
    return ocrAnnotation;
  }

  /**
   * Information about image OCR text. For details see
   * image/safesearch/content/public/ocr_annotation.proto.
   * @param ocrAnnotation ocrAnnotation or {@code null} for none
   */
  public PornFlagData setOcrAnnotation(ImageSafesearchContentOCRAnnotation ocrAnnotation) {
    this.ocrAnnotation = ocrAnnotation;
    return this;
  }

  /**
   * Vulgar score of the text found by OCR in the image.
   * @return value or {@code null} for none
   */
  public java.lang.Float getOcrVulgarScore() {
    return ocrVulgarScore;
  }

  /**
   * Vulgar score of the text found by OCR in the image.
   * @param ocrVulgarScore ocrVulgarScore or {@code null} for none
   */
  public PornFlagData setOcrVulgarScore(java.lang.Float ocrVulgarScore) {
    this.ocrVulgarScore = ocrVulgarScore;
    return this;
  }

  /**
   * QuimbyCongas-based detection of offensive symbols in the image (currently swastika and Nazi
   * yellow badge).
   * @return value or {@code null} for none
   */
  public ImageSafesearchContentOffensiveSymbolDetection getOffensiveSymbolDetection() {
    return offensiveSymbolDetection;
  }

  /**
   * QuimbyCongas-based detection of offensive symbols in the image (currently swastika and Nazi
   * yellow badge).
   * @param offensiveSymbolDetection offensiveSymbolDetection or {@code null} for none
   */
  public PornFlagData setOffensiveSymbolDetection(ImageSafesearchContentOffensiveSymbolDetection offensiveSymbolDetection) {
    this.offensiveSymbolDetection = offensiveSymbolDetection;
    return this;
  }

  /**
   * Overall porn score that determines the porn restricts used during image search retrieval.
   * @return value or {@code null} for none
   */
  public java.lang.Float getOverallPornScore() {
    return overallPornScore;
  }

  /**
   * Overall porn score that determines the porn restricts used during image search retrieval.
   * @param overallPornScore overallPornScore or {@code null} for none
   */
  public PornFlagData setOverallPornScore(java.lang.Float overallPornScore) {
    this.overallPornScore = overallPornScore;
    return this;
  }

  /**
   * Binary version of the PhotoDNA hash (144 bytes long). If not set (has_photodna_hash() == false)
   * it means that it was not computed, if empty (has_photodna_hash() == true && photodna_hash() ==
   * "") it means that the computation failed (cannot be computed for images smaller than 50 x 50).
   * @see #decodePhotodnaHash()
   * @return value or {@code null} for none
   */
  public java.lang.String getPhotodnaHash() {
    return photodnaHash;
  }

  /**
   * Binary version of the PhotoDNA hash (144 bytes long). If not set (has_photodna_hash() == false)
   * it means that it was not computed, if empty (has_photodna_hash() == true && photodna_hash() ==
   * "") it means that the computation failed (cannot be computed for images smaller than 50 x 50).
   * @see #getPhotodnaHash()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodePhotodnaHash() {
    return com.google.api.client.util.Base64.decodeBase64(photodnaHash);
  }

  /**
   * Binary version of the PhotoDNA hash (144 bytes long). If not set (has_photodna_hash() == false)
   * it means that it was not computed, if empty (has_photodna_hash() == true && photodna_hash() ==
   * "") it means that the computation failed (cannot be computed for images smaller than 50 x 50).
   * @see #encodePhotodnaHash()
   * @param photodnaHash photodnaHash or {@code null} for none
   */
  public PornFlagData setPhotodnaHash(java.lang.String photodnaHash) {
    this.photodnaHash = photodnaHash;
    return this;
  }

  /**
   * Binary version of the PhotoDNA hash (144 bytes long). If not set (has_photodna_hash() == false)
   * it means that it was not computed, if empty (has_photodna_hash() == true && photodna_hash() ==
   * "") it means that the computation failed (cannot be computed for images smaller than 50 x 50).
   * @see #setPhotodnaHash()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public PornFlagData encodePhotodnaHash(byte[] photodnaHash) {
    this.photodnaHash = com.google.api.client.util.Base64.encodeBase64URLSafeString(photodnaHash);
    return this;
  }

  /**
   * This field is set to true when we are pretty confident that the image is porn (with higher
   * precision than the img_porn_moderate restrict). In particular, it means that the image might be
   * demoted for non-porn queries when SafeSearch is Off.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPornWithHighConfidence() {
    return pornWithHighConfidence;
  }

  /**
   * This field is set to true when we are pretty confident that the image is porn (with higher
   * precision than the img_porn_moderate restrict). In particular, it means that the image might be
   * demoted for non-porn queries when SafeSearch is Off.
   * @param pornWithHighConfidence pornWithHighConfidence or {@code null} for none
   */
  public PornFlagData setPornWithHighConfidence(java.lang.Boolean pornWithHighConfidence) {
    this.pornWithHighConfidence = pornWithHighConfidence;
    return this;
  }

  /**
   * OR of the prop_porn_flag and prop_softporn_flag.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPropAnyPornFlag() {
    return propAnyPornFlag;
  }

  /**
   * OR of the prop_porn_flag and prop_softporn_flag.
   * @param propAnyPornFlag propAnyPornFlag or {@code null} for none
   */
  public PornFlagData setPropAnyPornFlag(java.lang.Boolean propAnyPornFlag) {
    this.propAnyPornFlag = propAnyPornFlag;
    return this;
  }

  /**
   * Text classifier properties for the referrer page.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPropPornFlag() {
    return propPornFlag;
  }

  /**
   * Text classifier properties for the referrer page.
   * @param propPornFlag propPornFlag or {@code null} for none
   */
  public PornFlagData setPropPornFlag(java.lang.Boolean propPornFlag) {
    this.propPornFlag = propPornFlag;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPropSoftpornFlag() {
    return propSoftpornFlag;
  }

  /**
   * @param propSoftpornFlag propSoftpornFlag or {@code null} for none
   */
  public PornFlagData setPropSoftpornFlag(java.lang.Boolean propSoftpornFlag) {
    this.propSoftpornFlag = propSoftpornFlag;
    return this;
  }

  /**
   * QBST-based image offensive score, Navboost based
   * @return value or {@code null} for none
   */
  public java.lang.Float getQbstOffensiveScore() {
    return qbstOffensiveScore;
  }

  /**
   * QBST-based image offensive score, Navboost based
   * @param qbstOffensiveScore qbstOffensiveScore or {@code null} for none
   */
  public PornFlagData setQbstOffensiveScore(java.lang.Float qbstOffensiveScore) {
    this.qbstOffensiveScore = qbstOffensiveScore;
    return this;
  }

  /**
   * QBST-based image spoof score, Navboost based, unrelated to the pixel-based score in
   * PornAnnotation.
   * @return value or {@code null} for none
   */
  public java.lang.Float getQbstSpoofScore() {
    return qbstSpoofScore;
  }

  /**
   * QBST-based image spoof score, Navboost based, unrelated to the pixel-based score in
   * PornAnnotation.
   * @param qbstSpoofScore qbstSpoofScore or {@code null} for none
   */
  public PornFlagData setQbstSpoofScore(java.lang.Float qbstSpoofScore) {
    this.qbstSpoofScore = qbstSpoofScore;
    return this;
  }

  /**
   * Query statistics from Navboost logs. For more details see
   * classifier/porn/proto/image_porn_classifier_signals.proto.
   * @return value or {@code null} for none
   */
  public ClassifierPornQueryStats getQueryStats() {
    return queryStats;
  }

  /**
   * Query statistics from Navboost logs. For more details see
   * classifier/porn/proto/image_porn_classifier_signals.proto.
   * @param queryStats queryStats or {@code null} for none
   */
  public PornFlagData setQueryStats(ClassifierPornQueryStats queryStats) {
    this.queryStats = queryStats;
    return this;
  }

  /**
   * Aggregated navboost query violence score.
   * @return value or {@code null} for none
   */
  public java.lang.Float getQueryTextViolenceScore() {
    return queryTextViolenceScore;
  }

  /**
   * Aggregated navboost query violence score.
   * @param queryTextViolenceScore queryTextViolenceScore or {@code null} for none
   */
  public PornFlagData setQueryTextViolenceScore(java.lang.Float queryTextViolenceScore) {
    this.queryTextViolenceScore = queryTextViolenceScore;
    return this;
  }

  /**
   * url of the referer page
   * @return value or {@code null} for none
   */
  public java.lang.String getReferer() {
    return referer;
  }

  /**
   * url of the referer page
   * @param referer referer or {@code null} for none
   */
  public PornFlagData setReferer(java.lang.String referer) {
    this.referer = referer;
    return this;
  }

  /**
   * Information about referrers and their porn classification. For details see
   * classifier/porn/proto/image_porn_classifier_signals.proto.
   * @return value or {@code null} for none
   */
  public ClassifierPornReferrerCounts getReferrerCounts() {
    return referrerCounts;
  }

  /**
   * Information about referrers and their porn classification. For details see
   * classifier/porn/proto/image_porn_classifier_signals.proto.
   * @param referrerCounts referrerCounts or {@code null} for none
   */
  public PornFlagData setReferrerCounts(ClassifierPornReferrerCounts referrerCounts) {
    this.referrerCounts = referrerCounts;
    return this;
  }

  /**
   * Starburst-based score predicting sexualization level of the image.
   * @return value or {@code null} for none
   */
  public java.lang.Float getSemanticSexualizationScore() {
    return semanticSexualizationScore;
  }

  /**
   * Starburst-based score predicting sexualization level of the image.
   * @param semanticSexualizationScore semanticSexualizationScore or {@code null} for none
   */
  public PornFlagData setSemanticSexualizationScore(java.lang.Float semanticSexualizationScore) {
    this.semanticSexualizationScore = semanticSexualizationScore;
    return this;
  }

  /**
   * PornStatsText is repeated even though we use only a single version, to help with rolling out
   * new versions with miminum risk. Multiple versions should exist only for a short window of time.
   * Once the new version is rolled out, the data for older versions should no longer be generated.
   * @return value or {@code null} for none
   */
  public java.util.List<PornStatsText> getTextStats() {
    return textStats;
  }

  /**
   * PornStatsText is repeated even though we use only a single version, to help with rolling out
   * new versions with miminum risk. Multiple versions should exist only for a short window of time.
   * Once the new version is rolled out, the data for older versions should no longer be generated.
   * @param textStats textStats or {@code null} for none
   */
  public PornFlagData setTextStats(java.util.List<PornStatsText> textStats) {
    this.textStats = textStats;
    return this;
  }

  /**
   * url of the image
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * url of the image
   * @param url url or {@code null} for none
   */
  public PornFlagData setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  /**
   * Information about the URL porn scores for image URLs associated with this image.
   * @return value or {@code null} for none
   */
  public ClassifierPornAggregatedUrlPornScores getUrlPornScores() {
    return urlPornScores;
  }

  /**
   * Information about the URL porn scores for image URLs associated with this image.
   * @param urlPornScores urlPornScores or {@code null} for none
   */
  public PornFlagData setUrlPornScores(ClassifierPornAggregatedUrlPornScores urlPornScores) {
    this.urlPornScores = urlPornScores;
    return this;
  }

  @Override
  public PornFlagData set(String fieldName, Object value) {
    return (PornFlagData) super.set(fieldName, value);
  }

  @Override
  public PornFlagData clone() {
    return (PornFlagData) super.clone();
  }

}
