/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.addressvalidation.v1.model;

/**
 * The USPS data for the address. `uspsData` is not guaranteed to be fully populated for every US or
 * PR address sent to the Address Validation API. It's recommended to integrate the backup address
 * fields in the response if you utilize uspsData as the primary part of the response.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Address Validation API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleMapsAddressvalidationV1UspsData extends com.google.api.client.json.GenericJson {

  /**
   * Abbreviated city.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String abbreviatedCity;

  /**
   * Type of the address record that matches the input address. * `F`: FIRM. This is a match to a
   * Firm Record, which is the finest level of match available for an address. * `G`: GENERAL
   * DELIVERY. This is a match to a General Delivery record. * `H`: BUILDING / APARTMENT. This is a
   * match to a Building or Apartment record. * `P`: POST OFFICE BOX. This is a match to a Post
   * Office Box. * `R`: RURAL ROUTE or HIGHWAY CONTRACT: This is a match to either a Rural Route or
   * a Highway Contract record, both of which may have associated Box Number ranges. * `S`: STREET
   * RECORD: This is a match to a Street record containing a valid primary number range.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String addressRecordType;

  /**
   * The carrier route code. A four character code consisting of a one letter prefix and a three
   * digit route designator. Prefixes: * `C`: Carrier route (or city route) * `R`: Rural route *
   * `H`: Highway Contract Route * `B`: Post Office Box Section * `G`: General delivery unit
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String carrierRoute;

  /**
   * Carrier route rate sort indicator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String carrierRouteIndicator;

  /**
   * Indicator that the request has been CASS processed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean cassProcessed;

  /**
   * County name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String county;

  /**
   * Indicator that a default address was found, but more specific addresses exists.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean defaultAddress;

  /**
   * The delivery point check digit. This number is added to the end of the delivery_point_barcode
   * for mechanically scanned mail. Adding all the digits of the delivery_point_barcode,
   * delivery_point_check_digit, postal code, and ZIP+4 together should yield a number divisible by
   * 10.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deliveryPointCheckDigit;

  /**
   * 2 digit delivery point code
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deliveryPointCode;

  /**
   * Indicates if the address is a CMRA (Commercial Mail Receiving Agency)--a private business
   * receiving mail for clients. Returns a single character. * `Y`: The address is a CMRA * `N`: The
   * address is not a CMRA
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dpvCmra;

  /**
   * The possible values for DPV confirmation. Returns a single character or returns no value. *
   * `N`: Primary and any secondary number information failed to DPV confirm. * `D`: Address was DPV
   * confirmed for the primary number only, and the secondary number information was missing. * `S`:
   * Address was DPV confirmed for the primary number only, and the secondary number information was
   * present but not confirmed. * `Y`: Address was DPV confirmed for primary and any secondary
   * numbers. * Empty: If the response does not contain a `dpv_confirmation` value, the address was
   * not submitted for DPV confirmation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dpvConfirmation;

  /**
   * Flag indicates addresses where USPS cannot knock on a door to deliver mail. Returns a single
   * character. * `Y`: The door is not accessible. * `N`: No indication the door is not accessible.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dpvDoorNotAccessible;

  /**
   * Flag indicates mail is delivered to a single receptable at a site. Returns a single character.
   * * `Y`: The mail is delivered to a single receptable at a site. * `N`: The mail is not delivered
   * to a single receptable at a site.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dpvDrop;

  /**
   * Indicates that more than one DPV return code is valid for the address. Returns a single
   * character. * `Y`: Address was DPV confirmed for primary and any secondary numbers. * `N`:
   * Primary and any secondary number information failed to DPV confirm. * `S`: Address was DPV
   * confirmed for the primary number only, and the secondary number information was present but not
   * confirmed, or a single trailing alpha on a primary number was dropped to make a DPV match and
   * secondary information required. * `D`: Address was DPV confirmed for the primary number only,
   * and the secondary number information was missing. * `R`: Address confirmed but assigned to
   * phantom route R777 and R779 and USPS delivery is not provided.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dpvEnhancedDeliveryCode;

  /**
   * The footnotes from delivery point validation. Multiple footnotes may be strung together in the
   * same string. * `AA`: Input address matched to the ZIP+4 file * `A1`: Input address was not
   * matched to the ZIP+4 file * `BB`: Matched to DPV (all components) * `CC`: Secondary number not
   * matched and not required * `C1`: Secondary number not matched but required * `N1`: High-rise
   * address missing secondary number * `M1`: Primary number missing * `M3`: Primary number invalid
   * * `P1`: Input address PO, RR or HC box number missing * `P3`: Input address PO, RR, or HC Box
   * number invalid * `F1`: Input address matched to a military address * `G1`: Input address
   * matched to a general delivery address * `U1`: Input address matched to a unique ZIP code *
   * `PB`: Input address matched to PBSA record * `RR`: DPV confirmed address with PMB information *
   * `R1`: DPV confirmed address without PMB information * `R7`: Carrier Route R777 or R779 record *
   * `IA`: Informed Address identified * `TA`: Primary number matched by dropping a trailing alpha
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dpvFootnote;

  /**
   * Flag indicates door is accessible, but package will not be left due to security concerns.
   * Returns a single character. * `Y`: The package will not be left due to security concerns. *
   * `N`: No indication the package will not be left due to security concerns.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dpvNoSecureLocation;

  /**
   * Is this a no stat address or an active address? No stat addresses are ones which are not
   * continuously occupied or addresses that the USPS does not service. Returns a single character.
   * * `Y`: The address is not active * `N`: The address is active
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dpvNoStat;

  /**
   * Indicates the NoStat type. Returns a reason code as int. * `1`: IDA (Internal Drop Address) â€“
   * Addresses that do not receive mail directly from the USPS but are delivered to a drop address
   * that services them. * `2`: CDS - Addresses that have not yet become deliverable. For example, a
   * new subdivision where lots and primary numbers have been determined, but no structure exists
   * yet for occupancy. * `3`: Collision - Addresses that do not actually DPV confirm. * `4`: CMZ
   * (College, Military and Other Types) - ZIP + 4 records USPS has incorporated into the data. *
   * `5`: Regular - Indicates addresses not receiving delivery and the addresses are not counted as
   * possible deliveries. * `6`: Secondary Required - The address requires secondary information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer dpvNoStatReasonCode;

  /**
   * Flag indicates mail delivery is not performed every day of the week. Returns a single
   * character. * `Y`: The mail delivery is not performed every day of the week. * `N`: No
   * indication the mail delivery is not performed every day of the week.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dpvNonDeliveryDays;

  /**
   * Integer identifying non-delivery days. It can be interrogated using bit flags: 0x40 â€“ Sunday is
   * a non-delivery day 0x20 â€“ Monday is a non-delivery day 0x10 â€“ Tuesday is a non-delivery day
   * 0x08 â€“ Wednesday is a non-delivery day 0x04 â€“ Thursday is a non-delivery day 0x02 â€“ Friday is a
   * non-delivery day 0x01 â€“ Saturday is a non-delivery day
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer dpvNonDeliveryDaysValues;

  /**
   * Indicates the address was matched to PBSA record. Returns a single character. * `Y`: The
   * address was matched to PBSA record. * `N`: The address was not matched to PBSA record.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dpvPbsa;

  /**
   * Indicates that mail is not delivered to the street address. Returns a single character. * `Y`:
   * The mail is not delivered to the street address. * `N`: The mail is delivered to the street
   * address.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dpvThrowback;

  /**
   * Is this place vacant? Returns a single character. * `Y`: The address is vacant * `N`: The
   * address is not vacant
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dpvVacant;

  /**
   * eLOT Ascending/Descending Flag (A/D).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String elotFlag;

  /**
   * Enhanced Line of Travel (eLOT) number.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String elotNumber;

  /**
   * Error message for USPS data retrieval. This is populated when USPS processing is suspended
   * because of the detection of artificially created addresses. The USPS data fields might not be
   * populated when this error is present.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String errorMessage;

  /**
   * The delivery address is matchable, but the EWS file indicates that an exact match will be
   * available soon.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean ewsNoMatch;

  /**
   * FIPS county code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fipsCountyCode;

  /**
   * LACSLink indicator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lacsLinkIndicator;

  /**
   * LACSLink return code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lacsLinkReturnCode;

  /**
   * PMB (Private Mail Box) unit designator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pmbDesignator;

  /**
   * PMB (Private Mail Box) number;
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pmbNumber;

  /**
   * PO Box only postal code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean poBoxOnlyPostalCode;

  /**
   * Main post office city.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postOfficeCity;

  /**
   * Main post office state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postOfficeState;

  /**
   * USPS standardized address.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsAddressvalidationV1UspsAddress standardizedAddress;

  /**
   * Footnotes from matching a street or highrise record to suite information. If business name
   * match is found, the secondary number is returned. * `A`: SuiteLink record match, business
   * address improved. * `00`: No match, business address is not improved.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String suitelinkFootnote;

  /**
   * Abbreviated city.
   * @return value or {@code null} for none
   */
  public java.lang.String getAbbreviatedCity() {
    return abbreviatedCity;
  }

  /**
   * Abbreviated city.
   * @param abbreviatedCity abbreviatedCity or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setAbbreviatedCity(java.lang.String abbreviatedCity) {
    this.abbreviatedCity = abbreviatedCity;
    return this;
  }

  /**
   * Type of the address record that matches the input address. * `F`: FIRM. This is a match to a
   * Firm Record, which is the finest level of match available for an address. * `G`: GENERAL
   * DELIVERY. This is a match to a General Delivery record. * `H`: BUILDING / APARTMENT. This is a
   * match to a Building or Apartment record. * `P`: POST OFFICE BOX. This is a match to a Post
   * Office Box. * `R`: RURAL ROUTE or HIGHWAY CONTRACT: This is a match to either a Rural Route or
   * a Highway Contract record, both of which may have associated Box Number ranges. * `S`: STREET
   * RECORD: This is a match to a Street record containing a valid primary number range.
   * @return value or {@code null} for none
   */
  public java.lang.String getAddressRecordType() {
    return addressRecordType;
  }

  /**
   * Type of the address record that matches the input address. * `F`: FIRM. This is a match to a
   * Firm Record, which is the finest level of match available for an address. * `G`: GENERAL
   * DELIVERY. This is a match to a General Delivery record. * `H`: BUILDING / APARTMENT. This is a
   * match to a Building or Apartment record. * `P`: POST OFFICE BOX. This is a match to a Post
   * Office Box. * `R`: RURAL ROUTE or HIGHWAY CONTRACT: This is a match to either a Rural Route or
   * a Highway Contract record, both of which may have associated Box Number ranges. * `S`: STREET
   * RECORD: This is a match to a Street record containing a valid primary number range.
   * @param addressRecordType addressRecordType or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setAddressRecordType(java.lang.String addressRecordType) {
    this.addressRecordType = addressRecordType;
    return this;
  }

  /**
   * The carrier route code. A four character code consisting of a one letter prefix and a three
   * digit route designator. Prefixes: * `C`: Carrier route (or city route) * `R`: Rural route *
   * `H`: Highway Contract Route * `B`: Post Office Box Section * `G`: General delivery unit
   * @return value or {@code null} for none
   */
  public java.lang.String getCarrierRoute() {
    return carrierRoute;
  }

  /**
   * The carrier route code. A four character code consisting of a one letter prefix and a three
   * digit route designator. Prefixes: * `C`: Carrier route (or city route) * `R`: Rural route *
   * `H`: Highway Contract Route * `B`: Post Office Box Section * `G`: General delivery unit
   * @param carrierRoute carrierRoute or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setCarrierRoute(java.lang.String carrierRoute) {
    this.carrierRoute = carrierRoute;
    return this;
  }

  /**
   * Carrier route rate sort indicator.
   * @return value or {@code null} for none
   */
  public java.lang.String getCarrierRouteIndicator() {
    return carrierRouteIndicator;
  }

  /**
   * Carrier route rate sort indicator.
   * @param carrierRouteIndicator carrierRouteIndicator or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setCarrierRouteIndicator(java.lang.String carrierRouteIndicator) {
    this.carrierRouteIndicator = carrierRouteIndicator;
    return this;
  }

  /**
   * Indicator that the request has been CASS processed.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCassProcessed() {
    return cassProcessed;
  }

  /**
   * Indicator that the request has been CASS processed.
   * @param cassProcessed cassProcessed or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setCassProcessed(java.lang.Boolean cassProcessed) {
    this.cassProcessed = cassProcessed;
    return this;
  }

  /**
   * County name.
   * @return value or {@code null} for none
   */
  public java.lang.String getCounty() {
    return county;
  }

  /**
   * County name.
   * @param county county or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setCounty(java.lang.String county) {
    this.county = county;
    return this;
  }

  /**
   * Indicator that a default address was found, but more specific addresses exists.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDefaultAddress() {
    return defaultAddress;
  }

  /**
   * Indicator that a default address was found, but more specific addresses exists.
   * @param defaultAddress defaultAddress or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDefaultAddress(java.lang.Boolean defaultAddress) {
    this.defaultAddress = defaultAddress;
    return this;
  }

  /**
   * The delivery point check digit. This number is added to the end of the delivery_point_barcode
   * for mechanically scanned mail. Adding all the digits of the delivery_point_barcode,
   * delivery_point_check_digit, postal code, and ZIP+4 together should yield a number divisible by
   * 10.
   * @return value or {@code null} for none
   */
  public java.lang.String getDeliveryPointCheckDigit() {
    return deliveryPointCheckDigit;
  }

  /**
   * The delivery point check digit. This number is added to the end of the delivery_point_barcode
   * for mechanically scanned mail. Adding all the digits of the delivery_point_barcode,
   * delivery_point_check_digit, postal code, and ZIP+4 together should yield a number divisible by
   * 10.
   * @param deliveryPointCheckDigit deliveryPointCheckDigit or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDeliveryPointCheckDigit(java.lang.String deliveryPointCheckDigit) {
    this.deliveryPointCheckDigit = deliveryPointCheckDigit;
    return this;
  }

  /**
   * 2 digit delivery point code
   * @return value or {@code null} for none
   */
  public java.lang.String getDeliveryPointCode() {
    return deliveryPointCode;
  }

  /**
   * 2 digit delivery point code
   * @param deliveryPointCode deliveryPointCode or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDeliveryPointCode(java.lang.String deliveryPointCode) {
    this.deliveryPointCode = deliveryPointCode;
    return this;
  }

  /**
   * Indicates if the address is a CMRA (Commercial Mail Receiving Agency)--a private business
   * receiving mail for clients. Returns a single character. * `Y`: The address is a CMRA * `N`: The
   * address is not a CMRA
   * @return value or {@code null} for none
   */
  public java.lang.String getDpvCmra() {
    return dpvCmra;
  }

  /**
   * Indicates if the address is a CMRA (Commercial Mail Receiving Agency)--a private business
   * receiving mail for clients. Returns a single character. * `Y`: The address is a CMRA * `N`: The
   * address is not a CMRA
   * @param dpvCmra dpvCmra or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvCmra(java.lang.String dpvCmra) {
    this.dpvCmra = dpvCmra;
    return this;
  }

  /**
   * The possible values for DPV confirmation. Returns a single character or returns no value. *
   * `N`: Primary and any secondary number information failed to DPV confirm. * `D`: Address was DPV
   * confirmed for the primary number only, and the secondary number information was missing. * `S`:
   * Address was DPV confirmed for the primary number only, and the secondary number information was
   * present but not confirmed. * `Y`: Address was DPV confirmed for primary and any secondary
   * numbers. * Empty: If the response does not contain a `dpv_confirmation` value, the address was
   * not submitted for DPV confirmation.
   * @return value or {@code null} for none
   */
  public java.lang.String getDpvConfirmation() {
    return dpvConfirmation;
  }

  /**
   * The possible values for DPV confirmation. Returns a single character or returns no value. *
   * `N`: Primary and any secondary number information failed to DPV confirm. * `D`: Address was DPV
   * confirmed for the primary number only, and the secondary number information was missing. * `S`:
   * Address was DPV confirmed for the primary number only, and the secondary number information was
   * present but not confirmed. * `Y`: Address was DPV confirmed for primary and any secondary
   * numbers. * Empty: If the response does not contain a `dpv_confirmation` value, the address was
   * not submitted for DPV confirmation.
   * @param dpvConfirmation dpvConfirmation or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvConfirmation(java.lang.String dpvConfirmation) {
    this.dpvConfirmation = dpvConfirmation;
    return this;
  }

  /**
   * Flag indicates addresses where USPS cannot knock on a door to deliver mail. Returns a single
   * character. * `Y`: The door is not accessible. * `N`: No indication the door is not accessible.
   * @return value or {@code null} for none
   */
  public java.lang.String getDpvDoorNotAccessible() {
    return dpvDoorNotAccessible;
  }

  /**
   * Flag indicates addresses where USPS cannot knock on a door to deliver mail. Returns a single
   * character. * `Y`: The door is not accessible. * `N`: No indication the door is not accessible.
   * @param dpvDoorNotAccessible dpvDoorNotAccessible or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvDoorNotAccessible(java.lang.String dpvDoorNotAccessible) {
    this.dpvDoorNotAccessible = dpvDoorNotAccessible;
    return this;
  }

  /**
   * Flag indicates mail is delivered to a single receptable at a site. Returns a single character.
   * * `Y`: The mail is delivered to a single receptable at a site. * `N`: The mail is not delivered
   * to a single receptable at a site.
   * @return value or {@code null} for none
   */
  public java.lang.String getDpvDrop() {
    return dpvDrop;
  }

  /**
   * Flag indicates mail is delivered to a single receptable at a site. Returns a single character.
   * * `Y`: The mail is delivered to a single receptable at a site. * `N`: The mail is not delivered
   * to a single receptable at a site.
   * @param dpvDrop dpvDrop or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvDrop(java.lang.String dpvDrop) {
    this.dpvDrop = dpvDrop;
    return this;
  }

  /**
   * Indicates that more than one DPV return code is valid for the address. Returns a single
   * character. * `Y`: Address was DPV confirmed for primary and any secondary numbers. * `N`:
   * Primary and any secondary number information failed to DPV confirm. * `S`: Address was DPV
   * confirmed for the primary number only, and the secondary number information was present but not
   * confirmed, or a single trailing alpha on a primary number was dropped to make a DPV match and
   * secondary information required. * `D`: Address was DPV confirmed for the primary number only,
   * and the secondary number information was missing. * `R`: Address confirmed but assigned to
   * phantom route R777 and R779 and USPS delivery is not provided.
   * @return value or {@code null} for none
   */
  public java.lang.String getDpvEnhancedDeliveryCode() {
    return dpvEnhancedDeliveryCode;
  }

  /**
   * Indicates that more than one DPV return code is valid for the address. Returns a single
   * character. * `Y`: Address was DPV confirmed for primary and any secondary numbers. * `N`:
   * Primary and any secondary number information failed to DPV confirm. * `S`: Address was DPV
   * confirmed for the primary number only, and the secondary number information was present but not
   * confirmed, or a single trailing alpha on a primary number was dropped to make a DPV match and
   * secondary information required. * `D`: Address was DPV confirmed for the primary number only,
   * and the secondary number information was missing. * `R`: Address confirmed but assigned to
   * phantom route R777 and R779 and USPS delivery is not provided.
   * @param dpvEnhancedDeliveryCode dpvEnhancedDeliveryCode or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvEnhancedDeliveryCode(java.lang.String dpvEnhancedDeliveryCode) {
    this.dpvEnhancedDeliveryCode = dpvEnhancedDeliveryCode;
    return this;
  }

  /**
   * The footnotes from delivery point validation. Multiple footnotes may be strung together in the
   * same string. * `AA`: Input address matched to the ZIP+4 file * `A1`: Input address was not
   * matched to the ZIP+4 file * `BB`: Matched to DPV (all components) * `CC`: Secondary number not
   * matched and not required * `C1`: Secondary number not matched but required * `N1`: High-rise
   * address missing secondary number * `M1`: Primary number missing * `M3`: Primary number invalid
   * * `P1`: Input address PO, RR or HC box number missing * `P3`: Input address PO, RR, or HC Box
   * number invalid * `F1`: Input address matched to a military address * `G1`: Input address
   * matched to a general delivery address * `U1`: Input address matched to a unique ZIP code *
   * `PB`: Input address matched to PBSA record * `RR`: DPV confirmed address with PMB information *
   * `R1`: DPV confirmed address without PMB information * `R7`: Carrier Route R777 or R779 record *
   * `IA`: Informed Address identified * `TA`: Primary number matched by dropping a trailing alpha
   * @return value or {@code null} for none
   */
  public java.lang.String getDpvFootnote() {
    return dpvFootnote;
  }

  /**
   * The footnotes from delivery point validation. Multiple footnotes may be strung together in the
   * same string. * `AA`: Input address matched to the ZIP+4 file * `A1`: Input address was not
   * matched to the ZIP+4 file * `BB`: Matched to DPV (all components) * `CC`: Secondary number not
   * matched and not required * `C1`: Secondary number not matched but required * `N1`: High-rise
   * address missing secondary number * `M1`: Primary number missing * `M3`: Primary number invalid
   * * `P1`: Input address PO, RR or HC box number missing * `P3`: Input address PO, RR, or HC Box
   * number invalid * `F1`: Input address matched to a military address * `G1`: Input address
   * matched to a general delivery address * `U1`: Input address matched to a unique ZIP code *
   * `PB`: Input address matched to PBSA record * `RR`: DPV confirmed address with PMB information *
   * `R1`: DPV confirmed address without PMB information * `R7`: Carrier Route R777 or R779 record *
   * `IA`: Informed Address identified * `TA`: Primary number matched by dropping a trailing alpha
   * @param dpvFootnote dpvFootnote or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvFootnote(java.lang.String dpvFootnote) {
    this.dpvFootnote = dpvFootnote;
    return this;
  }

  /**
   * Flag indicates door is accessible, but package will not be left due to security concerns.
   * Returns a single character. * `Y`: The package will not be left due to security concerns. *
   * `N`: No indication the package will not be left due to security concerns.
   * @return value or {@code null} for none
   */
  public java.lang.String getDpvNoSecureLocation() {
    return dpvNoSecureLocation;
  }

  /**
   * Flag indicates door is accessible, but package will not be left due to security concerns.
   * Returns a single character. * `Y`: The package will not be left due to security concerns. *
   * `N`: No indication the package will not be left due to security concerns.
   * @param dpvNoSecureLocation dpvNoSecureLocation or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvNoSecureLocation(java.lang.String dpvNoSecureLocation) {
    this.dpvNoSecureLocation = dpvNoSecureLocation;
    return this;
  }

  /**
   * Is this a no stat address or an active address? No stat addresses are ones which are not
   * continuously occupied or addresses that the USPS does not service. Returns a single character.
   * * `Y`: The address is not active * `N`: The address is active
   * @return value or {@code null} for none
   */
  public java.lang.String getDpvNoStat() {
    return dpvNoStat;
  }

  /**
   * Is this a no stat address or an active address? No stat addresses are ones which are not
   * continuously occupied or addresses that the USPS does not service. Returns a single character.
   * * `Y`: The address is not active * `N`: The address is active
   * @param dpvNoStat dpvNoStat or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvNoStat(java.lang.String dpvNoStat) {
    this.dpvNoStat = dpvNoStat;
    return this;
  }

  /**
   * Indicates the NoStat type. Returns a reason code as int. * `1`: IDA (Internal Drop Address) â€“
   * Addresses that do not receive mail directly from the USPS but are delivered to a drop address
   * that services them. * `2`: CDS - Addresses that have not yet become deliverable. For example, a
   * new subdivision where lots and primary numbers have been determined, but no structure exists
   * yet for occupancy. * `3`: Collision - Addresses that do not actually DPV confirm. * `4`: CMZ
   * (College, Military and Other Types) - ZIP + 4 records USPS has incorporated into the data. *
   * `5`: Regular - Indicates addresses not receiving delivery and the addresses are not counted as
   * possible deliveries. * `6`: Secondary Required - The address requires secondary information.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDpvNoStatReasonCode() {
    return dpvNoStatReasonCode;
  }

  /**
   * Indicates the NoStat type. Returns a reason code as int. * `1`: IDA (Internal Drop Address) â€“
   * Addresses that do not receive mail directly from the USPS but are delivered to a drop address
   * that services them. * `2`: CDS - Addresses that have not yet become deliverable. For example, a
   * new subdivision where lots and primary numbers have been determined, but no structure exists
   * yet for occupancy. * `3`: Collision - Addresses that do not actually DPV confirm. * `4`: CMZ
   * (College, Military and Other Types) - ZIP + 4 records USPS has incorporated into the data. *
   * `5`: Regular - Indicates addresses not receiving delivery and the addresses are not counted as
   * possible deliveries. * `6`: Secondary Required - The address requires secondary information.
   * @param dpvNoStatReasonCode dpvNoStatReasonCode or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvNoStatReasonCode(java.lang.Integer dpvNoStatReasonCode) {
    this.dpvNoStatReasonCode = dpvNoStatReasonCode;
    return this;
  }

  /**
   * Flag indicates mail delivery is not performed every day of the week. Returns a single
   * character. * `Y`: The mail delivery is not performed every day of the week. * `N`: No
   * indication the mail delivery is not performed every day of the week.
   * @return value or {@code null} for none
   */
  public java.lang.String getDpvNonDeliveryDays() {
    return dpvNonDeliveryDays;
  }

  /**
   * Flag indicates mail delivery is not performed every day of the week. Returns a single
   * character. * `Y`: The mail delivery is not performed every day of the week. * `N`: No
   * indication the mail delivery is not performed every day of the week.
   * @param dpvNonDeliveryDays dpvNonDeliveryDays or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvNonDeliveryDays(java.lang.String dpvNonDeliveryDays) {
    this.dpvNonDeliveryDays = dpvNonDeliveryDays;
    return this;
  }

  /**
   * Integer identifying non-delivery days. It can be interrogated using bit flags: 0x40 â€“ Sunday is
   * a non-delivery day 0x20 â€“ Monday is a non-delivery day 0x10 â€“ Tuesday is a non-delivery day
   * 0x08 â€“ Wednesday is a non-delivery day 0x04 â€“ Thursday is a non-delivery day 0x02 â€“ Friday is a
   * non-delivery day 0x01 â€“ Saturday is a non-delivery day
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDpvNonDeliveryDaysValues() {
    return dpvNonDeliveryDaysValues;
  }

  /**
   * Integer identifying non-delivery days. It can be interrogated using bit flags: 0x40 â€“ Sunday is
   * a non-delivery day 0x20 â€“ Monday is a non-delivery day 0x10 â€“ Tuesday is a non-delivery day
   * 0x08 â€“ Wednesday is a non-delivery day 0x04 â€“ Thursday is a non-delivery day 0x02 â€“ Friday is a
   * non-delivery day 0x01 â€“ Saturday is a non-delivery day
   * @param dpvNonDeliveryDaysValues dpvNonDeliveryDaysValues or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvNonDeliveryDaysValues(java.lang.Integer dpvNonDeliveryDaysValues) {
    this.dpvNonDeliveryDaysValues = dpvNonDeliveryDaysValues;
    return this;
  }

  /**
   * Indicates the address was matched to PBSA record. Returns a single character. * `Y`: The
   * address was matched to PBSA record. * `N`: The address was not matched to PBSA record.
   * @return value or {@code null} for none
   */
  public java.lang.String getDpvPbsa() {
    return dpvPbsa;
  }

  /**
   * Indicates the address was matched to PBSA record. Returns a single character. * `Y`: The
   * address was matched to PBSA record. * `N`: The address was not matched to PBSA record.
   * @param dpvPbsa dpvPbsa or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvPbsa(java.lang.String dpvPbsa) {
    this.dpvPbsa = dpvPbsa;
    return this;
  }

  /**
   * Indicates that mail is not delivered to the street address. Returns a single character. * `Y`:
   * The mail is not delivered to the street address. * `N`: The mail is delivered to the street
   * address.
   * @return value or {@code null} for none
   */
  public java.lang.String getDpvThrowback() {
    return dpvThrowback;
  }

  /**
   * Indicates that mail is not delivered to the street address. Returns a single character. * `Y`:
   * The mail is not delivered to the street address. * `N`: The mail is delivered to the street
   * address.
   * @param dpvThrowback dpvThrowback or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvThrowback(java.lang.String dpvThrowback) {
    this.dpvThrowback = dpvThrowback;
    return this;
  }

  /**
   * Is this place vacant? Returns a single character. * `Y`: The address is vacant * `N`: The
   * address is not vacant
   * @return value or {@code null} for none
   */
  public java.lang.String getDpvVacant() {
    return dpvVacant;
  }

  /**
   * Is this place vacant? Returns a single character. * `Y`: The address is vacant * `N`: The
   * address is not vacant
   * @param dpvVacant dpvVacant or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setDpvVacant(java.lang.String dpvVacant) {
    this.dpvVacant = dpvVacant;
    return this;
  }

  /**
   * eLOT Ascending/Descending Flag (A/D).
   * @return value or {@code null} for none
   */
  public java.lang.String getElotFlag() {
    return elotFlag;
  }

  /**
   * eLOT Ascending/Descending Flag (A/D).
   * @param elotFlag elotFlag or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setElotFlag(java.lang.String elotFlag) {
    this.elotFlag = elotFlag;
    return this;
  }

  /**
   * Enhanced Line of Travel (eLOT) number.
   * @return value or {@code null} for none
   */
  public java.lang.String getElotNumber() {
    return elotNumber;
  }

  /**
   * Enhanced Line of Travel (eLOT) number.
   * @param elotNumber elotNumber or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setElotNumber(java.lang.String elotNumber) {
    this.elotNumber = elotNumber;
    return this;
  }

  /**
   * Error message for USPS data retrieval. This is populated when USPS processing is suspended
   * because of the detection of artificially created addresses. The USPS data fields might not be
   * populated when this error is present.
   * @return value or {@code null} for none
   */
  public java.lang.String getErrorMessage() {
    return errorMessage;
  }

  /**
   * Error message for USPS data retrieval. This is populated when USPS processing is suspended
   * because of the detection of artificially created addresses. The USPS data fields might not be
   * populated when this error is present.
   * @param errorMessage errorMessage or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setErrorMessage(java.lang.String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * The delivery address is matchable, but the EWS file indicates that an exact match will be
   * available soon.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEwsNoMatch() {
    return ewsNoMatch;
  }

  /**
   * The delivery address is matchable, but the EWS file indicates that an exact match will be
   * available soon.
   * @param ewsNoMatch ewsNoMatch or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setEwsNoMatch(java.lang.Boolean ewsNoMatch) {
    this.ewsNoMatch = ewsNoMatch;
    return this;
  }

  /**
   * FIPS county code.
   * @return value or {@code null} for none
   */
  public java.lang.String getFipsCountyCode() {
    return fipsCountyCode;
  }

  /**
   * FIPS county code.
   * @param fipsCountyCode fipsCountyCode or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setFipsCountyCode(java.lang.String fipsCountyCode) {
    this.fipsCountyCode = fipsCountyCode;
    return this;
  }

  /**
   * LACSLink indicator.
   * @return value or {@code null} for none
   */
  public java.lang.String getLacsLinkIndicator() {
    return lacsLinkIndicator;
  }

  /**
   * LACSLink indicator.
   * @param lacsLinkIndicator lacsLinkIndicator or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setLacsLinkIndicator(java.lang.String lacsLinkIndicator) {
    this.lacsLinkIndicator = lacsLinkIndicator;
    return this;
  }

  /**
   * LACSLink return code.
   * @return value or {@code null} for none
   */
  public java.lang.String getLacsLinkReturnCode() {
    return lacsLinkReturnCode;
  }

  /**
   * LACSLink return code.
   * @param lacsLinkReturnCode lacsLinkReturnCode or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setLacsLinkReturnCode(java.lang.String lacsLinkReturnCode) {
    this.lacsLinkReturnCode = lacsLinkReturnCode;
    return this;
  }

  /**
   * PMB (Private Mail Box) unit designator.
   * @return value or {@code null} for none
   */
  public java.lang.String getPmbDesignator() {
    return pmbDesignator;
  }

  /**
   * PMB (Private Mail Box) unit designator.
   * @param pmbDesignator pmbDesignator or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setPmbDesignator(java.lang.String pmbDesignator) {
    this.pmbDesignator = pmbDesignator;
    return this;
  }

  /**
   * PMB (Private Mail Box) number;
   * @return value or {@code null} for none
   */
  public java.lang.String getPmbNumber() {
    return pmbNumber;
  }

  /**
   * PMB (Private Mail Box) number;
   * @param pmbNumber pmbNumber or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setPmbNumber(java.lang.String pmbNumber) {
    this.pmbNumber = pmbNumber;
    return this;
  }

  /**
   * PO Box only postal code.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPoBoxOnlyPostalCode() {
    return poBoxOnlyPostalCode;
  }

  /**
   * PO Box only postal code.
   * @param poBoxOnlyPostalCode poBoxOnlyPostalCode or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setPoBoxOnlyPostalCode(java.lang.Boolean poBoxOnlyPostalCode) {
    this.poBoxOnlyPostalCode = poBoxOnlyPostalCode;
    return this;
  }

  /**
   * Main post office city.
   * @return value or {@code null} for none
   */
  public java.lang.String getPostOfficeCity() {
    return postOfficeCity;
  }

  /**
   * Main post office city.
   * @param postOfficeCity postOfficeCity or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setPostOfficeCity(java.lang.String postOfficeCity) {
    this.postOfficeCity = postOfficeCity;
    return this;
  }

  /**
   * Main post office state.
   * @return value or {@code null} for none
   */
  public java.lang.String getPostOfficeState() {
    return postOfficeState;
  }

  /**
   * Main post office state.
   * @param postOfficeState postOfficeState or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setPostOfficeState(java.lang.String postOfficeState) {
    this.postOfficeState = postOfficeState;
    return this;
  }

  /**
   * USPS standardized address.
   * @return value or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsAddress getStandardizedAddress() {
    return standardizedAddress;
  }

  /**
   * USPS standardized address.
   * @param standardizedAddress standardizedAddress or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setStandardizedAddress(GoogleMapsAddressvalidationV1UspsAddress standardizedAddress) {
    this.standardizedAddress = standardizedAddress;
    return this;
  }

  /**
   * Footnotes from matching a street or highrise record to suite information. If business name
   * match is found, the secondary number is returned. * `A`: SuiteLink record match, business
   * address improved. * `00`: No match, business address is not improved.
   * @return value or {@code null} for none
   */
  public java.lang.String getSuitelinkFootnote() {
    return suitelinkFootnote;
  }

  /**
   * Footnotes from matching a street or highrise record to suite information. If business name
   * match is found, the secondary number is returned. * `A`: SuiteLink record match, business
   * address improved. * `00`: No match, business address is not improved.
   * @param suitelinkFootnote suitelinkFootnote or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1UspsData setSuitelinkFootnote(java.lang.String suitelinkFootnote) {
    this.suitelinkFootnote = suitelinkFootnote;
    return this;
  }

  @Override
  public GoogleMapsAddressvalidationV1UspsData set(String fieldName, Object value) {
    return (GoogleMapsAddressvalidationV1UspsData) super.set(fieldName, value);
  }

  @Override
  public GoogleMapsAddressvalidationV1UspsData clone() {
    return (GoogleMapsAddressvalidationV1UspsData) super.clone();
  }

}
