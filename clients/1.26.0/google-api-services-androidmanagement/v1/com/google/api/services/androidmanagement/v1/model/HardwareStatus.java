/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidmanagement.v1.model;

/**
 * Hardware status. Temperatures may be compared to the temperature thresholds available in
 * hardwareInfo to determine hardware health.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Android Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HardwareStatus extends com.google.api.client.json.GenericJson {

  /**
   * Current battery temperatures in Celsius for each battery on the device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> batteryTemperatures;

  /**
   * Current CPU temperatures in Celsius for each CPU on the device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> cpuTemperatures;

  /**
   * CPU usages in percentage for each core available on the device. Usage is 0 for each unplugged
   * core. Empty array implies that CPU usage is not supported in the system.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> cpuUsages;

  /**
   * The time the measurements were taken.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Fan speeds in RPM for each fan on the device. Empty array means that there are no fans or fan
   * speed is not supported on the system.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> fanSpeeds;

  /**
   * Current GPU temperatures in Celsius for each GPU on the device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> gpuTemperatures;

  /**
   * Current device skin temperatures in Celsius.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> skinTemperatures;

  /**
   * Current battery temperatures in Celsius for each battery on the device.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getBatteryTemperatures() {
    return batteryTemperatures;
  }

  /**
   * Current battery temperatures in Celsius for each battery on the device.
   * @param batteryTemperatures batteryTemperatures or {@code null} for none
   */
  public HardwareStatus setBatteryTemperatures(java.util.List<java.lang.Float> batteryTemperatures) {
    this.batteryTemperatures = batteryTemperatures;
    return this;
  }

  /**
   * Current CPU temperatures in Celsius for each CPU on the device.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getCpuTemperatures() {
    return cpuTemperatures;
  }

  /**
   * Current CPU temperatures in Celsius for each CPU on the device.
   * @param cpuTemperatures cpuTemperatures or {@code null} for none
   */
  public HardwareStatus setCpuTemperatures(java.util.List<java.lang.Float> cpuTemperatures) {
    this.cpuTemperatures = cpuTemperatures;
    return this;
  }

  /**
   * CPU usages in percentage for each core available on the device. Usage is 0 for each unplugged
   * core. Empty array implies that CPU usage is not supported in the system.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getCpuUsages() {
    return cpuUsages;
  }

  /**
   * CPU usages in percentage for each core available on the device. Usage is 0 for each unplugged
   * core. Empty array implies that CPU usage is not supported in the system.
   * @param cpuUsages cpuUsages or {@code null} for none
   */
  public HardwareStatus setCpuUsages(java.util.List<java.lang.Float> cpuUsages) {
    this.cpuUsages = cpuUsages;
    return this;
  }

  /**
   * The time the measurements were taken.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * The time the measurements were taken.
   * @param createTime createTime or {@code null} for none
   */
  public HardwareStatus setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Fan speeds in RPM for each fan on the device. Empty array means that there are no fans or fan
   * speed is not supported on the system.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getFanSpeeds() {
    return fanSpeeds;
  }

  /**
   * Fan speeds in RPM for each fan on the device. Empty array means that there are no fans or fan
   * speed is not supported on the system.
   * @param fanSpeeds fanSpeeds or {@code null} for none
   */
  public HardwareStatus setFanSpeeds(java.util.List<java.lang.Float> fanSpeeds) {
    this.fanSpeeds = fanSpeeds;
    return this;
  }

  /**
   * Current GPU temperatures in Celsius for each GPU on the device.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getGpuTemperatures() {
    return gpuTemperatures;
  }

  /**
   * Current GPU temperatures in Celsius for each GPU on the device.
   * @param gpuTemperatures gpuTemperatures or {@code null} for none
   */
  public HardwareStatus setGpuTemperatures(java.util.List<java.lang.Float> gpuTemperatures) {
    this.gpuTemperatures = gpuTemperatures;
    return this;
  }

  /**
   * Current device skin temperatures in Celsius.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getSkinTemperatures() {
    return skinTemperatures;
  }

  /**
   * Current device skin temperatures in Celsius.
   * @param skinTemperatures skinTemperatures or {@code null} for none
   */
  public HardwareStatus setSkinTemperatures(java.util.List<java.lang.Float> skinTemperatures) {
    this.skinTemperatures = skinTemperatures;
    return this;
  }

  @Override
  public HardwareStatus set(String fieldName, Object value) {
    return (HardwareStatus) super.set(fieldName, value);
  }

  @Override
  public HardwareStatus clone() {
    return (HardwareStatus) super.clone();
  }

}
