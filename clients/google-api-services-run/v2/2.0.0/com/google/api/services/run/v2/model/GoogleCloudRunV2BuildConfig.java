/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.run.v2.model;

/**
 * Describes the Build step of the function that builds a container from the given source.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Run Admin API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudRunV2BuildConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The base image used to build the function.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String baseImage;

  /**
   * Optional. Sets whether the function will receive automatic base image updates.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean enableAutomaticUpdates;

  /**
   * Optional. User-provided build-time environment variables for the function
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> environmentVariables;

  /**
   * Optional. The name of the function (as defined in source code) that will be executed. Defaults
   * to the resource name suffix, if not specified. For backward compatibility, if function with
   * given name is not found, then the system will try to use function named "function".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String functionTarget;

  /**
   * Optional. Artifact Registry URI to store the built image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imageUri;

  /**
   * Output only. The Cloud Build name of the latest successful deployment of the function.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. Service account to be used for building the container. The format of this field is
   * `projects/{projectId}/serviceAccounts/{serviceAccountEmail}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceAccount;

  /**
   * The Cloud Storage bucket URI where the function source code is located.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sourceLocation;

  /**
   * Optional. Name of the Cloud Build Custom Worker Pool that should be used to build the Cloud Run
   * function. The format of this field is
   * `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and
   * `{region}` are the project id and region respectively where the worker pool is defined and
   * `{workerPool}` is the short name of the worker pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String workerPool;

  /**
   * Optional. The base image used to build the function.
   * @return value or {@code null} for none
   */
  public java.lang.String getBaseImage() {
    return baseImage;
  }

  /**
   * Optional. The base image used to build the function.
   * @param baseImage baseImage or {@code null} for none
   */
  public GoogleCloudRunV2BuildConfig setBaseImage(java.lang.String baseImage) {
    this.baseImage = baseImage;
    return this;
  }

  /**
   * Optional. Sets whether the function will receive automatic base image updates.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEnableAutomaticUpdates() {
    return enableAutomaticUpdates;
  }

  /**
   * Optional. Sets whether the function will receive automatic base image updates.
   * @param enableAutomaticUpdates enableAutomaticUpdates or {@code null} for none
   */
  public GoogleCloudRunV2BuildConfig setEnableAutomaticUpdates(java.lang.Boolean enableAutomaticUpdates) {
    this.enableAutomaticUpdates = enableAutomaticUpdates;
    return this;
  }

  /**
   * Optional. User-provided build-time environment variables for the function
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getEnvironmentVariables() {
    return environmentVariables;
  }

  /**
   * Optional. User-provided build-time environment variables for the function
   * @param environmentVariables environmentVariables or {@code null} for none
   */
  public GoogleCloudRunV2BuildConfig setEnvironmentVariables(java.util.Map<String, java.lang.String> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  /**
   * Optional. The name of the function (as defined in source code) that will be executed. Defaults
   * to the resource name suffix, if not specified. For backward compatibility, if function with
   * given name is not found, then the system will try to use function named "function".
   * @return value or {@code null} for none
   */
  public java.lang.String getFunctionTarget() {
    return functionTarget;
  }

  /**
   * Optional. The name of the function (as defined in source code) that will be executed. Defaults
   * to the resource name suffix, if not specified. For backward compatibility, if function with
   * given name is not found, then the system will try to use function named "function".
   * @param functionTarget functionTarget or {@code null} for none
   */
  public GoogleCloudRunV2BuildConfig setFunctionTarget(java.lang.String functionTarget) {
    this.functionTarget = functionTarget;
    return this;
  }

  /**
   * Optional. Artifact Registry URI to store the built image.
   * @return value or {@code null} for none
   */
  public java.lang.String getImageUri() {
    return imageUri;
  }

  /**
   * Optional. Artifact Registry URI to store the built image.
   * @param imageUri imageUri or {@code null} for none
   */
  public GoogleCloudRunV2BuildConfig setImageUri(java.lang.String imageUri) {
    this.imageUri = imageUri;
    return this;
  }

  /**
   * Output only. The Cloud Build name of the latest successful deployment of the function.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The Cloud Build name of the latest successful deployment of the function.
   * @param name name or {@code null} for none
   */
  public GoogleCloudRunV2BuildConfig setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Service account to be used for building the container. The format of this field is
   * `projects/{projectId}/serviceAccounts/{serviceAccountEmail}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceAccount() {
    return serviceAccount;
  }

  /**
   * Optional. Service account to be used for building the container. The format of this field is
   * `projects/{projectId}/serviceAccounts/{serviceAccountEmail}`.
   * @param serviceAccount serviceAccount or {@code null} for none
   */
  public GoogleCloudRunV2BuildConfig setServiceAccount(java.lang.String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * The Cloud Storage bucket URI where the function source code is located.
   * @return value or {@code null} for none
   */
  public java.lang.String getSourceLocation() {
    return sourceLocation;
  }

  /**
   * The Cloud Storage bucket URI where the function source code is located.
   * @param sourceLocation sourceLocation or {@code null} for none
   */
  public GoogleCloudRunV2BuildConfig setSourceLocation(java.lang.String sourceLocation) {
    this.sourceLocation = sourceLocation;
    return this;
  }

  /**
   * Optional. Name of the Cloud Build Custom Worker Pool that should be used to build the Cloud Run
   * function. The format of this field is
   * `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and
   * `{region}` are the project id and region respectively where the worker pool is defined and
   * `{workerPool}` is the short name of the worker pool.
   * @return value or {@code null} for none
   */
  public java.lang.String getWorkerPool() {
    return workerPool;
  }

  /**
   * Optional. Name of the Cloud Build Custom Worker Pool that should be used to build the Cloud Run
   * function. The format of this field is
   * `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and
   * `{region}` are the project id and region respectively where the worker pool is defined and
   * `{workerPool}` is the short name of the worker pool.
   * @param workerPool workerPool or {@code null} for none
   */
  public GoogleCloudRunV2BuildConfig setWorkerPool(java.lang.String workerPool) {
    this.workerPool = workerPool;
    return this;
  }

  @Override
  public GoogleCloudRunV2BuildConfig set(String fieldName, Object value) {
    return (GoogleCloudRunV2BuildConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudRunV2BuildConfig clone() {
    return (GoogleCloudRunV2BuildConfig) super.clone();
  }

}
