/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * A partition start record serves as a notification that the client should schedule the partitions
 * to be queried. PartitionStartRecord returns information about one or more partitions.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PartitionStartRecord extends com.google.api.client.json.GenericJson {

  /**
   * Unique partition identifiers to be used in queries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> partitionTokens;

  /**
   * Record sequence numbers are unique and monotonically increasing (but not necessarily
   * contiguous) for a specific timestamp across record types in the same partition. To guarantee
   * ordered processing, the reader should process records (of potentially different types) in
   * record_sequence order for a specific timestamp in the same partition.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String recordSequence;

  /**
   * Start timestamp at which the partitions should be queried to return change stream records with
   * timestamps >= start_timestamp. DataChangeRecord.commit_timestamps,
   * PartitionStartRecord.start_timestamps, PartitionEventRecord.commit_timestamps, and
   * PartitionEndRecord.end_timestamps can have the same value in the same partition.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String startTimestamp;

  /**
   * Unique partition identifiers to be used in queries.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPartitionTokens() {
    return partitionTokens;
  }

  /**
   * Unique partition identifiers to be used in queries.
   * @param partitionTokens partitionTokens or {@code null} for none
   */
  public PartitionStartRecord setPartitionTokens(java.util.List<java.lang.String> partitionTokens) {
    this.partitionTokens = partitionTokens;
    return this;
  }

  /**
   * Record sequence numbers are unique and monotonically increasing (but not necessarily
   * contiguous) for a specific timestamp across record types in the same partition. To guarantee
   * ordered processing, the reader should process records (of potentially different types) in
   * record_sequence order for a specific timestamp in the same partition.
   * @return value or {@code null} for none
   */
  public java.lang.String getRecordSequence() {
    return recordSequence;
  }

  /**
   * Record sequence numbers are unique and monotonically increasing (but not necessarily
   * contiguous) for a specific timestamp across record types in the same partition. To guarantee
   * ordered processing, the reader should process records (of potentially different types) in
   * record_sequence order for a specific timestamp in the same partition.
   * @param recordSequence recordSequence or {@code null} for none
   */
  public PartitionStartRecord setRecordSequence(java.lang.String recordSequence) {
    this.recordSequence = recordSequence;
    return this;
  }

  /**
   * Start timestamp at which the partitions should be queried to return change stream records with
   * timestamps >= start_timestamp. DataChangeRecord.commit_timestamps,
   * PartitionStartRecord.start_timestamps, PartitionEventRecord.commit_timestamps, and
   * PartitionEndRecord.end_timestamps can have the same value in the same partition.
   * @return value or {@code null} for none
   */
  public String getStartTimestamp() {
    return startTimestamp;
  }

  /**
   * Start timestamp at which the partitions should be queried to return change stream records with
   * timestamps >= start_timestamp. DataChangeRecord.commit_timestamps,
   * PartitionStartRecord.start_timestamps, PartitionEventRecord.commit_timestamps, and
   * PartitionEndRecord.end_timestamps can have the same value in the same partition.
   * @param startTimestamp startTimestamp or {@code null} for none
   */
  public PartitionStartRecord setStartTimestamp(String startTimestamp) {
    this.startTimestamp = startTimestamp;
    return this;
  }

  @Override
  public PartitionStartRecord set(String fieldName, Object value) {
    return (PartitionStartRecord) super.set(fieldName, value);
  }

  @Override
  public PartitionStartRecord clone() {
    return (PartitionStartRecord) super.clone();
  }

}
