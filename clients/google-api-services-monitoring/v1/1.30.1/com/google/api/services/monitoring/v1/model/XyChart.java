/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.monitoring.v1.model;

/**
 * A chart that displays data on a 2D (X and Y axes) plane.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Monitoring API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class XyChart extends com.google.api.client.json.GenericJson {

  /**
   * Display options for the chart.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ChartOptions chartOptions;

  /**
   * Required. The data displayed in this chart.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DataSet> dataSets;

  static {
    // hack to force ProGuard to consider DataSet used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(DataSet.class);
  }

  /**
   * Threshold lines drawn horizontally across the chart.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Threshold> thresholds;

  static {
    // hack to force ProGuard to consider Threshold used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Threshold.class);
  }

  /**
   * The duration used to display a comparison chart. A comparison chart simultaneously shows values
   * from two similar-length time periods (e.g., week-over-week metrics). The duration must be
   * positive, and it can only be applied to charts with data sets of LINE plot type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String timeshiftDuration;

  /**
   * The properties applied to the X axis.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Axis xAxis;

  /**
   * The properties applied to the Y axis.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Axis yAxis;

  /**
   * Display options for the chart.
   * @return value or {@code null} for none
   */
  public ChartOptions getChartOptions() {
    return chartOptions;
  }

  /**
   * Display options for the chart.
   * @param chartOptions chartOptions or {@code null} for none
   */
  public XyChart setChartOptions(ChartOptions chartOptions) {
    this.chartOptions = chartOptions;
    return this;
  }

  /**
   * Required. The data displayed in this chart.
   * @return value or {@code null} for none
   */
  public java.util.List<DataSet> getDataSets() {
    return dataSets;
  }

  /**
   * Required. The data displayed in this chart.
   * @param dataSets dataSets or {@code null} for none
   */
  public XyChart setDataSets(java.util.List<DataSet> dataSets) {
    this.dataSets = dataSets;
    return this;
  }

  /**
   * Threshold lines drawn horizontally across the chart.
   * @return value or {@code null} for none
   */
  public java.util.List<Threshold> getThresholds() {
    return thresholds;
  }

  /**
   * Threshold lines drawn horizontally across the chart.
   * @param thresholds thresholds or {@code null} for none
   */
  public XyChart setThresholds(java.util.List<Threshold> thresholds) {
    this.thresholds = thresholds;
    return this;
  }

  /**
   * The duration used to display a comparison chart. A comparison chart simultaneously shows values
   * from two similar-length time periods (e.g., week-over-week metrics). The duration must be
   * positive, and it can only be applied to charts with data sets of LINE plot type.
   * @return value or {@code null} for none
   */
  public String getTimeshiftDuration() {
    return timeshiftDuration;
  }

  /**
   * The duration used to display a comparison chart. A comparison chart simultaneously shows values
   * from two similar-length time periods (e.g., week-over-week metrics). The duration must be
   * positive, and it can only be applied to charts with data sets of LINE plot type.
   * @param timeshiftDuration timeshiftDuration or {@code null} for none
   */
  public XyChart setTimeshiftDuration(String timeshiftDuration) {
    this.timeshiftDuration = timeshiftDuration;
    return this;
  }

  /**
   * The properties applied to the X axis.
   * @return value or {@code null} for none
   */
  public Axis getXAxis() {
    return xAxis;
  }

  /**
   * The properties applied to the X axis.
   * @param xAxis xAxis or {@code null} for none
   */
  public XyChart setXAxis(Axis xAxis) {
    this.xAxis = xAxis;
    return this;
  }

  /**
   * The properties applied to the Y axis.
   * @return value or {@code null} for none
   */
  public Axis getYAxis() {
    return yAxis;
  }

  /**
   * The properties applied to the Y axis.
   * @param yAxis yAxis or {@code null} for none
   */
  public XyChart setYAxis(Axis yAxis) {
    this.yAxis = yAxis;
    return this;
  }

  @Override
  public XyChart set(String fieldName, Object value) {
    return (XyChart) super.set(fieldName, value);
  }

  @Override
  public XyChart clone() {
    return (XyChart) super.clone();
  }

}
