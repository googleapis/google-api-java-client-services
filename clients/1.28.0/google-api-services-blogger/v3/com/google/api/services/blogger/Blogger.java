/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.blogger;

/**
 * Service definition for Blogger (v3).
 *
 * <p>
 * API for access to the data within Blogger.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/blogger/docs/3.0/getting_started" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link BloggerRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Blogger extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Blogger API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "blogger/v3/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch/blogger/v3";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Blogger(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Blogger(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the BlogUserInfos collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Blogger blogger = new Blogger(...);}
   *   {@code Blogger.BlogUserInfos.List request = blogger.blogUserInfos().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public BlogUserInfos blogUserInfos() {
    return new BlogUserInfos();
  }

  /**
   * The "blogUserInfos" collection of methods.
   */
  public class BlogUserInfos {

    /**
     * Gets one blog and user info pair by blogId and userId.
     *
     * Create a request for the method "blogUserInfos.get".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param userId ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or the
     *        user's profile identifier.
     * @param blogId The ID of the blog to get.
     * @return the request
     */
    public Get get(java.lang.String userId, java.lang.String blogId) throws java.io.IOException {
      Get result = new Get(userId, blogId);
      initialize(result);
      return result;
    }

    public class Get extends BloggerRequest<com.google.api.services.blogger.model.BlogUserInfo> {

      private static final String REST_PATH = "users/{userId}/blogs/{blogId}";

      /**
       * Gets one blog and user info pair by blogId and userId.
       *
       * Create a request for the method "blogUserInfos.get".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or the
     *        user's profile identifier.
       * @param blogId The ID of the blog to get.
       * @since 1.13
       */
      protected Get(java.lang.String userId, java.lang.String blogId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.BlogUserInfo.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /**
       * ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or
       * the user's profile identifier.
       */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or the
     user's profile identifier.
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /**
       * ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or
       * the user's profile identifier.
       */
      public Get setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      /** The ID of the blog to get. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the blog to get.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the blog to get. */
      public Get setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** Maximum number of posts to pull back with the blog. */
      @com.google.api.client.util.Key
      private java.lang.Long maxPosts;

      /** Maximum number of posts to pull back with the blog.
       */
      public java.lang.Long getMaxPosts() {
        return maxPosts;
      }

      /** Maximum number of posts to pull back with the blog. */
      public Get setMaxPosts(java.lang.Long maxPosts) {
        this.maxPosts = maxPosts;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Blogs collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Blogger blogger = new Blogger(...);}
   *   {@code Blogger.Blogs.List request = blogger.blogs().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Blogs blogs() {
    return new Blogs();
  }

  /**
   * The "blogs" collection of methods.
   */
  public class Blogs {

    /**
     * Gets one blog by ID.
     *
     * Create a request for the method "blogs.get".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the blog to get.
     * @return the request
     */
    public Get get(java.lang.String blogId) throws java.io.IOException {
      Get result = new Get(blogId);
      initialize(result);
      return result;
    }

    public class Get extends BloggerRequest<com.google.api.services.blogger.model.Blog> {

      private static final String REST_PATH = "blogs/{blogId}";

      /**
       * Gets one blog by ID.
       *
       * Create a request for the method "blogs.get".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the blog to get.
       * @since 1.13
       */
      protected Get(java.lang.String blogId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.Blog.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The ID of the blog to get. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the blog to get.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the blog to get. */
      public Get setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** Maximum number of posts to pull back with the blog. */
      @com.google.api.client.util.Key
      private java.lang.Long maxPosts;

      /** Maximum number of posts to pull back with the blog.
       */
      public java.lang.Long getMaxPosts() {
        return maxPosts;
      }

      /** Maximum number of posts to pull back with the blog. */
      public Get setMaxPosts(java.lang.Long maxPosts) {
        this.maxPosts = maxPosts;
        return this;
      }

      /**
       * Access level with which to view the blog. Note that some fields require elevated access.
       */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Access level with which to view the blog. Note that some fields require elevated access.
       */
      public java.lang.String getView() {
        return view;
      }

      /**
       * Access level with which to view the blog. Note that some fields require elevated access.
       */
      public Get setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieve a Blog by URL.
     *
     * Create a request for the method "blogs.getByUrl".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link GetByUrl#execute()} method to invoke the remote operation.
     *
     * @param url The URL of the blog to retrieve.
     * @return the request
     */
    public GetByUrl getByUrl(java.lang.String url) throws java.io.IOException {
      GetByUrl result = new GetByUrl(url);
      initialize(result);
      return result;
    }

    public class GetByUrl extends BloggerRequest<com.google.api.services.blogger.model.Blog> {

      private static final String REST_PATH = "blogs/byurl";

      /**
       * Retrieve a Blog by URL.
       *
       * Create a request for the method "blogs.getByUrl".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link GetByUrl#execute()} method to invoke the remote operation. <p>
       * {@link
       * GetByUrl#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param url The URL of the blog to retrieve.
       * @since 1.13
       */
      protected GetByUrl(java.lang.String url) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.Blog.class);
        this.url = com.google.api.client.util.Preconditions.checkNotNull(url, "Required parameter url must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetByUrl setAlt(java.lang.String alt) {
        return (GetByUrl) super.setAlt(alt);
      }

      @Override
      public GetByUrl setFields(java.lang.String fields) {
        return (GetByUrl) super.setFields(fields);
      }

      @Override
      public GetByUrl setKey(java.lang.String key) {
        return (GetByUrl) super.setKey(key);
      }

      @Override
      public GetByUrl setOauthToken(java.lang.String oauthToken) {
        return (GetByUrl) super.setOauthToken(oauthToken);
      }

      @Override
      public GetByUrl setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetByUrl) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetByUrl setQuotaUser(java.lang.String quotaUser) {
        return (GetByUrl) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetByUrl setUserIp(java.lang.String userIp) {
        return (GetByUrl) super.setUserIp(userIp);
      }

      /** The URL of the blog to retrieve. */
      @com.google.api.client.util.Key
      private java.lang.String url;

      /** The URL of the blog to retrieve.
       */
      public java.lang.String getUrl() {
        return url;
      }

      /** The URL of the blog to retrieve. */
      public GetByUrl setUrl(java.lang.String url) {
        this.url = url;
        return this;
      }

      /**
       * Access level with which to view the blog. Note that some fields require elevated access.
       */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Access level with which to view the blog. Note that some fields require elevated access.
       */
      public java.lang.String getView() {
        return view;
      }

      /**
       * Access level with which to view the blog. Note that some fields require elevated access.
       */
      public GetByUrl setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public GetByUrl set(String parameterName, Object value) {
        return (GetByUrl) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of blogs, possibly filtered.
     *
     * Create a request for the method "blogs.listByUser".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link ListByUser#execute()} method to invoke the remote operation.
     *
     * @param userId ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or the
     *        user's profile identifier.
     * @return the request
     */
    public ListByUser listByUser(java.lang.String userId) throws java.io.IOException {
      ListByUser result = new ListByUser(userId);
      initialize(result);
      return result;
    }

    public class ListByUser extends BloggerRequest<com.google.api.services.blogger.model.BlogList> {

      private static final String REST_PATH = "users/{userId}/blogs";

      /**
       * Retrieves a list of blogs, possibly filtered.
       *
       * Create a request for the method "blogs.listByUser".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link ListByUser#execute()} method to invoke the remote operation. <p>
       * {@link
       * ListByUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or the
     *        user's profile identifier.
       * @since 1.13
       */
      protected ListByUser(java.lang.String userId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.BlogList.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public ListByUser setAlt(java.lang.String alt) {
        return (ListByUser) super.setAlt(alt);
      }

      @Override
      public ListByUser setFields(java.lang.String fields) {
        return (ListByUser) super.setFields(fields);
      }

      @Override
      public ListByUser setKey(java.lang.String key) {
        return (ListByUser) super.setKey(key);
      }

      @Override
      public ListByUser setOauthToken(java.lang.String oauthToken) {
        return (ListByUser) super.setOauthToken(oauthToken);
      }

      @Override
      public ListByUser setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ListByUser) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ListByUser setQuotaUser(java.lang.String quotaUser) {
        return (ListByUser) super.setQuotaUser(quotaUser);
      }

      @Override
      public ListByUser setUserIp(java.lang.String userIp) {
        return (ListByUser) super.setUserIp(userIp);
      }

      /**
       * ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or
       * the user's profile identifier.
       */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or the
     user's profile identifier.
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /**
       * ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or
       * the user's profile identifier.
       */
      public ListByUser setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      /**
       * Whether the response is a list of blogs with per-user information instead of just blogs.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchUserInfo;

      /** Whether the response is a list of blogs with per-user information instead of just blogs.
       */
      public java.lang.Boolean getFetchUserInfo() {
        return fetchUserInfo;
      }

      /**
       * Whether the response is a list of blogs with per-user information instead of just blogs.
       */
      public ListByUser setFetchUserInfo(java.lang.Boolean fetchUserInfo) {
        this.fetchUserInfo = fetchUserInfo;
        return this;
      }

      /**
       * User access types for blogs to include in the results, e.g. AUTHOR will return blogs where
       * the user has author level access. If no roles are specified, defaults to ADMIN and AUTHOR
       * roles.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> role;

      /** User access types for blogs to include in the results, e.g. AUTHOR will return blogs where the user
     has author level access. If no roles are specified, defaults to ADMIN and AUTHOR roles.
       */
      public java.util.List<java.lang.String> getRole() {
        return role;
      }

      /**
       * User access types for blogs to include in the results, e.g. AUTHOR will return blogs where
       * the user has author level access. If no roles are specified, defaults to ADMIN and AUTHOR
       * roles.
       */
      public ListByUser setRole(java.util.List<java.lang.String> role) {
        this.role = role;
        return this;
      }

      /**
       * Blog statuses to include in the result (default: Live blogs only). Note that ADMIN access
       * is required to view deleted blogs.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> status;

      /** Blog statuses to include in the result (default: Live blogs only). Note that ADMIN access is
     required to view deleted blogs. [default: LIVE]
       */
      public java.util.List<java.lang.String> getStatus() {
        return status;
      }

      /**
       * Blog statuses to include in the result (default: Live blogs only). Note that ADMIN access
       * is required to view deleted blogs.
       */
      public ListByUser setStatus(java.util.List<java.lang.String> status) {
        this.status = status;
        return this;
      }

      /**
       * Access level with which to view the blogs. Note that some fields require elevated access.
       */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Access level with which to view the blogs. Note that some fields require elevated access.
       */
      public java.lang.String getView() {
        return view;
      }

      /**
       * Access level with which to view the blogs. Note that some fields require elevated access.
       */
      public ListByUser setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public ListByUser set(String parameterName, Object value) {
        return (ListByUser) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Comments collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Blogger blogger = new Blogger(...);}
   *   {@code Blogger.Comments.List request = blogger.comments().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Comments comments() {
    return new Comments();
  }

  /**
   * The "comments" collection of methods.
   */
  public class Comments {

    /**
     * Marks a comment as not spam.
     *
     * Create a request for the method "comments.approve".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Approve#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the Blog.
     * @param postId The ID of the Post.
     * @param commentId The ID of the comment to mark as not spam.
     * @return the request
     */
    public Approve approve(java.lang.String blogId, java.lang.String postId, java.lang.String commentId) throws java.io.IOException {
      Approve result = new Approve(blogId, postId, commentId);
      initialize(result);
      return result;
    }

    public class Approve extends BloggerRequest<com.google.api.services.blogger.model.Comment> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}/comments/{commentId}/approve";

      /**
       * Marks a comment as not spam.
       *
       * Create a request for the method "comments.approve".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Approve#execute()} method to invoke the remote operation. <p>
       * {@link
       * Approve#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the Blog.
       * @param postId The ID of the Post.
       * @param commentId The ID of the comment to mark as not spam.
       * @since 1.13
       */
      protected Approve(java.lang.String blogId, java.lang.String postId, java.lang.String commentId) {
        super(Blogger.this, "POST", REST_PATH, null, com.google.api.services.blogger.model.Comment.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
        this.commentId = com.google.api.client.util.Preconditions.checkNotNull(commentId, "Required parameter commentId must be specified.");
      }

      @Override
      public Approve setAlt(java.lang.String alt) {
        return (Approve) super.setAlt(alt);
      }

      @Override
      public Approve setFields(java.lang.String fields) {
        return (Approve) super.setFields(fields);
      }

      @Override
      public Approve setKey(java.lang.String key) {
        return (Approve) super.setKey(key);
      }

      @Override
      public Approve setOauthToken(java.lang.String oauthToken) {
        return (Approve) super.setOauthToken(oauthToken);
      }

      @Override
      public Approve setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Approve) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Approve setQuotaUser(java.lang.String quotaUser) {
        return (Approve) super.setQuotaUser(quotaUser);
      }

      @Override
      public Approve setUserIp(java.lang.String userIp) {
        return (Approve) super.setUserIp(userIp);
      }

      /** The ID of the Blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the Blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the Blog. */
      public Approve setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the Post. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** The ID of the Post.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** The ID of the Post. */
      public Approve setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      /** The ID of the comment to mark as not spam. */
      @com.google.api.client.util.Key
      private java.lang.String commentId;

      /** The ID of the comment to mark as not spam.
       */
      public java.lang.String getCommentId() {
        return commentId;
      }

      /** The ID of the comment to mark as not spam. */
      public Approve setCommentId(java.lang.String commentId) {
        this.commentId = commentId;
        return this;
      }

      @Override
      public Approve set(String parameterName, Object value) {
        return (Approve) super.set(parameterName, value);
      }
    }
    /**
     * Delete a comment by ID.
     *
     * Create a request for the method "comments.delete".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the Blog.
     * @param postId The ID of the Post.
     * @param commentId The ID of the comment to delete.
     * @return the request
     */
    public Delete delete(java.lang.String blogId, java.lang.String postId, java.lang.String commentId) throws java.io.IOException {
      Delete result = new Delete(blogId, postId, commentId);
      initialize(result);
      return result;
    }

    public class Delete extends BloggerRequest<Void> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}/comments/{commentId}";

      /**
       * Delete a comment by ID.
       *
       * Create a request for the method "comments.delete".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the Blog.
       * @param postId The ID of the Post.
       * @param commentId The ID of the comment to delete.
       * @since 1.13
       */
      protected Delete(java.lang.String blogId, java.lang.String postId, java.lang.String commentId) {
        super(Blogger.this, "DELETE", REST_PATH, null, Void.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
        this.commentId = com.google.api.client.util.Preconditions.checkNotNull(commentId, "Required parameter commentId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** The ID of the Blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the Blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the Blog. */
      public Delete setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the Post. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** The ID of the Post.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** The ID of the Post. */
      public Delete setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      /** The ID of the comment to delete. */
      @com.google.api.client.util.Key
      private java.lang.String commentId;

      /** The ID of the comment to delete.
       */
      public java.lang.String getCommentId() {
        return commentId;
      }

      /** The ID of the comment to delete. */
      public Delete setCommentId(java.lang.String commentId) {
        this.commentId = commentId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Gets one comment by ID.
     *
     * Create a request for the method "comments.get".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to containing the comment.
     * @param postId ID of the post to fetch posts from.
     * @param commentId The ID of the comment to get.
     * @return the request
     */
    public Get get(java.lang.String blogId, java.lang.String postId, java.lang.String commentId) throws java.io.IOException {
      Get result = new Get(blogId, postId, commentId);
      initialize(result);
      return result;
    }

    public class Get extends BloggerRequest<com.google.api.services.blogger.model.Comment> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}/comments/{commentId}";

      /**
       * Gets one comment by ID.
       *
       * Create a request for the method "comments.get".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to containing the comment.
       * @param postId ID of the post to fetch posts from.
       * @param commentId The ID of the comment to get.
       * @since 1.13
       */
      protected Get(java.lang.String blogId, java.lang.String postId, java.lang.String commentId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.Comment.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
        this.commentId = com.google.api.client.util.Preconditions.checkNotNull(commentId, "Required parameter commentId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** ID of the blog to containing the comment. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to containing the comment.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to containing the comment. */
      public Get setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** ID of the post to fetch posts from. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** ID of the post to fetch posts from.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** ID of the post to fetch posts from. */
      public Get setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      /** The ID of the comment to get. */
      @com.google.api.client.util.Key
      private java.lang.String commentId;

      /** The ID of the comment to get.
       */
      public java.lang.String getCommentId() {
        return commentId;
      }

      /** The ID of the comment to get. */
      public Get setCommentId(java.lang.String commentId) {
        this.commentId = commentId;
        return this;
      }

      /**
       * Access level for the requested comment (default: READER). Note that some comments will
       * require elevated permissions, for example comments where the parent posts which is in a
       * draft state, or comments that are pending moderation.
       */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Access level for the requested comment (default: READER). Note that some comments will require
     elevated permissions, for example comments where the parent posts which is in a draft state, or
     comments that are pending moderation.
       */
      public java.lang.String getView() {
        return view;
      }

      /**
       * Access level for the requested comment (default: READER). Note that some comments will
       * require elevated permissions, for example comments where the parent posts which is in a
       * draft state, or comments that are pending moderation.
       */
      public Get setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the comments for a post, possibly filtered.
     *
     * Create a request for the method "comments.list".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to fetch comments from.
     * @param postId ID of the post to fetch posts from.
     * @return the request
     */
    public List list(java.lang.String blogId, java.lang.String postId) throws java.io.IOException {
      List result = new List(blogId, postId);
      initialize(result);
      return result;
    }

    public class List extends BloggerRequest<com.google.api.services.blogger.model.CommentList> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}/comments";

      /**
       * Retrieves the comments for a post, possibly filtered.
       *
       * Create a request for the method "comments.list".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to fetch comments from.
       * @param postId ID of the post to fetch posts from.
       * @since 1.13
       */
      protected List(java.lang.String blogId, java.lang.String postId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.CommentList.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** ID of the blog to fetch comments from. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to fetch comments from.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to fetch comments from. */
      public List setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** ID of the post to fetch posts from. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** ID of the post to fetch posts from.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** ID of the post to fetch posts from. */
      public List setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      /** Latest date of comment to fetch, a date-time with RFC 3339 formatting. */
      @com.google.api.client.util.Key
      private com.google.api.client.util.DateTime endDate;

      /** Latest date of comment to fetch, a date-time with RFC 3339 formatting.
       */
      public com.google.api.client.util.DateTime getEndDate() {
        return endDate;
      }

      /** Latest date of comment to fetch, a date-time with RFC 3339 formatting. */
      public List setEndDate(com.google.api.client.util.DateTime endDate) {
        this.endDate = endDate;
        return this;
      }

      /** Whether the body content of the comments is included. */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchBodies;

      /** Whether the body content of the comments is included.
       */
      public java.lang.Boolean getFetchBodies() {
        return fetchBodies;
      }

      /** Whether the body content of the comments is included. */
      public List setFetchBodies(java.lang.Boolean fetchBodies) {
        this.fetchBodies = fetchBodies;
        return this;
      }

      /** Maximum number of comments to include in the result. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of comments to include in the result.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of comments to include in the result. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Continuation token if request is paged. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Continuation token if request is paged.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Continuation token if request is paged. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /** Earliest date of comment to fetch, a date-time with RFC 3339 formatting. */
      @com.google.api.client.util.Key
      private com.google.api.client.util.DateTime startDate;

      /** Earliest date of comment to fetch, a date-time with RFC 3339 formatting.
       */
      public com.google.api.client.util.DateTime getStartDate() {
        return startDate;
      }

      /** Earliest date of comment to fetch, a date-time with RFC 3339 formatting. */
      public List setStartDate(com.google.api.client.util.DateTime startDate) {
        this.startDate = startDate;
        return this;
      }

      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> status;

      /**

       */
      public java.util.List<java.lang.String> getStatus() {
        return status;
      }

      public List setStatus(java.util.List<java.lang.String> status) {
        this.status = status;
        return this;
      }

      /**
       * Access level with which to view the returned result. Note that some fields require elevated
       * access.
       */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Access level with which to view the returned result. Note that some fields require elevated access.
       */
      public java.lang.String getView() {
        return view;
      }

      /**
       * Access level with which to view the returned result. Note that some fields require elevated
       * access.
       */
      public List setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the comments for a blog, across all posts, possibly filtered.
     *
     * Create a request for the method "comments.listByBlog".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link ListByBlog#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to fetch comments from.
     * @return the request
     */
    public ListByBlog listByBlog(java.lang.String blogId) throws java.io.IOException {
      ListByBlog result = new ListByBlog(blogId);
      initialize(result);
      return result;
    }

    public class ListByBlog extends BloggerRequest<com.google.api.services.blogger.model.CommentList> {

      private static final String REST_PATH = "blogs/{blogId}/comments";

      /**
       * Retrieves the comments for a blog, across all posts, possibly filtered.
       *
       * Create a request for the method "comments.listByBlog".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link ListByBlog#execute()} method to invoke the remote operation. <p>
       * {@link
       * ListByBlog#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to fetch comments from.
       * @since 1.13
       */
      protected ListByBlog(java.lang.String blogId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.CommentList.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public ListByBlog setAlt(java.lang.String alt) {
        return (ListByBlog) super.setAlt(alt);
      }

      @Override
      public ListByBlog setFields(java.lang.String fields) {
        return (ListByBlog) super.setFields(fields);
      }

      @Override
      public ListByBlog setKey(java.lang.String key) {
        return (ListByBlog) super.setKey(key);
      }

      @Override
      public ListByBlog setOauthToken(java.lang.String oauthToken) {
        return (ListByBlog) super.setOauthToken(oauthToken);
      }

      @Override
      public ListByBlog setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ListByBlog) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ListByBlog setQuotaUser(java.lang.String quotaUser) {
        return (ListByBlog) super.setQuotaUser(quotaUser);
      }

      @Override
      public ListByBlog setUserIp(java.lang.String userIp) {
        return (ListByBlog) super.setUserIp(userIp);
      }

      /** ID of the blog to fetch comments from. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to fetch comments from.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to fetch comments from. */
      public ListByBlog setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** Latest date of comment to fetch, a date-time with RFC 3339 formatting. */
      @com.google.api.client.util.Key
      private com.google.api.client.util.DateTime endDate;

      /** Latest date of comment to fetch, a date-time with RFC 3339 formatting.
       */
      public com.google.api.client.util.DateTime getEndDate() {
        return endDate;
      }

      /** Latest date of comment to fetch, a date-time with RFC 3339 formatting. */
      public ListByBlog setEndDate(com.google.api.client.util.DateTime endDate) {
        this.endDate = endDate;
        return this;
      }

      /** Whether the body content of the comments is included. */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchBodies;

      /** Whether the body content of the comments is included.
       */
      public java.lang.Boolean getFetchBodies() {
        return fetchBodies;
      }

      /** Whether the body content of the comments is included. */
      public ListByBlog setFetchBodies(java.lang.Boolean fetchBodies) {
        this.fetchBodies = fetchBodies;
        return this;
      }

      /** Maximum number of comments to include in the result. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of comments to include in the result.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of comments to include in the result. */
      public ListByBlog setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Continuation token if request is paged. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Continuation token if request is paged.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Continuation token if request is paged. */
      public ListByBlog setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /** Earliest date of comment to fetch, a date-time with RFC 3339 formatting. */
      @com.google.api.client.util.Key
      private com.google.api.client.util.DateTime startDate;

      /** Earliest date of comment to fetch, a date-time with RFC 3339 formatting.
       */
      public com.google.api.client.util.DateTime getStartDate() {
        return startDate;
      }

      /** Earliest date of comment to fetch, a date-time with RFC 3339 formatting. */
      public ListByBlog setStartDate(com.google.api.client.util.DateTime startDate) {
        this.startDate = startDate;
        return this;
      }

      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> status;

      /**

       */
      public java.util.List<java.lang.String> getStatus() {
        return status;
      }

      public ListByBlog setStatus(java.util.List<java.lang.String> status) {
        this.status = status;
        return this;
      }

      @Override
      public ListByBlog set(String parameterName, Object value) {
        return (ListByBlog) super.set(parameterName, value);
      }
    }
    /**
     * Marks a comment as spam.
     *
     * Create a request for the method "comments.markAsSpam".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link MarkAsSpam#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the Blog.
     * @param postId The ID of the Post.
     * @param commentId The ID of the comment to mark as spam.
     * @return the request
     */
    public MarkAsSpam markAsSpam(java.lang.String blogId, java.lang.String postId, java.lang.String commentId) throws java.io.IOException {
      MarkAsSpam result = new MarkAsSpam(blogId, postId, commentId);
      initialize(result);
      return result;
    }

    public class MarkAsSpam extends BloggerRequest<com.google.api.services.blogger.model.Comment> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}/comments/{commentId}/spam";

      /**
       * Marks a comment as spam.
       *
       * Create a request for the method "comments.markAsSpam".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link MarkAsSpam#execute()} method to invoke the remote operation. <p>
       * {@link
       * MarkAsSpam#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the Blog.
       * @param postId The ID of the Post.
       * @param commentId The ID of the comment to mark as spam.
       * @since 1.13
       */
      protected MarkAsSpam(java.lang.String blogId, java.lang.String postId, java.lang.String commentId) {
        super(Blogger.this, "POST", REST_PATH, null, com.google.api.services.blogger.model.Comment.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
        this.commentId = com.google.api.client.util.Preconditions.checkNotNull(commentId, "Required parameter commentId must be specified.");
      }

      @Override
      public MarkAsSpam setAlt(java.lang.String alt) {
        return (MarkAsSpam) super.setAlt(alt);
      }

      @Override
      public MarkAsSpam setFields(java.lang.String fields) {
        return (MarkAsSpam) super.setFields(fields);
      }

      @Override
      public MarkAsSpam setKey(java.lang.String key) {
        return (MarkAsSpam) super.setKey(key);
      }

      @Override
      public MarkAsSpam setOauthToken(java.lang.String oauthToken) {
        return (MarkAsSpam) super.setOauthToken(oauthToken);
      }

      @Override
      public MarkAsSpam setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (MarkAsSpam) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public MarkAsSpam setQuotaUser(java.lang.String quotaUser) {
        return (MarkAsSpam) super.setQuotaUser(quotaUser);
      }

      @Override
      public MarkAsSpam setUserIp(java.lang.String userIp) {
        return (MarkAsSpam) super.setUserIp(userIp);
      }

      /** The ID of the Blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the Blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the Blog. */
      public MarkAsSpam setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the Post. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** The ID of the Post.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** The ID of the Post. */
      public MarkAsSpam setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      /** The ID of the comment to mark as spam. */
      @com.google.api.client.util.Key
      private java.lang.String commentId;

      /** The ID of the comment to mark as spam.
       */
      public java.lang.String getCommentId() {
        return commentId;
      }

      /** The ID of the comment to mark as spam. */
      public MarkAsSpam setCommentId(java.lang.String commentId) {
        this.commentId = commentId;
        return this;
      }

      @Override
      public MarkAsSpam set(String parameterName, Object value) {
        return (MarkAsSpam) super.set(parameterName, value);
      }
    }
    /**
     * Removes the content of a comment.
     *
     * Create a request for the method "comments.removeContent".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link RemoveContent#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the Blog.
     * @param postId The ID of the Post.
     * @param commentId The ID of the comment to delete content from.
     * @return the request
     */
    public RemoveContent removeContent(java.lang.String blogId, java.lang.String postId, java.lang.String commentId) throws java.io.IOException {
      RemoveContent result = new RemoveContent(blogId, postId, commentId);
      initialize(result);
      return result;
    }

    public class RemoveContent extends BloggerRequest<com.google.api.services.blogger.model.Comment> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent";

      /**
       * Removes the content of a comment.
       *
       * Create a request for the method "comments.removeContent".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link RemoveContent#execute()} method to invoke the remote operation. <p>
       * {@link RemoveContent#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @param blogId The ID of the Blog.
       * @param postId The ID of the Post.
       * @param commentId The ID of the comment to delete content from.
       * @since 1.13
       */
      protected RemoveContent(java.lang.String blogId, java.lang.String postId, java.lang.String commentId) {
        super(Blogger.this, "POST", REST_PATH, null, com.google.api.services.blogger.model.Comment.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
        this.commentId = com.google.api.client.util.Preconditions.checkNotNull(commentId, "Required parameter commentId must be specified.");
      }

      @Override
      public RemoveContent setAlt(java.lang.String alt) {
        return (RemoveContent) super.setAlt(alt);
      }

      @Override
      public RemoveContent setFields(java.lang.String fields) {
        return (RemoveContent) super.setFields(fields);
      }

      @Override
      public RemoveContent setKey(java.lang.String key) {
        return (RemoveContent) super.setKey(key);
      }

      @Override
      public RemoveContent setOauthToken(java.lang.String oauthToken) {
        return (RemoveContent) super.setOauthToken(oauthToken);
      }

      @Override
      public RemoveContent setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RemoveContent) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RemoveContent setQuotaUser(java.lang.String quotaUser) {
        return (RemoveContent) super.setQuotaUser(quotaUser);
      }

      @Override
      public RemoveContent setUserIp(java.lang.String userIp) {
        return (RemoveContent) super.setUserIp(userIp);
      }

      /** The ID of the Blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the Blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the Blog. */
      public RemoveContent setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the Post. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** The ID of the Post.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** The ID of the Post. */
      public RemoveContent setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      /** The ID of the comment to delete content from. */
      @com.google.api.client.util.Key
      private java.lang.String commentId;

      /** The ID of the comment to delete content from.
       */
      public java.lang.String getCommentId() {
        return commentId;
      }

      /** The ID of the comment to delete content from. */
      public RemoveContent setCommentId(java.lang.String commentId) {
        this.commentId = commentId;
        return this;
      }

      @Override
      public RemoveContent set(String parameterName, Object value) {
        return (RemoveContent) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the PageViews collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Blogger blogger = new Blogger(...);}
   *   {@code Blogger.PageViews.List request = blogger.pageViews().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public PageViews pageViews() {
    return new PageViews();
  }

  /**
   * The "pageViews" collection of methods.
   */
  public class PageViews {

    /**
     * Retrieve pageview stats for a Blog.
     *
     * Create a request for the method "pageViews.get".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the blog to get.
     * @return the request
     */
    public Get get(java.lang.String blogId) throws java.io.IOException {
      Get result = new Get(blogId);
      initialize(result);
      return result;
    }

    public class Get extends BloggerRequest<com.google.api.services.blogger.model.Pageviews> {

      private static final String REST_PATH = "blogs/{blogId}/pageviews";

      /**
       * Retrieve pageview stats for a Blog.
       *
       * Create a request for the method "pageViews.get".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the blog to get.
       * @since 1.13
       */
      protected Get(java.lang.String blogId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.Pageviews.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The ID of the blog to get. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the blog to get.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the blog to get. */
      public Get setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> range;

      /**

       */
      public java.util.List<java.lang.String> getRange() {
        return range;
      }

      public Get setRange(java.util.List<java.lang.String> range) {
        this.range = range;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Pages collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Blogger blogger = new Blogger(...);}
   *   {@code Blogger.Pages.List request = blogger.pages().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Pages pages() {
    return new Pages();
  }

  /**
   * The "pages" collection of methods.
   */
  public class Pages {

    /**
     * Delete a page by ID.
     *
     * Create a request for the method "pages.delete".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the Blog.
     * @param pageId The ID of the Page.
     * @return the request
     */
    public Delete delete(java.lang.String blogId, java.lang.String pageId) throws java.io.IOException {
      Delete result = new Delete(blogId, pageId);
      initialize(result);
      return result;
    }

    public class Delete extends BloggerRequest<Void> {

      private static final String REST_PATH = "blogs/{blogId}/pages/{pageId}";

      /**
       * Delete a page by ID.
       *
       * Create a request for the method "pages.delete".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the Blog.
       * @param pageId The ID of the Page.
       * @since 1.13
       */
      protected Delete(java.lang.String blogId, java.lang.String pageId) {
        super(Blogger.this, "DELETE", REST_PATH, null, Void.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.pageId = com.google.api.client.util.Preconditions.checkNotNull(pageId, "Required parameter pageId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** The ID of the Blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the Blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the Blog. */
      public Delete setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the Page. */
      @com.google.api.client.util.Key
      private java.lang.String pageId;

      /** The ID of the Page.
       */
      public java.lang.String getPageId() {
        return pageId;
      }

      /** The ID of the Page. */
      public Delete setPageId(java.lang.String pageId) {
        this.pageId = pageId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Gets one blog page by ID.
     *
     * Create a request for the method "pages.get".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog containing the page.
     * @param pageId The ID of the page to get.
     * @return the request
     */
    public Get get(java.lang.String blogId, java.lang.String pageId) throws java.io.IOException {
      Get result = new Get(blogId, pageId);
      initialize(result);
      return result;
    }

    public class Get extends BloggerRequest<com.google.api.services.blogger.model.Page> {

      private static final String REST_PATH = "blogs/{blogId}/pages/{pageId}";

      /**
       * Gets one blog page by ID.
       *
       * Create a request for the method "pages.get".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog containing the page.
       * @param pageId The ID of the page to get.
       * @since 1.13
       */
      protected Get(java.lang.String blogId, java.lang.String pageId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.Page.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.pageId = com.google.api.client.util.Preconditions.checkNotNull(pageId, "Required parameter pageId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** ID of the blog containing the page. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog containing the page.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog containing the page. */
      public Get setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the page to get. */
      @com.google.api.client.util.Key
      private java.lang.String pageId;

      /** The ID of the page to get.
       */
      public java.lang.String getPageId() {
        return pageId;
      }

      /** The ID of the page to get. */
      public Get setPageId(java.lang.String pageId) {
        this.pageId = pageId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String view;

      /**

       */
      public java.lang.String getView() {
        return view;
      }

      public Get setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Add a page.
     *
     * Create a request for the method "pages.insert".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to add the page to.
     * @param content the {@link com.google.api.services.blogger.model.Page}
     * @return the request
     */
    public Insert insert(java.lang.String blogId, com.google.api.services.blogger.model.Page content) throws java.io.IOException {
      Insert result = new Insert(blogId, content);
      initialize(result);
      return result;
    }

    public class Insert extends BloggerRequest<com.google.api.services.blogger.model.Page> {

      private static final String REST_PATH = "blogs/{blogId}/pages";

      /**
       * Add a page.
       *
       * Create a request for the method "pages.insert".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to add the page to.
       * @param content the {@link com.google.api.services.blogger.model.Page}
       * @since 1.13
       */
      protected Insert(java.lang.String blogId, com.google.api.services.blogger.model.Page content) {
        super(Blogger.this, "POST", REST_PATH, content, com.google.api.services.blogger.model.Page.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** ID of the blog to add the page to. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to add the page to.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to add the page to. */
      public Insert setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** Whether to create the page as a draft (default: false). */
      @com.google.api.client.util.Key
      private java.lang.Boolean isDraft;

      /** Whether to create the page as a draft (default: false).
       */
      public java.lang.Boolean getIsDraft() {
        return isDraft;
      }

      /** Whether to create the page as a draft (default: false). */
      public Insert setIsDraft(java.lang.Boolean isDraft) {
        this.isDraft = isDraft;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the pages for a blog, optionally including non-LIVE statuses.
     *
     * Create a request for the method "pages.list".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to fetch Pages from.
     * @return the request
     */
    public List list(java.lang.String blogId) throws java.io.IOException {
      List result = new List(blogId);
      initialize(result);
      return result;
    }

    public class List extends BloggerRequest<com.google.api.services.blogger.model.PageList> {

      private static final String REST_PATH = "blogs/{blogId}/pages";

      /**
       * Retrieves the pages for a blog, optionally including non-LIVE statuses.
       *
       * Create a request for the method "pages.list".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to fetch Pages from.
       * @since 1.13
       */
      protected List(java.lang.String blogId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.PageList.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** ID of the blog to fetch Pages from. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to fetch Pages from.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to fetch Pages from. */
      public List setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** Whether to retrieve the Page bodies. */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchBodies;

      /** Whether to retrieve the Page bodies.
       */
      public java.lang.Boolean getFetchBodies() {
        return fetchBodies;
      }

      /** Whether to retrieve the Page bodies. */
      public List setFetchBodies(java.lang.Boolean fetchBodies) {
        this.fetchBodies = fetchBodies;
        return this;
      }

      /** Maximum number of Pages to fetch. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of Pages to fetch.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of Pages to fetch. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Continuation token if the request is paged. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Continuation token if the request is paged.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Continuation token if the request is paged. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> status;

      /**

       */
      public java.util.List<java.lang.String> getStatus() {
        return status;
      }

      public List setStatus(java.util.List<java.lang.String> status) {
        this.status = status;
        return this;
      }

      /**
       * Access level with which to view the returned result. Note that some fields require elevated
       * access.
       */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Access level with which to view the returned result. Note that some fields require elevated access.
       */
      public java.lang.String getView() {
        return view;
      }

      /**
       * Access level with which to view the returned result. Note that some fields require elevated
       * access.
       */
      public List setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Update a page. This method supports patch semantics.
     *
     * Create a request for the method "pages.patch".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the Blog.
     * @param pageId The ID of the Page.
     * @param content the {@link com.google.api.services.blogger.model.Page}
     * @return the request
     */
    public Patch patch(java.lang.String blogId, java.lang.String pageId, com.google.api.services.blogger.model.Page content) throws java.io.IOException {
      Patch result = new Patch(blogId, pageId, content);
      initialize(result);
      return result;
    }

    public class Patch extends BloggerRequest<com.google.api.services.blogger.model.Page> {

      private static final String REST_PATH = "blogs/{blogId}/pages/{pageId}";

      /**
       * Update a page. This method supports patch semantics.
       *
       * Create a request for the method "pages.patch".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the Blog.
       * @param pageId The ID of the Page.
       * @param content the {@link com.google.api.services.blogger.model.Page}
       * @since 1.13
       */
      protected Patch(java.lang.String blogId, java.lang.String pageId, com.google.api.services.blogger.model.Page content) {
        super(Blogger.this, "PATCH", REST_PATH, content, com.google.api.services.blogger.model.Page.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.pageId = com.google.api.client.util.Preconditions.checkNotNull(pageId, "Required parameter pageId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** The ID of the Blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the Blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the Blog. */
      public Patch setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the Page. */
      @com.google.api.client.util.Key
      private java.lang.String pageId;

      /** The ID of the Page.
       */
      public java.lang.String getPageId() {
        return pageId;
      }

      /** The ID of the Page. */
      public Patch setPageId(java.lang.String pageId) {
        this.pageId = pageId;
        return this;
      }

      /**
       * Whether a publish action should be performed when the page is updated (default: false).
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean publish;

      /** Whether a publish action should be performed when the page is updated (default: false).
       */
      public java.lang.Boolean getPublish() {
        return publish;
      }

      /**
       * Whether a publish action should be performed when the page is updated (default: false).
       */
      public Patch setPublish(java.lang.Boolean publish) {
        this.publish = publish;
        return this;
      }

      /** Whether a revert action should be performed when the page is updated (default: false). */
      @com.google.api.client.util.Key
      private java.lang.Boolean revert;

      /** Whether a revert action should be performed when the page is updated (default: false).
       */
      public java.lang.Boolean getRevert() {
        return revert;
      }

      /** Whether a revert action should be performed when the page is updated (default: false). */
      public Patch setRevert(java.lang.Boolean revert) {
        this.revert = revert;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Publishes a draft page.
     *
     * Create a request for the method "pages.publish".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Publish#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the blog.
     * @param pageId The ID of the page.
     * @return the request
     */
    public Publish publish(java.lang.String blogId, java.lang.String pageId) throws java.io.IOException {
      Publish result = new Publish(blogId, pageId);
      initialize(result);
      return result;
    }

    public class Publish extends BloggerRequest<com.google.api.services.blogger.model.Page> {

      private static final String REST_PATH = "blogs/{blogId}/pages/{pageId}/publish";

      /**
       * Publishes a draft page.
       *
       * Create a request for the method "pages.publish".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Publish#execute()} method to invoke the remote operation. <p>
       * {@link
       * Publish#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the blog.
       * @param pageId The ID of the page.
       * @since 1.13
       */
      protected Publish(java.lang.String blogId, java.lang.String pageId) {
        super(Blogger.this, "POST", REST_PATH, null, com.google.api.services.blogger.model.Page.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.pageId = com.google.api.client.util.Preconditions.checkNotNull(pageId, "Required parameter pageId must be specified.");
      }

      @Override
      public Publish setAlt(java.lang.String alt) {
        return (Publish) super.setAlt(alt);
      }

      @Override
      public Publish setFields(java.lang.String fields) {
        return (Publish) super.setFields(fields);
      }

      @Override
      public Publish setKey(java.lang.String key) {
        return (Publish) super.setKey(key);
      }

      @Override
      public Publish setOauthToken(java.lang.String oauthToken) {
        return (Publish) super.setOauthToken(oauthToken);
      }

      @Override
      public Publish setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Publish) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Publish setQuotaUser(java.lang.String quotaUser) {
        return (Publish) super.setQuotaUser(quotaUser);
      }

      @Override
      public Publish setUserIp(java.lang.String userIp) {
        return (Publish) super.setUserIp(userIp);
      }

      /** The ID of the blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the blog. */
      public Publish setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the page. */
      @com.google.api.client.util.Key
      private java.lang.String pageId;

      /** The ID of the page.
       */
      public java.lang.String getPageId() {
        return pageId;
      }

      /** The ID of the page. */
      public Publish setPageId(java.lang.String pageId) {
        this.pageId = pageId;
        return this;
      }

      @Override
      public Publish set(String parameterName, Object value) {
        return (Publish) super.set(parameterName, value);
      }
    }
    /**
     * Revert a published or scheduled page to draft state.
     *
     * Create a request for the method "pages.revert".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Revert#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the blog.
     * @param pageId The ID of the page.
     * @return the request
     */
    public Revert revert(java.lang.String blogId, java.lang.String pageId) throws java.io.IOException {
      Revert result = new Revert(blogId, pageId);
      initialize(result);
      return result;
    }

    public class Revert extends BloggerRequest<com.google.api.services.blogger.model.Page> {

      private static final String REST_PATH = "blogs/{blogId}/pages/{pageId}/revert";

      /**
       * Revert a published or scheduled page to draft state.
       *
       * Create a request for the method "pages.revert".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Revert#execute()} method to invoke the remote operation. <p> {@link
       * Revert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the blog.
       * @param pageId The ID of the page.
       * @since 1.13
       */
      protected Revert(java.lang.String blogId, java.lang.String pageId) {
        super(Blogger.this, "POST", REST_PATH, null, com.google.api.services.blogger.model.Page.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.pageId = com.google.api.client.util.Preconditions.checkNotNull(pageId, "Required parameter pageId must be specified.");
      }

      @Override
      public Revert setAlt(java.lang.String alt) {
        return (Revert) super.setAlt(alt);
      }

      @Override
      public Revert setFields(java.lang.String fields) {
        return (Revert) super.setFields(fields);
      }

      @Override
      public Revert setKey(java.lang.String key) {
        return (Revert) super.setKey(key);
      }

      @Override
      public Revert setOauthToken(java.lang.String oauthToken) {
        return (Revert) super.setOauthToken(oauthToken);
      }

      @Override
      public Revert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Revert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Revert setQuotaUser(java.lang.String quotaUser) {
        return (Revert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Revert setUserIp(java.lang.String userIp) {
        return (Revert) super.setUserIp(userIp);
      }

      /** The ID of the blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the blog. */
      public Revert setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the page. */
      @com.google.api.client.util.Key
      private java.lang.String pageId;

      /** The ID of the page.
       */
      public java.lang.String getPageId() {
        return pageId;
      }

      /** The ID of the page. */
      public Revert setPageId(java.lang.String pageId) {
        this.pageId = pageId;
        return this;
      }

      @Override
      public Revert set(String parameterName, Object value) {
        return (Revert) super.set(parameterName, value);
      }
    }
    /**
     * Update a page.
     *
     * Create a request for the method "pages.update".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the Blog.
     * @param pageId The ID of the Page.
     * @param content the {@link com.google.api.services.blogger.model.Page}
     * @return the request
     */
    public Update update(java.lang.String blogId, java.lang.String pageId, com.google.api.services.blogger.model.Page content) throws java.io.IOException {
      Update result = new Update(blogId, pageId, content);
      initialize(result);
      return result;
    }

    public class Update extends BloggerRequest<com.google.api.services.blogger.model.Page> {

      private static final String REST_PATH = "blogs/{blogId}/pages/{pageId}";

      /**
       * Update a page.
       *
       * Create a request for the method "pages.update".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the Blog.
       * @param pageId The ID of the Page.
       * @param content the {@link com.google.api.services.blogger.model.Page}
       * @since 1.13
       */
      protected Update(java.lang.String blogId, java.lang.String pageId, com.google.api.services.blogger.model.Page content) {
        super(Blogger.this, "PUT", REST_PATH, content, com.google.api.services.blogger.model.Page.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.pageId = com.google.api.client.util.Preconditions.checkNotNull(pageId, "Required parameter pageId must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** The ID of the Blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the Blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the Blog. */
      public Update setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the Page. */
      @com.google.api.client.util.Key
      private java.lang.String pageId;

      /** The ID of the Page.
       */
      public java.lang.String getPageId() {
        return pageId;
      }

      /** The ID of the Page. */
      public Update setPageId(java.lang.String pageId) {
        this.pageId = pageId;
        return this;
      }

      /**
       * Whether a publish action should be performed when the page is updated (default: false).
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean publish;

      /** Whether a publish action should be performed when the page is updated (default: false).
       */
      public java.lang.Boolean getPublish() {
        return publish;
      }

      /**
       * Whether a publish action should be performed when the page is updated (default: false).
       */
      public Update setPublish(java.lang.Boolean publish) {
        this.publish = publish;
        return this;
      }

      /** Whether a revert action should be performed when the page is updated (default: false). */
      @com.google.api.client.util.Key
      private java.lang.Boolean revert;

      /** Whether a revert action should be performed when the page is updated (default: false).
       */
      public java.lang.Boolean getRevert() {
        return revert;
      }

      /** Whether a revert action should be performed when the page is updated (default: false). */
      public Update setRevert(java.lang.Boolean revert) {
        this.revert = revert;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the PostUserInfos collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Blogger blogger = new Blogger(...);}
   *   {@code Blogger.PostUserInfos.List request = blogger.postUserInfos().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public PostUserInfos postUserInfos() {
    return new PostUserInfos();
  }

  /**
   * The "postUserInfos" collection of methods.
   */
  public class PostUserInfos {

    /**
     * Gets one post and user info pair, by post ID and user ID. The post user info contains per-user
     * information about the post, such as access rights, specific to the user.
     *
     * Create a request for the method "postUserInfos.get".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param userId ID of the user for the per-user information to be fetched. Either the word 'self' (sans quote marks)
     *        or the user's profile identifier.
     * @param blogId The ID of the blog.
     * @param postId The ID of the post to get.
     * @return the request
     */
    public Get get(java.lang.String userId, java.lang.String blogId, java.lang.String postId) throws java.io.IOException {
      Get result = new Get(userId, blogId, postId);
      initialize(result);
      return result;
    }

    public class Get extends BloggerRequest<com.google.api.services.blogger.model.PostUserInfo> {

      private static final String REST_PATH = "users/{userId}/blogs/{blogId}/posts/{postId}";

      /**
       * Gets one post and user info pair, by post ID and user ID. The post user info contains per-user
       * information about the post, such as access rights, specific to the user.
       *
       * Create a request for the method "postUserInfos.get".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId ID of the user for the per-user information to be fetched. Either the word 'self' (sans quote marks)
     *        or the user's profile identifier.
       * @param blogId The ID of the blog.
       * @param postId The ID of the post to get.
       * @since 1.13
       */
      protected Get(java.lang.String userId, java.lang.String blogId, java.lang.String postId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.PostUserInfo.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /**
       * ID of the user for the per-user information to be fetched. Either the word 'self' (sans
       * quote marks) or the user's profile identifier.
       */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** ID of the user for the per-user information to be fetched. Either the word 'self' (sans quote
     marks) or the user's profile identifier.
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /**
       * ID of the user for the per-user information to be fetched. Either the word 'self' (sans
       * quote marks) or the user's profile identifier.
       */
      public Get setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      /** The ID of the blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the blog. */
      public Get setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the post to get. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** The ID of the post to get.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** The ID of the post to get. */
      public Get setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      /** Maximum number of comments to pull back on a post. */
      @com.google.api.client.util.Key
      private java.lang.Long maxComments;

      /** Maximum number of comments to pull back on a post.
       */
      public java.lang.Long getMaxComments() {
        return maxComments;
      }

      /** Maximum number of comments to pull back on a post. */
      public Get setMaxComments(java.lang.Long maxComments) {
        this.maxComments = maxComments;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of post and post user info pairs, possibly filtered. The post user info contains
     * per-user information about the post, such as access rights, specific to the user.
     *
     * Create a request for the method "postUserInfos.list".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param userId ID of the user for the per-user information to be fetched. Either the word 'self' (sans quote marks)
     *        or the user's profile identifier.
     * @param blogId ID of the blog to fetch posts from.
     * @return the request
     */
    public List list(java.lang.String userId, java.lang.String blogId) throws java.io.IOException {
      List result = new List(userId, blogId);
      initialize(result);
      return result;
    }

    public class List extends BloggerRequest<com.google.api.services.blogger.model.PostUserInfosList> {

      private static final String REST_PATH = "users/{userId}/blogs/{blogId}/posts";

      /**
       * Retrieves a list of post and post user info pairs, possibly filtered. The post user info
       * contains per-user information about the post, such as access rights, specific to the user.
       *
       * Create a request for the method "postUserInfos.list".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId ID of the user for the per-user information to be fetched. Either the word 'self' (sans quote marks)
     *        or the user's profile identifier.
       * @param blogId ID of the blog to fetch posts from.
       * @since 1.13
       */
      protected List(java.lang.String userId, java.lang.String blogId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.PostUserInfosList.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /**
       * ID of the user for the per-user information to be fetched. Either the word 'self' (sans
       * quote marks) or the user's profile identifier.
       */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** ID of the user for the per-user information to be fetched. Either the word 'self' (sans quote
     marks) or the user's profile identifier.
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /**
       * ID of the user for the per-user information to be fetched. Either the word 'self' (sans
       * quote marks) or the user's profile identifier.
       */
      public List setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      /** ID of the blog to fetch posts from. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to fetch posts from.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to fetch posts from. */
      public List setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** Latest post date to fetch, a date-time with RFC 3339 formatting. */
      @com.google.api.client.util.Key
      private com.google.api.client.util.DateTime endDate;

      /** Latest post date to fetch, a date-time with RFC 3339 formatting.
       */
      public com.google.api.client.util.DateTime getEndDate() {
        return endDate;
      }

      /** Latest post date to fetch, a date-time with RFC 3339 formatting. */
      public List setEndDate(com.google.api.client.util.DateTime endDate) {
        this.endDate = endDate;
        return this;
      }

      /** Whether the body content of posts is included. Default is false. */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchBodies;

      /** Whether the body content of posts is included. Default is false. [default: false]
       */
      public java.lang.Boolean getFetchBodies() {
        return fetchBodies;
      }

      /** Whether the body content of posts is included. Default is false. */
      public List setFetchBodies(java.lang.Boolean fetchBodies) {
        this.fetchBodies = fetchBodies;
        return this;
      }

      /**
       * Convenience method that returns only {@link Boolean#TRUE} or {@link Boolean#FALSE}.
       *
       * <p>
       * Boolean properties can have four possible values:
       * {@code null}, {@link com.google.api.client.util.Data#NULL_BOOLEAN}, {@link Boolean#TRUE}
       * or {@link Boolean#FALSE}.
       * </p>
       *
       * <p>
       * This method returns {@link Boolean#TRUE} if the default of the property is {@link Boolean#TRUE}
       * and it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * {@link Boolean#FALSE} is returned if the default of the property is {@link Boolean#FALSE} and
       * it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * </p>
       *
       * <p>
       * Whether the body content of posts is included. Default is false.
       * </p>
       */
      public boolean isFetchBodies() {
        if (fetchBodies == null || fetchBodies == com.google.api.client.util.Data.NULL_BOOLEAN) {
          return false;
        }
        return fetchBodies;
      }

      /** Comma-separated list of labels to search for. */
      @com.google.api.client.util.Key
      private java.lang.String labels;

      /** Comma-separated list of labels to search for.
       */
      public java.lang.String getLabels() {
        return labels;
      }

      /** Comma-separated list of labels to search for. */
      public List setLabels(java.lang.String labels) {
        this.labels = labels;
        return this;
      }

      /** Maximum number of posts to fetch. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of posts to fetch.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of posts to fetch. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Sort order applied to search results. Default is published. */
      @com.google.api.client.util.Key
      private java.lang.String orderBy;

      /** Sort order applied to search results. Default is published. [default: PUBLISHED]
       */
      public java.lang.String getOrderBy() {
        return orderBy;
      }

      /** Sort order applied to search results. Default is published. */
      public List setOrderBy(java.lang.String orderBy) {
        this.orderBy = orderBy;
        return this;
      }

      /** Continuation token if the request is paged. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Continuation token if the request is paged.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Continuation token if the request is paged. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /** Earliest post date to fetch, a date-time with RFC 3339 formatting. */
      @com.google.api.client.util.Key
      private com.google.api.client.util.DateTime startDate;

      /** Earliest post date to fetch, a date-time with RFC 3339 formatting.
       */
      public com.google.api.client.util.DateTime getStartDate() {
        return startDate;
      }

      /** Earliest post date to fetch, a date-time with RFC 3339 formatting. */
      public List setStartDate(com.google.api.client.util.DateTime startDate) {
        this.startDate = startDate;
        return this;
      }

      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> status;

      /**

       */
      public java.util.List<java.lang.String> getStatus() {
        return status;
      }

      public List setStatus(java.util.List<java.lang.String> status) {
        this.status = status;
        return this;
      }

      /**
       * Access level with which to view the returned result. Note that some fields require elevated
       * access.
       */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Access level with which to view the returned result. Note that some fields require elevated access.
       */
      public java.lang.String getView() {
        return view;
      }

      /**
       * Access level with which to view the returned result. Note that some fields require elevated
       * access.
       */
      public List setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Posts collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Blogger blogger = new Blogger(...);}
   *   {@code Blogger.Posts.List request = blogger.posts().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Posts posts() {
    return new Posts();
  }

  /**
   * The "posts" collection of methods.
   */
  public class Posts {

    /**
     * Delete a post by ID.
     *
     * Create a request for the method "posts.delete".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the Blog.
     * @param postId The ID of the Post.
     * @return the request
     */
    public Delete delete(java.lang.String blogId, java.lang.String postId) throws java.io.IOException {
      Delete result = new Delete(blogId, postId);
      initialize(result);
      return result;
    }

    public class Delete extends BloggerRequest<Void> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}";

      /**
       * Delete a post by ID.
       *
       * Create a request for the method "posts.delete".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the Blog.
       * @param postId The ID of the Post.
       * @since 1.13
       */
      protected Delete(java.lang.String blogId, java.lang.String postId) {
        super(Blogger.this, "DELETE", REST_PATH, null, Void.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** The ID of the Blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the Blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the Blog. */
      public Delete setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the Post. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** The ID of the Post.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** The ID of the Post. */
      public Delete setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Get a post by ID.
     *
     * Create a request for the method "posts.get".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to fetch the post from.
     * @param postId The ID of the post
     * @return the request
     */
    public Get get(java.lang.String blogId, java.lang.String postId) throws java.io.IOException {
      Get result = new Get(blogId, postId);
      initialize(result);
      return result;
    }

    public class Get extends BloggerRequest<com.google.api.services.blogger.model.Post> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}";

      /**
       * Get a post by ID.
       *
       * Create a request for the method "posts.get".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to fetch the post from.
       * @param postId The ID of the post
       * @since 1.13
       */
      protected Get(java.lang.String blogId, java.lang.String postId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.Post.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** ID of the blog to fetch the post from. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to fetch the post from.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to fetch the post from. */
      public Get setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the post */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** The ID of the post
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** The ID of the post */
      public Get setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      /**
       * Whether the body content of the post is included (default: true). This should be set to
       * false when the post bodies are not required, to help minimize traffic.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchBody;

      /** Whether the body content of the post is included (default: true). This should be set to false when
     the post bodies are not required, to help minimize traffic. [default: true]
       */
      public java.lang.Boolean getFetchBody() {
        return fetchBody;
      }

      /**
       * Whether the body content of the post is included (default: true). This should be set to
       * false when the post bodies are not required, to help minimize traffic.
       */
      public Get setFetchBody(java.lang.Boolean fetchBody) {
        this.fetchBody = fetchBody;
        return this;
      }

      /**
       * Convenience method that returns only {@link Boolean#TRUE} or {@link Boolean#FALSE}.
       *
       * <p>
       * Boolean properties can have four possible values:
       * {@code null}, {@link com.google.api.client.util.Data#NULL_BOOLEAN}, {@link Boolean#TRUE}
       * or {@link Boolean#FALSE}.
       * </p>
       *
       * <p>
       * This method returns {@link Boolean#TRUE} if the default of the property is {@link Boolean#TRUE}
       * and it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * {@link Boolean#FALSE} is returned if the default of the property is {@link Boolean#FALSE} and
       * it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * </p>
       *
       * <p>
       * Whether the body content of the post is included (default: true). This should be set to false when
     the post bodies are not required, to help minimize traffic.
       * </p>
       */
      public boolean isFetchBody() {
        if (fetchBody == null || fetchBody == com.google.api.client.util.Data.NULL_BOOLEAN) {
          return true;
        }
        return fetchBody;
      }

      /** Whether image URL metadata for each post is included (default: false). */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchImages;

      /** Whether image URL metadata for each post is included (default: false).
       */
      public java.lang.Boolean getFetchImages() {
        return fetchImages;
      }

      /** Whether image URL metadata for each post is included (default: false). */
      public Get setFetchImages(java.lang.Boolean fetchImages) {
        this.fetchImages = fetchImages;
        return this;
      }

      /** Maximum number of comments to pull back on a post. */
      @com.google.api.client.util.Key
      private java.lang.Long maxComments;

      /** Maximum number of comments to pull back on a post.
       */
      public java.lang.Long getMaxComments() {
        return maxComments;
      }

      /** Maximum number of comments to pull back on a post. */
      public Get setMaxComments(java.lang.Long maxComments) {
        this.maxComments = maxComments;
        return this;
      }

      /**
       * Access level with which to view the returned result. Note that some fields require elevated
       * access.
       */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Access level with which to view the returned result. Note that some fields require elevated access.
       */
      public java.lang.String getView() {
        return view;
      }

      /**
       * Access level with which to view the returned result. Note that some fields require elevated
       * access.
       */
      public Get setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieve a Post by Path.
     *
     * Create a request for the method "posts.getByPath".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link GetByPath#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to fetch the post from.
     * @param path Path of the Post to retrieve.
     * @return the request
     */
    public GetByPath getByPath(java.lang.String blogId, java.lang.String path) throws java.io.IOException {
      GetByPath result = new GetByPath(blogId, path);
      initialize(result);
      return result;
    }

    public class GetByPath extends BloggerRequest<com.google.api.services.blogger.model.Post> {

      private static final String REST_PATH = "blogs/{blogId}/posts/bypath";

      /**
       * Retrieve a Post by Path.
       *
       * Create a request for the method "posts.getByPath".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link GetByPath#execute()} method to invoke the remote operation. <p>
       * {@link
       * GetByPath#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to fetch the post from.
       * @param path Path of the Post to retrieve.
       * @since 1.13
       */
      protected GetByPath(java.lang.String blogId, java.lang.String path) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.Post.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.path = com.google.api.client.util.Preconditions.checkNotNull(path, "Required parameter path must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetByPath setAlt(java.lang.String alt) {
        return (GetByPath) super.setAlt(alt);
      }

      @Override
      public GetByPath setFields(java.lang.String fields) {
        return (GetByPath) super.setFields(fields);
      }

      @Override
      public GetByPath setKey(java.lang.String key) {
        return (GetByPath) super.setKey(key);
      }

      @Override
      public GetByPath setOauthToken(java.lang.String oauthToken) {
        return (GetByPath) super.setOauthToken(oauthToken);
      }

      @Override
      public GetByPath setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetByPath) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetByPath setQuotaUser(java.lang.String quotaUser) {
        return (GetByPath) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetByPath setUserIp(java.lang.String userIp) {
        return (GetByPath) super.setUserIp(userIp);
      }

      /** ID of the blog to fetch the post from. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to fetch the post from.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to fetch the post from. */
      public GetByPath setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** Path of the Post to retrieve. */
      @com.google.api.client.util.Key
      private java.lang.String path;

      /** Path of the Post to retrieve.
       */
      public java.lang.String getPath() {
        return path;
      }

      /** Path of the Post to retrieve. */
      public GetByPath setPath(java.lang.String path) {
        this.path = path;
        return this;
      }

      /** Maximum number of comments to pull back on a post. */
      @com.google.api.client.util.Key
      private java.lang.Long maxComments;

      /** Maximum number of comments to pull back on a post.
       */
      public java.lang.Long getMaxComments() {
        return maxComments;
      }

      /** Maximum number of comments to pull back on a post. */
      public GetByPath setMaxComments(java.lang.Long maxComments) {
        this.maxComments = maxComments;
        return this;
      }

      /**
       * Access level with which to view the returned result. Note that some fields require elevated
       * access.
       */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Access level with which to view the returned result. Note that some fields require elevated access.
       */
      public java.lang.String getView() {
        return view;
      }

      /**
       * Access level with which to view the returned result. Note that some fields require elevated
       * access.
       */
      public GetByPath setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public GetByPath set(String parameterName, Object value) {
        return (GetByPath) super.set(parameterName, value);
      }
    }
    /**
     * Add a post.
     *
     * Create a request for the method "posts.insert".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to add the post to.
     * @param content the {@link com.google.api.services.blogger.model.Post}
     * @return the request
     */
    public Insert insert(java.lang.String blogId, com.google.api.services.blogger.model.Post content) throws java.io.IOException {
      Insert result = new Insert(blogId, content);
      initialize(result);
      return result;
    }

    public class Insert extends BloggerRequest<com.google.api.services.blogger.model.Post> {

      private static final String REST_PATH = "blogs/{blogId}/posts";

      /**
       * Add a post.
       *
       * Create a request for the method "posts.insert".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to add the post to.
       * @param content the {@link com.google.api.services.blogger.model.Post}
       * @since 1.13
       */
      protected Insert(java.lang.String blogId, com.google.api.services.blogger.model.Post content) {
        super(Blogger.this, "POST", REST_PATH, content, com.google.api.services.blogger.model.Post.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** ID of the blog to add the post to. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to add the post to.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to add the post to. */
      public Insert setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** Whether the body content of the post is included with the result (default: true). */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchBody;

      /** Whether the body content of the post is included with the result (default: true). [default: true]
       */
      public java.lang.Boolean getFetchBody() {
        return fetchBody;
      }

      /** Whether the body content of the post is included with the result (default: true). */
      public Insert setFetchBody(java.lang.Boolean fetchBody) {
        this.fetchBody = fetchBody;
        return this;
      }

      /**
       * Convenience method that returns only {@link Boolean#TRUE} or {@link Boolean#FALSE}.
       *
       * <p>
       * Boolean properties can have four possible values:
       * {@code null}, {@link com.google.api.client.util.Data#NULL_BOOLEAN}, {@link Boolean#TRUE}
       * or {@link Boolean#FALSE}.
       * </p>
       *
       * <p>
       * This method returns {@link Boolean#TRUE} if the default of the property is {@link Boolean#TRUE}
       * and it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * {@link Boolean#FALSE} is returned if the default of the property is {@link Boolean#FALSE} and
       * it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * </p>
       *
       * <p>
       * Whether the body content of the post is included with the result (default: true).
       * </p>
       */
      public boolean isFetchBody() {
        if (fetchBody == null || fetchBody == com.google.api.client.util.Data.NULL_BOOLEAN) {
          return true;
        }
        return fetchBody;
      }

      /**
       * Whether image URL metadata for each post is included in the returned result (default:
       * false).
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchImages;

      /** Whether image URL metadata for each post is included in the returned result (default: false).
       */
      public java.lang.Boolean getFetchImages() {
        return fetchImages;
      }

      /**
       * Whether image URL metadata for each post is included in the returned result (default:
       * false).
       */
      public Insert setFetchImages(java.lang.Boolean fetchImages) {
        this.fetchImages = fetchImages;
        return this;
      }

      /** Whether to create the post as a draft (default: false). */
      @com.google.api.client.util.Key
      private java.lang.Boolean isDraft;

      /** Whether to create the post as a draft (default: false).
       */
      public java.lang.Boolean getIsDraft() {
        return isDraft;
      }

      /** Whether to create the post as a draft (default: false). */
      public Insert setIsDraft(java.lang.Boolean isDraft) {
        this.isDraft = isDraft;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of posts, possibly filtered.
     *
     * Create a request for the method "posts.list".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to fetch posts from.
     * @return the request
     */
    public List list(java.lang.String blogId) throws java.io.IOException {
      List result = new List(blogId);
      initialize(result);
      return result;
    }

    public class List extends BloggerRequest<com.google.api.services.blogger.model.PostList> {

      private static final String REST_PATH = "blogs/{blogId}/posts";

      /**
       * Retrieves a list of posts, possibly filtered.
       *
       * Create a request for the method "posts.list".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to fetch posts from.
       * @since 1.13
       */
      protected List(java.lang.String blogId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.PostList.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** ID of the blog to fetch posts from. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to fetch posts from.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to fetch posts from. */
      public List setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** Latest post date to fetch, a date-time with RFC 3339 formatting. */
      @com.google.api.client.util.Key
      private com.google.api.client.util.DateTime endDate;

      /** Latest post date to fetch, a date-time with RFC 3339 formatting.
       */
      public com.google.api.client.util.DateTime getEndDate() {
        return endDate;
      }

      /** Latest post date to fetch, a date-time with RFC 3339 formatting. */
      public List setEndDate(com.google.api.client.util.DateTime endDate) {
        this.endDate = endDate;
        return this;
      }

      /**
       * Whether the body content of posts is included (default: true). This should be set to false
       * when the post bodies are not required, to help minimize traffic.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchBodies;

      /** Whether the body content of posts is included (default: true). This should be set to false when the
     post bodies are not required, to help minimize traffic. [default: true]
       */
      public java.lang.Boolean getFetchBodies() {
        return fetchBodies;
      }

      /**
       * Whether the body content of posts is included (default: true). This should be set to false
       * when the post bodies are not required, to help minimize traffic.
       */
      public List setFetchBodies(java.lang.Boolean fetchBodies) {
        this.fetchBodies = fetchBodies;
        return this;
      }

      /**
       * Convenience method that returns only {@link Boolean#TRUE} or {@link Boolean#FALSE}.
       *
       * <p>
       * Boolean properties can have four possible values:
       * {@code null}, {@link com.google.api.client.util.Data#NULL_BOOLEAN}, {@link Boolean#TRUE}
       * or {@link Boolean#FALSE}.
       * </p>
       *
       * <p>
       * This method returns {@link Boolean#TRUE} if the default of the property is {@link Boolean#TRUE}
       * and it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * {@link Boolean#FALSE} is returned if the default of the property is {@link Boolean#FALSE} and
       * it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * </p>
       *
       * <p>
       * Whether the body content of posts is included (default: true). This should be set to false when the
     post bodies are not required, to help minimize traffic.
       * </p>
       */
      public boolean isFetchBodies() {
        if (fetchBodies == null || fetchBodies == com.google.api.client.util.Data.NULL_BOOLEAN) {
          return true;
        }
        return fetchBodies;
      }

      /** Whether image URL metadata for each post is included. */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchImages;

      /** Whether image URL metadata for each post is included.
       */
      public java.lang.Boolean getFetchImages() {
        return fetchImages;
      }

      /** Whether image URL metadata for each post is included. */
      public List setFetchImages(java.lang.Boolean fetchImages) {
        this.fetchImages = fetchImages;
        return this;
      }

      /** Comma-separated list of labels to search for. */
      @com.google.api.client.util.Key
      private java.lang.String labels;

      /** Comma-separated list of labels to search for.
       */
      public java.lang.String getLabels() {
        return labels;
      }

      /** Comma-separated list of labels to search for. */
      public List setLabels(java.lang.String labels) {
        this.labels = labels;
        return this;
      }

      /** Maximum number of posts to fetch. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of posts to fetch.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of posts to fetch. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Sort search results */
      @com.google.api.client.util.Key
      private java.lang.String orderBy;

      /** Sort search results [default: PUBLISHED]
       */
      public java.lang.String getOrderBy() {
        return orderBy;
      }

      /** Sort search results */
      public List setOrderBy(java.lang.String orderBy) {
        this.orderBy = orderBy;
        return this;
      }

      /** Continuation token if the request is paged. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Continuation token if the request is paged.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Continuation token if the request is paged. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /** Earliest post date to fetch, a date-time with RFC 3339 formatting. */
      @com.google.api.client.util.Key
      private com.google.api.client.util.DateTime startDate;

      /** Earliest post date to fetch, a date-time with RFC 3339 formatting.
       */
      public com.google.api.client.util.DateTime getStartDate() {
        return startDate;
      }

      /** Earliest post date to fetch, a date-time with RFC 3339 formatting. */
      public List setStartDate(com.google.api.client.util.DateTime startDate) {
        this.startDate = startDate;
        return this;
      }

      /** Statuses to include in the results. */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> status;

      /** Statuses to include in the results.
       */
      public java.util.List<java.lang.String> getStatus() {
        return status;
      }

      /** Statuses to include in the results. */
      public List setStatus(java.util.List<java.lang.String> status) {
        this.status = status;
        return this;
      }

      /**
       * Access level with which to view the returned result. Note that some fields require
       * escalated access.
       */
      @com.google.api.client.util.Key
      private java.lang.String view;

      /** Access level with which to view the returned result. Note that some fields require escalated
     access.
       */
      public java.lang.String getView() {
        return view;
      }

      /**
       * Access level with which to view the returned result. Note that some fields require
       * escalated access.
       */
      public List setView(java.lang.String view) {
        this.view = view;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Update a post. This method supports patch semantics.
     *
     * Create a request for the method "posts.patch".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the Blog.
     * @param postId The ID of the Post.
     * @param content the {@link com.google.api.services.blogger.model.Post}
     * @return the request
     */
    public Patch patch(java.lang.String blogId, java.lang.String postId, com.google.api.services.blogger.model.Post content) throws java.io.IOException {
      Patch result = new Patch(blogId, postId, content);
      initialize(result);
      return result;
    }

    public class Patch extends BloggerRequest<com.google.api.services.blogger.model.Post> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}";

      /**
       * Update a post. This method supports patch semantics.
       *
       * Create a request for the method "posts.patch".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the Blog.
       * @param postId The ID of the Post.
       * @param content the {@link com.google.api.services.blogger.model.Post}
       * @since 1.13
       */
      protected Patch(java.lang.String blogId, java.lang.String postId, com.google.api.services.blogger.model.Post content) {
        super(Blogger.this, "PATCH", REST_PATH, content, com.google.api.services.blogger.model.Post.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** The ID of the Blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the Blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the Blog. */
      public Patch setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the Post. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** The ID of the Post.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** The ID of the Post. */
      public Patch setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      /** Whether the body content of the post is included with the result (default: true). */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchBody;

      /** Whether the body content of the post is included with the result (default: true). [default: true]
       */
      public java.lang.Boolean getFetchBody() {
        return fetchBody;
      }

      /** Whether the body content of the post is included with the result (default: true). */
      public Patch setFetchBody(java.lang.Boolean fetchBody) {
        this.fetchBody = fetchBody;
        return this;
      }

      /**
       * Convenience method that returns only {@link Boolean#TRUE} or {@link Boolean#FALSE}.
       *
       * <p>
       * Boolean properties can have four possible values:
       * {@code null}, {@link com.google.api.client.util.Data#NULL_BOOLEAN}, {@link Boolean#TRUE}
       * or {@link Boolean#FALSE}.
       * </p>
       *
       * <p>
       * This method returns {@link Boolean#TRUE} if the default of the property is {@link Boolean#TRUE}
       * and it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * {@link Boolean#FALSE} is returned if the default of the property is {@link Boolean#FALSE} and
       * it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * </p>
       *
       * <p>
       * Whether the body content of the post is included with the result (default: true).
       * </p>
       */
      public boolean isFetchBody() {
        if (fetchBody == null || fetchBody == com.google.api.client.util.Data.NULL_BOOLEAN) {
          return true;
        }
        return fetchBody;
      }

      /**
       * Whether image URL metadata for each post is included in the returned result (default:
       * false).
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchImages;

      /** Whether image URL metadata for each post is included in the returned result (default: false).
       */
      public java.lang.Boolean getFetchImages() {
        return fetchImages;
      }

      /**
       * Whether image URL metadata for each post is included in the returned result (default:
       * false).
       */
      public Patch setFetchImages(java.lang.Boolean fetchImages) {
        this.fetchImages = fetchImages;
        return this;
      }

      /** Maximum number of comments to retrieve with the returned post. */
      @com.google.api.client.util.Key
      private java.lang.Long maxComments;

      /** Maximum number of comments to retrieve with the returned post.
       */
      public java.lang.Long getMaxComments() {
        return maxComments;
      }

      /** Maximum number of comments to retrieve with the returned post. */
      public Patch setMaxComments(java.lang.Long maxComments) {
        this.maxComments = maxComments;
        return this;
      }

      /**
       * Whether a publish action should be performed when the post is updated (default: false).
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean publish;

      /** Whether a publish action should be performed when the post is updated (default: false).
       */
      public java.lang.Boolean getPublish() {
        return publish;
      }

      /**
       * Whether a publish action should be performed when the post is updated (default: false).
       */
      public Patch setPublish(java.lang.Boolean publish) {
        this.publish = publish;
        return this;
      }

      /** Whether a revert action should be performed when the post is updated (default: false). */
      @com.google.api.client.util.Key
      private java.lang.Boolean revert;

      /** Whether a revert action should be performed when the post is updated (default: false).
       */
      public java.lang.Boolean getRevert() {
        return revert;
      }

      /** Whether a revert action should be performed when the post is updated (default: false). */
      public Patch setRevert(java.lang.Boolean revert) {
        this.revert = revert;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Publishes a draft post, optionally at the specific time of the given publishDate parameter.
     *
     * Create a request for the method "posts.publish".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Publish#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the Blog.
     * @param postId The ID of the Post.
     * @return the request
     */
    public Publish publish(java.lang.String blogId, java.lang.String postId) throws java.io.IOException {
      Publish result = new Publish(blogId, postId);
      initialize(result);
      return result;
    }

    public class Publish extends BloggerRequest<com.google.api.services.blogger.model.Post> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}/publish";

      /**
       * Publishes a draft post, optionally at the specific time of the given publishDate parameter.
       *
       * Create a request for the method "posts.publish".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Publish#execute()} method to invoke the remote operation. <p>
       * {@link
       * Publish#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the Blog.
       * @param postId The ID of the Post.
       * @since 1.13
       */
      protected Publish(java.lang.String blogId, java.lang.String postId) {
        super(Blogger.this, "POST", REST_PATH, null, com.google.api.services.blogger.model.Post.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
      }

      @Override
      public Publish setAlt(java.lang.String alt) {
        return (Publish) super.setAlt(alt);
      }

      @Override
      public Publish setFields(java.lang.String fields) {
        return (Publish) super.setFields(fields);
      }

      @Override
      public Publish setKey(java.lang.String key) {
        return (Publish) super.setKey(key);
      }

      @Override
      public Publish setOauthToken(java.lang.String oauthToken) {
        return (Publish) super.setOauthToken(oauthToken);
      }

      @Override
      public Publish setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Publish) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Publish setQuotaUser(java.lang.String quotaUser) {
        return (Publish) super.setQuotaUser(quotaUser);
      }

      @Override
      public Publish setUserIp(java.lang.String userIp) {
        return (Publish) super.setUserIp(userIp);
      }

      /** The ID of the Blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the Blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the Blog. */
      public Publish setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the Post. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** The ID of the Post.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** The ID of the Post. */
      public Publish setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      /**
       * Optional date and time to schedule the publishing of the Blog. If no publishDate parameter
       * is given, the post is either published at the a previously saved schedule date (if
       * present), or the current time. If a future date is given, the post will be scheduled to be
       * published.
       */
      @com.google.api.client.util.Key
      private com.google.api.client.util.DateTime publishDate;

      /** Optional date and time to schedule the publishing of the Blog. If no publishDate parameter is
     given, the post is either published at the a previously saved schedule date (if present), or the
     current time. If a future date is given, the post will be scheduled to be published.
       */
      public com.google.api.client.util.DateTime getPublishDate() {
        return publishDate;
      }

      /**
       * Optional date and time to schedule the publishing of the Blog. If no publishDate parameter
       * is given, the post is either published at the a previously saved schedule date (if
       * present), or the current time. If a future date is given, the post will be scheduled to be
       * published.
       */
      public Publish setPublishDate(com.google.api.client.util.DateTime publishDate) {
        this.publishDate = publishDate;
        return this;
      }

      @Override
      public Publish set(String parameterName, Object value) {
        return (Publish) super.set(parameterName, value);
      }
    }
    /**
     * Revert a published or scheduled post to draft state.
     *
     * Create a request for the method "posts.revert".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Revert#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the Blog.
     * @param postId The ID of the Post.
     * @return the request
     */
    public Revert revert(java.lang.String blogId, java.lang.String postId) throws java.io.IOException {
      Revert result = new Revert(blogId, postId);
      initialize(result);
      return result;
    }

    public class Revert extends BloggerRequest<com.google.api.services.blogger.model.Post> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}/revert";

      /**
       * Revert a published or scheduled post to draft state.
       *
       * Create a request for the method "posts.revert".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Revert#execute()} method to invoke the remote operation. <p> {@link
       * Revert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the Blog.
       * @param postId The ID of the Post.
       * @since 1.13
       */
      protected Revert(java.lang.String blogId, java.lang.String postId) {
        super(Blogger.this, "POST", REST_PATH, null, com.google.api.services.blogger.model.Post.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
      }

      @Override
      public Revert setAlt(java.lang.String alt) {
        return (Revert) super.setAlt(alt);
      }

      @Override
      public Revert setFields(java.lang.String fields) {
        return (Revert) super.setFields(fields);
      }

      @Override
      public Revert setKey(java.lang.String key) {
        return (Revert) super.setKey(key);
      }

      @Override
      public Revert setOauthToken(java.lang.String oauthToken) {
        return (Revert) super.setOauthToken(oauthToken);
      }

      @Override
      public Revert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Revert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Revert setQuotaUser(java.lang.String quotaUser) {
        return (Revert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Revert setUserIp(java.lang.String userIp) {
        return (Revert) super.setUserIp(userIp);
      }

      /** The ID of the Blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the Blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the Blog. */
      public Revert setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the Post. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** The ID of the Post.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** The ID of the Post. */
      public Revert setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      @Override
      public Revert set(String parameterName, Object value) {
        return (Revert) super.set(parameterName, value);
      }
    }
    /**
     * Search for a post.
     *
     * Create a request for the method "posts.search".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Search#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to fetch the post from.
     * @param q Query terms to search this blog for matching posts.
     * @return the request
     */
    public Search search(java.lang.String blogId, java.lang.String q) throws java.io.IOException {
      Search result = new Search(blogId, q);
      initialize(result);
      return result;
    }

    public class Search extends BloggerRequest<com.google.api.services.blogger.model.PostList> {

      private static final String REST_PATH = "blogs/{blogId}/posts/search";

      /**
       * Search for a post.
       *
       * Create a request for the method "posts.search".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Search#execute()} method to invoke the remote operation. <p> {@link
       * Search#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to fetch the post from.
       * @param q Query terms to search this blog for matching posts.
       * @since 1.13
       */
      protected Search(java.lang.String blogId, java.lang.String q) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.PostList.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.q = com.google.api.client.util.Preconditions.checkNotNull(q, "Required parameter q must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Search setAlt(java.lang.String alt) {
        return (Search) super.setAlt(alt);
      }

      @Override
      public Search setFields(java.lang.String fields) {
        return (Search) super.setFields(fields);
      }

      @Override
      public Search setKey(java.lang.String key) {
        return (Search) super.setKey(key);
      }

      @Override
      public Search setOauthToken(java.lang.String oauthToken) {
        return (Search) super.setOauthToken(oauthToken);
      }

      @Override
      public Search setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Search) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Search setQuotaUser(java.lang.String quotaUser) {
        return (Search) super.setQuotaUser(quotaUser);
      }

      @Override
      public Search setUserIp(java.lang.String userIp) {
        return (Search) super.setUserIp(userIp);
      }

      /** ID of the blog to fetch the post from. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to fetch the post from.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to fetch the post from. */
      public Search setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** Query terms to search this blog for matching posts. */
      @com.google.api.client.util.Key
      private java.lang.String q;

      /** Query terms to search this blog for matching posts.
       */
      public java.lang.String getQ() {
        return q;
      }

      /** Query terms to search this blog for matching posts. */
      public Search setQ(java.lang.String q) {
        this.q = q;
        return this;
      }

      /**
       * Whether the body content of posts is included (default: true). This should be set to false
       * when the post bodies are not required, to help minimize traffic.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchBodies;

      /** Whether the body content of posts is included (default: true). This should be set to false when the
     post bodies are not required, to help minimize traffic. [default: true]
       */
      public java.lang.Boolean getFetchBodies() {
        return fetchBodies;
      }

      /**
       * Whether the body content of posts is included (default: true). This should be set to false
       * when the post bodies are not required, to help minimize traffic.
       */
      public Search setFetchBodies(java.lang.Boolean fetchBodies) {
        this.fetchBodies = fetchBodies;
        return this;
      }

      /**
       * Convenience method that returns only {@link Boolean#TRUE} or {@link Boolean#FALSE}.
       *
       * <p>
       * Boolean properties can have four possible values:
       * {@code null}, {@link com.google.api.client.util.Data#NULL_BOOLEAN}, {@link Boolean#TRUE}
       * or {@link Boolean#FALSE}.
       * </p>
       *
       * <p>
       * This method returns {@link Boolean#TRUE} if the default of the property is {@link Boolean#TRUE}
       * and it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * {@link Boolean#FALSE} is returned if the default of the property is {@link Boolean#FALSE} and
       * it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * </p>
       *
       * <p>
       * Whether the body content of posts is included (default: true). This should be set to false when the
     post bodies are not required, to help minimize traffic.
       * </p>
       */
      public boolean isFetchBodies() {
        if (fetchBodies == null || fetchBodies == com.google.api.client.util.Data.NULL_BOOLEAN) {
          return true;
        }
        return fetchBodies;
      }

      /** Sort search results */
      @com.google.api.client.util.Key
      private java.lang.String orderBy;

      /** Sort search results [default: PUBLISHED]
       */
      public java.lang.String getOrderBy() {
        return orderBy;
      }

      /** Sort search results */
      public Search setOrderBy(java.lang.String orderBy) {
        this.orderBy = orderBy;
        return this;
      }

      @Override
      public Search set(String parameterName, Object value) {
        return (Search) super.set(parameterName, value);
      }
    }
    /**
     * Update a post.
     *
     * Create a request for the method "posts.update".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the Blog.
     * @param postId The ID of the Post.
     * @param content the {@link com.google.api.services.blogger.model.Post}
     * @return the request
     */
    public Update update(java.lang.String blogId, java.lang.String postId, com.google.api.services.blogger.model.Post content) throws java.io.IOException {
      Update result = new Update(blogId, postId, content);
      initialize(result);
      return result;
    }

    public class Update extends BloggerRequest<com.google.api.services.blogger.model.Post> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}";

      /**
       * Update a post.
       *
       * Create a request for the method "posts.update".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the Blog.
       * @param postId The ID of the Post.
       * @param content the {@link com.google.api.services.blogger.model.Post}
       * @since 1.13
       */
      protected Update(java.lang.String blogId, java.lang.String postId, com.google.api.services.blogger.model.Post content) {
        super(Blogger.this, "PUT", REST_PATH, content, com.google.api.services.blogger.model.Post.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** The ID of the Blog. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the Blog.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the Blog. */
      public Update setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the Post. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** The ID of the Post.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** The ID of the Post. */
      public Update setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      /** Whether the body content of the post is included with the result (default: true). */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchBody;

      /** Whether the body content of the post is included with the result (default: true). [default: true]
       */
      public java.lang.Boolean getFetchBody() {
        return fetchBody;
      }

      /** Whether the body content of the post is included with the result (default: true). */
      public Update setFetchBody(java.lang.Boolean fetchBody) {
        this.fetchBody = fetchBody;
        return this;
      }

      /**
       * Convenience method that returns only {@link Boolean#TRUE} or {@link Boolean#FALSE}.
       *
       * <p>
       * Boolean properties can have four possible values:
       * {@code null}, {@link com.google.api.client.util.Data#NULL_BOOLEAN}, {@link Boolean#TRUE}
       * or {@link Boolean#FALSE}.
       * </p>
       *
       * <p>
       * This method returns {@link Boolean#TRUE} if the default of the property is {@link Boolean#TRUE}
       * and it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * {@link Boolean#FALSE} is returned if the default of the property is {@link Boolean#FALSE} and
       * it is {@code null} or {@link com.google.api.client.util.Data#NULL_BOOLEAN}.
       * </p>
       *
       * <p>
       * Whether the body content of the post is included with the result (default: true).
       * </p>
       */
      public boolean isFetchBody() {
        if (fetchBody == null || fetchBody == com.google.api.client.util.Data.NULL_BOOLEAN) {
          return true;
        }
        return fetchBody;
      }

      /**
       * Whether image URL metadata for each post is included in the returned result (default:
       * false).
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchImages;

      /** Whether image URL metadata for each post is included in the returned result (default: false).
       */
      public java.lang.Boolean getFetchImages() {
        return fetchImages;
      }

      /**
       * Whether image URL metadata for each post is included in the returned result (default:
       * false).
       */
      public Update setFetchImages(java.lang.Boolean fetchImages) {
        this.fetchImages = fetchImages;
        return this;
      }

      /** Maximum number of comments to retrieve with the returned post. */
      @com.google.api.client.util.Key
      private java.lang.Long maxComments;

      /** Maximum number of comments to retrieve with the returned post.
       */
      public java.lang.Long getMaxComments() {
        return maxComments;
      }

      /** Maximum number of comments to retrieve with the returned post. */
      public Update setMaxComments(java.lang.Long maxComments) {
        this.maxComments = maxComments;
        return this;
      }

      /**
       * Whether a publish action should be performed when the post is updated (default: false).
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean publish;

      /** Whether a publish action should be performed when the post is updated (default: false).
       */
      public java.lang.Boolean getPublish() {
        return publish;
      }

      /**
       * Whether a publish action should be performed when the post is updated (default: false).
       */
      public Update setPublish(java.lang.Boolean publish) {
        this.publish = publish;
        return this;
      }

      /** Whether a revert action should be performed when the post is updated (default: false). */
      @com.google.api.client.util.Key
      private java.lang.Boolean revert;

      /** Whether a revert action should be performed when the post is updated (default: false).
       */
      public java.lang.Boolean getRevert() {
        return revert;
      }

      /** Whether a revert action should be performed when the post is updated (default: false). */
      public Update setRevert(java.lang.Boolean revert) {
        this.revert = revert;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Users collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Blogger blogger = new Blogger(...);}
   *   {@code Blogger.Users.List request = blogger.users().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Users users() {
    return new Users();
  }

  /**
   * The "users" collection of methods.
   */
  public class Users {

    /**
     * Gets one user by ID.
     *
     * Create a request for the method "users.get".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param userId The ID of the user to get.
     * @return the request
     */
    public Get get(java.lang.String userId) throws java.io.IOException {
      Get result = new Get(userId);
      initialize(result);
      return result;
    }

    public class Get extends BloggerRequest<com.google.api.services.blogger.model.User> {

      private static final String REST_PATH = "users/{userId}";

      /**
       * Gets one user by ID.
       *
       * Create a request for the method "users.get".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId The ID of the user to get.
       * @since 1.13
       */
      protected Get(java.lang.String userId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.User.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The ID of the user to get. */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** The ID of the user to get.
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /** The ID of the user to get. */
      public Get setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Blogger}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Blogger}. */
    @Override
    public Blogger build() {
      return new Blogger(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link BloggerRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setBloggerRequestInitializer(
        BloggerRequestInitializer bloggerRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(bloggerRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
