/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.blockchainnodeengine.v1.model;

/**
 * A representation of a blockchain node.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Blockchain Node Engine API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BlockchainNode extends com.google.api.client.json.GenericJson {

  /**
   * Immutable. The blockchain type of the node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String blockchainType;

  /**
   * Output only. The connection information used to interact with a blockchain node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ConnectionInfo connectionInfo;

  /**
   * Output only. The timestamp at which the blockchain node was first created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Ethereum-specific blockchain node details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EthereumDetails ethereumDetails;

  /**
   * User-provided key-value pairs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Output only. The fully qualified name of the blockchain node. e.g. `projects/my-
   * project/locations/us-central1/blockchainNodes/my-node`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. This can only be accessed through the private ip.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean pscOnly;

  /**
   * Output only. A status representing the state of the node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. The timestamp at which the blockchain node was last updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Immutable. The blockchain type of the node.
   * @return value or {@code null} for none
   */
  public java.lang.String getBlockchainType() {
    return blockchainType;
  }

  /**
   * Immutable. The blockchain type of the node.
   * @param blockchainType blockchainType or {@code null} for none
   */
  public BlockchainNode setBlockchainType(java.lang.String blockchainType) {
    this.blockchainType = blockchainType;
    return this;
  }

  /**
   * Output only. The connection information used to interact with a blockchain node.
   * @return value or {@code null} for none
   */
  public ConnectionInfo getConnectionInfo() {
    return connectionInfo;
  }

  /**
   * Output only. The connection information used to interact with a blockchain node.
   * @param connectionInfo connectionInfo or {@code null} for none
   */
  public BlockchainNode setConnectionInfo(ConnectionInfo connectionInfo) {
    this.connectionInfo = connectionInfo;
    return this;
  }

  /**
   * Output only. The timestamp at which the blockchain node was first created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The timestamp at which the blockchain node was first created.
   * @param createTime createTime or {@code null} for none
   */
  public BlockchainNode setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Ethereum-specific blockchain node details.
   * @return value or {@code null} for none
   */
  public EthereumDetails getEthereumDetails() {
    return ethereumDetails;
  }

  /**
   * Ethereum-specific blockchain node details.
   * @param ethereumDetails ethereumDetails or {@code null} for none
   */
  public BlockchainNode setEthereumDetails(EthereumDetails ethereumDetails) {
    this.ethereumDetails = ethereumDetails;
    return this;
  }

  /**
   * User-provided key-value pairs.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * User-provided key-value pairs.
   * @param labels labels or {@code null} for none
   */
  public BlockchainNode setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Output only. The fully qualified name of the blockchain node. e.g. `projects/my-
   * project/locations/us-central1/blockchainNodes/my-node`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The fully qualified name of the blockchain node. e.g. `projects/my-
   * project/locations/us-central1/blockchainNodes/my-node`.
   * @param name name or {@code null} for none
   */
  public BlockchainNode setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. This can only be accessed through the private ip.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPscOnly() {
    return pscOnly;
  }

  /**
   * Optional. This can only be accessed through the private ip.
   * @param pscOnly pscOnly or {@code null} for none
   */
  public BlockchainNode setPscOnly(java.lang.Boolean pscOnly) {
    this.pscOnly = pscOnly;
    return this;
  }

  /**
   * Output only. A status representing the state of the node.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. A status representing the state of the node.
   * @param state state or {@code null} for none
   */
  public BlockchainNode setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. The timestamp at which the blockchain node was last updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The timestamp at which the blockchain node was last updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public BlockchainNode setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public BlockchainNode set(String fieldName, Object value) {
    return (BlockchainNode) super.set(fieldName, value);
  }

  @Override
  public BlockchainNode clone() {
    return (BlockchainNode) super.clone();
  }

}
