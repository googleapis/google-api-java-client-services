/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vectortile.v1.model;

/**
 * Represents an area. Used to represent regions such as water, parks, etc. Next ID: 10
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Semantic Tile API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Area extends com.google.api.client.json.GenericJson {

  /**
   * The z-order of this geometry when rendered on a flat basemap. Geometry with a lower z-order
   * should be rendered beneath geometry with a higher z-order. This z-ordering does not imply
   * anything about the altitude of the area relative to the ground, but it can be used to prevent
   * z-fighting. Unlike Area.z_order this can be used to compare with Line.basemap_z_order, and in
   * fact may yield more accurate rendering (where a line may be rendered beneath an area).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BasemapZOrder basemapZOrder;

  /**
   * True if the polygon is not entirely internal to the feature that it belongs to: that is, some
   * of the edges are bordering another feature.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasExternalEdges;

  /**
   * When has_external_edges is true, the polygon has some edges that border another feature. This
   * field indicates the internal edges that do not border another feature. Each value is an index
   * into the vertices array, and denotes the start vertex of the internal edge (the next vertex in
   * the boundary loop is the end of the edge). If the selected vertex is the last vertex in the
   * boundary loop, then the edge between that vertex and the starting vertex of the loop is
   * internal. This field may be used for styling. For example, building parapets could be placed
   * only on the external edges of a building polygon, or water could be lighter colored near the
   * external edges of a body of water. If has_external_edges is false, all edges are internal and
   * this field will be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> internalEdges;

  /**
   * Identifies the boundary loops of the polygon. Only set for INDEXED_TRIANGLE polygons. Each
   * value is an index into the vertices array indicating the beginning of a loop. For instance,
   * values of [2, 5] would indicate loop_data contained 3 loops with indices 0-1, 2-4, and 5-end.
   * This may be used in conjunction with the internal_edges field for styling polygon boundaries.
   * Note that an edge may be on a polygon boundary but still internal to the feature. For example,
   * a feature split across multiple tiles will have an internal polygon boundary edge along the
   * edge of the tile.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> loopBreaks;

  /**
   * When the polygon encoding is of type INDEXED_TRIANGLES, this contains the indices of the
   * triangle vertices in the vertex_offsets field. There are 3 vertex indices per triangle.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> triangleIndices;

  /**
   * The polygon encoding type used for this area.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The vertices present in the polygon defining the area.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Vertex2DList vertexOffsets;

  /**
   * The z-ordering of this area. Areas with a lower z-order should be rendered beneath areas with a
   * higher z-order. This z-ordering does not imply anything about the altitude of the line relative
   * to the ground, but it can be used to prevent z-fighting during rendering on the client. This
   * z-ordering can only be used to compare areas, and cannot be compared with the z_order field in
   * the Line message. The z-order may be negative or zero. Prefer Area.basemap_z_order.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer zOrder;

  /**
   * The z-order of this geometry when rendered on a flat basemap. Geometry with a lower z-order
   * should be rendered beneath geometry with a higher z-order. This z-ordering does not imply
   * anything about the altitude of the area relative to the ground, but it can be used to prevent
   * z-fighting. Unlike Area.z_order this can be used to compare with Line.basemap_z_order, and in
   * fact may yield more accurate rendering (where a line may be rendered beneath an area).
   * @return value or {@code null} for none
   */
  public BasemapZOrder getBasemapZOrder() {
    return basemapZOrder;
  }

  /**
   * The z-order of this geometry when rendered on a flat basemap. Geometry with a lower z-order
   * should be rendered beneath geometry with a higher z-order. This z-ordering does not imply
   * anything about the altitude of the area relative to the ground, but it can be used to prevent
   * z-fighting. Unlike Area.z_order this can be used to compare with Line.basemap_z_order, and in
   * fact may yield more accurate rendering (where a line may be rendered beneath an area).
   * @param basemapZOrder basemapZOrder or {@code null} for none
   */
  public Area setBasemapZOrder(BasemapZOrder basemapZOrder) {
    this.basemapZOrder = basemapZOrder;
    return this;
  }

  /**
   * True if the polygon is not entirely internal to the feature that it belongs to: that is, some
   * of the edges are bordering another feature.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasExternalEdges() {
    return hasExternalEdges;
  }

  /**
   * True if the polygon is not entirely internal to the feature that it belongs to: that is, some
   * of the edges are bordering another feature.
   * @param hasExternalEdges hasExternalEdges or {@code null} for none
   */
  public Area setHasExternalEdges(java.lang.Boolean hasExternalEdges) {
    this.hasExternalEdges = hasExternalEdges;
    return this;
  }

  /**
   * When has_external_edges is true, the polygon has some edges that border another feature. This
   * field indicates the internal edges that do not border another feature. Each value is an index
   * into the vertices array, and denotes the start vertex of the internal edge (the next vertex in
   * the boundary loop is the end of the edge). If the selected vertex is the last vertex in the
   * boundary loop, then the edge between that vertex and the starting vertex of the loop is
   * internal. This field may be used for styling. For example, building parapets could be placed
   * only on the external edges of a building polygon, or water could be lighter colored near the
   * external edges of a body of water. If has_external_edges is false, all edges are internal and
   * this field will be empty.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getInternalEdges() {
    return internalEdges;
  }

  /**
   * When has_external_edges is true, the polygon has some edges that border another feature. This
   * field indicates the internal edges that do not border another feature. Each value is an index
   * into the vertices array, and denotes the start vertex of the internal edge (the next vertex in
   * the boundary loop is the end of the edge). If the selected vertex is the last vertex in the
   * boundary loop, then the edge between that vertex and the starting vertex of the loop is
   * internal. This field may be used for styling. For example, building parapets could be placed
   * only on the external edges of a building polygon, or water could be lighter colored near the
   * external edges of a body of water. If has_external_edges is false, all edges are internal and
   * this field will be empty.
   * @param internalEdges internalEdges or {@code null} for none
   */
  public Area setInternalEdges(java.util.List<java.lang.Integer> internalEdges) {
    this.internalEdges = internalEdges;
    return this;
  }

  /**
   * Identifies the boundary loops of the polygon. Only set for INDEXED_TRIANGLE polygons. Each
   * value is an index into the vertices array indicating the beginning of a loop. For instance,
   * values of [2, 5] would indicate loop_data contained 3 loops with indices 0-1, 2-4, and 5-end.
   * This may be used in conjunction with the internal_edges field for styling polygon boundaries.
   * Note that an edge may be on a polygon boundary but still internal to the feature. For example,
   * a feature split across multiple tiles will have an internal polygon boundary edge along the
   * edge of the tile.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getLoopBreaks() {
    return loopBreaks;
  }

  /**
   * Identifies the boundary loops of the polygon. Only set for INDEXED_TRIANGLE polygons. Each
   * value is an index into the vertices array indicating the beginning of a loop. For instance,
   * values of [2, 5] would indicate loop_data contained 3 loops with indices 0-1, 2-4, and 5-end.
   * This may be used in conjunction with the internal_edges field for styling polygon boundaries.
   * Note that an edge may be on a polygon boundary but still internal to the feature. For example,
   * a feature split across multiple tiles will have an internal polygon boundary edge along the
   * edge of the tile.
   * @param loopBreaks loopBreaks or {@code null} for none
   */
  public Area setLoopBreaks(java.util.List<java.lang.Integer> loopBreaks) {
    this.loopBreaks = loopBreaks;
    return this;
  }

  /**
   * When the polygon encoding is of type INDEXED_TRIANGLES, this contains the indices of the
   * triangle vertices in the vertex_offsets field. There are 3 vertex indices per triangle.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getTriangleIndices() {
    return triangleIndices;
  }

  /**
   * When the polygon encoding is of type INDEXED_TRIANGLES, this contains the indices of the
   * triangle vertices in the vertex_offsets field. There are 3 vertex indices per triangle.
   * @param triangleIndices triangleIndices or {@code null} for none
   */
  public Area setTriangleIndices(java.util.List<java.lang.Integer> triangleIndices) {
    this.triangleIndices = triangleIndices;
    return this;
  }

  /**
   * The polygon encoding type used for this area.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The polygon encoding type used for this area.
   * @param type type or {@code null} for none
   */
  public Area setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * The vertices present in the polygon defining the area.
   * @return value or {@code null} for none
   */
  public Vertex2DList getVertexOffsets() {
    return vertexOffsets;
  }

  /**
   * The vertices present in the polygon defining the area.
   * @param vertexOffsets vertexOffsets or {@code null} for none
   */
  public Area setVertexOffsets(Vertex2DList vertexOffsets) {
    this.vertexOffsets = vertexOffsets;
    return this;
  }

  /**
   * The z-ordering of this area. Areas with a lower z-order should be rendered beneath areas with a
   * higher z-order. This z-ordering does not imply anything about the altitude of the line relative
   * to the ground, but it can be used to prevent z-fighting during rendering on the client. This
   * z-ordering can only be used to compare areas, and cannot be compared with the z_order field in
   * the Line message. The z-order may be negative or zero. Prefer Area.basemap_z_order.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getZOrder() {
    return zOrder;
  }

  /**
   * The z-ordering of this area. Areas with a lower z-order should be rendered beneath areas with a
   * higher z-order. This z-ordering does not imply anything about the altitude of the line relative
   * to the ground, but it can be used to prevent z-fighting during rendering on the client. This
   * z-ordering can only be used to compare areas, and cannot be compared with the z_order field in
   * the Line message. The z-order may be negative or zero. Prefer Area.basemap_z_order.
   * @param zOrder zOrder or {@code null} for none
   */
  public Area setZOrder(java.lang.Integer zOrder) {
    this.zOrder = zOrder;
    return this;
  }

  @Override
  public Area set(String fieldName, Object value) {
    return (Area) super.set(fieldName, value);
  }

  @Override
  public Area clone() {
    return (Area) super.clone();
  }

}
