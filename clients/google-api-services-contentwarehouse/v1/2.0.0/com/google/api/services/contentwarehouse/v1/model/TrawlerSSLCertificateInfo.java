/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This protobuf specifies the results of https certificate validation, typically used for the
 * BadSSLCertificate field in FetchReplyData. -------------------------- Next Tag: 13
 * -------------------------------
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TrawlerSSLCertificateInfo extends com.google.api.client.json.GenericJson {

  /**
   * ALPN negotiated protocol, see https://tools.ietf.org/html/rfc7301 The value will either be
   * empty, or one of the protocol names sent by the client that the server accepted. Examples
   * include "h2" and "acme-tls/1".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ALPNNegotiatedProtocol")
  private java.lang.String aLPNNegotiatedProtocol;

  /**
   * If present, this consists of the remote webserver's X.509 certificate chain in DER format. The
   * chain stored here is the *reversed* result of SSL_get_peer_cert_chain(). That is to say, it is
   * the chain presented by the peer (which may differ from the chain that was built and verified),
   * but in leaf-last order. Typically the root cert will not be included. But do not assume
   * anything, because servers do all manner of weird things. (For example on the beginning of the
   * chain, there might be also some irrelevant certificates besides the root certificate.)
   * Certificates may be the empty string, indicating an encoding failure. See also |IsTruncated|.
   * Certs can be loaded with util/sig/cert.h Cert::LoadBinaryCert(), converted to ASCII PEM format
   * (CertificateUtil::CertificateToPEM()) or shown as text at the commandline by piping them into
   * 'openssl x509 -text -inform DER'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("CertificateChain")
  private java.util.List<java.lang.String> certificateChain;

  /**
   * ErrorMessages contains errors from HTTPS validation. Examples of such errors include invalid
   * certificates, failure to build a certificate chain, certificates that do not match the expected
   * hostname, and internal errors. If ErrorMessages is empty, HTTPS validation succeeded.
   * Otherwise, it failed. This is the only guarantee about the contents of this field, though
   * legacy code exists that embeds invalid assumptions, b/70904498. New code should not do anything
   * with this field other than test whether it is empty and display its value to humans. If you
   * need to know more about the details of a particular HTTPS validation, you can revalidate
   * |CertificateChain| independently.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ErrorMessages")
  private java.util.List<java.lang.String> errorMessages;

  /**
   * This SSLCertificateInfo had its fields truncated because it was too large. It is no longer set
   * (cl/205356251) but may be true in old records.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("IsTruncated")
  private java.lang.Boolean isTruncated;

  /**
   * Stapled OCSP response obtained during the TLS handshake, if any. An OCSP (Online Certificate
   * Status Protocol) response is an indication, signed by the issuing CA, that the certificate has
   * not been revoked. A TLS handshake extension allows servers to "staple" a response to the
   * certificate served in the handshake, saving the need for the client to fetch it itself from the
   * CA. This field contain the stapled OCSP response if the server served one. See RFC6066, Section
   * 8 for the data format: https://tools.ietf.org/html/rfc6066#section-8
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("OCSPResponse")
  private java.lang.String oCSPResponse;

  /**
   * SCTList obtained during the TLS handshake, if any. See RFC6962, Section 3.3 for the data
   * format: https://tools.ietf.org/html/rfc6962#section-3.3
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("SCTList")
  private java.lang.String sCTList;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("SSLCipherSuite")
  private java.lang.Integer sSLCipherSuite;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("SSLCipherSuiteName")
  private java.lang.String sSLCipherSuiteName;

  /**
   * Details about the SSL/TLS protocol and cipher. See RFC5246 and
   * google3/crawler/trawler/hope/proto/ssl.proto for more details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("SSLProtocolVersion")
  private java.lang.Integer sSLProtocolVersion;

  /**
   * The names of the SSL protocol version and cipher suite. These strings are implementation
   * defined and may be subject to change.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("SSLProtocolVersionName")
  private java.lang.String sSLProtocolVersionName;

  /**
   * ALPN negotiated protocol, see https://tools.ietf.org/html/rfc7301 The value will either be
   * empty, or one of the protocol names sent by the client that the server accepted. Examples
   * include "h2" and "acme-tls/1".
   * @return value or {@code null} for none
   */
  public java.lang.String getALPNNegotiatedProtocol() {
    return aLPNNegotiatedProtocol;
  }

  /**
   * ALPN negotiated protocol, see https://tools.ietf.org/html/rfc7301 The value will either be
   * empty, or one of the protocol names sent by the client that the server accepted. Examples
   * include "h2" and "acme-tls/1".
   * @param aLPNNegotiatedProtocol aLPNNegotiatedProtocol or {@code null} for none
   */
  public TrawlerSSLCertificateInfo setALPNNegotiatedProtocol(java.lang.String aLPNNegotiatedProtocol) {
    this.aLPNNegotiatedProtocol = aLPNNegotiatedProtocol;
    return this;
  }

  /**
   * If present, this consists of the remote webserver's X.509 certificate chain in DER format. The
   * chain stored here is the *reversed* result of SSL_get_peer_cert_chain(). That is to say, it is
   * the chain presented by the peer (which may differ from the chain that was built and verified),
   * but in leaf-last order. Typically the root cert will not be included. But do not assume
   * anything, because servers do all manner of weird things. (For example on the beginning of the
   * chain, there might be also some irrelevant certificates besides the root certificate.)
   * Certificates may be the empty string, indicating an encoding failure. See also |IsTruncated|.
   * Certs can be loaded with util/sig/cert.h Cert::LoadBinaryCert(), converted to ASCII PEM format
   * (CertificateUtil::CertificateToPEM()) or shown as text at the commandline by piping them into
   * 'openssl x509 -text -inform DER'.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCertificateChain() {
    return certificateChain;
  }

  /**
   * If present, this consists of the remote webserver's X.509 certificate chain in DER format. The
   * chain stored here is the *reversed* result of SSL_get_peer_cert_chain(). That is to say, it is
   * the chain presented by the peer (which may differ from the chain that was built and verified),
   * but in leaf-last order. Typically the root cert will not be included. But do not assume
   * anything, because servers do all manner of weird things. (For example on the beginning of the
   * chain, there might be also some irrelevant certificates besides the root certificate.)
   * Certificates may be the empty string, indicating an encoding failure. See also |IsTruncated|.
   * Certs can be loaded with util/sig/cert.h Cert::LoadBinaryCert(), converted to ASCII PEM format
   * (CertificateUtil::CertificateToPEM()) or shown as text at the commandline by piping them into
   * 'openssl x509 -text -inform DER'.
   * @param certificateChain certificateChain or {@code null} for none
   */
  public TrawlerSSLCertificateInfo setCertificateChain(java.util.List<java.lang.String> certificateChain) {
    this.certificateChain = certificateChain;
    return this;
  }

  /**
   * ErrorMessages contains errors from HTTPS validation. Examples of such errors include invalid
   * certificates, failure to build a certificate chain, certificates that do not match the expected
   * hostname, and internal errors. If ErrorMessages is empty, HTTPS validation succeeded.
   * Otherwise, it failed. This is the only guarantee about the contents of this field, though
   * legacy code exists that embeds invalid assumptions, b/70904498. New code should not do anything
   * with this field other than test whether it is empty and display its value to humans. If you
   * need to know more about the details of a particular HTTPS validation, you can revalidate
   * |CertificateChain| independently.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getErrorMessages() {
    return errorMessages;
  }

  /**
   * ErrorMessages contains errors from HTTPS validation. Examples of such errors include invalid
   * certificates, failure to build a certificate chain, certificates that do not match the expected
   * hostname, and internal errors. If ErrorMessages is empty, HTTPS validation succeeded.
   * Otherwise, it failed. This is the only guarantee about the contents of this field, though
   * legacy code exists that embeds invalid assumptions, b/70904498. New code should not do anything
   * with this field other than test whether it is empty and display its value to humans. If you
   * need to know more about the details of a particular HTTPS validation, you can revalidate
   * |CertificateChain| independently.
   * @param errorMessages errorMessages or {@code null} for none
   */
  public TrawlerSSLCertificateInfo setErrorMessages(java.util.List<java.lang.String> errorMessages) {
    this.errorMessages = errorMessages;
    return this;
  }

  /**
   * This SSLCertificateInfo had its fields truncated because it was too large. It is no longer set
   * (cl/205356251) but may be true in old records.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsTruncated() {
    return isTruncated;
  }

  /**
   * This SSLCertificateInfo had its fields truncated because it was too large. It is no longer set
   * (cl/205356251) but may be true in old records.
   * @param isTruncated isTruncated or {@code null} for none
   */
  public TrawlerSSLCertificateInfo setIsTruncated(java.lang.Boolean isTruncated) {
    this.isTruncated = isTruncated;
    return this;
  }

  /**
   * Stapled OCSP response obtained during the TLS handshake, if any. An OCSP (Online Certificate
   * Status Protocol) response is an indication, signed by the issuing CA, that the certificate has
   * not been revoked. A TLS handshake extension allows servers to "staple" a response to the
   * certificate served in the handshake, saving the need for the client to fetch it itself from the
   * CA. This field contain the stapled OCSP response if the server served one. See RFC6066, Section
   * 8 for the data format: https://tools.ietf.org/html/rfc6066#section-8
   * @see #decodeOCSPResponse()
   * @return value or {@code null} for none
   */
  public java.lang.String getOCSPResponse() {
    return oCSPResponse;
  }

  /**
   * Stapled OCSP response obtained during the TLS handshake, if any. An OCSP (Online Certificate
   * Status Protocol) response is an indication, signed by the issuing CA, that the certificate has
   * not been revoked. A TLS handshake extension allows servers to "staple" a response to the
   * certificate served in the handshake, saving the need for the client to fetch it itself from the
   * CA. This field contain the stapled OCSP response if the server served one. See RFC6066, Section
   * 8 for the data format: https://tools.ietf.org/html/rfc6066#section-8
   * @see #getOCSPResponse()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeOCSPResponse() {
    return com.google.api.client.util.Base64.decodeBase64(oCSPResponse);
  }

  /**
   * Stapled OCSP response obtained during the TLS handshake, if any. An OCSP (Online Certificate
   * Status Protocol) response is an indication, signed by the issuing CA, that the certificate has
   * not been revoked. A TLS handshake extension allows servers to "staple" a response to the
   * certificate served in the handshake, saving the need for the client to fetch it itself from the
   * CA. This field contain the stapled OCSP response if the server served one. See RFC6066, Section
   * 8 for the data format: https://tools.ietf.org/html/rfc6066#section-8
   * @see #encodeOCSPResponse()
   * @param oCSPResponse oCSPResponse or {@code null} for none
   */
  public TrawlerSSLCertificateInfo setOCSPResponse(java.lang.String oCSPResponse) {
    this.oCSPResponse = oCSPResponse;
    return this;
  }

  /**
   * Stapled OCSP response obtained during the TLS handshake, if any. An OCSP (Online Certificate
   * Status Protocol) response is an indication, signed by the issuing CA, that the certificate has
   * not been revoked. A TLS handshake extension allows servers to "staple" a response to the
   * certificate served in the handshake, saving the need for the client to fetch it itself from the
   * CA. This field contain the stapled OCSP response if the server served one. See RFC6066, Section
   * 8 for the data format: https://tools.ietf.org/html/rfc6066#section-8
   * @see #setOCSPResponse()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public TrawlerSSLCertificateInfo encodeOCSPResponse(byte[] oCSPResponse) {
    this.oCSPResponse = com.google.api.client.util.Base64.encodeBase64URLSafeString(oCSPResponse);
    return this;
  }

  /**
   * SCTList obtained during the TLS handshake, if any. See RFC6962, Section 3.3 for the data
   * format: https://tools.ietf.org/html/rfc6962#section-3.3
   * @see #decodeSCTList()
   * @return value or {@code null} for none
   */
  public java.lang.String getSCTList() {
    return sCTList;
  }

  /**
   * SCTList obtained during the TLS handshake, if any. See RFC6962, Section 3.3 for the data
   * format: https://tools.ietf.org/html/rfc6962#section-3.3
   * @see #getSCTList()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeSCTList() {
    return com.google.api.client.util.Base64.decodeBase64(sCTList);
  }

  /**
   * SCTList obtained during the TLS handshake, if any. See RFC6962, Section 3.3 for the data
   * format: https://tools.ietf.org/html/rfc6962#section-3.3
   * @see #encodeSCTList()
   * @param sCTList sCTList or {@code null} for none
   */
  public TrawlerSSLCertificateInfo setSCTList(java.lang.String sCTList) {
    this.sCTList = sCTList;
    return this;
  }

  /**
   * SCTList obtained during the TLS handshake, if any. See RFC6962, Section 3.3 for the data
   * format: https://tools.ietf.org/html/rfc6962#section-3.3
   * @see #setSCTList()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public TrawlerSSLCertificateInfo encodeSCTList(byte[] sCTList) {
    this.sCTList = com.google.api.client.util.Base64.encodeBase64URLSafeString(sCTList);
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSSLCipherSuite() {
    return sSLCipherSuite;
  }

  /**
   * @param sSLCipherSuite sSLCipherSuite or {@code null} for none
   */
  public TrawlerSSLCertificateInfo setSSLCipherSuite(java.lang.Integer sSLCipherSuite) {
    this.sSLCipherSuite = sSLCipherSuite;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSSLCipherSuiteName() {
    return sSLCipherSuiteName;
  }

  /**
   * @param sSLCipherSuiteName sSLCipherSuiteName or {@code null} for none
   */
  public TrawlerSSLCertificateInfo setSSLCipherSuiteName(java.lang.String sSLCipherSuiteName) {
    this.sSLCipherSuiteName = sSLCipherSuiteName;
    return this;
  }

  /**
   * Details about the SSL/TLS protocol and cipher. See RFC5246 and
   * google3/crawler/trawler/hope/proto/ssl.proto for more details.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSSLProtocolVersion() {
    return sSLProtocolVersion;
  }

  /**
   * Details about the SSL/TLS protocol and cipher. See RFC5246 and
   * google3/crawler/trawler/hope/proto/ssl.proto for more details.
   * @param sSLProtocolVersion sSLProtocolVersion or {@code null} for none
   */
  public TrawlerSSLCertificateInfo setSSLProtocolVersion(java.lang.Integer sSLProtocolVersion) {
    this.sSLProtocolVersion = sSLProtocolVersion;
    return this;
  }

  /**
   * The names of the SSL protocol version and cipher suite. These strings are implementation
   * defined and may be subject to change.
   * @return value or {@code null} for none
   */
  public java.lang.String getSSLProtocolVersionName() {
    return sSLProtocolVersionName;
  }

  /**
   * The names of the SSL protocol version and cipher suite. These strings are implementation
   * defined and may be subject to change.
   * @param sSLProtocolVersionName sSLProtocolVersionName or {@code null} for none
   */
  public TrawlerSSLCertificateInfo setSSLProtocolVersionName(java.lang.String sSLProtocolVersionName) {
    this.sSLProtocolVersionName = sSLProtocolVersionName;
    return this;
  }

  @Override
  public TrawlerSSLCertificateInfo set(String fieldName, Object value) {
    return (TrawlerSSLCertificateInfo) super.set(fieldName, value);
  }

  @Override
  public TrawlerSSLCertificateInfo clone() {
    return (TrawlerSSLCertificateInfo) super.clone();
  }

}
