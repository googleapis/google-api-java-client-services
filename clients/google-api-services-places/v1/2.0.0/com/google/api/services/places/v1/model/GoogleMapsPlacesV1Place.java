/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.places.v1.model;

/**
 * All the information representing a Place.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Places API (New). For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleMapsPlacesV1Place extends com.google.api.client.json.GenericJson {

  /**
   * Information about the accessibility options a place offers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1PlaceAccessibilityOptions accessibilityOptions;

  /**
   * Repeated components for each locality level. Note the following facts about the
   * address_components[] array: - The array of address components may contain more components than
   * the formatted_address. - The array does not necessarily include all the political entities that
   * contain an address, apart from those included in the formatted_address. To retrieve all the
   * political entities that contain a specific address, you should use reverse geocoding, passing
   * the latitude/longitude of the address as a parameter to the request. - The format of the
   * response is not guaranteed to remain the same between requests. In particular, the number of
   * address_components varies based on the address requested and can change over time for the same
   * address. A component can change position in the array. The type of the component can change. A
   * particular component may be missing in a later response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleMapsPlacesV1PlaceAddressComponent> addressComponents;

  /**
   * The address descriptor of the place. Address descriptors include additional information that
   * help describe a location using landmarks and areas. See address descriptor regional coverage in
   * https://developers.google.com/maps/documentation/geocoding/address-descriptors/coverage.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1AddressDescriptor addressDescriptor;

  /**
   * The place's address in adr microformat: http://microformats.org/wiki/adr.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String adrFormatAddress;

  /**
   * Place allows dogs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowsDogs;

  /**
   * Experimental: See https://developers.google.com/maps/documentation/places/web-
   * service/experimental/places-generative for more details. AI-generated summary of the area that
   * the place is in.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1PlaceAreaSummary areaSummary;

  /**
   * A set of data provider that must be shown with this result.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleMapsPlacesV1PlaceAttribution> attributions;

  /**
   * The business status for the place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String businessStatus;

  /**
   * List of places in which the current place is located.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleMapsPlacesV1PlaceContainingPlace> containingPlaces;

  /**
   * Specifies if the business supports curbside pickup.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean curbsidePickup;

  /**
   * The hours of operation for the next seven days (including today). The time period starts at
   * midnight on the date of the request and ends at 11:59 pm six days later. This field includes
   * the special_days subfield of all hours, set for dates that have exceptional hours.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1PlaceOpeningHours currentOpeningHours;

  /**
   * Contains an array of entries for the next seven days including information about secondary
   * hours of a business. Secondary hours are different from a business's main hours. For example, a
   * restaurant can specify drive through hours or delivery hours as its secondary hours. This field
   * populates the type subfield, which draws from a predefined list of opening hours types (such as
   * DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place. This field includes the
   * special_days subfield of all hours, set for dates that have exceptional hours.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleMapsPlacesV1PlaceOpeningHours> currentSecondaryOpeningHours;

  /**
   * Specifies if the business supports delivery.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean delivery;

  /**
   * Specifies if the business supports indoor or outdoor seating options.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean dineIn;

  /**
   * The localized name of the place, suitable as a short human-readable description. For example,
   * "Google Sydney", "Starbucks", "Pyrmont", etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeLocalizedText displayName;

  /**
   * Contains a summary of the place. A summary is comprised of a textual overview, and also
   * includes the language code for these if applicable. Summary text must be presented as-is and
   * can not be modified or altered.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeLocalizedText editorialSummary;

  /**
   * Information of ev charging options.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1EVChargeOptions evChargeOptions;

  /**
   * A full, human-readable address for this place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String formattedAddress;

  /**
   * The most recent information about fuel options in a gas station. This information is updated
   * regularly.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1FuelOptions fuelOptions;

  /**
   * Experimental: See https://developers.google.com/maps/documentation/places/web-
   * service/experimental/places-generative for more details. AI-generated summary of the place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1PlaceGenerativeSummary generativeSummary;

  /**
   * Place is good for children.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean goodForChildren;

  /**
   * Place accommodates groups.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean goodForGroups;

  /**
   * Place is suitable for watching sports.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean goodForWatchingSports;

  /**
   * Links to trigger different Google Maps actions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1PlaceGoogleMapsLinks googleMapsLinks;

  /**
   * A URL providing more information about this place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String googleMapsUri;

  /**
   * Background color for icon_mask in hex format, e.g. #909CE1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String iconBackgroundColor;

  /**
   * A truncated URL to an icon mask. User can access different icon type by appending type suffix
   * to the end (eg, ".svg" or ".png").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String iconMaskBaseUri;

  /**
   * The unique identifier of a place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * A human-readable phone number for the place, in international format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String internationalPhoneNumber;

  /**
   * Place provides live music.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean liveMusic;

  /**
   * The position of this place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeLatLng location;

  /**
   * Place has a children's menu.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean menuForChildren;

  /**
   * This Place's resource name, in `places/{place_id}` format. Can be used to look up the Place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * A human-readable phone number for the place, in national format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nationalPhoneNumber;

  /**
   * Place provides outdoor seating.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean outdoorSeating;

  /**
   * Options of parking provided by the place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1PlaceParkingOptions parkingOptions;

  /**
   * Payment options the place accepts. If a payment option data is not available, the payment
   * option field will be unset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1PlacePaymentOptions paymentOptions;

  /**
   * Information (including references) about photos of this place. A maximum of 10 photos can be
   * returned.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleMapsPlacesV1Photo> photos;

  static {
    // hack to force ProGuard to consider GoogleMapsPlacesV1Photo used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleMapsPlacesV1Photo.class);
  }

  /**
   * Plus code of the place location lat/long.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1PlacePlusCode plusCode;

  /**
   * Price level of the place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String priceLevel;

  /**
   * The price range associated with a Place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1PriceRange priceRange;

  /**
   * The primary type of the given result. This type must one of the Places API supported types. For
   * example, "restaurant", "cafe", "airport", etc. A place can only have a single primary type. For
   * the complete list of possible values, see Table A and Table B at
   * https://developers.google.com/maps/documentation/places/web-service/place-types
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String primaryType;

  /**
   * The display name of the primary type, localized to the request language if applicable. For the
   * complete list of possible values, see Table A and Table B at
   * https://developers.google.com/maps/documentation/places/web-service/place-types
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeLocalizedText primaryTypeDisplayName;

  /**
   * Indicates whether the place is a pure service area business. Pure service area business is a
   * business that visits or delivers to customers directly but does not serve customers at their
   * business address. For example, businesses like cleaning services or plumbers. Those businesses
   * may not have a physical address or location on Google Maps.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean pureServiceAreaBusiness;

  /**
   * A rating between 1.0 and 5.0, based on user reviews of this place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double rating;

  /**
   * The regular hours of operation. Note that if a place is always open (24 hours), the `close`
   * field will not be set. Clients can rely on always open (24 hours) being represented as an
   * `open` period containing `day` with value `0`, `hour` with value `0`, and `minute` with value
   * `0`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1PlaceOpeningHours regularOpeningHours;

  /**
   * Contains an array of entries for information about regular secondary hours of a business.
   * Secondary hours are different from a business's main hours. For example, a restaurant can
   * specify drive through hours or delivery hours as its secondary hours. This field populates the
   * type subfield, which draws from a predefined list of opening hours types (such as
   * DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleMapsPlacesV1PlaceOpeningHours> regularSecondaryOpeningHours;

  /**
   * Specifies if the place supports reservations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean reservable;

  /**
   * Place has restroom.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean restroom;

  /**
   * List of reviews about this place, sorted by relevance. A maximum of 5 reviews can be returned.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleMapsPlacesV1Review> reviews;

  /**
   * Specifies if the place serves beer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean servesBeer;

  /**
   * Specifies if the place serves breakfast.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean servesBreakfast;

  /**
   * Specifies if the place serves brunch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean servesBrunch;

  /**
   * Place serves cocktails.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean servesCocktails;

  /**
   * Place serves coffee.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean servesCoffee;

  /**
   * Place serves dessert.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean servesDessert;

  /**
   * Specifies if the place serves dinner.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean servesDinner;

  /**
   * Specifies if the place serves lunch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean servesLunch;

  /**
   * Specifies if the place serves vegetarian food.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean servesVegetarianFood;

  /**
   * Specifies if the place serves wine.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean servesWine;

  /**
   * A short, human-readable address for this place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String shortFormattedAddress;

  /**
   * A list of sub destinations related to the place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleMapsPlacesV1PlaceSubDestination> subDestinations;

  /**
   * Specifies if the business supports takeout.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean takeout;

  /**
   * A set of type tags for this result. For example, "political" and "locality". For the complete
   * list of possible values, see Table A and Table B at
   * https://developers.google.com/maps/documentation/places/web-service/place-types
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> types;

  /**
   * The total number of reviews (with or without text) for this place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer userRatingCount;

  /**
   * Number of minutes this place's timezone is currently offset from UTC. This is expressed in
   * minutes to support timezones that are offset by fractions of an hour, e.g. X hours and 15
   * minutes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer utcOffsetMinutes;

  /**
   * A viewport suitable for displaying the place on an average-sized map. This viewport should not
   * be used as the physical boundary or the service area of the business.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleGeoTypeViewport viewport;

  /**
   * The authoritative website for this place, e.g. a business' homepage. Note that for places that
   * are part of a chain (e.g. an IKEA store), this will usually be the website for the individual
   * store, not the overall chain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String websiteUri;

  /**
   * Information about the accessibility options a place offers.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1PlaceAccessibilityOptions getAccessibilityOptions() {
    return accessibilityOptions;
  }

  /**
   * Information about the accessibility options a place offers.
   * @param accessibilityOptions accessibilityOptions or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setAccessibilityOptions(GoogleMapsPlacesV1PlaceAccessibilityOptions accessibilityOptions) {
    this.accessibilityOptions = accessibilityOptions;
    return this;
  }

  /**
   * Repeated components for each locality level. Note the following facts about the
   * address_components[] array: - The array of address components may contain more components than
   * the formatted_address. - The array does not necessarily include all the political entities that
   * contain an address, apart from those included in the formatted_address. To retrieve all the
   * political entities that contain a specific address, you should use reverse geocoding, passing
   * the latitude/longitude of the address as a parameter to the request. - The format of the
   * response is not guaranteed to remain the same between requests. In particular, the number of
   * address_components varies based on the address requested and can change over time for the same
   * address. A component can change position in the array. The type of the component can change. A
   * particular component may be missing in a later response.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleMapsPlacesV1PlaceAddressComponent> getAddressComponents() {
    return addressComponents;
  }

  /**
   * Repeated components for each locality level. Note the following facts about the
   * address_components[] array: - The array of address components may contain more components than
   * the formatted_address. - The array does not necessarily include all the political entities that
   * contain an address, apart from those included in the formatted_address. To retrieve all the
   * political entities that contain a specific address, you should use reverse geocoding, passing
   * the latitude/longitude of the address as a parameter to the request. - The format of the
   * response is not guaranteed to remain the same between requests. In particular, the number of
   * address_components varies based on the address requested and can change over time for the same
   * address. A component can change position in the array. The type of the component can change. A
   * particular component may be missing in a later response.
   * @param addressComponents addressComponents or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setAddressComponents(java.util.List<GoogleMapsPlacesV1PlaceAddressComponent> addressComponents) {
    this.addressComponents = addressComponents;
    return this;
  }

  /**
   * The address descriptor of the place. Address descriptors include additional information that
   * help describe a location using landmarks and areas. See address descriptor regional coverage in
   * https://developers.google.com/maps/documentation/geocoding/address-descriptors/coverage.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1AddressDescriptor getAddressDescriptor() {
    return addressDescriptor;
  }

  /**
   * The address descriptor of the place. Address descriptors include additional information that
   * help describe a location using landmarks and areas. See address descriptor regional coverage in
   * https://developers.google.com/maps/documentation/geocoding/address-descriptors/coverage.
   * @param addressDescriptor addressDescriptor or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setAddressDescriptor(GoogleMapsPlacesV1AddressDescriptor addressDescriptor) {
    this.addressDescriptor = addressDescriptor;
    return this;
  }

  /**
   * The place's address in adr microformat: http://microformats.org/wiki/adr.
   * @return value or {@code null} for none
   */
  public java.lang.String getAdrFormatAddress() {
    return adrFormatAddress;
  }

  /**
   * The place's address in adr microformat: http://microformats.org/wiki/adr.
   * @param adrFormatAddress adrFormatAddress or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setAdrFormatAddress(java.lang.String adrFormatAddress) {
    this.adrFormatAddress = adrFormatAddress;
    return this;
  }

  /**
   * Place allows dogs.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowsDogs() {
    return allowsDogs;
  }

  /**
   * Place allows dogs.
   * @param allowsDogs allowsDogs or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setAllowsDogs(java.lang.Boolean allowsDogs) {
    this.allowsDogs = allowsDogs;
    return this;
  }

  /**
   * Experimental: See https://developers.google.com/maps/documentation/places/web-
   * service/experimental/places-generative for more details. AI-generated summary of the area that
   * the place is in.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1PlaceAreaSummary getAreaSummary() {
    return areaSummary;
  }

  /**
   * Experimental: See https://developers.google.com/maps/documentation/places/web-
   * service/experimental/places-generative for more details. AI-generated summary of the area that
   * the place is in.
   * @param areaSummary areaSummary or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setAreaSummary(GoogleMapsPlacesV1PlaceAreaSummary areaSummary) {
    this.areaSummary = areaSummary;
    return this;
  }

  /**
   * A set of data provider that must be shown with this result.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleMapsPlacesV1PlaceAttribution> getAttributions() {
    return attributions;
  }

  /**
   * A set of data provider that must be shown with this result.
   * @param attributions attributions or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setAttributions(java.util.List<GoogleMapsPlacesV1PlaceAttribution> attributions) {
    this.attributions = attributions;
    return this;
  }

  /**
   * The business status for the place.
   * @return value or {@code null} for none
   */
  public java.lang.String getBusinessStatus() {
    return businessStatus;
  }

  /**
   * The business status for the place.
   * @param businessStatus businessStatus or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setBusinessStatus(java.lang.String businessStatus) {
    this.businessStatus = businessStatus;
    return this;
  }

  /**
   * List of places in which the current place is located.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleMapsPlacesV1PlaceContainingPlace> getContainingPlaces() {
    return containingPlaces;
  }

  /**
   * List of places in which the current place is located.
   * @param containingPlaces containingPlaces or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setContainingPlaces(java.util.List<GoogleMapsPlacesV1PlaceContainingPlace> containingPlaces) {
    this.containingPlaces = containingPlaces;
    return this;
  }

  /**
   * Specifies if the business supports curbside pickup.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCurbsidePickup() {
    return curbsidePickup;
  }

  /**
   * Specifies if the business supports curbside pickup.
   * @param curbsidePickup curbsidePickup or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setCurbsidePickup(java.lang.Boolean curbsidePickup) {
    this.curbsidePickup = curbsidePickup;
    return this;
  }

  /**
   * The hours of operation for the next seven days (including today). The time period starts at
   * midnight on the date of the request and ends at 11:59 pm six days later. This field includes
   * the special_days subfield of all hours, set for dates that have exceptional hours.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1PlaceOpeningHours getCurrentOpeningHours() {
    return currentOpeningHours;
  }

  /**
   * The hours of operation for the next seven days (including today). The time period starts at
   * midnight on the date of the request and ends at 11:59 pm six days later. This field includes
   * the special_days subfield of all hours, set for dates that have exceptional hours.
   * @param currentOpeningHours currentOpeningHours or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setCurrentOpeningHours(GoogleMapsPlacesV1PlaceOpeningHours currentOpeningHours) {
    this.currentOpeningHours = currentOpeningHours;
    return this;
  }

  /**
   * Contains an array of entries for the next seven days including information about secondary
   * hours of a business. Secondary hours are different from a business's main hours. For example, a
   * restaurant can specify drive through hours or delivery hours as its secondary hours. This field
   * populates the type subfield, which draws from a predefined list of opening hours types (such as
   * DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place. This field includes the
   * special_days subfield of all hours, set for dates that have exceptional hours.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleMapsPlacesV1PlaceOpeningHours> getCurrentSecondaryOpeningHours() {
    return currentSecondaryOpeningHours;
  }

  /**
   * Contains an array of entries for the next seven days including information about secondary
   * hours of a business. Secondary hours are different from a business's main hours. For example, a
   * restaurant can specify drive through hours or delivery hours as its secondary hours. This field
   * populates the type subfield, which draws from a predefined list of opening hours types (such as
   * DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place. This field includes the
   * special_days subfield of all hours, set for dates that have exceptional hours.
   * @param currentSecondaryOpeningHours currentSecondaryOpeningHours or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setCurrentSecondaryOpeningHours(java.util.List<GoogleMapsPlacesV1PlaceOpeningHours> currentSecondaryOpeningHours) {
    this.currentSecondaryOpeningHours = currentSecondaryOpeningHours;
    return this;
  }

  /**
   * Specifies if the business supports delivery.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDelivery() {
    return delivery;
  }

  /**
   * Specifies if the business supports delivery.
   * @param delivery delivery or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setDelivery(java.lang.Boolean delivery) {
    this.delivery = delivery;
    return this;
  }

  /**
   * Specifies if the business supports indoor or outdoor seating options.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDineIn() {
    return dineIn;
  }

  /**
   * Specifies if the business supports indoor or outdoor seating options.
   * @param dineIn dineIn or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setDineIn(java.lang.Boolean dineIn) {
    this.dineIn = dineIn;
    return this;
  }

  /**
   * The localized name of the place, suitable as a short human-readable description. For example,
   * "Google Sydney", "Starbucks", "Pyrmont", etc.
   * @return value or {@code null} for none
   */
  public GoogleTypeLocalizedText getDisplayName() {
    return displayName;
  }

  /**
   * The localized name of the place, suitable as a short human-readable description. For example,
   * "Google Sydney", "Starbucks", "Pyrmont", etc.
   * @param displayName displayName or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setDisplayName(GoogleTypeLocalizedText displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Contains a summary of the place. A summary is comprised of a textual overview, and also
   * includes the language code for these if applicable. Summary text must be presented as-is and
   * can not be modified or altered.
   * @return value or {@code null} for none
   */
  public GoogleTypeLocalizedText getEditorialSummary() {
    return editorialSummary;
  }

  /**
   * Contains a summary of the place. A summary is comprised of a textual overview, and also
   * includes the language code for these if applicable. Summary text must be presented as-is and
   * can not be modified or altered.
   * @param editorialSummary editorialSummary or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setEditorialSummary(GoogleTypeLocalizedText editorialSummary) {
    this.editorialSummary = editorialSummary;
    return this;
  }

  /**
   * Information of ev charging options.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1EVChargeOptions getEvChargeOptions() {
    return evChargeOptions;
  }

  /**
   * Information of ev charging options.
   * @param evChargeOptions evChargeOptions or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setEvChargeOptions(GoogleMapsPlacesV1EVChargeOptions evChargeOptions) {
    this.evChargeOptions = evChargeOptions;
    return this;
  }

  /**
   * A full, human-readable address for this place.
   * @return value or {@code null} for none
   */
  public java.lang.String getFormattedAddress() {
    return formattedAddress;
  }

  /**
   * A full, human-readable address for this place.
   * @param formattedAddress formattedAddress or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setFormattedAddress(java.lang.String formattedAddress) {
    this.formattedAddress = formattedAddress;
    return this;
  }

  /**
   * The most recent information about fuel options in a gas station. This information is updated
   * regularly.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1FuelOptions getFuelOptions() {
    return fuelOptions;
  }

  /**
   * The most recent information about fuel options in a gas station. This information is updated
   * regularly.
   * @param fuelOptions fuelOptions or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setFuelOptions(GoogleMapsPlacesV1FuelOptions fuelOptions) {
    this.fuelOptions = fuelOptions;
    return this;
  }

  /**
   * Experimental: See https://developers.google.com/maps/documentation/places/web-
   * service/experimental/places-generative for more details. AI-generated summary of the place.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1PlaceGenerativeSummary getGenerativeSummary() {
    return generativeSummary;
  }

  /**
   * Experimental: See https://developers.google.com/maps/documentation/places/web-
   * service/experimental/places-generative for more details. AI-generated summary of the place.
   * @param generativeSummary generativeSummary or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setGenerativeSummary(GoogleMapsPlacesV1PlaceGenerativeSummary generativeSummary) {
    this.generativeSummary = generativeSummary;
    return this;
  }

  /**
   * Place is good for children.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getGoodForChildren() {
    return goodForChildren;
  }

  /**
   * Place is good for children.
   * @param goodForChildren goodForChildren or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setGoodForChildren(java.lang.Boolean goodForChildren) {
    this.goodForChildren = goodForChildren;
    return this;
  }

  /**
   * Place accommodates groups.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getGoodForGroups() {
    return goodForGroups;
  }

  /**
   * Place accommodates groups.
   * @param goodForGroups goodForGroups or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setGoodForGroups(java.lang.Boolean goodForGroups) {
    this.goodForGroups = goodForGroups;
    return this;
  }

  /**
   * Place is suitable for watching sports.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getGoodForWatchingSports() {
    return goodForWatchingSports;
  }

  /**
   * Place is suitable for watching sports.
   * @param goodForWatchingSports goodForWatchingSports or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setGoodForWatchingSports(java.lang.Boolean goodForWatchingSports) {
    this.goodForWatchingSports = goodForWatchingSports;
    return this;
  }

  /**
   * Links to trigger different Google Maps actions.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1PlaceGoogleMapsLinks getGoogleMapsLinks() {
    return googleMapsLinks;
  }

  /**
   * Links to trigger different Google Maps actions.
   * @param googleMapsLinks googleMapsLinks or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setGoogleMapsLinks(GoogleMapsPlacesV1PlaceGoogleMapsLinks googleMapsLinks) {
    this.googleMapsLinks = googleMapsLinks;
    return this;
  }

  /**
   * A URL providing more information about this place.
   * @return value or {@code null} for none
   */
  public java.lang.String getGoogleMapsUri() {
    return googleMapsUri;
  }

  /**
   * A URL providing more information about this place.
   * @param googleMapsUri googleMapsUri or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setGoogleMapsUri(java.lang.String googleMapsUri) {
    this.googleMapsUri = googleMapsUri;
    return this;
  }

  /**
   * Background color for icon_mask in hex format, e.g. #909CE1.
   * @return value or {@code null} for none
   */
  public java.lang.String getIconBackgroundColor() {
    return iconBackgroundColor;
  }

  /**
   * Background color for icon_mask in hex format, e.g. #909CE1.
   * @param iconBackgroundColor iconBackgroundColor or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setIconBackgroundColor(java.lang.String iconBackgroundColor) {
    this.iconBackgroundColor = iconBackgroundColor;
    return this;
  }

  /**
   * A truncated URL to an icon mask. User can access different icon type by appending type suffix
   * to the end (eg, ".svg" or ".png").
   * @return value or {@code null} for none
   */
  public java.lang.String getIconMaskBaseUri() {
    return iconMaskBaseUri;
  }

  /**
   * A truncated URL to an icon mask. User can access different icon type by appending type suffix
   * to the end (eg, ".svg" or ".png").
   * @param iconMaskBaseUri iconMaskBaseUri or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setIconMaskBaseUri(java.lang.String iconMaskBaseUri) {
    this.iconMaskBaseUri = iconMaskBaseUri;
    return this;
  }

  /**
   * The unique identifier of a place.
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * The unique identifier of a place.
   * @param id id or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * A human-readable phone number for the place, in international format.
   * @return value or {@code null} for none
   */
  public java.lang.String getInternationalPhoneNumber() {
    return internationalPhoneNumber;
  }

  /**
   * A human-readable phone number for the place, in international format.
   * @param internationalPhoneNumber internationalPhoneNumber or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setInternationalPhoneNumber(java.lang.String internationalPhoneNumber) {
    this.internationalPhoneNumber = internationalPhoneNumber;
    return this;
  }

  /**
   * Place provides live music.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getLiveMusic() {
    return liveMusic;
  }

  /**
   * Place provides live music.
   * @param liveMusic liveMusic or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setLiveMusic(java.lang.Boolean liveMusic) {
    this.liveMusic = liveMusic;
    return this;
  }

  /**
   * The position of this place.
   * @return value or {@code null} for none
   */
  public GoogleTypeLatLng getLocation() {
    return location;
  }

  /**
   * The position of this place.
   * @param location location or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setLocation(GoogleTypeLatLng location) {
    this.location = location;
    return this;
  }

  /**
   * Place has a children's menu.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMenuForChildren() {
    return menuForChildren;
  }

  /**
   * Place has a children's menu.
   * @param menuForChildren menuForChildren or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setMenuForChildren(java.lang.Boolean menuForChildren) {
    this.menuForChildren = menuForChildren;
    return this;
  }

  /**
   * This Place's resource name, in `places/{place_id}` format. Can be used to look up the Place.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * This Place's resource name, in `places/{place_id}` format. Can be used to look up the Place.
   * @param name name or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * A human-readable phone number for the place, in national format.
   * @return value or {@code null} for none
   */
  public java.lang.String getNationalPhoneNumber() {
    return nationalPhoneNumber;
  }

  /**
   * A human-readable phone number for the place, in national format.
   * @param nationalPhoneNumber nationalPhoneNumber or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setNationalPhoneNumber(java.lang.String nationalPhoneNumber) {
    this.nationalPhoneNumber = nationalPhoneNumber;
    return this;
  }

  /**
   * Place provides outdoor seating.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getOutdoorSeating() {
    return outdoorSeating;
  }

  /**
   * Place provides outdoor seating.
   * @param outdoorSeating outdoorSeating or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setOutdoorSeating(java.lang.Boolean outdoorSeating) {
    this.outdoorSeating = outdoorSeating;
    return this;
  }

  /**
   * Options of parking provided by the place.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1PlaceParkingOptions getParkingOptions() {
    return parkingOptions;
  }

  /**
   * Options of parking provided by the place.
   * @param parkingOptions parkingOptions or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setParkingOptions(GoogleMapsPlacesV1PlaceParkingOptions parkingOptions) {
    this.parkingOptions = parkingOptions;
    return this;
  }

  /**
   * Payment options the place accepts. If a payment option data is not available, the payment
   * option field will be unset.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1PlacePaymentOptions getPaymentOptions() {
    return paymentOptions;
  }

  /**
   * Payment options the place accepts. If a payment option data is not available, the payment
   * option field will be unset.
   * @param paymentOptions paymentOptions or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setPaymentOptions(GoogleMapsPlacesV1PlacePaymentOptions paymentOptions) {
    this.paymentOptions = paymentOptions;
    return this;
  }

  /**
   * Information (including references) about photos of this place. A maximum of 10 photos can be
   * returned.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleMapsPlacesV1Photo> getPhotos() {
    return photos;
  }

  /**
   * Information (including references) about photos of this place. A maximum of 10 photos can be
   * returned.
   * @param photos photos or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setPhotos(java.util.List<GoogleMapsPlacesV1Photo> photos) {
    this.photos = photos;
    return this;
  }

  /**
   * Plus code of the place location lat/long.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1PlacePlusCode getPlusCode() {
    return plusCode;
  }

  /**
   * Plus code of the place location lat/long.
   * @param plusCode plusCode or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setPlusCode(GoogleMapsPlacesV1PlacePlusCode plusCode) {
    this.plusCode = plusCode;
    return this;
  }

  /**
   * Price level of the place.
   * @return value or {@code null} for none
   */
  public java.lang.String getPriceLevel() {
    return priceLevel;
  }

  /**
   * Price level of the place.
   * @param priceLevel priceLevel or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setPriceLevel(java.lang.String priceLevel) {
    this.priceLevel = priceLevel;
    return this;
  }

  /**
   * The price range associated with a Place.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1PriceRange getPriceRange() {
    return priceRange;
  }

  /**
   * The price range associated with a Place.
   * @param priceRange priceRange or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setPriceRange(GoogleMapsPlacesV1PriceRange priceRange) {
    this.priceRange = priceRange;
    return this;
  }

  /**
   * The primary type of the given result. This type must one of the Places API supported types. For
   * example, "restaurant", "cafe", "airport", etc. A place can only have a single primary type. For
   * the complete list of possible values, see Table A and Table B at
   * https://developers.google.com/maps/documentation/places/web-service/place-types
   * @return value or {@code null} for none
   */
  public java.lang.String getPrimaryType() {
    return primaryType;
  }

  /**
   * The primary type of the given result. This type must one of the Places API supported types. For
   * example, "restaurant", "cafe", "airport", etc. A place can only have a single primary type. For
   * the complete list of possible values, see Table A and Table B at
   * https://developers.google.com/maps/documentation/places/web-service/place-types
   * @param primaryType primaryType or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setPrimaryType(java.lang.String primaryType) {
    this.primaryType = primaryType;
    return this;
  }

  /**
   * The display name of the primary type, localized to the request language if applicable. For the
   * complete list of possible values, see Table A and Table B at
   * https://developers.google.com/maps/documentation/places/web-service/place-types
   * @return value or {@code null} for none
   */
  public GoogleTypeLocalizedText getPrimaryTypeDisplayName() {
    return primaryTypeDisplayName;
  }

  /**
   * The display name of the primary type, localized to the request language if applicable. For the
   * complete list of possible values, see Table A and Table B at
   * https://developers.google.com/maps/documentation/places/web-service/place-types
   * @param primaryTypeDisplayName primaryTypeDisplayName or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setPrimaryTypeDisplayName(GoogleTypeLocalizedText primaryTypeDisplayName) {
    this.primaryTypeDisplayName = primaryTypeDisplayName;
    return this;
  }

  /**
   * Indicates whether the place is a pure service area business. Pure service area business is a
   * business that visits or delivers to customers directly but does not serve customers at their
   * business address. For example, businesses like cleaning services or plumbers. Those businesses
   * may not have a physical address or location on Google Maps.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPureServiceAreaBusiness() {
    return pureServiceAreaBusiness;
  }

  /**
   * Indicates whether the place is a pure service area business. Pure service area business is a
   * business that visits or delivers to customers directly but does not serve customers at their
   * business address. For example, businesses like cleaning services or plumbers. Those businesses
   * may not have a physical address or location on Google Maps.
   * @param pureServiceAreaBusiness pureServiceAreaBusiness or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setPureServiceAreaBusiness(java.lang.Boolean pureServiceAreaBusiness) {
    this.pureServiceAreaBusiness = pureServiceAreaBusiness;
    return this;
  }

  /**
   * A rating between 1.0 and 5.0, based on user reviews of this place.
   * @return value or {@code null} for none
   */
  public java.lang.Double getRating() {
    return rating;
  }

  /**
   * A rating between 1.0 and 5.0, based on user reviews of this place.
   * @param rating rating or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setRating(java.lang.Double rating) {
    this.rating = rating;
    return this;
  }

  /**
   * The regular hours of operation. Note that if a place is always open (24 hours), the `close`
   * field will not be set. Clients can rely on always open (24 hours) being represented as an
   * `open` period containing `day` with value `0`, `hour` with value `0`, and `minute` with value
   * `0`.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1PlaceOpeningHours getRegularOpeningHours() {
    return regularOpeningHours;
  }

  /**
   * The regular hours of operation. Note that if a place is always open (24 hours), the `close`
   * field will not be set. Clients can rely on always open (24 hours) being represented as an
   * `open` period containing `day` with value `0`, `hour` with value `0`, and `minute` with value
   * `0`.
   * @param regularOpeningHours regularOpeningHours or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setRegularOpeningHours(GoogleMapsPlacesV1PlaceOpeningHours regularOpeningHours) {
    this.regularOpeningHours = regularOpeningHours;
    return this;
  }

  /**
   * Contains an array of entries for information about regular secondary hours of a business.
   * Secondary hours are different from a business's main hours. For example, a restaurant can
   * specify drive through hours or delivery hours as its secondary hours. This field populates the
   * type subfield, which draws from a predefined list of opening hours types (such as
   * DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleMapsPlacesV1PlaceOpeningHours> getRegularSecondaryOpeningHours() {
    return regularSecondaryOpeningHours;
  }

  /**
   * Contains an array of entries for information about regular secondary hours of a business.
   * Secondary hours are different from a business's main hours. For example, a restaurant can
   * specify drive through hours or delivery hours as its secondary hours. This field populates the
   * type subfield, which draws from a predefined list of opening hours types (such as
   * DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the place.
   * @param regularSecondaryOpeningHours regularSecondaryOpeningHours or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setRegularSecondaryOpeningHours(java.util.List<GoogleMapsPlacesV1PlaceOpeningHours> regularSecondaryOpeningHours) {
    this.regularSecondaryOpeningHours = regularSecondaryOpeningHours;
    return this;
  }

  /**
   * Specifies if the place supports reservations.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReservable() {
    return reservable;
  }

  /**
   * Specifies if the place supports reservations.
   * @param reservable reservable or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setReservable(java.lang.Boolean reservable) {
    this.reservable = reservable;
    return this;
  }

  /**
   * Place has restroom.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRestroom() {
    return restroom;
  }

  /**
   * Place has restroom.
   * @param restroom restroom or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setRestroom(java.lang.Boolean restroom) {
    this.restroom = restroom;
    return this;
  }

  /**
   * List of reviews about this place, sorted by relevance. A maximum of 5 reviews can be returned.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleMapsPlacesV1Review> getReviews() {
    return reviews;
  }

  /**
   * List of reviews about this place, sorted by relevance. A maximum of 5 reviews can be returned.
   * @param reviews reviews or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setReviews(java.util.List<GoogleMapsPlacesV1Review> reviews) {
    this.reviews = reviews;
    return this;
  }

  /**
   * Specifies if the place serves beer.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getServesBeer() {
    return servesBeer;
  }

  /**
   * Specifies if the place serves beer.
   * @param servesBeer servesBeer or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setServesBeer(java.lang.Boolean servesBeer) {
    this.servesBeer = servesBeer;
    return this;
  }

  /**
   * Specifies if the place serves breakfast.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getServesBreakfast() {
    return servesBreakfast;
  }

  /**
   * Specifies if the place serves breakfast.
   * @param servesBreakfast servesBreakfast or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setServesBreakfast(java.lang.Boolean servesBreakfast) {
    this.servesBreakfast = servesBreakfast;
    return this;
  }

  /**
   * Specifies if the place serves brunch.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getServesBrunch() {
    return servesBrunch;
  }

  /**
   * Specifies if the place serves brunch.
   * @param servesBrunch servesBrunch or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setServesBrunch(java.lang.Boolean servesBrunch) {
    this.servesBrunch = servesBrunch;
    return this;
  }

  /**
   * Place serves cocktails.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getServesCocktails() {
    return servesCocktails;
  }

  /**
   * Place serves cocktails.
   * @param servesCocktails servesCocktails or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setServesCocktails(java.lang.Boolean servesCocktails) {
    this.servesCocktails = servesCocktails;
    return this;
  }

  /**
   * Place serves coffee.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getServesCoffee() {
    return servesCoffee;
  }

  /**
   * Place serves coffee.
   * @param servesCoffee servesCoffee or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setServesCoffee(java.lang.Boolean servesCoffee) {
    this.servesCoffee = servesCoffee;
    return this;
  }

  /**
   * Place serves dessert.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getServesDessert() {
    return servesDessert;
  }

  /**
   * Place serves dessert.
   * @param servesDessert servesDessert or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setServesDessert(java.lang.Boolean servesDessert) {
    this.servesDessert = servesDessert;
    return this;
  }

  /**
   * Specifies if the place serves dinner.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getServesDinner() {
    return servesDinner;
  }

  /**
   * Specifies if the place serves dinner.
   * @param servesDinner servesDinner or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setServesDinner(java.lang.Boolean servesDinner) {
    this.servesDinner = servesDinner;
    return this;
  }

  /**
   * Specifies if the place serves lunch.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getServesLunch() {
    return servesLunch;
  }

  /**
   * Specifies if the place serves lunch.
   * @param servesLunch servesLunch or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setServesLunch(java.lang.Boolean servesLunch) {
    this.servesLunch = servesLunch;
    return this;
  }

  /**
   * Specifies if the place serves vegetarian food.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getServesVegetarianFood() {
    return servesVegetarianFood;
  }

  /**
   * Specifies if the place serves vegetarian food.
   * @param servesVegetarianFood servesVegetarianFood or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setServesVegetarianFood(java.lang.Boolean servesVegetarianFood) {
    this.servesVegetarianFood = servesVegetarianFood;
    return this;
  }

  /**
   * Specifies if the place serves wine.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getServesWine() {
    return servesWine;
  }

  /**
   * Specifies if the place serves wine.
   * @param servesWine servesWine or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setServesWine(java.lang.Boolean servesWine) {
    this.servesWine = servesWine;
    return this;
  }

  /**
   * A short, human-readable address for this place.
   * @return value or {@code null} for none
   */
  public java.lang.String getShortFormattedAddress() {
    return shortFormattedAddress;
  }

  /**
   * A short, human-readable address for this place.
   * @param shortFormattedAddress shortFormattedAddress or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setShortFormattedAddress(java.lang.String shortFormattedAddress) {
    this.shortFormattedAddress = shortFormattedAddress;
    return this;
  }

  /**
   * A list of sub destinations related to the place.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleMapsPlacesV1PlaceSubDestination> getSubDestinations() {
    return subDestinations;
  }

  /**
   * A list of sub destinations related to the place.
   * @param subDestinations subDestinations or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setSubDestinations(java.util.List<GoogleMapsPlacesV1PlaceSubDestination> subDestinations) {
    this.subDestinations = subDestinations;
    return this;
  }

  /**
   * Specifies if the business supports takeout.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getTakeout() {
    return takeout;
  }

  /**
   * Specifies if the business supports takeout.
   * @param takeout takeout or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setTakeout(java.lang.Boolean takeout) {
    this.takeout = takeout;
    return this;
  }

  /**
   * A set of type tags for this result. For example, "political" and "locality". For the complete
   * list of possible values, see Table A and Table B at
   * https://developers.google.com/maps/documentation/places/web-service/place-types
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTypes() {
    return types;
  }

  /**
   * A set of type tags for this result. For example, "political" and "locality". For the complete
   * list of possible values, see Table A and Table B at
   * https://developers.google.com/maps/documentation/places/web-service/place-types
   * @param types types or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setTypes(java.util.List<java.lang.String> types) {
    this.types = types;
    return this;
  }

  /**
   * The total number of reviews (with or without text) for this place.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getUserRatingCount() {
    return userRatingCount;
  }

  /**
   * The total number of reviews (with or without text) for this place.
   * @param userRatingCount userRatingCount or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setUserRatingCount(java.lang.Integer userRatingCount) {
    this.userRatingCount = userRatingCount;
    return this;
  }

  /**
   * Number of minutes this place's timezone is currently offset from UTC. This is expressed in
   * minutes to support timezones that are offset by fractions of an hour, e.g. X hours and 15
   * minutes.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getUtcOffsetMinutes() {
    return utcOffsetMinutes;
  }

  /**
   * Number of minutes this place's timezone is currently offset from UTC. This is expressed in
   * minutes to support timezones that are offset by fractions of an hour, e.g. X hours and 15
   * minutes.
   * @param utcOffsetMinutes utcOffsetMinutes or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setUtcOffsetMinutes(java.lang.Integer utcOffsetMinutes) {
    this.utcOffsetMinutes = utcOffsetMinutes;
    return this;
  }

  /**
   * A viewport suitable for displaying the place on an average-sized map. This viewport should not
   * be used as the physical boundary or the service area of the business.
   * @return value or {@code null} for none
   */
  public GoogleGeoTypeViewport getViewport() {
    return viewport;
  }

  /**
   * A viewport suitable for displaying the place on an average-sized map. This viewport should not
   * be used as the physical boundary or the service area of the business.
   * @param viewport viewport or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setViewport(GoogleGeoTypeViewport viewport) {
    this.viewport = viewport;
    return this;
  }

  /**
   * The authoritative website for this place, e.g. a business' homepage. Note that for places that
   * are part of a chain (e.g. an IKEA store), this will usually be the website for the individual
   * store, not the overall chain.
   * @return value or {@code null} for none
   */
  public java.lang.String getWebsiteUri() {
    return websiteUri;
  }

  /**
   * The authoritative website for this place, e.g. a business' homepage. Note that for places that
   * are part of a chain (e.g. an IKEA store), this will usually be the website for the individual
   * store, not the overall chain.
   * @param websiteUri websiteUri or {@code null} for none
   */
  public GoogleMapsPlacesV1Place setWebsiteUri(java.lang.String websiteUri) {
    this.websiteUri = websiteUri;
    return this;
  }

  @Override
  public GoogleMapsPlacesV1Place set(String fieldName, Object value) {
    return (GoogleMapsPlacesV1Place) super.set(fieldName, value);
  }

  @Override
  public GoogleMapsPlacesV1Place clone() {
    return (GoogleMapsPlacesV1Place) super.clone();
  }

}
