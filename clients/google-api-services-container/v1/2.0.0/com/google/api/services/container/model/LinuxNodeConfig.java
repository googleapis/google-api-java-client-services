/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.container.model;

/**
 * Parameters that can be configured on Linux nodes.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Kubernetes Engine API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LinuxNodeConfig extends com.google.api.client.json.GenericJson {

  /**
   * cgroup_mode specifies the cgroup mode to be used on the node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cgroupMode;

  /**
   * Optional. Amounts for 2M and 1G hugepages
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private HugepagesConfig hugepages;

  /**
   * The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The
   * following parameters are supported. net.core.busy_poll net.core.busy_read
   * net.core.netdev_max_backlog net.core.rmem_max net.core.rmem_default net.core.wmem_default
   * net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem
   * net.ipv4.tcp_tw_reuse net.ipv4.tcp_max_orphans net.netfilter.nf_conntrack_max
   * net.netfilter.nf_conntrack_buckets net.netfilter.nf_conntrack_tcp_timeout_close_wait
   * net.netfilter.nf_conntrack_tcp_timeout_time_wait
   * net.netfilter.nf_conntrack_tcp_timeout_established net.netfilter.nf_conntrack_acct
   * kernel.shmmni kernel.shmmax kernel.shmall fs.aio-max-nr fs.file-max
   * fs.inotify.max_user_instances fs.inotify.max_user_watches fs.nr_open vm.dirty_background_ratio
   * vm.dirty_expire_centisecs vm.dirty_ratio vm.dirty_writeback_centisecs vm.max_map_count
   * vm.overcommit_memory vm.overcommit_ratio vm.vfs_cache_pressure vm.swappiness
   * vm.watermark_scale_factor vm.min_free_kbytes
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> sysctls;

  /**
   * Optional. Defines the transparent hugepage defrag configuration on the node. VM hugepage
   * allocation can be managed by either limiting defragmentation for delayed allocation or skipping
   * it entirely for immediate allocation only. See https://docs.kernel.org/admin-
   * guide/mm/transhuge.html for more details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String transparentHugepageDefrag;

  /**
   * Optional. Transparent hugepage support for anonymous memory can be entirely disabled (mostly
   * for debugging purposes) or only enabled inside MADV_HUGEPAGE regions (to avoid the risk of
   * consuming more memory resources) or enabled system wide. See https://docs.kernel.org/admin-
   * guide/mm/transhuge.html for more details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String transparentHugepageEnabled;

  /**
   * cgroup_mode specifies the cgroup mode to be used on the node.
   * @return value or {@code null} for none
   */
  public java.lang.String getCgroupMode() {
    return cgroupMode;
  }

  /**
   * cgroup_mode specifies the cgroup mode to be used on the node.
   * @param cgroupMode cgroupMode or {@code null} for none
   */
  public LinuxNodeConfig setCgroupMode(java.lang.String cgroupMode) {
    this.cgroupMode = cgroupMode;
    return this;
  }

  /**
   * Optional. Amounts for 2M and 1G hugepages
   * @return value or {@code null} for none
   */
  public HugepagesConfig getHugepages() {
    return hugepages;
  }

  /**
   * Optional. Amounts for 2M and 1G hugepages
   * @param hugepages hugepages or {@code null} for none
   */
  public LinuxNodeConfig setHugepages(HugepagesConfig hugepages) {
    this.hugepages = hugepages;
    return this;
  }

  /**
   * The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The
   * following parameters are supported. net.core.busy_poll net.core.busy_read
   * net.core.netdev_max_backlog net.core.rmem_max net.core.rmem_default net.core.wmem_default
   * net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem
   * net.ipv4.tcp_tw_reuse net.ipv4.tcp_max_orphans net.netfilter.nf_conntrack_max
   * net.netfilter.nf_conntrack_buckets net.netfilter.nf_conntrack_tcp_timeout_close_wait
   * net.netfilter.nf_conntrack_tcp_timeout_time_wait
   * net.netfilter.nf_conntrack_tcp_timeout_established net.netfilter.nf_conntrack_acct
   * kernel.shmmni kernel.shmmax kernel.shmall fs.aio-max-nr fs.file-max
   * fs.inotify.max_user_instances fs.inotify.max_user_watches fs.nr_open vm.dirty_background_ratio
   * vm.dirty_expire_centisecs vm.dirty_ratio vm.dirty_writeback_centisecs vm.max_map_count
   * vm.overcommit_memory vm.overcommit_ratio vm.vfs_cache_pressure vm.swappiness
   * vm.watermark_scale_factor vm.min_free_kbytes
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getSysctls() {
    return sysctls;
  }

  /**
   * The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The
   * following parameters are supported. net.core.busy_poll net.core.busy_read
   * net.core.netdev_max_backlog net.core.rmem_max net.core.rmem_default net.core.wmem_default
   * net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem
   * net.ipv4.tcp_tw_reuse net.ipv4.tcp_max_orphans net.netfilter.nf_conntrack_max
   * net.netfilter.nf_conntrack_buckets net.netfilter.nf_conntrack_tcp_timeout_close_wait
   * net.netfilter.nf_conntrack_tcp_timeout_time_wait
   * net.netfilter.nf_conntrack_tcp_timeout_established net.netfilter.nf_conntrack_acct
   * kernel.shmmni kernel.shmmax kernel.shmall fs.aio-max-nr fs.file-max
   * fs.inotify.max_user_instances fs.inotify.max_user_watches fs.nr_open vm.dirty_background_ratio
   * vm.dirty_expire_centisecs vm.dirty_ratio vm.dirty_writeback_centisecs vm.max_map_count
   * vm.overcommit_memory vm.overcommit_ratio vm.vfs_cache_pressure vm.swappiness
   * vm.watermark_scale_factor vm.min_free_kbytes
   * @param sysctls sysctls or {@code null} for none
   */
  public LinuxNodeConfig setSysctls(java.util.Map<String, java.lang.String> sysctls) {
    this.sysctls = sysctls;
    return this;
  }

  /**
   * Optional. Defines the transparent hugepage defrag configuration on the node. VM hugepage
   * allocation can be managed by either limiting defragmentation for delayed allocation or skipping
   * it entirely for immediate allocation only. See https://docs.kernel.org/admin-
   * guide/mm/transhuge.html for more details.
   * @return value or {@code null} for none
   */
  public java.lang.String getTransparentHugepageDefrag() {
    return transparentHugepageDefrag;
  }

  /**
   * Optional. Defines the transparent hugepage defrag configuration on the node. VM hugepage
   * allocation can be managed by either limiting defragmentation for delayed allocation or skipping
   * it entirely for immediate allocation only. See https://docs.kernel.org/admin-
   * guide/mm/transhuge.html for more details.
   * @param transparentHugepageDefrag transparentHugepageDefrag or {@code null} for none
   */
  public LinuxNodeConfig setTransparentHugepageDefrag(java.lang.String transparentHugepageDefrag) {
    this.transparentHugepageDefrag = transparentHugepageDefrag;
    return this;
  }

  /**
   * Optional. Transparent hugepage support for anonymous memory can be entirely disabled (mostly
   * for debugging purposes) or only enabled inside MADV_HUGEPAGE regions (to avoid the risk of
   * consuming more memory resources) or enabled system wide. See https://docs.kernel.org/admin-
   * guide/mm/transhuge.html for more details.
   * @return value or {@code null} for none
   */
  public java.lang.String getTransparentHugepageEnabled() {
    return transparentHugepageEnabled;
  }

  /**
   * Optional. Transparent hugepage support for anonymous memory can be entirely disabled (mostly
   * for debugging purposes) or only enabled inside MADV_HUGEPAGE regions (to avoid the risk of
   * consuming more memory resources) or enabled system wide. See https://docs.kernel.org/admin-
   * guide/mm/transhuge.html for more details.
   * @param transparentHugepageEnabled transparentHugepageEnabled or {@code null} for none
   */
  public LinuxNodeConfig setTransparentHugepageEnabled(java.lang.String transparentHugepageEnabled) {
    this.transparentHugepageEnabled = transparentHugepageEnabled;
    return this;
  }

  @Override
  public LinuxNodeConfig set(String fieldName, Object value) {
    return (LinuxNodeConfig) super.set(fieldName, value);
  }

  @Override
  public LinuxNodeConfig clone() {
    return (LinuxNodeConfig) super.clone();
  }

}
