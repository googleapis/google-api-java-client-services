/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.solar.v1.model;

/**
 * Response message for `Solar.FindClosestBuildingInsights`. Information about the location,
 * dimensions, and solar potential of a building.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Solar API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BuildingInsights extends com.google.api.client.json.GenericJson {

  /**
   * Administrative area 1 (e.g., in the US, the state) that contains this building. For example, in
   * the US, the abbreviation might be "MA" or "CA."
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String administrativeArea;

  /**
   * The bounding box of the building.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LatLngBox boundingBox;

  /**
   * A point near the center of the building.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LatLng center;

  /**
   * Date that the underlying imagery was acquired. This is approximate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Date imageryDate;

  /**
   * When processing was completed on this imagery.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Date imageryProcessedDate;

  /**
   * The quality of the imagery used to compute the data for this building.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imageryQuality;

  /**
   * The resource name for the building, of the format `buildings/{place_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Postal code (e.g., US zip code) this building is contained by.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postalCode;

  /**
   * Region code for the country (or region) this building is in.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String regionCode;

  /**
   * Solar potential of the building.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SolarPotential solarPotential;

  /**
   * Statistical area (e.g., US census tract) this building is in.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String statisticalArea;

  /**
   * Administrative area 1 (e.g., in the US, the state) that contains this building. For example, in
   * the US, the abbreviation might be "MA" or "CA."
   * @return value or {@code null} for none
   */
  public java.lang.String getAdministrativeArea() {
    return administrativeArea;
  }

  /**
   * Administrative area 1 (e.g., in the US, the state) that contains this building. For example, in
   * the US, the abbreviation might be "MA" or "CA."
   * @param administrativeArea administrativeArea or {@code null} for none
   */
  public BuildingInsights setAdministrativeArea(java.lang.String administrativeArea) {
    this.administrativeArea = administrativeArea;
    return this;
  }

  /**
   * The bounding box of the building.
   * @return value or {@code null} for none
   */
  public LatLngBox getBoundingBox() {
    return boundingBox;
  }

  /**
   * The bounding box of the building.
   * @param boundingBox boundingBox or {@code null} for none
   */
  public BuildingInsights setBoundingBox(LatLngBox boundingBox) {
    this.boundingBox = boundingBox;
    return this;
  }

  /**
   * A point near the center of the building.
   * @return value or {@code null} for none
   */
  public LatLng getCenter() {
    return center;
  }

  /**
   * A point near the center of the building.
   * @param center center or {@code null} for none
   */
  public BuildingInsights setCenter(LatLng center) {
    this.center = center;
    return this;
  }

  /**
   * Date that the underlying imagery was acquired. This is approximate.
   * @return value or {@code null} for none
   */
  public Date getImageryDate() {
    return imageryDate;
  }

  /**
   * Date that the underlying imagery was acquired. This is approximate.
   * @param imageryDate imageryDate or {@code null} for none
   */
  public BuildingInsights setImageryDate(Date imageryDate) {
    this.imageryDate = imageryDate;
    return this;
  }

  /**
   * When processing was completed on this imagery.
   * @return value or {@code null} for none
   */
  public Date getImageryProcessedDate() {
    return imageryProcessedDate;
  }

  /**
   * When processing was completed on this imagery.
   * @param imageryProcessedDate imageryProcessedDate or {@code null} for none
   */
  public BuildingInsights setImageryProcessedDate(Date imageryProcessedDate) {
    this.imageryProcessedDate = imageryProcessedDate;
    return this;
  }

  /**
   * The quality of the imagery used to compute the data for this building.
   * @return value or {@code null} for none
   */
  public java.lang.String getImageryQuality() {
    return imageryQuality;
  }

  /**
   * The quality of the imagery used to compute the data for this building.
   * @param imageryQuality imageryQuality or {@code null} for none
   */
  public BuildingInsights setImageryQuality(java.lang.String imageryQuality) {
    this.imageryQuality = imageryQuality;
    return this;
  }

  /**
   * The resource name for the building, of the format `buildings/{place_id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The resource name for the building, of the format `buildings/{place_id}`.
   * @param name name or {@code null} for none
   */
  public BuildingInsights setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Postal code (e.g., US zip code) this building is contained by.
   * @return value or {@code null} for none
   */
  public java.lang.String getPostalCode() {
    return postalCode;
  }

  /**
   * Postal code (e.g., US zip code) this building is contained by.
   * @param postalCode postalCode or {@code null} for none
   */
  public BuildingInsights setPostalCode(java.lang.String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Region code for the country (or region) this building is in.
   * @return value or {@code null} for none
   */
  public java.lang.String getRegionCode() {
    return regionCode;
  }

  /**
   * Region code for the country (or region) this building is in.
   * @param regionCode regionCode or {@code null} for none
   */
  public BuildingInsights setRegionCode(java.lang.String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * Solar potential of the building.
   * @return value or {@code null} for none
   */
  public SolarPotential getSolarPotential() {
    return solarPotential;
  }

  /**
   * Solar potential of the building.
   * @param solarPotential solarPotential or {@code null} for none
   */
  public BuildingInsights setSolarPotential(SolarPotential solarPotential) {
    this.solarPotential = solarPotential;
    return this;
  }

  /**
   * Statistical area (e.g., US census tract) this building is in.
   * @return value or {@code null} for none
   */
  public java.lang.String getStatisticalArea() {
    return statisticalArea;
  }

  /**
   * Statistical area (e.g., US census tract) this building is in.
   * @param statisticalArea statisticalArea or {@code null} for none
   */
  public BuildingInsights setStatisticalArea(java.lang.String statisticalArea) {
    this.statisticalArea = statisticalArea;
    return this;
  }

  @Override
  public BuildingInsights set(String fieldName, Object value) {
    return (BuildingInsights) super.set(fieldName, value);
  }

  @Override
  public BuildingInsights clone() {
    return (BuildingInsights) super.clone();
  }

}
