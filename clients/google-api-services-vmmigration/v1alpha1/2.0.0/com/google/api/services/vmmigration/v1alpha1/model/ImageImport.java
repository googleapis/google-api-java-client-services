/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vmmigration.v1alpha1.model;

/**
 * ImageImport describes the configuration of the image import to run.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the VM Migration API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImageImport extends com.google.api.client.json.GenericJson {

  /**
   * Immutable. The path to the Cloud Storage file from which the image should be imported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cloudStorageUri;

  /**
   * Output only. The time the image import was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Immutable. Target details for importing a disk image, will be used by ImageImportJob.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DiskImageTargetDetails diskImageTargetDefaults;

  /**
   * Immutable. The encryption details used by the image import process during the image adaptation
   * for Compute Engine.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Encryption encryption;

  /**
   * Immutable. Target details for importing a machine image, will be used by ImageImportJob.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MachineImageTargetDetails machineImageTargetDefaults;

  /**
   * Output only. The resource path of the ImageImport.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The result of the most recent runs for this ImageImport. All jobs for this
   * ImageImport can be listed via ListImageImportJobs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ImageImportJob> recentImageImportJobs;

  /**
   * Immutable. The path to the Cloud Storage file from which the image should be imported.
   * @return value or {@code null} for none
   */
  public java.lang.String getCloudStorageUri() {
    return cloudStorageUri;
  }

  /**
   * Immutable. The path to the Cloud Storage file from which the image should be imported.
   * @param cloudStorageUri cloudStorageUri or {@code null} for none
   */
  public ImageImport setCloudStorageUri(java.lang.String cloudStorageUri) {
    this.cloudStorageUri = cloudStorageUri;
    return this;
  }

  /**
   * Output only. The time the image import was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time the image import was created.
   * @param createTime createTime or {@code null} for none
   */
  public ImageImport setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Immutable. Target details for importing a disk image, will be used by ImageImportJob.
   * @return value or {@code null} for none
   */
  public DiskImageTargetDetails getDiskImageTargetDefaults() {
    return diskImageTargetDefaults;
  }

  /**
   * Immutable. Target details for importing a disk image, will be used by ImageImportJob.
   * @param diskImageTargetDefaults diskImageTargetDefaults or {@code null} for none
   */
  public ImageImport setDiskImageTargetDefaults(DiskImageTargetDetails diskImageTargetDefaults) {
    this.diskImageTargetDefaults = diskImageTargetDefaults;
    return this;
  }

  /**
   * Immutable. The encryption details used by the image import process during the image adaptation
   * for Compute Engine.
   * @return value or {@code null} for none
   */
  public Encryption getEncryption() {
    return encryption;
  }

  /**
   * Immutable. The encryption details used by the image import process during the image adaptation
   * for Compute Engine.
   * @param encryption encryption or {@code null} for none
   */
  public ImageImport setEncryption(Encryption encryption) {
    this.encryption = encryption;
    return this;
  }

  /**
   * Immutable. Target details for importing a machine image, will be used by ImageImportJob.
   * @return value or {@code null} for none
   */
  public MachineImageTargetDetails getMachineImageTargetDefaults() {
    return machineImageTargetDefaults;
  }

  /**
   * Immutable. Target details for importing a machine image, will be used by ImageImportJob.
   * @param machineImageTargetDefaults machineImageTargetDefaults or {@code null} for none
   */
  public ImageImport setMachineImageTargetDefaults(MachineImageTargetDetails machineImageTargetDefaults) {
    this.machineImageTargetDefaults = machineImageTargetDefaults;
    return this;
  }

  /**
   * Output only. The resource path of the ImageImport.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The resource path of the ImageImport.
   * @param name name or {@code null} for none
   */
  public ImageImport setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The result of the most recent runs for this ImageImport. All jobs for this
   * ImageImport can be listed via ListImageImportJobs.
   * @return value or {@code null} for none
   */
  public java.util.List<ImageImportJob> getRecentImageImportJobs() {
    return recentImageImportJobs;
  }

  /**
   * Output only. The result of the most recent runs for this ImageImport. All jobs for this
   * ImageImport can be listed via ListImageImportJobs.
   * @param recentImageImportJobs recentImageImportJobs or {@code null} for none
   */
  public ImageImport setRecentImageImportJobs(java.util.List<ImageImportJob> recentImageImportJobs) {
    this.recentImageImportJobs = recentImageImportJobs;
    return this;
  }

  @Override
  public ImageImport set(String fieldName, Object value) {
    return (ImageImport) super.set(fieldName, value);
  }

  @Override
  public ImageImport clone() {
    return (ImageImport) super.clone();
  }

}
