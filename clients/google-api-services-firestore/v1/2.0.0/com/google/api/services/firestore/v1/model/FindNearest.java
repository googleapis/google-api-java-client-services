/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1.model;

/**
 * Nearest Neighbors search config.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Firestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FindNearest extends com.google.api.client.json.GenericJson {

  /**
   * Required. The Distance Measure to use, required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String distanceMeasure;

  /**
   * Required. The number of nearest neighbors to return. Must be a positive integer of no more than
   * 1000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer limit;

  /**
   * Required. The query vector that we are searching on. Must be a vector of no more than 2048
   * dimensions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Value queryVector;

  /**
   * Required. An indexed vector field to search upon. Only documents which contain vectors whose
   * dimensionality match the query_vector can be returned.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private FieldReference vectorField;

  /**
   * Required. The Distance Measure to use, required.
   * @return value or {@code null} for none
   */
  public java.lang.String getDistanceMeasure() {
    return distanceMeasure;
  }

  /**
   * Required. The Distance Measure to use, required.
   * @param distanceMeasure distanceMeasure or {@code null} for none
   */
  public FindNearest setDistanceMeasure(java.lang.String distanceMeasure) {
    this.distanceMeasure = distanceMeasure;
    return this;
  }

  /**
   * Required. The number of nearest neighbors to return. Must be a positive integer of no more than
   * 1000.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLimit() {
    return limit;
  }

  /**
   * Required. The number of nearest neighbors to return. Must be a positive integer of no more than
   * 1000.
   * @param limit limit or {@code null} for none
   */
  public FindNearest setLimit(java.lang.Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Required. The query vector that we are searching on. Must be a vector of no more than 2048
   * dimensions.
   * @return value or {@code null} for none
   */
  public Value getQueryVector() {
    return queryVector;
  }

  /**
   * Required. The query vector that we are searching on. Must be a vector of no more than 2048
   * dimensions.
   * @param queryVector queryVector or {@code null} for none
   */
  public FindNearest setQueryVector(Value queryVector) {
    this.queryVector = queryVector;
    return this;
  }

  /**
   * Required. An indexed vector field to search upon. Only documents which contain vectors whose
   * dimensionality match the query_vector can be returned.
   * @return value or {@code null} for none
   */
  public FieldReference getVectorField() {
    return vectorField;
  }

  /**
   * Required. An indexed vector field to search upon. Only documents which contain vectors whose
   * dimensionality match the query_vector can be returned.
   * @param vectorField vectorField or {@code null} for none
   */
  public FindNearest setVectorField(FieldReference vectorField) {
    this.vectorField = vectorField;
    return this;
  }

  @Override
  public FindNearest set(String fieldName, Object value) {
    return (FindNearest) super.set(fieldName, value);
  }

  @Override
  public FindNearest clone() {
    return (FindNearest) super.clone();
  }

}
