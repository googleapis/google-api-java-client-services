/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for BlogsearchConversationNode.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BlogsearchConversationNode extends com.google.api.client.json.GenericJson {

  /**
   * The username of the author of the microblog post represented by this node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String authorName;

  /**
   * A list of docids of child nodes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> children;

  /**
   * The creation date of the doc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long date;

  /**
   * Docid of the microblog post represented by this node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String docid;

  /**
   * The docid of the parent node. The root of the tree will leave this empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String parent;

  /**
   * The username of the author of the microblog post represented by this node.
   * @return value or {@code null} for none
   */
  public java.lang.String getAuthorName() {
    return authorName;
  }

  /**
   * The username of the author of the microblog post represented by this node.
   * @param authorName authorName or {@code null} for none
   */
  public BlogsearchConversationNode setAuthorName(java.lang.String authorName) {
    this.authorName = authorName;
    return this;
  }

  /**
   * A list of docids of child nodes.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getChildren() {
    return children;
  }

  /**
   * A list of docids of child nodes.
   * @param children children or {@code null} for none
   */
  public BlogsearchConversationNode setChildren(java.util.List<java.lang.String> children) {
    this.children = children;
    return this;
  }

  /**
   * The creation date of the doc.
   * @return value or {@code null} for none
   */
  public java.lang.Long getDate() {
    return date;
  }

  /**
   * The creation date of the doc.
   * @param date date or {@code null} for none
   */
  public BlogsearchConversationNode setDate(java.lang.Long date) {
    this.date = date;
    return this;
  }

  /**
   * Docid of the microblog post represented by this node.
   * @return value or {@code null} for none
   */
  public java.lang.String getDocid() {
    return docid;
  }

  /**
   * Docid of the microblog post represented by this node.
   * @param docid docid or {@code null} for none
   */
  public BlogsearchConversationNode setDocid(java.lang.String docid) {
    this.docid = docid;
    return this;
  }

  /**
   * The docid of the parent node. The root of the tree will leave this empty.
   * @return value or {@code null} for none
   */
  public java.lang.String getParent() {
    return parent;
  }

  /**
   * The docid of the parent node. The root of the tree will leave this empty.
   * @param parent parent or {@code null} for none
   */
  public BlogsearchConversationNode setParent(java.lang.String parent) {
    this.parent = parent;
    return this;
  }

  @Override
  public BlogsearchConversationNode set(String fieldName, Object value) {
    return (BlogsearchConversationNode) super.set(fieldName, value);
  }

  @Override
  public BlogsearchConversationNode clone() {
    return (BlogsearchConversationNode) super.clone();
  }

}
