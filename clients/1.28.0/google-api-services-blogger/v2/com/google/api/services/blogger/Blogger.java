/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.blogger;

/**
 * Service definition for Blogger (v2).
 *
 * <p>
 * API for access to the data within Blogger.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/blogger/docs/2.0/json/getting_started" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link BloggerRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Blogger extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Blogger API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "blogger/v2/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch/blogger/v2";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Blogger(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Blogger(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Blogs collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Blogger blogger = new Blogger(...);}
   *   {@code Blogger.Blogs.List request = blogger.blogs().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Blogs blogs() {
    return new Blogs();
  }

  /**
   * The "blogs" collection of methods.
   */
  public class Blogs {

    /**
     * Gets one blog by id.
     *
     * Create a request for the method "blogs.get".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param blogId The ID of the blog to get.
     * @return the request
     */
    public Get get(java.lang.String blogId) throws java.io.IOException {
      Get result = new Get(blogId);
      initialize(result);
      return result;
    }

    public class Get extends BloggerRequest<com.google.api.services.blogger.model.Blog> {

      private static final String REST_PATH = "blogs/{blogId}";

      /**
       * Gets one blog by id.
       *
       * Create a request for the method "blogs.get".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId The ID of the blog to get.
       * @since 1.13
       */
      protected Get(java.lang.String blogId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.Blog.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The ID of the blog to get. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** The ID of the blog to get.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** The ID of the blog to get. */
      public Get setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Comments collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Blogger blogger = new Blogger(...);}
   *   {@code Blogger.Comments.List request = blogger.comments().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Comments comments() {
    return new Comments();
  }

  /**
   * The "comments" collection of methods.
   */
  public class Comments {

    /**
     * Gets one comment by id.
     *
     * Create a request for the method "comments.get".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to containing the comment.
     * @param postId ID of the post to fetch posts from.
     * @param commentId The ID of the comment to get.
     * @return the request
     */
    public Get get(java.lang.String blogId, java.lang.String postId, java.lang.String commentId) throws java.io.IOException {
      Get result = new Get(blogId, postId, commentId);
      initialize(result);
      return result;
    }

    public class Get extends BloggerRequest<com.google.api.services.blogger.model.Comment> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}/comments/{commentId}";

      /**
       * Gets one comment by id.
       *
       * Create a request for the method "comments.get".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to containing the comment.
       * @param postId ID of the post to fetch posts from.
       * @param commentId The ID of the comment to get.
       * @since 1.13
       */
      protected Get(java.lang.String blogId, java.lang.String postId, java.lang.String commentId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.Comment.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
        this.commentId = com.google.api.client.util.Preconditions.checkNotNull(commentId, "Required parameter commentId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** ID of the blog to containing the comment. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to containing the comment.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to containing the comment. */
      public Get setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** ID of the post to fetch posts from. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** ID of the post to fetch posts from.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** ID of the post to fetch posts from. */
      public Get setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      /** The ID of the comment to get. */
      @com.google.api.client.util.Key
      private java.lang.String commentId;

      /** The ID of the comment to get.
       */
      public java.lang.String getCommentId() {
        return commentId;
      }

      /** The ID of the comment to get. */
      public Get setCommentId(java.lang.String commentId) {
        this.commentId = commentId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the comments for a blog, possibly filtered.
     *
     * Create a request for the method "comments.list".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to fetch comments from.
     * @param postId ID of the post to fetch posts from.
     * @return the request
     */
    public List list(java.lang.String blogId, java.lang.String postId) throws java.io.IOException {
      List result = new List(blogId, postId);
      initialize(result);
      return result;
    }

    public class List extends BloggerRequest<com.google.api.services.blogger.model.CommentList> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}/comments";

      /**
       * Retrieves the comments for a blog, possibly filtered.
       *
       * Create a request for the method "comments.list".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to fetch comments from.
       * @param postId ID of the post to fetch posts from.
       * @since 1.13
       */
      protected List(java.lang.String blogId, java.lang.String postId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.CommentList.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** ID of the blog to fetch comments from. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to fetch comments from.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to fetch comments from. */
      public List setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** ID of the post to fetch posts from. */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** ID of the post to fetch posts from.
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** ID of the post to fetch posts from. */
      public List setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      /** Whether the body content of the comments is included. */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchBodies;

      /** Whether the body content of the comments is included.
       */
      public java.lang.Boolean getFetchBodies() {
        return fetchBodies;
      }

      /** Whether the body content of the comments is included. */
      public List setFetchBodies(java.lang.Boolean fetchBodies) {
        this.fetchBodies = fetchBodies;
        return this;
      }

      /** Maximum number of comments to include in the result. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of comments to include in the result.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of comments to include in the result. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Continuation token if request is paged. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Continuation token if request is paged.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Continuation token if request is paged. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /** Earliest date of comment to fetch, a date-time with RFC 3339 formatting. */
      @com.google.api.client.util.Key
      private com.google.api.client.util.DateTime startDate;

      /** Earliest date of comment to fetch, a date-time with RFC 3339 formatting.
       */
      public com.google.api.client.util.DateTime getStartDate() {
        return startDate;
      }

      /** Earliest date of comment to fetch, a date-time with RFC 3339 formatting. */
      public List setStartDate(com.google.api.client.util.DateTime startDate) {
        this.startDate = startDate;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Pages collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Blogger blogger = new Blogger(...);}
   *   {@code Blogger.Pages.List request = blogger.pages().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Pages pages() {
    return new Pages();
  }

  /**
   * The "pages" collection of methods.
   */
  public class Pages {

    /**
     * Gets one blog page by id.
     *
     * Create a request for the method "pages.get".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog containing the page.
     * @param pageId The ID of the page to get.
     * @return the request
     */
    public Get get(java.lang.String blogId, java.lang.String pageId) throws java.io.IOException {
      Get result = new Get(blogId, pageId);
      initialize(result);
      return result;
    }

    public class Get extends BloggerRequest<com.google.api.services.blogger.model.Page> {

      private static final String REST_PATH = "blogs/{blogId}/pages/{pageId}";

      /**
       * Gets one blog page by id.
       *
       * Create a request for the method "pages.get".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog containing the page.
       * @param pageId The ID of the page to get.
       * @since 1.13
       */
      protected Get(java.lang.String blogId, java.lang.String pageId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.Page.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.pageId = com.google.api.client.util.Preconditions.checkNotNull(pageId, "Required parameter pageId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** ID of the blog containing the page. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog containing the page.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog containing the page. */
      public Get setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the page to get. */
      @com.google.api.client.util.Key
      private java.lang.String pageId;

      /** The ID of the page to get.
       */
      public java.lang.String getPageId() {
        return pageId;
      }

      /** The ID of the page to get. */
      public Get setPageId(java.lang.String pageId) {
        this.pageId = pageId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves pages for a blog, possibly filtered.
     *
     * Create a request for the method "pages.list".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to fetch pages from.
     * @return the request
     */
    public List list(java.lang.String blogId) throws java.io.IOException {
      List result = new List(blogId);
      initialize(result);
      return result;
    }

    public class List extends BloggerRequest<com.google.api.services.blogger.model.PageList> {

      private static final String REST_PATH = "blogs/{blogId}/pages";

      /**
       * Retrieves pages for a blog, possibly filtered.
       *
       * Create a request for the method "pages.list".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to fetch pages from.
       * @since 1.13
       */
      protected List(java.lang.String blogId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.PageList.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** ID of the blog to fetch pages from. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to fetch pages from.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to fetch pages from. */
      public List setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** Whether to retrieve the Page bodies. */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchBodies;

      /** Whether to retrieve the Page bodies.
       */
      public java.lang.Boolean getFetchBodies() {
        return fetchBodies;
      }

      /** Whether to retrieve the Page bodies. */
      public List setFetchBodies(java.lang.Boolean fetchBodies) {
        this.fetchBodies = fetchBodies;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Posts collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Blogger blogger = new Blogger(...);}
   *   {@code Blogger.Posts.List request = blogger.posts().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Posts posts() {
    return new Posts();
  }

  /**
   * The "posts" collection of methods.
   */
  public class Posts {

    /**
     * Get a post by id.
     *
     * Create a request for the method "posts.get".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to fetch the post from.
     * @param postId The ID of the post
     * @return the request
     */
    public Get get(java.lang.String blogId, java.lang.String postId) throws java.io.IOException {
      Get result = new Get(blogId, postId);
      initialize(result);
      return result;
    }

    public class Get extends BloggerRequest<com.google.api.services.blogger.model.Post> {

      private static final String REST_PATH = "blogs/{blogId}/posts/{postId}";

      /**
       * Get a post by id.
       *
       * Create a request for the method "posts.get".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to fetch the post from.
       * @param postId The ID of the post
       * @since 1.13
       */
      protected Get(java.lang.String blogId, java.lang.String postId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.Post.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** ID of the blog to fetch the post from. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to fetch the post from.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to fetch the post from. */
      public Get setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** The ID of the post */
      @com.google.api.client.util.Key
      private java.lang.String postId;

      /** The ID of the post
       */
      public java.lang.String getPostId() {
        return postId;
      }

      /** The ID of the post */
      public Get setPostId(java.lang.String postId) {
        this.postId = postId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of posts, possibly filtered.
     *
     * Create a request for the method "posts.list".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param blogId ID of the blog to fetch posts from.
     * @return the request
     */
    public List list(java.lang.String blogId) throws java.io.IOException {
      List result = new List(blogId);
      initialize(result);
      return result;
    }

    public class List extends BloggerRequest<com.google.api.services.blogger.model.PostList> {

      private static final String REST_PATH = "blogs/{blogId}/posts";

      /**
       * Retrieves a list of posts, possibly filtered.
       *
       * Create a request for the method "posts.list".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param blogId ID of the blog to fetch posts from.
       * @since 1.13
       */
      protected List(java.lang.String blogId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.PostList.class);
        this.blogId = com.google.api.client.util.Preconditions.checkNotNull(blogId, "Required parameter blogId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** ID of the blog to fetch posts from. */
      @com.google.api.client.util.Key
      private java.lang.String blogId;

      /** ID of the blog to fetch posts from.
       */
      public java.lang.String getBlogId() {
        return blogId;
      }

      /** ID of the blog to fetch posts from. */
      public List setBlogId(java.lang.String blogId) {
        this.blogId = blogId;
        return this;
      }

      /** Whether the body content of posts is included. */
      @com.google.api.client.util.Key
      private java.lang.Boolean fetchBodies;

      /** Whether the body content of posts is included.
       */
      public java.lang.Boolean getFetchBodies() {
        return fetchBodies;
      }

      /** Whether the body content of posts is included. */
      public List setFetchBodies(java.lang.Boolean fetchBodies) {
        this.fetchBodies = fetchBodies;
        return this;
      }

      /** Maximum number of posts to fetch. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of posts to fetch.
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of posts to fetch. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Continuation token if the request is paged. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Continuation token if the request is paged.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Continuation token if the request is paged. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /** Earliest post date to fetch, a date-time with RFC 3339 formatting. */
      @com.google.api.client.util.Key
      private com.google.api.client.util.DateTime startDate;

      /** Earliest post date to fetch, a date-time with RFC 3339 formatting.
       */
      public com.google.api.client.util.DateTime getStartDate() {
        return startDate;
      }

      /** Earliest post date to fetch, a date-time with RFC 3339 formatting. */
      public List setStartDate(com.google.api.client.util.DateTime startDate) {
        this.startDate = startDate;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Users collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Blogger blogger = new Blogger(...);}
   *   {@code Blogger.Users.List request = blogger.users().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Users users() {
    return new Users();
  }

  /**
   * The "users" collection of methods.
   */
  public class Users {

    /**
     * Gets one user by id.
     *
     * Create a request for the method "users.get".
     *
     * This request holds the parameters needed by the blogger server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param userId The ID of the user to get.
     * @return the request
     */
    public Get get(java.lang.String userId) throws java.io.IOException {
      Get result = new Get(userId);
      initialize(result);
      return result;
    }

    public class Get extends BloggerRequest<com.google.api.services.blogger.model.User> {

      private static final String REST_PATH = "users/{userId}";

      /**
       * Gets one user by id.
       *
       * Create a request for the method "users.get".
       *
       * This request holds the parameters needed by the the blogger server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId The ID of the user to get.
       * @since 1.13
       */
      protected Get(java.lang.String userId) {
        super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.User.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The ID of the user to get. */
      @com.google.api.client.util.Key
      private java.lang.String userId;

      /** The ID of the user to get.
       */
      public java.lang.String getUserId() {
        return userId;
      }

      /** The ID of the user to get. */
      public Get setUserId(java.lang.String userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Blogs collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Blogger blogger = new Blogger(...);}
     *   {@code Blogger.Blogs.List request = blogger.blogs().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Blogs blogs() {
      return new Blogs();
    }

    /**
     * The "blogs" collection of methods.
     */
    public class Blogs {

      /**
       * Retrieves a list of blogs, possibly filtered.
       *
       * Create a request for the method "blogs.list".
       *
       * This request holds the parameters needed by the blogger server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param userId ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or the
       *        user's profile identifier.
       * @return the request
       */
      public List list(java.lang.String userId) throws java.io.IOException {
        List result = new List(userId);
        initialize(result);
        return result;
      }

      public class List extends BloggerRequest<com.google.api.services.blogger.model.BlogList> {

        private static final String REST_PATH = "users/{userId}/blogs";

        /**
         * Retrieves a list of blogs, possibly filtered.
         *
         * Create a request for the method "blogs.list".
         *
         * This request holds the parameters needed by the the blogger server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or the
       *        user's profile identifier.
         * @since 1.13
         */
        protected List(java.lang.String userId) {
          super(Blogger.this, "GET", REST_PATH, null, com.google.api.services.blogger.model.BlogList.class);
          this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        /**
         * ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks)
         * or the user's profile identifier.
         */
        @com.google.api.client.util.Key
        private java.lang.String userId;

        /** ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks) or the
       user's profile identifier.
         */
        public java.lang.String getUserId() {
          return userId;
        }

        /**
         * ID of the user whose blogs are to be fetched. Either the word 'self' (sans quote marks)
         * or the user's profile identifier.
         */
        public List setUserId(java.lang.String userId) {
          this.userId = userId;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link Blogger}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Blogger}. */
    @Override
    public Blogger build() {
      return new Blogger(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link BloggerRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setBloggerRequestInitializer(
        BloggerRequestInitializer bloggerRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(bloggerRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
