/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The proto that holds the complete call path info of the QUS client (e.g. the candidate type like
 * "Identity", "FuzzyMatcher"; The intent generator like "QUS_IG" in ACE).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpLoggingQusClientCallPathInfo extends com.google.api.client.json.GenericJson {

  /**
   * rewriter_type forms part of a unique key to be used to label QUS Requests from ACE. The need to
   * distinguish between the variety of calls from AS into QUS is for two reasons: (a) currently,
   * assistant eval can do NLU Eval only on certain rewrites (b) later AS Hermetic and NLU Eval can
   * be integrated In the furure, the unique key will be expanded to add intent_generator_type or
   * something similar. There are ongoing discussions to confirm these plans
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rewriterType;

  /**
   * The timestamp when QUS request is built in ACE. For now we don't care about the actual meaning
   * of this tag, and only want to guarantee its uniqueness per QUS call.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long temporaryAceTag;

  /**
   * rewriter_type forms part of a unique key to be used to label QUS Requests from ACE. The need to
   * distinguish between the variety of calls from AS into QUS is for two reasons: (a) currently,
   * assistant eval can do NLU Eval only on certain rewrites (b) later AS Hermetic and NLU Eval can
   * be integrated In the furure, the unique key will be expanded to add intent_generator_type or
   * something similar. There are ongoing discussions to confirm these plans
   * @return value or {@code null} for none
   */
  public java.lang.String getRewriterType() {
    return rewriterType;
  }

  /**
   * rewriter_type forms part of a unique key to be used to label QUS Requests from ACE. The need to
   * distinguish between the variety of calls from AS into QUS is for two reasons: (a) currently,
   * assistant eval can do NLU Eval only on certain rewrites (b) later AS Hermetic and NLU Eval can
   * be integrated In the furure, the unique key will be expanded to add intent_generator_type or
   * something similar. There are ongoing discussions to confirm these plans
   * @param rewriterType rewriterType or {@code null} for none
   */
  public NlpLoggingQusClientCallPathInfo setRewriterType(java.lang.String rewriterType) {
    this.rewriterType = rewriterType;
    return this;
  }

  /**
   * The timestamp when QUS request is built in ACE. For now we don't care about the actual meaning
   * of this tag, and only want to guarantee its uniqueness per QUS call.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTemporaryAceTag() {
    return temporaryAceTag;
  }

  /**
   * The timestamp when QUS request is built in ACE. For now we don't care about the actual meaning
   * of this tag, and only want to guarantee its uniqueness per QUS call.
   * @param temporaryAceTag temporaryAceTag or {@code null} for none
   */
  public NlpLoggingQusClientCallPathInfo setTemporaryAceTag(java.lang.Long temporaryAceTag) {
    this.temporaryAceTag = temporaryAceTag;
    return this;
  }

  @Override
  public NlpLoggingQusClientCallPathInfo set(String fieldName, Object value) {
    return (NlpLoggingQusClientCallPathInfo) super.set(fieldName, value);
  }

  @Override
  public NlpLoggingQusClientCallPathInfo clone() {
    return (NlpLoggingQusClientCallPathInfo) super.clone();
  }

}
