/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.discoveryengine.v1beta.model;

/**
 * The column family of the Bigtable.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Discovery Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumnFamily extends com.google.api.client.json.GenericJson {

  /**
   * The list of objects that contains column level information for each column. If a column is not
   * present in this list it will be ignored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumn> columns;

  static {
    // hack to force ProGuard to consider GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumn used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumn.class);
  }

  /**
   * The encoding mode of the values when the type is not STRING. Acceptable encoding values are: *
   * `TEXT`: indicates values are alphanumeric text strings. * `BINARY`: indicates values are
   * encoded using `HBase Bytes.toBytes` family of functions. This can be overridden for a specific
   * column by listing that column in `columns` and specifying an encoding for it.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String encoding;

  /**
   * The field name to use for this column family in the document. The name has to match the pattern
   * `a-zA-Z0-9*`. If not set, it is parsed from the family name with best effort. However, due to
   * different naming patterns, field name collisions could happen, where parsing behavior is
   * undefined.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fieldName;

  /**
   * The type of values in this column family. The values are expected to be encoded using `HBase
   * Bytes.toBytes` function when the encoding value is set to `BINARY`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The list of objects that contains column level information for each column. If a column is not
   * present in this list it will be ignored.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumn> getColumns() {
    return columns;
  }

  /**
   * The list of objects that contains column level information for each column. If a column is not
   * present in this list it will be ignored.
   * @param columns columns or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumnFamily setColumns(java.util.List<GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumn> columns) {
    this.columns = columns;
    return this;
  }

  /**
   * The encoding mode of the values when the type is not STRING. Acceptable encoding values are: *
   * `TEXT`: indicates values are alphanumeric text strings. * `BINARY`: indicates values are
   * encoded using `HBase Bytes.toBytes` family of functions. This can be overridden for a specific
   * column by listing that column in `columns` and specifying an encoding for it.
   * @return value or {@code null} for none
   */
  public java.lang.String getEncoding() {
    return encoding;
  }

  /**
   * The encoding mode of the values when the type is not STRING. Acceptable encoding values are: *
   * `TEXT`: indicates values are alphanumeric text strings. * `BINARY`: indicates values are
   * encoded using `HBase Bytes.toBytes` family of functions. This can be overridden for a specific
   * column by listing that column in `columns` and specifying an encoding for it.
   * @param encoding encoding or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumnFamily setEncoding(java.lang.String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * The field name to use for this column family in the document. The name has to match the pattern
   * `a-zA-Z0-9*`. If not set, it is parsed from the family name with best effort. However, due to
   * different naming patterns, field name collisions could happen, where parsing behavior is
   * undefined.
   * @return value or {@code null} for none
   */
  public java.lang.String getFieldName() {
    return fieldName;
  }

  /**
   * The field name to use for this column family in the document. The name has to match the pattern
   * `a-zA-Z0-9*`. If not set, it is parsed from the family name with best effort. However, due to
   * different naming patterns, field name collisions could happen, where parsing behavior is
   * undefined.
   * @param fieldName fieldName or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumnFamily setFieldName(java.lang.String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * The type of values in this column family. The values are expected to be encoded using `HBase
   * Bytes.toBytes` function when the encoding value is set to `BINARY`.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The type of values in this column family. The values are expected to be encoded using `HBase
   * Bytes.toBytes` function when the encoding value is set to `BINARY`.
   * @param type type or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumnFamily setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumnFamily set(String fieldName, Object value) {
    return (GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumnFamily) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumnFamily clone() {
    return (GoogleCloudDiscoveryengineV1betaBigtableOptionsBigtableColumnFamily) super.clone();
  }

}
