/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataproc.model;

/**
 * Defines how Dataproc should create VMs with a mixture of provisioning models.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Dataproc API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ProvisioningModelMix extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The base capacity that will always use Standard VMs to avoid risk of more preemption
   * than the minimum capacity you need. Dataproc will create only standard VMs until it reaches
   * standard_capacity_base, then it will start using standard_capacity_percent_above_base to mix
   * Spot with Standard VMs. eg. If 15 instances are requested and standard_capacity_base is 5,
   * Dataproc will create 5 standard VMs and then start mixing spot and standard VMs for remaining
   * 10 instances.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer standardCapacityBase;

  /**
   * Optional. The percentage of target capacity that should use Standard VM. The remaining
   * percentage will use Spot VMs. The percentage applies only to the capacity above
   * standard_capacity_base. eg. If 15 instances are requested and standard_capacity_base is 5 and
   * standard_capacity_percent_above_base is 30, Dataproc will create 5 standard VMs and then start
   * mixing spot and standard VMs for remaining 10 instances. The mix will be 30% standard and 70%
   * spot.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer standardCapacityPercentAboveBase;

  /**
   * Optional. The base capacity that will always use Standard VMs to avoid risk of more preemption
   * than the minimum capacity you need. Dataproc will create only standard VMs until it reaches
   * standard_capacity_base, then it will start using standard_capacity_percent_above_base to mix
   * Spot with Standard VMs. eg. If 15 instances are requested and standard_capacity_base is 5,
   * Dataproc will create 5 standard VMs and then start mixing spot and standard VMs for remaining
   * 10 instances.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getStandardCapacityBase() {
    return standardCapacityBase;
  }

  /**
   * Optional. The base capacity that will always use Standard VMs to avoid risk of more preemption
   * than the minimum capacity you need. Dataproc will create only standard VMs until it reaches
   * standard_capacity_base, then it will start using standard_capacity_percent_above_base to mix
   * Spot with Standard VMs. eg. If 15 instances are requested and standard_capacity_base is 5,
   * Dataproc will create 5 standard VMs and then start mixing spot and standard VMs for remaining
   * 10 instances.
   * @param standardCapacityBase standardCapacityBase or {@code null} for none
   */
  public ProvisioningModelMix setStandardCapacityBase(java.lang.Integer standardCapacityBase) {
    this.standardCapacityBase = standardCapacityBase;
    return this;
  }

  /**
   * Optional. The percentage of target capacity that should use Standard VM. The remaining
   * percentage will use Spot VMs. The percentage applies only to the capacity above
   * standard_capacity_base. eg. If 15 instances are requested and standard_capacity_base is 5 and
   * standard_capacity_percent_above_base is 30, Dataproc will create 5 standard VMs and then start
   * mixing spot and standard VMs for remaining 10 instances. The mix will be 30% standard and 70%
   * spot.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getStandardCapacityPercentAboveBase() {
    return standardCapacityPercentAboveBase;
  }

  /**
   * Optional. The percentage of target capacity that should use Standard VM. The remaining
   * percentage will use Spot VMs. The percentage applies only to the capacity above
   * standard_capacity_base. eg. If 15 instances are requested and standard_capacity_base is 5 and
   * standard_capacity_percent_above_base is 30, Dataproc will create 5 standard VMs and then start
   * mixing spot and standard VMs for remaining 10 instances. The mix will be 30% standard and 70%
   * spot.
   * @param standardCapacityPercentAboveBase standardCapacityPercentAboveBase or {@code null} for none
   */
  public ProvisioningModelMix setStandardCapacityPercentAboveBase(java.lang.Integer standardCapacityPercentAboveBase) {
    this.standardCapacityPercentAboveBase = standardCapacityPercentAboveBase;
    return this;
  }

  @Override
  public ProvisioningModelMix set(String fieldName, Object value) {
    return (ProvisioningModelMix) super.set(fieldName, value);
  }

  @Override
  public ProvisioningModelMix clone() {
    return (ProvisioningModelMix) super.clone();
  }

}
