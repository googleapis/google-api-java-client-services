/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Represents text (with an associated language) that is affixed to the beginning and/or end of a
 * primary text.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreTextAffixProto extends com.google.api.client.json.GenericJson {

  /**
   * The external form of a Google International Identifiers Initiative (III) LanguageCode object.
   * See google3/i18n/identifiers/languagecode.h for details. These strings should be treated as
   * opaque blobs. You can use LanguageCodeConverter::FromOther to convert the string to a
   * LanguageCode reference. You can then call methods on the LanguageCode class to extract
   * language/script/region subtags (if any). See also http://g3doc/i18n/identifiers/g3doc/using-
   * iii. We place extra restrictions on languages in addition to what the III library requires. See
   * http://go/geo-schema-reference/feature-properties/languages.md
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String language;

  /**
   * Text to prepend to the primary text, including any necessary trailing whitespace. At least one
   * of prefix or suffix is required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String prefix;

  /**
   * Text to append to the end of the primary text, including any necessary leading whitespace. At
   * least one of prefix or suffix is required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String suffix;

  /**
   * The external form of a Google International Identifiers Initiative (III) LanguageCode object.
   * See google3/i18n/identifiers/languagecode.h for details. These strings should be treated as
   * opaque blobs. You can use LanguageCodeConverter::FromOther to convert the string to a
   * LanguageCode reference. You can then call methods on the LanguageCode class to extract
   * language/script/region subtags (if any). See also http://g3doc/i18n/identifiers/g3doc/using-
   * iii. We place extra restrictions on languages in addition to what the III library requires. See
   * http://go/geo-schema-reference/feature-properties/languages.md
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguage() {
    return language;
  }

  /**
   * The external form of a Google International Identifiers Initiative (III) LanguageCode object.
   * See google3/i18n/identifiers/languagecode.h for details. These strings should be treated as
   * opaque blobs. You can use LanguageCodeConverter::FromOther to convert the string to a
   * LanguageCode reference. You can then call methods on the LanguageCode class to extract
   * language/script/region subtags (if any). See also http://g3doc/i18n/identifiers/g3doc/using-
   * iii. We place extra restrictions on languages in addition to what the III library requires. See
   * http://go/geo-schema-reference/feature-properties/languages.md
   * @param language language or {@code null} for none
   */
  public GeostoreTextAffixProto setLanguage(java.lang.String language) {
    this.language = language;
    return this;
  }

  /**
   * Text to prepend to the primary text, including any necessary trailing whitespace. At least one
   * of prefix or suffix is required.
   * @return value or {@code null} for none
   */
  public java.lang.String getPrefix() {
    return prefix;
  }

  /**
   * Text to prepend to the primary text, including any necessary trailing whitespace. At least one
   * of prefix or suffix is required.
   * @param prefix prefix or {@code null} for none
   */
  public GeostoreTextAffixProto setPrefix(java.lang.String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Text to append to the end of the primary text, including any necessary leading whitespace. At
   * least one of prefix or suffix is required.
   * @return value or {@code null} for none
   */
  public java.lang.String getSuffix() {
    return suffix;
  }

  /**
   * Text to append to the end of the primary text, including any necessary leading whitespace. At
   * least one of prefix or suffix is required.
   * @param suffix suffix or {@code null} for none
   */
  public GeostoreTextAffixProto setSuffix(java.lang.String suffix) {
    this.suffix = suffix;
    return this;
  }

  @Override
  public GeostoreTextAffixProto set(String fieldName, Object value) {
    return (GeostoreTextAffixProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreTextAffixProto clone() {
    return (GeostoreTextAffixProto) super.clone();
  }

}
