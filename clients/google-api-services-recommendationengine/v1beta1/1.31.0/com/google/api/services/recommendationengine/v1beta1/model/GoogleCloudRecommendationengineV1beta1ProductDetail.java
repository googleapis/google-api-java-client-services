/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.recommendationengine.v1beta1.model;

/**
 * Detailed product information associated with a user event.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Recommendations AI. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudRecommendationengineV1beta1ProductDetail extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Quantity of the products in stock when a user event happens. Optional. If provided,
   * this overrides the available quantity in Catalog for this event. and can only be set if
   * `stock_status` is set to `IN_STOCK`. Note that if an item is out of stock, you must set the
   * `stock_state` field to be `OUT_OF_STOCK`. Leaving this field unspecified / as zero is not
   * sufficient to mark the item out of stock.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer availableQuantity;

  /**
   * Optional. Currency code for price/costs. Use three-character ISO-4217 code. Required only if
   * originalPrice or displayPrice is set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String currencyCode;

  /**
   * Optional. Display price of the product (e.g. discounted price). If provided, this will override
   * the display price in Catalog for this product.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float displayPrice;

  /**
   * Required. Catalog item ID. UTF-8 encoded string with a length limit of 128 characters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * Optional. Extra features associated with a product in the user event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudRecommendationengineV1beta1FeatureMap itemAttributes;

  /**
   * Optional. Original price of the product. If provided, this will override the original price in
   * Catalog for this product.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float originalPrice;

  /**
   * Optional. Quantity of the product associated with the user event. For example, this field will
   * be 2 if two products are added to the shopping cart for `add-to-cart` event. Required for `add-
   * to-cart`, `add-to-list`, `remove-from-cart`, `checkout-start`, `purchase-complete`, `refund`
   * event types.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer quantity;

  /**
   * Optional. Item stock state. If provided, this overrides the stock state in Catalog for items in
   * this event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stockState;

  /**
   * Optional. Quantity of the products in stock when a user event happens. Optional. If provided,
   * this overrides the available quantity in Catalog for this event. and can only be set if
   * `stock_status` is set to `IN_STOCK`. Note that if an item is out of stock, you must set the
   * `stock_state` field to be `OUT_OF_STOCK`. Leaving this field unspecified / as zero is not
   * sufficient to mark the item out of stock.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAvailableQuantity() {
    return availableQuantity;
  }

  /**
   * Optional. Quantity of the products in stock when a user event happens. Optional. If provided,
   * this overrides the available quantity in Catalog for this event. and can only be set if
   * `stock_status` is set to `IN_STOCK`. Note that if an item is out of stock, you must set the
   * `stock_state` field to be `OUT_OF_STOCK`. Leaving this field unspecified / as zero is not
   * sufficient to mark the item out of stock.
   * @param availableQuantity availableQuantity or {@code null} for none
   */
  public GoogleCloudRecommendationengineV1beta1ProductDetail setAvailableQuantity(java.lang.Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
    return this;
  }

  /**
   * Optional. Currency code for price/costs. Use three-character ISO-4217 code. Required only if
   * originalPrice or displayPrice is set.
   * @return value or {@code null} for none
   */
  public java.lang.String getCurrencyCode() {
    return currencyCode;
  }

  /**
   * Optional. Currency code for price/costs. Use three-character ISO-4217 code. Required only if
   * originalPrice or displayPrice is set.
   * @param currencyCode currencyCode or {@code null} for none
   */
  public GoogleCloudRecommendationengineV1beta1ProductDetail setCurrencyCode(java.lang.String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Optional. Display price of the product (e.g. discounted price). If provided, this will override
   * the display price in Catalog for this product.
   * @return value or {@code null} for none
   */
  public java.lang.Float getDisplayPrice() {
    return displayPrice;
  }

  /**
   * Optional. Display price of the product (e.g. discounted price). If provided, this will override
   * the display price in Catalog for this product.
   * @param displayPrice displayPrice or {@code null} for none
   */
  public GoogleCloudRecommendationengineV1beta1ProductDetail setDisplayPrice(java.lang.Float displayPrice) {
    this.displayPrice = displayPrice;
    return this;
  }

  /**
   * Required. Catalog item ID. UTF-8 encoded string with a length limit of 128 characters.
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Required. Catalog item ID. UTF-8 encoded string with a length limit of 128 characters.
   * @param id id or {@code null} for none
   */
  public GoogleCloudRecommendationengineV1beta1ProductDetail setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * Optional. Extra features associated with a product in the user event.
   * @return value or {@code null} for none
   */
  public GoogleCloudRecommendationengineV1beta1FeatureMap getItemAttributes() {
    return itemAttributes;
  }

  /**
   * Optional. Extra features associated with a product in the user event.
   * @param itemAttributes itemAttributes or {@code null} for none
   */
  public GoogleCloudRecommendationengineV1beta1ProductDetail setItemAttributes(GoogleCloudRecommendationengineV1beta1FeatureMap itemAttributes) {
    this.itemAttributes = itemAttributes;
    return this;
  }

  /**
   * Optional. Original price of the product. If provided, this will override the original price in
   * Catalog for this product.
   * @return value or {@code null} for none
   */
  public java.lang.Float getOriginalPrice() {
    return originalPrice;
  }

  /**
   * Optional. Original price of the product. If provided, this will override the original price in
   * Catalog for this product.
   * @param originalPrice originalPrice or {@code null} for none
   */
  public GoogleCloudRecommendationengineV1beta1ProductDetail setOriginalPrice(java.lang.Float originalPrice) {
    this.originalPrice = originalPrice;
    return this;
  }

  /**
   * Optional. Quantity of the product associated with the user event. For example, this field will
   * be 2 if two products are added to the shopping cart for `add-to-cart` event. Required for `add-
   * to-cart`, `add-to-list`, `remove-from-cart`, `checkout-start`, `purchase-complete`, `refund`
   * event types.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getQuantity() {
    return quantity;
  }

  /**
   * Optional. Quantity of the product associated with the user event. For example, this field will
   * be 2 if two products are added to the shopping cart for `add-to-cart` event. Required for `add-
   * to-cart`, `add-to-list`, `remove-from-cart`, `checkout-start`, `purchase-complete`, `refund`
   * event types.
   * @param quantity quantity or {@code null} for none
   */
  public GoogleCloudRecommendationengineV1beta1ProductDetail setQuantity(java.lang.Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Optional. Item stock state. If provided, this overrides the stock state in Catalog for items in
   * this event.
   * @return value or {@code null} for none
   */
  public java.lang.String getStockState() {
    return stockState;
  }

  /**
   * Optional. Item stock state. If provided, this overrides the stock state in Catalog for items in
   * this event.
   * @param stockState stockState or {@code null} for none
   */
  public GoogleCloudRecommendationengineV1beta1ProductDetail setStockState(java.lang.String stockState) {
    this.stockState = stockState;
    return this;
  }

  @Override
  public GoogleCloudRecommendationengineV1beta1ProductDetail set(String fieldName, Object value) {
    return (GoogleCloudRecommendationengineV1beta1ProductDetail) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudRecommendationengineV1beta1ProductDetail clone() {
    return (GoogleCloudRecommendationengineV1beta1ProductDetail) super.clone();
  }

}
