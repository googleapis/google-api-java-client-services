/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A TYPE_INTERSECTION feature represents a common endpoint of one or more segments in a
 * transportation network at which the segments are connected. An intersection in the real world may
 * be more complicated than that (e.g., comprise multiple segment endpoints or have extra
 * attributes), which can be modeled with an additional TYPE_INTERSECTION_GROUP feature, if needed
 * (see intersectiongroup.proto). The standard feature properties are interpreted as follows: name -
 * This should always be empty. Intersections that have a "special" name (e.g. Reads Corner
 * intersection, PEI, Canada) should point to a separate TYPE_INTERSECTION_GROUP feature that
 * captures it. Intersections which are named according to their cross streets do not need this
 * requirement, since their name can be determined by looking at the routes associated with each
 * segment. address - This should always be empty. point - Specifies the center of the intersection.
 * This should be the last vertex of all the segments which terminate at this intersection. polyline
 * - This should always be empty. polygon - This should always be empty. child - This should always
 * be empty.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreIntersectionProto extends com.google.api.client.json.GenericJson {

  /**
   * The artifact or logical intersection group to which this intersection belongs. If present, the
   * intersection group must also refer back to the intersection. If an intersection is within both
   * the artifact and logical group, then this reference should be to the artifact group.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto intersectionGroup;

  /**
   * RESERVED
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreFeatureIdProto> outSegment;

  static {
    // hack to force ProGuard to consider GeostoreFeatureIdProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreFeatureIdProto.class);
  }

  /**
   * The list of segments that terminate at this intersection, in any order. Note that all segments
   * are directed towards the intersection, i.e. their endpoints indicate what sort of intersection
   * this is. This should not be empty because an intersection with no associated segment is
   * meaningless.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreFeatureIdProto> segment;

  static {
    // hack to force ProGuard to consider GeostoreFeatureIdProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreFeatureIdProto.class);
  }

  /**
   * The toll cluster to which this intersection belongs. If present, the toll cluster must also
   * refer back to the intersection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto tollClusterId;

  /**
   * The artifact or logical intersection group to which this intersection belongs. If present, the
   * intersection group must also refer back to the intersection. If an intersection is within both
   * the artifact and logical group, then this reference should be to the artifact group.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getIntersectionGroup() {
    return intersectionGroup;
  }

  /**
   * The artifact or logical intersection group to which this intersection belongs. If present, the
   * intersection group must also refer back to the intersection. If an intersection is within both
   * the artifact and logical group, then this reference should be to the artifact group.
   * @param intersectionGroup intersectionGroup or {@code null} for none
   */
  public GeostoreIntersectionProto setIntersectionGroup(GeostoreFeatureIdProto intersectionGroup) {
    this.intersectionGroup = intersectionGroup;
    return this;
  }

  /**
   * RESERVED
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreFeatureIdProto> getOutSegment() {
    return outSegment;
  }

  /**
   * RESERVED
   * @param outSegment outSegment or {@code null} for none
   */
  public GeostoreIntersectionProto setOutSegment(java.util.List<GeostoreFeatureIdProto> outSegment) {
    this.outSegment = outSegment;
    return this;
  }

  /**
   * The list of segments that terminate at this intersection, in any order. Note that all segments
   * are directed towards the intersection, i.e. their endpoints indicate what sort of intersection
   * this is. This should not be empty because an intersection with no associated segment is
   * meaningless.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreFeatureIdProto> getSegment() {
    return segment;
  }

  /**
   * The list of segments that terminate at this intersection, in any order. Note that all segments
   * are directed towards the intersection, i.e. their endpoints indicate what sort of intersection
   * this is. This should not be empty because an intersection with no associated segment is
   * meaningless.
   * @param segment segment or {@code null} for none
   */
  public GeostoreIntersectionProto setSegment(java.util.List<GeostoreFeatureIdProto> segment) {
    this.segment = segment;
    return this;
  }

  /**
   * The toll cluster to which this intersection belongs. If present, the toll cluster must also
   * refer back to the intersection.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getTollClusterId() {
    return tollClusterId;
  }

  /**
   * The toll cluster to which this intersection belongs. If present, the toll cluster must also
   * refer back to the intersection.
   * @param tollClusterId tollClusterId or {@code null} for none
   */
  public GeostoreIntersectionProto setTollClusterId(GeostoreFeatureIdProto tollClusterId) {
    this.tollClusterId = tollClusterId;
    return this;
  }

  @Override
  public GeostoreIntersectionProto set(String fieldName, Object value) {
    return (GeostoreIntersectionProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreIntersectionProto clone() {
    return (GeostoreIntersectionProto) super.clone();
  }

}
