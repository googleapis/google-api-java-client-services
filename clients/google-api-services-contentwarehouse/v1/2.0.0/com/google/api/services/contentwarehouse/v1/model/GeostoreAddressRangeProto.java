/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This class represents a range of numbers in an address. It is an optional additional field in the
 * 'AddressComponentProto' message. This structure can be used to model both single addresses and
 * address ranges. There are two primary use-cases for address ranges: definitions and references.
 * Ranges are being defined when they are present on the addresses of segment features. Ranges are
 * being referenced when they are present on non-segment features. NOTE: If you add fields in this
 * proto, consider updating the AreAddressRangesEquivalent() function in
 * google3/geostore/base/internal/addressrange.cc
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreAddressRangeProto extends com.google.api.client.json.GenericJson {

  /**
   * Two or more address numbers. Each number represents an address that was mentioned by the data
   * provider.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> number;

  /**
   * For address range definitions: Two or more interpolation parameter values. The length of this
   * array must match the length of the number array, and each parameter number specifies the
   * position of the corresponding address number. Each value is an interpolation between 0.0 and
   * 1.0 inclusive. The value is proportional to the distance traveled along the segment's polyline
   * starting at its origin. The parameters must be provided in increasing order and the values in
   * the number array must be in strictly increasing or decreasing order. We make an exception for
   * singleton addresses, which are represented as two copies of a (number, parameter) pair, for
   * backwards compatibility. For address range references: This array must be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> parameter;

  /**
   * If specified, the prefix or suffix is applied to all numbers in the range. For example, this
   * can be used to indicate that addresses B1 through B99 are on one side of the street, while A1
   * through A99 are on the other side of the street.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String prefix;

  /**
   * If 'same_parity' is true, then all 'number' values must have the same parity (even or odd), and
   * this address range only includes addresses whose parity is the same as the given 'number'
   * values.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean sameParity;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String suffix;

  /**
   * A place for clients to attach arbitrary data to an address range. Never set in MapFacts. Here
   * are some examples: Example #1: Single non-numeric address (e.g., "Twelve") At the moment this
   * can only be represented as a street number (with the value in the parsed_name field of the
   * AddressComponentProto). We have future plans to make other changes so we can handle this case.
   * Example #2: Single semi-numeric address (e.g., "12bis") The number array contains two copies of
   * the single numeric value (12). The prefix is empty and the suffix contains "bis". The parameter
   * array has two identical values specifying the position of the single address. Example #3:
   * Simple address range (e.g., "100 to 198, even numbers only") The number array contains the two
   * values "100" and "198". The prefix and suffix strings are empty in this example. The parameter
   * array has two values, one for each number. The same_parity flag is set in this example.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet temporaryData;

  /**
   * Two or more address numbers. Each number represents an address that was mentioned by the data
   * provider.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getNumber() {
    return number;
  }

  /**
   * Two or more address numbers. Each number represents an address that was mentioned by the data
   * provider.
   * @param number number or {@code null} for none
   */
  public GeostoreAddressRangeProto setNumber(java.util.List<java.lang.Integer> number) {
    this.number = number;
    return this;
  }

  /**
   * For address range definitions: Two or more interpolation parameter values. The length of this
   * array must match the length of the number array, and each parameter number specifies the
   * position of the corresponding address number. Each value is an interpolation between 0.0 and
   * 1.0 inclusive. The value is proportional to the distance traveled along the segment's polyline
   * starting at its origin. The parameters must be provided in increasing order and the values in
   * the number array must be in strictly increasing or decreasing order. We make an exception for
   * singleton addresses, which are represented as two copies of a (number, parameter) pair, for
   * backwards compatibility. For address range references: This array must be empty.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getParameter() {
    return parameter;
  }

  /**
   * For address range definitions: Two or more interpolation parameter values. The length of this
   * array must match the length of the number array, and each parameter number specifies the
   * position of the corresponding address number. Each value is an interpolation between 0.0 and
   * 1.0 inclusive. The value is proportional to the distance traveled along the segment's polyline
   * starting at its origin. The parameters must be provided in increasing order and the values in
   * the number array must be in strictly increasing or decreasing order. We make an exception for
   * singleton addresses, which are represented as two copies of a (number, parameter) pair, for
   * backwards compatibility. For address range references: This array must be empty.
   * @param parameter parameter or {@code null} for none
   */
  public GeostoreAddressRangeProto setParameter(java.util.List<java.lang.Float> parameter) {
    this.parameter = parameter;
    return this;
  }

  /**
   * If specified, the prefix or suffix is applied to all numbers in the range. For example, this
   * can be used to indicate that addresses B1 through B99 are on one side of the street, while A1
   * through A99 are on the other side of the street.
   * @return value or {@code null} for none
   */
  public java.lang.String getPrefix() {
    return prefix;
  }

  /**
   * If specified, the prefix or suffix is applied to all numbers in the range. For example, this
   * can be used to indicate that addresses B1 through B99 are on one side of the street, while A1
   * through A99 are on the other side of the street.
   * @param prefix prefix or {@code null} for none
   */
  public GeostoreAddressRangeProto setPrefix(java.lang.String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * If 'same_parity' is true, then all 'number' values must have the same parity (even or odd), and
   * this address range only includes addresses whose parity is the same as the given 'number'
   * values.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSameParity() {
    return sameParity;
  }

  /**
   * If 'same_parity' is true, then all 'number' values must have the same parity (even or odd), and
   * this address range only includes addresses whose parity is the same as the given 'number'
   * values.
   * @param sameParity sameParity or {@code null} for none
   */
  public GeostoreAddressRangeProto setSameParity(java.lang.Boolean sameParity) {
    this.sameParity = sameParity;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSuffix() {
    return suffix;
  }

  /**
   * @param suffix suffix or {@code null} for none
   */
  public GeostoreAddressRangeProto setSuffix(java.lang.String suffix) {
    this.suffix = suffix;
    return this;
  }

  /**
   * A place for clients to attach arbitrary data to an address range. Never set in MapFacts. Here
   * are some examples: Example #1: Single non-numeric address (e.g., "Twelve") At the moment this
   * can only be represented as a street number (with the value in the parsed_name field of the
   * AddressComponentProto). We have future plans to make other changes so we can handle this case.
   * Example #2: Single semi-numeric address (e.g., "12bis") The number array contains two copies of
   * the single numeric value (12). The prefix is empty and the suffix contains "bis". The parameter
   * array has two identical values specifying the position of the single address. Example #3:
   * Simple address range (e.g., "100 to 198, even numbers only") The number array contains the two
   * values "100" and "198". The prefix and suffix strings are empty in this example. The parameter
   * array has two values, one for each number. The same_parity flag is set in this example.
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getTemporaryData() {
    return temporaryData;
  }

  /**
   * A place for clients to attach arbitrary data to an address range. Never set in MapFacts. Here
   * are some examples: Example #1: Single non-numeric address (e.g., "Twelve") At the moment this
   * can only be represented as a street number (with the value in the parsed_name field of the
   * AddressComponentProto). We have future plans to make other changes so we can handle this case.
   * Example #2: Single semi-numeric address (e.g., "12bis") The number array contains two copies of
   * the single numeric value (12). The prefix is empty and the suffix contains "bis". The parameter
   * array has two identical values specifying the position of the single address. Example #3:
   * Simple address range (e.g., "100 to 198, even numbers only") The number array contains the two
   * values "100" and "198". The prefix and suffix strings are empty in this example. The parameter
   * array has two values, one for each number. The same_parity flag is set in this example.
   * @param temporaryData temporaryData or {@code null} for none
   */
  public GeostoreAddressRangeProto setTemporaryData(Proto2BridgeMessageSet temporaryData) {
    this.temporaryData = temporaryData;
    return this;
  }

  @Override
  public GeostoreAddressRangeProto set(String fieldName, Object value) {
    return (GeostoreAddressRangeProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreAddressRangeProto clone() {
    return (GeostoreAddressRangeProto) super.clone();
  }

}
