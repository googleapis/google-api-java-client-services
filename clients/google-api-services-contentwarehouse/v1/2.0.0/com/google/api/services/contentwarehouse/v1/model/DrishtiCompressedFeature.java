/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Protocol buffer for storing compressed feature.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DrishtiCompressedFeature extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String featureName;

  /**
   * in_range_bitstream is the string produced by range coder, while out_of_range_bitstream
   * corresponds to the overflow stream, which is used whenever a quantized value is out of range.
   * See https://cs.corp.google.com/piperdepot/google3/research/vision/piedpiper/brain/python/layers
   * /entropy_models.py?l=225=234825412
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String inRangeBitstream;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String outOfRangeBitstream;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getFeatureName() {
    return featureName;
  }

  /**
   * @param featureName featureName or {@code null} for none
   */
  public DrishtiCompressedFeature setFeatureName(java.lang.String featureName) {
    this.featureName = featureName;
    return this;
  }

  /**
   * in_range_bitstream is the string produced by range coder, while out_of_range_bitstream
   * corresponds to the overflow stream, which is used whenever a quantized value is out of range.
   * See https://cs.corp.google.com/piperdepot/google3/research/vision/piedpiper/brain/python/layers
   * /entropy_models.py?l=225=234825412
   * @see #decodeInRangeBitstream()
   * @return value or {@code null} for none
   */
  public java.lang.String getInRangeBitstream() {
    return inRangeBitstream;
  }

  /**
   * in_range_bitstream is the string produced by range coder, while out_of_range_bitstream
   * corresponds to the overflow stream, which is used whenever a quantized value is out of range.
   * See https://cs.corp.google.com/piperdepot/google3/research/vision/piedpiper/brain/python/layers
   * /entropy_models.py?l=225=234825412
   * @see #getInRangeBitstream()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeInRangeBitstream() {
    return com.google.api.client.util.Base64.decodeBase64(inRangeBitstream);
  }

  /**
   * in_range_bitstream is the string produced by range coder, while out_of_range_bitstream
   * corresponds to the overflow stream, which is used whenever a quantized value is out of range.
   * See https://cs.corp.google.com/piperdepot/google3/research/vision/piedpiper/brain/python/layers
   * /entropy_models.py?l=225=234825412
   * @see #encodeInRangeBitstream()
   * @param inRangeBitstream inRangeBitstream or {@code null} for none
   */
  public DrishtiCompressedFeature setInRangeBitstream(java.lang.String inRangeBitstream) {
    this.inRangeBitstream = inRangeBitstream;
    return this;
  }

  /**
   * in_range_bitstream is the string produced by range coder, while out_of_range_bitstream
   * corresponds to the overflow stream, which is used whenever a quantized value is out of range.
   * See https://cs.corp.google.com/piperdepot/google3/research/vision/piedpiper/brain/python/layers
   * /entropy_models.py?l=225=234825412
   * @see #setInRangeBitstream()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public DrishtiCompressedFeature encodeInRangeBitstream(byte[] inRangeBitstream) {
    this.inRangeBitstream = com.google.api.client.util.Base64.encodeBase64URLSafeString(inRangeBitstream);
    return this;
  }

  /**
   * @see #decodeOutOfRangeBitstream()
   * @return value or {@code null} for none
   */
  public java.lang.String getOutOfRangeBitstream() {
    return outOfRangeBitstream;
  }

  /**

   * @see #getOutOfRangeBitstream()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeOutOfRangeBitstream() {
    return com.google.api.client.util.Base64.decodeBase64(outOfRangeBitstream);
  }

  /**
   * @see #encodeOutOfRangeBitstream()
   * @param outOfRangeBitstream outOfRangeBitstream or {@code null} for none
   */
  public DrishtiCompressedFeature setOutOfRangeBitstream(java.lang.String outOfRangeBitstream) {
    this.outOfRangeBitstream = outOfRangeBitstream;
    return this;
  }

  /**

   * @see #setOutOfRangeBitstream()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public DrishtiCompressedFeature encodeOutOfRangeBitstream(byte[] outOfRangeBitstream) {
    this.outOfRangeBitstream = com.google.api.client.util.Base64.encodeBase64URLSafeString(outOfRangeBitstream);
    return this;
  }

  @Override
  public DrishtiCompressedFeature set(String fieldName, Object value) {
    return (DrishtiCompressedFeature) super.set(fieldName, value);
  }

  @Override
  public DrishtiCompressedFeature clone() {
    return (DrishtiCompressedFeature) super.clone();
  }

}
