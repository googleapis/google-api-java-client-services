/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.toolresults.model;

/**
 * Model definition for TestCase.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Tool Results API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TestCase extends com.google.api.client.json.GenericJson {

  /**
   * The end time of the test case.
   *
   * Optional.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Timestamp endTime;

  /**
   * Why the test case was skipped.
   *
   * Present only for skipped test case
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String skippedMessage;

  /**
   * The stack trace details if the test case failed or encountered an error.
   *
   * The maximum size of the stack traces is 100KiB, beyond which the stack track will be truncated.
   *
   * Zero if the test case passed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<StackTrace> stackTraces;

  static {
    // hack to force ProGuard to consider StackTrace used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(StackTrace.class);
  }

  /**
   * The start time of the test case.
   *
   * Optional.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Timestamp startTime;

  /**
   * The status of the test case.
   *
   * Required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String status;

  /**
   * A unique identifier within a Step for this Test Case.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String testCaseId;

  /**
   * Test case reference, e.g. name, class name and test suite name.
   *
   * Required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TestCaseReference testCaseReference;

  /**
   * References to opaque files of any format output by the tool execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ToolOutputReference> toolOutputs;

  /**
   * The end time of the test case.
   *
   * Optional.
   * @return value or {@code null} for none
   */
  public Timestamp getEndTime() {
    return endTime;
  }

  /**
   * The end time of the test case.
   *
   * Optional.
   * @param endTime endTime or {@code null} for none
   */
  public TestCase setEndTime(Timestamp endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Why the test case was skipped.
   *
   * Present only for skipped test case
   * @return value or {@code null} for none
   */
  public java.lang.String getSkippedMessage() {
    return skippedMessage;
  }

  /**
   * Why the test case was skipped.
   *
   * Present only for skipped test case
   * @param skippedMessage skippedMessage or {@code null} for none
   */
  public TestCase setSkippedMessage(java.lang.String skippedMessage) {
    this.skippedMessage = skippedMessage;
    return this;
  }

  /**
   * The stack trace details if the test case failed or encountered an error.
   *
   * The maximum size of the stack traces is 100KiB, beyond which the stack track will be truncated.
   *
   * Zero if the test case passed.
   * @return value or {@code null} for none
   */
  public java.util.List<StackTrace> getStackTraces() {
    return stackTraces;
  }

  /**
   * The stack trace details if the test case failed or encountered an error.
   *
   * The maximum size of the stack traces is 100KiB, beyond which the stack track will be truncated.
   *
   * Zero if the test case passed.
   * @param stackTraces stackTraces or {@code null} for none
   */
  public TestCase setStackTraces(java.util.List<StackTrace> stackTraces) {
    this.stackTraces = stackTraces;
    return this;
  }

  /**
   * The start time of the test case.
   *
   * Optional.
   * @return value or {@code null} for none
   */
  public Timestamp getStartTime() {
    return startTime;
  }

  /**
   * The start time of the test case.
   *
   * Optional.
   * @param startTime startTime or {@code null} for none
   */
  public TestCase setStartTime(Timestamp startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The status of the test case.
   *
   * Required.
   * @return value or {@code null} for none
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * The status of the test case.
   *
   * Required.
   * @param status status or {@code null} for none
   */
  public TestCase setStatus(java.lang.String status) {
    this.status = status;
    return this;
  }

  /**
   * A unique identifier within a Step for this Test Case.
   * @return value or {@code null} for none
   */
  public java.lang.String getTestCaseId() {
    return testCaseId;
  }

  /**
   * A unique identifier within a Step for this Test Case.
   * @param testCaseId testCaseId or {@code null} for none
   */
  public TestCase setTestCaseId(java.lang.String testCaseId) {
    this.testCaseId = testCaseId;
    return this;
  }

  /**
   * Test case reference, e.g. name, class name and test suite name.
   *
   * Required.
   * @return value or {@code null} for none
   */
  public TestCaseReference getTestCaseReference() {
    return testCaseReference;
  }

  /**
   * Test case reference, e.g. name, class name and test suite name.
   *
   * Required.
   * @param testCaseReference testCaseReference or {@code null} for none
   */
  public TestCase setTestCaseReference(TestCaseReference testCaseReference) {
    this.testCaseReference = testCaseReference;
    return this;
  }

  /**
   * References to opaque files of any format output by the tool execution.
   * @return value or {@code null} for none
   */
  public java.util.List<ToolOutputReference> getToolOutputs() {
    return toolOutputs;
  }

  /**
   * References to opaque files of any format output by the tool execution.
   * @param toolOutputs toolOutputs or {@code null} for none
   */
  public TestCase setToolOutputs(java.util.List<ToolOutputReference> toolOutputs) {
    this.toolOutputs = toolOutputs;
    return this;
  }

  @Override
  public TestCase set(String fieldName, Object value) {
    return (TestCase) super.set(fieldName, value);
  }

  @Override
  public TestCase clone() {
    return (TestCase) super.clone();
  }

}
