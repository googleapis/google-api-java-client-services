/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * There are a few types of locations: - Basic locations are sequences of location elements which
 * can be either actual locations or modifiers. E.g., "Mountain View CA 94040" may be the sequence
 * "Mountain View" (an actual location), "CA" (an actual location, and "94040" (a numeric modifier).
 * - Compound locations: these are two locations combined by a joiner. E.g., "Target in Mountain
 * View CA 94040" has the joiner "in" and two basic locations ("Target", and "Mountain View CA
 * 94040"). Note that the definition is recursive, e.g., "Parking garage near Target in Mountain
 * View". - Vicinity location: indicates an area around a certain location. The area can be defined
 * by time or space. E.g., "within 1 hour of Palo Alto", "10 blocks from Union Square", "a few miles
 * from here". Next ID: 14 LINT.IfChange()
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSemanticParsingLocalLocation extends com.google.api.client.json.GenericJson {

  /**
   * Exactly one of the location types should be populated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingLocalBasicLocation basicLocation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingLocalCompoundLocation compoundLocation;

  /**
   * DEPRECATED. Instead, use LocationElement.contact_location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingLocalContactLocation contactLocation;

  /**
   * True if the location is merged, for example by CombineLocationsFn.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isMerged;

  /**
   * The constraint includes various constraints on the location such as amenities, price range,
   * ratings, or attributes such as new, cheap, etc. These constraints are a part of the location
   * but are not modeled as location elements and are not included in the location text. The
   * (debatable) motivation is that they do not stand on their own and are not an intrinsic part of
   * the location. Note on texts and spans. For a location such as "kid friendly hotels with an
   * indoor pool" we expect to get a basic location with a single location element and two
   * constraints: - For the location element: - Both text and span match "hotels" - For the first
   * constraint: - Both text and span match "kid friendly" - For the second constraint: - Both text
   * and span match "indoor pool" - For the full location: - text: "hotels" - span covers "kid
   * friendly hotels with an indoor pool"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingLocalLocationConstraint> locationConstraint;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numBytes;

  /**
   * A LocalResult corresponding to the location the user specified, populated by local dialog
   * (generally following a search). This field will only be set if the location is unambiguous,
   * possibly following a series of disambiguation turns of dialog.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private QualityDialogManagerLocalResult resolvedLocalResult;

  /**
   * The span, in the raw input, which corresponds to this location, expressed as a byte offset and
   * byte size. This allows the extraction of the location string as it appears in the raw text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer startByte;

  /**
   * A string representation of the location. Depending on the annotators and the location itself
   * the string may represent the raw query, the pre-processed query, or something else. As a non-
   * trivial example, for [target address mountain view] we will generate the text "target mountain
   * view" without "address". We make a best-effort to come up with a good string, but make no
   * formal guarantees. You should never present this text directly to outside users.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String text;

  /**
   * A location info including featureId and lat/lng that uniquely identifies the location the user
   * specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private KnowledgeVerticalsWeatherProtoUserSpecifiedLocation userSpecifiedLocation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingLocalVicinityLocation vicinityLocation;

  /**
   * Exactly one of the location types should be populated.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingLocalBasicLocation getBasicLocation() {
    return basicLocation;
  }

  /**
   * Exactly one of the location types should be populated.
   * @param basicLocation basicLocation or {@code null} for none
   */
  public NlpSemanticParsingLocalLocation setBasicLocation(NlpSemanticParsingLocalBasicLocation basicLocation) {
    this.basicLocation = basicLocation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingLocalCompoundLocation getCompoundLocation() {
    return compoundLocation;
  }

  /**
   * @param compoundLocation compoundLocation or {@code null} for none
   */
  public NlpSemanticParsingLocalLocation setCompoundLocation(NlpSemanticParsingLocalCompoundLocation compoundLocation) {
    this.compoundLocation = compoundLocation;
    return this;
  }

  /**
   * DEPRECATED. Instead, use LocationElement.contact_location.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingLocalContactLocation getContactLocation() {
    return contactLocation;
  }

  /**
   * DEPRECATED. Instead, use LocationElement.contact_location.
   * @param contactLocation contactLocation or {@code null} for none
   */
  public NlpSemanticParsingLocalLocation setContactLocation(NlpSemanticParsingLocalContactLocation contactLocation) {
    this.contactLocation = contactLocation;
    return this;
  }

  /**
   * True if the location is merged, for example by CombineLocationsFn.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsMerged() {
    return isMerged;
  }

  /**
   * True if the location is merged, for example by CombineLocationsFn.
   * @param isMerged isMerged or {@code null} for none
   */
  public NlpSemanticParsingLocalLocation setIsMerged(java.lang.Boolean isMerged) {
    this.isMerged = isMerged;
    return this;
  }

  /**
   * The constraint includes various constraints on the location such as amenities, price range,
   * ratings, or attributes such as new, cheap, etc. These constraints are a part of the location
   * but are not modeled as location elements and are not included in the location text. The
   * (debatable) motivation is that they do not stand on their own and are not an intrinsic part of
   * the location. Note on texts and spans. For a location such as "kid friendly hotels with an
   * indoor pool" we expect to get a basic location with a single location element and two
   * constraints: - For the location element: - Both text and span match "hotels" - For the first
   * constraint: - Both text and span match "kid friendly" - For the second constraint: - Both text
   * and span match "indoor pool" - For the full location: - text: "hotels" - span covers "kid
   * friendly hotels with an indoor pool"
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingLocalLocationConstraint> getLocationConstraint() {
    return locationConstraint;
  }

  /**
   * The constraint includes various constraints on the location such as amenities, price range,
   * ratings, or attributes such as new, cheap, etc. These constraints are a part of the location
   * but are not modeled as location elements and are not included in the location text. The
   * (debatable) motivation is that they do not stand on their own and are not an intrinsic part of
   * the location. Note on texts and spans. For a location such as "kid friendly hotels with an
   * indoor pool" we expect to get a basic location with a single location element and two
   * constraints: - For the location element: - Both text and span match "hotels" - For the first
   * constraint: - Both text and span match "kid friendly" - For the second constraint: - Both text
   * and span match "indoor pool" - For the full location: - text: "hotels" - span covers "kid
   * friendly hotels with an indoor pool"
   * @param locationConstraint locationConstraint or {@code null} for none
   */
  public NlpSemanticParsingLocalLocation setLocationConstraint(java.util.List<NlpSemanticParsingLocalLocationConstraint> locationConstraint) {
    this.locationConstraint = locationConstraint;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumBytes() {
    return numBytes;
  }

  /**
   * @param numBytes numBytes or {@code null} for none
   */
  public NlpSemanticParsingLocalLocation setNumBytes(java.lang.Integer numBytes) {
    this.numBytes = numBytes;
    return this;
  }

  /**
   * A LocalResult corresponding to the location the user specified, populated by local dialog
   * (generally following a search). This field will only be set if the location is unambiguous,
   * possibly following a series of disambiguation turns of dialog.
   * @return value or {@code null} for none
   */
  public QualityDialogManagerLocalResult getResolvedLocalResult() {
    return resolvedLocalResult;
  }

  /**
   * A LocalResult corresponding to the location the user specified, populated by local dialog
   * (generally following a search). This field will only be set if the location is unambiguous,
   * possibly following a series of disambiguation turns of dialog.
   * @param resolvedLocalResult resolvedLocalResult or {@code null} for none
   */
  public NlpSemanticParsingLocalLocation setResolvedLocalResult(QualityDialogManagerLocalResult resolvedLocalResult) {
    this.resolvedLocalResult = resolvedLocalResult;
    return this;
  }

  /**
   * The span, in the raw input, which corresponds to this location, expressed as a byte offset and
   * byte size. This allows the extraction of the location string as it appears in the raw text.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getStartByte() {
    return startByte;
  }

  /**
   * The span, in the raw input, which corresponds to this location, expressed as a byte offset and
   * byte size. This allows the extraction of the location string as it appears in the raw text.
   * @param startByte startByte or {@code null} for none
   */
  public NlpSemanticParsingLocalLocation setStartByte(java.lang.Integer startByte) {
    this.startByte = startByte;
    return this;
  }

  /**
   * A string representation of the location. Depending on the annotators and the location itself
   * the string may represent the raw query, the pre-processed query, or something else. As a non-
   * trivial example, for [target address mountain view] we will generate the text "target mountain
   * view" without "address". We make a best-effort to come up with a good string, but make no
   * formal guarantees. You should never present this text directly to outside users.
   * @return value or {@code null} for none
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * A string representation of the location. Depending on the annotators and the location itself
   * the string may represent the raw query, the pre-processed query, or something else. As a non-
   * trivial example, for [target address mountain view] we will generate the text "target mountain
   * view" without "address". We make a best-effort to come up with a good string, but make no
   * formal guarantees. You should never present this text directly to outside users.
   * @param text text or {@code null} for none
   */
  public NlpSemanticParsingLocalLocation setText(java.lang.String text) {
    this.text = text;
    return this;
  }

  /**
   * A location info including featureId and lat/lng that uniquely identifies the location the user
   * specified.
   * @return value or {@code null} for none
   */
  public KnowledgeVerticalsWeatherProtoUserSpecifiedLocation getUserSpecifiedLocation() {
    return userSpecifiedLocation;
  }

  /**
   * A location info including featureId and lat/lng that uniquely identifies the location the user
   * specified.
   * @param userSpecifiedLocation userSpecifiedLocation or {@code null} for none
   */
  public NlpSemanticParsingLocalLocation setUserSpecifiedLocation(KnowledgeVerticalsWeatherProtoUserSpecifiedLocation userSpecifiedLocation) {
    this.userSpecifiedLocation = userSpecifiedLocation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingLocalVicinityLocation getVicinityLocation() {
    return vicinityLocation;
  }

  /**
   * @param vicinityLocation vicinityLocation or {@code null} for none
   */
  public NlpSemanticParsingLocalLocation setVicinityLocation(NlpSemanticParsingLocalVicinityLocation vicinityLocation) {
    this.vicinityLocation = vicinityLocation;
    return this;
  }

  @Override
  public NlpSemanticParsingLocalLocation set(String fieldName, Object value) {
    return (NlpSemanticParsingLocalLocation) super.set(fieldName, value);
  }

  @Override
  public NlpSemanticParsingLocalLocation clone() {
    return (NlpSemanticParsingLocalLocation) super.clone();
  }

}
