/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Features for an individual Shopping Opinions Anchor. This file is used for video anchor use case.
 * Next Id: 34
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoContentSearchShoppingOpinionsAnchorFeatures extends com.google.api.client.json.GenericJson {

  /**
   * The anchor label.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String anchorLabel;

  /**
   * The first anchor_label mention position (word index, 0-based). It is computed from the
   * snippet_sub_segment if exists. Otherwise it is computed from the snippet. It is not populated
   * if there is no such mention.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer anchorLabelFirstMentionPos;

  /**
   * The sentiment score of the anchor label, with range: [-1, 1]. If using Lumin Pro/Con tags as
   * the anchor labels, the "Pro" Lumin tag will have a score of 1 and Con Lumin tag will have a
   * score of -1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float anchorLabelSentiment;

  /**
   * The number of times words in anchor label (that is not a stopword) being mentioned in the
   * snippet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer anchorLabelWordsMentions;

  /**
   * The smaller number of anchor_label_first_mention_pos and lumin_aspect_first_mention_pos.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer anchorOrAspectFirstMentionPos;

  /**
   * The number of times words in anchor label or Lumin aspect (that is not a stopword) being
   * mentioned in the snippet. If a word exists in both anchor label and Lumin aspect, it shall be
   * only counted once for a mention in the snippet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer anchorOrAspectWordsMentions;

  /**
   * Product aspect being discussed by this Shopping Opinions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchAspect aspect;

  /**
   * The asr with sentence break that was used for pro/con extraction.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String asrForProConExtraction;

  /**
   * The Babel similarity score between the snippet and the anchor label.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float babelSimilarityScore;

  /**
   * The classification score of the anchor being a con opinion.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float conScore;

  /**
   * The score from the Grampus model if the pro/con is extracted by Grampus.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float grampusScore;

  /**
   * Whether the anchor is classified as a con opinion.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isCon;

  /**
   * Whether the anchor is classified as a pro opinion.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isPro;

  /**
   * True if the anchor is considered as pro or con when extracted from MUM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isProConWhenExtractedFromMum;

  /**
   * The lumin aspect of the Pro/Con Lumin tag. e.g. "weight".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String luminAspect;

  /**
   * The first Lumin aspect mention position (word index, 0-based). It is computed from the
   * snippet_sub_segment if exists. Otherwise it is computed from the snippet. It is not populated
   * if there is no such mention.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer luminAspectFirstMentionPos;

  /**
   * The number of times words in Lumin aspect (that is not a stopword) being mentioned in the
   * snippet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer luminAspectWordsMentions;

  /**
   * The Lumin model score for the anchor label against the segment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float luminScore;

  /**
   * The product aspect of the pro/con generated using the MUM model.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mumProductAspect;

  /**
   * The score from the MUM model if the pro/con anchor is extracted by MUM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float mumScore;

  /**
   * Scores from Opinions Dolphin scorer. Opinions Dolphin scorer is built by finetuning the
   * Dolphin-based Video Anchor Unified Scorer V2 on the Opinions anchors ratings. It outputs two
   * scores, which are optimized for descriptiveness and usefulness ratings respectively.
   * 'descriptiveness_score' measures how well the anchor label describes the video section.
   * 'usefulness_score' measures how useful the anchor label is for jumping to an important section
   * in the video. go/vs-opinions-migration-report
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float opinionsDolphinDescriptivenessScore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float opinionsDolphinUsefulnessScore;

  /**
   * The classification score of the anchor being a pro opinion.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float proScore;

  /**
   * The product name from title extracted by the grampus model.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String productNameFromTitle;

  /**
   * The question used to score this video segment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String question;

  /**
   * The ASR for the selected segment window.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String snippet;

  /**
   * The QA model score for the selected segment window against the question.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float snippetQaScore;

  /**
   * The go/scarlett sentiment score of the selected segment window. Positive score represents
   * positive sentiment. Negative score represents negative sentiment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float snippetSentimentScore;

  /**
   * The ASR for the best matched sub segment inside the selected segment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String snippetSubSegment;

  /**
   * The QA model score for the best sub segment against the question.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float snippetSubSegmentQaScore;

  /**
   * The go/scarlett sentiment score of the best matched sub segment. Positive score represents
   * positive sentiment. Negative score represents negative sentiment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float snippetSubSegmentSentimentScore;

  /**
   * The number of words in the ASR for the best matched sub segment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer snippetSubSegmentWordCount;

  /**
   * The number of words in the ASR for the selected segment window.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer snippetWordCount;

  /**
   * The anchor label.
   * @return value or {@code null} for none
   */
  public java.lang.String getAnchorLabel() {
    return anchorLabel;
  }

  /**
   * The anchor label.
   * @param anchorLabel anchorLabel or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setAnchorLabel(java.lang.String anchorLabel) {
    this.anchorLabel = anchorLabel;
    return this;
  }

  /**
   * The first anchor_label mention position (word index, 0-based). It is computed from the
   * snippet_sub_segment if exists. Otherwise it is computed from the snippet. It is not populated
   * if there is no such mention.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAnchorLabelFirstMentionPos() {
    return anchorLabelFirstMentionPos;
  }

  /**
   * The first anchor_label mention position (word index, 0-based). It is computed from the
   * snippet_sub_segment if exists. Otherwise it is computed from the snippet. It is not populated
   * if there is no such mention.
   * @param anchorLabelFirstMentionPos anchorLabelFirstMentionPos or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setAnchorLabelFirstMentionPos(java.lang.Integer anchorLabelFirstMentionPos) {
    this.anchorLabelFirstMentionPos = anchorLabelFirstMentionPos;
    return this;
  }

  /**
   * The sentiment score of the anchor label, with range: [-1, 1]. If using Lumin Pro/Con tags as
   * the anchor labels, the "Pro" Lumin tag will have a score of 1 and Con Lumin tag will have a
   * score of -1.
   * @return value or {@code null} for none
   */
  public java.lang.Float getAnchorLabelSentiment() {
    return anchorLabelSentiment;
  }

  /**
   * The sentiment score of the anchor label, with range: [-1, 1]. If using Lumin Pro/Con tags as
   * the anchor labels, the "Pro" Lumin tag will have a score of 1 and Con Lumin tag will have a
   * score of -1.
   * @param anchorLabelSentiment anchorLabelSentiment or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setAnchorLabelSentiment(java.lang.Float anchorLabelSentiment) {
    this.anchorLabelSentiment = anchorLabelSentiment;
    return this;
  }

  /**
   * The number of times words in anchor label (that is not a stopword) being mentioned in the
   * snippet.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAnchorLabelWordsMentions() {
    return anchorLabelWordsMentions;
  }

  /**
   * The number of times words in anchor label (that is not a stopword) being mentioned in the
   * snippet.
   * @param anchorLabelWordsMentions anchorLabelWordsMentions or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setAnchorLabelWordsMentions(java.lang.Integer anchorLabelWordsMentions) {
    this.anchorLabelWordsMentions = anchorLabelWordsMentions;
    return this;
  }

  /**
   * The smaller number of anchor_label_first_mention_pos and lumin_aspect_first_mention_pos.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAnchorOrAspectFirstMentionPos() {
    return anchorOrAspectFirstMentionPos;
  }

  /**
   * The smaller number of anchor_label_first_mention_pos and lumin_aspect_first_mention_pos.
   * @param anchorOrAspectFirstMentionPos anchorOrAspectFirstMentionPos or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setAnchorOrAspectFirstMentionPos(java.lang.Integer anchorOrAspectFirstMentionPos) {
    this.anchorOrAspectFirstMentionPos = anchorOrAspectFirstMentionPos;
    return this;
  }

  /**
   * The number of times words in anchor label or Lumin aspect (that is not a stopword) being
   * mentioned in the snippet. If a word exists in both anchor label and Lumin aspect, it shall be
   * only counted once for a mention in the snippet.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAnchorOrAspectWordsMentions() {
    return anchorOrAspectWordsMentions;
  }

  /**
   * The number of times words in anchor label or Lumin aspect (that is not a stopword) being
   * mentioned in the snippet. If a word exists in both anchor label and Lumin aspect, it shall be
   * only counted once for a mention in the snippet.
   * @param anchorOrAspectWordsMentions anchorOrAspectWordsMentions or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setAnchorOrAspectWordsMentions(java.lang.Integer anchorOrAspectWordsMentions) {
    this.anchorOrAspectWordsMentions = anchorOrAspectWordsMentions;
    return this;
  }

  /**
   * Product aspect being discussed by this Shopping Opinions.
   * @return value or {@code null} for none
   */
  public VideoContentSearchAspect getAspect() {
    return aspect;
  }

  /**
   * Product aspect being discussed by this Shopping Opinions.
   * @param aspect aspect or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setAspect(VideoContentSearchAspect aspect) {
    this.aspect = aspect;
    return this;
  }

  /**
   * The asr with sentence break that was used for pro/con extraction.
   * @return value or {@code null} for none
   */
  public java.lang.String getAsrForProConExtraction() {
    return asrForProConExtraction;
  }

  /**
   * The asr with sentence break that was used for pro/con extraction.
   * @param asrForProConExtraction asrForProConExtraction or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setAsrForProConExtraction(java.lang.String asrForProConExtraction) {
    this.asrForProConExtraction = asrForProConExtraction;
    return this;
  }

  /**
   * The Babel similarity score between the snippet and the anchor label.
   * @return value or {@code null} for none
   */
  public java.lang.Float getBabelSimilarityScore() {
    return babelSimilarityScore;
  }

  /**
   * The Babel similarity score between the snippet and the anchor label.
   * @param babelSimilarityScore babelSimilarityScore or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setBabelSimilarityScore(java.lang.Float babelSimilarityScore) {
    this.babelSimilarityScore = babelSimilarityScore;
    return this;
  }

  /**
   * The classification score of the anchor being a con opinion.
   * @return value or {@code null} for none
   */
  public java.lang.Float getConScore() {
    return conScore;
  }

  /**
   * The classification score of the anchor being a con opinion.
   * @param conScore conScore or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setConScore(java.lang.Float conScore) {
    this.conScore = conScore;
    return this;
  }

  /**
   * The score from the Grampus model if the pro/con is extracted by Grampus.
   * @return value or {@code null} for none
   */
  public java.lang.Float getGrampusScore() {
    return grampusScore;
  }

  /**
   * The score from the Grampus model if the pro/con is extracted by Grampus.
   * @param grampusScore grampusScore or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setGrampusScore(java.lang.Float grampusScore) {
    this.grampusScore = grampusScore;
    return this;
  }

  /**
   * Whether the anchor is classified as a con opinion.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsCon() {
    return isCon;
  }

  /**
   * Whether the anchor is classified as a con opinion.
   * @param isCon isCon or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setIsCon(java.lang.Boolean isCon) {
    this.isCon = isCon;
    return this;
  }

  /**
   * Whether the anchor is classified as a pro opinion.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsPro() {
    return isPro;
  }

  /**
   * Whether the anchor is classified as a pro opinion.
   * @param isPro isPro or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setIsPro(java.lang.Boolean isPro) {
    this.isPro = isPro;
    return this;
  }

  /**
   * True if the anchor is considered as pro or con when extracted from MUM.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsProConWhenExtractedFromMum() {
    return isProConWhenExtractedFromMum;
  }

  /**
   * True if the anchor is considered as pro or con when extracted from MUM.
   * @param isProConWhenExtractedFromMum isProConWhenExtractedFromMum or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setIsProConWhenExtractedFromMum(java.lang.Boolean isProConWhenExtractedFromMum) {
    this.isProConWhenExtractedFromMum = isProConWhenExtractedFromMum;
    return this;
  }

  /**
   * The lumin aspect of the Pro/Con Lumin tag. e.g. "weight".
   * @return value or {@code null} for none
   */
  public java.lang.String getLuminAspect() {
    return luminAspect;
  }

  /**
   * The lumin aspect of the Pro/Con Lumin tag. e.g. "weight".
   * @param luminAspect luminAspect or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setLuminAspect(java.lang.String luminAspect) {
    this.luminAspect = luminAspect;
    return this;
  }

  /**
   * The first Lumin aspect mention position (word index, 0-based). It is computed from the
   * snippet_sub_segment if exists. Otherwise it is computed from the snippet. It is not populated
   * if there is no such mention.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLuminAspectFirstMentionPos() {
    return luminAspectFirstMentionPos;
  }

  /**
   * The first Lumin aspect mention position (word index, 0-based). It is computed from the
   * snippet_sub_segment if exists. Otherwise it is computed from the snippet. It is not populated
   * if there is no such mention.
   * @param luminAspectFirstMentionPos luminAspectFirstMentionPos or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setLuminAspectFirstMentionPos(java.lang.Integer luminAspectFirstMentionPos) {
    this.luminAspectFirstMentionPos = luminAspectFirstMentionPos;
    return this;
  }

  /**
   * The number of times words in Lumin aspect (that is not a stopword) being mentioned in the
   * snippet.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLuminAspectWordsMentions() {
    return luminAspectWordsMentions;
  }

  /**
   * The number of times words in Lumin aspect (that is not a stopword) being mentioned in the
   * snippet.
   * @param luminAspectWordsMentions luminAspectWordsMentions or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setLuminAspectWordsMentions(java.lang.Integer luminAspectWordsMentions) {
    this.luminAspectWordsMentions = luminAspectWordsMentions;
    return this;
  }

  /**
   * The Lumin model score for the anchor label against the segment.
   * @return value or {@code null} for none
   */
  public java.lang.Float getLuminScore() {
    return luminScore;
  }

  /**
   * The Lumin model score for the anchor label against the segment.
   * @param luminScore luminScore or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setLuminScore(java.lang.Float luminScore) {
    this.luminScore = luminScore;
    return this;
  }

  /**
   * The product aspect of the pro/con generated using the MUM model.
   * @return value or {@code null} for none
   */
  public java.lang.String getMumProductAspect() {
    return mumProductAspect;
  }

  /**
   * The product aspect of the pro/con generated using the MUM model.
   * @param mumProductAspect mumProductAspect or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setMumProductAspect(java.lang.String mumProductAspect) {
    this.mumProductAspect = mumProductAspect;
    return this;
  }

  /**
   * The score from the MUM model if the pro/con anchor is extracted by MUM.
   * @return value or {@code null} for none
   */
  public java.lang.Float getMumScore() {
    return mumScore;
  }

  /**
   * The score from the MUM model if the pro/con anchor is extracted by MUM.
   * @param mumScore mumScore or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setMumScore(java.lang.Float mumScore) {
    this.mumScore = mumScore;
    return this;
  }

  /**
   * Scores from Opinions Dolphin scorer. Opinions Dolphin scorer is built by finetuning the
   * Dolphin-based Video Anchor Unified Scorer V2 on the Opinions anchors ratings. It outputs two
   * scores, which are optimized for descriptiveness and usefulness ratings respectively.
   * 'descriptiveness_score' measures how well the anchor label describes the video section.
   * 'usefulness_score' measures how useful the anchor label is for jumping to an important section
   * in the video. go/vs-opinions-migration-report
   * @return value or {@code null} for none
   */
  public java.lang.Float getOpinionsDolphinDescriptivenessScore() {
    return opinionsDolphinDescriptivenessScore;
  }

  /**
   * Scores from Opinions Dolphin scorer. Opinions Dolphin scorer is built by finetuning the
   * Dolphin-based Video Anchor Unified Scorer V2 on the Opinions anchors ratings. It outputs two
   * scores, which are optimized for descriptiveness and usefulness ratings respectively.
   * 'descriptiveness_score' measures how well the anchor label describes the video section.
   * 'usefulness_score' measures how useful the anchor label is for jumping to an important section
   * in the video. go/vs-opinions-migration-report
   * @param opinionsDolphinDescriptivenessScore opinionsDolphinDescriptivenessScore or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setOpinionsDolphinDescriptivenessScore(java.lang.Float opinionsDolphinDescriptivenessScore) {
    this.opinionsDolphinDescriptivenessScore = opinionsDolphinDescriptivenessScore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getOpinionsDolphinUsefulnessScore() {
    return opinionsDolphinUsefulnessScore;
  }

  /**
   * @param opinionsDolphinUsefulnessScore opinionsDolphinUsefulnessScore or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setOpinionsDolphinUsefulnessScore(java.lang.Float opinionsDolphinUsefulnessScore) {
    this.opinionsDolphinUsefulnessScore = opinionsDolphinUsefulnessScore;
    return this;
  }

  /**
   * The classification score of the anchor being a pro opinion.
   * @return value or {@code null} for none
   */
  public java.lang.Float getProScore() {
    return proScore;
  }

  /**
   * The classification score of the anchor being a pro opinion.
   * @param proScore proScore or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setProScore(java.lang.Float proScore) {
    this.proScore = proScore;
    return this;
  }

  /**
   * The product name from title extracted by the grampus model.
   * @return value or {@code null} for none
   */
  public java.lang.String getProductNameFromTitle() {
    return productNameFromTitle;
  }

  /**
   * The product name from title extracted by the grampus model.
   * @param productNameFromTitle productNameFromTitle or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setProductNameFromTitle(java.lang.String productNameFromTitle) {
    this.productNameFromTitle = productNameFromTitle;
    return this;
  }

  /**
   * The question used to score this video segment.
   * @return value or {@code null} for none
   */
  public java.lang.String getQuestion() {
    return question;
  }

  /**
   * The question used to score this video segment.
   * @param question question or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setQuestion(java.lang.String question) {
    this.question = question;
    return this;
  }

  /**
   * The ASR for the selected segment window.
   * @return value or {@code null} for none
   */
  public java.lang.String getSnippet() {
    return snippet;
  }

  /**
   * The ASR for the selected segment window.
   * @param snippet snippet or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setSnippet(java.lang.String snippet) {
    this.snippet = snippet;
    return this;
  }

  /**
   * The QA model score for the selected segment window against the question.
   * @return value or {@code null} for none
   */
  public java.lang.Float getSnippetQaScore() {
    return snippetQaScore;
  }

  /**
   * The QA model score for the selected segment window against the question.
   * @param snippetQaScore snippetQaScore or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setSnippetQaScore(java.lang.Float snippetQaScore) {
    this.snippetQaScore = snippetQaScore;
    return this;
  }

  /**
   * The go/scarlett sentiment score of the selected segment window. Positive score represents
   * positive sentiment. Negative score represents negative sentiment.
   * @return value or {@code null} for none
   */
  public java.lang.Float getSnippetSentimentScore() {
    return snippetSentimentScore;
  }

  /**
   * The go/scarlett sentiment score of the selected segment window. Positive score represents
   * positive sentiment. Negative score represents negative sentiment.
   * @param snippetSentimentScore snippetSentimentScore or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setSnippetSentimentScore(java.lang.Float snippetSentimentScore) {
    this.snippetSentimentScore = snippetSentimentScore;
    return this;
  }

  /**
   * The ASR for the best matched sub segment inside the selected segment.
   * @return value or {@code null} for none
   */
  public java.lang.String getSnippetSubSegment() {
    return snippetSubSegment;
  }

  /**
   * The ASR for the best matched sub segment inside the selected segment.
   * @param snippetSubSegment snippetSubSegment or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setSnippetSubSegment(java.lang.String snippetSubSegment) {
    this.snippetSubSegment = snippetSubSegment;
    return this;
  }

  /**
   * The QA model score for the best sub segment against the question.
   * @return value or {@code null} for none
   */
  public java.lang.Float getSnippetSubSegmentQaScore() {
    return snippetSubSegmentQaScore;
  }

  /**
   * The QA model score for the best sub segment against the question.
   * @param snippetSubSegmentQaScore snippetSubSegmentQaScore or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setSnippetSubSegmentQaScore(java.lang.Float snippetSubSegmentQaScore) {
    this.snippetSubSegmentQaScore = snippetSubSegmentQaScore;
    return this;
  }

  /**
   * The go/scarlett sentiment score of the best matched sub segment. Positive score represents
   * positive sentiment. Negative score represents negative sentiment.
   * @return value or {@code null} for none
   */
  public java.lang.Float getSnippetSubSegmentSentimentScore() {
    return snippetSubSegmentSentimentScore;
  }

  /**
   * The go/scarlett sentiment score of the best matched sub segment. Positive score represents
   * positive sentiment. Negative score represents negative sentiment.
   * @param snippetSubSegmentSentimentScore snippetSubSegmentSentimentScore or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setSnippetSubSegmentSentimentScore(java.lang.Float snippetSubSegmentSentimentScore) {
    this.snippetSubSegmentSentimentScore = snippetSubSegmentSentimentScore;
    return this;
  }

  /**
   * The number of words in the ASR for the best matched sub segment.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSnippetSubSegmentWordCount() {
    return snippetSubSegmentWordCount;
  }

  /**
   * The number of words in the ASR for the best matched sub segment.
   * @param snippetSubSegmentWordCount snippetSubSegmentWordCount or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setSnippetSubSegmentWordCount(java.lang.Integer snippetSubSegmentWordCount) {
    this.snippetSubSegmentWordCount = snippetSubSegmentWordCount;
    return this;
  }

  /**
   * The number of words in the ASR for the selected segment window.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSnippetWordCount() {
    return snippetWordCount;
  }

  /**
   * The number of words in the ASR for the selected segment window.
   * @param snippetWordCount snippetWordCount or {@code null} for none
   */
  public VideoContentSearchShoppingOpinionsAnchorFeatures setSnippetWordCount(java.lang.Integer snippetWordCount) {
    this.snippetWordCount = snippetWordCount;
    return this;
  }

  @Override
  public VideoContentSearchShoppingOpinionsAnchorFeatures set(String fieldName, Object value) {
    return (VideoContentSearchShoppingOpinionsAnchorFeatures) super.set(fieldName, value);
  }

  @Override
  public VideoContentSearchShoppingOpinionsAnchorFeatures clone() {
    return (VideoContentSearchShoppingOpinionsAnchorFeatures) super.clone();
  }

}
