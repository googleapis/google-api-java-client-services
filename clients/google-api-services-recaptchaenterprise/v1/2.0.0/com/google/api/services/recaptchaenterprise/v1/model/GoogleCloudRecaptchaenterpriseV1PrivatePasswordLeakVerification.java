/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.recaptchaenterprise.v1.model;

/**
 * Private password leak verification info.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the reCAPTCHA Enterprise API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification extends com.google.api.client.json.GenericJson {

  /**
   * Output only. List of prefixes of the encrypted potential password leaks that matched the given
   * parameters. They must be compared with the client-side decryption prefix of
   * `reencrypted_user_credentials_hash`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> encryptedLeakMatchPrefixes;

  /**
   * Optional. Encrypted Scrypt hash of the canonicalized username+password. It is re-encrypted by
   * the server and returned through `reencrypted_user_credentials_hash`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String encryptedUserCredentialsHash;

  /**
   * Optional. Exactly 26-bit prefix of the SHA-256 hash of the canonicalized username. It is used
   * to look up password leaks associated with that hash prefix.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lookupHashPrefix;

  /**
   * Output only. Corresponds to the re-encryption of the `encrypted_user_credentials_hash` field.
   * It is used to match potential password leaks within `encrypted_leak_match_prefixes`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String reencryptedUserCredentialsHash;

  /**
   * Output only. List of prefixes of the encrypted potential password leaks that matched the given
   * parameters. They must be compared with the client-side decryption prefix of
   * `reencrypted_user_credentials_hash`
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getEncryptedLeakMatchPrefixes() {
    return encryptedLeakMatchPrefixes;
  }

  /**
   * Output only. List of prefixes of the encrypted potential password leaks that matched the given
   * parameters. They must be compared with the client-side decryption prefix of
   * `reencrypted_user_credentials_hash`
   * @param encryptedLeakMatchPrefixes encryptedLeakMatchPrefixes or {@code null} for none
   */
  public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification setEncryptedLeakMatchPrefixes(java.util.List<java.lang.String> encryptedLeakMatchPrefixes) {
    this.encryptedLeakMatchPrefixes = encryptedLeakMatchPrefixes;
    return this;
  }

  /**
   * Optional. Encrypted Scrypt hash of the canonicalized username+password. It is re-encrypted by
   * the server and returned through `reencrypted_user_credentials_hash`.
   * @see #decodeEncryptedUserCredentialsHash()
   * @return value or {@code null} for none
   */
  public java.lang.String getEncryptedUserCredentialsHash() {
    return encryptedUserCredentialsHash;
  }

  /**
   * Optional. Encrypted Scrypt hash of the canonicalized username+password. It is re-encrypted by
   * the server and returned through `reencrypted_user_credentials_hash`.
   * @see #getEncryptedUserCredentialsHash()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeEncryptedUserCredentialsHash() {
    return com.google.api.client.util.Base64.decodeBase64(encryptedUserCredentialsHash);
  }

  /**
   * Optional. Encrypted Scrypt hash of the canonicalized username+password. It is re-encrypted by
   * the server and returned through `reencrypted_user_credentials_hash`.
   * @see #encodeEncryptedUserCredentialsHash()
   * @param encryptedUserCredentialsHash encryptedUserCredentialsHash or {@code null} for none
   */
  public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification setEncryptedUserCredentialsHash(java.lang.String encryptedUserCredentialsHash) {
    this.encryptedUserCredentialsHash = encryptedUserCredentialsHash;
    return this;
  }

  /**
   * Optional. Encrypted Scrypt hash of the canonicalized username+password. It is re-encrypted by
   * the server and returned through `reencrypted_user_credentials_hash`.
   * @see #setEncryptedUserCredentialsHash()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification encodeEncryptedUserCredentialsHash(byte[] encryptedUserCredentialsHash) {
    this.encryptedUserCredentialsHash = com.google.api.client.util.Base64.encodeBase64URLSafeString(encryptedUserCredentialsHash);
    return this;
  }

  /**
   * Optional. Exactly 26-bit prefix of the SHA-256 hash of the canonicalized username. It is used
   * to look up password leaks associated with that hash prefix.
   * @see #decodeLookupHashPrefix()
   * @return value or {@code null} for none
   */
  public java.lang.String getLookupHashPrefix() {
    return lookupHashPrefix;
  }

  /**
   * Optional. Exactly 26-bit prefix of the SHA-256 hash of the canonicalized username. It is used
   * to look up password leaks associated with that hash prefix.
   * @see #getLookupHashPrefix()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeLookupHashPrefix() {
    return com.google.api.client.util.Base64.decodeBase64(lookupHashPrefix);
  }

  /**
   * Optional. Exactly 26-bit prefix of the SHA-256 hash of the canonicalized username. It is used
   * to look up password leaks associated with that hash prefix.
   * @see #encodeLookupHashPrefix()
   * @param lookupHashPrefix lookupHashPrefix or {@code null} for none
   */
  public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification setLookupHashPrefix(java.lang.String lookupHashPrefix) {
    this.lookupHashPrefix = lookupHashPrefix;
    return this;
  }

  /**
   * Optional. Exactly 26-bit prefix of the SHA-256 hash of the canonicalized username. It is used
   * to look up password leaks associated with that hash prefix.
   * @see #setLookupHashPrefix()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification encodeLookupHashPrefix(byte[] lookupHashPrefix) {
    this.lookupHashPrefix = com.google.api.client.util.Base64.encodeBase64URLSafeString(lookupHashPrefix);
    return this;
  }

  /**
   * Output only. Corresponds to the re-encryption of the `encrypted_user_credentials_hash` field.
   * It is used to match potential password leaks within `encrypted_leak_match_prefixes`.
   * @see #decodeReencryptedUserCredentialsHash()
   * @return value or {@code null} for none
   */
  public java.lang.String getReencryptedUserCredentialsHash() {
    return reencryptedUserCredentialsHash;
  }

  /**
   * Output only. Corresponds to the re-encryption of the `encrypted_user_credentials_hash` field.
   * It is used to match potential password leaks within `encrypted_leak_match_prefixes`.
   * @see #getReencryptedUserCredentialsHash()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeReencryptedUserCredentialsHash() {
    return com.google.api.client.util.Base64.decodeBase64(reencryptedUserCredentialsHash);
  }

  /**
   * Output only. Corresponds to the re-encryption of the `encrypted_user_credentials_hash` field.
   * It is used to match potential password leaks within `encrypted_leak_match_prefixes`.
   * @see #encodeReencryptedUserCredentialsHash()
   * @param reencryptedUserCredentialsHash reencryptedUserCredentialsHash or {@code null} for none
   */
  public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification setReencryptedUserCredentialsHash(java.lang.String reencryptedUserCredentialsHash) {
    this.reencryptedUserCredentialsHash = reencryptedUserCredentialsHash;
    return this;
  }

  /**
   * Output only. Corresponds to the re-encryption of the `encrypted_user_credentials_hash` field.
   * It is used to match potential password leaks within `encrypted_leak_match_prefixes`.
   * @see #setReencryptedUserCredentialsHash()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification encodeReencryptedUserCredentialsHash(byte[] reencryptedUserCredentialsHash) {
    this.reencryptedUserCredentialsHash = com.google.api.client.util.Base64.encodeBase64URLSafeString(reencryptedUserCredentialsHash);
    return this;
  }

  @Override
  public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification set(String fieldName, Object value) {
    return (GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification clone() {
    return (GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification) super.clone();
  }

}
