/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.aiplatform.v1beta1.model;

/**
 * A query to find a number of similar entities.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Vertex AI API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAiplatformV1beta1NearestNeighborQuery extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The embedding vector that be used for similar search.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding embedding;

  /**
   * Optional. The entity id whose similar entities should be searched for. If embedding is set,
   * search will use embedding instead of entity_id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String entityId;

  /**
   * Optional. The number of similar entities to be retrieved from feature view for each query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer neighborCount;

  /**
   * Optional. Parameters that can be set to tune query on the fly.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters parameters;

  /**
   * Optional. Crowding is a constraint on a neighbor list produced by nearest neighbor search
   * requiring that no more than sper_crowding_attribute_neighbor_count of the k neighbors returned
   * have the same value of crowding_attribute. It's used for improving result diversity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer perCrowdingAttributeNeighborCount;

  /**
   * Optional. The list of string filters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter> stringFilters;

  /**
   * Optional. The embedding vector that be used for similar search.
   * @return value or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding getEmbedding() {
    return embedding;
  }

  /**
   * Optional. The embedding vector that be used for similar search.
   * @param embedding embedding or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1NearestNeighborQuery setEmbedding(GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding embedding) {
    this.embedding = embedding;
    return this;
  }

  /**
   * Optional. The entity id whose similar entities should be searched for. If embedding is set,
   * search will use embedding instead of entity_id.
   * @return value or {@code null} for none
   */
  public java.lang.String getEntityId() {
    return entityId;
  }

  /**
   * Optional. The entity id whose similar entities should be searched for. If embedding is set,
   * search will use embedding instead of entity_id.
   * @param entityId entityId or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1NearestNeighborQuery setEntityId(java.lang.String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Optional. The number of similar entities to be retrieved from feature view for each query.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNeighborCount() {
    return neighborCount;
  }

  /**
   * Optional. The number of similar entities to be retrieved from feature view for each query.
   * @param neighborCount neighborCount or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1NearestNeighborQuery setNeighborCount(java.lang.Integer neighborCount) {
    this.neighborCount = neighborCount;
    return this;
  }

  /**
   * Optional. Parameters that can be set to tune query on the fly.
   * @return value or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters getParameters() {
    return parameters;
  }

  /**
   * Optional. Parameters that can be set to tune query on the fly.
   * @param parameters parameters or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1NearestNeighborQuery setParameters(GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Optional. Crowding is a constraint on a neighbor list produced by nearest neighbor search
   * requiring that no more than sper_crowding_attribute_neighbor_count of the k neighbors returned
   * have the same value of crowding_attribute. It's used for improving result diversity.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPerCrowdingAttributeNeighborCount() {
    return perCrowdingAttributeNeighborCount;
  }

  /**
   * Optional. Crowding is a constraint on a neighbor list produced by nearest neighbor search
   * requiring that no more than sper_crowding_attribute_neighbor_count of the k neighbors returned
   * have the same value of crowding_attribute. It's used for improving result diversity.
   * @param perCrowdingAttributeNeighborCount perCrowdingAttributeNeighborCount or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1NearestNeighborQuery setPerCrowdingAttributeNeighborCount(java.lang.Integer perCrowdingAttributeNeighborCount) {
    this.perCrowdingAttributeNeighborCount = perCrowdingAttributeNeighborCount;
    return this;
  }

  /**
   * Optional. The list of string filters.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter> getStringFilters() {
    return stringFilters;
  }

  /**
   * Optional. The list of string filters.
   * @param stringFilters stringFilters or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1NearestNeighborQuery setStringFilters(java.util.List<GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter> stringFilters) {
    this.stringFilters = stringFilters;
    return this;
  }

  @Override
  public GoogleCloudAiplatformV1beta1NearestNeighborQuery set(String fieldName, Object value) {
    return (GoogleCloudAiplatformV1beta1NearestNeighborQuery) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAiplatformV1beta1NearestNeighborQuery clone() {
    return (GoogleCloudAiplatformV1beta1NearestNeighborQuery) super.clone();
  }

}
