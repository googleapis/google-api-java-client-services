/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Represents all information we have about a specific/localized name. Next available tag: 13. NOTE:
 * If you add a field to the NameInfo proto and wish to retain it *after* the GlobalNameInfo merging
 * steps in //r/w/enricher/pipeline:topic-enricher-flume-main then the appropriate combining logic
 * for turning a flume stream of NameInfo protos into a single NameInfo must be updated with the new
 * field in mind, in either or both of CombineContextNameInfosFn/CombineNameInfosFn. If not, the
 * newly added field will be ignored during the merging steps (presumably because it is a transient
 * field or a debug field that is not necessary to be retained).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefNameInfo extends com.google.api.client.json.GenericJson {

  /**
   * The score aggregated from all sources.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefAggregatedEntityNameScores aggregatedScores;

  /**
   * Information on categories annotated on the range.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefAnnotatedCategoryInfo> annotatedCategory;

  static {
    // hack to force ProGuard to consider RepositoryWebrefAnnotatedCategoryInfo used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(RepositoryWebrefAnnotatedCategoryInfo.class);
  }

  /**
   * DEBUG ONLY: stores a list of queries with per-candidate scores about signals used for prior
   * learning.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefNameDebugInfo> debugDetails;

  static {
    // hack to force ProGuard to consider RepositoryWebrefNameDebugInfo used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(RepositoryWebrefNameDebugInfo.class);
  }

  /**
   * Field which decides if this NameInfo should be included in model creation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean includeInModel;

  /**
   * The specific name to which this information applies.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefLocalizedString name;

  /**
   * N-gram data (e.g. n-gram IDF).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefUniversalNgramData ngramData;

  /**
   * Lightweight token semantic metadata for inflected name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefLightweightTokensPerNameLightweightToken perNameLightweightToken;

  /**
   * The name-specific scores. These scores only depend on the name and are independent of the
   * entity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefNameScores scores;

  /**
   * The per-source scores.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefEntityNameSource> source;

  static {
    // hack to force ProGuard to consider RepositoryWebrefEntityNameSource used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(RepositoryWebrefEntityNameSource.class);
  }

  /**
   * The score aggregated from all sources.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefAggregatedEntityNameScores getAggregatedScores() {
    return aggregatedScores;
  }

  /**
   * The score aggregated from all sources.
   * @param aggregatedScores aggregatedScores or {@code null} for none
   */
  public RepositoryWebrefNameInfo setAggregatedScores(RepositoryWebrefAggregatedEntityNameScores aggregatedScores) {
    this.aggregatedScores = aggregatedScores;
    return this;
  }

  /**
   * Information on categories annotated on the range.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefAnnotatedCategoryInfo> getAnnotatedCategory() {
    return annotatedCategory;
  }

  /**
   * Information on categories annotated on the range.
   * @param annotatedCategory annotatedCategory or {@code null} for none
   */
  public RepositoryWebrefNameInfo setAnnotatedCategory(java.util.List<RepositoryWebrefAnnotatedCategoryInfo> annotatedCategory) {
    this.annotatedCategory = annotatedCategory;
    return this;
  }

  /**
   * DEBUG ONLY: stores a list of queries with per-candidate scores about signals used for prior
   * learning.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefNameDebugInfo> getDebugDetails() {
    return debugDetails;
  }

  /**
   * DEBUG ONLY: stores a list of queries with per-candidate scores about signals used for prior
   * learning.
   * @param debugDetails debugDetails or {@code null} for none
   */
  public RepositoryWebrefNameInfo setDebugDetails(java.util.List<RepositoryWebrefNameDebugInfo> debugDetails) {
    this.debugDetails = debugDetails;
    return this;
  }

  /**
   * Field which decides if this NameInfo should be included in model creation.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIncludeInModel() {
    return includeInModel;
  }

  /**
   * Field which decides if this NameInfo should be included in model creation.
   * @param includeInModel includeInModel or {@code null} for none
   */
  public RepositoryWebrefNameInfo setIncludeInModel(java.lang.Boolean includeInModel) {
    this.includeInModel = includeInModel;
    return this;
  }

  /**
   * The specific name to which this information applies.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefLocalizedString getName() {
    return name;
  }

  /**
   * The specific name to which this information applies.
   * @param name name or {@code null} for none
   */
  public RepositoryWebrefNameInfo setName(RepositoryWebrefLocalizedString name) {
    this.name = name;
    return this;
  }

  /**
   * N-gram data (e.g. n-gram IDF).
   * @return value or {@code null} for none
   */
  public RepositoryWebrefUniversalNgramData getNgramData() {
    return ngramData;
  }

  /**
   * N-gram data (e.g. n-gram IDF).
   * @param ngramData ngramData or {@code null} for none
   */
  public RepositoryWebrefNameInfo setNgramData(RepositoryWebrefUniversalNgramData ngramData) {
    this.ngramData = ngramData;
    return this;
  }

  /**
   * Lightweight token semantic metadata for inflected name.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefLightweightTokensPerNameLightweightToken getPerNameLightweightToken() {
    return perNameLightweightToken;
  }

  /**
   * Lightweight token semantic metadata for inflected name.
   * @param perNameLightweightToken perNameLightweightToken or {@code null} for none
   */
  public RepositoryWebrefNameInfo setPerNameLightweightToken(RepositoryWebrefLightweightTokensPerNameLightweightToken perNameLightweightToken) {
    this.perNameLightweightToken = perNameLightweightToken;
    return this;
  }

  /**
   * The name-specific scores. These scores only depend on the name and are independent of the
   * entity.
   * @return value or {@code null} for none
   */
  public RepositoryWebrefNameScores getScores() {
    return scores;
  }

  /**
   * The name-specific scores. These scores only depend on the name and are independent of the
   * entity.
   * @param scores scores or {@code null} for none
   */
  public RepositoryWebrefNameInfo setScores(RepositoryWebrefNameScores scores) {
    this.scores = scores;
    return this;
  }

  /**
   * The per-source scores.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefEntityNameSource> getSource() {
    return source;
  }

  /**
   * The per-source scores.
   * @param source source or {@code null} for none
   */
  public RepositoryWebrefNameInfo setSource(java.util.List<RepositoryWebrefEntityNameSource> source) {
    this.source = source;
    return this;
  }

  @Override
  public RepositoryWebrefNameInfo set(String fieldName, Object value) {
    return (RepositoryWebrefNameInfo) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefNameInfo clone() {
    return (RepositoryWebrefNameInfo) super.clone();
  }

}
