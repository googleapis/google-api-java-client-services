/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1.model;

/**
 * A Cloud Firestore Database.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Firestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleFirestoreAdminV1Database extends com.google.api.client.json.GenericJson {

  /**
   * The App Engine integration mode to use for this database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String appEngineIntegrationMode;

  /**
   * The concurrency control mode to use for this database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String concurrencyMode;

  /**
   * Output only. The timestamp at which this database was created. Databases created before 2016 do
   * not populate create_time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * State of delete protection for the database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deleteProtectionState;

  /**
   * Output only. The earliest timestamp at which older versions of the data can be read from the
   * database. See [version_retention_period] above; this field is populated with `now -
   * version_retention_period`. This value is continuously updated, and becomes stale the moment it
   * is queried. If you are using this value to recover data, make sure to account for the time from
   * the moment when the value is queried to the moment when you initiate the recovery.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String earliestVersionTime;

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on
   * update and delete requests to ensure the client has an up-to-date value before proceeding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Output only. The key_prefix for this database. This key_prefix is used, in combination with the
   * project id ("~") to construct the application id that is returned from the Cloud Datastore APIs
   * in Google App Engine first generation runtimes. This value may be empty in which case the appid
   * to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String keyPrefix;

  /**
   * The location of the database. Available locations are listed at
   * https://cloud.google.com/firestore/docs/locations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String locationId;

  /**
   * The resource name of the Database. Format: `projects/{project}/databases/{database}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Whether to enable the PITR feature on this database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pointInTimeRecoveryEnablement;

  /**
   * The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore
   * for information about how to choose.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Output only. The system-generated UUID4 for this Database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Output only. The timestamp at which this database was most recently updated. Note this only
   * includes updates to the database resource and not data contained by the database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. The period during which past versions of data are retained in the database. Any
   * read or query can specify a `read_time` within this window, and will read the state of the
   * database at that time. If the PITR feature is enabled, the retention period is 7 days.
   * Otherwise, the retention period is 1 hour.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String versionRetentionPeriod;

  /**
   * The App Engine integration mode to use for this database.
   * @return value or {@code null} for none
   */
  public java.lang.String getAppEngineIntegrationMode() {
    return appEngineIntegrationMode;
  }

  /**
   * The App Engine integration mode to use for this database.
   * @param appEngineIntegrationMode appEngineIntegrationMode or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setAppEngineIntegrationMode(java.lang.String appEngineIntegrationMode) {
    this.appEngineIntegrationMode = appEngineIntegrationMode;
    return this;
  }

  /**
   * The concurrency control mode to use for this database.
   * @return value or {@code null} for none
   */
  public java.lang.String getConcurrencyMode() {
    return concurrencyMode;
  }

  /**
   * The concurrency control mode to use for this database.
   * @param concurrencyMode concurrencyMode or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setConcurrencyMode(java.lang.String concurrencyMode) {
    this.concurrencyMode = concurrencyMode;
    return this;
  }

  /**
   * Output only. The timestamp at which this database was created. Databases created before 2016 do
   * not populate create_time.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The timestamp at which this database was created. Databases created before 2016 do
   * not populate create_time.
   * @param createTime createTime or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * State of delete protection for the database.
   * @return value or {@code null} for none
   */
  public java.lang.String getDeleteProtectionState() {
    return deleteProtectionState;
  }

  /**
   * State of delete protection for the database.
   * @param deleteProtectionState deleteProtectionState or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setDeleteProtectionState(java.lang.String deleteProtectionState) {
    this.deleteProtectionState = deleteProtectionState;
    return this;
  }

  /**
   * Output only. The earliest timestamp at which older versions of the data can be read from the
   * database. See [version_retention_period] above; this field is populated with `now -
   * version_retention_period`. This value is continuously updated, and becomes stale the moment it
   * is queried. If you are using this value to recover data, make sure to account for the time from
   * the moment when the value is queried to the moment when you initiate the recovery.
   * @return value or {@code null} for none
   */
  public String getEarliestVersionTime() {
    return earliestVersionTime;
  }

  /**
   * Output only. The earliest timestamp at which older versions of the data can be read from the
   * database. See [version_retention_period] above; this field is populated with `now -
   * version_retention_period`. This value is continuously updated, and becomes stale the moment it
   * is queried. If you are using this value to recover data, make sure to account for the time from
   * the moment when the value is queried to the moment when you initiate the recovery.
   * @param earliestVersionTime earliestVersionTime or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setEarliestVersionTime(String earliestVersionTime) {
    this.earliestVersionTime = earliestVersionTime;
    return this;
  }

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on
   * update and delete requests to ensure the client has an up-to-date value before proceeding.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on
   * update and delete requests to ensure the client has an up-to-date value before proceeding.
   * @param etag etag or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Output only. The key_prefix for this database. This key_prefix is used, in combination with the
   * project id ("~") to construct the application id that is returned from the Cloud Datastore APIs
   * in Google App Engine first generation runtimes. This value may be empty in which case the appid
   * to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
   * @return value or {@code null} for none
   */
  public java.lang.String getKeyPrefix() {
    return keyPrefix;
  }

  /**
   * Output only. The key_prefix for this database. This key_prefix is used, in combination with the
   * project id ("~") to construct the application id that is returned from the Cloud Datastore APIs
   * in Google App Engine first generation runtimes. This value may be empty in which case the appid
   * to use for URL-encoded keys is the project_id (eg: foo instead of v~foo).
   * @param keyPrefix keyPrefix or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setKeyPrefix(java.lang.String keyPrefix) {
    this.keyPrefix = keyPrefix;
    return this;
  }

  /**
   * The location of the database. Available locations are listed at
   * https://cloud.google.com/firestore/docs/locations.
   * @return value or {@code null} for none
   */
  public java.lang.String getLocationId() {
    return locationId;
  }

  /**
   * The location of the database. Available locations are listed at
   * https://cloud.google.com/firestore/docs/locations.
   * @param locationId locationId or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setLocationId(java.lang.String locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The resource name of the Database. Format: `projects/{project}/databases/{database}`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The resource name of the Database. Format: `projects/{project}/databases/{database}`
   * @param name name or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Whether to enable the PITR feature on this database.
   * @return value or {@code null} for none
   */
  public java.lang.String getPointInTimeRecoveryEnablement() {
    return pointInTimeRecoveryEnablement;
  }

  /**
   * Whether to enable the PITR feature on this database.
   * @param pointInTimeRecoveryEnablement pointInTimeRecoveryEnablement or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setPointInTimeRecoveryEnablement(java.lang.String pointInTimeRecoveryEnablement) {
    this.pointInTimeRecoveryEnablement = pointInTimeRecoveryEnablement;
    return this;
  }

  /**
   * The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore
   * for information about how to choose.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The type of the database. See https://cloud.google.com/datastore/docs/firestore-or-datastore
   * for information about how to choose.
   * @param type type or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * Output only. The system-generated UUID4 for this Database.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. The system-generated UUID4 for this Database.
   * @param uid uid or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Output only. The timestamp at which this database was most recently updated. Note this only
   * includes updates to the database resource and not data contained by the database.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The timestamp at which this database was most recently updated. Note this only
   * includes updates to the database resource and not data contained by the database.
   * @param updateTime updateTime or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Output only. The period during which past versions of data are retained in the database. Any
   * read or query can specify a `read_time` within this window, and will read the state of the
   * database at that time. If the PITR feature is enabled, the retention period is 7 days.
   * Otherwise, the retention period is 1 hour.
   * @return value or {@code null} for none
   */
  public String getVersionRetentionPeriod() {
    return versionRetentionPeriod;
  }

  /**
   * Output only. The period during which past versions of data are retained in the database. Any
   * read or query can specify a `read_time` within this window, and will read the state of the
   * database at that time. If the PITR feature is enabled, the retention period is 7 days.
   * Otherwise, the retention period is 1 hour.
   * @param versionRetentionPeriod versionRetentionPeriod or {@code null} for none
   */
  public GoogleFirestoreAdminV1Database setVersionRetentionPeriod(String versionRetentionPeriod) {
    this.versionRetentionPeriod = versionRetentionPeriod;
    return this;
  }

  @Override
  public GoogleFirestoreAdminV1Database set(String fieldName, Object value) {
    return (GoogleFirestoreAdminV1Database) super.set(fieldName, value);
  }

  @Override
  public GoogleFirestoreAdminV1Database clone() {
    return (GoogleFirestoreAdminV1Database) super.clone();
  }

}
