/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.discoveryengine.v1.model;

/**
 * Session specification. Multi-turn Search feature is currently at private GA stage. Please use
 * v1alpha or v1beta version instead before we launch this feature to public GA. Or ask for
 * allowlisting through Google Support team.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Discovery Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDiscoveryengineV1betaSearchRequestSessionSpec extends com.google.api.client.json.GenericJson {

  /**
   * If set, the search result gets stored to the "turn" specified by this query ID. Example: Let's
   * say the session looks like this: session { name: ".../sessions/xxx" turns { query { text: "What
   * is foo?" query_id: ".../questions/yyy" } answer: "Foo is ..." } turns { query { text: "How
   * about bar then?" query_id: ".../questions/zzz" } } } The user can call /search API with a
   * request like this: session: ".../sessions/xxx" session_spec { query_id: ".../questions/zzz" }
   * Then, the API stores the search result, associated with the last turn. The stored search result
   * can be used by a subsequent /answer API call (with the session ID and the query ID specified).
   * Also, it is possible to call /search and /answer in parallel with the same session ID & query
   * ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String queryId;

  /**
   * The number of top search results to persist. The persisted search results can be used for the
   * subsequent /answer api call. This field is simliar to the `summary_result_count` field in
   * SearchRequest.ContentSearchSpec.SummarySpec.summary_result_count. At most 10 results for
   * documents mode, or 50 for chunks mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer searchResultPersistenceCount;

  /**
   * If set, the search result gets stored to the "turn" specified by this query ID. Example: Let's
   * say the session looks like this: session { name: ".../sessions/xxx" turns { query { text: "What
   * is foo?" query_id: ".../questions/yyy" } answer: "Foo is ..." } turns { query { text: "How
   * about bar then?" query_id: ".../questions/zzz" } } } The user can call /search API with a
   * request like this: session: ".../sessions/xxx" session_spec { query_id: ".../questions/zzz" }
   * Then, the API stores the search result, associated with the last turn. The stored search result
   * can be used by a subsequent /answer API call (with the session ID and the query ID specified).
   * Also, it is possible to call /search and /answer in parallel with the same session ID & query
   * ID.
   * @return value or {@code null} for none
   */
  public java.lang.String getQueryId() {
    return queryId;
  }

  /**
   * If set, the search result gets stored to the "turn" specified by this query ID. Example: Let's
   * say the session looks like this: session { name: ".../sessions/xxx" turns { query { text: "What
   * is foo?" query_id: ".../questions/yyy" } answer: "Foo is ..." } turns { query { text: "How
   * about bar then?" query_id: ".../questions/zzz" } } } The user can call /search API with a
   * request like this: session: ".../sessions/xxx" session_spec { query_id: ".../questions/zzz" }
   * Then, the API stores the search result, associated with the last turn. The stored search result
   * can be used by a subsequent /answer API call (with the session ID and the query ID specified).
   * Also, it is possible to call /search and /answer in parallel with the same session ID & query
   * ID.
   * @param queryId queryId or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaSearchRequestSessionSpec setQueryId(java.lang.String queryId) {
    this.queryId = queryId;
    return this;
  }

  /**
   * The number of top search results to persist. The persisted search results can be used for the
   * subsequent /answer api call. This field is simliar to the `summary_result_count` field in
   * SearchRequest.ContentSearchSpec.SummarySpec.summary_result_count. At most 10 results for
   * documents mode, or 50 for chunks mode.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSearchResultPersistenceCount() {
    return searchResultPersistenceCount;
  }

  /**
   * The number of top search results to persist. The persisted search results can be used for the
   * subsequent /answer api call. This field is simliar to the `summary_result_count` field in
   * SearchRequest.ContentSearchSpec.SummarySpec.summary_result_count. At most 10 results for
   * documents mode, or 50 for chunks mode.
   * @param searchResultPersistenceCount searchResultPersistenceCount or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaSearchRequestSessionSpec setSearchResultPersistenceCount(java.lang.Integer searchResultPersistenceCount) {
    this.searchResultPersistenceCount = searchResultPersistenceCount;
    return this;
  }

  @Override
  public GoogleCloudDiscoveryengineV1betaSearchRequestSessionSpec set(String fieldName, Object value) {
    return (GoogleCloudDiscoveryengineV1betaSearchRequestSessionSpec) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDiscoveryengineV1betaSearchRequestSessionSpec clone() {
    return (GoogleCloudDiscoveryengineV1betaSearchRequestSessionSpec) super.clone();
  }

}
