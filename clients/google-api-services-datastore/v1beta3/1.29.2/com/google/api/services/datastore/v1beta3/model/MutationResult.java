/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastore.v1beta3.model;

/**
 * The result of applying a mutation.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Datastore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MutationResult extends com.google.api.client.json.GenericJson {

  /**
   * Whether a conflict was detected for this mutation. Always false when a conflict detection
   * strategy field is not set in the mutation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean conflictDetected;

  /**
   * The automatically allocated key. Set only when the mutation allocated a key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Key key;

  /**
   * The version of the entity on the server after processing the mutation. If the mutation doesn't
   * change anything on the server, then the version will be the version of the current entity or,
   * if no entity is present, a version that is strictly greater than the version of any previous
   * entity and less than the version of any possible future entity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long version;

  /**
   * Whether a conflict was detected for this mutation. Always false when a conflict detection
   * strategy field is not set in the mutation.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getConflictDetected() {
    return conflictDetected;
  }

  /**
   * Whether a conflict was detected for this mutation. Always false when a conflict detection
   * strategy field is not set in the mutation.
   * @param conflictDetected conflictDetected or {@code null} for none
   */
  public MutationResult setConflictDetected(java.lang.Boolean conflictDetected) {
    this.conflictDetected = conflictDetected;
    return this;
  }

  /**
   * The automatically allocated key. Set only when the mutation allocated a key.
   * @return value or {@code null} for none
   */
  public Key getKey() {
    return key;
  }

  /**
   * The automatically allocated key. Set only when the mutation allocated a key.
   * @param key key or {@code null} for none
   */
  public MutationResult setKey(Key key) {
    this.key = key;
    return this;
  }

  /**
   * The version of the entity on the server after processing the mutation. If the mutation doesn't
   * change anything on the server, then the version will be the version of the current entity or,
   * if no entity is present, a version that is strictly greater than the version of any previous
   * entity and less than the version of any possible future entity.
   * @return value or {@code null} for none
   */
  public java.lang.Long getVersion() {
    return version;
  }

  /**
   * The version of the entity on the server after processing the mutation. If the mutation doesn't
   * change anything on the server, then the version will be the version of the current entity or,
   * if no entity is present, a version that is strictly greater than the version of any previous
   * entity and less than the version of any possible future entity.
   * @param version version or {@code null} for none
   */
  public MutationResult setVersion(java.lang.Long version) {
    this.version = version;
    return this;
  }

  @Override
  public MutationResult set(String fieldName, Object value) {
    return (MutationResult) super.set(fieldName, value);
  }

  @Override
  public MutationResult clone() {
    return (MutationResult) super.clone();
  }

}
