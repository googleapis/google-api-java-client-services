/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.metastore.v1beta.model;

/**
 * Request message for DataprocMetastore.AlterTableProperties.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Dataproc Metastore API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AlterTablePropertiesRequest extends com.google.api.client.json.GenericJson {

  /**
   * A map that describes the desired values to mutate. If update_mask is empty, the properties will
   * not update. Otherwise, the properties only alters the value whose associated paths exist in the
   * update mask
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> properties;

  /**
   * Required. The name of the table containing the properties you're altering in the following
   * format.databases/{database_id}/tables/{table_id}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tableName;

  /**
   * A field mask that specifies the metadata table properties that are overwritten by the update.
   * Fields specified in the update_mask are relative to the resource (not to the full request). A
   * field is overwritten if it is in the mask.For example, given the target properties: properties
   * { a: 1 b: 2 } And an update properties: properties { a: 2 b: 3 c: 4 } then if the field mask
   * is:paths: "properties.b", "properties.c"then the result will be: properties { a: 1 b: 3 c: 4 }
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateMask;

  /**
   * A map that describes the desired values to mutate. If update_mask is empty, the properties will
   * not update. Otherwise, the properties only alters the value whose associated paths exist in the
   * update mask
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getProperties() {
    return properties;
  }

  /**
   * A map that describes the desired values to mutate. If update_mask is empty, the properties will
   * not update. Otherwise, the properties only alters the value whose associated paths exist in the
   * update mask
   * @param properties properties or {@code null} for none
   */
  public AlterTablePropertiesRequest setProperties(java.util.Map<String, java.lang.String> properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Required. The name of the table containing the properties you're altering in the following
   * format.databases/{database_id}/tables/{table_id}
   * @return value or {@code null} for none
   */
  public java.lang.String getTableName() {
    return tableName;
  }

  /**
   * Required. The name of the table containing the properties you're altering in the following
   * format.databases/{database_id}/tables/{table_id}
   * @param tableName tableName or {@code null} for none
   */
  public AlterTablePropertiesRequest setTableName(java.lang.String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * A field mask that specifies the metadata table properties that are overwritten by the update.
   * Fields specified in the update_mask are relative to the resource (not to the full request). A
   * field is overwritten if it is in the mask.For example, given the target properties: properties
   * { a: 1 b: 2 } And an update properties: properties { a: 2 b: 3 c: 4 } then if the field mask
   * is:paths: "properties.b", "properties.c"then the result will be: properties { a: 1 b: 3 c: 4 }
   * @return value or {@code null} for none
   */
  public String getUpdateMask() {
    return updateMask;
  }

  /**
   * A field mask that specifies the metadata table properties that are overwritten by the update.
   * Fields specified in the update_mask are relative to the resource (not to the full request). A
   * field is overwritten if it is in the mask.For example, given the target properties: properties
   * { a: 1 b: 2 } And an update properties: properties { a: 2 b: 3 c: 4 } then if the field mask
   * is:paths: "properties.b", "properties.c"then the result will be: properties { a: 1 b: 3 c: 4 }
   * @param updateMask updateMask or {@code null} for none
   */
  public AlterTablePropertiesRequest setUpdateMask(String updateMask) {
    this.updateMask = updateMask;
    return this;
  }

  @Override
  public AlterTablePropertiesRequest set(String fieldName, Object value) {
    return (AlterTablePropertiesRequest) super.set(fieldName, value);
  }

  @Override
  public AlterTablePropertiesRequest clone() {
    return (AlterTablePropertiesRequest) super.clone();
  }

}
