/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.places.v1.model;

/**
 * Information about a photo of a place.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Places API (New). For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleMapsPlacesV1Photo extends com.google.api.client.json.GenericJson {

  /**
   * This photo's authors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleMapsPlacesV1AuthorAttribution> authorAttributions;

  static {
    // hack to force ProGuard to consider GoogleMapsPlacesV1AuthorAttribution used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleMapsPlacesV1AuthorAttribution.class);
  }

  /**
   * A link where users can flag a problem with the photo.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String flagContentUri;

  /**
   * A link to show the photo on Google Maps.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String googleMapsUri;

  /**
   * The maximum available height, in pixels.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer heightPx;

  /**
   * Identifier. A reference representing this place photo which may be used to look up this place
   * photo again (also called the API "resource" name: `places/{place_id}/photos/{photo}`).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The maximum available width, in pixels.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer widthPx;

  /**
   * This photo's authors.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleMapsPlacesV1AuthorAttribution> getAuthorAttributions() {
    return authorAttributions;
  }

  /**
   * This photo's authors.
   * @param authorAttributions authorAttributions or {@code null} for none
   */
  public GoogleMapsPlacesV1Photo setAuthorAttributions(java.util.List<GoogleMapsPlacesV1AuthorAttribution> authorAttributions) {
    this.authorAttributions = authorAttributions;
    return this;
  }

  /**
   * A link where users can flag a problem with the photo.
   * @return value or {@code null} for none
   */
  public java.lang.String getFlagContentUri() {
    return flagContentUri;
  }

  /**
   * A link where users can flag a problem with the photo.
   * @param flagContentUri flagContentUri or {@code null} for none
   */
  public GoogleMapsPlacesV1Photo setFlagContentUri(java.lang.String flagContentUri) {
    this.flagContentUri = flagContentUri;
    return this;
  }

  /**
   * A link to show the photo on Google Maps.
   * @return value or {@code null} for none
   */
  public java.lang.String getGoogleMapsUri() {
    return googleMapsUri;
  }

  /**
   * A link to show the photo on Google Maps.
   * @param googleMapsUri googleMapsUri or {@code null} for none
   */
  public GoogleMapsPlacesV1Photo setGoogleMapsUri(java.lang.String googleMapsUri) {
    this.googleMapsUri = googleMapsUri;
    return this;
  }

  /**
   * The maximum available height, in pixels.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHeightPx() {
    return heightPx;
  }

  /**
   * The maximum available height, in pixels.
   * @param heightPx heightPx or {@code null} for none
   */
  public GoogleMapsPlacesV1Photo setHeightPx(java.lang.Integer heightPx) {
    this.heightPx = heightPx;
    return this;
  }

  /**
   * Identifier. A reference representing this place photo which may be used to look up this place
   * photo again (also called the API "resource" name: `places/{place_id}/photos/{photo}`).
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. A reference representing this place photo which may be used to look up this place
   * photo again (also called the API "resource" name: `places/{place_id}/photos/{photo}`).
   * @param name name or {@code null} for none
   */
  public GoogleMapsPlacesV1Photo setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The maximum available width, in pixels.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWidthPx() {
    return widthPx;
  }

  /**
   * The maximum available width, in pixels.
   * @param widthPx widthPx or {@code null} for none
   */
  public GoogleMapsPlacesV1Photo setWidthPx(java.lang.Integer widthPx) {
    this.widthPx = widthPx;
    return this;
  }

  @Override
  public GoogleMapsPlacesV1Photo set(String fieldName, Object value) {
    return (GoogleMapsPlacesV1Photo) super.set(fieldName, value);
  }

  @Override
  public GoogleMapsPlacesV1Photo clone() {
    return (GoogleMapsPlacesV1Photo) super.clone();
  }

}
