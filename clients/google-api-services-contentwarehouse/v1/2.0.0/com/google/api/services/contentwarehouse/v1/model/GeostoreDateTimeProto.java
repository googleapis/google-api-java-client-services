/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for GeostoreDateTimeProto.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreDateTimeProto extends com.google.api.client.json.GenericJson {

  /**
   * This attribute describes the precision of the date and time. It would be unusual for a data
   * provider to provide a precision along with their date. It is more likely that the precision of
   * a date will be inferred from the date format. For example "19th century" is likely to be
   * correct to the century, while "1800" is probably correct to the year. The precision should be
   * semantically interpreted as a cast, so a DateTimeProto object with a seconds value
   * corresponding to 2018-03-28 18:40:00 UTC and a precision of MONTH should be interpreted as
   * "March 2018". The enums above are only some of the possible precision levels for dates and
   * times. Clients may wish to add more precision enums in the future. However, these enums must be
   * ordered by decreasing duration. Clients should be able to write date formatting code that looks
   * like this: if (datetime.precision() <= DateTimeProto::PRECISION_CENTURY) { date =
   * FormatCenturyDate(proto.seconds()); } else if (proto.precision() <= case
   * DateTimeProto::PRECISION_DECADE) { date = FormatDecadeDate(proto.seconds()); } else { ... } See
   * geostore/base/public/datetime.h for date formatting utility functions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String precision;

  /**
   * Number of seconds since (or before) the UNIX epoch (January 1, 1970). This is also the standard
   * epoch for Java and Python time representations. If it is important for this time be displayed
   * correctly for different time zones, convert the time to Coordinated Universal Time (UTC).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double seconds;

  /**
   * This attribute describes the precision of the date and time. It would be unusual for a data
   * provider to provide a precision along with their date. It is more likely that the precision of
   * a date will be inferred from the date format. For example "19th century" is likely to be
   * correct to the century, while "1800" is probably correct to the year. The precision should be
   * semantically interpreted as a cast, so a DateTimeProto object with a seconds value
   * corresponding to 2018-03-28 18:40:00 UTC and a precision of MONTH should be interpreted as
   * "March 2018". The enums above are only some of the possible precision levels for dates and
   * times. Clients may wish to add more precision enums in the future. However, these enums must be
   * ordered by decreasing duration. Clients should be able to write date formatting code that looks
   * like this: if (datetime.precision() <= DateTimeProto::PRECISION_CENTURY) { date =
   * FormatCenturyDate(proto.seconds()); } else if (proto.precision() <= case
   * DateTimeProto::PRECISION_DECADE) { date = FormatDecadeDate(proto.seconds()); } else { ... } See
   * geostore/base/public/datetime.h for date formatting utility functions.
   * @return value or {@code null} for none
   */
  public java.lang.String getPrecision() {
    return precision;
  }

  /**
   * This attribute describes the precision of the date and time. It would be unusual for a data
   * provider to provide a precision along with their date. It is more likely that the precision of
   * a date will be inferred from the date format. For example "19th century" is likely to be
   * correct to the century, while "1800" is probably correct to the year. The precision should be
   * semantically interpreted as a cast, so a DateTimeProto object with a seconds value
   * corresponding to 2018-03-28 18:40:00 UTC and a precision of MONTH should be interpreted as
   * "March 2018". The enums above are only some of the possible precision levels for dates and
   * times. Clients may wish to add more precision enums in the future. However, these enums must be
   * ordered by decreasing duration. Clients should be able to write date formatting code that looks
   * like this: if (datetime.precision() <= DateTimeProto::PRECISION_CENTURY) { date =
   * FormatCenturyDate(proto.seconds()); } else if (proto.precision() <= case
   * DateTimeProto::PRECISION_DECADE) { date = FormatDecadeDate(proto.seconds()); } else { ... } See
   * geostore/base/public/datetime.h for date formatting utility functions.
   * @param precision precision or {@code null} for none
   */
  public GeostoreDateTimeProto setPrecision(java.lang.String precision) {
    this.precision = precision;
    return this;
  }

  /**
   * Number of seconds since (or before) the UNIX epoch (January 1, 1970). This is also the standard
   * epoch for Java and Python time representations. If it is important for this time be displayed
   * correctly for different time zones, convert the time to Coordinated Universal Time (UTC).
   * @return value or {@code null} for none
   */
  public java.lang.Double getSeconds() {
    return seconds;
  }

  /**
   * Number of seconds since (or before) the UNIX epoch (January 1, 1970). This is also the standard
   * epoch for Java and Python time representations. If it is important for this time be displayed
   * correctly for different time zones, convert the time to Coordinated Universal Time (UTC).
   * @param seconds seconds or {@code null} for none
   */
  public GeostoreDateTimeProto setSeconds(java.lang.Double seconds) {
    this.seconds = seconds;
    return this;
  }

  @Override
  public GeostoreDateTimeProto set(String fieldName, Object value) {
    return (GeostoreDateTimeProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreDateTimeProto clone() {
    return (GeostoreDateTimeProto) super.clone();
  }

}
