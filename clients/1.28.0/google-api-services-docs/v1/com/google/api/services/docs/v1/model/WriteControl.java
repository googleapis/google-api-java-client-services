/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.docs.v1.model;

/**
 * Provides control over how write requests are executed.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Docs API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class WriteControl extends com.google.api.client.json.GenericJson {

  /**
   * The revision ID of the document that the write request will be applied to. If this is not the
   * latest revision of the document, the request will not be processed and will return a 400 bad
   * request error.
   *
   * When a required revision ID is returned in a response, it indicates the revision ID of the
   * document after the request was applied.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String requiredRevisionId;

  /**
   * The target revision ID of the document that the write request will be applied to.
   *
   * If collaborator changes have occurred after the document was read using the API, the changes
   * produced by this write request will be transformed against the collaborator changes. This
   * results in a new revision of the document which incorporates both the changes in the request
   * and the collaborator changes, and the Docs server will resolve conflicting changes. When using
   * `target_revision_id`, the API client can be thought of as another collaborator of the document.
   *
   * The target revision ID may only be used to write to recent versions of a document. If the
   * target revision is too far behind the latest revision, the request will not be processed and
   * will return a 400 bad request error and the request should be retried after reading the latest
   * version of the document. In most cases a `revision_id` will remain valid for use as a target
   * revision for several minutes after it is read, but for frequently-edited documents this window
   * may be shorter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetRevisionId;

  /**
   * The revision ID of the document that the write request will be applied to. If this is not the
   * latest revision of the document, the request will not be processed and will return a 400 bad
   * request error.
   *
   * When a required revision ID is returned in a response, it indicates the revision ID of the
   * document after the request was applied.
   * @return value or {@code null} for none
   */
  public java.lang.String getRequiredRevisionId() {
    return requiredRevisionId;
  }

  /**
   * The revision ID of the document that the write request will be applied to. If this is not the
   * latest revision of the document, the request will not be processed and will return a 400 bad
   * request error.
   *
   * When a required revision ID is returned in a response, it indicates the revision ID of the
   * document after the request was applied.
   * @param requiredRevisionId requiredRevisionId or {@code null} for none
   */
  public WriteControl setRequiredRevisionId(java.lang.String requiredRevisionId) {
    this.requiredRevisionId = requiredRevisionId;
    return this;
  }

  /**
   * The target revision ID of the document that the write request will be applied to.
   *
   * If collaborator changes have occurred after the document was read using the API, the changes
   * produced by this write request will be transformed against the collaborator changes. This
   * results in a new revision of the document which incorporates both the changes in the request
   * and the collaborator changes, and the Docs server will resolve conflicting changes. When using
   * `target_revision_id`, the API client can be thought of as another collaborator of the document.
   *
   * The target revision ID may only be used to write to recent versions of a document. If the
   * target revision is too far behind the latest revision, the request will not be processed and
   * will return a 400 bad request error and the request should be retried after reading the latest
   * version of the document. In most cases a `revision_id` will remain valid for use as a target
   * revision for several minutes after it is read, but for frequently-edited documents this window
   * may be shorter.
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetRevisionId() {
    return targetRevisionId;
  }

  /**
   * The target revision ID of the document that the write request will be applied to.
   *
   * If collaborator changes have occurred after the document was read using the API, the changes
   * produced by this write request will be transformed against the collaborator changes. This
   * results in a new revision of the document which incorporates both the changes in the request
   * and the collaborator changes, and the Docs server will resolve conflicting changes. When using
   * `target_revision_id`, the API client can be thought of as another collaborator of the document.
   *
   * The target revision ID may only be used to write to recent versions of a document. If the
   * target revision is too far behind the latest revision, the request will not be processed and
   * will return a 400 bad request error and the request should be retried after reading the latest
   * version of the document. In most cases a `revision_id` will remain valid for use as a target
   * revision for several minutes after it is read, but for frequently-edited documents this window
   * may be shorter.
   * @param targetRevisionId targetRevisionId or {@code null} for none
   */
  public WriteControl setTargetRevisionId(java.lang.String targetRevisionId) {
    this.targetRevisionId = targetRevisionId;
    return this;
  }

  @Override
  public WriteControl set(String fieldName, Object value) {
    return (WriteControl) super.set(fieldName, value);
  }

  @Override
  public WriteControl clone() {
    return (WriteControl) super.clone();
  }

}
