/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networkservices.v1.model;

/**
 * The specifications for retries.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Services API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GrpcRouteRetryPolicy extends com.google.api.client.json.GenericJson {

  /**
   * Specifies the allowed number of retries. This number must be > 0. If not specpfied, default to
   * 1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long numRetries;

  /**
   * - connect-failure: Router will retry on failures connecting to Backend Services, for example
   * due to connection timeouts. - refused-stream: Router will retry if the backend service resets
   * the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to
   * retry. - cancelled: Router will retry if the gRPC status code in the response header is set to
   * cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header
   * is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in
   * the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC
   * status code in the response header is set to unavailable
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> retryConditions;

  /**
   * Specifies the allowed number of retries. This number must be > 0. If not specpfied, default to
   * 1.
   * @return value or {@code null} for none
   */
  public java.lang.Long getNumRetries() {
    return numRetries;
  }

  /**
   * Specifies the allowed number of retries. This number must be > 0. If not specpfied, default to
   * 1.
   * @param numRetries numRetries or {@code null} for none
   */
  public GrpcRouteRetryPolicy setNumRetries(java.lang.Long numRetries) {
    this.numRetries = numRetries;
    return this;
  }

  /**
   * - connect-failure: Router will retry on failures connecting to Backend Services, for example
   * due to connection timeouts. - refused-stream: Router will retry if the backend service resets
   * the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to
   * retry. - cancelled: Router will retry if the gRPC status code in the response header is set to
   * cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header
   * is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in
   * the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC
   * status code in the response header is set to unavailable
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getRetryConditions() {
    return retryConditions;
  }

  /**
   * - connect-failure: Router will retry on failures connecting to Backend Services, for example
   * due to connection timeouts. - refused-stream: Router will retry if the backend service resets
   * the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to
   * retry. - cancelled: Router will retry if the gRPC status code in the response header is set to
   * cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header
   * is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in
   * the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC
   * status code in the response header is set to unavailable
   * @param retryConditions retryConditions or {@code null} for none
   */
  public GrpcRouteRetryPolicy setRetryConditions(java.util.List<java.lang.String> retryConditions) {
    this.retryConditions = retryConditions;
    return this;
  }

  @Override
  public GrpcRouteRetryPolicy set(String fieldName, Object value) {
    return (GrpcRouteRetryPolicy) super.set(fieldName, value);
  }

  @Override
  public GrpcRouteRetryPolicy clone() {
    return (GrpcRouteRetryPolicy) super.clone();
  }

}
