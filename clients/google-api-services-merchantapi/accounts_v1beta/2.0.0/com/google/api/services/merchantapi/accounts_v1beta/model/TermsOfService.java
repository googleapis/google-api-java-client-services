/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.merchantapi.accounts_v1beta.model;

/**
 * The `TermsOfService` message represents a specific version of the terms of service that merchants
 * must accept to access certain features or services (see
 * https://support.google.com/merchants/answer/160173). This message is important for the onboarding
 * process, ensuring that merchants agree to the necessary legal agreements for using the service.
 * Merchants can retrieve the latest terms of service for a given `kind` and `region` through
 * `RetrieveLatestTermsOfService`, and accept them as required through `AcceptTermsOfService`.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Merchant API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TermsOfService extends com.google.api.client.json.GenericJson {

  /**
   * Whether this terms of service version is external. External terms of service versions can only
   * be agreed through external processes and not directly by the merchant through UI or API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean external;

  /**
   * URI for terms of service file that needs to be displayed to signing users.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fileUri;

  /**
   * The Kind this terms of service version applies to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * Identifier. The resource name of the terms of service version. Format:
   * `termsOfService/{version}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Region code as defined by [CLDR](https://cldr.unicode.org/). This is either a country where the
   * ToS applies specifically to that country or `001` when the same `TermsOfService` can be signed
   * in any country. However note that when signing a ToS that applies globally we still expect that
   * a specific country is provided (this should be merchant business country or program country of
   * participation).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String regionCode;

  /**
   * Whether this terms of service version is external. External terms of service versions can only
   * be agreed through external processes and not directly by the merchant through UI or API.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getExternal() {
    return external;
  }

  /**
   * Whether this terms of service version is external. External terms of service versions can only
   * be agreed through external processes and not directly by the merchant through UI or API.
   * @param external external or {@code null} for none
   */
  public TermsOfService setExternal(java.lang.Boolean external) {
    this.external = external;
    return this;
  }

  /**
   * URI for terms of service file that needs to be displayed to signing users.
   * @return value or {@code null} for none
   */
  public java.lang.String getFileUri() {
    return fileUri;
  }

  /**
   * URI for terms of service file that needs to be displayed to signing users.
   * @param fileUri fileUri or {@code null} for none
   */
  public TermsOfService setFileUri(java.lang.String fileUri) {
    this.fileUri = fileUri;
    return this;
  }

  /**
   * The Kind this terms of service version applies to.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * The Kind this terms of service version applies to.
   * @param kind kind or {@code null} for none
   */
  public TermsOfService setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifier. The resource name of the terms of service version. Format:
   * `termsOfService/{version}`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The resource name of the terms of service version. Format:
   * `termsOfService/{version}`
   * @param name name or {@code null} for none
   */
  public TermsOfService setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Region code as defined by [CLDR](https://cldr.unicode.org/). This is either a country where the
   * ToS applies specifically to that country or `001` when the same `TermsOfService` can be signed
   * in any country. However note that when signing a ToS that applies globally we still expect that
   * a specific country is provided (this should be merchant business country or program country of
   * participation).
   * @return value or {@code null} for none
   */
  public java.lang.String getRegionCode() {
    return regionCode;
  }

  /**
   * Region code as defined by [CLDR](https://cldr.unicode.org/). This is either a country where the
   * ToS applies specifically to that country or `001` when the same `TermsOfService` can be signed
   * in any country. However note that when signing a ToS that applies globally we still expect that
   * a specific country is provided (this should be merchant business country or program country of
   * participation).
   * @param regionCode regionCode or {@code null} for none
   */
  public TermsOfService setRegionCode(java.lang.String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  @Override
  public TermsOfService set(String fieldName, Object value) {
    return (TermsOfService) super.set(fieldName, value);
  }

  @Override
  public TermsOfService clone() {
    return (TermsOfService) super.clone();
  }

}
