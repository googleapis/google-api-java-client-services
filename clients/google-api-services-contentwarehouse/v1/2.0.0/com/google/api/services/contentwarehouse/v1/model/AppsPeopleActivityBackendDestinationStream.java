/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A DestinationStream is a /namespace/id[0]/id[1]/.../id[n] that represents a collection of
 * Activities. Example destinations: -The Profile Stream on http://plus.google.com/+JohnDoe/posts -A
 * Square Stream on http://plus.google.com/squares/123 -A "comment Stream" (Fountain) on
 * http://www.youtube.com/watch?id=123 It's possible for a single Activity to show in each of these
 * destinations - and it might behave/look slightly differently for each one. Destinations can have
 * their own business logic associated with them at both write-time and read-time server-side (these
 * are documented below). Each DestinationStream is indexed and can be retrieved using the
 * GetDestinationStreamRequest. For the repeated ID space indexing happens at all levels, e.g. if
 * you have: /square/123/abc /square/123/efd /square/456 You can fetch /square/123/abc directly or
 * /square/123 (which includes all Activities in both /square/123/abc and /square/123/efd), or even
 * /square which retrieves all Activities in the Square namespace (visible for that user). On the
 * storage layer, we represent DestinationStream as Channel
 * (http://cs/#google3/social/common/channel/channel.proto), since the storage does not have the
 * concept of a Stream. Both terms are used interchangeably within the service layer, but client of
 * Social Infrastructure should use the term DestinationStream. Next ID: 3
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AppsPeopleActivityBackendDestinationStream extends com.google.api.client.json.GenericJson {

  /**
   * The hierarchy of IDs. Each individual ID is "flat" and the repeated list defines the hierarchy.
   * Namespaces define the "validity" of this hierachy (depth, naming convention, etc) and the
   * server will reject invalid IDs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> id;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String namespace;

  /**
   * The hierarchy of IDs. Each individual ID is "flat" and the repeated list defines the hierarchy.
   * Namespaces define the "validity" of this hierachy (depth, naming convention, etc) and the
   * server will reject invalid IDs.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getId() {
    return id;
  }

  /**
   * The hierarchy of IDs. Each individual ID is "flat" and the repeated list defines the hierarchy.
   * Namespaces define the "validity" of this hierachy (depth, naming convention, etc) and the
   * server will reject invalid IDs.
   * @param id id or {@code null} for none
   */
  public AppsPeopleActivityBackendDestinationStream setId(java.util.List<java.lang.String> id) {
    this.id = id;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getNamespace() {
    return namespace;
  }

  /**
   * @param namespace namespace or {@code null} for none
   */
  public AppsPeopleActivityBackendDestinationStream setNamespace(java.lang.String namespace) {
    this.namespace = namespace;
    return this;
  }

  @Override
  public AppsPeopleActivityBackendDestinationStream set(String fieldName, Object value) {
    return (AppsPeopleActivityBackendDestinationStream) super.set(fieldName, value);
  }

  @Override
  public AppsPeopleActivityBackendDestinationStream clone() {
    return (AppsPeopleActivityBackendDestinationStream) super.clone();
  }

}
