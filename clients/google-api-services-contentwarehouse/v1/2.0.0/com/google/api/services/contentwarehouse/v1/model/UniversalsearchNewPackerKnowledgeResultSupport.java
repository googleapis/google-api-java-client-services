/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Information about the result support for a given interpretation.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class UniversalsearchNewPackerKnowledgeResultSupport extends com.google.api.client.json.GenericJson {

  /**
   * A debug message that summarizes how the score was computed. Populated if result was matched and
   * in debug mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String debug;

  /**
   * The docid of the result, if available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger docid;

  /**
   * The naviness for this result. Each matcher can determine the naviness to use for the result.
   * This can be copied directly from the result, or estimated based on clicks or some other
   * heuristic. The value should be between 0 and 1 and should indicate the probability that the
   * user will click on that result. The estimated_naviness is used to break ties when between
   * results with the same rank.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float estimatedNaviness;

  /**
   * All provenances of this result support.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<UniversalsearchNewPackerKnowledgeResultSupportProvenance> provenance;

  /**
   * The 0 based rank for this result. When the source is MAIN_GSR this corresponds to the index of
   * the result in the generic search response specific in AddKnowledgePackerPreprocessors.
   * Otherwise, the rank should be estimated so the result is closest in importance to the web
   * result at the same rank.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rank;

  /**
   * A score from 0 to 1 inclusive that represents the strength of the result support. A score of
   * one indicates this result is entirely about this interpretation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float score;

  /**
   * The source of the result support.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String source;

  /**
   * The result url when available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * A debug message that summarizes how the score was computed. Populated if result was matched and
   * in debug mode.
   * @return value or {@code null} for none
   */
  public java.lang.String getDebug() {
    return debug;
  }

  /**
   * A debug message that summarizes how the score was computed. Populated if result was matched and
   * in debug mode.
   * @param debug debug or {@code null} for none
   */
  public UniversalsearchNewPackerKnowledgeResultSupport setDebug(java.lang.String debug) {
    this.debug = debug;
    return this;
  }

  /**
   * The docid of the result, if available.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getDocid() {
    return docid;
  }

  /**
   * The docid of the result, if available.
   * @param docid docid or {@code null} for none
   */
  public UniversalsearchNewPackerKnowledgeResultSupport setDocid(java.math.BigInteger docid) {
    this.docid = docid;
    return this;
  }

  /**
   * The naviness for this result. Each matcher can determine the naviness to use for the result.
   * This can be copied directly from the result, or estimated based on clicks or some other
   * heuristic. The value should be between 0 and 1 and should indicate the probability that the
   * user will click on that result. The estimated_naviness is used to break ties when between
   * results with the same rank.
   * @return value or {@code null} for none
   */
  public java.lang.Float getEstimatedNaviness() {
    return estimatedNaviness;
  }

  /**
   * The naviness for this result. Each matcher can determine the naviness to use for the result.
   * This can be copied directly from the result, or estimated based on clicks or some other
   * heuristic. The value should be between 0 and 1 and should indicate the probability that the
   * user will click on that result. The estimated_naviness is used to break ties when between
   * results with the same rank.
   * @param estimatedNaviness estimatedNaviness or {@code null} for none
   */
  public UniversalsearchNewPackerKnowledgeResultSupport setEstimatedNaviness(java.lang.Float estimatedNaviness) {
    this.estimatedNaviness = estimatedNaviness;
    return this;
  }

  /**
   * All provenances of this result support.
   * @return value or {@code null} for none
   */
  public java.util.List<UniversalsearchNewPackerKnowledgeResultSupportProvenance> getProvenance() {
    return provenance;
  }

  /**
   * All provenances of this result support.
   * @param provenance provenance or {@code null} for none
   */
  public UniversalsearchNewPackerKnowledgeResultSupport setProvenance(java.util.List<UniversalsearchNewPackerKnowledgeResultSupportProvenance> provenance) {
    this.provenance = provenance;
    return this;
  }

  /**
   * The 0 based rank for this result. When the source is MAIN_GSR this corresponds to the index of
   * the result in the generic search response specific in AddKnowledgePackerPreprocessors.
   * Otherwise, the rank should be estimated so the result is closest in importance to the web
   * result at the same rank.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRank() {
    return rank;
  }

  /**
   * The 0 based rank for this result. When the source is MAIN_GSR this corresponds to the index of
   * the result in the generic search response specific in AddKnowledgePackerPreprocessors.
   * Otherwise, the rank should be estimated so the result is closest in importance to the web
   * result at the same rank.
   * @param rank rank or {@code null} for none
   */
  public UniversalsearchNewPackerKnowledgeResultSupport setRank(java.lang.Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * A score from 0 to 1 inclusive that represents the strength of the result support. A score of
   * one indicates this result is entirely about this interpretation.
   * @return value or {@code null} for none
   */
  public java.lang.Float getScore() {
    return score;
  }

  /**
   * A score from 0 to 1 inclusive that represents the strength of the result support. A score of
   * one indicates this result is entirely about this interpretation.
   * @param score score or {@code null} for none
   */
  public UniversalsearchNewPackerKnowledgeResultSupport setScore(java.lang.Float score) {
    this.score = score;
    return this;
  }

  /**
   * The source of the result support.
   * @return value or {@code null} for none
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * The source of the result support.
   * @param source source or {@code null} for none
   */
  public UniversalsearchNewPackerKnowledgeResultSupport setSource(java.lang.String source) {
    this.source = source;
    return this;
  }

  /**
   * The result url when available.
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * The result url when available.
   * @param url url or {@code null} for none
   */
  public UniversalsearchNewPackerKnowledgeResultSupport setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  @Override
  public UniversalsearchNewPackerKnowledgeResultSupport set(String fieldName, Object value) {
    return (UniversalsearchNewPackerKnowledgeResultSupport) super.set(fieldName, value);
  }

  @Override
  public UniversalsearchNewPackerKnowledgeResultSupport clone() {
    return (UniversalsearchNewPackerKnowledgeResultSupport) super.clone();
  }

}
