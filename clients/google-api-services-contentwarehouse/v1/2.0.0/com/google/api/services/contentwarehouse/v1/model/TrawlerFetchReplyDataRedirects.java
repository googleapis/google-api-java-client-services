/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The sequence of redirects fetched, if applicable. This includes url plus stats for each hop after
 * the first hop. NOTE: This can be one redirect longer than the chain of redirects *followed*, in
 * the case where there was a redirect at the end of the chain that the fetcher detected but did not
 * follow.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TrawlerFetchReplyDataRedirects extends com.google.api.client.json.GenericJson {

  /**
   * The server SSL certificate chain in SSLCertificateInfo protobuf format. See this field in
   * FetchReplyData (i.e., the initial hop) for more description on when it will be populated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("BadSSLCertificate")
  private java.lang.String badSSLCertificate;

  /**
   * Per redirect hop timestamps. This
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("CrawlTimes")
  private TrawlerCrawlTimes crawlTimes;

  /**
   * Download time of this fetch (ms)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DownloadTime")
  private java.lang.Integer downloadTime;

  /**
   * ## stats If fetched, ip info.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Endpoints")
  private TrawlerTCPIPInfo endpoints;

  /**
   * This specifies if the url in a redirect was rewritten to HTTPS because of an HSTS policy for
   * the domain. See comments on FetchReplyData.HSTSInfo for how this field's values. A redirect
   * that was rewritten with HSTS will have HSTS_STATUS_REWRITTEN ## here.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("HSTSInfo")
  private java.lang.String hSTSInfo;

  /**
   * The HTTP response code for this hop. We need this since multiple response codes may have the
   * same redirect type (e.g., 302 and 307 are both REDIRECT_TEMPORARILY), but clients may want to
   * know which one was received. Note this is set only for the hops that are followed (i.e.,
   * TargetUrl is present). If the last redirect hop was not followed the fetch status will be
   * URL_NOT_FOLLOWED, and the response code will be in the top level ProtocolResponse field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("HTTPResponseCode")
  private java.lang.Integer hTTPResponseCode;

  /**
   * Extra trawler::PageNoIndexInfo for this hop. Integer: ORed together bits from
   * trawler::PageNoIndexInfo. The information specified by this field comes from the http header or
   * content of the source url, not the "TargetUrl" in this Redirects group.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("HopPageNoIndexInfo")
  private java.lang.Integer hopPageNoIndexInfo;

  /**
   * trawler::ReuseInfo with status of IMS/IMF/cache query, for this hop.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("HopReuseInfo")
  private java.lang.String hopReuseInfo;

  /**
   * Extra trawler::RobotsInfo for this hop. Integer: ORed together bits from trawler::RobotsInfo
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("HopRobotsInfo")
  private java.lang.Integer hopRobotsInfo;

  /**
   * If known, the hostid for this hop
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("HostId") @com.google.api.client.json.JsonString
  private java.math.BigInteger hostId;

  /**
   * The http headers we sent for fetching this redirect hop. Not normally filled in, unless
   * FetchParams.WantSentHeaders is set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("HttpRequestHeaders")
  private java.lang.String httpRequestHeaders;

  /**
   * The http headers we received from this redirect hop. Trawler does not fill this in; this is
   * intended as a placeholder for crawls like webmirror that fill in and want to track this across
   * redirect hops.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("HttpResponseHeaders")
  private java.lang.String httpResponseHeaders;

  /**
   * bytes: can contain bad encoding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("RawTargetUrl")
  private java.lang.String rawTargetUrl;

  /**
   * Refresh time in meta redirect tag
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("RefreshTime")
  private java.lang.Integer refreshTime;

  /**
   * The robots.txt we used for this fetch. Not normally filled in unless WantRobotsBody is set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("RobotsTxt")
  private java.lang.String robotsTxt;

  /**
   * For meta-redirects, this field may contain the body of the source document. Currently only
   * filled client side and not implemented (yet) for server-side redirects.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("SourceBody")
  private TrawlerFetchBodyData sourceBody;

  /**
   * Difference between the following two fields: TargetUrl is set when we have followed the
   * redirect target, and the url is canonicalized. RawTargetUrl is set in either of the following
   * two cases: (1) The url has not be been followed. For example, the redirect is intended to be
   * handled by the client. In the fetch reply response, you will see the url's status as
   * URL_NOT_FOLLOWED-NOT_FOLLOWED*. (2) The extracted redirect url is different from its
   * *canonicalized* form. For example, if the target url contains fragments, then this RawTargetUrl
   * will have the fragments. Redirect target
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("TargetUrl")
  private java.lang.String targetUrl;

  /**
   * URL and redirect type
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Type")
  private java.lang.String type;

  /**
   * The server SSL certificate chain in SSLCertificateInfo protobuf format. See this field in
   * FetchReplyData (i.e., the initial hop) for more description on when it will be populated.
   * @see #decodeBadSSLCertificate()
   * @return value or {@code null} for none
   */
  public java.lang.String getBadSSLCertificate() {
    return badSSLCertificate;
  }

  /**
   * The server SSL certificate chain in SSLCertificateInfo protobuf format. See this field in
   * FetchReplyData (i.e., the initial hop) for more description on when it will be populated.
   * @see #getBadSSLCertificate()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeBadSSLCertificate() {
    return com.google.api.client.util.Base64.decodeBase64(badSSLCertificate);
  }

  /**
   * The server SSL certificate chain in SSLCertificateInfo protobuf format. See this field in
   * FetchReplyData (i.e., the initial hop) for more description on when it will be populated.
   * @see #encodeBadSSLCertificate()
   * @param badSSLCertificate badSSLCertificate or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setBadSSLCertificate(java.lang.String badSSLCertificate) {
    this.badSSLCertificate = badSSLCertificate;
    return this;
  }

  /**
   * The server SSL certificate chain in SSLCertificateInfo protobuf format. See this field in
   * FetchReplyData (i.e., the initial hop) for more description on when it will be populated.
   * @see #setBadSSLCertificate()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public TrawlerFetchReplyDataRedirects encodeBadSSLCertificate(byte[] badSSLCertificate) {
    this.badSSLCertificate = com.google.api.client.util.Base64.encodeBase64URLSafeString(badSSLCertificate);
    return this;
  }

  /**
   * Per redirect hop timestamps. This
   * @return value or {@code null} for none
   */
  public TrawlerCrawlTimes getCrawlTimes() {
    return crawlTimes;
  }

  /**
   * Per redirect hop timestamps. This
   * @param crawlTimes crawlTimes or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setCrawlTimes(TrawlerCrawlTimes crawlTimes) {
    this.crawlTimes = crawlTimes;
    return this;
  }

  /**
   * Download time of this fetch (ms)
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDownloadTime() {
    return downloadTime;
  }

  /**
   * Download time of this fetch (ms)
   * @param downloadTime downloadTime or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setDownloadTime(java.lang.Integer downloadTime) {
    this.downloadTime = downloadTime;
    return this;
  }

  /**
   * ## stats If fetched, ip info.
   * @return value or {@code null} for none
   */
  public TrawlerTCPIPInfo getEndpoints() {
    return endpoints;
  }

  /**
   * ## stats If fetched, ip info.
   * @param endpoints endpoints or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setEndpoints(TrawlerTCPIPInfo endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  /**
   * This specifies if the url in a redirect was rewritten to HTTPS because of an HSTS policy for
   * the domain. See comments on FetchReplyData.HSTSInfo for how this field's values. A redirect
   * that was rewritten with HSTS will have HSTS_STATUS_REWRITTEN ## here.
   * @return value or {@code null} for none
   */
  public java.lang.String getHSTSInfo() {
    return hSTSInfo;
  }

  /**
   * This specifies if the url in a redirect was rewritten to HTTPS because of an HSTS policy for
   * the domain. See comments on FetchReplyData.HSTSInfo for how this field's values. A redirect
   * that was rewritten with HSTS will have HSTS_STATUS_REWRITTEN ## here.
   * @param hSTSInfo hSTSInfo or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setHSTSInfo(java.lang.String hSTSInfo) {
    this.hSTSInfo = hSTSInfo;
    return this;
  }

  /**
   * The HTTP response code for this hop. We need this since multiple response codes may have the
   * same redirect type (e.g., 302 and 307 are both REDIRECT_TEMPORARILY), but clients may want to
   * know which one was received. Note this is set only for the hops that are followed (i.e.,
   * TargetUrl is present). If the last redirect hop was not followed the fetch status will be
   * URL_NOT_FOLLOWED, and the response code will be in the top level ProtocolResponse field.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHTTPResponseCode() {
    return hTTPResponseCode;
  }

  /**
   * The HTTP response code for this hop. We need this since multiple response codes may have the
   * same redirect type (e.g., 302 and 307 are both REDIRECT_TEMPORARILY), but clients may want to
   * know which one was received. Note this is set only for the hops that are followed (i.e.,
   * TargetUrl is present). If the last redirect hop was not followed the fetch status will be
   * URL_NOT_FOLLOWED, and the response code will be in the top level ProtocolResponse field.
   * @param hTTPResponseCode hTTPResponseCode or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setHTTPResponseCode(java.lang.Integer hTTPResponseCode) {
    this.hTTPResponseCode = hTTPResponseCode;
    return this;
  }

  /**
   * Extra trawler::PageNoIndexInfo for this hop. Integer: ORed together bits from
   * trawler::PageNoIndexInfo. The information specified by this field comes from the http header or
   * content of the source url, not the "TargetUrl" in this Redirects group.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHopPageNoIndexInfo() {
    return hopPageNoIndexInfo;
  }

  /**
   * Extra trawler::PageNoIndexInfo for this hop. Integer: ORed together bits from
   * trawler::PageNoIndexInfo. The information specified by this field comes from the http header or
   * content of the source url, not the "TargetUrl" in this Redirects group.
   * @param hopPageNoIndexInfo hopPageNoIndexInfo or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setHopPageNoIndexInfo(java.lang.Integer hopPageNoIndexInfo) {
    this.hopPageNoIndexInfo = hopPageNoIndexInfo;
    return this;
  }

  /**
   * trawler::ReuseInfo with status of IMS/IMF/cache query, for this hop.
   * @return value or {@code null} for none
   */
  public java.lang.String getHopReuseInfo() {
    return hopReuseInfo;
  }

  /**
   * trawler::ReuseInfo with status of IMS/IMF/cache query, for this hop.
   * @param hopReuseInfo hopReuseInfo or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setHopReuseInfo(java.lang.String hopReuseInfo) {
    this.hopReuseInfo = hopReuseInfo;
    return this;
  }

  /**
   * Extra trawler::RobotsInfo for this hop. Integer: ORed together bits from trawler::RobotsInfo
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHopRobotsInfo() {
    return hopRobotsInfo;
  }

  /**
   * Extra trawler::RobotsInfo for this hop. Integer: ORed together bits from trawler::RobotsInfo
   * @param hopRobotsInfo hopRobotsInfo or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setHopRobotsInfo(java.lang.Integer hopRobotsInfo) {
    this.hopRobotsInfo = hopRobotsInfo;
    return this;
  }

  /**
   * If known, the hostid for this hop
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getHostId() {
    return hostId;
  }

  /**
   * If known, the hostid for this hop
   * @param hostId hostId or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setHostId(java.math.BigInteger hostId) {
    this.hostId = hostId;
    return this;
  }

  /**
   * The http headers we sent for fetching this redirect hop. Not normally filled in, unless
   * FetchParams.WantSentHeaders is set.
   * @return value or {@code null} for none
   */
  public java.lang.String getHttpRequestHeaders() {
    return httpRequestHeaders;
  }

  /**
   * The http headers we sent for fetching this redirect hop. Not normally filled in, unless
   * FetchParams.WantSentHeaders is set.
   * @param httpRequestHeaders httpRequestHeaders or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setHttpRequestHeaders(java.lang.String httpRequestHeaders) {
    this.httpRequestHeaders = httpRequestHeaders;
    return this;
  }

  /**
   * The http headers we received from this redirect hop. Trawler does not fill this in; this is
   * intended as a placeholder for crawls like webmirror that fill in and want to track this across
   * redirect hops.
   * @return value or {@code null} for none
   */
  public java.lang.String getHttpResponseHeaders() {
    return httpResponseHeaders;
  }

  /**
   * The http headers we received from this redirect hop. Trawler does not fill this in; this is
   * intended as a placeholder for crawls like webmirror that fill in and want to track this across
   * redirect hops.
   * @param httpResponseHeaders httpResponseHeaders or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setHttpResponseHeaders(java.lang.String httpResponseHeaders) {
    this.httpResponseHeaders = httpResponseHeaders;
    return this;
  }

  /**
   * bytes: can contain bad encoding.
   * @see #decodeRawTargetUrl()
   * @return value or {@code null} for none
   */
  public java.lang.String getRawTargetUrl() {
    return rawTargetUrl;
  }

  /**
   * bytes: can contain bad encoding.
   * @see #getRawTargetUrl()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeRawTargetUrl() {
    return com.google.api.client.util.Base64.decodeBase64(rawTargetUrl);
  }

  /**
   * bytes: can contain bad encoding.
   * @see #encodeRawTargetUrl()
   * @param rawTargetUrl rawTargetUrl or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setRawTargetUrl(java.lang.String rawTargetUrl) {
    this.rawTargetUrl = rawTargetUrl;
    return this;
  }

  /**
   * bytes: can contain bad encoding.
   * @see #setRawTargetUrl()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public TrawlerFetchReplyDataRedirects encodeRawTargetUrl(byte[] rawTargetUrl) {
    this.rawTargetUrl = com.google.api.client.util.Base64.encodeBase64URLSafeString(rawTargetUrl);
    return this;
  }

  /**
   * Refresh time in meta redirect tag
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRefreshTime() {
    return refreshTime;
  }

  /**
   * Refresh time in meta redirect tag
   * @param refreshTime refreshTime or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setRefreshTime(java.lang.Integer refreshTime) {
    this.refreshTime = refreshTime;
    return this;
  }

  /**
   * The robots.txt we used for this fetch. Not normally filled in unless WantRobotsBody is set.
   * @see #decodeRobotsTxt()
   * @return value or {@code null} for none
   */
  public java.lang.String getRobotsTxt() {
    return robotsTxt;
  }

  /**
   * The robots.txt we used for this fetch. Not normally filled in unless WantRobotsBody is set.
   * @see #getRobotsTxt()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeRobotsTxt() {
    return com.google.api.client.util.Base64.decodeBase64(robotsTxt);
  }

  /**
   * The robots.txt we used for this fetch. Not normally filled in unless WantRobotsBody is set.
   * @see #encodeRobotsTxt()
   * @param robotsTxt robotsTxt or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setRobotsTxt(java.lang.String robotsTxt) {
    this.robotsTxt = robotsTxt;
    return this;
  }

  /**
   * The robots.txt we used for this fetch. Not normally filled in unless WantRobotsBody is set.
   * @see #setRobotsTxt()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public TrawlerFetchReplyDataRedirects encodeRobotsTxt(byte[] robotsTxt) {
    this.robotsTxt = com.google.api.client.util.Base64.encodeBase64URLSafeString(robotsTxt);
    return this;
  }

  /**
   * For meta-redirects, this field may contain the body of the source document. Currently only
   * filled client side and not implemented (yet) for server-side redirects.
   * @return value or {@code null} for none
   */
  public TrawlerFetchBodyData getSourceBody() {
    return sourceBody;
  }

  /**
   * For meta-redirects, this field may contain the body of the source document. Currently only
   * filled client side and not implemented (yet) for server-side redirects.
   * @param sourceBody sourceBody or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setSourceBody(TrawlerFetchBodyData sourceBody) {
    this.sourceBody = sourceBody;
    return this;
  }

  /**
   * Difference between the following two fields: TargetUrl is set when we have followed the
   * redirect target, and the url is canonicalized. RawTargetUrl is set in either of the following
   * two cases: (1) The url has not be been followed. For example, the redirect is intended to be
   * handled by the client. In the fetch reply response, you will see the url's status as
   * URL_NOT_FOLLOWED-NOT_FOLLOWED*. (2) The extracted redirect url is different from its
   * *canonicalized* form. For example, if the target url contains fragments, then this RawTargetUrl
   * will have the fragments. Redirect target
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetUrl() {
    return targetUrl;
  }

  /**
   * Difference between the following two fields: TargetUrl is set when we have followed the
   * redirect target, and the url is canonicalized. RawTargetUrl is set in either of the following
   * two cases: (1) The url has not be been followed. For example, the redirect is intended to be
   * handled by the client. In the fetch reply response, you will see the url's status as
   * URL_NOT_FOLLOWED-NOT_FOLLOWED*. (2) The extracted redirect url is different from its
   * *canonicalized* form. For example, if the target url contains fragments, then this RawTargetUrl
   * will have the fragments. Redirect target
   * @param targetUrl targetUrl or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setTargetUrl(java.lang.String targetUrl) {
    this.targetUrl = targetUrl;
    return this;
  }

  /**
   * URL and redirect type
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * URL and redirect type
   * @param type type or {@code null} for none
   */
  public TrawlerFetchReplyDataRedirects setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public TrawlerFetchReplyDataRedirects set(String fieldName, Object value) {
    return (TrawlerFetchReplyDataRedirects) super.set(fieldName, value);
  }

  @Override
  public TrawlerFetchReplyDataRedirects clone() {
    return (TrawlerFetchReplyDataRedirects) super.clone();
  }

}
