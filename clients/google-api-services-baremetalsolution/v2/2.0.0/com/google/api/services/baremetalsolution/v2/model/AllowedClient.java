/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.baremetalsolution.v2.model;

/**
 * Represents an 'access point' for the share.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Bare Metal Solution API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AllowedClient extends com.google.api.client.json.GenericJson {

  /**
   * Allow dev flag. Which controls whether to allow creation of devices.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowDev;

  /**
   * Allow the setuid flag.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowSuid;

  /**
   * The subnet of IP addresses permitted to access the share.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String allowedClientsCidr;

  /**
   * Mount permissions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mountPermissions;

  /**
   * The network the access point sits on.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String network;

  /**
   * Output only. The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated
   * ID instead of customer provided name. example like "10.0.0.0:/g123456789-nfs001"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nfsPath;

  /**
   * Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the
   * remote superuser (root) identity when using identity authentication.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean noRootSquash;

  /**
   * The IP address of the share on this network.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String shareIp;

  /**
   * Allow dev flag. Which controls whether to allow creation of devices.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowDev() {
    return allowDev;
  }

  /**
   * Allow dev flag. Which controls whether to allow creation of devices.
   * @param allowDev allowDev or {@code null} for none
   */
  public AllowedClient setAllowDev(java.lang.Boolean allowDev) {
    this.allowDev = allowDev;
    return this;
  }

  /**
   * Allow the setuid flag.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowSuid() {
    return allowSuid;
  }

  /**
   * Allow the setuid flag.
   * @param allowSuid allowSuid or {@code null} for none
   */
  public AllowedClient setAllowSuid(java.lang.Boolean allowSuid) {
    this.allowSuid = allowSuid;
    return this;
  }

  /**
   * The subnet of IP addresses permitted to access the share.
   * @return value or {@code null} for none
   */
  public java.lang.String getAllowedClientsCidr() {
    return allowedClientsCidr;
  }

  /**
   * The subnet of IP addresses permitted to access the share.
   * @param allowedClientsCidr allowedClientsCidr or {@code null} for none
   */
  public AllowedClient setAllowedClientsCidr(java.lang.String allowedClientsCidr) {
    this.allowedClientsCidr = allowedClientsCidr;
    return this;
  }

  /**
   * Mount permissions.
   * @return value or {@code null} for none
   */
  public java.lang.String getMountPermissions() {
    return mountPermissions;
  }

  /**
   * Mount permissions.
   * @param mountPermissions mountPermissions or {@code null} for none
   */
  public AllowedClient setMountPermissions(java.lang.String mountPermissions) {
    this.mountPermissions = mountPermissions;
    return this;
  }

  /**
   * The network the access point sits on.
   * @return value or {@code null} for none
   */
  public java.lang.String getNetwork() {
    return network;
  }

  /**
   * The network the access point sits on.
   * @param network network or {@code null} for none
   */
  public AllowedClient setNetwork(java.lang.String network) {
    this.network = network;
    return this;
  }

  /**
   * Output only. The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated
   * ID instead of customer provided name. example like "10.0.0.0:/g123456789-nfs001"
   * @return value or {@code null} for none
   */
  public java.lang.String getNfsPath() {
    return nfsPath;
  }

  /**
   * Output only. The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated
   * ID instead of customer provided name. example like "10.0.0.0:/g123456789-nfs001"
   * @param nfsPath nfsPath or {@code null} for none
   */
  public AllowedClient setNfsPath(java.lang.String nfsPath) {
    this.nfsPath = nfsPath;
    return this;
  }

  /**
   * Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the
   * remote superuser (root) identity when using identity authentication.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNoRootSquash() {
    return noRootSquash;
  }

  /**
   * Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the
   * remote superuser (root) identity when using identity authentication.
   * @param noRootSquash noRootSquash or {@code null} for none
   */
  public AllowedClient setNoRootSquash(java.lang.Boolean noRootSquash) {
    this.noRootSquash = noRootSquash;
    return this;
  }

  /**
   * The IP address of the share on this network.
   * @return value or {@code null} for none
   */
  public java.lang.String getShareIp() {
    return shareIp;
  }

  /**
   * The IP address of the share on this network.
   * @param shareIp shareIp or {@code null} for none
   */
  public AllowedClient setShareIp(java.lang.String shareIp) {
    this.shareIp = shareIp;
    return this;
  }

  @Override
  public AllowedClient set(String fieldName, Object value) {
    return (AllowedClient) super.set(fieldName, value);
  }

  @Override
  public AllowedClient clone() {
    return (AllowedClient) super.clone();
  }

}
