/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * General message used to store metadata about references to personal entities, even if those
 * entities cannot be resolved.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CopleyPersonalReferenceMetadata extends com.google.api.client.json.GenericJson {

  /**
   * The strength of the personal reference. For example "my flight" may receive a high
   * reference_score, whereas "the airport" may receive a low score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float referenceScore;

  /**
   * A list of all references made. Empty if no personal references exist. Multiple references can
   * be present when multiple references were made in a single query, or the type of reference was
   * ambiguous.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CopleyPersonalReference> references;

  static {
    // hack to force ProGuard to consider CopleyPersonalReference used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CopleyPersonalReference.class);
  }

  /**
   * Subreference metadata for all compound references on this span.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CopleySubreferenceMetadata subreferenceMetadata;

  /**
   * The strength of the personal reference. For example "my flight" may receive a high
   * reference_score, whereas "the airport" may receive a low score.
   * @return value or {@code null} for none
   */
  public java.lang.Float getReferenceScore() {
    return referenceScore;
  }

  /**
   * The strength of the personal reference. For example "my flight" may receive a high
   * reference_score, whereas "the airport" may receive a low score.
   * @param referenceScore referenceScore or {@code null} for none
   */
  public CopleyPersonalReferenceMetadata setReferenceScore(java.lang.Float referenceScore) {
    this.referenceScore = referenceScore;
    return this;
  }

  /**
   * A list of all references made. Empty if no personal references exist. Multiple references can
   * be present when multiple references were made in a single query, or the type of reference was
   * ambiguous.
   * @return value or {@code null} for none
   */
  public java.util.List<CopleyPersonalReference> getReferences() {
    return references;
  }

  /**
   * A list of all references made. Empty if no personal references exist. Multiple references can
   * be present when multiple references were made in a single query, or the type of reference was
   * ambiguous.
   * @param references references or {@code null} for none
   */
  public CopleyPersonalReferenceMetadata setReferences(java.util.List<CopleyPersonalReference> references) {
    this.references = references;
    return this;
  }

  /**
   * Subreference metadata for all compound references on this span.
   * @return value or {@code null} for none
   */
  public CopleySubreferenceMetadata getSubreferenceMetadata() {
    return subreferenceMetadata;
  }

  /**
   * Subreference metadata for all compound references on this span.
   * @param subreferenceMetadata subreferenceMetadata or {@code null} for none
   */
  public CopleyPersonalReferenceMetadata setSubreferenceMetadata(CopleySubreferenceMetadata subreferenceMetadata) {
    this.subreferenceMetadata = subreferenceMetadata;
    return this;
  }

  @Override
  public CopleyPersonalReferenceMetadata set(String fieldName, Object value) {
    return (CopleyPersonalReferenceMetadata) super.set(fieldName, value);
  }

  @Override
  public CopleyPersonalReferenceMetadata clone() {
    return (CopleyPersonalReferenceMetadata) super.clone();
  }

}
