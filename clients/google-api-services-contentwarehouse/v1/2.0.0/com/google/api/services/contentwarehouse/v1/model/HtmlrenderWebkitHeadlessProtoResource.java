/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Next id: 9.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HtmlrenderWebkitHeadlessProtoResource extends com.google.api.client.json.GenericJson {

  /**
   * content contains a complete HTTP response message including the HTTP status line, headers and
   * body. For example: HTTP/1.1 200 OK\r\n Content-Type: text/html\r\n \r\n ... content ... For
   * inputs (RenderRequest.resource): Any HTTP content encoding (e.g. gzip) and transfer encoding
   * (e.g. chunked) MUST be decoded. HTTP content and transfer encoding headers will be ignored if
   * present. For outputs (RenderResponse.referenced_resource_content): The body will be decoded (no
   * content or transfer encoding) however any content or transfer encoding headers present in the
   * original fetch response will be passed through. Decoding this field requires a correct text
   * encoding. The charset field of Document proto can be a good guess but is not guaranteed to be
   * correct.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String content;

  /**
   * Where this resource comes from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<WirelessTranscoderFetchFetchSourceInfo> fetchSourceInfo;

  /**
   * The url that contributes the final content. Only existed when metadata contains FetchReplyData.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String finalContentUrl;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<WirelessTranscoderFetchFetchMetadata> metadata;

  /**
   * The HTTP request method (GET, HEAD, POST, etc) used for this request. Values are taken from the
   * HTTPHeaders::Protocol enum in webutil/http/httputils.h. If it's not set, we will infer GET or
   * POST based on the presence of post_data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer method;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postData;

  /**
   * Only necessary headers are included in the resource key by default. See
   * google3/htmlrender/webkit_headless/resource_key.cc
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoResourceHttpHeader> requestHeader;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * content contains a complete HTTP response message including the HTTP status line, headers and
   * body. For example: HTTP/1.1 200 OK\r\n Content-Type: text/html\r\n \r\n ... content ... For
   * inputs (RenderRequest.resource): Any HTTP content encoding (e.g. gzip) and transfer encoding
   * (e.g. chunked) MUST be decoded. HTTP content and transfer encoding headers will be ignored if
   * present. For outputs (RenderResponse.referenced_resource_content): The body will be decoded (no
   * content or transfer encoding) however any content or transfer encoding headers present in the
   * original fetch response will be passed through. Decoding this field requires a correct text
   * encoding. The charset field of Document proto can be a good guess but is not guaranteed to be
   * correct.
   * @see #decodeContent()
   * @return value or {@code null} for none
   */
  public java.lang.String getContent() {
    return content;
  }

  /**
   * content contains a complete HTTP response message including the HTTP status line, headers and
   * body. For example: HTTP/1.1 200 OK\r\n Content-Type: text/html\r\n \r\n ... content ... For
   * inputs (RenderRequest.resource): Any HTTP content encoding (e.g. gzip) and transfer encoding
   * (e.g. chunked) MUST be decoded. HTTP content and transfer encoding headers will be ignored if
   * present. For outputs (RenderResponse.referenced_resource_content): The body will be decoded (no
   * content or transfer encoding) however any content or transfer encoding headers present in the
   * original fetch response will be passed through. Decoding this field requires a correct text
   * encoding. The charset field of Document proto can be a good guess but is not guaranteed to be
   * correct.
   * @see #getContent()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeContent() {
    return com.google.api.client.util.Base64.decodeBase64(content);
  }

  /**
   * content contains a complete HTTP response message including the HTTP status line, headers and
   * body. For example: HTTP/1.1 200 OK\r\n Content-Type: text/html\r\n \r\n ... content ... For
   * inputs (RenderRequest.resource): Any HTTP content encoding (e.g. gzip) and transfer encoding
   * (e.g. chunked) MUST be decoded. HTTP content and transfer encoding headers will be ignored if
   * present. For outputs (RenderResponse.referenced_resource_content): The body will be decoded (no
   * content or transfer encoding) however any content or transfer encoding headers present in the
   * original fetch response will be passed through. Decoding this field requires a correct text
   * encoding. The charset field of Document proto can be a good guess but is not guaranteed to be
   * correct.
   * @see #encodeContent()
   * @param content content or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoResource setContent(java.lang.String content) {
    this.content = content;
    return this;
  }

  /**
   * content contains a complete HTTP response message including the HTTP status line, headers and
   * body. For example: HTTP/1.1 200 OK\r\n Content-Type: text/html\r\n \r\n ... content ... For
   * inputs (RenderRequest.resource): Any HTTP content encoding (e.g. gzip) and transfer encoding
   * (e.g. chunked) MUST be decoded. HTTP content and transfer encoding headers will be ignored if
   * present. For outputs (RenderResponse.referenced_resource_content): The body will be decoded (no
   * content or transfer encoding) however any content or transfer encoding headers present in the
   * original fetch response will be passed through. Decoding this field requires a correct text
   * encoding. The charset field of Document proto can be a good guess but is not guaranteed to be
   * correct.
   * @see #setContent()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public HtmlrenderWebkitHeadlessProtoResource encodeContent(byte[] content) {
    this.content = com.google.api.client.util.Base64.encodeBase64URLSafeString(content);
    return this;
  }

  /**
   * Where this resource comes from.
   * @return value or {@code null} for none
   */
  public java.util.List<WirelessTranscoderFetchFetchSourceInfo> getFetchSourceInfo() {
    return fetchSourceInfo;
  }

  /**
   * Where this resource comes from.
   * @param fetchSourceInfo fetchSourceInfo or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoResource setFetchSourceInfo(java.util.List<WirelessTranscoderFetchFetchSourceInfo> fetchSourceInfo) {
    this.fetchSourceInfo = fetchSourceInfo;
    return this;
  }

  /**
   * The url that contributes the final content. Only existed when metadata contains FetchReplyData.
   * @return value or {@code null} for none
   */
  public java.lang.String getFinalContentUrl() {
    return finalContentUrl;
  }

  /**
   * The url that contributes the final content. Only existed when metadata contains FetchReplyData.
   * @param finalContentUrl finalContentUrl or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoResource setFinalContentUrl(java.lang.String finalContentUrl) {
    this.finalContentUrl = finalContentUrl;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<WirelessTranscoderFetchFetchMetadata> getMetadata() {
    return metadata;
  }

  /**
   * @param metadata metadata or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoResource setMetadata(java.util.List<WirelessTranscoderFetchFetchMetadata> metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The HTTP request method (GET, HEAD, POST, etc) used for this request. Values are taken from the
   * HTTPHeaders::Protocol enum in webutil/http/httputils.h. If it's not set, we will infer GET or
   * POST based on the presence of post_data.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMethod() {
    return method;
  }

  /**
   * The HTTP request method (GET, HEAD, POST, etc) used for this request. Values are taken from the
   * HTTPHeaders::Protocol enum in webutil/http/httputils.h. If it's not set, we will infer GET or
   * POST based on the presence of post_data.
   * @param method method or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoResource setMethod(java.lang.Integer method) {
    this.method = method;
    return this;
  }

  /**
   * @see #decodePostData()
   * @return value or {@code null} for none
   */
  public java.lang.String getPostData() {
    return postData;
  }

  /**

   * @see #getPostData()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodePostData() {
    return com.google.api.client.util.Base64.decodeBase64(postData);
  }

  /**
   * @see #encodePostData()
   * @param postData postData or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoResource setPostData(java.lang.String postData) {
    this.postData = postData;
    return this;
  }

  /**

   * @see #setPostData()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public HtmlrenderWebkitHeadlessProtoResource encodePostData(byte[] postData) {
    this.postData = com.google.api.client.util.Base64.encodeBase64URLSafeString(postData);
    return this;
  }

  /**
   * Only necessary headers are included in the resource key by default. See
   * google3/htmlrender/webkit_headless/resource_key.cc
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoResourceHttpHeader> getRequestHeader() {
    return requestHeader;
  }

  /**
   * Only necessary headers are included in the resource key by default. See
   * google3/htmlrender/webkit_headless/resource_key.cc
   * @param requestHeader requestHeader or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoResource setRequestHeader(java.util.List<HtmlrenderWebkitHeadlessProtoResourceHttpHeader> requestHeader) {
    this.requestHeader = requestHeader;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * @param url url or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoResource setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoResource set(String fieldName, Object value) {
    return (HtmlrenderWebkitHeadlessProtoResource) super.set(fieldName, value);
  }

  @Override
  public HtmlrenderWebkitHeadlessProtoResource clone() {
    return (HtmlrenderWebkitHeadlessProtoResource) super.clone();
  }

}
