/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.directory.model;

/**
 * Printer configuration.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Admin SDK API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Printer extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Auxiliary messages about issues with the printer configuration if any.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AuxiliaryMessage> auxiliaryMessages;

  static {
    // hack to force ProGuard to consider AuxiliaryMessage used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(AuxiliaryMessage.class);
  }

  /**
   * Output only. Time when printer was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Editable. Description of printer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Editable. Name of printer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Id of the printer. (During printer creation leave empty)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in format as seen in
   * ListPrinterModels response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String makeAndModel;

  /**
   * The resource name of the Printer object, in the format customers/{customer-id}/printers
   * /{printer-id} (During printer creation leave empty)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Organization Unit that owns this printer (Only can be set during Printer creation)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String orgUnitId;

  /**
   * Editable. Printer URI.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uri;

  /**
   * Editable. flag to use driverless configuration or not. If it's set to be true, make_and_model
   * can be ignored
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useDriverlessConfig;

  /**
   * Output only. Auxiliary messages about issues with the printer configuration if any.
   * @return value or {@code null} for none
   */
  public java.util.List<AuxiliaryMessage> getAuxiliaryMessages() {
    return auxiliaryMessages;
  }

  /**
   * Output only. Auxiliary messages about issues with the printer configuration if any.
   * @param auxiliaryMessages auxiliaryMessages or {@code null} for none
   */
  public Printer setAuxiliaryMessages(java.util.List<AuxiliaryMessage> auxiliaryMessages) {
    this.auxiliaryMessages = auxiliaryMessages;
    return this;
  }

  /**
   * Output only. Time when printer was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Time when printer was created.
   * @param createTime createTime or {@code null} for none
   */
  public Printer setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Editable. Description of printer.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Editable. Description of printer.
   * @param description description or {@code null} for none
   */
  public Printer setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Editable. Name of printer.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Editable. Name of printer.
   * @param displayName displayName or {@code null} for none
   */
  public Printer setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Id of the printer. (During printer creation leave empty)
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Id of the printer. (During printer creation leave empty)
   * @param id id or {@code null} for none
   */
  public Printer setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in format as seen in
   * ListPrinterModels response.
   * @return value or {@code null} for none
   */
  public java.lang.String getMakeAndModel() {
    return makeAndModel;
  }

  /**
   * Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in format as seen in
   * ListPrinterModels response.
   * @param makeAndModel makeAndModel or {@code null} for none
   */
  public Printer setMakeAndModel(java.lang.String makeAndModel) {
    this.makeAndModel = makeAndModel;
    return this;
  }

  /**
   * The resource name of the Printer object, in the format customers/{customer-id}/printers
   * /{printer-id} (During printer creation leave empty)
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The resource name of the Printer object, in the format customers/{customer-id}/printers
   * /{printer-id} (During printer creation leave empty)
   * @param name name or {@code null} for none
   */
  public Printer setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Organization Unit that owns this printer (Only can be set during Printer creation)
   * @return value or {@code null} for none
   */
  public java.lang.String getOrgUnitId() {
    return orgUnitId;
  }

  /**
   * Organization Unit that owns this printer (Only can be set during Printer creation)
   * @param orgUnitId orgUnitId or {@code null} for none
   */
  public Printer setOrgUnitId(java.lang.String orgUnitId) {
    this.orgUnitId = orgUnitId;
    return this;
  }

  /**
   * Editable. Printer URI.
   * @return value or {@code null} for none
   */
  public java.lang.String getUri() {
    return uri;
  }

  /**
   * Editable. Printer URI.
   * @param uri uri or {@code null} for none
   */
  public Printer setUri(java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Editable. flag to use driverless configuration or not. If it's set to be true, make_and_model
   * can be ignored
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseDriverlessConfig() {
    return useDriverlessConfig;
  }

  /**
   * Editable. flag to use driverless configuration or not. If it's set to be true, make_and_model
   * can be ignored
   * @param useDriverlessConfig useDriverlessConfig or {@code null} for none
   */
  public Printer setUseDriverlessConfig(java.lang.Boolean useDriverlessConfig) {
    this.useDriverlessConfig = useDriverlessConfig;
    return this;
  }

  @Override
  public Printer set(String fieldName, Object value) {
    return (Printer) super.set(fieldName, value);
  }

  @Override
  public Printer clone() {
    return (Printer) super.clone();
  }

}
