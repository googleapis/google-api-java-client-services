/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.osconfig.v1beta.model;

/**
 * A resource that extracts an archive
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud OS Config API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ExtractArchiveResource extends com.google.api.client.json.GenericJson {

  /**
   * Local file path that signals this resource is in the desired state. The absence of this file
   * will indicate whether the archive needs to be extracted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String creates;

  /**
   * Directory to extract archive to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String destination;

  /**
   * Whether to overwrite existing files during extraction. If this is set to true, any existing
   * files in the destination location will be overwritten by the extraction.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean overwrite;

  /**
   * The source archive to extract.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private File source;

  /**
   * The type of the archive to extract.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Local file path that signals this resource is in the desired state. The absence of this file
   * will indicate whether the archive needs to be extracted.
   * @return value or {@code null} for none
   */
  public java.lang.String getCreates() {
    return creates;
  }

  /**
   * Local file path that signals this resource is in the desired state. The absence of this file
   * will indicate whether the archive needs to be extracted.
   * @param creates creates or {@code null} for none
   */
  public ExtractArchiveResource setCreates(java.lang.String creates) {
    this.creates = creates;
    return this;
  }

  /**
   * Directory to extract archive to.
   * @return value or {@code null} for none
   */
  public java.lang.String getDestination() {
    return destination;
  }

  /**
   * Directory to extract archive to.
   * @param destination destination or {@code null} for none
   */
  public ExtractArchiveResource setDestination(java.lang.String destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Whether to overwrite existing files during extraction. If this is set to true, any existing
   * files in the destination location will be overwritten by the extraction.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getOverwrite() {
    return overwrite;
  }

  /**
   * Whether to overwrite existing files during extraction. If this is set to true, any existing
   * files in the destination location will be overwritten by the extraction.
   * @param overwrite overwrite or {@code null} for none
   */
  public ExtractArchiveResource setOverwrite(java.lang.Boolean overwrite) {
    this.overwrite = overwrite;
    return this;
  }

  /**
   * The source archive to extract.
   * @return value or {@code null} for none
   */
  public File getSource() {
    return source;
  }

  /**
   * The source archive to extract.
   * @param source source or {@code null} for none
   */
  public ExtractArchiveResource setSource(File source) {
    this.source = source;
    return this;
  }

  /**
   * The type of the archive to extract.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The type of the archive to extract.
   * @param type type or {@code null} for none
   */
  public ExtractArchiveResource setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public ExtractArchiveResource set(String fieldName, Object value) {
    return (ExtractArchiveResource) super.set(fieldName, value);
  }

  @Override
  public ExtractArchiveResource clone() {
    return (ExtractArchiveResource) super.clone();
  }

}
