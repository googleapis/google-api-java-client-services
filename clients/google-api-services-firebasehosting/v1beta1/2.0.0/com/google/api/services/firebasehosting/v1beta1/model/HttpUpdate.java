/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebasehosting.v1beta1.model;

/**
 * A file you can add to your existing, non-Hosting hosting service that confirms your intent to
 * allow Hosting's Certificate Authorities to create an SSL certificate for your domain.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase Hosting API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HttpUpdate extends com.google.api.client.json.GenericJson {

  /**
   * Output only. An error encountered during the last contents check. If null, the check completed
   * successfully.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Status checkError;

  /**
   * Output only. A text string to serve at the path.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String desired;

  /**
   * Output only. Whether Hosting was able to find the required file contents on the specified path
   * during its last check.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String discovered;

  /**
   * Output only. The last time Hosting systems checked for the file contents.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lastCheckTime;

  /**
   * Output only. The path to the file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String path;

  /**
   * Output only. An error encountered during the last contents check. If null, the check completed
   * successfully.
   * @return value or {@code null} for none
   */
  public Status getCheckError() {
    return checkError;
  }

  /**
   * Output only. An error encountered during the last contents check. If null, the check completed
   * successfully.
   * @param checkError checkError or {@code null} for none
   */
  public HttpUpdate setCheckError(Status checkError) {
    this.checkError = checkError;
    return this;
  }

  /**
   * Output only. A text string to serve at the path.
   * @return value or {@code null} for none
   */
  public java.lang.String getDesired() {
    return desired;
  }

  /**
   * Output only. A text string to serve at the path.
   * @param desired desired or {@code null} for none
   */
  public HttpUpdate setDesired(java.lang.String desired) {
    this.desired = desired;
    return this;
  }

  /**
   * Output only. Whether Hosting was able to find the required file contents on the specified path
   * during its last check.
   * @return value or {@code null} for none
   */
  public java.lang.String getDiscovered() {
    return discovered;
  }

  /**
   * Output only. Whether Hosting was able to find the required file contents on the specified path
   * during its last check.
   * @param discovered discovered or {@code null} for none
   */
  public HttpUpdate setDiscovered(java.lang.String discovered) {
    this.discovered = discovered;
    return this;
  }

  /**
   * Output only. The last time Hosting systems checked for the file contents.
   * @return value or {@code null} for none
   */
  public String getLastCheckTime() {
    return lastCheckTime;
  }

  /**
   * Output only. The last time Hosting systems checked for the file contents.
   * @param lastCheckTime lastCheckTime or {@code null} for none
   */
  public HttpUpdate setLastCheckTime(String lastCheckTime) {
    this.lastCheckTime = lastCheckTime;
    return this;
  }

  /**
   * Output only. The path to the file.
   * @return value or {@code null} for none
   */
  public java.lang.String getPath() {
    return path;
  }

  /**
   * Output only. The path to the file.
   * @param path path or {@code null} for none
   */
  public HttpUpdate setPath(java.lang.String path) {
    this.path = path;
    return this;
  }

  @Override
  public HttpUpdate set(String fieldName, Object value) {
    return (HttpUpdate) super.set(fieldName, value);
  }

  @Override
  public HttpUpdate clone() {
    return (HttpUpdate) super.clone();
  }

}
