/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.displayvideo.v1.model;

/**
 * A single Creative.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Display & Video 360 API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Creative extends com.google.api.client.json.GenericJson {

  /**
   * Additional dimensions. Applicable when creative_type is one of: * `CREATIVE_TYPE_STANDARD` *
   * `CREATIVE_TYPE_EXPANDABLE` * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_TEMPLATED_APP_INSTALL` *
   * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_LIGHTBOX` *
   * `CREATIVE_TYPE_NATIVE_APP_INSTALL` * `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE` *
   * `CREATIVE_TYPE_PUBLISHER_HOSTED` If this field is specified, width_pixels and height_pixels are
   * both required and must be greater than or equal to 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Dimensions> additionalDimensions;

  /**
   * Output only. The unique ID of the advertiser the creative belongs to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long advertiserId;

  /**
   * Third-party HTML tracking tag to be appended to the creative tag.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String appendedTag;

  /**
   * Required. Assets associated to this creative. Assets can be associated to the creative in one
   * of following roles: * `ASSET_ROLE_UNSPECIFIED` * `ASSET_ROLE_MAIN` * `ASSET_ROLE_BACKUP` *
   * `ASSET_ROLE_POLITE_LOAD`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssetAssociation> assets;

  static {
    // hack to force ProGuard to consider AssetAssociation used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(AssetAssociation.class);
  }

  /**
   * Output only. The unique ID of the Campaign Manager 360 placement associated with the creative.
   * This field is only applicable for creatives that are synced from Campaign Manager.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long cmPlacementId;

  /**
   * The Campaign Manager 360 tracking ad associated with the creative. Optional for the following
   * creative_type when created by an advertiser that uses both Campaign Manager 360 and third-party
   * ad serving: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` *
   * `CREATIVE_TYPE_NATIVE_APP_INSTALL` * `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE` Output only for
   * other cases.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CmTrackingAd cmTrackingAd;

  /**
   * The IDs of companion creatives for a video creative. You can assign existing display creatives
   * (with image or HTML5 assets) to serve surrounding the publisher's video player. Companions
   * display around the video player while the video is playing and remain after the video has
   * completed. Creatives contain additional dimensions can not be companion creatives. This field
   * is only supported for following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.util.List<java.lang.Long> companionCreativeIds;

  /**
   * Counter events for a rich media creative. Counters track the number of times that a user
   * interacts with any part of a rich media creative in a specified way (mouse-overs, mouse-outs,
   * clicks, taps, data loading, keyboard entries, etc.). Any event that can be captured in the
   * creative can be recorded as a counter. Leave it empty or unset for creatives containing image
   * assets only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CounterEvent> counterEvents;

  static {
    // hack to force ProGuard to consider CounterEvent used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CounterEvent.class);
  }

  /**
   * Output only. The timestamp when the creative was created. Assigned by the system.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Output only. A list of attributes of the creative that is generated by the system.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> creativeAttributes;

  /**
   * Output only. The unique ID of the creative. Assigned by the system.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long creativeId;

  /**
   * Required. Immutable. The type of the creative.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String creativeType;

  /**
   * Required. Primary dimensions of the creative. Applicable to all creative types. The value of
   * width_pixels and height_pixels defaults to `0` when creative_type is one of: *
   * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL` *
   * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_NATIVE_VIDEO` *
   * `CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Dimensions dimensions;

  /**
   * Required. The display name of the creative. Must be UTF-8 encoded with a maximum size of 240
   * bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Output only. Indicates whether the creative is dynamic.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean dynamic;

  /**
   * Required. Controls whether or not the creative can serve. Accepted values are: *
   * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED` * `ENTITY_STATUS_PAUSED`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String entityStatus;

  /**
   * Required. Exit events for this creative. An exit (also known as a click tag) is any area in
   * your creative that someone can click or tap to open an advertiser's landing page. Every
   * creative must include at least one exit. You can add an exit to your creative in any of the
   * following ways: * Use Google Web Designer's tap area. * Define a JavaScript variable called
   * "clickTag". * Use the Enabler (Enabler.exit()) to track exits in rich media formats.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ExitEvent> exitEvents;

  /**
   * Optional. Indicates the creative will automatically expand on hover. Optional and only valid
   * for third-party expandable creatives. Third-party expandable creatives are creatives with
   * following hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type:
   * * `CREATIVE_TYPE_EXPANDABLE`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean expandOnHover;

  /**
   * Optional. Specifies the expanding direction of the creative. Required and only valid for third-
   * party expandable creatives. Third-party expandable creatives are creatives with following
   * hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_EXPANDABLE`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String expandingDirection;

  /**
   * Required. Indicates where the creative is hosted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostingSource;

  /**
   * Output only. Indicates the third-party VAST tag creative requires HTML5 Video support. Output
   * only and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are
   * creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following
   * creative_type: * `CREATIVE_TYPE_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean html5Video;

  /**
   * Indicates whether Integral Ad Science (IAS) campaign monitoring is enabled. To enable this for
   * the creative, make sure the Advertiser.creative_config.ias_client_id has been set to your IAS
   * client ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean iasCampaignMonitoring;

  /**
   * ID information used to link this creative to an external system. Must be UTF-8 encoded with a
   * length of no more than 10,000 characters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String integrationCode;

  /**
   * JavaScript measurement URL from supported third-party verification providers (ComScore,
   * DoubleVerify, IAS, Moat). HTML script tags are not supported. This field is only supported in
   * following creative_type: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` *
   * `CREATIVE_TYPE_NATIVE_APP_INSTALL` * `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE` *
   * `CREATIVE_TYPE_NATIVE_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String jsTrackerUrl;

  /**
   * Output only. The IDs of the line items this creative is associated with. To associate a
   * creative to a line item, use LineItem.creative_ids instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.util.List<java.lang.Long> lineItemIds;

  /**
   * Output only. Media duration of the creative. Applicable when creative_type is one of: *
   * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_NATIVE_VIDEO` *
   * `CREATIVE_TYPE_PUBLISHER_HOSTED`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String mediaDuration;

  /**
   * Output only. The resource name of the creative.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * User notes for this creative. Must be UTF-8 encoded with a length of no more than 20,000
   * characters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String notes;

  /**
   * Specifies the OBA icon for a video creative. This field is only supported in following
   * creative_type: * `CREATIVE_TYPE_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ObaIcon obaIcon;

  /**
   * Amount of time to play the video before counting a view. This field is required when skippable
   * is true. This field is only supported for the following creative_type: * `CREATIVE_TYPE_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AudioVideoOffset progressOffset;

  /**
   * Optional. Indicates that the creative relies on HTML5 to render properly. Optional and only
   * valid for third-party tag creatives. Third-party tag creatives are creatives with following
   * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean requireHtml5;

  /**
   * Optional. Indicates that the creative requires MRAID (Mobile Rich Media Ad Interface
   * Definitions system). Set this if the creative relies on mobile gestures for interactivity, such
   * as swiping or tapping. Optional and only valid for third-party tag creatives. Third-party tag
   * creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined
   * with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean requireMraid;

  /**
   * Optional. Indicates that the creative will wait for a return ping for attribution. Only valid
   * when using a Campaign Manager 360 tracking ad with a third-party ad server parameter and the
   * ${DC_DBM_TOKEN} macro. Optional and only valid for third-party tag creatives or third-party
   * VAST tag creatives. Third-party tag creatives are creatives with following hosting_source: *
   * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD`
   * * `CREATIVE_TYPE_EXPANDABLE` Third-party VAST tag creatives are creatives with following
   * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean requirePingForAttribution;

  /**
   * Output only. The current status of the creative review process.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ReviewStatusInfo reviewStatus;

  /**
   * Amount of time to play the video before the skip button appears. This field is required when
   * skippable is true. This field is only supported for the following creative_type: *
   * `CREATIVE_TYPE_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AudioVideoOffset skipOffset;

  /**
   * Whether the user can choose to skip a video creative. This field is only supported for the
   * following creative_type: * `CREATIVE_TYPE_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean skippable;

  /**
   * Optional. The original third-party tag used for the creative. Required and only valid for
   * third-party tag creatives. Third-party tag creatives are creatives with following
   * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String thirdPartyTag;

  /**
   * Tracking URLs from third parties to track interactions with a video creative. This field is
   * only supported for the following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
   * * `CREATIVE_TYPE_NATIVE_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ThirdPartyUrl> thirdPartyUrls;

  /**
   * Timer custom events for a rich media creative. Timers track the time during which a user views
   * and interacts with a specified part of a rich media creative. A creative can have multiple
   * timer events, each timed independently. Leave it empty or unset for creatives containing image
   * assets only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<TimerEvent> timerEvents;

  /**
   * Tracking URLs for analytics providers or third-party ad technology vendors. The URLs must start
   * with https (except on inventory that doesn't require SSL compliance). If using macros in your
   * URL, use only macros supported by Display & Video 360. Standard URLs only, no IMG or SCRIPT
   * tags. This field is only supported in following creative_type: * `CREATIVE_TYPE_NATIVE` *
   * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_NATIVE_APP_INSTALL` *
   * `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE` * `CREATIVE_TYPE_NATIVE_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> trackerUrls;

  /**
   * Output only. Audio/Video transcodes. Display & Video 360 transcodes the main asset into a
   * number of alternative versions that use different file formats or have different properties
   * (resolution, audio bit rate, and video bit rate), each designed for specific video players or
   * bandwidths. These transcodes give a publisher's system more options to choose from for each
   * impression on your video and ensures that the appropriate file serves based on the viewer’s
   * connection and screen size. This field is only supported in following creative_type: *
   * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_NATIVE_VIDEO` * `CREATIVE_TYPE_AUDIO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Transcode> transcodes;

  /**
   * Optional. An optional creative identifier provided by a registry that is unique across all
   * platforms. Universal Ad ID is part of the VAST 4.0 standard. It can be modified after the
   * creative is created. This field is only supported for the following creative_type: *
   * `CREATIVE_TYPE_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private UniversalAdId universalAdId;

  /**
   * Output only. The timestamp when the creative was last updated. Assigned by the system.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Optional. The URL of the VAST tag for a third-party VAST tag creative. Required and only valid
   * for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following
   * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vastTagUrl;

  /**
   * Output only. Indicates the third-party VAST tag creative requires VPAID (Digital Video Player-
   * Ad Interface). Output only and only valid for third-party VAST tag creatives. Third-party VAST
   * tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY`
   * combined with following creative_type: * `CREATIVE_TYPE_VIDEO`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean vpaid;

  /**
   * Additional dimensions. Applicable when creative_type is one of: * `CREATIVE_TYPE_STANDARD` *
   * `CREATIVE_TYPE_EXPANDABLE` * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_TEMPLATED_APP_INSTALL` *
   * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_LIGHTBOX` *
   * `CREATIVE_TYPE_NATIVE_APP_INSTALL` * `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE` *
   * `CREATIVE_TYPE_PUBLISHER_HOSTED` If this field is specified, width_pixels and height_pixels are
   * both required and must be greater than or equal to 0.
   * @return value or {@code null} for none
   */
  public java.util.List<Dimensions> getAdditionalDimensions() {
    return additionalDimensions;
  }

  /**
   * Additional dimensions. Applicable when creative_type is one of: * `CREATIVE_TYPE_STANDARD` *
   * `CREATIVE_TYPE_EXPANDABLE` * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_TEMPLATED_APP_INSTALL` *
   * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_LIGHTBOX` *
   * `CREATIVE_TYPE_NATIVE_APP_INSTALL` * `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE` *
   * `CREATIVE_TYPE_PUBLISHER_HOSTED` If this field is specified, width_pixels and height_pixels are
   * both required and must be greater than or equal to 0.
   * @param additionalDimensions additionalDimensions or {@code null} for none
   */
  public Creative setAdditionalDimensions(java.util.List<Dimensions> additionalDimensions) {
    this.additionalDimensions = additionalDimensions;
    return this;
  }

  /**
   * Output only. The unique ID of the advertiser the creative belongs to.
   * @return value or {@code null} for none
   */
  public java.lang.Long getAdvertiserId() {
    return advertiserId;
  }

  /**
   * Output only. The unique ID of the advertiser the creative belongs to.
   * @param advertiserId advertiserId or {@code null} for none
   */
  public Creative setAdvertiserId(java.lang.Long advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  /**
   * Third-party HTML tracking tag to be appended to the creative tag.
   * @return value or {@code null} for none
   */
  public java.lang.String getAppendedTag() {
    return appendedTag;
  }

  /**
   * Third-party HTML tracking tag to be appended to the creative tag.
   * @param appendedTag appendedTag or {@code null} for none
   */
  public Creative setAppendedTag(java.lang.String appendedTag) {
    this.appendedTag = appendedTag;
    return this;
  }

  /**
   * Required. Assets associated to this creative. Assets can be associated to the creative in one
   * of following roles: * `ASSET_ROLE_UNSPECIFIED` * `ASSET_ROLE_MAIN` * `ASSET_ROLE_BACKUP` *
   * `ASSET_ROLE_POLITE_LOAD`
   * @return value or {@code null} for none
   */
  public java.util.List<AssetAssociation> getAssets() {
    return assets;
  }

  /**
   * Required. Assets associated to this creative. Assets can be associated to the creative in one
   * of following roles: * `ASSET_ROLE_UNSPECIFIED` * `ASSET_ROLE_MAIN` * `ASSET_ROLE_BACKUP` *
   * `ASSET_ROLE_POLITE_LOAD`
   * @param assets assets or {@code null} for none
   */
  public Creative setAssets(java.util.List<AssetAssociation> assets) {
    this.assets = assets;
    return this;
  }

  /**
   * Output only. The unique ID of the Campaign Manager 360 placement associated with the creative.
   * This field is only applicable for creatives that are synced from Campaign Manager.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCmPlacementId() {
    return cmPlacementId;
  }

  /**
   * Output only. The unique ID of the Campaign Manager 360 placement associated with the creative.
   * This field is only applicable for creatives that are synced from Campaign Manager.
   * @param cmPlacementId cmPlacementId or {@code null} for none
   */
  public Creative setCmPlacementId(java.lang.Long cmPlacementId) {
    this.cmPlacementId = cmPlacementId;
    return this;
  }

  /**
   * The Campaign Manager 360 tracking ad associated with the creative. Optional for the following
   * creative_type when created by an advertiser that uses both Campaign Manager 360 and third-party
   * ad serving: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` *
   * `CREATIVE_TYPE_NATIVE_APP_INSTALL` * `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE` Output only for
   * other cases.
   * @return value or {@code null} for none
   */
  public CmTrackingAd getCmTrackingAd() {
    return cmTrackingAd;
  }

  /**
   * The Campaign Manager 360 tracking ad associated with the creative. Optional for the following
   * creative_type when created by an advertiser that uses both Campaign Manager 360 and third-party
   * ad serving: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` *
   * `CREATIVE_TYPE_NATIVE_APP_INSTALL` * `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE` Output only for
   * other cases.
   * @param cmTrackingAd cmTrackingAd or {@code null} for none
   */
  public Creative setCmTrackingAd(CmTrackingAd cmTrackingAd) {
    this.cmTrackingAd = cmTrackingAd;
    return this;
  }

  /**
   * The IDs of companion creatives for a video creative. You can assign existing display creatives
   * (with image or HTML5 assets) to serve surrounding the publisher's video player. Companions
   * display around the video player while the video is playing and remain after the video has
   * completed. Creatives contain additional dimensions can not be companion creatives. This field
   * is only supported for following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Long> getCompanionCreativeIds() {
    return companionCreativeIds;
  }

  /**
   * The IDs of companion creatives for a video creative. You can assign existing display creatives
   * (with image or HTML5 assets) to serve surrounding the publisher's video player. Companions
   * display around the video player while the video is playing and remain after the video has
   * completed. Creatives contain additional dimensions can not be companion creatives. This field
   * is only supported for following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
   * @param companionCreativeIds companionCreativeIds or {@code null} for none
   */
  public Creative setCompanionCreativeIds(java.util.List<java.lang.Long> companionCreativeIds) {
    this.companionCreativeIds = companionCreativeIds;
    return this;
  }

  /**
   * Counter events for a rich media creative. Counters track the number of times that a user
   * interacts with any part of a rich media creative in a specified way (mouse-overs, mouse-outs,
   * clicks, taps, data loading, keyboard entries, etc.). Any event that can be captured in the
   * creative can be recorded as a counter. Leave it empty or unset for creatives containing image
   * assets only.
   * @return value or {@code null} for none
   */
  public java.util.List<CounterEvent> getCounterEvents() {
    return counterEvents;
  }

  /**
   * Counter events for a rich media creative. Counters track the number of times that a user
   * interacts with any part of a rich media creative in a specified way (mouse-overs, mouse-outs,
   * clicks, taps, data loading, keyboard entries, etc.). Any event that can be captured in the
   * creative can be recorded as a counter. Leave it empty or unset for creatives containing image
   * assets only.
   * @param counterEvents counterEvents or {@code null} for none
   */
  public Creative setCounterEvents(java.util.List<CounterEvent> counterEvents) {
    this.counterEvents = counterEvents;
    return this;
  }

  /**
   * Output only. The timestamp when the creative was created. Assigned by the system.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The timestamp when the creative was created. Assigned by the system.
   * @param createTime createTime or {@code null} for none
   */
  public Creative setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. A list of attributes of the creative that is generated by the system.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCreativeAttributes() {
    return creativeAttributes;
  }

  /**
   * Output only. A list of attributes of the creative that is generated by the system.
   * @param creativeAttributes creativeAttributes or {@code null} for none
   */
  public Creative setCreativeAttributes(java.util.List<java.lang.String> creativeAttributes) {
    this.creativeAttributes = creativeAttributes;
    return this;
  }

  /**
   * Output only. The unique ID of the creative. Assigned by the system.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCreativeId() {
    return creativeId;
  }

  /**
   * Output only. The unique ID of the creative. Assigned by the system.
   * @param creativeId creativeId or {@code null} for none
   */
  public Creative setCreativeId(java.lang.Long creativeId) {
    this.creativeId = creativeId;
    return this;
  }

  /**
   * Required. Immutable. The type of the creative.
   * @return value or {@code null} for none
   */
  public java.lang.String getCreativeType() {
    return creativeType;
  }

  /**
   * Required. Immutable. The type of the creative.
   * @param creativeType creativeType or {@code null} for none
   */
  public Creative setCreativeType(java.lang.String creativeType) {
    this.creativeType = creativeType;
    return this;
  }

  /**
   * Required. Primary dimensions of the creative. Applicable to all creative types. The value of
   * width_pixels and height_pixels defaults to `0` when creative_type is one of: *
   * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL` *
   * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_NATIVE_VIDEO` *
   * `CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO`
   * @return value or {@code null} for none
   */
  public Dimensions getDimensions() {
    return dimensions;
  }

  /**
   * Required. Primary dimensions of the creative. Applicable to all creative types. The value of
   * width_pixels and height_pixels defaults to `0` when creative_type is one of: *
   * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL` *
   * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_NATIVE_VIDEO` *
   * `CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO`
   * @param dimensions dimensions or {@code null} for none
   */
  public Creative setDimensions(Dimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Required. The display name of the creative. Must be UTF-8 encoded with a maximum size of 240
   * bytes.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Required. The display name of the creative. Must be UTF-8 encoded with a maximum size of 240
   * bytes.
   * @param displayName displayName or {@code null} for none
   */
  public Creative setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Output only. Indicates whether the creative is dynamic.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDynamic() {
    return dynamic;
  }

  /**
   * Output only. Indicates whether the creative is dynamic.
   * @param dynamic dynamic or {@code null} for none
   */
  public Creative setDynamic(java.lang.Boolean dynamic) {
    this.dynamic = dynamic;
    return this;
  }

  /**
   * Required. Controls whether or not the creative can serve. Accepted values are: *
   * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED` * `ENTITY_STATUS_PAUSED`
   * @return value or {@code null} for none
   */
  public java.lang.String getEntityStatus() {
    return entityStatus;
  }

  /**
   * Required. Controls whether or not the creative can serve. Accepted values are: *
   * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED` * `ENTITY_STATUS_PAUSED`
   * @param entityStatus entityStatus or {@code null} for none
   */
  public Creative setEntityStatus(java.lang.String entityStatus) {
    this.entityStatus = entityStatus;
    return this;
  }

  /**
   * Required. Exit events for this creative. An exit (also known as a click tag) is any area in
   * your creative that someone can click or tap to open an advertiser's landing page. Every
   * creative must include at least one exit. You can add an exit to your creative in any of the
   * following ways: * Use Google Web Designer's tap area. * Define a JavaScript variable called
   * "clickTag". * Use the Enabler (Enabler.exit()) to track exits in rich media formats.
   * @return value or {@code null} for none
   */
  public java.util.List<ExitEvent> getExitEvents() {
    return exitEvents;
  }

  /**
   * Required. Exit events for this creative. An exit (also known as a click tag) is any area in
   * your creative that someone can click or tap to open an advertiser's landing page. Every
   * creative must include at least one exit. You can add an exit to your creative in any of the
   * following ways: * Use Google Web Designer's tap area. * Define a JavaScript variable called
   * "clickTag". * Use the Enabler (Enabler.exit()) to track exits in rich media formats.
   * @param exitEvents exitEvents or {@code null} for none
   */
  public Creative setExitEvents(java.util.List<ExitEvent> exitEvents) {
    this.exitEvents = exitEvents;
    return this;
  }

  /**
   * Optional. Indicates the creative will automatically expand on hover. Optional and only valid
   * for third-party expandable creatives. Third-party expandable creatives are creatives with
   * following hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type:
   * * `CREATIVE_TYPE_EXPANDABLE`
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getExpandOnHover() {
    return expandOnHover;
  }

  /**
   * Optional. Indicates the creative will automatically expand on hover. Optional and only valid
   * for third-party expandable creatives. Third-party expandable creatives are creatives with
   * following hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type:
   * * `CREATIVE_TYPE_EXPANDABLE`
   * @param expandOnHover expandOnHover or {@code null} for none
   */
  public Creative setExpandOnHover(java.lang.Boolean expandOnHover) {
    this.expandOnHover = expandOnHover;
    return this;
  }

  /**
   * Optional. Specifies the expanding direction of the creative. Required and only valid for third-
   * party expandable creatives. Third-party expandable creatives are creatives with following
   * hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_EXPANDABLE`
   * @return value or {@code null} for none
   */
  public java.lang.String getExpandingDirection() {
    return expandingDirection;
  }

  /**
   * Optional. Specifies the expanding direction of the creative. Required and only valid for third-
   * party expandable creatives. Third-party expandable creatives are creatives with following
   * hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_EXPANDABLE`
   * @param expandingDirection expandingDirection or {@code null} for none
   */
  public Creative setExpandingDirection(java.lang.String expandingDirection) {
    this.expandingDirection = expandingDirection;
    return this;
  }

  /**
   * Required. Indicates where the creative is hosted.
   * @return value or {@code null} for none
   */
  public java.lang.String getHostingSource() {
    return hostingSource;
  }

  /**
   * Required. Indicates where the creative is hosted.
   * @param hostingSource hostingSource or {@code null} for none
   */
  public Creative setHostingSource(java.lang.String hostingSource) {
    this.hostingSource = hostingSource;
    return this;
  }

  /**
   * Output only. Indicates the third-party VAST tag creative requires HTML5 Video support. Output
   * only and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are
   * creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following
   * creative_type: * `CREATIVE_TYPE_VIDEO`
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHtml5Video() {
    return html5Video;
  }

  /**
   * Output only. Indicates the third-party VAST tag creative requires HTML5 Video support. Output
   * only and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are
   * creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following
   * creative_type: * `CREATIVE_TYPE_VIDEO`
   * @param html5Video html5Video or {@code null} for none
   */
  public Creative setHtml5Video(java.lang.Boolean html5Video) {
    this.html5Video = html5Video;
    return this;
  }

  /**
   * Indicates whether Integral Ad Science (IAS) campaign monitoring is enabled. To enable this for
   * the creative, make sure the Advertiser.creative_config.ias_client_id has been set to your IAS
   * client ID.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIasCampaignMonitoring() {
    return iasCampaignMonitoring;
  }

  /**
   * Indicates whether Integral Ad Science (IAS) campaign monitoring is enabled. To enable this for
   * the creative, make sure the Advertiser.creative_config.ias_client_id has been set to your IAS
   * client ID.
   * @param iasCampaignMonitoring iasCampaignMonitoring or {@code null} for none
   */
  public Creative setIasCampaignMonitoring(java.lang.Boolean iasCampaignMonitoring) {
    this.iasCampaignMonitoring = iasCampaignMonitoring;
    return this;
  }

  /**
   * ID information used to link this creative to an external system. Must be UTF-8 encoded with a
   * length of no more than 10,000 characters.
   * @return value or {@code null} for none
   */
  public java.lang.String getIntegrationCode() {
    return integrationCode;
  }

  /**
   * ID information used to link this creative to an external system. Must be UTF-8 encoded with a
   * length of no more than 10,000 characters.
   * @param integrationCode integrationCode or {@code null} for none
   */
  public Creative setIntegrationCode(java.lang.String integrationCode) {
    this.integrationCode = integrationCode;
    return this;
  }

  /**
   * JavaScript measurement URL from supported third-party verification providers (ComScore,
   * DoubleVerify, IAS, Moat). HTML script tags are not supported. This field is only supported in
   * following creative_type: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` *
   * `CREATIVE_TYPE_NATIVE_APP_INSTALL` * `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE` *
   * `CREATIVE_TYPE_NATIVE_VIDEO`
   * @return value or {@code null} for none
   */
  public java.lang.String getJsTrackerUrl() {
    return jsTrackerUrl;
  }

  /**
   * JavaScript measurement URL from supported third-party verification providers (ComScore,
   * DoubleVerify, IAS, Moat). HTML script tags are not supported. This field is only supported in
   * following creative_type: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` *
   * `CREATIVE_TYPE_NATIVE_APP_INSTALL` * `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE` *
   * `CREATIVE_TYPE_NATIVE_VIDEO`
   * @param jsTrackerUrl jsTrackerUrl or {@code null} for none
   */
  public Creative setJsTrackerUrl(java.lang.String jsTrackerUrl) {
    this.jsTrackerUrl = jsTrackerUrl;
    return this;
  }

  /**
   * Output only. The IDs of the line items this creative is associated with. To associate a
   * creative to a line item, use LineItem.creative_ids instead.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Long> getLineItemIds() {
    return lineItemIds;
  }

  /**
   * Output only. The IDs of the line items this creative is associated with. To associate a
   * creative to a line item, use LineItem.creative_ids instead.
   * @param lineItemIds lineItemIds or {@code null} for none
   */
  public Creative setLineItemIds(java.util.List<java.lang.Long> lineItemIds) {
    this.lineItemIds = lineItemIds;
    return this;
  }

  /**
   * Output only. Media duration of the creative. Applicable when creative_type is one of: *
   * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_NATIVE_VIDEO` *
   * `CREATIVE_TYPE_PUBLISHER_HOSTED`
   * @return value or {@code null} for none
   */
  public String getMediaDuration() {
    return mediaDuration;
  }

  /**
   * Output only. Media duration of the creative. Applicable when creative_type is one of: *
   * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_NATIVE_VIDEO` *
   * `CREATIVE_TYPE_PUBLISHER_HOSTED`
   * @param mediaDuration mediaDuration or {@code null} for none
   */
  public Creative setMediaDuration(String mediaDuration) {
    this.mediaDuration = mediaDuration;
    return this;
  }

  /**
   * Output only. The resource name of the creative.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The resource name of the creative.
   * @param name name or {@code null} for none
   */
  public Creative setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * User notes for this creative. Must be UTF-8 encoded with a length of no more than 20,000
   * characters.
   * @return value or {@code null} for none
   */
  public java.lang.String getNotes() {
    return notes;
  }

  /**
   * User notes for this creative. Must be UTF-8 encoded with a length of no more than 20,000
   * characters.
   * @param notes notes or {@code null} for none
   */
  public Creative setNotes(java.lang.String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Specifies the OBA icon for a video creative. This field is only supported in following
   * creative_type: * `CREATIVE_TYPE_VIDEO`
   * @return value or {@code null} for none
   */
  public ObaIcon getObaIcon() {
    return obaIcon;
  }

  /**
   * Specifies the OBA icon for a video creative. This field is only supported in following
   * creative_type: * `CREATIVE_TYPE_VIDEO`
   * @param obaIcon obaIcon or {@code null} for none
   */
  public Creative setObaIcon(ObaIcon obaIcon) {
    this.obaIcon = obaIcon;
    return this;
  }

  /**
   * Amount of time to play the video before counting a view. This field is required when skippable
   * is true. This field is only supported for the following creative_type: * `CREATIVE_TYPE_VIDEO`
   * @return value or {@code null} for none
   */
  public AudioVideoOffset getProgressOffset() {
    return progressOffset;
  }

  /**
   * Amount of time to play the video before counting a view. This field is required when skippable
   * is true. This field is only supported for the following creative_type: * `CREATIVE_TYPE_VIDEO`
   * @param progressOffset progressOffset or {@code null} for none
   */
  public Creative setProgressOffset(AudioVideoOffset progressOffset) {
    this.progressOffset = progressOffset;
    return this;
  }

  /**
   * Optional. Indicates that the creative relies on HTML5 to render properly. Optional and only
   * valid for third-party tag creatives. Third-party tag creatives are creatives with following
   * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRequireHtml5() {
    return requireHtml5;
  }

  /**
   * Optional. Indicates that the creative relies on HTML5 to render properly. Optional and only
   * valid for third-party tag creatives. Third-party tag creatives are creatives with following
   * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
   * @param requireHtml5 requireHtml5 or {@code null} for none
   */
  public Creative setRequireHtml5(java.lang.Boolean requireHtml5) {
    this.requireHtml5 = requireHtml5;
    return this;
  }

  /**
   * Optional. Indicates that the creative requires MRAID (Mobile Rich Media Ad Interface
   * Definitions system). Set this if the creative relies on mobile gestures for interactivity, such
   * as swiping or tapping. Optional and only valid for third-party tag creatives. Third-party tag
   * creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined
   * with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRequireMraid() {
    return requireMraid;
  }

  /**
   * Optional. Indicates that the creative requires MRAID (Mobile Rich Media Ad Interface
   * Definitions system). Set this if the creative relies on mobile gestures for interactivity, such
   * as swiping or tapping. Optional and only valid for third-party tag creatives. Third-party tag
   * creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined
   * with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
   * @param requireMraid requireMraid or {@code null} for none
   */
  public Creative setRequireMraid(java.lang.Boolean requireMraid) {
    this.requireMraid = requireMraid;
    return this;
  }

  /**
   * Optional. Indicates that the creative will wait for a return ping for attribution. Only valid
   * when using a Campaign Manager 360 tracking ad with a third-party ad server parameter and the
   * ${DC_DBM_TOKEN} macro. Optional and only valid for third-party tag creatives or third-party
   * VAST tag creatives. Third-party tag creatives are creatives with following hosting_source: *
   * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD`
   * * `CREATIVE_TYPE_EXPANDABLE` Third-party VAST tag creatives are creatives with following
   * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_VIDEO`
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRequirePingForAttribution() {
    return requirePingForAttribution;
  }

  /**
   * Optional. Indicates that the creative will wait for a return ping for attribution. Only valid
   * when using a Campaign Manager 360 tracking ad with a third-party ad server parameter and the
   * ${DC_DBM_TOKEN} macro. Optional and only valid for third-party tag creatives or third-party
   * VAST tag creatives. Third-party tag creatives are creatives with following hosting_source: *
   * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD`
   * * `CREATIVE_TYPE_EXPANDABLE` Third-party VAST tag creatives are creatives with following
   * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_VIDEO`
   * @param requirePingForAttribution requirePingForAttribution or {@code null} for none
   */
  public Creative setRequirePingForAttribution(java.lang.Boolean requirePingForAttribution) {
    this.requirePingForAttribution = requirePingForAttribution;
    return this;
  }

  /**
   * Output only. The current status of the creative review process.
   * @return value or {@code null} for none
   */
  public ReviewStatusInfo getReviewStatus() {
    return reviewStatus;
  }

  /**
   * Output only. The current status of the creative review process.
   * @param reviewStatus reviewStatus or {@code null} for none
   */
  public Creative setReviewStatus(ReviewStatusInfo reviewStatus) {
    this.reviewStatus = reviewStatus;
    return this;
  }

  /**
   * Amount of time to play the video before the skip button appears. This field is required when
   * skippable is true. This field is only supported for the following creative_type: *
   * `CREATIVE_TYPE_VIDEO`
   * @return value or {@code null} for none
   */
  public AudioVideoOffset getSkipOffset() {
    return skipOffset;
  }

  /**
   * Amount of time to play the video before the skip button appears. This field is required when
   * skippable is true. This field is only supported for the following creative_type: *
   * `CREATIVE_TYPE_VIDEO`
   * @param skipOffset skipOffset or {@code null} for none
   */
  public Creative setSkipOffset(AudioVideoOffset skipOffset) {
    this.skipOffset = skipOffset;
    return this;
  }

  /**
   * Whether the user can choose to skip a video creative. This field is only supported for the
   * following creative_type: * `CREATIVE_TYPE_VIDEO`
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSkippable() {
    return skippable;
  }

  /**
   * Whether the user can choose to skip a video creative. This field is only supported for the
   * following creative_type: * `CREATIVE_TYPE_VIDEO`
   * @param skippable skippable or {@code null} for none
   */
  public Creative setSkippable(java.lang.Boolean skippable) {
    this.skippable = skippable;
    return this;
  }

  /**
   * Optional. The original third-party tag used for the creative. Required and only valid for
   * third-party tag creatives. Third-party tag creatives are creatives with following
   * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
   * @return value or {@code null} for none
   */
  public java.lang.String getThirdPartyTag() {
    return thirdPartyTag;
  }

  /**
   * Optional. The original third-party tag used for the creative. Required and only valid for
   * third-party tag creatives. Third-party tag creatives are creatives with following
   * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
   * @param thirdPartyTag thirdPartyTag or {@code null} for none
   */
  public Creative setThirdPartyTag(java.lang.String thirdPartyTag) {
    this.thirdPartyTag = thirdPartyTag;
    return this;
  }

  /**
   * Tracking URLs from third parties to track interactions with a video creative. This field is
   * only supported for the following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
   * * `CREATIVE_TYPE_NATIVE_VIDEO`
   * @return value or {@code null} for none
   */
  public java.util.List<ThirdPartyUrl> getThirdPartyUrls() {
    return thirdPartyUrls;
  }

  /**
   * Tracking URLs from third parties to track interactions with a video creative. This field is
   * only supported for the following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
   * * `CREATIVE_TYPE_NATIVE_VIDEO`
   * @param thirdPartyUrls thirdPartyUrls or {@code null} for none
   */
  public Creative setThirdPartyUrls(java.util.List<ThirdPartyUrl> thirdPartyUrls) {
    this.thirdPartyUrls = thirdPartyUrls;
    return this;
  }

  /**
   * Timer custom events for a rich media creative. Timers track the time during which a user views
   * and interacts with a specified part of a rich media creative. A creative can have multiple
   * timer events, each timed independently. Leave it empty or unset for creatives containing image
   * assets only.
   * @return value or {@code null} for none
   */
  public java.util.List<TimerEvent> getTimerEvents() {
    return timerEvents;
  }

  /**
   * Timer custom events for a rich media creative. Timers track the time during which a user views
   * and interacts with a specified part of a rich media creative. A creative can have multiple
   * timer events, each timed independently. Leave it empty or unset for creatives containing image
   * assets only.
   * @param timerEvents timerEvents or {@code null} for none
   */
  public Creative setTimerEvents(java.util.List<TimerEvent> timerEvents) {
    this.timerEvents = timerEvents;
    return this;
  }

  /**
   * Tracking URLs for analytics providers or third-party ad technology vendors. The URLs must start
   * with https (except on inventory that doesn't require SSL compliance). If using macros in your
   * URL, use only macros supported by Display & Video 360. Standard URLs only, no IMG or SCRIPT
   * tags. This field is only supported in following creative_type: * `CREATIVE_TYPE_NATIVE` *
   * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_NATIVE_APP_INSTALL` *
   * `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE` * `CREATIVE_TYPE_NATIVE_VIDEO`
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTrackerUrls() {
    return trackerUrls;
  }

  /**
   * Tracking URLs for analytics providers or third-party ad technology vendors. The URLs must start
   * with https (except on inventory that doesn't require SSL compliance). If using macros in your
   * URL, use only macros supported by Display & Video 360. Standard URLs only, no IMG or SCRIPT
   * tags. This field is only supported in following creative_type: * `CREATIVE_TYPE_NATIVE` *
   * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_NATIVE_APP_INSTALL` *
   * `CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE` * `CREATIVE_TYPE_NATIVE_VIDEO`
   * @param trackerUrls trackerUrls or {@code null} for none
   */
  public Creative setTrackerUrls(java.util.List<java.lang.String> trackerUrls) {
    this.trackerUrls = trackerUrls;
    return this;
  }

  /**
   * Output only. Audio/Video transcodes. Display & Video 360 transcodes the main asset into a
   * number of alternative versions that use different file formats or have different properties
   * (resolution, audio bit rate, and video bit rate), each designed for specific video players or
   * bandwidths. These transcodes give a publisher's system more options to choose from for each
   * impression on your video and ensures that the appropriate file serves based on the viewer’s
   * connection and screen size. This field is only supported in following creative_type: *
   * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_NATIVE_VIDEO` * `CREATIVE_TYPE_AUDIO`
   * @return value or {@code null} for none
   */
  public java.util.List<Transcode> getTranscodes() {
    return transcodes;
  }

  /**
   * Output only. Audio/Video transcodes. Display & Video 360 transcodes the main asset into a
   * number of alternative versions that use different file formats or have different properties
   * (resolution, audio bit rate, and video bit rate), each designed for specific video players or
   * bandwidths. These transcodes give a publisher's system more options to choose from for each
   * impression on your video and ensures that the appropriate file serves based on the viewer’s
   * connection and screen size. This field is only supported in following creative_type: *
   * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_NATIVE_VIDEO` * `CREATIVE_TYPE_AUDIO`
   * @param transcodes transcodes or {@code null} for none
   */
  public Creative setTranscodes(java.util.List<Transcode> transcodes) {
    this.transcodes = transcodes;
    return this;
  }

  /**
   * Optional. An optional creative identifier provided by a registry that is unique across all
   * platforms. Universal Ad ID is part of the VAST 4.0 standard. It can be modified after the
   * creative is created. This field is only supported for the following creative_type: *
   * `CREATIVE_TYPE_VIDEO`
   * @return value or {@code null} for none
   */
  public UniversalAdId getUniversalAdId() {
    return universalAdId;
  }

  /**
   * Optional. An optional creative identifier provided by a registry that is unique across all
   * platforms. Universal Ad ID is part of the VAST 4.0 standard. It can be modified after the
   * creative is created. This field is only supported for the following creative_type: *
   * `CREATIVE_TYPE_VIDEO`
   * @param universalAdId universalAdId or {@code null} for none
   */
  public Creative setUniversalAdId(UniversalAdId universalAdId) {
    this.universalAdId = universalAdId;
    return this;
  }

  /**
   * Output only. The timestamp when the creative was last updated. Assigned by the system.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The timestamp when the creative was last updated. Assigned by the system.
   * @param updateTime updateTime or {@code null} for none
   */
  public Creative setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Optional. The URL of the VAST tag for a third-party VAST tag creative. Required and only valid
   * for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following
   * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_VIDEO`
   * @return value or {@code null} for none
   */
  public java.lang.String getVastTagUrl() {
    return vastTagUrl;
  }

  /**
   * Optional. The URL of the VAST tag for a third-party VAST tag creative. Required and only valid
   * for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following
   * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: *
   * `CREATIVE_TYPE_VIDEO`
   * @param vastTagUrl vastTagUrl or {@code null} for none
   */
  public Creative setVastTagUrl(java.lang.String vastTagUrl) {
    this.vastTagUrl = vastTagUrl;
    return this;
  }

  /**
   * Output only. Indicates the third-party VAST tag creative requires VPAID (Digital Video Player-
   * Ad Interface). Output only and only valid for third-party VAST tag creatives. Third-party VAST
   * tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY`
   * combined with following creative_type: * `CREATIVE_TYPE_VIDEO`
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getVpaid() {
    return vpaid;
  }

  /**
   * Output only. Indicates the third-party VAST tag creative requires VPAID (Digital Video Player-
   * Ad Interface). Output only and only valid for third-party VAST tag creatives. Third-party VAST
   * tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY`
   * combined with following creative_type: * `CREATIVE_TYPE_VIDEO`
   * @param vpaid vpaid or {@code null} for none
   */
  public Creative setVpaid(java.lang.Boolean vpaid) {
    this.vpaid = vpaid;
    return this;
  }

  @Override
  public Creative set(String fieldName, Object value) {
    return (Creative) super.set(fieldName, value);
  }

  @Override
  public Creative clone() {
    return (Creative) super.clone();
  }

}
