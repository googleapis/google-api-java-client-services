/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vmmigration.v1.model;

/**
 * Details for creation of a VM that migrated data disks will be attached to.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the VM Migration API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DisksMigrationVmTargetDefaults extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Additional licenses to assign to the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> additionalLicenses;

  /**
   * Optional. Details of the boot disk of the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BootDiskDefaults bootDiskDefaults;

  /**
   * Optional. Compute instance scheduling information (if empty default is used).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ComputeScheduling computeScheduling;

  /**
   * Optional. The hostname to assign to the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostname;

  /**
   * Optional. A map of labels to associate with the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Required. The machine type to create the VM with.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String machineType;

  /**
   * Optional. The machine type series to create the VM with. For presentation only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String machineTypeSeries;

  /**
   * Optional. The metadata key/value pairs to assign to the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> metadata;

  /**
   * Optional. NICs to attach to the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NetworkInterface> networkInterfaces;

  /**
   * Optional. A list of network tags to associate with the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> networkTags;

  /**
   * Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if
   * the VM boot option is EFI.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean secureBoot;

  /**
   * Optional. The service account to associate the VM with.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceAccount;

  /**
   * Required. The name of the VM to create.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vmName;

  /**
   * Optional. Additional licenses to assign to the VM.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAdditionalLicenses() {
    return additionalLicenses;
  }

  /**
   * Optional. Additional licenses to assign to the VM.
   * @param additionalLicenses additionalLicenses or {@code null} for none
   */
  public DisksMigrationVmTargetDefaults setAdditionalLicenses(java.util.List<java.lang.String> additionalLicenses) {
    this.additionalLicenses = additionalLicenses;
    return this;
  }

  /**
   * Optional. Details of the boot disk of the VM.
   * @return value or {@code null} for none
   */
  public BootDiskDefaults getBootDiskDefaults() {
    return bootDiskDefaults;
  }

  /**
   * Optional. Details of the boot disk of the VM.
   * @param bootDiskDefaults bootDiskDefaults or {@code null} for none
   */
  public DisksMigrationVmTargetDefaults setBootDiskDefaults(BootDiskDefaults bootDiskDefaults) {
    this.bootDiskDefaults = bootDiskDefaults;
    return this;
  }

  /**
   * Optional. Compute instance scheduling information (if empty default is used).
   * @return value or {@code null} for none
   */
  public ComputeScheduling getComputeScheduling() {
    return computeScheduling;
  }

  /**
   * Optional. Compute instance scheduling information (if empty default is used).
   * @param computeScheduling computeScheduling or {@code null} for none
   */
  public DisksMigrationVmTargetDefaults setComputeScheduling(ComputeScheduling computeScheduling) {
    this.computeScheduling = computeScheduling;
    return this;
  }

  /**
   * Optional. The hostname to assign to the VM.
   * @return value or {@code null} for none
   */
  public java.lang.String getHostname() {
    return hostname;
  }

  /**
   * Optional. The hostname to assign to the VM.
   * @param hostname hostname or {@code null} for none
   */
  public DisksMigrationVmTargetDefaults setHostname(java.lang.String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Optional. A map of labels to associate with the VM.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. A map of labels to associate with the VM.
   * @param labels labels or {@code null} for none
   */
  public DisksMigrationVmTargetDefaults setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Required. The machine type to create the VM with.
   * @return value or {@code null} for none
   */
  public java.lang.String getMachineType() {
    return machineType;
  }

  /**
   * Required. The machine type to create the VM with.
   * @param machineType machineType or {@code null} for none
   */
  public DisksMigrationVmTargetDefaults setMachineType(java.lang.String machineType) {
    this.machineType = machineType;
    return this;
  }

  /**
   * Optional. The machine type series to create the VM with. For presentation only.
   * @return value or {@code null} for none
   */
  public java.lang.String getMachineTypeSeries() {
    return machineTypeSeries;
  }

  /**
   * Optional. The machine type series to create the VM with. For presentation only.
   * @param machineTypeSeries machineTypeSeries or {@code null} for none
   */
  public DisksMigrationVmTargetDefaults setMachineTypeSeries(java.lang.String machineTypeSeries) {
    this.machineTypeSeries = machineTypeSeries;
    return this;
  }

  /**
   * Optional. The metadata key/value pairs to assign to the VM.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getMetadata() {
    return metadata;
  }

  /**
   * Optional. The metadata key/value pairs to assign to the VM.
   * @param metadata metadata or {@code null} for none
   */
  public DisksMigrationVmTargetDefaults setMetadata(java.util.Map<String, java.lang.String> metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Optional. NICs to attach to the VM.
   * @return value or {@code null} for none
   */
  public java.util.List<NetworkInterface> getNetworkInterfaces() {
    return networkInterfaces;
  }

  /**
   * Optional. NICs to attach to the VM.
   * @param networkInterfaces networkInterfaces or {@code null} for none
   */
  public DisksMigrationVmTargetDefaults setNetworkInterfaces(java.util.List<NetworkInterface> networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
    return this;
  }

  /**
   * Optional. A list of network tags to associate with the VM.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getNetworkTags() {
    return networkTags;
  }

  /**
   * Optional. A list of network tags to associate with the VM.
   * @param networkTags networkTags or {@code null} for none
   */
  public DisksMigrationVmTargetDefaults setNetworkTags(java.util.List<java.lang.String> networkTags) {
    this.networkTags = networkTags;
    return this;
  }

  /**
   * Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if
   * the VM boot option is EFI.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSecureBoot() {
    return secureBoot;
  }

  /**
   * Optional. Defines whether the instance has Secure Boot enabled. This can be set to true only if
   * the VM boot option is EFI.
   * @param secureBoot secureBoot or {@code null} for none
   */
  public DisksMigrationVmTargetDefaults setSecureBoot(java.lang.Boolean secureBoot) {
    this.secureBoot = secureBoot;
    return this;
  }

  /**
   * Optional. The service account to associate the VM with.
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceAccount() {
    return serviceAccount;
  }

  /**
   * Optional. The service account to associate the VM with.
   * @param serviceAccount serviceAccount or {@code null} for none
   */
  public DisksMigrationVmTargetDefaults setServiceAccount(java.lang.String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Required. The name of the VM to create.
   * @return value or {@code null} for none
   */
  public java.lang.String getVmName() {
    return vmName;
  }

  /**
   * Required. The name of the VM to create.
   * @param vmName vmName or {@code null} for none
   */
  public DisksMigrationVmTargetDefaults setVmName(java.lang.String vmName) {
    this.vmName = vmName;
    return this;
  }

  @Override
  public DisksMigrationVmTargetDefaults set(String fieldName, Object value) {
    return (DisksMigrationVmTargetDefaults) super.set(fieldName, value);
  }

  @Override
  public DisksMigrationVmTargetDefaults clone() {
    return (DisksMigrationVmTargetDefaults) super.clone();
  }

}
