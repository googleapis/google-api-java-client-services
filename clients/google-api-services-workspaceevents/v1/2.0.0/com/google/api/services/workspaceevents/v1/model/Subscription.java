/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.workspaceevents.v1.model;

/**
 * [Developer Preview](https://developers.google.com/workspace/preview). A subscription to receive
 * events about a Google Workspace resource. To learn more about subscriptions, see the [Google
 * Workspace Events API overview](https://developers.google.com/workspace/events).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Workspace Events API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Subscription extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The user who authorized the creation of the subscription. Format: `users/{user}`
   * For Google Workspace users, the `{user}` value is the [`user.id`](https://developers.google.com
   * /admin-sdk/directory/reference/rest/v1/users#User.FIELDS.ids) field from the Directory API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String authority;

  /**
   * Output only. The time when the subscription is created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. This checksum is computed by the server based on the value of other fields, and might
   * be sent on update requests to ensure the client has an up-to-date value before proceeding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Required. Immutable. Unordered list. Input for creating a subscription. Otherwise, output only.
   * One or more types of events to receive about the target resource. Formatted according to the
   * CloudEvents specification. The supported event types depend on the target resource of your
   * subscription. For details, see [Supported Google Workspace
   * events](https://developers.google.com/workspace/events/guides#supported-events). By default,
   * you also receive events about the [lifecycle of your
   * subscription](https://developers.google.com/workspace/events/guides/events-lifecycle). You
   * don't need to specify lifecycle events for this field. If you specify an event type that
   * doesn't exist for the target resource, the request returns an HTTP `400 Bad Request` status
   * code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> eventTypes;

  /**
   * Non-empty default. The timestamp in UTC when the subscription expires. Always displayed on
   * output, regardless of what was used on input.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String expireTime;

  /**
   * Optional. Immutable. Identifier. Resource name of the subscription. Format:
   * `subscriptions/{subscription}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Required. Immutable. The endpoint where the subscription delivers events, such as a Pub/Sub
   * topic.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NotificationEndpoint notificationEndpoint;

  /**
   * Optional. Options about what data to include in the event payload. Only supported for Google
   * Chat events.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PayloadOptions payloadOptions;

  /**
   * Output only. If `true`, the subscription is in the process of being updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean reconciling;

  /**
   * Output only. The state of the subscription. Determines whether the subscription can receive
   * events and deliver them to the notification endpoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. The error that suspended the subscription. To reactivate the subscription, resolve
   * the error and call the `ReactivateSubscription` method.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String suspensionReason;

  /**
   * Required. Immutable. The Google Workspace resource that's monitored for events, formatted as
   * the [full resource name](https://google.aip.dev/122#full-resource-names). To learn about target
   * resources and the events that they support, see [Supported Google Workspace
   * events](https://developers.google.com/workspace/events#supported-events). A user can only
   * authorize your app to create one subscription for a given target resource. If your app tries to
   * create another subscription with the same user credentials, the request returns an
   * `ALREADY_EXISTS` error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetResource;

  /**
   * Input only. The time-to-live (TTL) or duration for the subscription. If unspecified or set to
   * `0`, uses the maximum possible duration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String ttl;

  /**
   * Output only. System-assigned unique identifier for the subscription.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Output only. The last time that the subscription is updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. The user who authorized the creation of the subscription. Format: `users/{user}`
   * For Google Workspace users, the `{user}` value is the [`user.id`](https://developers.google.com
   * /admin-sdk/directory/reference/rest/v1/users#User.FIELDS.ids) field from the Directory API.
   * @return value or {@code null} for none
   */
  public java.lang.String getAuthority() {
    return authority;
  }

  /**
   * Output only. The user who authorized the creation of the subscription. Format: `users/{user}`
   * For Google Workspace users, the `{user}` value is the [`user.id`](https://developers.google.com
   * /admin-sdk/directory/reference/rest/v1/users#User.FIELDS.ids) field from the Directory API.
   * @param authority authority or {@code null} for none
   */
  public Subscription setAuthority(java.lang.String authority) {
    this.authority = authority;
    return this;
  }

  /**
   * Output only. The time when the subscription is created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time when the subscription is created.
   * @param createTime createTime or {@code null} for none
   */
  public Subscription setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. This checksum is computed by the server based on the value of other fields, and might
   * be sent on update requests to ensure the client has an up-to-date value before proceeding.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Optional. This checksum is computed by the server based on the value of other fields, and might
   * be sent on update requests to ensure the client has an up-to-date value before proceeding.
   * @param etag etag or {@code null} for none
   */
  public Subscription setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Required. Immutable. Unordered list. Input for creating a subscription. Otherwise, output only.
   * One or more types of events to receive about the target resource. Formatted according to the
   * CloudEvents specification. The supported event types depend on the target resource of your
   * subscription. For details, see [Supported Google Workspace
   * events](https://developers.google.com/workspace/events/guides#supported-events). By default,
   * you also receive events about the [lifecycle of your
   * subscription](https://developers.google.com/workspace/events/guides/events-lifecycle). You
   * don't need to specify lifecycle events for this field. If you specify an event type that
   * doesn't exist for the target resource, the request returns an HTTP `400 Bad Request` status
   * code.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getEventTypes() {
    return eventTypes;
  }

  /**
   * Required. Immutable. Unordered list. Input for creating a subscription. Otherwise, output only.
   * One or more types of events to receive about the target resource. Formatted according to the
   * CloudEvents specification. The supported event types depend on the target resource of your
   * subscription. For details, see [Supported Google Workspace
   * events](https://developers.google.com/workspace/events/guides#supported-events). By default,
   * you also receive events about the [lifecycle of your
   * subscription](https://developers.google.com/workspace/events/guides/events-lifecycle). You
   * don't need to specify lifecycle events for this field. If you specify an event type that
   * doesn't exist for the target resource, the request returns an HTTP `400 Bad Request` status
   * code.
   * @param eventTypes eventTypes or {@code null} for none
   */
  public Subscription setEventTypes(java.util.List<java.lang.String> eventTypes) {
    this.eventTypes = eventTypes;
    return this;
  }

  /**
   * Non-empty default. The timestamp in UTC when the subscription expires. Always displayed on
   * output, regardless of what was used on input.
   * @return value or {@code null} for none
   */
  public String getExpireTime() {
    return expireTime;
  }

  /**
   * Non-empty default. The timestamp in UTC when the subscription expires. Always displayed on
   * output, regardless of what was used on input.
   * @param expireTime expireTime or {@code null} for none
   */
  public Subscription setExpireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Optional. Immutable. Identifier. Resource name of the subscription. Format:
   * `subscriptions/{subscription}`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Optional. Immutable. Identifier. Resource name of the subscription. Format:
   * `subscriptions/{subscription}`
   * @param name name or {@code null} for none
   */
  public Subscription setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Immutable. The endpoint where the subscription delivers events, such as a Pub/Sub
   * topic.
   * @return value or {@code null} for none
   */
  public NotificationEndpoint getNotificationEndpoint() {
    return notificationEndpoint;
  }

  /**
   * Required. Immutable. The endpoint where the subscription delivers events, such as a Pub/Sub
   * topic.
   * @param notificationEndpoint notificationEndpoint or {@code null} for none
   */
  public Subscription setNotificationEndpoint(NotificationEndpoint notificationEndpoint) {
    this.notificationEndpoint = notificationEndpoint;
    return this;
  }

  /**
   * Optional. Options about what data to include in the event payload. Only supported for Google
   * Chat events.
   * @return value or {@code null} for none
   */
  public PayloadOptions getPayloadOptions() {
    return payloadOptions;
  }

  /**
   * Optional. Options about what data to include in the event payload. Only supported for Google
   * Chat events.
   * @param payloadOptions payloadOptions or {@code null} for none
   */
  public Subscription setPayloadOptions(PayloadOptions payloadOptions) {
    this.payloadOptions = payloadOptions;
    return this;
  }

  /**
   * Output only. If `true`, the subscription is in the process of being updated.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReconciling() {
    return reconciling;
  }

  /**
   * Output only. If `true`, the subscription is in the process of being updated.
   * @param reconciling reconciling or {@code null} for none
   */
  public Subscription setReconciling(java.lang.Boolean reconciling) {
    this.reconciling = reconciling;
    return this;
  }

  /**
   * Output only. The state of the subscription. Determines whether the subscription can receive
   * events and deliver them to the notification endpoint.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The state of the subscription. Determines whether the subscription can receive
   * events and deliver them to the notification endpoint.
   * @param state state or {@code null} for none
   */
  public Subscription setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. The error that suspended the subscription. To reactivate the subscription, resolve
   * the error and call the `ReactivateSubscription` method.
   * @return value or {@code null} for none
   */
  public java.lang.String getSuspensionReason() {
    return suspensionReason;
  }

  /**
   * Output only. The error that suspended the subscription. To reactivate the subscription, resolve
   * the error and call the `ReactivateSubscription` method.
   * @param suspensionReason suspensionReason or {@code null} for none
   */
  public Subscription setSuspensionReason(java.lang.String suspensionReason) {
    this.suspensionReason = suspensionReason;
    return this;
  }

  /**
   * Required. Immutable. The Google Workspace resource that's monitored for events, formatted as
   * the [full resource name](https://google.aip.dev/122#full-resource-names). To learn about target
   * resources and the events that they support, see [Supported Google Workspace
   * events](https://developers.google.com/workspace/events#supported-events). A user can only
   * authorize your app to create one subscription for a given target resource. If your app tries to
   * create another subscription with the same user credentials, the request returns an
   * `ALREADY_EXISTS` error.
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetResource() {
    return targetResource;
  }

  /**
   * Required. Immutable. The Google Workspace resource that's monitored for events, formatted as
   * the [full resource name](https://google.aip.dev/122#full-resource-names). To learn about target
   * resources and the events that they support, see [Supported Google Workspace
   * events](https://developers.google.com/workspace/events#supported-events). A user can only
   * authorize your app to create one subscription for a given target resource. If your app tries to
   * create another subscription with the same user credentials, the request returns an
   * `ALREADY_EXISTS` error.
   * @param targetResource targetResource or {@code null} for none
   */
  public Subscription setTargetResource(java.lang.String targetResource) {
    this.targetResource = targetResource;
    return this;
  }

  /**
   * Input only. The time-to-live (TTL) or duration for the subscription. If unspecified or set to
   * `0`, uses the maximum possible duration.
   * @return value or {@code null} for none
   */
  public String getTtl() {
    return ttl;
  }

  /**
   * Input only. The time-to-live (TTL) or duration for the subscription. If unspecified or set to
   * `0`, uses the maximum possible duration.
   * @param ttl ttl or {@code null} for none
   */
  public Subscription setTtl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Output only. System-assigned unique identifier for the subscription.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. System-assigned unique identifier for the subscription.
   * @param uid uid or {@code null} for none
   */
  public Subscription setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Output only. The last time that the subscription is updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The last time that the subscription is updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public Subscription setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public Subscription set(String fieldName, Object value) {
    return (Subscription) super.set(fieldName, value);
  }

  @Override
  public Subscription clone() {
    return (Subscription) super.clone();
  }

}
