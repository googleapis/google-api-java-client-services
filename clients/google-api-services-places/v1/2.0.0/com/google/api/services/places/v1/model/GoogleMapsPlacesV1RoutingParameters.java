/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.places.v1.model;

/**
 * Parameters to configure the routing calculations to the places in the response, both along a
 * route (where result ranking will be influenced) and for calculating travel times on results.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Places API (New). For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleMapsPlacesV1RoutingParameters extends com.google.api.client.json.GenericJson {

  /**
   * Optional. An explicit routing origin that overrides the origin defined in the polyline. By
   * default, the polyline origin is used.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeLatLng origin;

  /**
   * Optional. The route modifiers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlacesV1RouteModifiers routeModifiers;

  /**
   * Optional. Specifies how to compute the routing summaries. The server attempts to use the
   * selected routing preference to compute the route. The traffic aware routing preference is only
   * available for the `DRIVE` or `TWO_WHEELER` `travelMode`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String routingPreference;

  /**
   * Optional. The travel mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String travelMode;

  /**
   * Optional. An explicit routing origin that overrides the origin defined in the polyline. By
   * default, the polyline origin is used.
   * @return value or {@code null} for none
   */
  public GoogleTypeLatLng getOrigin() {
    return origin;
  }

  /**
   * Optional. An explicit routing origin that overrides the origin defined in the polyline. By
   * default, the polyline origin is used.
   * @param origin origin or {@code null} for none
   */
  public GoogleMapsPlacesV1RoutingParameters setOrigin(GoogleTypeLatLng origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Optional. The route modifiers.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlacesV1RouteModifiers getRouteModifiers() {
    return routeModifiers;
  }

  /**
   * Optional. The route modifiers.
   * @param routeModifiers routeModifiers or {@code null} for none
   */
  public GoogleMapsPlacesV1RoutingParameters setRouteModifiers(GoogleMapsPlacesV1RouteModifiers routeModifiers) {
    this.routeModifiers = routeModifiers;
    return this;
  }

  /**
   * Optional. Specifies how to compute the routing summaries. The server attempts to use the
   * selected routing preference to compute the route. The traffic aware routing preference is only
   * available for the `DRIVE` or `TWO_WHEELER` `travelMode`.
   * @return value or {@code null} for none
   */
  public java.lang.String getRoutingPreference() {
    return routingPreference;
  }

  /**
   * Optional. Specifies how to compute the routing summaries. The server attempts to use the
   * selected routing preference to compute the route. The traffic aware routing preference is only
   * available for the `DRIVE` or `TWO_WHEELER` `travelMode`.
   * @param routingPreference routingPreference or {@code null} for none
   */
  public GoogleMapsPlacesV1RoutingParameters setRoutingPreference(java.lang.String routingPreference) {
    this.routingPreference = routingPreference;
    return this;
  }

  /**
   * Optional. The travel mode.
   * @return value or {@code null} for none
   */
  public java.lang.String getTravelMode() {
    return travelMode;
  }

  /**
   * Optional. The travel mode.
   * @param travelMode travelMode or {@code null} for none
   */
  public GoogleMapsPlacesV1RoutingParameters setTravelMode(java.lang.String travelMode) {
    this.travelMode = travelMode;
    return this;
  }

  @Override
  public GoogleMapsPlacesV1RoutingParameters set(String fieldName, Object value) {
    return (GoogleMapsPlacesV1RoutingParameters) super.set(fieldName, value);
  }

  @Override
  public GoogleMapsPlacesV1RoutingParameters clone() {
    return (GoogleMapsPlacesV1RoutingParameters) super.clone();
  }

}
