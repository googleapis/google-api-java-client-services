/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * All informations about category types of the entity.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefCategoryInfo extends com.google.api.client.json.GenericJson {

  /**
   * Contains all types relevant for this entity, along with their provenances and confidences. This
   * field basically replicates information above in a unified way, so that Refcon scroing can make
   * better use of it. If present, Refcon scoring will use all_types, and ignore other fields like
   * freebase_type. Note: there is some basic conflict resolution applied when all_types are
   * computed (implemented in type-extractor.cc, IsLikelyConflictingFreebase).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefFreebaseType> allTypes;

  /**
   * verticals4 categories that describe this entity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefFatcatCategory> fatcatCategory;

  /**
   * verticals4 categories that describe the context of the entity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefFatcatCategory> fatcatContext;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefFreebaseType> freebaseType;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefKGCollection> kgCollection;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepositoryWebrefOysterType oysterType;

  /**
   * verticals4 categories that cooccur with this entity, aggregated over D2E. See where we read
   * from CompactDocClassification in http://google3/repository/webref/preprocessing/fatcat-
   * categories.cc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefFatcatCategory> salientCategory;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefWikipediaCategory> wikipediaCategory;

  /**
   * WPCat CategotyResult classification.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefFreebaseType> wpCategory;

  /**
   * Contains all types relevant for this entity, along with their provenances and confidences. This
   * field basically replicates information above in a unified way, so that Refcon scroing can make
   * better use of it. If present, Refcon scoring will use all_types, and ignore other fields like
   * freebase_type. Note: there is some basic conflict resolution applied when all_types are
   * computed (implemented in type-extractor.cc, IsLikelyConflictingFreebase).
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefFreebaseType> getAllTypes() {
    return allTypes;
  }

  /**
   * Contains all types relevant for this entity, along with their provenances and confidences. This
   * field basically replicates information above in a unified way, so that Refcon scroing can make
   * better use of it. If present, Refcon scoring will use all_types, and ignore other fields like
   * freebase_type. Note: there is some basic conflict resolution applied when all_types are
   * computed (implemented in type-extractor.cc, IsLikelyConflictingFreebase).
   * @param allTypes allTypes or {@code null} for none
   */
  public RepositoryWebrefCategoryInfo setAllTypes(java.util.List<RepositoryWebrefFreebaseType> allTypes) {
    this.allTypes = allTypes;
    return this;
  }

  /**
   * verticals4 categories that describe this entity.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefFatcatCategory> getFatcatCategory() {
    return fatcatCategory;
  }

  /**
   * verticals4 categories that describe this entity.
   * @param fatcatCategory fatcatCategory or {@code null} for none
   */
  public RepositoryWebrefCategoryInfo setFatcatCategory(java.util.List<RepositoryWebrefFatcatCategory> fatcatCategory) {
    this.fatcatCategory = fatcatCategory;
    return this;
  }

  /**
   * verticals4 categories that describe the context of the entity.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefFatcatCategory> getFatcatContext() {
    return fatcatContext;
  }

  /**
   * verticals4 categories that describe the context of the entity.
   * @param fatcatContext fatcatContext or {@code null} for none
   */
  public RepositoryWebrefCategoryInfo setFatcatContext(java.util.List<RepositoryWebrefFatcatCategory> fatcatContext) {
    this.fatcatContext = fatcatContext;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefFreebaseType> getFreebaseType() {
    return freebaseType;
  }

  /**
   * @param freebaseType freebaseType or {@code null} for none
   */
  public RepositoryWebrefCategoryInfo setFreebaseType(java.util.List<RepositoryWebrefFreebaseType> freebaseType) {
    this.freebaseType = freebaseType;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefKGCollection> getKgCollection() {
    return kgCollection;
  }

  /**
   * @param kgCollection kgCollection or {@code null} for none
   */
  public RepositoryWebrefCategoryInfo setKgCollection(java.util.List<RepositoryWebrefKGCollection> kgCollection) {
    this.kgCollection = kgCollection;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public RepositoryWebrefOysterType getOysterType() {
    return oysterType;
  }

  /**
   * @param oysterType oysterType or {@code null} for none
   */
  public RepositoryWebrefCategoryInfo setOysterType(RepositoryWebrefOysterType oysterType) {
    this.oysterType = oysterType;
    return this;
  }

  /**
   * verticals4 categories that cooccur with this entity, aggregated over D2E. See where we read
   * from CompactDocClassification in http://google3/repository/webref/preprocessing/fatcat-
   * categories.cc.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefFatcatCategory> getSalientCategory() {
    return salientCategory;
  }

  /**
   * verticals4 categories that cooccur with this entity, aggregated over D2E. See where we read
   * from CompactDocClassification in http://google3/repository/webref/preprocessing/fatcat-
   * categories.cc.
   * @param salientCategory salientCategory or {@code null} for none
   */
  public RepositoryWebrefCategoryInfo setSalientCategory(java.util.List<RepositoryWebrefFatcatCategory> salientCategory) {
    this.salientCategory = salientCategory;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefWikipediaCategory> getWikipediaCategory() {
    return wikipediaCategory;
  }

  /**
   * @param wikipediaCategory wikipediaCategory or {@code null} for none
   */
  public RepositoryWebrefCategoryInfo setWikipediaCategory(java.util.List<RepositoryWebrefWikipediaCategory> wikipediaCategory) {
    this.wikipediaCategory = wikipediaCategory;
    return this;
  }

  /**
   * WPCat CategotyResult classification.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefFreebaseType> getWpCategory() {
    return wpCategory;
  }

  /**
   * WPCat CategotyResult classification.
   * @param wpCategory wpCategory or {@code null} for none
   */
  public RepositoryWebrefCategoryInfo setWpCategory(java.util.List<RepositoryWebrefFreebaseType> wpCategory) {
    this.wpCategory = wpCategory;
    return this;
  }

  @Override
  public RepositoryWebrefCategoryInfo set(String fieldName, Object value) {
    return (RepositoryWebrefCategoryInfo) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefCategoryInfo clone() {
    return (RepositoryWebrefCategoryInfo) super.clone();
  }

}
