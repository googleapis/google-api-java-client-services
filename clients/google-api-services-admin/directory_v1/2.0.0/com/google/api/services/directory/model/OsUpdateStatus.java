/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.directory.model;

/**
 * Contains information regarding the current OS update status.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Admin SDK API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class OsUpdateStatus extends com.google.api.client.json.GenericJson {

  /**
   * Date and time of the last reboot.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rebootTime;

  /**
   * The update state of an OS update.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * New required platform version from the pending updated kiosk app.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetKioskAppVersion;

  /**
   * New platform version of the OS image being downloaded and applied. It is only set when update
   * status is UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT. Note this could be a
   * dummy "0.0.0.0" for UPDATE_STATUS_NEED_REBOOT for some edge cases, e.g. update engine is
   * restarted without a reboot.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetOsVersion;

  /**
   * Date and time of the last update check.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String updateCheckTime;

  /**
   * Date and time of the last successful OS update.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String updateTime;

  /**
   * Date and time of the last reboot.
   * @return value or {@code null} for none
   */
  public java.lang.String getRebootTime() {
    return rebootTime;
  }

  /**
   * Date and time of the last reboot.
   * @param rebootTime rebootTime or {@code null} for none
   */
  public OsUpdateStatus setRebootTime(java.lang.String rebootTime) {
    this.rebootTime = rebootTime;
    return this;
  }

  /**
   * The update state of an OS update.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * The update state of an OS update.
   * @param state state or {@code null} for none
   */
  public OsUpdateStatus setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * New required platform version from the pending updated kiosk app.
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetKioskAppVersion() {
    return targetKioskAppVersion;
  }

  /**
   * New required platform version from the pending updated kiosk app.
   * @param targetKioskAppVersion targetKioskAppVersion or {@code null} for none
   */
  public OsUpdateStatus setTargetKioskAppVersion(java.lang.String targetKioskAppVersion) {
    this.targetKioskAppVersion = targetKioskAppVersion;
    return this;
  }

  /**
   * New platform version of the OS image being downloaded and applied. It is only set when update
   * status is UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT. Note this could be a
   * dummy "0.0.0.0" for UPDATE_STATUS_NEED_REBOOT for some edge cases, e.g. update engine is
   * restarted without a reboot.
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetOsVersion() {
    return targetOsVersion;
  }

  /**
   * New platform version of the OS image being downloaded and applied. It is only set when update
   * status is UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT. Note this could be a
   * dummy "0.0.0.0" for UPDATE_STATUS_NEED_REBOOT for some edge cases, e.g. update engine is
   * restarted without a reboot.
   * @param targetOsVersion targetOsVersion or {@code null} for none
   */
  public OsUpdateStatus setTargetOsVersion(java.lang.String targetOsVersion) {
    this.targetOsVersion = targetOsVersion;
    return this;
  }

  /**
   * Date and time of the last update check.
   * @return value or {@code null} for none
   */
  public java.lang.String getUpdateCheckTime() {
    return updateCheckTime;
  }

  /**
   * Date and time of the last update check.
   * @param updateCheckTime updateCheckTime or {@code null} for none
   */
  public OsUpdateStatus setUpdateCheckTime(java.lang.String updateCheckTime) {
    this.updateCheckTime = updateCheckTime;
    return this;
  }

  /**
   * Date and time of the last successful OS update.
   * @return value or {@code null} for none
   */
  public java.lang.String getUpdateTime() {
    return updateTime;
  }

  /**
   * Date and time of the last successful OS update.
   * @param updateTime updateTime or {@code null} for none
   */
  public OsUpdateStatus setUpdateTime(java.lang.String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public OsUpdateStatus set(String fieldName, Object value) {
    return (OsUpdateStatus) super.set(fieldName, value);
  }

  @Override
  public OsUpdateStatus clone() {
    return (OsUpdateStatus) super.clone();
  }

}
