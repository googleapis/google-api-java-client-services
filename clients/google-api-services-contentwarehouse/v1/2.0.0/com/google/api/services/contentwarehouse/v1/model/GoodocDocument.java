/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Top-level representation of OCRed document
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoodocDocument extends com.google.api.client.json.GenericJson {

  /**
   * Debug info, recording the history of any editing done through the interface in goodoc-
   * editing.h. The strings look like "MoveParagraph(page_index = 0, source_block_index = 3, ...);
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("EditingHistory")
  private java.util.List<java.lang.String> editingHistory;

  /**
   * Logical entities are stored as blobs. Depending on the kind of thing this is a goodoc of, a
   * separate .proto file is expected to define the logical entity structure. Hence we can still
   * parse this as a goodoc for people who dont care about this, and people who care about this can
   * parse it specifically. ocr/goodoc/logical-entity-utils.h has methods to read and write these.
   * See Goodoc++ doc
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("LogicalEntity")
  private java.util.List<java.lang.String> logicalEntity;

  /**
   * The names of the proto messages serialized in LogicalEntity, one for each LogicalEntity. The
   * repetitions should number 0 to leave this unspecified, or they should equal the number of
   * LogicalEntity strings.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("LogicalEntityMessageName")
  private java.util.List<java.lang.String> logicalEntityMessageName;

  /**
   * For multi-goodoc documents
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("SubDocuments")
  private java.util.List<GoodocDocument> subDocuments;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoodocDocumentHeader header;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoodocDocumentPage> page;

  /**
   * Debug info, recording the history of any editing done through the interface in goodoc-
   * editing.h. The strings look like "MoveParagraph(page_index = 0, source_block_index = 3, ...);
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getEditingHistory() {
    return editingHistory;
  }

  /**
   * Debug info, recording the history of any editing done through the interface in goodoc-
   * editing.h. The strings look like "MoveParagraph(page_index = 0, source_block_index = 3, ...);
   * @param editingHistory editingHistory or {@code null} for none
   */
  public GoodocDocument setEditingHistory(java.util.List<java.lang.String> editingHistory) {
    this.editingHistory = editingHistory;
    return this;
  }

  /**
   * Logical entities are stored as blobs. Depending on the kind of thing this is a goodoc of, a
   * separate .proto file is expected to define the logical entity structure. Hence we can still
   * parse this as a goodoc for people who dont care about this, and people who care about this can
   * parse it specifically. ocr/goodoc/logical-entity-utils.h has methods to read and write these.
   * See Goodoc++ doc
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLogicalEntity() {
    return logicalEntity;
  }

  /**
   * Logical entities are stored as blobs. Depending on the kind of thing this is a goodoc of, a
   * separate .proto file is expected to define the logical entity structure. Hence we can still
   * parse this as a goodoc for people who dont care about this, and people who care about this can
   * parse it specifically. ocr/goodoc/logical-entity-utils.h has methods to read and write these.
   * See Goodoc++ doc
   * @param logicalEntity logicalEntity or {@code null} for none
   */
  public GoodocDocument setLogicalEntity(java.util.List<java.lang.String> logicalEntity) {
    this.logicalEntity = logicalEntity;
    return this;
  }

  /**
   * The names of the proto messages serialized in LogicalEntity, one for each LogicalEntity. The
   * repetitions should number 0 to leave this unspecified, or they should equal the number of
   * LogicalEntity strings.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLogicalEntityMessageName() {
    return logicalEntityMessageName;
  }

  /**
   * The names of the proto messages serialized in LogicalEntity, one for each LogicalEntity. The
   * repetitions should number 0 to leave this unspecified, or they should equal the number of
   * LogicalEntity strings.
   * @param logicalEntityMessageName logicalEntityMessageName or {@code null} for none
   */
  public GoodocDocument setLogicalEntityMessageName(java.util.List<java.lang.String> logicalEntityMessageName) {
    this.logicalEntityMessageName = logicalEntityMessageName;
    return this;
  }

  /**
   * For multi-goodoc documents
   * @return value or {@code null} for none
   */
  public java.util.List<GoodocDocument> getSubDocuments() {
    return subDocuments;
  }

  /**
   * For multi-goodoc documents
   * @param subDocuments subDocuments or {@code null} for none
   */
  public GoodocDocument setSubDocuments(java.util.List<GoodocDocument> subDocuments) {
    this.subDocuments = subDocuments;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public GoodocDocumentHeader getHeader() {
    return header;
  }

  /**
   * @param header header or {@code null} for none
   */
  public GoodocDocument setHeader(GoodocDocumentHeader header) {
    this.header = header;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<GoodocDocumentPage> getPage() {
    return page;
  }

  /**
   * @param page page or {@code null} for none
   */
  public GoodocDocument setPage(java.util.List<GoodocDocumentPage> page) {
    this.page = page;
    return this;
  }

  @Override
  public GoodocDocument set(String fieldName, Object value) {
    return (GoodocDocument) super.set(fieldName, value);
  }

  @Override
  public GoodocDocument clone() {
    return (GoodocDocument) super.clone();
  }

}
