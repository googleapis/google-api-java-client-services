/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastream.v1.model;

/**
 * Model definition for BigQueryDestinationConfig.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Datastream API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BigQueryDestinationConfig extends com.google.api.client.json.GenericJson {

  /**
   * The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing
   * this field will only affect new tables created in the future, but existing tables will not be
   * impacted. Lower values mean that queries will return fresher data, but may result in higher
   * cost.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String dataFreshness;

  /**
   * Single destination dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SingleTargetDataset singleTargetDataset;

  /**
   * Source hierarchy datasets.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SourceHierarchyDatasets sourceHierarchyDatasets;

  /**
   * The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing
   * this field will only affect new tables created in the future, but existing tables will not be
   * impacted. Lower values mean that queries will return fresher data, but may result in higher
   * cost.
   * @return value or {@code null} for none
   */
  public String getDataFreshness() {
    return dataFreshness;
  }

  /**
   * The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing
   * this field will only affect new tables created in the future, but existing tables will not be
   * impacted. Lower values mean that queries will return fresher data, but may result in higher
   * cost.
   * @param dataFreshness dataFreshness or {@code null} for none
   */
  public BigQueryDestinationConfig setDataFreshness(String dataFreshness) {
    this.dataFreshness = dataFreshness;
    return this;
  }

  /**
   * Single destination dataset.
   * @return value or {@code null} for none
   */
  public SingleTargetDataset getSingleTargetDataset() {
    return singleTargetDataset;
  }

  /**
   * Single destination dataset.
   * @param singleTargetDataset singleTargetDataset or {@code null} for none
   */
  public BigQueryDestinationConfig setSingleTargetDataset(SingleTargetDataset singleTargetDataset) {
    this.singleTargetDataset = singleTargetDataset;
    return this;
  }

  /**
   * Source hierarchy datasets.
   * @return value or {@code null} for none
   */
  public SourceHierarchyDatasets getSourceHierarchyDatasets() {
    return sourceHierarchyDatasets;
  }

  /**
   * Source hierarchy datasets.
   * @param sourceHierarchyDatasets sourceHierarchyDatasets or {@code null} for none
   */
  public BigQueryDestinationConfig setSourceHierarchyDatasets(SourceHierarchyDatasets sourceHierarchyDatasets) {
    this.sourceHierarchyDatasets = sourceHierarchyDatasets;
    return this;
  }

  @Override
  public BigQueryDestinationConfig set(String fieldName, Object value) {
    return (BigQueryDestinationConfig) super.set(fieldName, value);
  }

  @Override
  public BigQueryDestinationConfig clone() {
    return (BigQueryDestinationConfig) super.clone();
  }

}
