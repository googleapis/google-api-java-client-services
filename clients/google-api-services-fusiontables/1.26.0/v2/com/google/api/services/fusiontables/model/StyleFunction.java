/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.fusiontables.model;

/**
 * Represents a StyleFunction within a StyleSetting
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Fusion Tables API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class StyleFunction extends com.google.api.client.json.GenericJson {

  /**
   * Bucket function that assigns a style based on the range a column value falls into.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Bucket> buckets;

  static {
    // hack to force ProGuard to consider Bucket used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Bucket.class);
  }

  /**
   * Name of the column whose value is used in the style.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String columnName;

  /**
   * Gradient function that interpolates a range of colors based on column value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Gradient gradient;

  /**
   * Stylers can be one of three kinds: "fusiontables#fromColumn if the column value is to be used
   * as is, i.e., the column values can have colors in #RRGGBBAA format or integer line widths or
   * icon names; fusiontables#gradient if the styling of the row is to be based on applying the
   * gradient function on the column value; or fusiontables#buckets if the styling is to based on
   * the bucket into which the the column value falls.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * Bucket function that assigns a style based on the range a column value falls into.
   * @return value or {@code null} for none
   */
  public java.util.List<Bucket> getBuckets() {
    return buckets;
  }

  /**
   * Bucket function that assigns a style based on the range a column value falls into.
   * @param buckets buckets or {@code null} for none
   */
  public StyleFunction setBuckets(java.util.List<Bucket> buckets) {
    this.buckets = buckets;
    return this;
  }

  /**
   * Name of the column whose value is used in the style.
   * @return value or {@code null} for none
   */
  public java.lang.String getColumnName() {
    return columnName;
  }

  /**
   * Name of the column whose value is used in the style.
   * @param columnName columnName or {@code null} for none
   */
  public StyleFunction setColumnName(java.lang.String columnName) {
    this.columnName = columnName;
    return this;
  }

  /**
   * Gradient function that interpolates a range of colors based on column value.
   * @return value or {@code null} for none
   */
  public Gradient getGradient() {
    return gradient;
  }

  /**
   * Gradient function that interpolates a range of colors based on column value.
   * @param gradient gradient or {@code null} for none
   */
  public StyleFunction setGradient(Gradient gradient) {
    this.gradient = gradient;
    return this;
  }

  /**
   * Stylers can be one of three kinds: "fusiontables#fromColumn if the column value is to be used
   * as is, i.e., the column values can have colors in #RRGGBBAA format or integer line widths or
   * icon names; fusiontables#gradient if the styling of the row is to be based on applying the
   * gradient function on the column value; or fusiontables#buckets if the styling is to based on
   * the bucket into which the the column value falls.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * Stylers can be one of three kinds: "fusiontables#fromColumn if the column value is to be used
   * as is, i.e., the column values can have colors in #RRGGBBAA format or integer line widths or
   * icon names; fusiontables#gradient if the styling of the row is to be based on applying the
   * gradient function on the column value; or fusiontables#buckets if the styling is to based on
   * the bucket into which the the column value falls.
   * @param kind kind or {@code null} for none
   */
  public StyleFunction setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  @Override
  public StyleFunction set(String fieldName, Object value) {
    return (StyleFunction) super.set(fieldName, value);
  }

  @Override
  public StyleFunction clone() {
    return (StyleFunction) super.clone();
  }

  /**
   * Gradient function that interpolates a range of colors based on column value.
   */
  public static final class Gradient extends com.google.api.client.json.GenericJson {

    /**
     * Array with two or more colors.
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private java.util.List<Colors> colors;

    static {
      // hack to force ProGuard to consider Colors used, since otherwise it would be stripped out
      // see https://github.com/google/google-api-java-client/issues/543
      com.google.api.client.util.Data.nullOf(Colors.class);
    }

    /**
     * Higher-end of the interpolation range: rows with this value will be assigned to colors[n-1].
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private java.lang.Double max;

    /**
     * Lower-end of the interpolation range: rows with this value will be assigned to colors[0].
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private java.lang.Double min;

    /**
     * Array with two or more colors.
     * @return value or {@code null} for none
     */
    public java.util.List<Colors> getColors() {
      return colors;
    }

    /**
     * Array with two or more colors.
     * @param colors colors or {@code null} for none
     */
    public Gradient setColors(java.util.List<Colors> colors) {
      this.colors = colors;
      return this;
    }

    /**
     * Higher-end of the interpolation range: rows with this value will be assigned to colors[n-1].
     * @return value or {@code null} for none
     */
    public java.lang.Double getMax() {
      return max;
    }

    /**
     * Higher-end of the interpolation range: rows with this value will be assigned to colors[n-1].
     * @param max max or {@code null} for none
     */
    public Gradient setMax(java.lang.Double max) {
      this.max = max;
      return this;
    }

    /**
     * Lower-end of the interpolation range: rows with this value will be assigned to colors[0].
     * @return value or {@code null} for none
     */
    public java.lang.Double getMin() {
      return min;
    }

    /**
     * Lower-end of the interpolation range: rows with this value will be assigned to colors[0].
     * @param min min or {@code null} for none
     */
    public Gradient setMin(java.lang.Double min) {
      this.min = min;
      return this;
    }

    @Override
    public Gradient set(String fieldName, Object value) {
      return (Gradient) super.set(fieldName, value);
    }

    @Override
    public Gradient clone() {
      return (Gradient) super.clone();
    }

    /**
     * Model definition for StyleFunctionGradientColors.
     */
    public static final class Colors extends com.google.api.client.json.GenericJson {

      /**
       * Color in #RRGGBB format.
       * The value may be {@code null}.
       */
      @com.google.api.client.util.Key
      private java.lang.String color;

      /**
       * Opacity of the color: 0.0 (transparent) to 1.0 (opaque).
       * The value may be {@code null}.
       */
      @com.google.api.client.util.Key
      private java.lang.Double opacity;

      /**
       * Color in #RRGGBB format.
       * @return value or {@code null} for none
       */
      public java.lang.String getColor() {
        return color;
      }

      /**
       * Color in #RRGGBB format.
       * @param color color or {@code null} for none
       */
      public Colors setColor(java.lang.String color) {
        this.color = color;
        return this;
      }

      /**
       * Opacity of the color: 0.0 (transparent) to 1.0 (opaque).
       * @return value or {@code null} for none
       */
      public java.lang.Double getOpacity() {
        return opacity;
      }

      /**
       * Opacity of the color: 0.0 (transparent) to 1.0 (opaque).
       * @param opacity opacity or {@code null} for none
       */
      public Colors setOpacity(java.lang.Double opacity) {
        this.opacity = opacity;
        return this;
      }

      @Override
      public Colors set(String fieldName, Object value) {
        return (Colors) super.set(fieldName, value);
      }

      @Override
      public Colors clone() {
        return (Colors) super.clone();
      }

    }
  }

}
