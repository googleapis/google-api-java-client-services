/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.compute.model;

/**
 * Represents a traffic classification rule that describes one or more match conditions along with
 * the action to be taken when traffic matches this condition.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Compute Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NetworkPolicyTrafficClassificationRule extends com.google.api.client.json.GenericJson {

  /**
   * The Action to perform when the client connection triggers the rule.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NetworkPolicyTrafficClassificationRuleAction action;

  /**
   * An optional description for this resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Denotes whether the network policy rule is disabled. When set to true, the network policy rule
   * is not enforced and traffic behaves as if it did not exist. If this is unspecified, the network
   * policy rule will be enabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean disabled;

  /**
   * [Output only] Type of the resource. Alwayscompute#networkPolicyTrafficClassificationRule for
   * network policy traffic classification rules
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * A match condition that outgoing traffic is evaluated against. If it evaluates to true, the
   * corresponding 'action' is enforced.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NetworkPolicyTrafficClassificationRuleMatcher match;

  /**
   * An integer indicating the priority of a rule in the list. The priority must be a positive value
   * between 1 and 2147482647. The priority values from 2147482648 to 2147483647 (1000) are reserved
   * for system default network policy rules. Rules are evaluated from highest to lowest priority
   * where 1 is the highest priority and 2147483647 is the lowest priority.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer priority;

  /**
   * An optional name for the rule. This field is not a unique identifier and can be updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ruleName;

  /**
   * [Output Only] Calculation of the complexity of a single network policy rule.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer ruleTupleCount;

  /**
   * A list of secure tags that controls which instances the traffic classification rule applies to.
   * If targetSecureTag are specified, then the traffic classification rule applies only to
   * instances in the VPC network that have one of those EFFECTIVE secure tags, if all the
   * targetSecureTag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may
   * not be set at the same time as targetServiceAccounts. If neithertargetServiceAccounts nor
   * targetSecureTag are specified, the traffic classification rule applies to all instances on the
   * specified network. Maximum number of target label tags allowed is 256.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NetworkPolicyTrafficClassificationRuleSecureTag> targetSecureTags;

  /**
   * A list of service accounts indicating the sets of instances that are applied with this rule.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> targetServiceAccounts;

  /**
   * The Action to perform when the client connection triggers the rule.
   * @return value or {@code null} for none
   */
  public NetworkPolicyTrafficClassificationRuleAction getAction() {
    return action;
  }

  /**
   * The Action to perform when the client connection triggers the rule.
   * @param action action or {@code null} for none
   */
  public NetworkPolicyTrafficClassificationRule setAction(NetworkPolicyTrafficClassificationRuleAction action) {
    this.action = action;
    return this;
  }

  /**
   * An optional description for this resource.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * An optional description for this resource.
   * @param description description or {@code null} for none
   */
  public NetworkPolicyTrafficClassificationRule setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Denotes whether the network policy rule is disabled. When set to true, the network policy rule
   * is not enforced and traffic behaves as if it did not exist. If this is unspecified, the network
   * policy rule will be enabled.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDisabled() {
    return disabled;
  }

  /**
   * Denotes whether the network policy rule is disabled. When set to true, the network policy rule
   * is not enforced and traffic behaves as if it did not exist. If this is unspecified, the network
   * policy rule will be enabled.
   * @param disabled disabled or {@code null} for none
   */
  public NetworkPolicyTrafficClassificationRule setDisabled(java.lang.Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * [Output only] Type of the resource. Alwayscompute#networkPolicyTrafficClassificationRule for
   * network policy traffic classification rules
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * [Output only] Type of the resource. Alwayscompute#networkPolicyTrafficClassificationRule for
   * network policy traffic classification rules
   * @param kind kind or {@code null} for none
   */
  public NetworkPolicyTrafficClassificationRule setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * A match condition that outgoing traffic is evaluated against. If it evaluates to true, the
   * corresponding 'action' is enforced.
   * @return value or {@code null} for none
   */
  public NetworkPolicyTrafficClassificationRuleMatcher getMatch() {
    return match;
  }

  /**
   * A match condition that outgoing traffic is evaluated against. If it evaluates to true, the
   * corresponding 'action' is enforced.
   * @param match match or {@code null} for none
   */
  public NetworkPolicyTrafficClassificationRule setMatch(NetworkPolicyTrafficClassificationRuleMatcher match) {
    this.match = match;
    return this;
  }

  /**
   * An integer indicating the priority of a rule in the list. The priority must be a positive value
   * between 1 and 2147482647. The priority values from 2147482648 to 2147483647 (1000) are reserved
   * for system default network policy rules. Rules are evaluated from highest to lowest priority
   * where 1 is the highest priority and 2147483647 is the lowest priority.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPriority() {
    return priority;
  }

  /**
   * An integer indicating the priority of a rule in the list. The priority must be a positive value
   * between 1 and 2147482647. The priority values from 2147482648 to 2147483647 (1000) are reserved
   * for system default network policy rules. Rules are evaluated from highest to lowest priority
   * where 1 is the highest priority and 2147483647 is the lowest priority.
   * @param priority priority or {@code null} for none
   */
  public NetworkPolicyTrafficClassificationRule setPriority(java.lang.Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * An optional name for the rule. This field is not a unique identifier and can be updated.
   * @return value or {@code null} for none
   */
  public java.lang.String getRuleName() {
    return ruleName;
  }

  /**
   * An optional name for the rule. This field is not a unique identifier and can be updated.
   * @param ruleName ruleName or {@code null} for none
   */
  public NetworkPolicyTrafficClassificationRule setRuleName(java.lang.String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

  /**
   * [Output Only] Calculation of the complexity of a single network policy rule.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRuleTupleCount() {
    return ruleTupleCount;
  }

  /**
   * [Output Only] Calculation of the complexity of a single network policy rule.
   * @param ruleTupleCount ruleTupleCount or {@code null} for none
   */
  public NetworkPolicyTrafficClassificationRule setRuleTupleCount(java.lang.Integer ruleTupleCount) {
    this.ruleTupleCount = ruleTupleCount;
    return this;
  }

  /**
   * A list of secure tags that controls which instances the traffic classification rule applies to.
   * If targetSecureTag are specified, then the traffic classification rule applies only to
   * instances in the VPC network that have one of those EFFECTIVE secure tags, if all the
   * targetSecureTag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may
   * not be set at the same time as targetServiceAccounts. If neithertargetServiceAccounts nor
   * targetSecureTag are specified, the traffic classification rule applies to all instances on the
   * specified network. Maximum number of target label tags allowed is 256.
   * @return value or {@code null} for none
   */
  public java.util.List<NetworkPolicyTrafficClassificationRuleSecureTag> getTargetSecureTags() {
    return targetSecureTags;
  }

  /**
   * A list of secure tags that controls which instances the traffic classification rule applies to.
   * If targetSecureTag are specified, then the traffic classification rule applies only to
   * instances in the VPC network that have one of those EFFECTIVE secure tags, if all the
   * targetSecureTag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may
   * not be set at the same time as targetServiceAccounts. If neithertargetServiceAccounts nor
   * targetSecureTag are specified, the traffic classification rule applies to all instances on the
   * specified network. Maximum number of target label tags allowed is 256.
   * @param targetSecureTags targetSecureTags or {@code null} for none
   */
  public NetworkPolicyTrafficClassificationRule setTargetSecureTags(java.util.List<NetworkPolicyTrafficClassificationRuleSecureTag> targetSecureTags) {
    this.targetSecureTags = targetSecureTags;
    return this;
  }

  /**
   * A list of service accounts indicating the sets of instances that are applied with this rule.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTargetServiceAccounts() {
    return targetServiceAccounts;
  }

  /**
   * A list of service accounts indicating the sets of instances that are applied with this rule.
   * @param targetServiceAccounts targetServiceAccounts or {@code null} for none
   */
  public NetworkPolicyTrafficClassificationRule setTargetServiceAccounts(java.util.List<java.lang.String> targetServiceAccounts) {
    this.targetServiceAccounts = targetServiceAccounts;
    return this;
  }

  @Override
  public NetworkPolicyTrafficClassificationRule set(String fieldName, Object value) {
    return (NetworkPolicyTrafficClassificationRule) super.set(fieldName, value);
  }

  @Override
  public NetworkPolicyTrafficClassificationRule clone() {
    return (NetworkPolicyTrafficClassificationRule) super.clone();
  }

}
