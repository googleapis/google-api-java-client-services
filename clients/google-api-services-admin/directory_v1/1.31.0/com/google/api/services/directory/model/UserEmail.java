/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.directory.model;

/**
 * JSON template for an email.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Admin SDK API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class UserEmail extends com.google.api.client.json.GenericJson {

  /**
   * Email id of the user.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String address;

  /**
   * Custom Type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String customType;

  /**
   * If this is user's primary email. Only one entry could be marked as primary.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean primary;

  /**
   * Each entry can have a type which indicates standard types of that entry. For example email
   * could be of home, work etc. In addition to the standard type, an entry can have a custom type
   * and can take any value Such types should have the CUSTOM value as type and also have a
   * customType value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Email id of the user.
   * @return value or {@code null} for none
   */
  public java.lang.String getAddress() {
    return address;
  }

  /**
   * Email id of the user.
   * @param address address or {@code null} for none
   */
  public UserEmail setAddress(java.lang.String address) {
    this.address = address;
    return this;
  }

  /**
   * Custom Type.
   * @return value or {@code null} for none
   */
  public java.lang.String getCustomType() {
    return customType;
  }

  /**
   * Custom Type.
   * @param customType customType or {@code null} for none
   */
  public UserEmail setCustomType(java.lang.String customType) {
    this.customType = customType;
    return this;
  }

  /**
   * If this is user's primary email. Only one entry could be marked as primary.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPrimary() {
    return primary;
  }

  /**
   * If this is user's primary email. Only one entry could be marked as primary.
   * @param primary primary or {@code null} for none
   */
  public UserEmail setPrimary(java.lang.Boolean primary) {
    this.primary = primary;
    return this;
  }

  /**
   * Each entry can have a type which indicates standard types of that entry. For example email
   * could be of home, work etc. In addition to the standard type, an entry can have a custom type
   * and can take any value Such types should have the CUSTOM value as type and also have a
   * customType value.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Each entry can have a type which indicates standard types of that entry. For example email
   * could be of home, work etc. In addition to the standard type, an entry can have a custom type
   * and can take any value Such types should have the CUSTOM value as type and also have a
   * customType value.
   * @param type type or {@code null} for none
   */
  public UserEmail setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public UserEmail set(String fieldName, Object value) {
    return (UserEmail) super.set(fieldName, value);
  }

  @Override
  public UserEmail clone() {
    return (UserEmail) super.clone();
  }

}
