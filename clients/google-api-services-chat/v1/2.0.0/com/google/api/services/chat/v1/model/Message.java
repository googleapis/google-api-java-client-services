/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.chat.v1.model;

/**
 * A message in Google Chat.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Chat API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Message extends com.google.api.client.json.GenericJson {

  /**
   * Input only. Parameters that a Chat app can use to configure how its response is posted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ActionResponse actionResponse;

  /**
   * Output only. Annotations associated with the `text` in this message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Annotation> annotations;

  static {
    // hack to force ProGuard to consider Annotation used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Annotation.class);
  }

  /**
   * Output only. Plain-text body of the message with all Chat app mentions stripped out.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String argumentText;

  /**
   * User-uploaded attachment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Attachment> attachment;

  static {
    // hack to force ProGuard to consider Attachment used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Attachment.class);
  }

  /**
   * Deprecated: Use `cards_v2` instead. Rich, formatted, and interactive cards that you can use to
   * display UI elements such as: formatted texts, buttons, and clickable images. Cards are normally
   * displayed below the plain-text body of the message. `cards` and `cards_v2` can have a maximum
   * size of 32 KB.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Card> cards;

  static {
    // hack to force ProGuard to consider Card used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Card.class);
  }

  /**
   * Richly formatted and interactive cards that display UI elements and editable widgets, such as:
   * - Formatted text - Buttons - Clickable images - Checkboxes - Radio buttons - Input widgets.
   * Cards are usually displayed below the text body of a Chat message, but can situationally appear
   * other places, such as [dialogs](https://developers.google.com/chat/how-tos/dialogs). Each card
   * can have a maximum size of 32 KB. The `cardId` is a unique identifier among cards in the same
   * message and for identifying user input values. Currently supported widgets include: -
   * `TextParagraph` - `DecoratedText` - `Image` - `ButtonList` - `Divider` - `TextInput` -
   * `SelectionInput` - `Grid`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CardWithId> cardsV2;

  static {
    // hack to force ProGuard to consider CardWithId used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CardWithId.class);
  }

  /**
   * A custom name for a Chat message assigned at creation. Must start with `client-` and contain
   * only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field
   * to get, update, or delete the message with the specified value. For example usage, see [Name a
   * created
   * message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clientAssignedMessageId;

  /**
   * Output only. The time at which the message was created in Google Chat.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Output only. The time at which the message was deleted in Google Chat server. If the message is
   * never deleted, this field is empty. [Developer
   * Preview](https://developers.google.com/workspace/preview).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String deleteTime;

  /**
   * Output only. Information about a deleted message. A message is deleted when `delete_time` is
   * set. [Developer Preview](https://developers.google.com/workspace/preview).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DeletionMetadata deletionMetadata;

  /**
   * Output only. The list of emoji reaction summaries on the message. [Developer
   * Preview](https://developers.google.com/workspace/preview).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<EmojiReactionSummary> emojiReactionSummaries;

  static {
    // hack to force ProGuard to consider EmojiReactionSummary used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(EmojiReactionSummary.class);
  }

  /**
   * A plain-text description of the message's cards, used when the actual cards can't be
   * displayedâ€”for example, mobile notifications.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fallbackText;

  /**
   * Output only. The time at which the message was last edited by a user. If the message has never
   * been edited, this field is empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lastUpdateTime;

  /**
   * Output only. A URL in `spaces.messages.text` that matches a link preview pattern. For more
   * information, see [Preview links](https://developers.google.com/chat/how-tos/preview-links).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MatchedUrl matchedUrl;

  /**
   * Resource name in the form `spaces/messages`. Example:
   * `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The user who created the message. If your Chat app [authenticates as a
   * user](https://developers.google.com/chat/api/guides/auth/users), the output populates the
   * [user](https://developers.google.com/chat/api/reference/rest/v1/User) `name` and `type`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private User sender;

  /**
   * Output only. Slash command information, if applicable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SlashCommand slashCommand;

  /**
   * If your Chat app [authenticates as a
   * user](https://developers.google.com/chat/api/guides/auth/users), the output populates the
   * [space](https://developers.google.com/chat/api/reference/rest/v1/spaces) `name`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Space space;

  /**
   * Plain-text body of the message. The first link to an image, video, web page, or other preview-
   * able item generates a preview chip.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String text;

  /**
   * The thread the message belongs to. For example usage, see [Start or reply to a message thread](
   * https://developers.google.com/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread
   * ).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Thread thread;

  /**
   * Output only. When `true`, the message is a response in a reply thread. When `false`, the
   * message is visible in the space's top-level conversation as either the first message of a
   * thread or a message with no threaded replies. If the space doesn't support reply in threads,
   * this field is always `false`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean threadReply;

  /**
   * Input only. Parameters that a Chat app can use to configure how its response is posted.
   * @return value or {@code null} for none
   */
  public ActionResponse getActionResponse() {
    return actionResponse;
  }

  /**
   * Input only. Parameters that a Chat app can use to configure how its response is posted.
   * @param actionResponse actionResponse or {@code null} for none
   */
  public Message setActionResponse(ActionResponse actionResponse) {
    this.actionResponse = actionResponse;
    return this;
  }

  /**
   * Output only. Annotations associated with the `text` in this message.
   * @return value or {@code null} for none
   */
  public java.util.List<Annotation> getAnnotations() {
    return annotations;
  }

  /**
   * Output only. Annotations associated with the `text` in this message.
   * @param annotations annotations or {@code null} for none
   */
  public Message setAnnotations(java.util.List<Annotation> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Output only. Plain-text body of the message with all Chat app mentions stripped out.
   * @return value or {@code null} for none
   */
  public java.lang.String getArgumentText() {
    return argumentText;
  }

  /**
   * Output only. Plain-text body of the message with all Chat app mentions stripped out.
   * @param argumentText argumentText or {@code null} for none
   */
  public Message setArgumentText(java.lang.String argumentText) {
    this.argumentText = argumentText;
    return this;
  }

  /**
   * User-uploaded attachment.
   * @return value or {@code null} for none
   */
  public java.util.List<Attachment> getAttachment() {
    return attachment;
  }

  /**
   * User-uploaded attachment.
   * @param attachment attachment or {@code null} for none
   */
  public Message setAttachment(java.util.List<Attachment> attachment) {
    this.attachment = attachment;
    return this;
  }

  /**
   * Deprecated: Use `cards_v2` instead. Rich, formatted, and interactive cards that you can use to
   * display UI elements such as: formatted texts, buttons, and clickable images. Cards are normally
   * displayed below the plain-text body of the message. `cards` and `cards_v2` can have a maximum
   * size of 32 KB.
   * @return value or {@code null} for none
   */
  public java.util.List<Card> getCards() {
    return cards;
  }

  /**
   * Deprecated: Use `cards_v2` instead. Rich, formatted, and interactive cards that you can use to
   * display UI elements such as: formatted texts, buttons, and clickable images. Cards are normally
   * displayed below the plain-text body of the message. `cards` and `cards_v2` can have a maximum
   * size of 32 KB.
   * @param cards cards or {@code null} for none
   */
  public Message setCards(java.util.List<Card> cards) {
    this.cards = cards;
    return this;
  }

  /**
   * Richly formatted and interactive cards that display UI elements and editable widgets, such as:
   * - Formatted text - Buttons - Clickable images - Checkboxes - Radio buttons - Input widgets.
   * Cards are usually displayed below the text body of a Chat message, but can situationally appear
   * other places, such as [dialogs](https://developers.google.com/chat/how-tos/dialogs). Each card
   * can have a maximum size of 32 KB. The `cardId` is a unique identifier among cards in the same
   * message and for identifying user input values. Currently supported widgets include: -
   * `TextParagraph` - `DecoratedText` - `Image` - `ButtonList` - `Divider` - `TextInput` -
   * `SelectionInput` - `Grid`
   * @return value or {@code null} for none
   */
  public java.util.List<CardWithId> getCardsV2() {
    return cardsV2;
  }

  /**
   * Richly formatted and interactive cards that display UI elements and editable widgets, such as:
   * - Formatted text - Buttons - Clickable images - Checkboxes - Radio buttons - Input widgets.
   * Cards are usually displayed below the text body of a Chat message, but can situationally appear
   * other places, such as [dialogs](https://developers.google.com/chat/how-tos/dialogs). Each card
   * can have a maximum size of 32 KB. The `cardId` is a unique identifier among cards in the same
   * message and for identifying user input values. Currently supported widgets include: -
   * `TextParagraph` - `DecoratedText` - `Image` - `ButtonList` - `Divider` - `TextInput` -
   * `SelectionInput` - `Grid`
   * @param cardsV2 cardsV2 or {@code null} for none
   */
  public Message setCardsV2(java.util.List<CardWithId> cardsV2) {
    this.cardsV2 = cardsV2;
    return this;
  }

  /**
   * A custom name for a Chat message assigned at creation. Must start with `client-` and contain
   * only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field
   * to get, update, or delete the message with the specified value. For example usage, see [Name a
   * created
   * message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).
   * @return value or {@code null} for none
   */
  public java.lang.String getClientAssignedMessageId() {
    return clientAssignedMessageId;
  }

  /**
   * A custom name for a Chat message assigned at creation. Must start with `client-` and contain
   * only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field
   * to get, update, or delete the message with the specified value. For example usage, see [Name a
   * created
   * message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).
   * @param clientAssignedMessageId clientAssignedMessageId or {@code null} for none
   */
  public Message setClientAssignedMessageId(java.lang.String clientAssignedMessageId) {
    this.clientAssignedMessageId = clientAssignedMessageId;
    return this;
  }

  /**
   * Output only. The time at which the message was created in Google Chat.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time at which the message was created in Google Chat.
   * @param createTime createTime or {@code null} for none
   */
  public Message setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. The time at which the message was deleted in Google Chat server. If the message is
   * never deleted, this field is empty. [Developer
   * Preview](https://developers.google.com/workspace/preview).
   * @return value or {@code null} for none
   */
  public String getDeleteTime() {
    return deleteTime;
  }

  /**
   * Output only. The time at which the message was deleted in Google Chat server. If the message is
   * never deleted, this field is empty. [Developer
   * Preview](https://developers.google.com/workspace/preview).
   * @param deleteTime deleteTime or {@code null} for none
   */
  public Message setDeleteTime(String deleteTime) {
    this.deleteTime = deleteTime;
    return this;
  }

  /**
   * Output only. Information about a deleted message. A message is deleted when `delete_time` is
   * set. [Developer Preview](https://developers.google.com/workspace/preview).
   * @return value or {@code null} for none
   */
  public DeletionMetadata getDeletionMetadata() {
    return deletionMetadata;
  }

  /**
   * Output only. Information about a deleted message. A message is deleted when `delete_time` is
   * set. [Developer Preview](https://developers.google.com/workspace/preview).
   * @param deletionMetadata deletionMetadata or {@code null} for none
   */
  public Message setDeletionMetadata(DeletionMetadata deletionMetadata) {
    this.deletionMetadata = deletionMetadata;
    return this;
  }

  /**
   * Output only. The list of emoji reaction summaries on the message. [Developer
   * Preview](https://developers.google.com/workspace/preview).
   * @return value or {@code null} for none
   */
  public java.util.List<EmojiReactionSummary> getEmojiReactionSummaries() {
    return emojiReactionSummaries;
  }

  /**
   * Output only. The list of emoji reaction summaries on the message. [Developer
   * Preview](https://developers.google.com/workspace/preview).
   * @param emojiReactionSummaries emojiReactionSummaries or {@code null} for none
   */
  public Message setEmojiReactionSummaries(java.util.List<EmojiReactionSummary> emojiReactionSummaries) {
    this.emojiReactionSummaries = emojiReactionSummaries;
    return this;
  }

  /**
   * A plain-text description of the message's cards, used when the actual cards can't be
   * displayedâ€”for example, mobile notifications.
   * @return value or {@code null} for none
   */
  public java.lang.String getFallbackText() {
    return fallbackText;
  }

  /**
   * A plain-text description of the message's cards, used when the actual cards can't be
   * displayedâ€”for example, mobile notifications.
   * @param fallbackText fallbackText or {@code null} for none
   */
  public Message setFallbackText(java.lang.String fallbackText) {
    this.fallbackText = fallbackText;
    return this;
  }

  /**
   * Output only. The time at which the message was last edited by a user. If the message has never
   * been edited, this field is empty.
   * @return value or {@code null} for none
   */
  public String getLastUpdateTime() {
    return lastUpdateTime;
  }

  /**
   * Output only. The time at which the message was last edited by a user. If the message has never
   * been edited, this field is empty.
   * @param lastUpdateTime lastUpdateTime or {@code null} for none
   */
  public Message setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  /**
   * Output only. A URL in `spaces.messages.text` that matches a link preview pattern. For more
   * information, see [Preview links](https://developers.google.com/chat/how-tos/preview-links).
   * @return value or {@code null} for none
   */
  public MatchedUrl getMatchedUrl() {
    return matchedUrl;
  }

  /**
   * Output only. A URL in `spaces.messages.text` that matches a link preview pattern. For more
   * information, see [Preview links](https://developers.google.com/chat/how-tos/preview-links).
   * @param matchedUrl matchedUrl or {@code null} for none
   */
  public Message setMatchedUrl(MatchedUrl matchedUrl) {
    this.matchedUrl = matchedUrl;
    return this;
  }

  /**
   * Resource name in the form `spaces/messages`. Example:
   * `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Resource name in the form `spaces/messages`. Example:
   * `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`
   * @param name name or {@code null} for none
   */
  public Message setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The user who created the message. If your Chat app [authenticates as a
   * user](https://developers.google.com/chat/api/guides/auth/users), the output populates the
   * [user](https://developers.google.com/chat/api/reference/rest/v1/User) `name` and `type`.
   * @return value or {@code null} for none
   */
  public User getSender() {
    return sender;
  }

  /**
   * Output only. The user who created the message. If your Chat app [authenticates as a
   * user](https://developers.google.com/chat/api/guides/auth/users), the output populates the
   * [user](https://developers.google.com/chat/api/reference/rest/v1/User) `name` and `type`.
   * @param sender sender or {@code null} for none
   */
  public Message setSender(User sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Output only. Slash command information, if applicable.
   * @return value or {@code null} for none
   */
  public SlashCommand getSlashCommand() {
    return slashCommand;
  }

  /**
   * Output only. Slash command information, if applicable.
   * @param slashCommand slashCommand or {@code null} for none
   */
  public Message setSlashCommand(SlashCommand slashCommand) {
    this.slashCommand = slashCommand;
    return this;
  }

  /**
   * If your Chat app [authenticates as a
   * user](https://developers.google.com/chat/api/guides/auth/users), the output populates the
   * [space](https://developers.google.com/chat/api/reference/rest/v1/spaces) `name`.
   * @return value or {@code null} for none
   */
  public Space getSpace() {
    return space;
  }

  /**
   * If your Chat app [authenticates as a
   * user](https://developers.google.com/chat/api/guides/auth/users), the output populates the
   * [space](https://developers.google.com/chat/api/reference/rest/v1/spaces) `name`.
   * @param space space or {@code null} for none
   */
  public Message setSpace(Space space) {
    this.space = space;
    return this;
  }

  /**
   * Plain-text body of the message. The first link to an image, video, web page, or other preview-
   * able item generates a preview chip.
   * @return value or {@code null} for none
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * Plain-text body of the message. The first link to an image, video, web page, or other preview-
   * able item generates a preview chip.
   * @param text text or {@code null} for none
   */
  public Message setText(java.lang.String text) {
    this.text = text;
    return this;
  }

  /**
   * The thread the message belongs to. For example usage, see [Start or reply to a message thread](
   * https://developers.google.com/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread
   * ).
   * @return value or {@code null} for none
   */
  public Thread getThread() {
    return thread;
  }

  /**
   * The thread the message belongs to. For example usage, see [Start or reply to a message thread](
   * https://developers.google.com/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread
   * ).
   * @param thread thread or {@code null} for none
   */
  public Message setThread(Thread thread) {
    this.thread = thread;
    return this;
  }

  /**
   * Output only. When `true`, the message is a response in a reply thread. When `false`, the
   * message is visible in the space's top-level conversation as either the first message of a
   * thread or a message with no threaded replies. If the space doesn't support reply in threads,
   * this field is always `false`.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getThreadReply() {
    return threadReply;
  }

  /**
   * Output only. When `true`, the message is a response in a reply thread. When `false`, the
   * message is visible in the space's top-level conversation as either the first message of a
   * thread or a message with no threaded replies. If the space doesn't support reply in threads,
   * this field is always `false`.
   * @param threadReply threadReply or {@code null} for none
   */
  public Message setThreadReply(java.lang.Boolean threadReply) {
    this.threadReply = threadReply;
    return this;
  }

  @Override
  public Message set(String fieldName, Object value) {
    return (Message) super.set(fieldName, value);
  }

  @Override
  public Message clone() {
    return (Message) super.clone();
  }

}
