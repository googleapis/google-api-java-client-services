/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Statistics about a particular font size (from CharLabel.FontSize) aggregated over a range of
 * symbols
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoodocFontSizeStats extends com.google.api.client.json.GenericJson {

  /**
   * CharLabel.FontId and FontSize
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer fontId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer fontSize;

  /**
   * The measurements are in pixels
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer medianHeight;

  /**
   * top to bottom
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer medianLineHeight;

  /**
   * bottom to next top in para
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer medianLineSpace;

  /**
   * top to next top in para
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer medianLineSpan;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer medianWidth;

  /**
   * Lines (out of num_lines) that have a successor line within their para
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numLineSpaces;

  /**
   * Line stats for this font. "top" corresponds to the highest ascender and "bottom" to the lowest
   * descender. num_lines = # lines with > 50% symbols having this font
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numLines;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numSymbols;

  /**
   * CharLabel.FontId and FontSize
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFontId() {
    return fontId;
  }

  /**
   * CharLabel.FontId and FontSize
   * @param fontId fontId or {@code null} for none
   */
  public GoodocFontSizeStats setFontId(java.lang.Integer fontId) {
    this.fontId = fontId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFontSize() {
    return fontSize;
  }

  /**
   * @param fontSize fontSize or {@code null} for none
   */
  public GoodocFontSizeStats setFontSize(java.lang.Integer fontSize) {
    this.fontSize = fontSize;
    return this;
  }

  /**
   * The measurements are in pixels
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMedianHeight() {
    return medianHeight;
  }

  /**
   * The measurements are in pixels
   * @param medianHeight medianHeight or {@code null} for none
   */
  public GoodocFontSizeStats setMedianHeight(java.lang.Integer medianHeight) {
    this.medianHeight = medianHeight;
    return this;
  }

  /**
   * top to bottom
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMedianLineHeight() {
    return medianLineHeight;
  }

  /**
   * top to bottom
   * @param medianLineHeight medianLineHeight or {@code null} for none
   */
  public GoodocFontSizeStats setMedianLineHeight(java.lang.Integer medianLineHeight) {
    this.medianLineHeight = medianLineHeight;
    return this;
  }

  /**
   * bottom to next top in para
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMedianLineSpace() {
    return medianLineSpace;
  }

  /**
   * bottom to next top in para
   * @param medianLineSpace medianLineSpace or {@code null} for none
   */
  public GoodocFontSizeStats setMedianLineSpace(java.lang.Integer medianLineSpace) {
    this.medianLineSpace = medianLineSpace;
    return this;
  }

  /**
   * top to next top in para
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMedianLineSpan() {
    return medianLineSpan;
  }

  /**
   * top to next top in para
   * @param medianLineSpan medianLineSpan or {@code null} for none
   */
  public GoodocFontSizeStats setMedianLineSpan(java.lang.Integer medianLineSpan) {
    this.medianLineSpan = medianLineSpan;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMedianWidth() {
    return medianWidth;
  }

  /**
   * @param medianWidth medianWidth or {@code null} for none
   */
  public GoodocFontSizeStats setMedianWidth(java.lang.Integer medianWidth) {
    this.medianWidth = medianWidth;
    return this;
  }

  /**
   * Lines (out of num_lines) that have a successor line within their para
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumLineSpaces() {
    return numLineSpaces;
  }

  /**
   * Lines (out of num_lines) that have a successor line within their para
   * @param numLineSpaces numLineSpaces or {@code null} for none
   */
  public GoodocFontSizeStats setNumLineSpaces(java.lang.Integer numLineSpaces) {
    this.numLineSpaces = numLineSpaces;
    return this;
  }

  /**
   * Line stats for this font. "top" corresponds to the highest ascender and "bottom" to the lowest
   * descender. num_lines = # lines with > 50% symbols having this font
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumLines() {
    return numLines;
  }

  /**
   * Line stats for this font. "top" corresponds to the highest ascender and "bottom" to the lowest
   * descender. num_lines = # lines with > 50% symbols having this font
   * @param numLines numLines or {@code null} for none
   */
  public GoodocFontSizeStats setNumLines(java.lang.Integer numLines) {
    this.numLines = numLines;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumSymbols() {
    return numSymbols;
  }

  /**
   * @param numSymbols numSymbols or {@code null} for none
   */
  public GoodocFontSizeStats setNumSymbols(java.lang.Integer numSymbols) {
    this.numSymbols = numSymbols;
    return this;
  }

  @Override
  public GoodocFontSizeStats set(String fieldName, Object value) {
    return (GoodocFontSizeStats) super.set(fieldName, value);
  }

  @Override
  public GoodocFontSizeStats clone() {
    return (GoodocFontSizeStats) super.clone();
  }

}
