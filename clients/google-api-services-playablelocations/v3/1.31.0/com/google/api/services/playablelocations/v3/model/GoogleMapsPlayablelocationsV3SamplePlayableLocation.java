/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.playablelocations.v3.model;

/**
 * A geographical point suitable for placing game objects in location-based games.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Playable Locations API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleMapsPlayablelocationsV3SamplePlayableLocation extends com.google.api.client.json.GenericJson {

  /**
   * Required. The latitude and longitude associated with the center of the playable location. By
   * default, the set of playable locations returned from SamplePlayableLocations use center-point
   * coordinates.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeLatLng centerPoint;

  /**
   * Required. The name of this playable location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * A [place ID] (https://developers.google.com/places/place-id)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String placeId;

  /**
   * A [plus code] (http://openlocationcode.com)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String plusCode;

  /**
   * The playable location's coordinates, snapped to the sidewalk of the nearest road, if a nearby
   * road exists.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeLatLng snappedPoint;

  /**
   * A collection of [Playable Location Types](/maps/documentation/gaming/tt/types) for this
   * playable location. The first type in the collection is the primary type. Type information might
   * not be available for all playable locations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> types;

  /**
   * Required. The latitude and longitude associated with the center of the playable location. By
   * default, the set of playable locations returned from SamplePlayableLocations use center-point
   * coordinates.
   * @return value or {@code null} for none
   */
  public GoogleTypeLatLng getCenterPoint() {
    return centerPoint;
  }

  /**
   * Required. The latitude and longitude associated with the center of the playable location. By
   * default, the set of playable locations returned from SamplePlayableLocations use center-point
   * coordinates.
   * @param centerPoint centerPoint or {@code null} for none
   */
  public GoogleMapsPlayablelocationsV3SamplePlayableLocation setCenterPoint(GoogleTypeLatLng centerPoint) {
    this.centerPoint = centerPoint;
    return this;
  }

  /**
   * Required. The name of this playable location.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required. The name of this playable location.
   * @param name name or {@code null} for none
   */
  public GoogleMapsPlayablelocationsV3SamplePlayableLocation setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * A [place ID] (https://developers.google.com/places/place-id)
   * @return value or {@code null} for none
   */
  public java.lang.String getPlaceId() {
    return placeId;
  }

  /**
   * A [place ID] (https://developers.google.com/places/place-id)
   * @param placeId placeId or {@code null} for none
   */
  public GoogleMapsPlayablelocationsV3SamplePlayableLocation setPlaceId(java.lang.String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * A [plus code] (http://openlocationcode.com)
   * @return value or {@code null} for none
   */
  public java.lang.String getPlusCode() {
    return plusCode;
  }

  /**
   * A [plus code] (http://openlocationcode.com)
   * @param plusCode plusCode or {@code null} for none
   */
  public GoogleMapsPlayablelocationsV3SamplePlayableLocation setPlusCode(java.lang.String plusCode) {
    this.plusCode = plusCode;
    return this;
  }

  /**
   * The playable location's coordinates, snapped to the sidewalk of the nearest road, if a nearby
   * road exists.
   * @return value or {@code null} for none
   */
  public GoogleTypeLatLng getSnappedPoint() {
    return snappedPoint;
  }

  /**
   * The playable location's coordinates, snapped to the sidewalk of the nearest road, if a nearby
   * road exists.
   * @param snappedPoint snappedPoint or {@code null} for none
   */
  public GoogleMapsPlayablelocationsV3SamplePlayableLocation setSnappedPoint(GoogleTypeLatLng snappedPoint) {
    this.snappedPoint = snappedPoint;
    return this;
  }

  /**
   * A collection of [Playable Location Types](/maps/documentation/gaming/tt/types) for this
   * playable location. The first type in the collection is the primary type. Type information might
   * not be available for all playable locations.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTypes() {
    return types;
  }

  /**
   * A collection of [Playable Location Types](/maps/documentation/gaming/tt/types) for this
   * playable location. The first type in the collection is the primary type. Type information might
   * not be available for all playable locations.
   * @param types types or {@code null} for none
   */
  public GoogleMapsPlayablelocationsV3SamplePlayableLocation setTypes(java.util.List<java.lang.String> types) {
    this.types = types;
    return this;
  }

  @Override
  public GoogleMapsPlayablelocationsV3SamplePlayableLocation set(String fieldName, Object value) {
    return (GoogleMapsPlayablelocationsV3SamplePlayableLocation) super.set(fieldName, value);
  }

  @Override
  public GoogleMapsPlayablelocationsV3SamplePlayableLocation clone() {
    return (GoogleMapsPlayablelocationsV3SamplePlayableLocation) super.clone();
  }

}
