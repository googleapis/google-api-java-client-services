/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.artifactregistry.v1.model;

/**
 * DockerImage represents a docker artifact.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Artifact Registry API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DockerImage extends com.google.api.client.json.GenericJson {

  /**
   * Calculated size of the image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long imageSizeBytes;

  /**
   * Media type of this image, e.g. "application/vnd.docker.distribution.manifest.v2+json".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mediaType;

  /**
   * Required. registry_location, project_id, repository_name and image id forms a unique image
   * name:`projects//locations//repository//dockerimages/`. For example, "projects/test-
   * project/locations/us-west4/repositories/test-repo/dockerimages/
   * nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf", where "us-
   * west4" is the registry_location, "test-project" is the project_id, "test-repo" is the
   * repository_name and
   * "nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf" is the image's
   * digest.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Tags attached to this image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> tags;

  /**
   * Time the image was uploaded.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String uploadTime;

  /**
   * Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-
   * repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uri;

  /**
   * Calculated size of the image.
   * @return value or {@code null} for none
   */
  public java.lang.Long getImageSizeBytes() {
    return imageSizeBytes;
  }

  /**
   * Calculated size of the image.
   * @param imageSizeBytes imageSizeBytes or {@code null} for none
   */
  public DockerImage setImageSizeBytes(java.lang.Long imageSizeBytes) {
    this.imageSizeBytes = imageSizeBytes;
    return this;
  }

  /**
   * Media type of this image, e.g. "application/vnd.docker.distribution.manifest.v2+json".
   * @return value or {@code null} for none
   */
  public java.lang.String getMediaType() {
    return mediaType;
  }

  /**
   * Media type of this image, e.g. "application/vnd.docker.distribution.manifest.v2+json".
   * @param mediaType mediaType or {@code null} for none
   */
  public DockerImage setMediaType(java.lang.String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Required. registry_location, project_id, repository_name and image id forms a unique image
   * name:`projects//locations//repository//dockerimages/`. For example, "projects/test-
   * project/locations/us-west4/repositories/test-repo/dockerimages/
   * nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf", where "us-
   * west4" is the registry_location, "test-project" is the project_id, "test-repo" is the
   * repository_name and
   * "nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf" is the image's
   * digest.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required. registry_location, project_id, repository_name and image id forms a unique image
   * name:`projects//locations//repository//dockerimages/`. For example, "projects/test-
   * project/locations/us-west4/repositories/test-repo/dockerimages/
   * nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf", where "us-
   * west4" is the registry_location, "test-project" is the project_id, "test-repo" is the
   * repository_name and
   * "nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf" is the image's
   * digest.
   * @param name name or {@code null} for none
   */
  public DockerImage setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Tags attached to this image.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTags() {
    return tags;
  }

  /**
   * Tags attached to this image.
   * @param tags tags or {@code null} for none
   */
  public DockerImage setTags(java.util.List<java.lang.String> tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Time the image was uploaded.
   * @return value or {@code null} for none
   */
  public String getUploadTime() {
    return uploadTime;
  }

  /**
   * Time the image was uploaded.
   * @param uploadTime uploadTime or {@code null} for none
   */
  public DockerImage setUploadTime(String uploadTime) {
    this.uploadTime = uploadTime;
    return this;
  }

  /**
   * Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-
   * repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf
   * @return value or {@code null} for none
   */
  public java.lang.String getUri() {
    return uri;
  }

  /**
   * Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-
   * repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf
   * @param uri uri or {@code null} for none
   */
  public DockerImage setUri(java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  @Override
  public DockerImage set(String fieldName, Object value) {
    return (DockerImage) super.set(fieldName, value);
  }

  @Override
  public DockerImage clone() {
    return (DockerImage) super.clone();
  }

}
