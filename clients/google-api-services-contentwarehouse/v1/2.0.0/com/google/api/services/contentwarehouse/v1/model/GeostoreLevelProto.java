/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A feature used to represent a logical level, e.g. floor. A feature belonging to a given level
 * should point to the level feature using relation RELATION_ON_LEVEL. The standard feature
 * properties are interpreted as follows: name - Levels should have names according to the
 * following: * Short, elevator-style names, such as "L" for "Lobby" and "2" for "Second floor",
 * must be included and must be tagged with FLAG_ABBREVIATED. There must be an unambiguous "best"
 * abbreviated name. * Longer names such as "Ticketing" or "Upper Level" may be present when the
 * level has a specific name. * Non-abbreviated names should only be added if they are known to
 * meaningfully expand upon the abbreviated name. For example, the long name "Observation Deck 2"
 * for the abbreviated name "OD2" is a good additional name. In contrast, the name "Level 2" for the
 * abbreviated name "2" is not desired. address - This should always be empty. point, polyline,
 * polygon, center - These should never be set (since we are representing a logical entity).
 * preferred_viewport - This should be the approximate extent of the level. child - This should
 * always be empty.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreLevelProto extends com.google.api.client.json.GenericJson {

  /**
   * The building(s) to which this level belongs. A level will typically belong to a single
   * building, but it is valid for a single level to be shared by multiple buildings (for example, a
   * large underground parking lot). These buildings refer back to the level via another strong
   * reference (the BuildingProto.level field).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreFeatureIdProto> building;

  static {
    // hack to force ProGuard to consider GeostoreFeatureIdProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreFeatureIdProto.class);
  }

  /**
   * The elevation of this level relative to the ground level, in levels. 0 = ground floor (even in
   * locales that call the ground floor "1st floor"); 0.5 = between ground and first floor, eg
   * mezzanine; 1 = first floor (one level above ground floor); -3 = three levels below ground
   * floor.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float number;

  /**
   * The building(s) to which this level belongs. A level will typically belong to a single
   * building, but it is valid for a single level to be shared by multiple buildings (for example, a
   * large underground parking lot). These buildings refer back to the level via another strong
   * reference (the BuildingProto.level field).
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreFeatureIdProto> getBuilding() {
    return building;
  }

  /**
   * The building(s) to which this level belongs. A level will typically belong to a single
   * building, but it is valid for a single level to be shared by multiple buildings (for example, a
   * large underground parking lot). These buildings refer back to the level via another strong
   * reference (the BuildingProto.level field).
   * @param building building or {@code null} for none
   */
  public GeostoreLevelProto setBuilding(java.util.List<GeostoreFeatureIdProto> building) {
    this.building = building;
    return this;
  }

  /**
   * The elevation of this level relative to the ground level, in levels. 0 = ground floor (even in
   * locales that call the ground floor "1st floor"); 0.5 = between ground and first floor, eg
   * mezzanine; 1 = first floor (one level above ground floor); -3 = three levels below ground
   * floor.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNumber() {
    return number;
  }

  /**
   * The elevation of this level relative to the ground level, in levels. 0 = ground floor (even in
   * locales that call the ground floor "1st floor"); 0.5 = between ground and first floor, eg
   * mezzanine; 1 = first floor (one level above ground floor); -3 = three levels below ground
   * floor.
   * @param number number or {@code null} for none
   */
  public GeostoreLevelProto setNumber(java.lang.Float number) {
    this.number = number;
    return this;
  }

  @Override
  public GeostoreLevelProto set(String fieldName, Object value) {
    return (GeostoreLevelProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreLevelProto clone() {
    return (GeostoreLevelProto) super.clone();
  }

}
