/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * How a volume may be viewed in a particular locale. Next available ID: 25 (ikkwong)
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class OceanLocaleViewability extends com.google.api.client.json.GenericJson {

  /**
   * These capture "commercial" contract related access rights provided by partners for a volume.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanVolumeAccessRights accessRights;

  /**
   * Are we allowed to add all the front matter to the preview in addition to the preview amount
   * that is from percent_book_shown? This means the front matter becomes freely previewable and
   * does not count towards the previewable amount based on the percentage.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowAddingFrontmatterToPreview;

  /**
   * By default, we allow continuous browse. PFE provides a means for partners to opt out entirely
   * or just specific books.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowContinuousBrowse;

  /**
   * whether OFE should display this volume in syndicated search results
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowRetailSyndication;

  /**
   * The bibkey upon which this viewability information is based.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bibkey;

  /**
   * Whether we can show ads with this book in this locale.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean canDisplayAds;

  /**
   * In future, we will generate epub iff can_download_epub = true irrespective of viewability or
   * download pdf state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean canDownloadEpub;

  /**
   * In future, we will generate PDF iff can_download_pdf = true irrespective of viewability.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean canDownloadPdf;

  /**
   * Whether to show library links for the books in this imprint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean canShowLibraryLinks;

  /**
   * Whether we can show photos for this book in this locale.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean canShowPhotos;

  /**
   * It should be OK to use metadata covers normally, but we allow publishers to explicitly disallow
   * them.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean canUseMetadataCover;

  /**
   * The client who provided the rights for this bibkey, and who should receive revenue derived from
   * this book in this locale. This will only be present when we receive explicit rights from a
   * publisher.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clientId;

  /**
   * Volume related access rights that are computed by Goovols Syncher from partner and book
   * metadata. This complements VolumeAccessRights. This message is used to capture "commerical"
   * contracts that are computed from other sources. Any future computed rights that are not related
   * to volume access should go into a new message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanVolumeComputedAccessRights computedAccessRights;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanLocaleViewabilityDates dates;

  /**
   * Volume display specific attributes are kept in display_details
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanVolumeDisplayDetails displayDetails;

  /**
   * This only applies when view_type == VIEW_METADATA and controls whether we're allowed to include
   * scanned info (keywords, toc, etc). in the metadata-view. For books in metadata view because
   * they have been opted out, this would be false.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean metadataViewMayIncludeInfoFromScans;

  /**
   * This only applies when view_type == VIEW_METADATA and controls whether we're allowed to include
   * a text sample even for a metadata view book.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean metadataViewSampleAllowed;

  /**
   * How much of the book can be viewed in this locale. Will be 100 for VIEW_FULL; 0 for
   * VIEW_SNIPPET_, VIEW_NONE and VIEW_METADATA; and some value between 0 and 100 (exclusive) for
   * VIEW_PARTIAL.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer percentBookShown;

  /**
   * If present, this is the rights policy's determination of the public domain status. (Of course,
   * this determination is generally conservative (i.e. false negatives are likely), though exactly
   * how conservative may depend on parameters to the rights policy.) If absent, public domain
   * status can be inferred from view_type and view_reason, but that isn't quite perfectly reliable:
   * view_type should always be VIEW_FULL for public domain, but view_reason might be
   * REASON_PUBLIC_DOMAIN (definitely public domain, obviously), some other value, or absent. In the
   * future, new viewabilities should always have this field whenever possible.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean publicDomain;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanLocaleViewabilitySourceDetails sourcedetails;

  /**
   * The reason for the view_type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String viewReason;

  /**
   * The viewability specified for this locale.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String viewType;

  /**
   * These capture "commercial" contract related access rights provided by partners for a volume.
   * @return value or {@code null} for none
   */
  public OceanVolumeAccessRights getAccessRights() {
    return accessRights;
  }

  /**
   * These capture "commercial" contract related access rights provided by partners for a volume.
   * @param accessRights accessRights or {@code null} for none
   */
  public OceanLocaleViewability setAccessRights(OceanVolumeAccessRights accessRights) {
    this.accessRights = accessRights;
    return this;
  }

  /**
   * Are we allowed to add all the front matter to the preview in addition to the preview amount
   * that is from percent_book_shown? This means the front matter becomes freely previewable and
   * does not count towards the previewable amount based on the percentage.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowAddingFrontmatterToPreview() {
    return allowAddingFrontmatterToPreview;
  }

  /**
   * Are we allowed to add all the front matter to the preview in addition to the preview amount
   * that is from percent_book_shown? This means the front matter becomes freely previewable and
   * does not count towards the previewable amount based on the percentage.
   * @param allowAddingFrontmatterToPreview allowAddingFrontmatterToPreview or {@code null} for none
   */
  public OceanLocaleViewability setAllowAddingFrontmatterToPreview(java.lang.Boolean allowAddingFrontmatterToPreview) {
    this.allowAddingFrontmatterToPreview = allowAddingFrontmatterToPreview;
    return this;
  }

  /**
   * By default, we allow continuous browse. PFE provides a means for partners to opt out entirely
   * or just specific books.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowContinuousBrowse() {
    return allowContinuousBrowse;
  }

  /**
   * By default, we allow continuous browse. PFE provides a means for partners to opt out entirely
   * or just specific books.
   * @param allowContinuousBrowse allowContinuousBrowse or {@code null} for none
   */
  public OceanLocaleViewability setAllowContinuousBrowse(java.lang.Boolean allowContinuousBrowse) {
    this.allowContinuousBrowse = allowContinuousBrowse;
    return this;
  }

  /**
   * whether OFE should display this volume in syndicated search results
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowRetailSyndication() {
    return allowRetailSyndication;
  }

  /**
   * whether OFE should display this volume in syndicated search results
   * @param allowRetailSyndication allowRetailSyndication or {@code null} for none
   */
  public OceanLocaleViewability setAllowRetailSyndication(java.lang.Boolean allowRetailSyndication) {
    this.allowRetailSyndication = allowRetailSyndication;
    return this;
  }

  /**
   * The bibkey upon which this viewability information is based.
   * @return value or {@code null} for none
   */
  public java.lang.String getBibkey() {
    return bibkey;
  }

  /**
   * The bibkey upon which this viewability information is based.
   * @param bibkey bibkey or {@code null} for none
   */
  public OceanLocaleViewability setBibkey(java.lang.String bibkey) {
    this.bibkey = bibkey;
    return this;
  }

  /**
   * Whether we can show ads with this book in this locale.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCanDisplayAds() {
    return canDisplayAds;
  }

  /**
   * Whether we can show ads with this book in this locale.
   * @param canDisplayAds canDisplayAds or {@code null} for none
   */
  public OceanLocaleViewability setCanDisplayAds(java.lang.Boolean canDisplayAds) {
    this.canDisplayAds = canDisplayAds;
    return this;
  }

  /**
   * In future, we will generate epub iff can_download_epub = true irrespective of viewability or
   * download pdf state.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCanDownloadEpub() {
    return canDownloadEpub;
  }

  /**
   * In future, we will generate epub iff can_download_epub = true irrespective of viewability or
   * download pdf state.
   * @param canDownloadEpub canDownloadEpub or {@code null} for none
   */
  public OceanLocaleViewability setCanDownloadEpub(java.lang.Boolean canDownloadEpub) {
    this.canDownloadEpub = canDownloadEpub;
    return this;
  }

  /**
   * In future, we will generate PDF iff can_download_pdf = true irrespective of viewability.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCanDownloadPdf() {
    return canDownloadPdf;
  }

  /**
   * In future, we will generate PDF iff can_download_pdf = true irrespective of viewability.
   * @param canDownloadPdf canDownloadPdf or {@code null} for none
   */
  public OceanLocaleViewability setCanDownloadPdf(java.lang.Boolean canDownloadPdf) {
    this.canDownloadPdf = canDownloadPdf;
    return this;
  }

  /**
   * Whether to show library links for the books in this imprint.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCanShowLibraryLinks() {
    return canShowLibraryLinks;
  }

  /**
   * Whether to show library links for the books in this imprint.
   * @param canShowLibraryLinks canShowLibraryLinks or {@code null} for none
   */
  public OceanLocaleViewability setCanShowLibraryLinks(java.lang.Boolean canShowLibraryLinks) {
    this.canShowLibraryLinks = canShowLibraryLinks;
    return this;
  }

  /**
   * Whether we can show photos for this book in this locale.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCanShowPhotos() {
    return canShowPhotos;
  }

  /**
   * Whether we can show photos for this book in this locale.
   * @param canShowPhotos canShowPhotos or {@code null} for none
   */
  public OceanLocaleViewability setCanShowPhotos(java.lang.Boolean canShowPhotos) {
    this.canShowPhotos = canShowPhotos;
    return this;
  }

  /**
   * It should be OK to use metadata covers normally, but we allow publishers to explicitly disallow
   * them.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCanUseMetadataCover() {
    return canUseMetadataCover;
  }

  /**
   * It should be OK to use metadata covers normally, but we allow publishers to explicitly disallow
   * them.
   * @param canUseMetadataCover canUseMetadataCover or {@code null} for none
   */
  public OceanLocaleViewability setCanUseMetadataCover(java.lang.Boolean canUseMetadataCover) {
    this.canUseMetadataCover = canUseMetadataCover;
    return this;
  }

  /**
   * The client who provided the rights for this bibkey, and who should receive revenue derived from
   * this book in this locale. This will only be present when we receive explicit rights from a
   * publisher.
   * @return value or {@code null} for none
   */
  public java.lang.String getClientId() {
    return clientId;
  }

  /**
   * The client who provided the rights for this bibkey, and who should receive revenue derived from
   * this book in this locale. This will only be present when we receive explicit rights from a
   * publisher.
   * @param clientId clientId or {@code null} for none
   */
  public OceanLocaleViewability setClientId(java.lang.String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Volume related access rights that are computed by Goovols Syncher from partner and book
   * metadata. This complements VolumeAccessRights. This message is used to capture "commerical"
   * contracts that are computed from other sources. Any future computed rights that are not related
   * to volume access should go into a new message.
   * @return value or {@code null} for none
   */
  public OceanVolumeComputedAccessRights getComputedAccessRights() {
    return computedAccessRights;
  }

  /**
   * Volume related access rights that are computed by Goovols Syncher from partner and book
   * metadata. This complements VolumeAccessRights. This message is used to capture "commerical"
   * contracts that are computed from other sources. Any future computed rights that are not related
   * to volume access should go into a new message.
   * @param computedAccessRights computedAccessRights or {@code null} for none
   */
  public OceanLocaleViewability setComputedAccessRights(OceanVolumeComputedAccessRights computedAccessRights) {
    this.computedAccessRights = computedAccessRights;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public OceanLocaleViewabilityDates getDates() {
    return dates;
  }

  /**
   * @param dates dates or {@code null} for none
   */
  public OceanLocaleViewability setDates(OceanLocaleViewabilityDates dates) {
    this.dates = dates;
    return this;
  }

  /**
   * Volume display specific attributes are kept in display_details
   * @return value or {@code null} for none
   */
  public OceanVolumeDisplayDetails getDisplayDetails() {
    return displayDetails;
  }

  /**
   * Volume display specific attributes are kept in display_details
   * @param displayDetails displayDetails or {@code null} for none
   */
  public OceanLocaleViewability setDisplayDetails(OceanVolumeDisplayDetails displayDetails) {
    this.displayDetails = displayDetails;
    return this;
  }

  /**
   * This only applies when view_type == VIEW_METADATA and controls whether we're allowed to include
   * scanned info (keywords, toc, etc). in the metadata-view. For books in metadata view because
   * they have been opted out, this would be false.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMetadataViewMayIncludeInfoFromScans() {
    return metadataViewMayIncludeInfoFromScans;
  }

  /**
   * This only applies when view_type == VIEW_METADATA and controls whether we're allowed to include
   * scanned info (keywords, toc, etc). in the metadata-view. For books in metadata view because
   * they have been opted out, this would be false.
   * @param metadataViewMayIncludeInfoFromScans metadataViewMayIncludeInfoFromScans or {@code null} for none
   */
  public OceanLocaleViewability setMetadataViewMayIncludeInfoFromScans(java.lang.Boolean metadataViewMayIncludeInfoFromScans) {
    this.metadataViewMayIncludeInfoFromScans = metadataViewMayIncludeInfoFromScans;
    return this;
  }

  /**
   * This only applies when view_type == VIEW_METADATA and controls whether we're allowed to include
   * a text sample even for a metadata view book.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMetadataViewSampleAllowed() {
    return metadataViewSampleAllowed;
  }

  /**
   * This only applies when view_type == VIEW_METADATA and controls whether we're allowed to include
   * a text sample even for a metadata view book.
   * @param metadataViewSampleAllowed metadataViewSampleAllowed or {@code null} for none
   */
  public OceanLocaleViewability setMetadataViewSampleAllowed(java.lang.Boolean metadataViewSampleAllowed) {
    this.metadataViewSampleAllowed = metadataViewSampleAllowed;
    return this;
  }

  /**
   * How much of the book can be viewed in this locale. Will be 100 for VIEW_FULL; 0 for
   * VIEW_SNIPPET_, VIEW_NONE and VIEW_METADATA; and some value between 0 and 100 (exclusive) for
   * VIEW_PARTIAL.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPercentBookShown() {
    return percentBookShown;
  }

  /**
   * How much of the book can be viewed in this locale. Will be 100 for VIEW_FULL; 0 for
   * VIEW_SNIPPET_, VIEW_NONE and VIEW_METADATA; and some value between 0 and 100 (exclusive) for
   * VIEW_PARTIAL.
   * @param percentBookShown percentBookShown or {@code null} for none
   */
  public OceanLocaleViewability setPercentBookShown(java.lang.Integer percentBookShown) {
    this.percentBookShown = percentBookShown;
    return this;
  }

  /**
   * If present, this is the rights policy's determination of the public domain status. (Of course,
   * this determination is generally conservative (i.e. false negatives are likely), though exactly
   * how conservative may depend on parameters to the rights policy.) If absent, public domain
   * status can be inferred from view_type and view_reason, but that isn't quite perfectly reliable:
   * view_type should always be VIEW_FULL for public domain, but view_reason might be
   * REASON_PUBLIC_DOMAIN (definitely public domain, obviously), some other value, or absent. In the
   * future, new viewabilities should always have this field whenever possible.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPublicDomain() {
    return publicDomain;
  }

  /**
   * If present, this is the rights policy's determination of the public domain status. (Of course,
   * this determination is generally conservative (i.e. false negatives are likely), though exactly
   * how conservative may depend on parameters to the rights policy.) If absent, public domain
   * status can be inferred from view_type and view_reason, but that isn't quite perfectly reliable:
   * view_type should always be VIEW_FULL for public domain, but view_reason might be
   * REASON_PUBLIC_DOMAIN (definitely public domain, obviously), some other value, or absent. In the
   * future, new viewabilities should always have this field whenever possible.
   * @param publicDomain publicDomain or {@code null} for none
   */
  public OceanLocaleViewability setPublicDomain(java.lang.Boolean publicDomain) {
    this.publicDomain = publicDomain;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public OceanLocaleViewabilitySourceDetails getSourcedetails() {
    return sourcedetails;
  }

  /**
   * @param sourcedetails sourcedetails or {@code null} for none
   */
  public OceanLocaleViewability setSourcedetails(OceanLocaleViewabilitySourceDetails sourcedetails) {
    this.sourcedetails = sourcedetails;
    return this;
  }

  /**
   * The reason for the view_type.
   * @return value or {@code null} for none
   */
  public java.lang.String getViewReason() {
    return viewReason;
  }

  /**
   * The reason for the view_type.
   * @param viewReason viewReason or {@code null} for none
   */
  public OceanLocaleViewability setViewReason(java.lang.String viewReason) {
    this.viewReason = viewReason;
    return this;
  }

  /**
   * The viewability specified for this locale.
   * @return value or {@code null} for none
   */
  public java.lang.String getViewType() {
    return viewType;
  }

  /**
   * The viewability specified for this locale.
   * @param viewType viewType or {@code null} for none
   */
  public OceanLocaleViewability setViewType(java.lang.String viewType) {
    this.viewType = viewType;
    return this;
  }

  @Override
  public OceanLocaleViewability set(String fieldName, Object value) {
    return (OceanLocaleViewability) super.set(fieldName, value);
  }

  @Override
  public OceanLocaleViewability clone() {
    return (OceanLocaleViewability) super.clone();
  }

}
