/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.toolresults.model;

/**
 * Model definition for ScreenshotCluster.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Tool Results API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ScreenshotCluster extends com.google.api.client.json.GenericJson {

  /**
   * A string that describes the activity of every screen in the cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String activity;

  /**
   * A unique identifier for the cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clusterId;

  /**
   * A singular screen that represents the cluster as a whole. This screen will act as the "cover"
   * of the entire cluster. When users look at the clusters, only the key screen from each cluster
   * will be shown. Which screen is the key screen is determined by the ClusteringAlgorithm
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Screen keyScreen;

  /**
   * Full list of screens.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Screen> screens;

  static {
    // hack to force ProGuard to consider Screen used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Screen.class);
  }

  /**
   * A string that describes the activity of every screen in the cluster.
   * @return value or {@code null} for none
   */
  public java.lang.String getActivity() {
    return activity;
  }

  /**
   * A string that describes the activity of every screen in the cluster.
   * @param activity activity or {@code null} for none
   */
  public ScreenshotCluster setActivity(java.lang.String activity) {
    this.activity = activity;
    return this;
  }

  /**
   * A unique identifier for the cluster.
   * @return value or {@code null} for none
   */
  public java.lang.String getClusterId() {
    return clusterId;
  }

  /**
   * A unique identifier for the cluster.
   * @param clusterId clusterId or {@code null} for none
   */
  public ScreenshotCluster setClusterId(java.lang.String clusterId) {
    this.clusterId = clusterId;
    return this;
  }

  /**
   * A singular screen that represents the cluster as a whole. This screen will act as the "cover"
   * of the entire cluster. When users look at the clusters, only the key screen from each cluster
   * will be shown. Which screen is the key screen is determined by the ClusteringAlgorithm
   * @return value or {@code null} for none
   */
  public Screen getKeyScreen() {
    return keyScreen;
  }

  /**
   * A singular screen that represents the cluster as a whole. This screen will act as the "cover"
   * of the entire cluster. When users look at the clusters, only the key screen from each cluster
   * will be shown. Which screen is the key screen is determined by the ClusteringAlgorithm
   * @param keyScreen keyScreen or {@code null} for none
   */
  public ScreenshotCluster setKeyScreen(Screen keyScreen) {
    this.keyScreen = keyScreen;
    return this;
  }

  /**
   * Full list of screens.
   * @return value or {@code null} for none
   */
  public java.util.List<Screen> getScreens() {
    return screens;
  }

  /**
   * Full list of screens.
   * @param screens screens or {@code null} for none
   */
  public ScreenshotCluster setScreens(java.util.List<Screen> screens) {
    this.screens = screens;
    return this;
  }

  @Override
  public ScreenshotCluster set(String fieldName, Object value) {
    return (ScreenshotCluster) super.set(fieldName, value);
  }

  @Override
  public ScreenshotCluster clone() {
    return (ScreenshotCluster) super.clone();
  }

}
