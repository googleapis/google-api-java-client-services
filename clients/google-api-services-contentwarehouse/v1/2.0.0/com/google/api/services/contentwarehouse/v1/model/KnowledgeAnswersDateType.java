/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A DateType configures a value whose type is intended to be a date. LINT.IfChange Next id: 16
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KnowledgeAnswersDateType extends com.google.api.client.json.GenericJson {

  /**
   * If true, will allow all resolutions that are ranges.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowAllRangeResolutions;

  /**
   * If true, overrides all other options in this message and allows any kind of DateTime
   * annotation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowAllResolutions;

  /**
   * If true, will allow all resolutions except holidays.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowAllResolutionsExceptHolidays;

  /**
   * If true, will allow resolutions that aren't contiguous sequences of 4 digits annotated as 24-hr
   * times. These are often mis-interpreted years or postcodes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowAllResolutionsWithout4digit24hrTime;

  /**
   * If true, will allow resolutions without an explicit hour. Symbolic ranges such as [this
   * evening] are not considered as explicit hour, but the range [1-3pm] is considered as explicit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowAllResolutionsWithoutTime;

  /**
   * If true, will parse a mention to DateTime of resolution day. This allows parsing strings like
   * "August 30th", "2012-12-25";
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowDayResolution;

  /**
   * If true, will allow day resolutions except holidays or ordinal numbers, such as "today",
   * "December 13", but "Christmas", "first" are not allowed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowDayResolutionExceptHolidaysOrOrdinal;

  /**
   * If true, will allow resolutions with an explicit hour such as "8am", "5pm".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowHourResolution;

  /**
   * If true, will parse a mention to DateTime of resolution month. This allows parsing strings like
   * "this August", "2012-12";
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowMonthResolution;

  /**
   * If true, will allow "now" resolutions, but not any other time
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowNowResolution;

  /**
   * If true, will allow symbolic time resolutions such as "tonight".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowSymbolicTime;

  /**
   * If true, will allow time resolutions without an explicit timezone.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowTimeResolutionsWithoutExplicitTimezone;

  /**
   * If true, will parse a mention to DateTime of resolution year. This allows parsing strings like
   * "Next year ", "2010";
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allowYearResolution;

  /**
   * Contains data about current schema remodelings at this ValueType level. For more information
   * see go/meaning-remodeling-framework.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpMeaningMeaningRemodelings remodelings;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subType;

  /**
   * If true, will allow all resolutions that are ranges.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowAllRangeResolutions() {
    return allowAllRangeResolutions;
  }

  /**
   * If true, will allow all resolutions that are ranges.
   * @param allowAllRangeResolutions allowAllRangeResolutions or {@code null} for none
   */
  public KnowledgeAnswersDateType setAllowAllRangeResolutions(java.lang.Boolean allowAllRangeResolutions) {
    this.allowAllRangeResolutions = allowAllRangeResolutions;
    return this;
  }

  /**
   * If true, overrides all other options in this message and allows any kind of DateTime
   * annotation.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowAllResolutions() {
    return allowAllResolutions;
  }

  /**
   * If true, overrides all other options in this message and allows any kind of DateTime
   * annotation.
   * @param allowAllResolutions allowAllResolutions or {@code null} for none
   */
  public KnowledgeAnswersDateType setAllowAllResolutions(java.lang.Boolean allowAllResolutions) {
    this.allowAllResolutions = allowAllResolutions;
    return this;
  }

  /**
   * If true, will allow all resolutions except holidays.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowAllResolutionsExceptHolidays() {
    return allowAllResolutionsExceptHolidays;
  }

  /**
   * If true, will allow all resolutions except holidays.
   * @param allowAllResolutionsExceptHolidays allowAllResolutionsExceptHolidays or {@code null} for none
   */
  public KnowledgeAnswersDateType setAllowAllResolutionsExceptHolidays(java.lang.Boolean allowAllResolutionsExceptHolidays) {
    this.allowAllResolutionsExceptHolidays = allowAllResolutionsExceptHolidays;
    return this;
  }

  /**
   * If true, will allow resolutions that aren't contiguous sequences of 4 digits annotated as 24-hr
   * times. These are often mis-interpreted years or postcodes.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowAllResolutionsWithout4digit24hrTime() {
    return allowAllResolutionsWithout4digit24hrTime;
  }

  /**
   * If true, will allow resolutions that aren't contiguous sequences of 4 digits annotated as 24-hr
   * times. These are often mis-interpreted years or postcodes.
   * @param allowAllResolutionsWithout4digit24hrTime allowAllResolutionsWithout4digit24hrTime or {@code null} for none
   */
  public KnowledgeAnswersDateType setAllowAllResolutionsWithout4digit24hrTime(java.lang.Boolean allowAllResolutionsWithout4digit24hrTime) {
    this.allowAllResolutionsWithout4digit24hrTime = allowAllResolutionsWithout4digit24hrTime;
    return this;
  }

  /**
   * If true, will allow resolutions without an explicit hour. Symbolic ranges such as [this
   * evening] are not considered as explicit hour, but the range [1-3pm] is considered as explicit.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowAllResolutionsWithoutTime() {
    return allowAllResolutionsWithoutTime;
  }

  /**
   * If true, will allow resolutions without an explicit hour. Symbolic ranges such as [this
   * evening] are not considered as explicit hour, but the range [1-3pm] is considered as explicit.
   * @param allowAllResolutionsWithoutTime allowAllResolutionsWithoutTime or {@code null} for none
   */
  public KnowledgeAnswersDateType setAllowAllResolutionsWithoutTime(java.lang.Boolean allowAllResolutionsWithoutTime) {
    this.allowAllResolutionsWithoutTime = allowAllResolutionsWithoutTime;
    return this;
  }

  /**
   * If true, will parse a mention to DateTime of resolution day. This allows parsing strings like
   * "August 30th", "2012-12-25";
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowDayResolution() {
    return allowDayResolution;
  }

  /**
   * If true, will parse a mention to DateTime of resolution day. This allows parsing strings like
   * "August 30th", "2012-12-25";
   * @param allowDayResolution allowDayResolution or {@code null} for none
   */
  public KnowledgeAnswersDateType setAllowDayResolution(java.lang.Boolean allowDayResolution) {
    this.allowDayResolution = allowDayResolution;
    return this;
  }

  /**
   * If true, will allow day resolutions except holidays or ordinal numbers, such as "today",
   * "December 13", but "Christmas", "first" are not allowed.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowDayResolutionExceptHolidaysOrOrdinal() {
    return allowDayResolutionExceptHolidaysOrOrdinal;
  }

  /**
   * If true, will allow day resolutions except holidays or ordinal numbers, such as "today",
   * "December 13", but "Christmas", "first" are not allowed.
   * @param allowDayResolutionExceptHolidaysOrOrdinal allowDayResolutionExceptHolidaysOrOrdinal or {@code null} for none
   */
  public KnowledgeAnswersDateType setAllowDayResolutionExceptHolidaysOrOrdinal(java.lang.Boolean allowDayResolutionExceptHolidaysOrOrdinal) {
    this.allowDayResolutionExceptHolidaysOrOrdinal = allowDayResolutionExceptHolidaysOrOrdinal;
    return this;
  }

  /**
   * If true, will allow resolutions with an explicit hour such as "8am", "5pm".
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowHourResolution() {
    return allowHourResolution;
  }

  /**
   * If true, will allow resolutions with an explicit hour such as "8am", "5pm".
   * @param allowHourResolution allowHourResolution or {@code null} for none
   */
  public KnowledgeAnswersDateType setAllowHourResolution(java.lang.Boolean allowHourResolution) {
    this.allowHourResolution = allowHourResolution;
    return this;
  }

  /**
   * If true, will parse a mention to DateTime of resolution month. This allows parsing strings like
   * "this August", "2012-12";
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowMonthResolution() {
    return allowMonthResolution;
  }

  /**
   * If true, will parse a mention to DateTime of resolution month. This allows parsing strings like
   * "this August", "2012-12";
   * @param allowMonthResolution allowMonthResolution or {@code null} for none
   */
  public KnowledgeAnswersDateType setAllowMonthResolution(java.lang.Boolean allowMonthResolution) {
    this.allowMonthResolution = allowMonthResolution;
    return this;
  }

  /**
   * If true, will allow "now" resolutions, but not any other time
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowNowResolution() {
    return allowNowResolution;
  }

  /**
   * If true, will allow "now" resolutions, but not any other time
   * @param allowNowResolution allowNowResolution or {@code null} for none
   */
  public KnowledgeAnswersDateType setAllowNowResolution(java.lang.Boolean allowNowResolution) {
    this.allowNowResolution = allowNowResolution;
    return this;
  }

  /**
   * If true, will allow symbolic time resolutions such as "tonight".
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowSymbolicTime() {
    return allowSymbolicTime;
  }

  /**
   * If true, will allow symbolic time resolutions such as "tonight".
   * @param allowSymbolicTime allowSymbolicTime or {@code null} for none
   */
  public KnowledgeAnswersDateType setAllowSymbolicTime(java.lang.Boolean allowSymbolicTime) {
    this.allowSymbolicTime = allowSymbolicTime;
    return this;
  }

  /**
   * If true, will allow time resolutions without an explicit timezone.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowTimeResolutionsWithoutExplicitTimezone() {
    return allowTimeResolutionsWithoutExplicitTimezone;
  }

  /**
   * If true, will allow time resolutions without an explicit timezone.
   * @param allowTimeResolutionsWithoutExplicitTimezone allowTimeResolutionsWithoutExplicitTimezone or {@code null} for none
   */
  public KnowledgeAnswersDateType setAllowTimeResolutionsWithoutExplicitTimezone(java.lang.Boolean allowTimeResolutionsWithoutExplicitTimezone) {
    this.allowTimeResolutionsWithoutExplicitTimezone = allowTimeResolutionsWithoutExplicitTimezone;
    return this;
  }

  /**
   * If true, will parse a mention to DateTime of resolution year. This allows parsing strings like
   * "Next year ", "2010";
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllowYearResolution() {
    return allowYearResolution;
  }

  /**
   * If true, will parse a mention to DateTime of resolution year. This allows parsing strings like
   * "Next year ", "2010";
   * @param allowYearResolution allowYearResolution or {@code null} for none
   */
  public KnowledgeAnswersDateType setAllowYearResolution(java.lang.Boolean allowYearResolution) {
    this.allowYearResolution = allowYearResolution;
    return this;
  }

  /**
   * Contains data about current schema remodelings at this ValueType level. For more information
   * see go/meaning-remodeling-framework.
   * @return value or {@code null} for none
   */
  public NlpMeaningMeaningRemodelings getRemodelings() {
    return remodelings;
  }

  /**
   * Contains data about current schema remodelings at this ValueType level. For more information
   * see go/meaning-remodeling-framework.
   * @param remodelings remodelings or {@code null} for none
   */
  public KnowledgeAnswersDateType setRemodelings(NlpMeaningMeaningRemodelings remodelings) {
    this.remodelings = remodelings;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSubType() {
    return subType;
  }

  /**
   * @param subType subType or {@code null} for none
   */
  public KnowledgeAnswersDateType setSubType(java.lang.String subType) {
    this.subType = subType;
    return this;
  }

  @Override
  public KnowledgeAnswersDateType set(String fieldName, Object value) {
    return (KnowledgeAnswersDateType) super.set(fieldName, value);
  }

  @Override
  public KnowledgeAnswersDateType clone() {
    return (KnowledgeAnswersDateType) super.clone();
  }

}
