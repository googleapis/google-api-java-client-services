/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Next free ID: 32
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PostalAddress extends com.google.api.client.json.GenericJson {

  /**
   * These correspond to the "AddressLine" elements in xAL, which are used to hold unstructured
   * text. This is an addendum to the structured values; when the address is formatted, the provided
   * lines are prepended to the formatted version of the street component fields for Western
   * countries, and appended for CJK countries. These lines are in display order. Formerly users of
   * PostalAddress were discouraged from mixing address_line with structured address elements.
   * Mixing is now encouraged if address_line has to be used at all.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> addressLine;

  /**
   * Top-level administrative subdivision of this country. Examples: US state, IT region, UK
   * constituent nation, JP prefecture.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String administrativeAreaName;

  /**
   * Name corresponding to country code. Optional. This can usually be inferred from
   * country_name_code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String countryName;

  /**
   * xAL does not specify a scheme for country codes. We strongly recommend ISO 3166-1-alpha-2 (two
   * letter codes, as used in DNS) if you use this field. (Use "GB", not "UK".)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String countryNameCode;

  /**
   * Dependent locality or sublocality. Used for UK dependent localities, or neighborhoods or
   * boroughs in other locations. If trying to represent a UK double-dependent locality, include
   * both the double-dependent locality and the dependent locality in this field, e.g. "Whaley,
   * Langwith".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dependentLocalityName;

  /**
   * Dependent thoroughfares are used to define UK-style dependent thoroughfares, and secondary
   * streets in addresses in other locales, including intersections. Formatting is locale-dependent.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dependentThoroughfareName;

  /**
   * NEW: The firm or organization. This goes at a finer granularity than address_lines in the
   * address. Omit if not needed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String firmName;

  /**
   * Required to support the suppression of country names from formatted results for addresses
   * within geo-politically disputed areas. Note that we cannot achieve this by not setting the
   * country, as this would prevent us from selecting a suitable formatting template. Addresses
   * converted from Oyster, by the standard conversion libraries, will have this field set if the
   * address lies within a geo-politically disputed area (ie, contained within features of type
   * TYPE_DISPUTED_AREA) even if the disputed area itself is not a visible part of the formatted
   * address. An example of a disputed area is "No Man's Land" near Jerusalem which has the flag
   * FLAG_NEVER_DISPLAY set for all its names. See: go/disputed-areas-2014 for more information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isDisputed;

  /**
   * Language of the address. May affect address formatting for multi- lingual countries. Also
   * allows storing multilingual location names as repeated PostalAddress. Not in xAL. Use language
   * codes which are accepted by i18n_identifiers::LanguageCodeCoverter::FromOther(). Examples
   * include "en" and "de-CH".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String languageCode;

  /**
   * Locality. This is something of a fuzzy term, but it generally refers to the city/town portion
   * of an address. In regions of the world where localities are not well defined or do not fit into
   * this structure well (for example, Japan), leave locality_name empty and use address_line.
   * Examples: US city, IT comune, UK post town.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String localityName;

  /**
   * This corresponds to PostBoxNumber in xAL format. In xAL format, it's nested inside PostBox,
   * which also contains a "Type" field to distinguish between PO Box, Private Bag etc. Current
   * support in this proto is for PO Box only. Note that although this is modelled as a string, it
   * should have the number only, with any necessary punctuation (such as "-"). For example, for
   * "P.O. Box 123", this field would hold "123" - the template displaying this would prepend P.O.
   * Box when formatting if necessary.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postBoxNumber;

  /**
   * Despite the name, postal_code_number values are frequently alphanumeric. Examples: "94043",
   * "SW1W", "SW1W 9TQ".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postalCodeNumber;

  /**
   * Used for postal-code suffixes, such as the 4-digit extension of a US ZIP+4 code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postalCodeNumberExtension;

  /**
   * The "premise" is something like a house or building.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String premiseName;

  /**
   * NEW: The recipient. This goes at a finer granularity than address_lines in the address. Not
   * present in xAL. Omit if not needed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String recipientName;

  /**
   * This corresponds to the SortingCode sub-element of the xAL PostalServiceElements element. Use
   * is very country-specific. Where it is used, the value is either a string like "CEDEX",
   * optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the
   * "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g.
   * CÃ´te d'Ivoire).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sortingCode;

  /**
   * Second-level administrative subdivision of this country. Examples: US county, IT province, UK
   * county.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subAdministrativeAreaName;

  /**
   * The "subpremise" is something like an apartment or suite. xAL offers more structured premise
   * and subpremise values, but we don't.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subPremiseName;

  /**
   * Name of thoroughfare. Intersections should be represented with this field or address_line.
   * Examples: "Amphitheatre Parkway", "N Shoreline Blvd & Charleston Rd"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String thoroughfareName;

  /**
   * Thoroughfare numbers (street numbers) can be very complex indeed. xAL defines fancy structures
   * like "ThoroughfareNumberRange" to represent the details, but we haven't included that yet. It
   * is worth noting that this needs to be a string, not a number. Example: "1600"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String thoroughfareNumber;

  /**
   * These correspond to the "AddressLine" elements in xAL, which are used to hold unstructured
   * text. This is an addendum to the structured values; when the address is formatted, the provided
   * lines are prepended to the formatted version of the street component fields for Western
   * countries, and appended for CJK countries. These lines are in display order. Formerly users of
   * PostalAddress were discouraged from mixing address_line with structured address elements.
   * Mixing is now encouraged if address_line has to be used at all.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAddressLine() {
    return addressLine;
  }

  /**
   * These correspond to the "AddressLine" elements in xAL, which are used to hold unstructured
   * text. This is an addendum to the structured values; when the address is formatted, the provided
   * lines are prepended to the formatted version of the street component fields for Western
   * countries, and appended for CJK countries. These lines are in display order. Formerly users of
   * PostalAddress were discouraged from mixing address_line with structured address elements.
   * Mixing is now encouraged if address_line has to be used at all.
   * @param addressLine addressLine or {@code null} for none
   */
  public PostalAddress setAddressLine(java.util.List<java.lang.String> addressLine) {
    this.addressLine = addressLine;
    return this;
  }

  /**
   * Top-level administrative subdivision of this country. Examples: US state, IT region, UK
   * constituent nation, JP prefecture.
   * @return value or {@code null} for none
   */
  public java.lang.String getAdministrativeAreaName() {
    return administrativeAreaName;
  }

  /**
   * Top-level administrative subdivision of this country. Examples: US state, IT region, UK
   * constituent nation, JP prefecture.
   * @param administrativeAreaName administrativeAreaName or {@code null} for none
   */
  public PostalAddress setAdministrativeAreaName(java.lang.String administrativeAreaName) {
    this.administrativeAreaName = administrativeAreaName;
    return this;
  }

  /**
   * Name corresponding to country code. Optional. This can usually be inferred from
   * country_name_code.
   * @return value or {@code null} for none
   */
  public java.lang.String getCountryName() {
    return countryName;
  }

  /**
   * Name corresponding to country code. Optional. This can usually be inferred from
   * country_name_code.
   * @param countryName countryName or {@code null} for none
   */
  public PostalAddress setCountryName(java.lang.String countryName) {
    this.countryName = countryName;
    return this;
  }

  /**
   * xAL does not specify a scheme for country codes. We strongly recommend ISO 3166-1-alpha-2 (two
   * letter codes, as used in DNS) if you use this field. (Use "GB", not "UK".)
   * @return value or {@code null} for none
   */
  public java.lang.String getCountryNameCode() {
    return countryNameCode;
  }

  /**
   * xAL does not specify a scheme for country codes. We strongly recommend ISO 3166-1-alpha-2 (two
   * letter codes, as used in DNS) if you use this field. (Use "GB", not "UK".)
   * @param countryNameCode countryNameCode or {@code null} for none
   */
  public PostalAddress setCountryNameCode(java.lang.String countryNameCode) {
    this.countryNameCode = countryNameCode;
    return this;
  }

  /**
   * Dependent locality or sublocality. Used for UK dependent localities, or neighborhoods or
   * boroughs in other locations. If trying to represent a UK double-dependent locality, include
   * both the double-dependent locality and the dependent locality in this field, e.g. "Whaley,
   * Langwith".
   * @return value or {@code null} for none
   */
  public java.lang.String getDependentLocalityName() {
    return dependentLocalityName;
  }

  /**
   * Dependent locality or sublocality. Used for UK dependent localities, or neighborhoods or
   * boroughs in other locations. If trying to represent a UK double-dependent locality, include
   * both the double-dependent locality and the dependent locality in this field, e.g. "Whaley,
   * Langwith".
   * @param dependentLocalityName dependentLocalityName or {@code null} for none
   */
  public PostalAddress setDependentLocalityName(java.lang.String dependentLocalityName) {
    this.dependentLocalityName = dependentLocalityName;
    return this;
  }

  /**
   * Dependent thoroughfares are used to define UK-style dependent thoroughfares, and secondary
   * streets in addresses in other locales, including intersections. Formatting is locale-dependent.
   * @return value or {@code null} for none
   */
  public java.lang.String getDependentThoroughfareName() {
    return dependentThoroughfareName;
  }

  /**
   * Dependent thoroughfares are used to define UK-style dependent thoroughfares, and secondary
   * streets in addresses in other locales, including intersections. Formatting is locale-dependent.
   * @param dependentThoroughfareName dependentThoroughfareName or {@code null} for none
   */
  public PostalAddress setDependentThoroughfareName(java.lang.String dependentThoroughfareName) {
    this.dependentThoroughfareName = dependentThoroughfareName;
    return this;
  }

  /**
   * NEW: The firm or organization. This goes at a finer granularity than address_lines in the
   * address. Omit if not needed.
   * @return value or {@code null} for none
   */
  public java.lang.String getFirmName() {
    return firmName;
  }

  /**
   * NEW: The firm or organization. This goes at a finer granularity than address_lines in the
   * address. Omit if not needed.
   * @param firmName firmName or {@code null} for none
   */
  public PostalAddress setFirmName(java.lang.String firmName) {
    this.firmName = firmName;
    return this;
  }

  /**
   * Required to support the suppression of country names from formatted results for addresses
   * within geo-politically disputed areas. Note that we cannot achieve this by not setting the
   * country, as this would prevent us from selecting a suitable formatting template. Addresses
   * converted from Oyster, by the standard conversion libraries, will have this field set if the
   * address lies within a geo-politically disputed area (ie, contained within features of type
   * TYPE_DISPUTED_AREA) even if the disputed area itself is not a visible part of the formatted
   * address. An example of a disputed area is "No Man's Land" near Jerusalem which has the flag
   * FLAG_NEVER_DISPLAY set for all its names. See: go/disputed-areas-2014 for more information.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsDisputed() {
    return isDisputed;
  }

  /**
   * Required to support the suppression of country names from formatted results for addresses
   * within geo-politically disputed areas. Note that we cannot achieve this by not setting the
   * country, as this would prevent us from selecting a suitable formatting template. Addresses
   * converted from Oyster, by the standard conversion libraries, will have this field set if the
   * address lies within a geo-politically disputed area (ie, contained within features of type
   * TYPE_DISPUTED_AREA) even if the disputed area itself is not a visible part of the formatted
   * address. An example of a disputed area is "No Man's Land" near Jerusalem which has the flag
   * FLAG_NEVER_DISPLAY set for all its names. See: go/disputed-areas-2014 for more information.
   * @param isDisputed isDisputed or {@code null} for none
   */
  public PostalAddress setIsDisputed(java.lang.Boolean isDisputed) {
    this.isDisputed = isDisputed;
    return this;
  }

  /**
   * Language of the address. May affect address formatting for multi- lingual countries. Also
   * allows storing multilingual location names as repeated PostalAddress. Not in xAL. Use language
   * codes which are accepted by i18n_identifiers::LanguageCodeCoverter::FromOther(). Examples
   * include "en" and "de-CH".
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguageCode() {
    return languageCode;
  }

  /**
   * Language of the address. May affect address formatting for multi- lingual countries. Also
   * allows storing multilingual location names as repeated PostalAddress. Not in xAL. Use language
   * codes which are accepted by i18n_identifiers::LanguageCodeCoverter::FromOther(). Examples
   * include "en" and "de-CH".
   * @param languageCode languageCode or {@code null} for none
   */
  public PostalAddress setLanguageCode(java.lang.String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Locality. This is something of a fuzzy term, but it generally refers to the city/town portion
   * of an address. In regions of the world where localities are not well defined or do not fit into
   * this structure well (for example, Japan), leave locality_name empty and use address_line.
   * Examples: US city, IT comune, UK post town.
   * @return value or {@code null} for none
   */
  public java.lang.String getLocalityName() {
    return localityName;
  }

  /**
   * Locality. This is something of a fuzzy term, but it generally refers to the city/town portion
   * of an address. In regions of the world where localities are not well defined or do not fit into
   * this structure well (for example, Japan), leave locality_name empty and use address_line.
   * Examples: US city, IT comune, UK post town.
   * @param localityName localityName or {@code null} for none
   */
  public PostalAddress setLocalityName(java.lang.String localityName) {
    this.localityName = localityName;
    return this;
  }

  /**
   * This corresponds to PostBoxNumber in xAL format. In xAL format, it's nested inside PostBox,
   * which also contains a "Type" field to distinguish between PO Box, Private Bag etc. Current
   * support in this proto is for PO Box only. Note that although this is modelled as a string, it
   * should have the number only, with any necessary punctuation (such as "-"). For example, for
   * "P.O. Box 123", this field would hold "123" - the template displaying this would prepend P.O.
   * Box when formatting if necessary.
   * @return value or {@code null} for none
   */
  public java.lang.String getPostBoxNumber() {
    return postBoxNumber;
  }

  /**
   * This corresponds to PostBoxNumber in xAL format. In xAL format, it's nested inside PostBox,
   * which also contains a "Type" field to distinguish between PO Box, Private Bag etc. Current
   * support in this proto is for PO Box only. Note that although this is modelled as a string, it
   * should have the number only, with any necessary punctuation (such as "-"). For example, for
   * "P.O. Box 123", this field would hold "123" - the template displaying this would prepend P.O.
   * Box when formatting if necessary.
   * @param postBoxNumber postBoxNumber or {@code null} for none
   */
  public PostalAddress setPostBoxNumber(java.lang.String postBoxNumber) {
    this.postBoxNumber = postBoxNumber;
    return this;
  }

  /**
   * Despite the name, postal_code_number values are frequently alphanumeric. Examples: "94043",
   * "SW1W", "SW1W 9TQ".
   * @return value or {@code null} for none
   */
  public java.lang.String getPostalCodeNumber() {
    return postalCodeNumber;
  }

  /**
   * Despite the name, postal_code_number values are frequently alphanumeric. Examples: "94043",
   * "SW1W", "SW1W 9TQ".
   * @param postalCodeNumber postalCodeNumber or {@code null} for none
   */
  public PostalAddress setPostalCodeNumber(java.lang.String postalCodeNumber) {
    this.postalCodeNumber = postalCodeNumber;
    return this;
  }

  /**
   * Used for postal-code suffixes, such as the 4-digit extension of a US ZIP+4 code.
   * @return value or {@code null} for none
   */
  public java.lang.String getPostalCodeNumberExtension() {
    return postalCodeNumberExtension;
  }

  /**
   * Used for postal-code suffixes, such as the 4-digit extension of a US ZIP+4 code.
   * @param postalCodeNumberExtension postalCodeNumberExtension or {@code null} for none
   */
  public PostalAddress setPostalCodeNumberExtension(java.lang.String postalCodeNumberExtension) {
    this.postalCodeNumberExtension = postalCodeNumberExtension;
    return this;
  }

  /**
   * The "premise" is something like a house or building.
   * @return value or {@code null} for none
   */
  public java.lang.String getPremiseName() {
    return premiseName;
  }

  /**
   * The "premise" is something like a house or building.
   * @param premiseName premiseName or {@code null} for none
   */
  public PostalAddress setPremiseName(java.lang.String premiseName) {
    this.premiseName = premiseName;
    return this;
  }

  /**
   * NEW: The recipient. This goes at a finer granularity than address_lines in the address. Not
   * present in xAL. Omit if not needed.
   * @return value or {@code null} for none
   */
  public java.lang.String getRecipientName() {
    return recipientName;
  }

  /**
   * NEW: The recipient. This goes at a finer granularity than address_lines in the address. Not
   * present in xAL. Omit if not needed.
   * @param recipientName recipientName or {@code null} for none
   */
  public PostalAddress setRecipientName(java.lang.String recipientName) {
    this.recipientName = recipientName;
    return this;
  }

  /**
   * This corresponds to the SortingCode sub-element of the xAL PostalServiceElements element. Use
   * is very country-specific. Where it is used, the value is either a string like "CEDEX",
   * optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the
   * "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g.
   * CÃ´te d'Ivoire).
   * @return value or {@code null} for none
   */
  public java.lang.String getSortingCode() {
    return sortingCode;
  }

  /**
   * This corresponds to the SortingCode sub-element of the xAL PostalServiceElements element. Use
   * is very country-specific. Where it is used, the value is either a string like "CEDEX",
   * optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the
   * "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g.
   * CÃ´te d'Ivoire).
   * @param sortingCode sortingCode or {@code null} for none
   */
  public PostalAddress setSortingCode(java.lang.String sortingCode) {
    this.sortingCode = sortingCode;
    return this;
  }

  /**
   * Second-level administrative subdivision of this country. Examples: US county, IT province, UK
   * county.
   * @return value or {@code null} for none
   */
  public java.lang.String getSubAdministrativeAreaName() {
    return subAdministrativeAreaName;
  }

  /**
   * Second-level administrative subdivision of this country. Examples: US county, IT province, UK
   * county.
   * @param subAdministrativeAreaName subAdministrativeAreaName or {@code null} for none
   */
  public PostalAddress setSubAdministrativeAreaName(java.lang.String subAdministrativeAreaName) {
    this.subAdministrativeAreaName = subAdministrativeAreaName;
    return this;
  }

  /**
   * The "subpremise" is something like an apartment or suite. xAL offers more structured premise
   * and subpremise values, but we don't.
   * @return value or {@code null} for none
   */
  public java.lang.String getSubPremiseName() {
    return subPremiseName;
  }

  /**
   * The "subpremise" is something like an apartment or suite. xAL offers more structured premise
   * and subpremise values, but we don't.
   * @param subPremiseName subPremiseName or {@code null} for none
   */
  public PostalAddress setSubPremiseName(java.lang.String subPremiseName) {
    this.subPremiseName = subPremiseName;
    return this;
  }

  /**
   * Name of thoroughfare. Intersections should be represented with this field or address_line.
   * Examples: "Amphitheatre Parkway", "N Shoreline Blvd & Charleston Rd"
   * @return value or {@code null} for none
   */
  public java.lang.String getThoroughfareName() {
    return thoroughfareName;
  }

  /**
   * Name of thoroughfare. Intersections should be represented with this field or address_line.
   * Examples: "Amphitheatre Parkway", "N Shoreline Blvd & Charleston Rd"
   * @param thoroughfareName thoroughfareName or {@code null} for none
   */
  public PostalAddress setThoroughfareName(java.lang.String thoroughfareName) {
    this.thoroughfareName = thoroughfareName;
    return this;
  }

  /**
   * Thoroughfare numbers (street numbers) can be very complex indeed. xAL defines fancy structures
   * like "ThoroughfareNumberRange" to represent the details, but we haven't included that yet. It
   * is worth noting that this needs to be a string, not a number. Example: "1600"
   * @return value or {@code null} for none
   */
  public java.lang.String getThoroughfareNumber() {
    return thoroughfareNumber;
  }

  /**
   * Thoroughfare numbers (street numbers) can be very complex indeed. xAL defines fancy structures
   * like "ThoroughfareNumberRange" to represent the details, but we haven't included that yet. It
   * is worth noting that this needs to be a string, not a number. Example: "1600"
   * @param thoroughfareNumber thoroughfareNumber or {@code null} for none
   */
  public PostalAddress setThoroughfareNumber(java.lang.String thoroughfareNumber) {
    this.thoroughfareNumber = thoroughfareNumber;
    return this;
  }

  @Override
  public PostalAddress set(String fieldName, Object value) {
    return (PostalAddress) super.set(fieldName, value);
  }

  @Override
  public PostalAddress clone() {
    return (PostalAddress) super.clone();
  }

}
