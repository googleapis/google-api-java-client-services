/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.testing.model;

/**
 * Protobuf message describing the device message, used from several RPCs.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Testing API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DeviceSession extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The timestamp that the session first became ACTIVE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String activeStartTime;

  /**
   * Required. The requested device
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AndroidDevice androidDevice;

  /**
   * Output only. The time that the Session was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Output only. The title of the DeviceSession to be presented in the UI.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Optional. If the device is still in use at this time, any connections will be ended and the
   * SessionState will transition from ACTIVE to FINISHED.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String expireTime;

  /**
   * Output only. The interval of time that this device must be interacted with before it
   * transitions from ACTIVE to TIMEOUT_INACTIVITY.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String inactivityTimeout;

  /**
   * Optional. Name of the DeviceSession, e.g. "projects/{project_id}/deviceSessions/{session_id}"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. Current state of the DeviceSession.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. The historical state transitions of the session_state message including the
   * current session state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SessionStateEvent> stateHistories;

  /**
   * Optional. The amount of time that a device will be initially allocated for. This can eventually
   * be extended with the UpdateDeviceSession RPC. Default: 30 minutes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String ttl;

  /**
   * Output only. The timestamp that the session first became ACTIVE.
   * @return value or {@code null} for none
   */
  public String getActiveStartTime() {
    return activeStartTime;
  }

  /**
   * Output only. The timestamp that the session first became ACTIVE.
   * @param activeStartTime activeStartTime or {@code null} for none
   */
  public DeviceSession setActiveStartTime(String activeStartTime) {
    this.activeStartTime = activeStartTime;
    return this;
  }

  /**
   * Required. The requested device
   * @return value or {@code null} for none
   */
  public AndroidDevice getAndroidDevice() {
    return androidDevice;
  }

  /**
   * Required. The requested device
   * @param androidDevice androidDevice or {@code null} for none
   */
  public DeviceSession setAndroidDevice(AndroidDevice androidDevice) {
    this.androidDevice = androidDevice;
    return this;
  }

  /**
   * Output only. The time that the Session was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time that the Session was created.
   * @param createTime createTime or {@code null} for none
   */
  public DeviceSession setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. The title of the DeviceSession to be presented in the UI.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Output only. The title of the DeviceSession to be presented in the UI.
   * @param displayName displayName or {@code null} for none
   */
  public DeviceSession setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Optional. If the device is still in use at this time, any connections will be ended and the
   * SessionState will transition from ACTIVE to FINISHED.
   * @return value or {@code null} for none
   */
  public String getExpireTime() {
    return expireTime;
  }

  /**
   * Optional. If the device is still in use at this time, any connections will be ended and the
   * SessionState will transition from ACTIVE to FINISHED.
   * @param expireTime expireTime or {@code null} for none
   */
  public DeviceSession setExpireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Output only. The interval of time that this device must be interacted with before it
   * transitions from ACTIVE to TIMEOUT_INACTIVITY.
   * @return value or {@code null} for none
   */
  public String getInactivityTimeout() {
    return inactivityTimeout;
  }

  /**
   * Output only. The interval of time that this device must be interacted with before it
   * transitions from ACTIVE to TIMEOUT_INACTIVITY.
   * @param inactivityTimeout inactivityTimeout or {@code null} for none
   */
  public DeviceSession setInactivityTimeout(String inactivityTimeout) {
    this.inactivityTimeout = inactivityTimeout;
    return this;
  }

  /**
   * Optional. Name of the DeviceSession, e.g. "projects/{project_id}/deviceSessions/{session_id}"
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Optional. Name of the DeviceSession, e.g. "projects/{project_id}/deviceSessions/{session_id}"
   * @param name name or {@code null} for none
   */
  public DeviceSession setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. Current state of the DeviceSession.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. Current state of the DeviceSession.
   * @param state state or {@code null} for none
   */
  public DeviceSession setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. The historical state transitions of the session_state message including the
   * current session state.
   * @return value or {@code null} for none
   */
  public java.util.List<SessionStateEvent> getStateHistories() {
    return stateHistories;
  }

  /**
   * Output only. The historical state transitions of the session_state message including the
   * current session state.
   * @param stateHistories stateHistories or {@code null} for none
   */
  public DeviceSession setStateHistories(java.util.List<SessionStateEvent> stateHistories) {
    this.stateHistories = stateHistories;
    return this;
  }

  /**
   * Optional. The amount of time that a device will be initially allocated for. This can eventually
   * be extended with the UpdateDeviceSession RPC. Default: 30 minutes.
   * @return value or {@code null} for none
   */
  public String getTtl() {
    return ttl;
  }

  /**
   * Optional. The amount of time that a device will be initially allocated for. This can eventually
   * be extended with the UpdateDeviceSession RPC. Default: 30 minutes.
   * @param ttl ttl or {@code null} for none
   */
  public DeviceSession setTtl(String ttl) {
    this.ttl = ttl;
    return this;
  }

  @Override
  public DeviceSession set(String fieldName, Object value) {
    return (DeviceSession) super.set(fieldName, value);
  }

  @Override
  public DeviceSession clone() {
    return (DeviceSession) super.clone();
  }

}
