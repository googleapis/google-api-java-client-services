/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.aiplatform.v1.model;

/**
 * Config for SmoothGrad approximation of gradients. When enabled, the gradients are approximated by
 * averaging the gradients from noisy samples in the vicinity of the inputs. Adding noise can help
 * improve the computed gradients. Refer to this paper for more details:
 * https://arxiv.org/pdf/1706.03825.pdf
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Vertex AI API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAiplatformV1SmoothGradConfig extends com.google.api.client.json.GenericJson {

  /**
   * This is similar to noise_sigma, but provides additional flexibility. A separate noise sigma can
   * be provided for each feature, which is useful if their distributions are different. No noise is
   * added to features that are not set. If this field is unset, noise_sigma will be used for all
   * features.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudAiplatformV1FeatureNoiseSigma featureNoiseSigma;

  /**
   * This is a single float value and will be used to add noise to all the features. Use this field
   * when all features are normalized to have the same distribution: scale to range [0, 1], [-1, 1]
   * or z-scoring, where features are normalized to have 0-mean and 1-variance. Learn more about
   * [normalization](https://developers.google.com/machine-learning/data-
   * prep/transform/normalization). For best results the recommended value is about 10% - 20% of the
   * standard deviation of the input feature. Refer to section 3.2 of the SmoothGrad paper:
   * https://arxiv.org/pdf/1706.03825.pdf. Defaults to 0.1. If the distribution is different per
   * feature, set feature_noise_sigma instead for each feature.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float noiseSigma;

  /**
   * The number of gradient samples to use for approximation. The higher this number, the more
   * accurate the gradient is, but the runtime complexity increases by this factor as well. Valid
   * range of its value is [1, 50]. Defaults to 3.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer noisySampleCount;

  /**
   * This is similar to noise_sigma, but provides additional flexibility. A separate noise sigma can
   * be provided for each feature, which is useful if their distributions are different. No noise is
   * added to features that are not set. If this field is unset, noise_sigma will be used for all
   * features.
   * @return value or {@code null} for none
   */
  public GoogleCloudAiplatformV1FeatureNoiseSigma getFeatureNoiseSigma() {
    return featureNoiseSigma;
  }

  /**
   * This is similar to noise_sigma, but provides additional flexibility. A separate noise sigma can
   * be provided for each feature, which is useful if their distributions are different. No noise is
   * added to features that are not set. If this field is unset, noise_sigma will be used for all
   * features.
   * @param featureNoiseSigma featureNoiseSigma or {@code null} for none
   */
  public GoogleCloudAiplatformV1SmoothGradConfig setFeatureNoiseSigma(GoogleCloudAiplatformV1FeatureNoiseSigma featureNoiseSigma) {
    this.featureNoiseSigma = featureNoiseSigma;
    return this;
  }

  /**
   * This is a single float value and will be used to add noise to all the features. Use this field
   * when all features are normalized to have the same distribution: scale to range [0, 1], [-1, 1]
   * or z-scoring, where features are normalized to have 0-mean and 1-variance. Learn more about
   * [normalization](https://developers.google.com/machine-learning/data-
   * prep/transform/normalization). For best results the recommended value is about 10% - 20% of the
   * standard deviation of the input feature. Refer to section 3.2 of the SmoothGrad paper:
   * https://arxiv.org/pdf/1706.03825.pdf. Defaults to 0.1. If the distribution is different per
   * feature, set feature_noise_sigma instead for each feature.
   * @return value or {@code null} for none
   */
  public java.lang.Float getNoiseSigma() {
    return noiseSigma;
  }

  /**
   * This is a single float value and will be used to add noise to all the features. Use this field
   * when all features are normalized to have the same distribution: scale to range [0, 1], [-1, 1]
   * or z-scoring, where features are normalized to have 0-mean and 1-variance. Learn more about
   * [normalization](https://developers.google.com/machine-learning/data-
   * prep/transform/normalization). For best results the recommended value is about 10% - 20% of the
   * standard deviation of the input feature. Refer to section 3.2 of the SmoothGrad paper:
   * https://arxiv.org/pdf/1706.03825.pdf. Defaults to 0.1. If the distribution is different per
   * feature, set feature_noise_sigma instead for each feature.
   * @param noiseSigma noiseSigma or {@code null} for none
   */
  public GoogleCloudAiplatformV1SmoothGradConfig setNoiseSigma(java.lang.Float noiseSigma) {
    this.noiseSigma = noiseSigma;
    return this;
  }

  /**
   * The number of gradient samples to use for approximation. The higher this number, the more
   * accurate the gradient is, but the runtime complexity increases by this factor as well. Valid
   * range of its value is [1, 50]. Defaults to 3.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNoisySampleCount() {
    return noisySampleCount;
  }

  /**
   * The number of gradient samples to use for approximation. The higher this number, the more
   * accurate the gradient is, but the runtime complexity increases by this factor as well. Valid
   * range of its value is [1, 50]. Defaults to 3.
   * @param noisySampleCount noisySampleCount or {@code null} for none
   */
  public GoogleCloudAiplatformV1SmoothGradConfig setNoisySampleCount(java.lang.Integer noisySampleCount) {
    this.noisySampleCount = noisySampleCount;
    return this;
  }

  @Override
  public GoogleCloudAiplatformV1SmoothGradConfig set(String fieldName, Object value) {
    return (GoogleCloudAiplatformV1SmoothGradConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAiplatformV1SmoothGradConfig clone() {
    return (GoogleCloudAiplatformV1SmoothGradConfig) super.clone();
  }

}
