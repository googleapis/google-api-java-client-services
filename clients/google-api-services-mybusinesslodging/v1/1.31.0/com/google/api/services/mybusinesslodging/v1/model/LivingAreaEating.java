/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.mybusinesslodging.v1.model;

/**
 * Information about eating features in the living area.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the My Business Lodging API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LivingAreaEating extends com.google.api.client.json.GenericJson {

  /**
   * Coffee maker. An electric appliance that brews coffee by heating and forcing water through
   * ground coffee.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean coffeeMaker;

  /**
   * Coffee maker exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String coffeeMakerException;

  /**
   * Cookware. Kitchen pots, pans and utensils used in connection with the preparation of food.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean cookware;

  /**
   * Cookware exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cookwareException;

  /**
   * Dishwasher. A counter-height electrical cabinet containing racks for dirty dishware, cookware
   * and cutlery, and a dispenser for soap built into the pull-down door. The cabinet is attached to
   * the plumbing system to facilitate the automatic cleaning of its contents.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean dishwasher;

  /**
   * Dishwasher exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dishwasherException;

  /**
   * Indoor grill. Metal grates built into an indoor cooktop on which food is cooked over an open
   * flame or electric heat source.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean indoorGrill;

  /**
   * Indoor grill exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String indoorGrillException;

  /**
   * Kettle. A covered container with a handle and a spout used for boiling water.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean kettle;

  /**
   * Kettle exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kettleException;

  /**
   * Kitchen available. An area of the guestroom designated for the preparation and storage of food
   * via the presence of a refrigerator, cook top, oven and sink, as well as cutlery, dishes and
   * cookware. Usually includes small appliances such a coffee maker and a microwave. May or may not
   * include an automatic dishwasher.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean kitchenAvailable;

  /**
   * Kitchen available exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kitchenAvailableException;

  /**
   * Microwave. An electric oven that quickly cooks and heats food by microwave energy. Smaller than
   * a standing or wall mounted oven. Usually placed on a kitchen counter, a shelf or tabletop or
   * mounted above a cooktop.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean microwave;

  /**
   * Microwave exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String microwaveException;

  /**
   * Minibar. A small refrigerated cabinet in the guestroom containing bottles/cans of soft drinks,
   * mini bottles of alcohol, and snacks. The items are most commonly available for a fee.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean minibar;

  /**
   * Minibar exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String minibarException;

  /**
   * Outdoor grill. Metal grates on which food is cooked over an open flame or electric heat source.
   * Part of an outdoor apparatus that supports the grates. Also known as barbecue grill or
   * barbecue.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean outdoorGrill;

  /**
   * Outdoor grill exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String outdoorGrillException;

  /**
   * Oven. A temperature controlled, heated metal cabinet powered by gas or electricity in which
   * food is placed for the purpose of cooking or reheating.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean oven;

  /**
   * Oven exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ovenException;

  /**
   * Refrigerator. A large, climate-controlled electrical cabinet with vertical doors. Built for the
   * purpose of chilling and storing perishable foods.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean refrigerator;

  /**
   * Refrigerator exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String refrigeratorException;

  /**
   * Sink. A basin with a faucet attached to a water source and used for the purpose of washing and
   * rinsing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean sink;

  /**
   * Sink exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sinkException;

  /**
   * Snackbar. A small cabinet in the guestroom containing snacks. The items are most commonly
   * available for a fee.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean snackbar;

  /**
   * Snackbar exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String snackbarException;

  /**
   * Stove. A kitchen appliance powered by gas or electricity for the purpose of creating a flame or
   * hot surface on which pots of food can be cooked. Also known as cooktop or hob.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean stove;

  /**
   * Stove exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stoveException;

  /**
   * Tea station. A small area with the supplies needed to heat water and make tea.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean teaStation;

  /**
   * Tea station exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String teaStationException;

  /**
   * Toaster. A small, temperature controlled electric appliance with rectangular slots at the top
   * that are lined with heated coils for the purpose of browning slices of bread products.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean toaster;

  /**
   * Toaster exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String toasterException;

  /**
   * Coffee maker. An electric appliance that brews coffee by heating and forcing water through
   * ground coffee.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCoffeeMaker() {
    return coffeeMaker;
  }

  /**
   * Coffee maker. An electric appliance that brews coffee by heating and forcing water through
   * ground coffee.
   * @param coffeeMaker coffeeMaker or {@code null} for none
   */
  public LivingAreaEating setCoffeeMaker(java.lang.Boolean coffeeMaker) {
    this.coffeeMaker = coffeeMaker;
    return this;
  }

  /**
   * Coffee maker exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getCoffeeMakerException() {
    return coffeeMakerException;
  }

  /**
   * Coffee maker exception.
   * @param coffeeMakerException coffeeMakerException or {@code null} for none
   */
  public LivingAreaEating setCoffeeMakerException(java.lang.String coffeeMakerException) {
    this.coffeeMakerException = coffeeMakerException;
    return this;
  }

  /**
   * Cookware. Kitchen pots, pans and utensils used in connection with the preparation of food.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCookware() {
    return cookware;
  }

  /**
   * Cookware. Kitchen pots, pans and utensils used in connection with the preparation of food.
   * @param cookware cookware or {@code null} for none
   */
  public LivingAreaEating setCookware(java.lang.Boolean cookware) {
    this.cookware = cookware;
    return this;
  }

  /**
   * Cookware exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getCookwareException() {
    return cookwareException;
  }

  /**
   * Cookware exception.
   * @param cookwareException cookwareException or {@code null} for none
   */
  public LivingAreaEating setCookwareException(java.lang.String cookwareException) {
    this.cookwareException = cookwareException;
    return this;
  }

  /**
   * Dishwasher. A counter-height electrical cabinet containing racks for dirty dishware, cookware
   * and cutlery, and a dispenser for soap built into the pull-down door. The cabinet is attached to
   * the plumbing system to facilitate the automatic cleaning of its contents.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDishwasher() {
    return dishwasher;
  }

  /**
   * Dishwasher. A counter-height electrical cabinet containing racks for dirty dishware, cookware
   * and cutlery, and a dispenser for soap built into the pull-down door. The cabinet is attached to
   * the plumbing system to facilitate the automatic cleaning of its contents.
   * @param dishwasher dishwasher or {@code null} for none
   */
  public LivingAreaEating setDishwasher(java.lang.Boolean dishwasher) {
    this.dishwasher = dishwasher;
    return this;
  }

  /**
   * Dishwasher exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getDishwasherException() {
    return dishwasherException;
  }

  /**
   * Dishwasher exception.
   * @param dishwasherException dishwasherException or {@code null} for none
   */
  public LivingAreaEating setDishwasherException(java.lang.String dishwasherException) {
    this.dishwasherException = dishwasherException;
    return this;
  }

  /**
   * Indoor grill. Metal grates built into an indoor cooktop on which food is cooked over an open
   * flame or electric heat source.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIndoorGrill() {
    return indoorGrill;
  }

  /**
   * Indoor grill. Metal grates built into an indoor cooktop on which food is cooked over an open
   * flame or electric heat source.
   * @param indoorGrill indoorGrill or {@code null} for none
   */
  public LivingAreaEating setIndoorGrill(java.lang.Boolean indoorGrill) {
    this.indoorGrill = indoorGrill;
    return this;
  }

  /**
   * Indoor grill exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getIndoorGrillException() {
    return indoorGrillException;
  }

  /**
   * Indoor grill exception.
   * @param indoorGrillException indoorGrillException or {@code null} for none
   */
  public LivingAreaEating setIndoorGrillException(java.lang.String indoorGrillException) {
    this.indoorGrillException = indoorGrillException;
    return this;
  }

  /**
   * Kettle. A covered container with a handle and a spout used for boiling water.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getKettle() {
    return kettle;
  }

  /**
   * Kettle. A covered container with a handle and a spout used for boiling water.
   * @param kettle kettle or {@code null} for none
   */
  public LivingAreaEating setKettle(java.lang.Boolean kettle) {
    this.kettle = kettle;
    return this;
  }

  /**
   * Kettle exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getKettleException() {
    return kettleException;
  }

  /**
   * Kettle exception.
   * @param kettleException kettleException or {@code null} for none
   */
  public LivingAreaEating setKettleException(java.lang.String kettleException) {
    this.kettleException = kettleException;
    return this;
  }

  /**
   * Kitchen available. An area of the guestroom designated for the preparation and storage of food
   * via the presence of a refrigerator, cook top, oven and sink, as well as cutlery, dishes and
   * cookware. Usually includes small appliances such a coffee maker and a microwave. May or may not
   * include an automatic dishwasher.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getKitchenAvailable() {
    return kitchenAvailable;
  }

  /**
   * Kitchen available. An area of the guestroom designated for the preparation and storage of food
   * via the presence of a refrigerator, cook top, oven and sink, as well as cutlery, dishes and
   * cookware. Usually includes small appliances such a coffee maker and a microwave. May or may not
   * include an automatic dishwasher.
   * @param kitchenAvailable kitchenAvailable or {@code null} for none
   */
  public LivingAreaEating setKitchenAvailable(java.lang.Boolean kitchenAvailable) {
    this.kitchenAvailable = kitchenAvailable;
    return this;
  }

  /**
   * Kitchen available exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getKitchenAvailableException() {
    return kitchenAvailableException;
  }

  /**
   * Kitchen available exception.
   * @param kitchenAvailableException kitchenAvailableException or {@code null} for none
   */
  public LivingAreaEating setKitchenAvailableException(java.lang.String kitchenAvailableException) {
    this.kitchenAvailableException = kitchenAvailableException;
    return this;
  }

  /**
   * Microwave. An electric oven that quickly cooks and heats food by microwave energy. Smaller than
   * a standing or wall mounted oven. Usually placed on a kitchen counter, a shelf or tabletop or
   * mounted above a cooktop.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMicrowave() {
    return microwave;
  }

  /**
   * Microwave. An electric oven that quickly cooks and heats food by microwave energy. Smaller than
   * a standing or wall mounted oven. Usually placed on a kitchen counter, a shelf or tabletop or
   * mounted above a cooktop.
   * @param microwave microwave or {@code null} for none
   */
  public LivingAreaEating setMicrowave(java.lang.Boolean microwave) {
    this.microwave = microwave;
    return this;
  }

  /**
   * Microwave exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getMicrowaveException() {
    return microwaveException;
  }

  /**
   * Microwave exception.
   * @param microwaveException microwaveException or {@code null} for none
   */
  public LivingAreaEating setMicrowaveException(java.lang.String microwaveException) {
    this.microwaveException = microwaveException;
    return this;
  }

  /**
   * Minibar. A small refrigerated cabinet in the guestroom containing bottles/cans of soft drinks,
   * mini bottles of alcohol, and snacks. The items are most commonly available for a fee.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMinibar() {
    return minibar;
  }

  /**
   * Minibar. A small refrigerated cabinet in the guestroom containing bottles/cans of soft drinks,
   * mini bottles of alcohol, and snacks. The items are most commonly available for a fee.
   * @param minibar minibar or {@code null} for none
   */
  public LivingAreaEating setMinibar(java.lang.Boolean minibar) {
    this.minibar = minibar;
    return this;
  }

  /**
   * Minibar exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getMinibarException() {
    return minibarException;
  }

  /**
   * Minibar exception.
   * @param minibarException minibarException or {@code null} for none
   */
  public LivingAreaEating setMinibarException(java.lang.String minibarException) {
    this.minibarException = minibarException;
    return this;
  }

  /**
   * Outdoor grill. Metal grates on which food is cooked over an open flame or electric heat source.
   * Part of an outdoor apparatus that supports the grates. Also known as barbecue grill or
   * barbecue.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getOutdoorGrill() {
    return outdoorGrill;
  }

  /**
   * Outdoor grill. Metal grates on which food is cooked over an open flame or electric heat source.
   * Part of an outdoor apparatus that supports the grates. Also known as barbecue grill or
   * barbecue.
   * @param outdoorGrill outdoorGrill or {@code null} for none
   */
  public LivingAreaEating setOutdoorGrill(java.lang.Boolean outdoorGrill) {
    this.outdoorGrill = outdoorGrill;
    return this;
  }

  /**
   * Outdoor grill exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getOutdoorGrillException() {
    return outdoorGrillException;
  }

  /**
   * Outdoor grill exception.
   * @param outdoorGrillException outdoorGrillException or {@code null} for none
   */
  public LivingAreaEating setOutdoorGrillException(java.lang.String outdoorGrillException) {
    this.outdoorGrillException = outdoorGrillException;
    return this;
  }

  /**
   * Oven. A temperature controlled, heated metal cabinet powered by gas or electricity in which
   * food is placed for the purpose of cooking or reheating.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getOven() {
    return oven;
  }

  /**
   * Oven. A temperature controlled, heated metal cabinet powered by gas or electricity in which
   * food is placed for the purpose of cooking or reheating.
   * @param oven oven or {@code null} for none
   */
  public LivingAreaEating setOven(java.lang.Boolean oven) {
    this.oven = oven;
    return this;
  }

  /**
   * Oven exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getOvenException() {
    return ovenException;
  }

  /**
   * Oven exception.
   * @param ovenException ovenException or {@code null} for none
   */
  public LivingAreaEating setOvenException(java.lang.String ovenException) {
    this.ovenException = ovenException;
    return this;
  }

  /**
   * Refrigerator. A large, climate-controlled electrical cabinet with vertical doors. Built for the
   * purpose of chilling and storing perishable foods.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRefrigerator() {
    return refrigerator;
  }

  /**
   * Refrigerator. A large, climate-controlled electrical cabinet with vertical doors. Built for the
   * purpose of chilling and storing perishable foods.
   * @param refrigerator refrigerator or {@code null} for none
   */
  public LivingAreaEating setRefrigerator(java.lang.Boolean refrigerator) {
    this.refrigerator = refrigerator;
    return this;
  }

  /**
   * Refrigerator exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getRefrigeratorException() {
    return refrigeratorException;
  }

  /**
   * Refrigerator exception.
   * @param refrigeratorException refrigeratorException or {@code null} for none
   */
  public LivingAreaEating setRefrigeratorException(java.lang.String refrigeratorException) {
    this.refrigeratorException = refrigeratorException;
    return this;
  }

  /**
   * Sink. A basin with a faucet attached to a water source and used for the purpose of washing and
   * rinsing.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSink() {
    return sink;
  }

  /**
   * Sink. A basin with a faucet attached to a water source and used for the purpose of washing and
   * rinsing.
   * @param sink sink or {@code null} for none
   */
  public LivingAreaEating setSink(java.lang.Boolean sink) {
    this.sink = sink;
    return this;
  }

  /**
   * Sink exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getSinkException() {
    return sinkException;
  }

  /**
   * Sink exception.
   * @param sinkException sinkException or {@code null} for none
   */
  public LivingAreaEating setSinkException(java.lang.String sinkException) {
    this.sinkException = sinkException;
    return this;
  }

  /**
   * Snackbar. A small cabinet in the guestroom containing snacks. The items are most commonly
   * available for a fee.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSnackbar() {
    return snackbar;
  }

  /**
   * Snackbar. A small cabinet in the guestroom containing snacks. The items are most commonly
   * available for a fee.
   * @param snackbar snackbar or {@code null} for none
   */
  public LivingAreaEating setSnackbar(java.lang.Boolean snackbar) {
    this.snackbar = snackbar;
    return this;
  }

  /**
   * Snackbar exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getSnackbarException() {
    return snackbarException;
  }

  /**
   * Snackbar exception.
   * @param snackbarException snackbarException or {@code null} for none
   */
  public LivingAreaEating setSnackbarException(java.lang.String snackbarException) {
    this.snackbarException = snackbarException;
    return this;
  }

  /**
   * Stove. A kitchen appliance powered by gas or electricity for the purpose of creating a flame or
   * hot surface on which pots of food can be cooked. Also known as cooktop or hob.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getStove() {
    return stove;
  }

  /**
   * Stove. A kitchen appliance powered by gas or electricity for the purpose of creating a flame or
   * hot surface on which pots of food can be cooked. Also known as cooktop or hob.
   * @param stove stove or {@code null} for none
   */
  public LivingAreaEating setStove(java.lang.Boolean stove) {
    this.stove = stove;
    return this;
  }

  /**
   * Stove exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getStoveException() {
    return stoveException;
  }

  /**
   * Stove exception.
   * @param stoveException stoveException or {@code null} for none
   */
  public LivingAreaEating setStoveException(java.lang.String stoveException) {
    this.stoveException = stoveException;
    return this;
  }

  /**
   * Tea station. A small area with the supplies needed to heat water and make tea.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getTeaStation() {
    return teaStation;
  }

  /**
   * Tea station. A small area with the supplies needed to heat water and make tea.
   * @param teaStation teaStation or {@code null} for none
   */
  public LivingAreaEating setTeaStation(java.lang.Boolean teaStation) {
    this.teaStation = teaStation;
    return this;
  }

  /**
   * Tea station exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getTeaStationException() {
    return teaStationException;
  }

  /**
   * Tea station exception.
   * @param teaStationException teaStationException or {@code null} for none
   */
  public LivingAreaEating setTeaStationException(java.lang.String teaStationException) {
    this.teaStationException = teaStationException;
    return this;
  }

  /**
   * Toaster. A small, temperature controlled electric appliance with rectangular slots at the top
   * that are lined with heated coils for the purpose of browning slices of bread products.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getToaster() {
    return toaster;
  }

  /**
   * Toaster. A small, temperature controlled electric appliance with rectangular slots at the top
   * that are lined with heated coils for the purpose of browning slices of bread products.
   * @param toaster toaster or {@code null} for none
   */
  public LivingAreaEating setToaster(java.lang.Boolean toaster) {
    this.toaster = toaster;
    return this;
  }

  /**
   * Toaster exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getToasterException() {
    return toasterException;
  }

  /**
   * Toaster exception.
   * @param toasterException toasterException or {@code null} for none
   */
  public LivingAreaEating setToasterException(java.lang.String toasterException) {
    this.toasterException = toasterException;
    return this;
  }

  @Override
  public LivingAreaEating set(String fieldName, Object value) {
    return (LivingAreaEating) super.set(fieldName, value);
  }

  @Override
  public LivingAreaEating clone() {
    return (LivingAreaEating) super.clone();
  }

}
