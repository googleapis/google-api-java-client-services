/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.healthcare.v1beta1.model;

/**
 * Request to evaluate an Annotation store against a ground truth [Annotation store].
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Healthcare API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class EvaluateAnnotationStoreRequest extends com.google.api.client.json.GenericJson {

  /**
   * The BigQuery table where the server writes the output. BigQueryDestination requires the
   * `roles/bigquery.dataEditor` and `roles/bigquery.jobUser` Cloud IAM roles.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination bigqueryDestination;

  /**
   * Optional. InfoType mapping for `eval_store`. Different resources can map to the same infoType.
   * For example, `PERSON_NAME`, `PERSON`, `NAME`, and `HUMAN` are different. To map all of these
   * into a single infoType (such as `PERSON_NAME`), specify the following mapping: ```
   * info_type_mapping["PERSON"] = "PERSON_NAME" info_type_mapping["NAME"] = "PERSON_NAME"
   * info_type_mapping["HUMAN"] = "PERSON_NAME" ``` Unmentioned infoTypes, such as `DATE`, are
   * treated as identity mapping. For example: ``` info_type_mapping["DATE"] = "DATE" ``` InfoTypes
   * are case-insensitive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> evalInfoTypeMapping;

  /**
   * Optional. Similar to `eval_info_type_mapping`, infoType mapping for `golden_store`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> goldenInfoTypeMapping;

  /**
   * The Annotation store to use as ground truth, in the format of `projects/{project_id}/locations/
   * {location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String goldenStore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private InfoTypeConfig infoTypeConfig;

  /**
   * The BigQuery table where the server writes the output. BigQueryDestination requires the
   * `roles/bigquery.dataEditor` and `roles/bigquery.jobUser` Cloud IAM roles.
   * @return value or {@code null} for none
   */
  public GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination getBigqueryDestination() {
    return bigqueryDestination;
  }

  /**
   * The BigQuery table where the server writes the output. BigQueryDestination requires the
   * `roles/bigquery.dataEditor` and `roles/bigquery.jobUser` Cloud IAM roles.
   * @param bigqueryDestination bigqueryDestination or {@code null} for none
   */
  public EvaluateAnnotationStoreRequest setBigqueryDestination(GoogleCloudHealthcareV1beta1AnnotationBigQueryDestination bigqueryDestination) {
    this.bigqueryDestination = bigqueryDestination;
    return this;
  }

  /**
   * Optional. InfoType mapping for `eval_store`. Different resources can map to the same infoType.
   * For example, `PERSON_NAME`, `PERSON`, `NAME`, and `HUMAN` are different. To map all of these
   * into a single infoType (such as `PERSON_NAME`), specify the following mapping: ```
   * info_type_mapping["PERSON"] = "PERSON_NAME" info_type_mapping["NAME"] = "PERSON_NAME"
   * info_type_mapping["HUMAN"] = "PERSON_NAME" ``` Unmentioned infoTypes, such as `DATE`, are
   * treated as identity mapping. For example: ``` info_type_mapping["DATE"] = "DATE" ``` InfoTypes
   * are case-insensitive.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getEvalInfoTypeMapping() {
    return evalInfoTypeMapping;
  }

  /**
   * Optional. InfoType mapping for `eval_store`. Different resources can map to the same infoType.
   * For example, `PERSON_NAME`, `PERSON`, `NAME`, and `HUMAN` are different. To map all of these
   * into a single infoType (such as `PERSON_NAME`), specify the following mapping: ```
   * info_type_mapping["PERSON"] = "PERSON_NAME" info_type_mapping["NAME"] = "PERSON_NAME"
   * info_type_mapping["HUMAN"] = "PERSON_NAME" ``` Unmentioned infoTypes, such as `DATE`, are
   * treated as identity mapping. For example: ``` info_type_mapping["DATE"] = "DATE" ``` InfoTypes
   * are case-insensitive.
   * @param evalInfoTypeMapping evalInfoTypeMapping or {@code null} for none
   */
  public EvaluateAnnotationStoreRequest setEvalInfoTypeMapping(java.util.Map<String, java.lang.String> evalInfoTypeMapping) {
    this.evalInfoTypeMapping = evalInfoTypeMapping;
    return this;
  }

  /**
   * Optional. Similar to `eval_info_type_mapping`, infoType mapping for `golden_store`.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getGoldenInfoTypeMapping() {
    return goldenInfoTypeMapping;
  }

  /**
   * Optional. Similar to `eval_info_type_mapping`, infoType mapping for `golden_store`.
   * @param goldenInfoTypeMapping goldenInfoTypeMapping or {@code null} for none
   */
  public EvaluateAnnotationStoreRequest setGoldenInfoTypeMapping(java.util.Map<String, java.lang.String> goldenInfoTypeMapping) {
    this.goldenInfoTypeMapping = goldenInfoTypeMapping;
    return this;
  }

  /**
   * The Annotation store to use as ground truth, in the format of `projects/{project_id}/locations/
   * {location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getGoldenStore() {
    return goldenStore;
  }

  /**
   * The Annotation store to use as ground truth, in the format of `projects/{project_id}/locations/
   * {location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.
   * @param goldenStore goldenStore or {@code null} for none
   */
  public EvaluateAnnotationStoreRequest setGoldenStore(java.lang.String goldenStore) {
    this.goldenStore = goldenStore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public InfoTypeConfig getInfoTypeConfig() {
    return infoTypeConfig;
  }

  /**
   * @param infoTypeConfig infoTypeConfig or {@code null} for none
   */
  public EvaluateAnnotationStoreRequest setInfoTypeConfig(InfoTypeConfig infoTypeConfig) {
    this.infoTypeConfig = infoTypeConfig;
    return this;
  }

  @Override
  public EvaluateAnnotationStoreRequest set(String fieldName, Object value) {
    return (EvaluateAnnotationStoreRequest) super.set(fieldName, value);
  }

  @Override
  public EvaluateAnnotationStoreRequest clone() {
    return (EvaluateAnnotationStoreRequest) super.clone();
  }

}
