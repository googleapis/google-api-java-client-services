/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.migrationcenter.v1alpha1.model;

/**
 * A resource that aggregates the validation errors found in an import job file.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Migration Center API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FileValidationReport extends com.google.api.client.json.GenericJson {

  /**
   * List of file level errors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ImportError> fileErrors;

  /**
   * The name of the file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fileName;

  /**
   * Flag indicating that processing was aborted due to maximum number of errors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean partialReport;

  /**
   * Partial list of rows that encountered validation error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ImportRowError> rowErrors;

  /**
   * List of file level errors.
   * @return value or {@code null} for none
   */
  public java.util.List<ImportError> getFileErrors() {
    return fileErrors;
  }

  /**
   * List of file level errors.
   * @param fileErrors fileErrors or {@code null} for none
   */
  public FileValidationReport setFileErrors(java.util.List<ImportError> fileErrors) {
    this.fileErrors = fileErrors;
    return this;
  }

  /**
   * The name of the file.
   * @return value or {@code null} for none
   */
  public java.lang.String getFileName() {
    return fileName;
  }

  /**
   * The name of the file.
   * @param fileName fileName or {@code null} for none
   */
  public FileValidationReport setFileName(java.lang.String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Flag indicating that processing was aborted due to maximum number of errors.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPartialReport() {
    return partialReport;
  }

  /**
   * Flag indicating that processing was aborted due to maximum number of errors.
   * @param partialReport partialReport or {@code null} for none
   */
  public FileValidationReport setPartialReport(java.lang.Boolean partialReport) {
    this.partialReport = partialReport;
    return this;
  }

  /**
   * Partial list of rows that encountered validation error.
   * @return value or {@code null} for none
   */
  public java.util.List<ImportRowError> getRowErrors() {
    return rowErrors;
  }

  /**
   * Partial list of rows that encountered validation error.
   * @param rowErrors rowErrors or {@code null} for none
   */
  public FileValidationReport setRowErrors(java.util.List<ImportRowError> rowErrors) {
    this.rowErrors = rowErrors;
    return this;
  }

  @Override
  public FileValidationReport set(String fieldName, Object value) {
    return (FileValidationReport) super.set(fieldName, value);
  }

  @Override
  public FileValidationReport clone() {
    return (FileValidationReport) super.clone();
  }

}
