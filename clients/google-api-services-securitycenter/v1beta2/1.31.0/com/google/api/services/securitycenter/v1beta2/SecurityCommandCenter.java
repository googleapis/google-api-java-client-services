/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.securitycenter.v1beta2;

/**
 * Service definition for SecurityCommandCenter (v1beta2).
 *
 * <p>
 * Security Command Center API provides access to temporal views of assets and findings within an organization.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://console.cloud.google.com/apis/api/securitycenter.googleapis.com/overview" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link SecurityCommandCenterRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class SecurityCommandCenter extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1)),
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "1.31.0 of the Security Command Center API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://securitycenter.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://securitycenter.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public SecurityCommandCenter(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  SecurityCommandCenter(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Folders collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
   *   {@code SecurityCommandCenter.Folders.List request = securitycenter.folders().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Folders folders() {
    return new Folders();
  }

  /**
   * The "folders" collection of methods.
   */
  public class Folders {

    /**
     * Get the ContainerThreatDetectionSettings resource.
     *
     * Create a request for the method "folders.getContainerThreatDetectionSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetContainerThreatDetectionSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
     *        organizations/{organization}/containerThreatDetectionSettings *
     *        folders/{folder}/containerThreatDetectionSettings *
     *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
     *        on}/clusters/{cluster}/containerThreatDetectionSettings
     * @return the request
     */
    public GetContainerThreatDetectionSettings getContainerThreatDetectionSettings(java.lang.String name) throws java.io.IOException {
      GetContainerThreatDetectionSettings result = new GetContainerThreatDetectionSettings(name);
      initialize(result);
      return result;
    }

    public class GetContainerThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^folders/[^/]+/containerThreatDetectionSettings$");

      /**
       * Get the ContainerThreatDetectionSettings resource.
       *
       * Create a request for the method "folders.getContainerThreatDetectionSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetContainerThreatDetectionSettings#execute()} method to
       * invoke the remote operation. <p> {@link GetContainerThreatDetectionSettings#initialize(com.goog
       * le.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
       * this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
     *        organizations/{organization}/containerThreatDetectionSettings *
     *        folders/{folder}/containerThreatDetectionSettings *
     *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
     *        on}/clusters/{cluster}/containerThreatDetectionSettings
       * @since 1.13
       */
      protected GetContainerThreatDetectionSettings(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/containerThreatDetectionSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetContainerThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetContainerThreatDetectionSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetContainerThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
        return (GetContainerThreatDetectionSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetContainerThreatDetectionSettings setAlt(java.lang.String alt) {
        return (GetContainerThreatDetectionSettings) super.setAlt(alt);
      }

      @Override
      public GetContainerThreatDetectionSettings setCallback(java.lang.String callback) {
        return (GetContainerThreatDetectionSettings) super.setCallback(callback);
      }

      @Override
      public GetContainerThreatDetectionSettings setFields(java.lang.String fields) {
        return (GetContainerThreatDetectionSettings) super.setFields(fields);
      }

      @Override
      public GetContainerThreatDetectionSettings setKey(java.lang.String key) {
        return (GetContainerThreatDetectionSettings) super.setKey(key);
      }

      @Override
      public GetContainerThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
        return (GetContainerThreatDetectionSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetContainerThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetContainerThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetContainerThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetContainerThreatDetectionSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetContainerThreatDetectionSettings setUploadType(java.lang.String uploadType) {
        return (GetContainerThreatDetectionSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetContainerThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetContainerThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
       * organizations/{organization}/containerThreatDetectionSettings *
       * folders/{folder}/containerThreatDetectionSettings *
       * projects/{project}/containerThreatDetectionSettings *
       * projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
     organizations/{organization}/containerThreatDetectionSettings *
     folders/{folder}/containerThreatDetectionSettings *
     projects/{project}/containerThreatDetectionSettings *
     projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
       * organizations/{organization}/containerThreatDetectionSettings *
       * folders/{folder}/containerThreatDetectionSettings *
       * projects/{project}/containerThreatDetectionSettings *
       * projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      public GetContainerThreatDetectionSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/containerThreatDetectionSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetContainerThreatDetectionSettings set(String parameterName, Object value) {
        return (GetContainerThreatDetectionSettings) super.set(parameterName, value);
      }
    }
    /**
     * Get the EventThreatDetectionSettings resource.
     *
     * Create a request for the method "folders.getEventThreatDetectionSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetEventThreatDetectionSettings#execute()} method to invoke
     * the remote operation.
     *
     * @param name Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
     *        organizations/{organization}/eventThreatDetectionSettings *
     *        folders/{folder}/eventThreatDetectionSettings *
     *        projects/{project}/eventThreatDetectionSettings
     * @return the request
     */
    public GetEventThreatDetectionSettings getEventThreatDetectionSettings(java.lang.String name) throws java.io.IOException {
      GetEventThreatDetectionSettings result = new GetEventThreatDetectionSettings(name);
      initialize(result);
      return result;
    }

    public class GetEventThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^folders/[^/]+/eventThreatDetectionSettings$");

      /**
       * Get the EventThreatDetectionSettings resource.
       *
       * Create a request for the method "folders.getEventThreatDetectionSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetEventThreatDetectionSettings#execute()} method to
       * invoke the remote operation. <p> {@link GetEventThreatDetectionSettings#initialize(com.google.a
       * pi.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this
       * instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
     *        organizations/{organization}/eventThreatDetectionSettings *
     *        folders/{folder}/eventThreatDetectionSettings *
     *        projects/{project}/eventThreatDetectionSettings
       * @since 1.13
       */
      protected GetEventThreatDetectionSettings(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/eventThreatDetectionSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetEventThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetEventThreatDetectionSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetEventThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
        return (GetEventThreatDetectionSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetEventThreatDetectionSettings setAlt(java.lang.String alt) {
        return (GetEventThreatDetectionSettings) super.setAlt(alt);
      }

      @Override
      public GetEventThreatDetectionSettings setCallback(java.lang.String callback) {
        return (GetEventThreatDetectionSettings) super.setCallback(callback);
      }

      @Override
      public GetEventThreatDetectionSettings setFields(java.lang.String fields) {
        return (GetEventThreatDetectionSettings) super.setFields(fields);
      }

      @Override
      public GetEventThreatDetectionSettings setKey(java.lang.String key) {
        return (GetEventThreatDetectionSettings) super.setKey(key);
      }

      @Override
      public GetEventThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
        return (GetEventThreatDetectionSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetEventThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetEventThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetEventThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetEventThreatDetectionSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetEventThreatDetectionSettings setUploadType(java.lang.String uploadType) {
        return (GetEventThreatDetectionSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetEventThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetEventThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
       * organizations/{organization}/eventThreatDetectionSettings *
       * folders/{folder}/eventThreatDetectionSettings *
       * projects/{project}/eventThreatDetectionSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
     organizations/{organization}/eventThreatDetectionSettings *
     folders/{folder}/eventThreatDetectionSettings * projects/{project}/eventThreatDetectionSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
       * organizations/{organization}/eventThreatDetectionSettings *
       * folders/{folder}/eventThreatDetectionSettings *
       * projects/{project}/eventThreatDetectionSettings
       */
      public GetEventThreatDetectionSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/eventThreatDetectionSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetEventThreatDetectionSettings set(String parameterName, Object value) {
        return (GetEventThreatDetectionSettings) super.set(parameterName, value);
      }
    }
    /**
     * Get the SecurityHealthAnalyticsSettings resource.
     *
     * Create a request for the method "folders.getSecurityHealthAnalyticsSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetSecurityHealthAnalyticsSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
     *        organizations/{organization}/securityHealthAnalyticsSettings *
     *        folders/{folder}/securityHealthAnalyticsSettings *
     *        projects/{project}/securityHealthAnalyticsSettings
     * @return the request
     */
    public GetSecurityHealthAnalyticsSettings getSecurityHealthAnalyticsSettings(java.lang.String name) throws java.io.IOException {
      GetSecurityHealthAnalyticsSettings result = new GetSecurityHealthAnalyticsSettings(name);
      initialize(result);
      return result;
    }

    public class GetSecurityHealthAnalyticsSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^folders/[^/]+/securityHealthAnalyticsSettings$");

      /**
       * Get the SecurityHealthAnalyticsSettings resource.
       *
       * Create a request for the method "folders.getSecurityHealthAnalyticsSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetSecurityHealthAnalyticsSettings#execute()} method to
       * invoke the remote operation. <p> {@link GetSecurityHealthAnalyticsSettings#initialize(com.googl
       * e.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
       * this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
     *        organizations/{organization}/securityHealthAnalyticsSettings *
     *        folders/{folder}/securityHealthAnalyticsSettings *
     *        projects/{project}/securityHealthAnalyticsSettings
       * @since 1.13
       */
      protected GetSecurityHealthAnalyticsSettings(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/securityHealthAnalyticsSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetSecurityHealthAnalyticsSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetSecurityHealthAnalyticsSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setAccessToken(java.lang.String accessToken) {
        return (GetSecurityHealthAnalyticsSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setAlt(java.lang.String alt) {
        return (GetSecurityHealthAnalyticsSettings) super.setAlt(alt);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setCallback(java.lang.String callback) {
        return (GetSecurityHealthAnalyticsSettings) super.setCallback(callback);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setFields(java.lang.String fields) {
        return (GetSecurityHealthAnalyticsSettings) super.setFields(fields);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setKey(java.lang.String key) {
        return (GetSecurityHealthAnalyticsSettings) super.setKey(key);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setOauthToken(java.lang.String oauthToken) {
        return (GetSecurityHealthAnalyticsSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetSecurityHealthAnalyticsSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetSecurityHealthAnalyticsSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setUploadType(java.lang.String uploadType) {
        return (GetSecurityHealthAnalyticsSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetSecurityHealthAnalyticsSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
       * organizations/{organization}/securityHealthAnalyticsSettings *
       * folders/{folder}/securityHealthAnalyticsSettings *
       * projects/{project}/securityHealthAnalyticsSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
     organizations/{organization}/securityHealthAnalyticsSettings *
     folders/{folder}/securityHealthAnalyticsSettings *
     projects/{project}/securityHealthAnalyticsSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
       * organizations/{organization}/securityHealthAnalyticsSettings *
       * folders/{folder}/securityHealthAnalyticsSettings *
       * projects/{project}/securityHealthAnalyticsSettings
       */
      public GetSecurityHealthAnalyticsSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/securityHealthAnalyticsSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetSecurityHealthAnalyticsSettings set(String parameterName, Object value) {
        return (GetSecurityHealthAnalyticsSettings) super.set(parameterName, value);
      }
    }
    /**
     * Get the WebSecurityScannerSettings resource.
     *
     * Create a request for the method "folders.getWebSecurityScannerSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetWebSecurityScannerSettings#execute()} method to invoke
     * the remote operation.
     *
     * @param name Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
     *        organizations/{organization}/webSecurityScannerSettings *
     *        folders/{folder}/webSecurityScannerSettings *
     *        projects/{project}/webSecurityScannerSettings
     * @return the request
     */
    public GetWebSecurityScannerSettings getWebSecurityScannerSettings(java.lang.String name) throws java.io.IOException {
      GetWebSecurityScannerSettings result = new GetWebSecurityScannerSettings(name);
      initialize(result);
      return result;
    }

    public class GetWebSecurityScannerSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^folders/[^/]+/webSecurityScannerSettings$");

      /**
       * Get the WebSecurityScannerSettings resource.
       *
       * Create a request for the method "folders.getWebSecurityScannerSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetWebSecurityScannerSettings#execute()} method to invoke
       * the remote operation. <p> {@link GetWebSecurityScannerSettings#initialize(com.google.api.client
       * .googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
     *        organizations/{organization}/webSecurityScannerSettings *
     *        folders/{folder}/webSecurityScannerSettings *
     *        projects/{project}/webSecurityScannerSettings
       * @since 1.13
       */
      protected GetWebSecurityScannerSettings(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/webSecurityScannerSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetWebSecurityScannerSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetWebSecurityScannerSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetWebSecurityScannerSettings setAccessToken(java.lang.String accessToken) {
        return (GetWebSecurityScannerSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetWebSecurityScannerSettings setAlt(java.lang.String alt) {
        return (GetWebSecurityScannerSettings) super.setAlt(alt);
      }

      @Override
      public GetWebSecurityScannerSettings setCallback(java.lang.String callback) {
        return (GetWebSecurityScannerSettings) super.setCallback(callback);
      }

      @Override
      public GetWebSecurityScannerSettings setFields(java.lang.String fields) {
        return (GetWebSecurityScannerSettings) super.setFields(fields);
      }

      @Override
      public GetWebSecurityScannerSettings setKey(java.lang.String key) {
        return (GetWebSecurityScannerSettings) super.setKey(key);
      }

      @Override
      public GetWebSecurityScannerSettings setOauthToken(java.lang.String oauthToken) {
        return (GetWebSecurityScannerSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetWebSecurityScannerSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetWebSecurityScannerSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetWebSecurityScannerSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetWebSecurityScannerSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetWebSecurityScannerSettings setUploadType(java.lang.String uploadType) {
        return (GetWebSecurityScannerSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetWebSecurityScannerSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetWebSecurityScannerSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
       * organizations/{organization}/webSecurityScannerSettings *
       * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
     organizations/{organization}/webSecurityScannerSettings *
     folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
       * organizations/{organization}/webSecurityScannerSettings *
       * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      public GetWebSecurityScannerSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/webSecurityScannerSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetWebSecurityScannerSettings set(String parameterName, Object value) {
        return (GetWebSecurityScannerSettings) super.set(parameterName, value);
      }
    }
    /**
     * Update the ContainerThreatDetectionSettings resource.
     *
     * Create a request for the method "folders.updateContainerThreatDetectionSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link UpdateContainerThreatDetectionSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name The resource name of the ContainerThreatDetectionSettings. Formats: *
     *        organizations/{organization}/containerThreatDetectionSettings *
     *        folders/{folder}/containerThreatDetectionSettings *
     *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
     *        on}/clusters/{cluster}/containerThreatDetectionSettings
     * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings}
     * @return the request
     */
    public UpdateContainerThreatDetectionSettings updateContainerThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings content) throws java.io.IOException {
      UpdateContainerThreatDetectionSettings result = new UpdateContainerThreatDetectionSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateContainerThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^folders/[^/]+/containerThreatDetectionSettings$");

      /**
       * Update the ContainerThreatDetectionSettings resource.
       *
       * Create a request for the method "folders.updateContainerThreatDetectionSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link UpdateContainerThreatDetectionSettings#execute()} method
       * to invoke the remote operation. <p> {@link UpdateContainerThreatDetectionSettings#initialize(co
       * m.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to
       * initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the ContainerThreatDetectionSettings. Formats: *
     *        organizations/{organization}/containerThreatDetectionSettings *
     *        folders/{folder}/containerThreatDetectionSettings *
     *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
     *        on}/clusters/{cluster}/containerThreatDetectionSettings
       * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings}
       * @since 1.13
       */
      protected UpdateContainerThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings content) {
        super(SecurityCommandCenter.this, "PATCH", REST_PATH, content, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/containerThreatDetectionSettings$");
        }
      }

      @Override
      public UpdateContainerThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateContainerThreatDetectionSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateContainerThreatDetectionSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setAlt(java.lang.String alt) {
        return (UpdateContainerThreatDetectionSettings) super.setAlt(alt);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setCallback(java.lang.String callback) {
        return (UpdateContainerThreatDetectionSettings) super.setCallback(callback);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setFields(java.lang.String fields) {
        return (UpdateContainerThreatDetectionSettings) super.setFields(fields);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setKey(java.lang.String key) {
        return (UpdateContainerThreatDetectionSettings) super.setKey(key);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateContainerThreatDetectionSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateContainerThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateContainerThreatDetectionSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setUploadType(java.lang.String uploadType) {
        return (UpdateContainerThreatDetectionSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateContainerThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the ContainerThreatDetectionSettings. Formats: *
       * organizations/{organization}/containerThreatDetectionSettings *
       * folders/{folder}/containerThreatDetectionSettings *
       * projects/{project}/containerThreatDetectionSettings *
       * projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the ContainerThreatDetectionSettings. Formats: *
     organizations/{organization}/containerThreatDetectionSettings *
     folders/{folder}/containerThreatDetectionSettings *
     projects/{project}/containerThreatDetectionSettings *
     projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the ContainerThreatDetectionSettings. Formats: *
       * organizations/{organization}/containerThreatDetectionSettings *
       * folders/{folder}/containerThreatDetectionSettings *
       * projects/{project}/containerThreatDetectionSettings *
       * projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      public UpdateContainerThreatDetectionSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/containerThreatDetectionSettings$");
        }
        this.name = name;
        return this;
      }

      /** The list of fields to be updated. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** The list of fields to be updated.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** The list of fields to be updated. */
      public UpdateContainerThreatDetectionSettings setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateContainerThreatDetectionSettings set(String parameterName, Object value) {
        return (UpdateContainerThreatDetectionSettings) super.set(parameterName, value);
      }
    }
    /**
     * Update the EventThreatDetectionSettings resource.
     *
     * Create a request for the method "folders.updateEventThreatDetectionSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link UpdateEventThreatDetectionSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name The resource name of the EventThreatDetectionSettings. Formats: *
     *        organizations/{organization}/eventThreatDetectionSettings *
     *        folders/{folder}/eventThreatDetectionSettings *
     *        projects/{project}/eventThreatDetectionSettings
     * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings}
     * @return the request
     */
    public UpdateEventThreatDetectionSettings updateEventThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings content) throws java.io.IOException {
      UpdateEventThreatDetectionSettings result = new UpdateEventThreatDetectionSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateEventThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^folders/[^/]+/eventThreatDetectionSettings$");

      /**
       * Update the EventThreatDetectionSettings resource.
       *
       * Create a request for the method "folders.updateEventThreatDetectionSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link UpdateEventThreatDetectionSettings#execute()} method to
       * invoke the remote operation. <p> {@link UpdateEventThreatDetectionSettings#initialize(com.googl
       * e.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
       * this instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the EventThreatDetectionSettings. Formats: *
     *        organizations/{organization}/eventThreatDetectionSettings *
     *        folders/{folder}/eventThreatDetectionSettings *
     *        projects/{project}/eventThreatDetectionSettings
       * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings}
       * @since 1.13
       */
      protected UpdateEventThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings content) {
        super(SecurityCommandCenter.this, "PATCH", REST_PATH, content, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/eventThreatDetectionSettings$");
        }
      }

      @Override
      public UpdateEventThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateEventThreatDetectionSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateEventThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateEventThreatDetectionSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateEventThreatDetectionSettings setAlt(java.lang.String alt) {
        return (UpdateEventThreatDetectionSettings) super.setAlt(alt);
      }

      @Override
      public UpdateEventThreatDetectionSettings setCallback(java.lang.String callback) {
        return (UpdateEventThreatDetectionSettings) super.setCallback(callback);
      }

      @Override
      public UpdateEventThreatDetectionSettings setFields(java.lang.String fields) {
        return (UpdateEventThreatDetectionSettings) super.setFields(fields);
      }

      @Override
      public UpdateEventThreatDetectionSettings setKey(java.lang.String key) {
        return (UpdateEventThreatDetectionSettings) super.setKey(key);
      }

      @Override
      public UpdateEventThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateEventThreatDetectionSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateEventThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateEventThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateEventThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateEventThreatDetectionSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateEventThreatDetectionSettings setUploadType(java.lang.String uploadType) {
        return (UpdateEventThreatDetectionSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateEventThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateEventThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the EventThreatDetectionSettings. Formats: *
       * organizations/{organization}/eventThreatDetectionSettings *
       * folders/{folder}/eventThreatDetectionSettings *
       * projects/{project}/eventThreatDetectionSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the EventThreatDetectionSettings. Formats: *
     organizations/{organization}/eventThreatDetectionSettings *
     folders/{folder}/eventThreatDetectionSettings * projects/{project}/eventThreatDetectionSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the EventThreatDetectionSettings. Formats: *
       * organizations/{organization}/eventThreatDetectionSettings *
       * folders/{folder}/eventThreatDetectionSettings *
       * projects/{project}/eventThreatDetectionSettings
       */
      public UpdateEventThreatDetectionSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/eventThreatDetectionSettings$");
        }
        this.name = name;
        return this;
      }

      /** The list of fields to be updated. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** The list of fields to be updated.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** The list of fields to be updated. */
      public UpdateEventThreatDetectionSettings setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateEventThreatDetectionSettings set(String parameterName, Object value) {
        return (UpdateEventThreatDetectionSettings) super.set(parameterName, value);
      }
    }
    /**
     * Update the SecurityHealthAnalyticsSettings resource.
     *
     * Create a request for the method "folders.updateSecurityHealthAnalyticsSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link UpdateSecurityHealthAnalyticsSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name The resource name of the SecurityHealthAnalyticsSettings. Formats: *
     *        organizations/{organization}/securityHealthAnalyticsSettings *
     *        folders/{folder}/securityHealthAnalyticsSettings *
     *        projects/{project}/securityHealthAnalyticsSettings
     * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings}
     * @return the request
     */
    public UpdateSecurityHealthAnalyticsSettings updateSecurityHealthAnalyticsSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings content) throws java.io.IOException {
      UpdateSecurityHealthAnalyticsSettings result = new UpdateSecurityHealthAnalyticsSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateSecurityHealthAnalyticsSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^folders/[^/]+/securityHealthAnalyticsSettings$");

      /**
       * Update the SecurityHealthAnalyticsSettings resource.
       *
       * Create a request for the method "folders.updateSecurityHealthAnalyticsSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link UpdateSecurityHealthAnalyticsSettings#execute()} method to
       * invoke the remote operation. <p> {@link UpdateSecurityHealthAnalyticsSettings#initialize(com.go
       * ogle.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
       * this instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the SecurityHealthAnalyticsSettings. Formats: *
     *        organizations/{organization}/securityHealthAnalyticsSettings *
     *        folders/{folder}/securityHealthAnalyticsSettings *
     *        projects/{project}/securityHealthAnalyticsSettings
       * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings}
       * @since 1.13
       */
      protected UpdateSecurityHealthAnalyticsSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings content) {
        super(SecurityCommandCenter.this, "PATCH", REST_PATH, content, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/securityHealthAnalyticsSettings$");
        }
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateSecurityHealthAnalyticsSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setAlt(java.lang.String alt) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setAlt(alt);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setCallback(java.lang.String callback) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setCallback(callback);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setFields(java.lang.String fields) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setFields(fields);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setKey(java.lang.String key) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setKey(key);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setUploadType(java.lang.String uploadType) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the SecurityHealthAnalyticsSettings. Formats: *
       * organizations/{organization}/securityHealthAnalyticsSettings *
       * folders/{folder}/securityHealthAnalyticsSettings *
       * projects/{project}/securityHealthAnalyticsSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the SecurityHealthAnalyticsSettings. Formats: *
     organizations/{organization}/securityHealthAnalyticsSettings *
     folders/{folder}/securityHealthAnalyticsSettings *
     projects/{project}/securityHealthAnalyticsSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the SecurityHealthAnalyticsSettings. Formats: *
       * organizations/{organization}/securityHealthAnalyticsSettings *
       * folders/{folder}/securityHealthAnalyticsSettings *
       * projects/{project}/securityHealthAnalyticsSettings
       */
      public UpdateSecurityHealthAnalyticsSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/securityHealthAnalyticsSettings$");
        }
        this.name = name;
        return this;
      }

      /** The list of fields to be updated. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** The list of fields to be updated.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** The list of fields to be updated. */
      public UpdateSecurityHealthAnalyticsSettings setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings set(String parameterName, Object value) {
        return (UpdateSecurityHealthAnalyticsSettings) super.set(parameterName, value);
      }
    }
    /**
     * Update the WebSecurityScannerSettings resource.
     *
     * Create a request for the method "folders.updateWebSecurityScannerSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link UpdateWebSecurityScannerSettings#execute()} method to invoke
     * the remote operation.
     *
     * @param name The resource name of the WebSecurityScannerSettings. Formats: *
     *        organizations/{organization}/webSecurityScannerSettings *
     *        folders/{folder}/webSecurityScannerSettings *
     *        projects/{project}/webSecurityScannerSettings
     * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings}
     * @return the request
     */
    public UpdateWebSecurityScannerSettings updateWebSecurityScannerSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings content) throws java.io.IOException {
      UpdateWebSecurityScannerSettings result = new UpdateWebSecurityScannerSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateWebSecurityScannerSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^folders/[^/]+/webSecurityScannerSettings$");

      /**
       * Update the WebSecurityScannerSettings resource.
       *
       * Create a request for the method "folders.updateWebSecurityScannerSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link UpdateWebSecurityScannerSettings#execute()} method to
       * invoke the remote operation. <p> {@link UpdateWebSecurityScannerSettings#initialize(com.google.
       * api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this
       * instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the WebSecurityScannerSettings. Formats: *
     *        organizations/{organization}/webSecurityScannerSettings *
     *        folders/{folder}/webSecurityScannerSettings *
     *        projects/{project}/webSecurityScannerSettings
       * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings}
       * @since 1.13
       */
      protected UpdateWebSecurityScannerSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings content) {
        super(SecurityCommandCenter.this, "PATCH", REST_PATH, content, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/webSecurityScannerSettings$");
        }
      }

      @Override
      public UpdateWebSecurityScannerSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateWebSecurityScannerSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateWebSecurityScannerSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateWebSecurityScannerSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateWebSecurityScannerSettings setAlt(java.lang.String alt) {
        return (UpdateWebSecurityScannerSettings) super.setAlt(alt);
      }

      @Override
      public UpdateWebSecurityScannerSettings setCallback(java.lang.String callback) {
        return (UpdateWebSecurityScannerSettings) super.setCallback(callback);
      }

      @Override
      public UpdateWebSecurityScannerSettings setFields(java.lang.String fields) {
        return (UpdateWebSecurityScannerSettings) super.setFields(fields);
      }

      @Override
      public UpdateWebSecurityScannerSettings setKey(java.lang.String key) {
        return (UpdateWebSecurityScannerSettings) super.setKey(key);
      }

      @Override
      public UpdateWebSecurityScannerSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateWebSecurityScannerSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateWebSecurityScannerSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateWebSecurityScannerSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateWebSecurityScannerSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateWebSecurityScannerSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateWebSecurityScannerSettings setUploadType(java.lang.String uploadType) {
        return (UpdateWebSecurityScannerSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateWebSecurityScannerSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateWebSecurityScannerSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the WebSecurityScannerSettings. Formats: *
       * organizations/{organization}/webSecurityScannerSettings *
       * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the WebSecurityScannerSettings. Formats: *
     organizations/{organization}/webSecurityScannerSettings *
     folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the WebSecurityScannerSettings. Formats: *
       * organizations/{organization}/webSecurityScannerSettings *
       * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      public UpdateWebSecurityScannerSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/webSecurityScannerSettings$");
        }
        this.name = name;
        return this;
      }

      /** The list of fields to be updated. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** The list of fields to be updated.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** The list of fields to be updated. */
      public UpdateWebSecurityScannerSettings setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateWebSecurityScannerSettings set(String parameterName, Object value) {
        return (UpdateWebSecurityScannerSettings) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the ContainerThreatDetectionSettings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
     *   {@code SecurityCommandCenter.ContainerThreatDetectionSettings.List request = securitycenter.containerThreatDetectionSettings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public ContainerThreatDetectionSettings containerThreatDetectionSettings() {
      return new ContainerThreatDetectionSettings();
    }

    /**
     * The "containerThreatDetectionSettings" collection of methods.
     */
    public class ContainerThreatDetectionSettings {

      /**
       * Calculates the effective ContainerThreatDetectionSettings based on its level in the resource
       * hierarchy and its settings.
       *
       * Create a request for the method "containerThreatDetectionSettings.calculate".
       *
       * This request holds the parameters needed by the securitycenter server.  After setting any
       * optional parameters, call the {@link Calculate#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
       *        organizations/{organization}/containerThreatDetectionSettings *
       *        folders/{folder}/containerThreatDetectionSettings *
       *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
       *        on}/clusters/{cluster}/containerThreatDetectionSettings
       * @return the request
       */
      public Calculate calculate(java.lang.String name) throws java.io.IOException {
        Calculate result = new Calculate(name);
        initialize(result);
        return result;
      }

      public class Calculate extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings> {

        private static final String REST_PATH = "v1beta2/{+name}:calculate";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^folders/[^/]+/containerThreatDetectionSettings$");

        /**
         * Calculates the effective ContainerThreatDetectionSettings based on its level in the resource
         * hierarchy and its settings.
         *
         * Create a request for the method "containerThreatDetectionSettings.calculate".
         *
         * This request holds the parameters needed by the the securitycenter server.  After setting any
         * optional parameters, call the {@link Calculate#execute()} method to invoke the remote
         * operation. <p> {@link
         * Calculate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
       *        organizations/{organization}/containerThreatDetectionSettings *
       *        folders/{folder}/containerThreatDetectionSettings *
       *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
       *        on}/clusters/{cluster}/containerThreatDetectionSettings
         * @since 1.13
         */
        protected Calculate(java.lang.String name) {
          super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/containerThreatDetectionSettings$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Calculate set$Xgafv(java.lang.String $Xgafv) {
          return (Calculate) super.set$Xgafv($Xgafv);
        }

        @Override
        public Calculate setAccessToken(java.lang.String accessToken) {
          return (Calculate) super.setAccessToken(accessToken);
        }

        @Override
        public Calculate setAlt(java.lang.String alt) {
          return (Calculate) super.setAlt(alt);
        }

        @Override
        public Calculate setCallback(java.lang.String callback) {
          return (Calculate) super.setCallback(callback);
        }

        @Override
        public Calculate setFields(java.lang.String fields) {
          return (Calculate) super.setFields(fields);
        }

        @Override
        public Calculate setKey(java.lang.String key) {
          return (Calculate) super.setKey(key);
        }

        @Override
        public Calculate setOauthToken(java.lang.String oauthToken) {
          return (Calculate) super.setOauthToken(oauthToken);
        }

        @Override
        public Calculate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Calculate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Calculate setQuotaUser(java.lang.String quotaUser) {
          return (Calculate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Calculate setUploadType(java.lang.String uploadType) {
          return (Calculate) super.setUploadType(uploadType);
        }

        @Override
        public Calculate setUploadProtocol(java.lang.String uploadProtocol) {
          return (Calculate) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
         * organizations/{organization}/containerThreatDetectionSettings *
         * folders/{folder}/containerThreatDetectionSettings *
         * projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locat
         * ion}/clusters/{cluster}/containerThreatDetectionSettings
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
       organizations/{organization}/containerThreatDetectionSettings *
       folders/{folder}/containerThreatDetectionSettings *
       projects/{project}/containerThreatDetectionSettings *
       projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
         * organizations/{organization}/containerThreatDetectionSettings *
         * folders/{folder}/containerThreatDetectionSettings *
         * projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locat
         * ion}/clusters/{cluster}/containerThreatDetectionSettings
         */
        public Calculate setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/containerThreatDetectionSettings$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Calculate set(String parameterName, Object value) {
          return (Calculate) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the EventThreatDetectionSettings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
     *   {@code SecurityCommandCenter.EventThreatDetectionSettings.List request = securitycenter.eventThreatDetectionSettings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public EventThreatDetectionSettings eventThreatDetectionSettings() {
      return new EventThreatDetectionSettings();
    }

    /**
     * The "eventThreatDetectionSettings" collection of methods.
     */
    public class EventThreatDetectionSettings {

      /**
       * Calculates the effective EventThreatDetectionSettings based on its level in the resource
       * hierarchy and its settings.
       *
       * Create a request for the method "eventThreatDetectionSettings.calculate".
       *
       * This request holds the parameters needed by the securitycenter server.  After setting any
       * optional parameters, call the {@link Calculate#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
       *        organizations/{organization}/eventThreatDetectionSettings *
       *        folders/{folder}/eventThreatDetectionSettings *
       *        projects/{project}/eventThreatDetectionSettings
       * @return the request
       */
      public Calculate calculate(java.lang.String name) throws java.io.IOException {
        Calculate result = new Calculate(name);
        initialize(result);
        return result;
      }

      public class Calculate extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings> {

        private static final String REST_PATH = "v1beta2/{+name}:calculate";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^folders/[^/]+/eventThreatDetectionSettings$");

        /**
         * Calculates the effective EventThreatDetectionSettings based on its level in the resource
         * hierarchy and its settings.
         *
         * Create a request for the method "eventThreatDetectionSettings.calculate".
         *
         * This request holds the parameters needed by the the securitycenter server.  After setting any
         * optional parameters, call the {@link Calculate#execute()} method to invoke the remote
         * operation. <p> {@link
         * Calculate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
       *        organizations/{organization}/eventThreatDetectionSettings *
       *        folders/{folder}/eventThreatDetectionSettings *
       *        projects/{project}/eventThreatDetectionSettings
         * @since 1.13
         */
        protected Calculate(java.lang.String name) {
          super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/eventThreatDetectionSettings$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Calculate set$Xgafv(java.lang.String $Xgafv) {
          return (Calculate) super.set$Xgafv($Xgafv);
        }

        @Override
        public Calculate setAccessToken(java.lang.String accessToken) {
          return (Calculate) super.setAccessToken(accessToken);
        }

        @Override
        public Calculate setAlt(java.lang.String alt) {
          return (Calculate) super.setAlt(alt);
        }

        @Override
        public Calculate setCallback(java.lang.String callback) {
          return (Calculate) super.setCallback(callback);
        }

        @Override
        public Calculate setFields(java.lang.String fields) {
          return (Calculate) super.setFields(fields);
        }

        @Override
        public Calculate setKey(java.lang.String key) {
          return (Calculate) super.setKey(key);
        }

        @Override
        public Calculate setOauthToken(java.lang.String oauthToken) {
          return (Calculate) super.setOauthToken(oauthToken);
        }

        @Override
        public Calculate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Calculate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Calculate setQuotaUser(java.lang.String quotaUser) {
          return (Calculate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Calculate setUploadType(java.lang.String uploadType) {
          return (Calculate) super.setUploadType(uploadType);
        }

        @Override
        public Calculate setUploadProtocol(java.lang.String uploadProtocol) {
          return (Calculate) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
         * organizations/{organization}/eventThreatDetectionSettings *
         * folders/{folder}/eventThreatDetectionSettings *
         * projects/{project}/eventThreatDetectionSettings
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
       organizations/{organization}/eventThreatDetectionSettings *
       folders/{folder}/eventThreatDetectionSettings * projects/{project}/eventThreatDetectionSettings
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
         * organizations/{organization}/eventThreatDetectionSettings *
         * folders/{folder}/eventThreatDetectionSettings *
         * projects/{project}/eventThreatDetectionSettings
         */
        public Calculate setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/eventThreatDetectionSettings$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Calculate set(String parameterName, Object value) {
          return (Calculate) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the SecurityHealthAnalyticsSettings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
     *   {@code SecurityCommandCenter.SecurityHealthAnalyticsSettings.List request = securitycenter.securityHealthAnalyticsSettings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public SecurityHealthAnalyticsSettings securityHealthAnalyticsSettings() {
      return new SecurityHealthAnalyticsSettings();
    }

    /**
     * The "securityHealthAnalyticsSettings" collection of methods.
     */
    public class SecurityHealthAnalyticsSettings {

      /**
       * Calculates the effective SecurityHealthAnalyticsSettings based on its level in the resource
       * hierarchy and its settings.
       *
       * Create a request for the method "securityHealthAnalyticsSettings.calculate".
       *
       * This request holds the parameters needed by the securitycenter server.  After setting any
       * optional parameters, call the {@link Calculate#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
       *        organizations/{organization}/securityHealthAnalyticsSettings *
       *        folders/{folder}/securityHealthAnalyticsSettings *
       *        projects/{project}/securityHealthAnalyticsSettings
       * @return the request
       */
      public Calculate calculate(java.lang.String name) throws java.io.IOException {
        Calculate result = new Calculate(name);
        initialize(result);
        return result;
      }

      public class Calculate extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings> {

        private static final String REST_PATH = "v1beta2/{+name}:calculate";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^folders/[^/]+/securityHealthAnalyticsSettings$");

        /**
         * Calculates the effective SecurityHealthAnalyticsSettings based on its level in the resource
         * hierarchy and its settings.
         *
         * Create a request for the method "securityHealthAnalyticsSettings.calculate".
         *
         * This request holds the parameters needed by the the securitycenter server.  After setting any
         * optional parameters, call the {@link Calculate#execute()} method to invoke the remote
         * operation. <p> {@link
         * Calculate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
       *        organizations/{organization}/securityHealthAnalyticsSettings *
       *        folders/{folder}/securityHealthAnalyticsSettings *
       *        projects/{project}/securityHealthAnalyticsSettings
         * @since 1.13
         */
        protected Calculate(java.lang.String name) {
          super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/securityHealthAnalyticsSettings$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Calculate set$Xgafv(java.lang.String $Xgafv) {
          return (Calculate) super.set$Xgafv($Xgafv);
        }

        @Override
        public Calculate setAccessToken(java.lang.String accessToken) {
          return (Calculate) super.setAccessToken(accessToken);
        }

        @Override
        public Calculate setAlt(java.lang.String alt) {
          return (Calculate) super.setAlt(alt);
        }

        @Override
        public Calculate setCallback(java.lang.String callback) {
          return (Calculate) super.setCallback(callback);
        }

        @Override
        public Calculate setFields(java.lang.String fields) {
          return (Calculate) super.setFields(fields);
        }

        @Override
        public Calculate setKey(java.lang.String key) {
          return (Calculate) super.setKey(key);
        }

        @Override
        public Calculate setOauthToken(java.lang.String oauthToken) {
          return (Calculate) super.setOauthToken(oauthToken);
        }

        @Override
        public Calculate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Calculate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Calculate setQuotaUser(java.lang.String quotaUser) {
          return (Calculate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Calculate setUploadType(java.lang.String uploadType) {
          return (Calculate) super.setUploadType(uploadType);
        }

        @Override
        public Calculate setUploadProtocol(java.lang.String uploadProtocol) {
          return (Calculate) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
         * organizations/{organization}/securityHealthAnalyticsSettings *
         * folders/{folder}/securityHealthAnalyticsSettings *
         * projects/{project}/securityHealthAnalyticsSettings
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
       organizations/{organization}/securityHealthAnalyticsSettings *
       folders/{folder}/securityHealthAnalyticsSettings *
       projects/{project}/securityHealthAnalyticsSettings
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
         * organizations/{organization}/securityHealthAnalyticsSettings *
         * folders/{folder}/securityHealthAnalyticsSettings *
         * projects/{project}/securityHealthAnalyticsSettings
         */
        public Calculate setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/securityHealthAnalyticsSettings$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Calculate set(String parameterName, Object value) {
          return (Calculate) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the WebSecurityScannerSettings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
     *   {@code SecurityCommandCenter.WebSecurityScannerSettings.List request = securitycenter.webSecurityScannerSettings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public WebSecurityScannerSettings webSecurityScannerSettings() {
      return new WebSecurityScannerSettings();
    }

    /**
     * The "webSecurityScannerSettings" collection of methods.
     */
    public class WebSecurityScannerSettings {

      /**
       * Calculates the effective WebSecurityScannerSettings based on its level in the resource hierarchy
       * and its settings.
       *
       * Create a request for the method "webSecurityScannerSettings.calculate".
       *
       * This request holds the parameters needed by the securitycenter server.  After setting any
       * optional parameters, call the {@link Calculate#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
       *        organizations/{organization}/webSecurityScannerSettings *
       *        folders/{folder}/webSecurityScannerSettings *
       *        projects/{project}/webSecurityScannerSettings
       * @return the request
       */
      public Calculate calculate(java.lang.String name) throws java.io.IOException {
        Calculate result = new Calculate(name);
        initialize(result);
        return result;
      }

      public class Calculate extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings> {

        private static final String REST_PATH = "v1beta2/{+name}:calculate";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^folders/[^/]+/webSecurityScannerSettings$");

        /**
         * Calculates the effective WebSecurityScannerSettings based on its level in the resource
         * hierarchy and its settings.
         *
         * Create a request for the method "webSecurityScannerSettings.calculate".
         *
         * This request holds the parameters needed by the the securitycenter server.  After setting any
         * optional parameters, call the {@link Calculate#execute()} method to invoke the remote
         * operation. <p> {@link
         * Calculate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
       *        organizations/{organization}/webSecurityScannerSettings *
       *        folders/{folder}/webSecurityScannerSettings *
       *        projects/{project}/webSecurityScannerSettings
         * @since 1.13
         */
        protected Calculate(java.lang.String name) {
          super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/webSecurityScannerSettings$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Calculate set$Xgafv(java.lang.String $Xgafv) {
          return (Calculate) super.set$Xgafv($Xgafv);
        }

        @Override
        public Calculate setAccessToken(java.lang.String accessToken) {
          return (Calculate) super.setAccessToken(accessToken);
        }

        @Override
        public Calculate setAlt(java.lang.String alt) {
          return (Calculate) super.setAlt(alt);
        }

        @Override
        public Calculate setCallback(java.lang.String callback) {
          return (Calculate) super.setCallback(callback);
        }

        @Override
        public Calculate setFields(java.lang.String fields) {
          return (Calculate) super.setFields(fields);
        }

        @Override
        public Calculate setKey(java.lang.String key) {
          return (Calculate) super.setKey(key);
        }

        @Override
        public Calculate setOauthToken(java.lang.String oauthToken) {
          return (Calculate) super.setOauthToken(oauthToken);
        }

        @Override
        public Calculate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Calculate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Calculate setQuotaUser(java.lang.String quotaUser) {
          return (Calculate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Calculate setUploadType(java.lang.String uploadType) {
          return (Calculate) super.setUploadType(uploadType);
        }

        @Override
        public Calculate setUploadProtocol(java.lang.String uploadProtocol) {
          return (Calculate) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
         * organizations/{organization}/webSecurityScannerSettings *
         * folders/{folder}/webSecurityScannerSettings *
         * projects/{project}/webSecurityScannerSettings
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
       organizations/{organization}/webSecurityScannerSettings *
       folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
         * organizations/{organization}/webSecurityScannerSettings *
         * folders/{folder}/webSecurityScannerSettings *
         * projects/{project}/webSecurityScannerSettings
         */
        public Calculate setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/webSecurityScannerSettings$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Calculate set(String parameterName, Object value) {
          return (Calculate) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Organizations collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
   *   {@code SecurityCommandCenter.Organizations.List request = securitycenter.organizations().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Organizations organizations() {
    return new Organizations();
  }

  /**
   * The "organizations" collection of methods.
   */
  public class Organizations {

    /**
     * Get the ContainerThreatDetectionSettings resource.
     *
     * Create a request for the method "organizations.getContainerThreatDetectionSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetContainerThreatDetectionSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
     *        organizations/{organization}/containerThreatDetectionSettings *
     *        folders/{folder}/containerThreatDetectionSettings *
     *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
     *        on}/clusters/{cluster}/containerThreatDetectionSettings
     * @return the request
     */
    public GetContainerThreatDetectionSettings getContainerThreatDetectionSettings(java.lang.String name) throws java.io.IOException {
      GetContainerThreatDetectionSettings result = new GetContainerThreatDetectionSettings(name);
      initialize(result);
      return result;
    }

    public class GetContainerThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^organizations/[^/]+/containerThreatDetectionSettings$");

      /**
       * Get the ContainerThreatDetectionSettings resource.
       *
       * Create a request for the method "organizations.getContainerThreatDetectionSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetContainerThreatDetectionSettings#execute()} method to
       * invoke the remote operation. <p> {@link GetContainerThreatDetectionSettings#initialize(com.goog
       * le.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
       * this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
     *        organizations/{organization}/containerThreatDetectionSettings *
     *        folders/{folder}/containerThreatDetectionSettings *
     *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
     *        on}/clusters/{cluster}/containerThreatDetectionSettings
       * @since 1.13
       */
      protected GetContainerThreatDetectionSettings(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/containerThreatDetectionSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetContainerThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetContainerThreatDetectionSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetContainerThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
        return (GetContainerThreatDetectionSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetContainerThreatDetectionSettings setAlt(java.lang.String alt) {
        return (GetContainerThreatDetectionSettings) super.setAlt(alt);
      }

      @Override
      public GetContainerThreatDetectionSettings setCallback(java.lang.String callback) {
        return (GetContainerThreatDetectionSettings) super.setCallback(callback);
      }

      @Override
      public GetContainerThreatDetectionSettings setFields(java.lang.String fields) {
        return (GetContainerThreatDetectionSettings) super.setFields(fields);
      }

      @Override
      public GetContainerThreatDetectionSettings setKey(java.lang.String key) {
        return (GetContainerThreatDetectionSettings) super.setKey(key);
      }

      @Override
      public GetContainerThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
        return (GetContainerThreatDetectionSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetContainerThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetContainerThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetContainerThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetContainerThreatDetectionSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetContainerThreatDetectionSettings setUploadType(java.lang.String uploadType) {
        return (GetContainerThreatDetectionSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetContainerThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetContainerThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
       * organizations/{organization}/containerThreatDetectionSettings *
       * folders/{folder}/containerThreatDetectionSettings *
       * projects/{project}/containerThreatDetectionSettings *
       * projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
     organizations/{organization}/containerThreatDetectionSettings *
     folders/{folder}/containerThreatDetectionSettings *
     projects/{project}/containerThreatDetectionSettings *
     projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
       * organizations/{organization}/containerThreatDetectionSettings *
       * folders/{folder}/containerThreatDetectionSettings *
       * projects/{project}/containerThreatDetectionSettings *
       * projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      public GetContainerThreatDetectionSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/containerThreatDetectionSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetContainerThreatDetectionSettings set(String parameterName, Object value) {
        return (GetContainerThreatDetectionSettings) super.set(parameterName, value);
      }
    }
    /**
     * Get the EventThreatDetectionSettings resource.
     *
     * Create a request for the method "organizations.getEventThreatDetectionSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetEventThreatDetectionSettings#execute()} method to invoke
     * the remote operation.
     *
     * @param name Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
     *        organizations/{organization}/eventThreatDetectionSettings *
     *        folders/{folder}/eventThreatDetectionSettings *
     *        projects/{project}/eventThreatDetectionSettings
     * @return the request
     */
    public GetEventThreatDetectionSettings getEventThreatDetectionSettings(java.lang.String name) throws java.io.IOException {
      GetEventThreatDetectionSettings result = new GetEventThreatDetectionSettings(name);
      initialize(result);
      return result;
    }

    public class GetEventThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^organizations/[^/]+/eventThreatDetectionSettings$");

      /**
       * Get the EventThreatDetectionSettings resource.
       *
       * Create a request for the method "organizations.getEventThreatDetectionSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetEventThreatDetectionSettings#execute()} method to
       * invoke the remote operation. <p> {@link GetEventThreatDetectionSettings#initialize(com.google.a
       * pi.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this
       * instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
     *        organizations/{organization}/eventThreatDetectionSettings *
     *        folders/{folder}/eventThreatDetectionSettings *
     *        projects/{project}/eventThreatDetectionSettings
       * @since 1.13
       */
      protected GetEventThreatDetectionSettings(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/eventThreatDetectionSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetEventThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetEventThreatDetectionSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetEventThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
        return (GetEventThreatDetectionSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetEventThreatDetectionSettings setAlt(java.lang.String alt) {
        return (GetEventThreatDetectionSettings) super.setAlt(alt);
      }

      @Override
      public GetEventThreatDetectionSettings setCallback(java.lang.String callback) {
        return (GetEventThreatDetectionSettings) super.setCallback(callback);
      }

      @Override
      public GetEventThreatDetectionSettings setFields(java.lang.String fields) {
        return (GetEventThreatDetectionSettings) super.setFields(fields);
      }

      @Override
      public GetEventThreatDetectionSettings setKey(java.lang.String key) {
        return (GetEventThreatDetectionSettings) super.setKey(key);
      }

      @Override
      public GetEventThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
        return (GetEventThreatDetectionSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetEventThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetEventThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetEventThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetEventThreatDetectionSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetEventThreatDetectionSettings setUploadType(java.lang.String uploadType) {
        return (GetEventThreatDetectionSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetEventThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetEventThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
       * organizations/{organization}/eventThreatDetectionSettings *
       * folders/{folder}/eventThreatDetectionSettings *
       * projects/{project}/eventThreatDetectionSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
     organizations/{organization}/eventThreatDetectionSettings *
     folders/{folder}/eventThreatDetectionSettings * projects/{project}/eventThreatDetectionSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
       * organizations/{organization}/eventThreatDetectionSettings *
       * folders/{folder}/eventThreatDetectionSettings *
       * projects/{project}/eventThreatDetectionSettings
       */
      public GetEventThreatDetectionSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/eventThreatDetectionSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetEventThreatDetectionSettings set(String parameterName, Object value) {
        return (GetEventThreatDetectionSettings) super.set(parameterName, value);
      }
    }
    /**
     * Get the SecurityCenterSettings resource.
     *
     * Create a request for the method "organizations.getSecurityCenterSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetSecurityCenterSettings#execute()} method to invoke the
     * remote operation.
     *
     * @param name Required. The name of the SecurityCenterSettings to retrieve. Format:
     *        organizations/{organization}/securityCenterSettings
     * @return the request
     */
    public GetSecurityCenterSettings getSecurityCenterSettings(java.lang.String name) throws java.io.IOException {
      GetSecurityCenterSettings result = new GetSecurityCenterSettings(name);
      initialize(result);
      return result;
    }

    public class GetSecurityCenterSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.SecurityCenterSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^organizations/[^/]+/securityCenterSettings$");

      /**
       * Get the SecurityCenterSettings resource.
       *
       * Create a request for the method "organizations.getSecurityCenterSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetSecurityCenterSettings#execute()} method to invoke the
       * remote operation. <p> {@link GetSecurityCenterSettings#initialize(com.google.api.client.googlea
       * pis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the SecurityCenterSettings to retrieve. Format:
     *        organizations/{organization}/securityCenterSettings
       * @since 1.13
       */
      protected GetSecurityCenterSettings(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.SecurityCenterSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/securityCenterSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetSecurityCenterSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetSecurityCenterSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetSecurityCenterSettings setAccessToken(java.lang.String accessToken) {
        return (GetSecurityCenterSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetSecurityCenterSettings setAlt(java.lang.String alt) {
        return (GetSecurityCenterSettings) super.setAlt(alt);
      }

      @Override
      public GetSecurityCenterSettings setCallback(java.lang.String callback) {
        return (GetSecurityCenterSettings) super.setCallback(callback);
      }

      @Override
      public GetSecurityCenterSettings setFields(java.lang.String fields) {
        return (GetSecurityCenterSettings) super.setFields(fields);
      }

      @Override
      public GetSecurityCenterSettings setKey(java.lang.String key) {
        return (GetSecurityCenterSettings) super.setKey(key);
      }

      @Override
      public GetSecurityCenterSettings setOauthToken(java.lang.String oauthToken) {
        return (GetSecurityCenterSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetSecurityCenterSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetSecurityCenterSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetSecurityCenterSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetSecurityCenterSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetSecurityCenterSettings setUploadType(java.lang.String uploadType) {
        return (GetSecurityCenterSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetSecurityCenterSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetSecurityCenterSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the SecurityCenterSettings to retrieve. Format:
       * organizations/{organization}/securityCenterSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the SecurityCenterSettings to retrieve. Format:
     organizations/{organization}/securityCenterSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the SecurityCenterSettings to retrieve. Format:
       * organizations/{organization}/securityCenterSettings
       */
      public GetSecurityCenterSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/securityCenterSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetSecurityCenterSettings set(String parameterName, Object value) {
        return (GetSecurityCenterSettings) super.set(parameterName, value);
      }
    }
    /**
     * Get the SecurityHealthAnalyticsSettings resource.
     *
     * Create a request for the method "organizations.getSecurityHealthAnalyticsSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetSecurityHealthAnalyticsSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
     *        organizations/{organization}/securityHealthAnalyticsSettings *
     *        folders/{folder}/securityHealthAnalyticsSettings *
     *        projects/{project}/securityHealthAnalyticsSettings
     * @return the request
     */
    public GetSecurityHealthAnalyticsSettings getSecurityHealthAnalyticsSettings(java.lang.String name) throws java.io.IOException {
      GetSecurityHealthAnalyticsSettings result = new GetSecurityHealthAnalyticsSettings(name);
      initialize(result);
      return result;
    }

    public class GetSecurityHealthAnalyticsSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^organizations/[^/]+/securityHealthAnalyticsSettings$");

      /**
       * Get the SecurityHealthAnalyticsSettings resource.
       *
       * Create a request for the method "organizations.getSecurityHealthAnalyticsSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetSecurityHealthAnalyticsSettings#execute()} method to
       * invoke the remote operation. <p> {@link GetSecurityHealthAnalyticsSettings#initialize(com.googl
       * e.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
       * this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
     *        organizations/{organization}/securityHealthAnalyticsSettings *
     *        folders/{folder}/securityHealthAnalyticsSettings *
     *        projects/{project}/securityHealthAnalyticsSettings
       * @since 1.13
       */
      protected GetSecurityHealthAnalyticsSettings(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/securityHealthAnalyticsSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetSecurityHealthAnalyticsSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetSecurityHealthAnalyticsSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setAccessToken(java.lang.String accessToken) {
        return (GetSecurityHealthAnalyticsSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setAlt(java.lang.String alt) {
        return (GetSecurityHealthAnalyticsSettings) super.setAlt(alt);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setCallback(java.lang.String callback) {
        return (GetSecurityHealthAnalyticsSettings) super.setCallback(callback);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setFields(java.lang.String fields) {
        return (GetSecurityHealthAnalyticsSettings) super.setFields(fields);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setKey(java.lang.String key) {
        return (GetSecurityHealthAnalyticsSettings) super.setKey(key);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setOauthToken(java.lang.String oauthToken) {
        return (GetSecurityHealthAnalyticsSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetSecurityHealthAnalyticsSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetSecurityHealthAnalyticsSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setUploadType(java.lang.String uploadType) {
        return (GetSecurityHealthAnalyticsSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetSecurityHealthAnalyticsSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
       * organizations/{organization}/securityHealthAnalyticsSettings *
       * folders/{folder}/securityHealthAnalyticsSettings *
       * projects/{project}/securityHealthAnalyticsSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
     organizations/{organization}/securityHealthAnalyticsSettings *
     folders/{folder}/securityHealthAnalyticsSettings *
     projects/{project}/securityHealthAnalyticsSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
       * organizations/{organization}/securityHealthAnalyticsSettings *
       * folders/{folder}/securityHealthAnalyticsSettings *
       * projects/{project}/securityHealthAnalyticsSettings
       */
      public GetSecurityHealthAnalyticsSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/securityHealthAnalyticsSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetSecurityHealthAnalyticsSettings set(String parameterName, Object value) {
        return (GetSecurityHealthAnalyticsSettings) super.set(parameterName, value);
      }
    }
    /**
     * Get the Subscription resource.
     *
     * Create a request for the method "organizations.getSubscription".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetSubscription#execute()} method to invoke the remote
     * operation.
     *
     * @param name Required. The name of the subscription to retrieve. Format:
     *        organizations/{organization}/subscription
     * @return the request
     */
    public GetSubscription getSubscription(java.lang.String name) throws java.io.IOException {
      GetSubscription result = new GetSubscription(name);
      initialize(result);
      return result;
    }

    public class GetSubscription extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.Subscription> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^organizations/[^/]+/subscription$");

      /**
       * Get the Subscription resource.
       *
       * Create a request for the method "organizations.getSubscription".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetSubscription#execute()} method to invoke the remote
       * operation. <p> {@link GetSubscription#initialize(com.google.api.client.googleapis.services.Abst
       * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param name Required. The name of the subscription to retrieve. Format:
     *        organizations/{organization}/subscription
       * @since 1.13
       */
      protected GetSubscription(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.Subscription.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/subscription$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetSubscription set$Xgafv(java.lang.String $Xgafv) {
        return (GetSubscription) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetSubscription setAccessToken(java.lang.String accessToken) {
        return (GetSubscription) super.setAccessToken(accessToken);
      }

      @Override
      public GetSubscription setAlt(java.lang.String alt) {
        return (GetSubscription) super.setAlt(alt);
      }

      @Override
      public GetSubscription setCallback(java.lang.String callback) {
        return (GetSubscription) super.setCallback(callback);
      }

      @Override
      public GetSubscription setFields(java.lang.String fields) {
        return (GetSubscription) super.setFields(fields);
      }

      @Override
      public GetSubscription setKey(java.lang.String key) {
        return (GetSubscription) super.setKey(key);
      }

      @Override
      public GetSubscription setOauthToken(java.lang.String oauthToken) {
        return (GetSubscription) super.setOauthToken(oauthToken);
      }

      @Override
      public GetSubscription setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetSubscription) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetSubscription setQuotaUser(java.lang.String quotaUser) {
        return (GetSubscription) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetSubscription setUploadType(java.lang.String uploadType) {
        return (GetSubscription) super.setUploadType(uploadType);
      }

      @Override
      public GetSubscription setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetSubscription) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the subscription to retrieve. Format:
       * organizations/{organization}/subscription
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the subscription to retrieve. Format:
     organizations/{organization}/subscription
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the subscription to retrieve. Format:
       * organizations/{organization}/subscription
       */
      public GetSubscription setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/subscription$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetSubscription set(String parameterName, Object value) {
        return (GetSubscription) super.set(parameterName, value);
      }
    }
    /**
     * Get the WebSecurityScannerSettings resource.
     *
     * Create a request for the method "organizations.getWebSecurityScannerSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetWebSecurityScannerSettings#execute()} method to invoke
     * the remote operation.
     *
     * @param name Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
     *        organizations/{organization}/webSecurityScannerSettings *
     *        folders/{folder}/webSecurityScannerSettings *
     *        projects/{project}/webSecurityScannerSettings
     * @return the request
     */
    public GetWebSecurityScannerSettings getWebSecurityScannerSettings(java.lang.String name) throws java.io.IOException {
      GetWebSecurityScannerSettings result = new GetWebSecurityScannerSettings(name);
      initialize(result);
      return result;
    }

    public class GetWebSecurityScannerSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^organizations/[^/]+/webSecurityScannerSettings$");

      /**
       * Get the WebSecurityScannerSettings resource.
       *
       * Create a request for the method "organizations.getWebSecurityScannerSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetWebSecurityScannerSettings#execute()} method to invoke
       * the remote operation. <p> {@link GetWebSecurityScannerSettings#initialize(com.google.api.client
       * .googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
     *        organizations/{organization}/webSecurityScannerSettings *
     *        folders/{folder}/webSecurityScannerSettings *
     *        projects/{project}/webSecurityScannerSettings
       * @since 1.13
       */
      protected GetWebSecurityScannerSettings(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/webSecurityScannerSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetWebSecurityScannerSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetWebSecurityScannerSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetWebSecurityScannerSettings setAccessToken(java.lang.String accessToken) {
        return (GetWebSecurityScannerSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetWebSecurityScannerSettings setAlt(java.lang.String alt) {
        return (GetWebSecurityScannerSettings) super.setAlt(alt);
      }

      @Override
      public GetWebSecurityScannerSettings setCallback(java.lang.String callback) {
        return (GetWebSecurityScannerSettings) super.setCallback(callback);
      }

      @Override
      public GetWebSecurityScannerSettings setFields(java.lang.String fields) {
        return (GetWebSecurityScannerSettings) super.setFields(fields);
      }

      @Override
      public GetWebSecurityScannerSettings setKey(java.lang.String key) {
        return (GetWebSecurityScannerSettings) super.setKey(key);
      }

      @Override
      public GetWebSecurityScannerSettings setOauthToken(java.lang.String oauthToken) {
        return (GetWebSecurityScannerSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetWebSecurityScannerSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetWebSecurityScannerSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetWebSecurityScannerSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetWebSecurityScannerSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetWebSecurityScannerSettings setUploadType(java.lang.String uploadType) {
        return (GetWebSecurityScannerSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetWebSecurityScannerSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetWebSecurityScannerSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
       * organizations/{organization}/webSecurityScannerSettings *
       * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
     organizations/{organization}/webSecurityScannerSettings *
     folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
       * organizations/{organization}/webSecurityScannerSettings *
       * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      public GetWebSecurityScannerSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/webSecurityScannerSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetWebSecurityScannerSettings set(String parameterName, Object value) {
        return (GetWebSecurityScannerSettings) super.set(parameterName, value);
      }
    }
    /**
     * Update the ContainerThreatDetectionSettings resource.
     *
     * Create a request for the method "organizations.updateContainerThreatDetectionSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link UpdateContainerThreatDetectionSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name The resource name of the ContainerThreatDetectionSettings. Formats: *
     *        organizations/{organization}/containerThreatDetectionSettings *
     *        folders/{folder}/containerThreatDetectionSettings *
     *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
     *        on}/clusters/{cluster}/containerThreatDetectionSettings
     * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings}
     * @return the request
     */
    public UpdateContainerThreatDetectionSettings updateContainerThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings content) throws java.io.IOException {
      UpdateContainerThreatDetectionSettings result = new UpdateContainerThreatDetectionSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateContainerThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^organizations/[^/]+/containerThreatDetectionSettings$");

      /**
       * Update the ContainerThreatDetectionSettings resource.
       *
       * Create a request for the method "organizations.updateContainerThreatDetectionSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link UpdateContainerThreatDetectionSettings#execute()} method
       * to invoke the remote operation. <p> {@link UpdateContainerThreatDetectionSettings#initialize(co
       * m.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to
       * initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the ContainerThreatDetectionSettings. Formats: *
     *        organizations/{organization}/containerThreatDetectionSettings *
     *        folders/{folder}/containerThreatDetectionSettings *
     *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
     *        on}/clusters/{cluster}/containerThreatDetectionSettings
       * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings}
       * @since 1.13
       */
      protected UpdateContainerThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings content) {
        super(SecurityCommandCenter.this, "PATCH", REST_PATH, content, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/containerThreatDetectionSettings$");
        }
      }

      @Override
      public UpdateContainerThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateContainerThreatDetectionSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateContainerThreatDetectionSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setAlt(java.lang.String alt) {
        return (UpdateContainerThreatDetectionSettings) super.setAlt(alt);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setCallback(java.lang.String callback) {
        return (UpdateContainerThreatDetectionSettings) super.setCallback(callback);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setFields(java.lang.String fields) {
        return (UpdateContainerThreatDetectionSettings) super.setFields(fields);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setKey(java.lang.String key) {
        return (UpdateContainerThreatDetectionSettings) super.setKey(key);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateContainerThreatDetectionSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateContainerThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateContainerThreatDetectionSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setUploadType(java.lang.String uploadType) {
        return (UpdateContainerThreatDetectionSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateContainerThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the ContainerThreatDetectionSettings. Formats: *
       * organizations/{organization}/containerThreatDetectionSettings *
       * folders/{folder}/containerThreatDetectionSettings *
       * projects/{project}/containerThreatDetectionSettings *
       * projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the ContainerThreatDetectionSettings. Formats: *
     organizations/{organization}/containerThreatDetectionSettings *
     folders/{folder}/containerThreatDetectionSettings *
     projects/{project}/containerThreatDetectionSettings *
     projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the ContainerThreatDetectionSettings. Formats: *
       * organizations/{organization}/containerThreatDetectionSettings *
       * folders/{folder}/containerThreatDetectionSettings *
       * projects/{project}/containerThreatDetectionSettings *
       * projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      public UpdateContainerThreatDetectionSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/containerThreatDetectionSettings$");
        }
        this.name = name;
        return this;
      }

      /** The list of fields to be updated. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** The list of fields to be updated.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** The list of fields to be updated. */
      public UpdateContainerThreatDetectionSettings setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateContainerThreatDetectionSettings set(String parameterName, Object value) {
        return (UpdateContainerThreatDetectionSettings) super.set(parameterName, value);
      }
    }
    /**
     * Update the EventThreatDetectionSettings resource.
     *
     * Create a request for the method "organizations.updateEventThreatDetectionSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link UpdateEventThreatDetectionSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name The resource name of the EventThreatDetectionSettings. Formats: *
     *        organizations/{organization}/eventThreatDetectionSettings *
     *        folders/{folder}/eventThreatDetectionSettings *
     *        projects/{project}/eventThreatDetectionSettings
     * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings}
     * @return the request
     */
    public UpdateEventThreatDetectionSettings updateEventThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings content) throws java.io.IOException {
      UpdateEventThreatDetectionSettings result = new UpdateEventThreatDetectionSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateEventThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^organizations/[^/]+/eventThreatDetectionSettings$");

      /**
       * Update the EventThreatDetectionSettings resource.
       *
       * Create a request for the method "organizations.updateEventThreatDetectionSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link UpdateEventThreatDetectionSettings#execute()} method to
       * invoke the remote operation. <p> {@link UpdateEventThreatDetectionSettings#initialize(com.googl
       * e.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
       * this instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the EventThreatDetectionSettings. Formats: *
     *        organizations/{organization}/eventThreatDetectionSettings *
     *        folders/{folder}/eventThreatDetectionSettings *
     *        projects/{project}/eventThreatDetectionSettings
       * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings}
       * @since 1.13
       */
      protected UpdateEventThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings content) {
        super(SecurityCommandCenter.this, "PATCH", REST_PATH, content, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/eventThreatDetectionSettings$");
        }
      }

      @Override
      public UpdateEventThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateEventThreatDetectionSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateEventThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateEventThreatDetectionSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateEventThreatDetectionSettings setAlt(java.lang.String alt) {
        return (UpdateEventThreatDetectionSettings) super.setAlt(alt);
      }

      @Override
      public UpdateEventThreatDetectionSettings setCallback(java.lang.String callback) {
        return (UpdateEventThreatDetectionSettings) super.setCallback(callback);
      }

      @Override
      public UpdateEventThreatDetectionSettings setFields(java.lang.String fields) {
        return (UpdateEventThreatDetectionSettings) super.setFields(fields);
      }

      @Override
      public UpdateEventThreatDetectionSettings setKey(java.lang.String key) {
        return (UpdateEventThreatDetectionSettings) super.setKey(key);
      }

      @Override
      public UpdateEventThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateEventThreatDetectionSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateEventThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateEventThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateEventThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateEventThreatDetectionSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateEventThreatDetectionSettings setUploadType(java.lang.String uploadType) {
        return (UpdateEventThreatDetectionSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateEventThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateEventThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the EventThreatDetectionSettings. Formats: *
       * organizations/{organization}/eventThreatDetectionSettings *
       * folders/{folder}/eventThreatDetectionSettings *
       * projects/{project}/eventThreatDetectionSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the EventThreatDetectionSettings. Formats: *
     organizations/{organization}/eventThreatDetectionSettings *
     folders/{folder}/eventThreatDetectionSettings * projects/{project}/eventThreatDetectionSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the EventThreatDetectionSettings. Formats: *
       * organizations/{organization}/eventThreatDetectionSettings *
       * folders/{folder}/eventThreatDetectionSettings *
       * projects/{project}/eventThreatDetectionSettings
       */
      public UpdateEventThreatDetectionSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/eventThreatDetectionSettings$");
        }
        this.name = name;
        return this;
      }

      /** The list of fields to be updated. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** The list of fields to be updated.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** The list of fields to be updated. */
      public UpdateEventThreatDetectionSettings setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateEventThreatDetectionSettings set(String parameterName, Object value) {
        return (UpdateEventThreatDetectionSettings) super.set(parameterName, value);
      }
    }
    /**
     * Update the SecurityHealthAnalyticsSettings resource.
     *
     * Create a request for the method "organizations.updateSecurityHealthAnalyticsSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link UpdateSecurityHealthAnalyticsSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name The resource name of the SecurityHealthAnalyticsSettings. Formats: *
     *        organizations/{organization}/securityHealthAnalyticsSettings *
     *        folders/{folder}/securityHealthAnalyticsSettings *
     *        projects/{project}/securityHealthAnalyticsSettings
     * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings}
     * @return the request
     */
    public UpdateSecurityHealthAnalyticsSettings updateSecurityHealthAnalyticsSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings content) throws java.io.IOException {
      UpdateSecurityHealthAnalyticsSettings result = new UpdateSecurityHealthAnalyticsSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateSecurityHealthAnalyticsSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^organizations/[^/]+/securityHealthAnalyticsSettings$");

      /**
       * Update the SecurityHealthAnalyticsSettings resource.
       *
       * Create a request for the method "organizations.updateSecurityHealthAnalyticsSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link UpdateSecurityHealthAnalyticsSettings#execute()} method to
       * invoke the remote operation. <p> {@link UpdateSecurityHealthAnalyticsSettings#initialize(com.go
       * ogle.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
       * this instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the SecurityHealthAnalyticsSettings. Formats: *
     *        organizations/{organization}/securityHealthAnalyticsSettings *
     *        folders/{folder}/securityHealthAnalyticsSettings *
     *        projects/{project}/securityHealthAnalyticsSettings
       * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings}
       * @since 1.13
       */
      protected UpdateSecurityHealthAnalyticsSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings content) {
        super(SecurityCommandCenter.this, "PATCH", REST_PATH, content, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/securityHealthAnalyticsSettings$");
        }
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateSecurityHealthAnalyticsSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setAlt(java.lang.String alt) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setAlt(alt);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setCallback(java.lang.String callback) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setCallback(callback);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setFields(java.lang.String fields) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setFields(fields);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setKey(java.lang.String key) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setKey(key);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setUploadType(java.lang.String uploadType) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the SecurityHealthAnalyticsSettings. Formats: *
       * organizations/{organization}/securityHealthAnalyticsSettings *
       * folders/{folder}/securityHealthAnalyticsSettings *
       * projects/{project}/securityHealthAnalyticsSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the SecurityHealthAnalyticsSettings. Formats: *
     organizations/{organization}/securityHealthAnalyticsSettings *
     folders/{folder}/securityHealthAnalyticsSettings *
     projects/{project}/securityHealthAnalyticsSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the SecurityHealthAnalyticsSettings. Formats: *
       * organizations/{organization}/securityHealthAnalyticsSettings *
       * folders/{folder}/securityHealthAnalyticsSettings *
       * projects/{project}/securityHealthAnalyticsSettings
       */
      public UpdateSecurityHealthAnalyticsSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/securityHealthAnalyticsSettings$");
        }
        this.name = name;
        return this;
      }

      /** The list of fields to be updated. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** The list of fields to be updated.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** The list of fields to be updated. */
      public UpdateSecurityHealthAnalyticsSettings setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings set(String parameterName, Object value) {
        return (UpdateSecurityHealthAnalyticsSettings) super.set(parameterName, value);
      }
    }
    /**
     * Update the WebSecurityScannerSettings resource.
     *
     * Create a request for the method "organizations.updateWebSecurityScannerSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link UpdateWebSecurityScannerSettings#execute()} method to invoke
     * the remote operation.
     *
     * @param name The resource name of the WebSecurityScannerSettings. Formats: *
     *        organizations/{organization}/webSecurityScannerSettings *
     *        folders/{folder}/webSecurityScannerSettings *
     *        projects/{project}/webSecurityScannerSettings
     * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings}
     * @return the request
     */
    public UpdateWebSecurityScannerSettings updateWebSecurityScannerSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings content) throws java.io.IOException {
      UpdateWebSecurityScannerSettings result = new UpdateWebSecurityScannerSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateWebSecurityScannerSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^organizations/[^/]+/webSecurityScannerSettings$");

      /**
       * Update the WebSecurityScannerSettings resource.
       *
       * Create a request for the method "organizations.updateWebSecurityScannerSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link UpdateWebSecurityScannerSettings#execute()} method to
       * invoke the remote operation. <p> {@link UpdateWebSecurityScannerSettings#initialize(com.google.
       * api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this
       * instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the WebSecurityScannerSettings. Formats: *
     *        organizations/{organization}/webSecurityScannerSettings *
     *        folders/{folder}/webSecurityScannerSettings *
     *        projects/{project}/webSecurityScannerSettings
       * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings}
       * @since 1.13
       */
      protected UpdateWebSecurityScannerSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings content) {
        super(SecurityCommandCenter.this, "PATCH", REST_PATH, content, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/webSecurityScannerSettings$");
        }
      }

      @Override
      public UpdateWebSecurityScannerSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateWebSecurityScannerSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateWebSecurityScannerSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateWebSecurityScannerSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateWebSecurityScannerSettings setAlt(java.lang.String alt) {
        return (UpdateWebSecurityScannerSettings) super.setAlt(alt);
      }

      @Override
      public UpdateWebSecurityScannerSettings setCallback(java.lang.String callback) {
        return (UpdateWebSecurityScannerSettings) super.setCallback(callback);
      }

      @Override
      public UpdateWebSecurityScannerSettings setFields(java.lang.String fields) {
        return (UpdateWebSecurityScannerSettings) super.setFields(fields);
      }

      @Override
      public UpdateWebSecurityScannerSettings setKey(java.lang.String key) {
        return (UpdateWebSecurityScannerSettings) super.setKey(key);
      }

      @Override
      public UpdateWebSecurityScannerSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateWebSecurityScannerSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateWebSecurityScannerSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateWebSecurityScannerSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateWebSecurityScannerSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateWebSecurityScannerSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateWebSecurityScannerSettings setUploadType(java.lang.String uploadType) {
        return (UpdateWebSecurityScannerSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateWebSecurityScannerSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateWebSecurityScannerSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the WebSecurityScannerSettings. Formats: *
       * organizations/{organization}/webSecurityScannerSettings *
       * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the WebSecurityScannerSettings. Formats: *
     organizations/{organization}/webSecurityScannerSettings *
     folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the WebSecurityScannerSettings. Formats: *
       * organizations/{organization}/webSecurityScannerSettings *
       * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      public UpdateWebSecurityScannerSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/webSecurityScannerSettings$");
        }
        this.name = name;
        return this;
      }

      /** The list of fields to be updated. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** The list of fields to be updated.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** The list of fields to be updated. */
      public UpdateWebSecurityScannerSettings setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateWebSecurityScannerSettings set(String parameterName, Object value) {
        return (UpdateWebSecurityScannerSettings) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the ContainerThreatDetectionSettings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
     *   {@code SecurityCommandCenter.ContainerThreatDetectionSettings.List request = securitycenter.containerThreatDetectionSettings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public ContainerThreatDetectionSettings containerThreatDetectionSettings() {
      return new ContainerThreatDetectionSettings();
    }

    /**
     * The "containerThreatDetectionSettings" collection of methods.
     */
    public class ContainerThreatDetectionSettings {

      /**
       * Calculates the effective ContainerThreatDetectionSettings based on its level in the resource
       * hierarchy and its settings.
       *
       * Create a request for the method "containerThreatDetectionSettings.calculate".
       *
       * This request holds the parameters needed by the securitycenter server.  After setting any
       * optional parameters, call the {@link Calculate#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
       *        organizations/{organization}/containerThreatDetectionSettings *
       *        folders/{folder}/containerThreatDetectionSettings *
       *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
       *        on}/clusters/{cluster}/containerThreatDetectionSettings
       * @return the request
       */
      public Calculate calculate(java.lang.String name) throws java.io.IOException {
        Calculate result = new Calculate(name);
        initialize(result);
        return result;
      }

      public class Calculate extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings> {

        private static final String REST_PATH = "v1beta2/{+name}:calculate";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^organizations/[^/]+/containerThreatDetectionSettings$");

        /**
         * Calculates the effective ContainerThreatDetectionSettings based on its level in the resource
         * hierarchy and its settings.
         *
         * Create a request for the method "containerThreatDetectionSettings.calculate".
         *
         * This request holds the parameters needed by the the securitycenter server.  After setting any
         * optional parameters, call the {@link Calculate#execute()} method to invoke the remote
         * operation. <p> {@link
         * Calculate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
       *        organizations/{organization}/containerThreatDetectionSettings *
       *        folders/{folder}/containerThreatDetectionSettings *
       *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
       *        on}/clusters/{cluster}/containerThreatDetectionSettings
         * @since 1.13
         */
        protected Calculate(java.lang.String name) {
          super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/containerThreatDetectionSettings$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Calculate set$Xgafv(java.lang.String $Xgafv) {
          return (Calculate) super.set$Xgafv($Xgafv);
        }

        @Override
        public Calculate setAccessToken(java.lang.String accessToken) {
          return (Calculate) super.setAccessToken(accessToken);
        }

        @Override
        public Calculate setAlt(java.lang.String alt) {
          return (Calculate) super.setAlt(alt);
        }

        @Override
        public Calculate setCallback(java.lang.String callback) {
          return (Calculate) super.setCallback(callback);
        }

        @Override
        public Calculate setFields(java.lang.String fields) {
          return (Calculate) super.setFields(fields);
        }

        @Override
        public Calculate setKey(java.lang.String key) {
          return (Calculate) super.setKey(key);
        }

        @Override
        public Calculate setOauthToken(java.lang.String oauthToken) {
          return (Calculate) super.setOauthToken(oauthToken);
        }

        @Override
        public Calculate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Calculate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Calculate setQuotaUser(java.lang.String quotaUser) {
          return (Calculate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Calculate setUploadType(java.lang.String uploadType) {
          return (Calculate) super.setUploadType(uploadType);
        }

        @Override
        public Calculate setUploadProtocol(java.lang.String uploadProtocol) {
          return (Calculate) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
         * organizations/{organization}/containerThreatDetectionSettings *
         * folders/{folder}/containerThreatDetectionSettings *
         * projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locat
         * ion}/clusters/{cluster}/containerThreatDetectionSettings
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
       organizations/{organization}/containerThreatDetectionSettings *
       folders/{folder}/containerThreatDetectionSettings *
       projects/{project}/containerThreatDetectionSettings *
       projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
         * organizations/{organization}/containerThreatDetectionSettings *
         * folders/{folder}/containerThreatDetectionSettings *
         * projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locat
         * ion}/clusters/{cluster}/containerThreatDetectionSettings
         */
        public Calculate setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/containerThreatDetectionSettings$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Calculate set(String parameterName, Object value) {
          return (Calculate) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the EventThreatDetectionSettings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
     *   {@code SecurityCommandCenter.EventThreatDetectionSettings.List request = securitycenter.eventThreatDetectionSettings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public EventThreatDetectionSettings eventThreatDetectionSettings() {
      return new EventThreatDetectionSettings();
    }

    /**
     * The "eventThreatDetectionSettings" collection of methods.
     */
    public class EventThreatDetectionSettings {

      /**
       * Calculates the effective EventThreatDetectionSettings based on its level in the resource
       * hierarchy and its settings.
       *
       * Create a request for the method "eventThreatDetectionSettings.calculate".
       *
       * This request holds the parameters needed by the securitycenter server.  After setting any
       * optional parameters, call the {@link Calculate#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
       *        organizations/{organization}/eventThreatDetectionSettings *
       *        folders/{folder}/eventThreatDetectionSettings *
       *        projects/{project}/eventThreatDetectionSettings
       * @return the request
       */
      public Calculate calculate(java.lang.String name) throws java.io.IOException {
        Calculate result = new Calculate(name);
        initialize(result);
        return result;
      }

      public class Calculate extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings> {

        private static final String REST_PATH = "v1beta2/{+name}:calculate";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^organizations/[^/]+/eventThreatDetectionSettings$");

        /**
         * Calculates the effective EventThreatDetectionSettings based on its level in the resource
         * hierarchy and its settings.
         *
         * Create a request for the method "eventThreatDetectionSettings.calculate".
         *
         * This request holds the parameters needed by the the securitycenter server.  After setting any
         * optional parameters, call the {@link Calculate#execute()} method to invoke the remote
         * operation. <p> {@link
         * Calculate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
       *        organizations/{organization}/eventThreatDetectionSettings *
       *        folders/{folder}/eventThreatDetectionSettings *
       *        projects/{project}/eventThreatDetectionSettings
         * @since 1.13
         */
        protected Calculate(java.lang.String name) {
          super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/eventThreatDetectionSettings$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Calculate set$Xgafv(java.lang.String $Xgafv) {
          return (Calculate) super.set$Xgafv($Xgafv);
        }

        @Override
        public Calculate setAccessToken(java.lang.String accessToken) {
          return (Calculate) super.setAccessToken(accessToken);
        }

        @Override
        public Calculate setAlt(java.lang.String alt) {
          return (Calculate) super.setAlt(alt);
        }

        @Override
        public Calculate setCallback(java.lang.String callback) {
          return (Calculate) super.setCallback(callback);
        }

        @Override
        public Calculate setFields(java.lang.String fields) {
          return (Calculate) super.setFields(fields);
        }

        @Override
        public Calculate setKey(java.lang.String key) {
          return (Calculate) super.setKey(key);
        }

        @Override
        public Calculate setOauthToken(java.lang.String oauthToken) {
          return (Calculate) super.setOauthToken(oauthToken);
        }

        @Override
        public Calculate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Calculate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Calculate setQuotaUser(java.lang.String quotaUser) {
          return (Calculate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Calculate setUploadType(java.lang.String uploadType) {
          return (Calculate) super.setUploadType(uploadType);
        }

        @Override
        public Calculate setUploadProtocol(java.lang.String uploadProtocol) {
          return (Calculate) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
         * organizations/{organization}/eventThreatDetectionSettings *
         * folders/{folder}/eventThreatDetectionSettings *
         * projects/{project}/eventThreatDetectionSettings
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
       organizations/{organization}/eventThreatDetectionSettings *
       folders/{folder}/eventThreatDetectionSettings * projects/{project}/eventThreatDetectionSettings
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
         * organizations/{organization}/eventThreatDetectionSettings *
         * folders/{folder}/eventThreatDetectionSettings *
         * projects/{project}/eventThreatDetectionSettings
         */
        public Calculate setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/eventThreatDetectionSettings$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Calculate set(String parameterName, Object value) {
          return (Calculate) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the SecurityHealthAnalyticsSettings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
     *   {@code SecurityCommandCenter.SecurityHealthAnalyticsSettings.List request = securitycenter.securityHealthAnalyticsSettings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public SecurityHealthAnalyticsSettings securityHealthAnalyticsSettings() {
      return new SecurityHealthAnalyticsSettings();
    }

    /**
     * The "securityHealthAnalyticsSettings" collection of methods.
     */
    public class SecurityHealthAnalyticsSettings {

      /**
       * Calculates the effective SecurityHealthAnalyticsSettings based on its level in the resource
       * hierarchy and its settings.
       *
       * Create a request for the method "securityHealthAnalyticsSettings.calculate".
       *
       * This request holds the parameters needed by the securitycenter server.  After setting any
       * optional parameters, call the {@link Calculate#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
       *        organizations/{organization}/securityHealthAnalyticsSettings *
       *        folders/{folder}/securityHealthAnalyticsSettings *
       *        projects/{project}/securityHealthAnalyticsSettings
       * @return the request
       */
      public Calculate calculate(java.lang.String name) throws java.io.IOException {
        Calculate result = new Calculate(name);
        initialize(result);
        return result;
      }

      public class Calculate extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings> {

        private static final String REST_PATH = "v1beta2/{+name}:calculate";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^organizations/[^/]+/securityHealthAnalyticsSettings$");

        /**
         * Calculates the effective SecurityHealthAnalyticsSettings based on its level in the resource
         * hierarchy and its settings.
         *
         * Create a request for the method "securityHealthAnalyticsSettings.calculate".
         *
         * This request holds the parameters needed by the the securitycenter server.  After setting any
         * optional parameters, call the {@link Calculate#execute()} method to invoke the remote
         * operation. <p> {@link
         * Calculate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
       *        organizations/{organization}/securityHealthAnalyticsSettings *
       *        folders/{folder}/securityHealthAnalyticsSettings *
       *        projects/{project}/securityHealthAnalyticsSettings
         * @since 1.13
         */
        protected Calculate(java.lang.String name) {
          super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/securityHealthAnalyticsSettings$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Calculate set$Xgafv(java.lang.String $Xgafv) {
          return (Calculate) super.set$Xgafv($Xgafv);
        }

        @Override
        public Calculate setAccessToken(java.lang.String accessToken) {
          return (Calculate) super.setAccessToken(accessToken);
        }

        @Override
        public Calculate setAlt(java.lang.String alt) {
          return (Calculate) super.setAlt(alt);
        }

        @Override
        public Calculate setCallback(java.lang.String callback) {
          return (Calculate) super.setCallback(callback);
        }

        @Override
        public Calculate setFields(java.lang.String fields) {
          return (Calculate) super.setFields(fields);
        }

        @Override
        public Calculate setKey(java.lang.String key) {
          return (Calculate) super.setKey(key);
        }

        @Override
        public Calculate setOauthToken(java.lang.String oauthToken) {
          return (Calculate) super.setOauthToken(oauthToken);
        }

        @Override
        public Calculate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Calculate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Calculate setQuotaUser(java.lang.String quotaUser) {
          return (Calculate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Calculate setUploadType(java.lang.String uploadType) {
          return (Calculate) super.setUploadType(uploadType);
        }

        @Override
        public Calculate setUploadProtocol(java.lang.String uploadProtocol) {
          return (Calculate) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
         * organizations/{organization}/securityHealthAnalyticsSettings *
         * folders/{folder}/securityHealthAnalyticsSettings *
         * projects/{project}/securityHealthAnalyticsSettings
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
       organizations/{organization}/securityHealthAnalyticsSettings *
       folders/{folder}/securityHealthAnalyticsSettings *
       projects/{project}/securityHealthAnalyticsSettings
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
         * organizations/{organization}/securityHealthAnalyticsSettings *
         * folders/{folder}/securityHealthAnalyticsSettings *
         * projects/{project}/securityHealthAnalyticsSettings
         */
        public Calculate setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/securityHealthAnalyticsSettings$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Calculate set(String parameterName, Object value) {
          return (Calculate) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the WebSecurityScannerSettings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
     *   {@code SecurityCommandCenter.WebSecurityScannerSettings.List request = securitycenter.webSecurityScannerSettings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public WebSecurityScannerSettings webSecurityScannerSettings() {
      return new WebSecurityScannerSettings();
    }

    /**
     * The "webSecurityScannerSettings" collection of methods.
     */
    public class WebSecurityScannerSettings {

      /**
       * Calculates the effective WebSecurityScannerSettings based on its level in the resource hierarchy
       * and its settings.
       *
       * Create a request for the method "webSecurityScannerSettings.calculate".
       *
       * This request holds the parameters needed by the securitycenter server.  After setting any
       * optional parameters, call the {@link Calculate#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
       *        organizations/{organization}/webSecurityScannerSettings *
       *        folders/{folder}/webSecurityScannerSettings *
       *        projects/{project}/webSecurityScannerSettings
       * @return the request
       */
      public Calculate calculate(java.lang.String name) throws java.io.IOException {
        Calculate result = new Calculate(name);
        initialize(result);
        return result;
      }

      public class Calculate extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings> {

        private static final String REST_PATH = "v1beta2/{+name}:calculate";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^organizations/[^/]+/webSecurityScannerSettings$");

        /**
         * Calculates the effective WebSecurityScannerSettings based on its level in the resource
         * hierarchy and its settings.
         *
         * Create a request for the method "webSecurityScannerSettings.calculate".
         *
         * This request holds the parameters needed by the the securitycenter server.  After setting any
         * optional parameters, call the {@link Calculate#execute()} method to invoke the remote
         * operation. <p> {@link
         * Calculate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
       *        organizations/{organization}/webSecurityScannerSettings *
       *        folders/{folder}/webSecurityScannerSettings *
       *        projects/{project}/webSecurityScannerSettings
         * @since 1.13
         */
        protected Calculate(java.lang.String name) {
          super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/webSecurityScannerSettings$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Calculate set$Xgafv(java.lang.String $Xgafv) {
          return (Calculate) super.set$Xgafv($Xgafv);
        }

        @Override
        public Calculate setAccessToken(java.lang.String accessToken) {
          return (Calculate) super.setAccessToken(accessToken);
        }

        @Override
        public Calculate setAlt(java.lang.String alt) {
          return (Calculate) super.setAlt(alt);
        }

        @Override
        public Calculate setCallback(java.lang.String callback) {
          return (Calculate) super.setCallback(callback);
        }

        @Override
        public Calculate setFields(java.lang.String fields) {
          return (Calculate) super.setFields(fields);
        }

        @Override
        public Calculate setKey(java.lang.String key) {
          return (Calculate) super.setKey(key);
        }

        @Override
        public Calculate setOauthToken(java.lang.String oauthToken) {
          return (Calculate) super.setOauthToken(oauthToken);
        }

        @Override
        public Calculate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Calculate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Calculate setQuotaUser(java.lang.String quotaUser) {
          return (Calculate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Calculate setUploadType(java.lang.String uploadType) {
          return (Calculate) super.setUploadType(uploadType);
        }

        @Override
        public Calculate setUploadProtocol(java.lang.String uploadProtocol) {
          return (Calculate) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
         * organizations/{organization}/webSecurityScannerSettings *
         * folders/{folder}/webSecurityScannerSettings *
         * projects/{project}/webSecurityScannerSettings
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
       organizations/{organization}/webSecurityScannerSettings *
       folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
         * organizations/{organization}/webSecurityScannerSettings *
         * folders/{folder}/webSecurityScannerSettings *
         * projects/{project}/webSecurityScannerSettings
         */
        public Calculate setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/webSecurityScannerSettings$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Calculate set(String parameterName, Object value) {
          return (Calculate) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
   *   {@code SecurityCommandCenter.Projects.List request = securitycenter.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * Get the ContainerThreatDetectionSettings resource.
     *
     * Create a request for the method "projects.getContainerThreatDetectionSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetContainerThreatDetectionSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
     *        organizations/{organization}/containerThreatDetectionSettings *
     *        folders/{folder}/containerThreatDetectionSettings *
     *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
     *        on}/clusters/{cluster}/containerThreatDetectionSettings
     * @return the request
     */
    public GetContainerThreatDetectionSettings getContainerThreatDetectionSettings(java.lang.String name) throws java.io.IOException {
      GetContainerThreatDetectionSettings result = new GetContainerThreatDetectionSettings(name);
      initialize(result);
      return result;
    }

    public class GetContainerThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/containerThreatDetectionSettings$");

      /**
       * Get the ContainerThreatDetectionSettings resource.
       *
       * Create a request for the method "projects.getContainerThreatDetectionSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetContainerThreatDetectionSettings#execute()} method to
       * invoke the remote operation. <p> {@link GetContainerThreatDetectionSettings#initialize(com.goog
       * le.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
       * this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
     *        organizations/{organization}/containerThreatDetectionSettings *
     *        folders/{folder}/containerThreatDetectionSettings *
     *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
     *        on}/clusters/{cluster}/containerThreatDetectionSettings
       * @since 1.13
       */
      protected GetContainerThreatDetectionSettings(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/containerThreatDetectionSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetContainerThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetContainerThreatDetectionSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetContainerThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
        return (GetContainerThreatDetectionSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetContainerThreatDetectionSettings setAlt(java.lang.String alt) {
        return (GetContainerThreatDetectionSettings) super.setAlt(alt);
      }

      @Override
      public GetContainerThreatDetectionSettings setCallback(java.lang.String callback) {
        return (GetContainerThreatDetectionSettings) super.setCallback(callback);
      }

      @Override
      public GetContainerThreatDetectionSettings setFields(java.lang.String fields) {
        return (GetContainerThreatDetectionSettings) super.setFields(fields);
      }

      @Override
      public GetContainerThreatDetectionSettings setKey(java.lang.String key) {
        return (GetContainerThreatDetectionSettings) super.setKey(key);
      }

      @Override
      public GetContainerThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
        return (GetContainerThreatDetectionSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetContainerThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetContainerThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetContainerThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetContainerThreatDetectionSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetContainerThreatDetectionSettings setUploadType(java.lang.String uploadType) {
        return (GetContainerThreatDetectionSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetContainerThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetContainerThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
       * organizations/{organization}/containerThreatDetectionSettings *
       * folders/{folder}/containerThreatDetectionSettings *
       * projects/{project}/containerThreatDetectionSettings *
       * projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
     organizations/{organization}/containerThreatDetectionSettings *
     folders/{folder}/containerThreatDetectionSettings *
     projects/{project}/containerThreatDetectionSettings *
     projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
       * organizations/{organization}/containerThreatDetectionSettings *
       * folders/{folder}/containerThreatDetectionSettings *
       * projects/{project}/containerThreatDetectionSettings *
       * projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      public GetContainerThreatDetectionSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/containerThreatDetectionSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetContainerThreatDetectionSettings set(String parameterName, Object value) {
        return (GetContainerThreatDetectionSettings) super.set(parameterName, value);
      }
    }
    /**
     * Get the EventThreatDetectionSettings resource.
     *
     * Create a request for the method "projects.getEventThreatDetectionSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetEventThreatDetectionSettings#execute()} method to invoke
     * the remote operation.
     *
     * @param name Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
     *        organizations/{organization}/eventThreatDetectionSettings *
     *        folders/{folder}/eventThreatDetectionSettings *
     *        projects/{project}/eventThreatDetectionSettings
     * @return the request
     */
    public GetEventThreatDetectionSettings getEventThreatDetectionSettings(java.lang.String name) throws java.io.IOException {
      GetEventThreatDetectionSettings result = new GetEventThreatDetectionSettings(name);
      initialize(result);
      return result;
    }

    public class GetEventThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/eventThreatDetectionSettings$");

      /**
       * Get the EventThreatDetectionSettings resource.
       *
       * Create a request for the method "projects.getEventThreatDetectionSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetEventThreatDetectionSettings#execute()} method to
       * invoke the remote operation. <p> {@link GetEventThreatDetectionSettings#initialize(com.google.a
       * pi.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this
       * instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
     *        organizations/{organization}/eventThreatDetectionSettings *
     *        folders/{folder}/eventThreatDetectionSettings *
     *        projects/{project}/eventThreatDetectionSettings
       * @since 1.13
       */
      protected GetEventThreatDetectionSettings(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/eventThreatDetectionSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetEventThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetEventThreatDetectionSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetEventThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
        return (GetEventThreatDetectionSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetEventThreatDetectionSettings setAlt(java.lang.String alt) {
        return (GetEventThreatDetectionSettings) super.setAlt(alt);
      }

      @Override
      public GetEventThreatDetectionSettings setCallback(java.lang.String callback) {
        return (GetEventThreatDetectionSettings) super.setCallback(callback);
      }

      @Override
      public GetEventThreatDetectionSettings setFields(java.lang.String fields) {
        return (GetEventThreatDetectionSettings) super.setFields(fields);
      }

      @Override
      public GetEventThreatDetectionSettings setKey(java.lang.String key) {
        return (GetEventThreatDetectionSettings) super.setKey(key);
      }

      @Override
      public GetEventThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
        return (GetEventThreatDetectionSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetEventThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetEventThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetEventThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetEventThreatDetectionSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetEventThreatDetectionSettings setUploadType(java.lang.String uploadType) {
        return (GetEventThreatDetectionSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetEventThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetEventThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
       * organizations/{organization}/eventThreatDetectionSettings *
       * folders/{folder}/eventThreatDetectionSettings *
       * projects/{project}/eventThreatDetectionSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
     organizations/{organization}/eventThreatDetectionSettings *
     folders/{folder}/eventThreatDetectionSettings * projects/{project}/eventThreatDetectionSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the EventThreatDetectionSettings to retrieve. Formats: *
       * organizations/{organization}/eventThreatDetectionSettings *
       * folders/{folder}/eventThreatDetectionSettings *
       * projects/{project}/eventThreatDetectionSettings
       */
      public GetEventThreatDetectionSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/eventThreatDetectionSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetEventThreatDetectionSettings set(String parameterName, Object value) {
        return (GetEventThreatDetectionSettings) super.set(parameterName, value);
      }
    }
    /**
     * Get the SecurityHealthAnalyticsSettings resource.
     *
     * Create a request for the method "projects.getSecurityHealthAnalyticsSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetSecurityHealthAnalyticsSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
     *        organizations/{organization}/securityHealthAnalyticsSettings *
     *        folders/{folder}/securityHealthAnalyticsSettings *
     *        projects/{project}/securityHealthAnalyticsSettings
     * @return the request
     */
    public GetSecurityHealthAnalyticsSettings getSecurityHealthAnalyticsSettings(java.lang.String name) throws java.io.IOException {
      GetSecurityHealthAnalyticsSettings result = new GetSecurityHealthAnalyticsSettings(name);
      initialize(result);
      return result;
    }

    public class GetSecurityHealthAnalyticsSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/securityHealthAnalyticsSettings$");

      /**
       * Get the SecurityHealthAnalyticsSettings resource.
       *
       * Create a request for the method "projects.getSecurityHealthAnalyticsSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetSecurityHealthAnalyticsSettings#execute()} method to
       * invoke the remote operation. <p> {@link GetSecurityHealthAnalyticsSettings#initialize(com.googl
       * e.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
       * this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
     *        organizations/{organization}/securityHealthAnalyticsSettings *
     *        folders/{folder}/securityHealthAnalyticsSettings *
     *        projects/{project}/securityHealthAnalyticsSettings
       * @since 1.13
       */
      protected GetSecurityHealthAnalyticsSettings(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/securityHealthAnalyticsSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetSecurityHealthAnalyticsSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetSecurityHealthAnalyticsSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setAccessToken(java.lang.String accessToken) {
        return (GetSecurityHealthAnalyticsSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setAlt(java.lang.String alt) {
        return (GetSecurityHealthAnalyticsSettings) super.setAlt(alt);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setCallback(java.lang.String callback) {
        return (GetSecurityHealthAnalyticsSettings) super.setCallback(callback);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setFields(java.lang.String fields) {
        return (GetSecurityHealthAnalyticsSettings) super.setFields(fields);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setKey(java.lang.String key) {
        return (GetSecurityHealthAnalyticsSettings) super.setKey(key);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setOauthToken(java.lang.String oauthToken) {
        return (GetSecurityHealthAnalyticsSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetSecurityHealthAnalyticsSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetSecurityHealthAnalyticsSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setUploadType(java.lang.String uploadType) {
        return (GetSecurityHealthAnalyticsSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetSecurityHealthAnalyticsSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetSecurityHealthAnalyticsSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
       * organizations/{organization}/securityHealthAnalyticsSettings *
       * folders/{folder}/securityHealthAnalyticsSettings *
       * projects/{project}/securityHealthAnalyticsSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
     organizations/{organization}/securityHealthAnalyticsSettings *
     folders/{folder}/securityHealthAnalyticsSettings *
     projects/{project}/securityHealthAnalyticsSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the SecurityHealthAnalyticsSettings to retrieve. Formats: *
       * organizations/{organization}/securityHealthAnalyticsSettings *
       * folders/{folder}/securityHealthAnalyticsSettings *
       * projects/{project}/securityHealthAnalyticsSettings
       */
      public GetSecurityHealthAnalyticsSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/securityHealthAnalyticsSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetSecurityHealthAnalyticsSettings set(String parameterName, Object value) {
        return (GetSecurityHealthAnalyticsSettings) super.set(parameterName, value);
      }
    }
    /**
     * Get the WebSecurityScannerSettings resource.
     *
     * Create a request for the method "projects.getWebSecurityScannerSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link GetWebSecurityScannerSettings#execute()} method to invoke
     * the remote operation.
     *
     * @param name Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
     *        organizations/{organization}/webSecurityScannerSettings *
     *        folders/{folder}/webSecurityScannerSettings *
     *        projects/{project}/webSecurityScannerSettings
     * @return the request
     */
    public GetWebSecurityScannerSettings getWebSecurityScannerSettings(java.lang.String name) throws java.io.IOException {
      GetWebSecurityScannerSettings result = new GetWebSecurityScannerSettings(name);
      initialize(result);
      return result;
    }

    public class GetWebSecurityScannerSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/webSecurityScannerSettings$");

      /**
       * Get the WebSecurityScannerSettings resource.
       *
       * Create a request for the method "projects.getWebSecurityScannerSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link GetWebSecurityScannerSettings#execute()} method to invoke
       * the remote operation. <p> {@link GetWebSecurityScannerSettings#initialize(com.google.api.client
       * .googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @param name Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
     *        organizations/{organization}/webSecurityScannerSettings *
     *        folders/{folder}/webSecurityScannerSettings *
     *        projects/{project}/webSecurityScannerSettings
       * @since 1.13
       */
      protected GetWebSecurityScannerSettings(java.lang.String name) {
        super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/webSecurityScannerSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetWebSecurityScannerSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetWebSecurityScannerSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetWebSecurityScannerSettings setAccessToken(java.lang.String accessToken) {
        return (GetWebSecurityScannerSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetWebSecurityScannerSettings setAlt(java.lang.String alt) {
        return (GetWebSecurityScannerSettings) super.setAlt(alt);
      }

      @Override
      public GetWebSecurityScannerSettings setCallback(java.lang.String callback) {
        return (GetWebSecurityScannerSettings) super.setCallback(callback);
      }

      @Override
      public GetWebSecurityScannerSettings setFields(java.lang.String fields) {
        return (GetWebSecurityScannerSettings) super.setFields(fields);
      }

      @Override
      public GetWebSecurityScannerSettings setKey(java.lang.String key) {
        return (GetWebSecurityScannerSettings) super.setKey(key);
      }

      @Override
      public GetWebSecurityScannerSettings setOauthToken(java.lang.String oauthToken) {
        return (GetWebSecurityScannerSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetWebSecurityScannerSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetWebSecurityScannerSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetWebSecurityScannerSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetWebSecurityScannerSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetWebSecurityScannerSettings setUploadType(java.lang.String uploadType) {
        return (GetWebSecurityScannerSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetWebSecurityScannerSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetWebSecurityScannerSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
       * organizations/{organization}/webSecurityScannerSettings *
       * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
     organizations/{organization}/webSecurityScannerSettings *
     folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. The name of the WebSecurityScannerSettings to retrieve. Formats: *
       * organizations/{organization}/webSecurityScannerSettings *
       * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      public GetWebSecurityScannerSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/webSecurityScannerSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetWebSecurityScannerSettings set(String parameterName, Object value) {
        return (GetWebSecurityScannerSettings) super.set(parameterName, value);
      }
    }
    /**
     * Update the ContainerThreatDetectionSettings resource.
     *
     * Create a request for the method "projects.updateContainerThreatDetectionSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link UpdateContainerThreatDetectionSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name The resource name of the ContainerThreatDetectionSettings. Formats: *
     *        organizations/{organization}/containerThreatDetectionSettings *
     *        folders/{folder}/containerThreatDetectionSettings *
     *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
     *        on}/clusters/{cluster}/containerThreatDetectionSettings
     * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings}
     * @return the request
     */
    public UpdateContainerThreatDetectionSettings updateContainerThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings content) throws java.io.IOException {
      UpdateContainerThreatDetectionSettings result = new UpdateContainerThreatDetectionSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateContainerThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/containerThreatDetectionSettings$");

      /**
       * Update the ContainerThreatDetectionSettings resource.
       *
       * Create a request for the method "projects.updateContainerThreatDetectionSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link UpdateContainerThreatDetectionSettings#execute()} method
       * to invoke the remote operation. <p> {@link UpdateContainerThreatDetectionSettings#initialize(co
       * m.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to
       * initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the ContainerThreatDetectionSettings. Formats: *
     *        organizations/{organization}/containerThreatDetectionSettings *
     *        folders/{folder}/containerThreatDetectionSettings *
     *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
     *        on}/clusters/{cluster}/containerThreatDetectionSettings
       * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings}
       * @since 1.13
       */
      protected UpdateContainerThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings content) {
        super(SecurityCommandCenter.this, "PATCH", REST_PATH, content, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/containerThreatDetectionSettings$");
        }
      }

      @Override
      public UpdateContainerThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateContainerThreatDetectionSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateContainerThreatDetectionSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setAlt(java.lang.String alt) {
        return (UpdateContainerThreatDetectionSettings) super.setAlt(alt);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setCallback(java.lang.String callback) {
        return (UpdateContainerThreatDetectionSettings) super.setCallback(callback);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setFields(java.lang.String fields) {
        return (UpdateContainerThreatDetectionSettings) super.setFields(fields);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setKey(java.lang.String key) {
        return (UpdateContainerThreatDetectionSettings) super.setKey(key);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateContainerThreatDetectionSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateContainerThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateContainerThreatDetectionSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setUploadType(java.lang.String uploadType) {
        return (UpdateContainerThreatDetectionSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateContainerThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateContainerThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the ContainerThreatDetectionSettings. Formats: *
       * organizations/{organization}/containerThreatDetectionSettings *
       * folders/{folder}/containerThreatDetectionSettings *
       * projects/{project}/containerThreatDetectionSettings *
       * projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the ContainerThreatDetectionSettings. Formats: *
     organizations/{organization}/containerThreatDetectionSettings *
     folders/{folder}/containerThreatDetectionSettings *
     projects/{project}/containerThreatDetectionSettings *
     projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the ContainerThreatDetectionSettings. Formats: *
       * organizations/{organization}/containerThreatDetectionSettings *
       * folders/{folder}/containerThreatDetectionSettings *
       * projects/{project}/containerThreatDetectionSettings *
       * projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
       */
      public UpdateContainerThreatDetectionSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/containerThreatDetectionSettings$");
        }
        this.name = name;
        return this;
      }

      /** The list of fields to be updated. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** The list of fields to be updated.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** The list of fields to be updated. */
      public UpdateContainerThreatDetectionSettings setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateContainerThreatDetectionSettings set(String parameterName, Object value) {
        return (UpdateContainerThreatDetectionSettings) super.set(parameterName, value);
      }
    }
    /**
     * Update the EventThreatDetectionSettings resource.
     *
     * Create a request for the method "projects.updateEventThreatDetectionSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link UpdateEventThreatDetectionSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name The resource name of the EventThreatDetectionSettings. Formats: *
     *        organizations/{organization}/eventThreatDetectionSettings *
     *        folders/{folder}/eventThreatDetectionSettings *
     *        projects/{project}/eventThreatDetectionSettings
     * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings}
     * @return the request
     */
    public UpdateEventThreatDetectionSettings updateEventThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings content) throws java.io.IOException {
      UpdateEventThreatDetectionSettings result = new UpdateEventThreatDetectionSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateEventThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/eventThreatDetectionSettings$");

      /**
       * Update the EventThreatDetectionSettings resource.
       *
       * Create a request for the method "projects.updateEventThreatDetectionSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link UpdateEventThreatDetectionSettings#execute()} method to
       * invoke the remote operation. <p> {@link UpdateEventThreatDetectionSettings#initialize(com.googl
       * e.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
       * this instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the EventThreatDetectionSettings. Formats: *
     *        organizations/{organization}/eventThreatDetectionSettings *
     *        folders/{folder}/eventThreatDetectionSettings *
     *        projects/{project}/eventThreatDetectionSettings
       * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings}
       * @since 1.13
       */
      protected UpdateEventThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings content) {
        super(SecurityCommandCenter.this, "PATCH", REST_PATH, content, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/eventThreatDetectionSettings$");
        }
      }

      @Override
      public UpdateEventThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateEventThreatDetectionSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateEventThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateEventThreatDetectionSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateEventThreatDetectionSettings setAlt(java.lang.String alt) {
        return (UpdateEventThreatDetectionSettings) super.setAlt(alt);
      }

      @Override
      public UpdateEventThreatDetectionSettings setCallback(java.lang.String callback) {
        return (UpdateEventThreatDetectionSettings) super.setCallback(callback);
      }

      @Override
      public UpdateEventThreatDetectionSettings setFields(java.lang.String fields) {
        return (UpdateEventThreatDetectionSettings) super.setFields(fields);
      }

      @Override
      public UpdateEventThreatDetectionSettings setKey(java.lang.String key) {
        return (UpdateEventThreatDetectionSettings) super.setKey(key);
      }

      @Override
      public UpdateEventThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateEventThreatDetectionSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateEventThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateEventThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateEventThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateEventThreatDetectionSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateEventThreatDetectionSettings setUploadType(java.lang.String uploadType) {
        return (UpdateEventThreatDetectionSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateEventThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateEventThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the EventThreatDetectionSettings. Formats: *
       * organizations/{organization}/eventThreatDetectionSettings *
       * folders/{folder}/eventThreatDetectionSettings *
       * projects/{project}/eventThreatDetectionSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the EventThreatDetectionSettings. Formats: *
     organizations/{organization}/eventThreatDetectionSettings *
     folders/{folder}/eventThreatDetectionSettings * projects/{project}/eventThreatDetectionSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the EventThreatDetectionSettings. Formats: *
       * organizations/{organization}/eventThreatDetectionSettings *
       * folders/{folder}/eventThreatDetectionSettings *
       * projects/{project}/eventThreatDetectionSettings
       */
      public UpdateEventThreatDetectionSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/eventThreatDetectionSettings$");
        }
        this.name = name;
        return this;
      }

      /** The list of fields to be updated. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** The list of fields to be updated.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** The list of fields to be updated. */
      public UpdateEventThreatDetectionSettings setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateEventThreatDetectionSettings set(String parameterName, Object value) {
        return (UpdateEventThreatDetectionSettings) super.set(parameterName, value);
      }
    }
    /**
     * Update the SecurityHealthAnalyticsSettings resource.
     *
     * Create a request for the method "projects.updateSecurityHealthAnalyticsSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link UpdateSecurityHealthAnalyticsSettings#execute()} method to
     * invoke the remote operation.
     *
     * @param name The resource name of the SecurityHealthAnalyticsSettings. Formats: *
     *        organizations/{organization}/securityHealthAnalyticsSettings *
     *        folders/{folder}/securityHealthAnalyticsSettings *
     *        projects/{project}/securityHealthAnalyticsSettings
     * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings}
     * @return the request
     */
    public UpdateSecurityHealthAnalyticsSettings updateSecurityHealthAnalyticsSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings content) throws java.io.IOException {
      UpdateSecurityHealthAnalyticsSettings result = new UpdateSecurityHealthAnalyticsSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateSecurityHealthAnalyticsSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/securityHealthAnalyticsSettings$");

      /**
       * Update the SecurityHealthAnalyticsSettings resource.
       *
       * Create a request for the method "projects.updateSecurityHealthAnalyticsSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link UpdateSecurityHealthAnalyticsSettings#execute()} method to
       * invoke the remote operation. <p> {@link UpdateSecurityHealthAnalyticsSettings#initialize(com.go
       * ogle.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
       * this instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the SecurityHealthAnalyticsSettings. Formats: *
     *        organizations/{organization}/securityHealthAnalyticsSettings *
     *        folders/{folder}/securityHealthAnalyticsSettings *
     *        projects/{project}/securityHealthAnalyticsSettings
       * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings}
       * @since 1.13
       */
      protected UpdateSecurityHealthAnalyticsSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings content) {
        super(SecurityCommandCenter.this, "PATCH", REST_PATH, content, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/securityHealthAnalyticsSettings$");
        }
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateSecurityHealthAnalyticsSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setAlt(java.lang.String alt) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setAlt(alt);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setCallback(java.lang.String callback) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setCallback(callback);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setFields(java.lang.String fields) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setFields(fields);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setKey(java.lang.String key) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setKey(key);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setUploadType(java.lang.String uploadType) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateSecurityHealthAnalyticsSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the SecurityHealthAnalyticsSettings. Formats: *
       * organizations/{organization}/securityHealthAnalyticsSettings *
       * folders/{folder}/securityHealthAnalyticsSettings *
       * projects/{project}/securityHealthAnalyticsSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the SecurityHealthAnalyticsSettings. Formats: *
     organizations/{organization}/securityHealthAnalyticsSettings *
     folders/{folder}/securityHealthAnalyticsSettings *
     projects/{project}/securityHealthAnalyticsSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the SecurityHealthAnalyticsSettings. Formats: *
       * organizations/{organization}/securityHealthAnalyticsSettings *
       * folders/{folder}/securityHealthAnalyticsSettings *
       * projects/{project}/securityHealthAnalyticsSettings
       */
      public UpdateSecurityHealthAnalyticsSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/securityHealthAnalyticsSettings$");
        }
        this.name = name;
        return this;
      }

      /** The list of fields to be updated. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** The list of fields to be updated.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** The list of fields to be updated. */
      public UpdateSecurityHealthAnalyticsSettings setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateSecurityHealthAnalyticsSettings set(String parameterName, Object value) {
        return (UpdateSecurityHealthAnalyticsSettings) super.set(parameterName, value);
      }
    }
    /**
     * Update the WebSecurityScannerSettings resource.
     *
     * Create a request for the method "projects.updateWebSecurityScannerSettings".
     *
     * This request holds the parameters needed by the securitycenter server.  After setting any
     * optional parameters, call the {@link UpdateWebSecurityScannerSettings#execute()} method to invoke
     * the remote operation.
     *
     * @param name The resource name of the WebSecurityScannerSettings. Formats: *
     *        organizations/{organization}/webSecurityScannerSettings *
     *        folders/{folder}/webSecurityScannerSettings *
     *        projects/{project}/webSecurityScannerSettings
     * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings}
     * @return the request
     */
    public UpdateWebSecurityScannerSettings updateWebSecurityScannerSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings content) throws java.io.IOException {
      UpdateWebSecurityScannerSettings result = new UpdateWebSecurityScannerSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateWebSecurityScannerSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings> {

      private static final String REST_PATH = "v1beta2/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/webSecurityScannerSettings$");

      /**
       * Update the WebSecurityScannerSettings resource.
       *
       * Create a request for the method "projects.updateWebSecurityScannerSettings".
       *
       * This request holds the parameters needed by the the securitycenter server.  After setting any
       * optional parameters, call the {@link UpdateWebSecurityScannerSettings#execute()} method to
       * invoke the remote operation. <p> {@link UpdateWebSecurityScannerSettings#initialize(com.google.
       * api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this
       * instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the WebSecurityScannerSettings. Formats: *
     *        organizations/{organization}/webSecurityScannerSettings *
     *        folders/{folder}/webSecurityScannerSettings *
     *        projects/{project}/webSecurityScannerSettings
       * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings}
       * @since 1.13
       */
      protected UpdateWebSecurityScannerSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings content) {
        super(SecurityCommandCenter.this, "PATCH", REST_PATH, content, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/webSecurityScannerSettings$");
        }
      }

      @Override
      public UpdateWebSecurityScannerSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateWebSecurityScannerSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateWebSecurityScannerSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateWebSecurityScannerSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateWebSecurityScannerSettings setAlt(java.lang.String alt) {
        return (UpdateWebSecurityScannerSettings) super.setAlt(alt);
      }

      @Override
      public UpdateWebSecurityScannerSettings setCallback(java.lang.String callback) {
        return (UpdateWebSecurityScannerSettings) super.setCallback(callback);
      }

      @Override
      public UpdateWebSecurityScannerSettings setFields(java.lang.String fields) {
        return (UpdateWebSecurityScannerSettings) super.setFields(fields);
      }

      @Override
      public UpdateWebSecurityScannerSettings setKey(java.lang.String key) {
        return (UpdateWebSecurityScannerSettings) super.setKey(key);
      }

      @Override
      public UpdateWebSecurityScannerSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateWebSecurityScannerSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateWebSecurityScannerSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateWebSecurityScannerSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateWebSecurityScannerSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateWebSecurityScannerSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateWebSecurityScannerSettings setUploadType(java.lang.String uploadType) {
        return (UpdateWebSecurityScannerSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateWebSecurityScannerSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateWebSecurityScannerSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the WebSecurityScannerSettings. Formats: *
       * organizations/{organization}/webSecurityScannerSettings *
       * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the WebSecurityScannerSettings. Formats: *
     organizations/{organization}/webSecurityScannerSettings *
     folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the WebSecurityScannerSettings. Formats: *
       * organizations/{organization}/webSecurityScannerSettings *
       * folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
       */
      public UpdateWebSecurityScannerSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/webSecurityScannerSettings$");
        }
        this.name = name;
        return this;
      }

      /** The list of fields to be updated. */
      @com.google.api.client.util.Key
      private String updateMask;

      /** The list of fields to be updated.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /** The list of fields to be updated. */
      public UpdateWebSecurityScannerSettings setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public UpdateWebSecurityScannerSettings set(String parameterName, Object value) {
        return (UpdateWebSecurityScannerSettings) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the ContainerThreatDetectionSettings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
     *   {@code SecurityCommandCenter.ContainerThreatDetectionSettings.List request = securitycenter.containerThreatDetectionSettings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public ContainerThreatDetectionSettings containerThreatDetectionSettings() {
      return new ContainerThreatDetectionSettings();
    }

    /**
     * The "containerThreatDetectionSettings" collection of methods.
     */
    public class ContainerThreatDetectionSettings {

      /**
       * Calculates the effective ContainerThreatDetectionSettings based on its level in the resource
       * hierarchy and its settings.
       *
       * Create a request for the method "containerThreatDetectionSettings.calculate".
       *
       * This request holds the parameters needed by the securitycenter server.  After setting any
       * optional parameters, call the {@link Calculate#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
       *        organizations/{organization}/containerThreatDetectionSettings *
       *        folders/{folder}/containerThreatDetectionSettings *
       *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
       *        on}/clusters/{cluster}/containerThreatDetectionSettings
       * @return the request
       */
      public Calculate calculate(java.lang.String name) throws java.io.IOException {
        Calculate result = new Calculate(name);
        initialize(result);
        return result;
      }

      public class Calculate extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings> {

        private static final String REST_PATH = "v1beta2/{+name}:calculate";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/containerThreatDetectionSettings$");

        /**
         * Calculates the effective ContainerThreatDetectionSettings based on its level in the resource
         * hierarchy and its settings.
         *
         * Create a request for the method "containerThreatDetectionSettings.calculate".
         *
         * This request holds the parameters needed by the the securitycenter server.  After setting any
         * optional parameters, call the {@link Calculate#execute()} method to invoke the remote
         * operation. <p> {@link
         * Calculate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
       *        organizations/{organization}/containerThreatDetectionSettings *
       *        folders/{folder}/containerThreatDetectionSettings *
       *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
       *        on}/clusters/{cluster}/containerThreatDetectionSettings
         * @since 1.13
         */
        protected Calculate(java.lang.String name) {
          super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/containerThreatDetectionSettings$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Calculate set$Xgafv(java.lang.String $Xgafv) {
          return (Calculate) super.set$Xgafv($Xgafv);
        }

        @Override
        public Calculate setAccessToken(java.lang.String accessToken) {
          return (Calculate) super.setAccessToken(accessToken);
        }

        @Override
        public Calculate setAlt(java.lang.String alt) {
          return (Calculate) super.setAlt(alt);
        }

        @Override
        public Calculate setCallback(java.lang.String callback) {
          return (Calculate) super.setCallback(callback);
        }

        @Override
        public Calculate setFields(java.lang.String fields) {
          return (Calculate) super.setFields(fields);
        }

        @Override
        public Calculate setKey(java.lang.String key) {
          return (Calculate) super.setKey(key);
        }

        @Override
        public Calculate setOauthToken(java.lang.String oauthToken) {
          return (Calculate) super.setOauthToken(oauthToken);
        }

        @Override
        public Calculate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Calculate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Calculate setQuotaUser(java.lang.String quotaUser) {
          return (Calculate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Calculate setUploadType(java.lang.String uploadType) {
          return (Calculate) super.setUploadType(uploadType);
        }

        @Override
        public Calculate setUploadProtocol(java.lang.String uploadProtocol) {
          return (Calculate) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
         * organizations/{organization}/containerThreatDetectionSettings *
         * folders/{folder}/containerThreatDetectionSettings *
         * projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locat
         * ion}/clusters/{cluster}/containerThreatDetectionSettings
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
       organizations/{organization}/containerThreatDetectionSettings *
       folders/{folder}/containerThreatDetectionSettings *
       projects/{project}/containerThreatDetectionSettings *
       projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
         * organizations/{organization}/containerThreatDetectionSettings *
         * folders/{folder}/containerThreatDetectionSettings *
         * projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locat
         * ion}/clusters/{cluster}/containerThreatDetectionSettings
         */
        public Calculate setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/containerThreatDetectionSettings$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Calculate set(String parameterName, Object value) {
          return (Calculate) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the EventThreatDetectionSettings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
     *   {@code SecurityCommandCenter.EventThreatDetectionSettings.List request = securitycenter.eventThreatDetectionSettings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public EventThreatDetectionSettings eventThreatDetectionSettings() {
      return new EventThreatDetectionSettings();
    }

    /**
     * The "eventThreatDetectionSettings" collection of methods.
     */
    public class EventThreatDetectionSettings {

      /**
       * Calculates the effective EventThreatDetectionSettings based on its level in the resource
       * hierarchy and its settings.
       *
       * Create a request for the method "eventThreatDetectionSettings.calculate".
       *
       * This request holds the parameters needed by the securitycenter server.  After setting any
       * optional parameters, call the {@link Calculate#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
       *        organizations/{organization}/eventThreatDetectionSettings *
       *        folders/{folder}/eventThreatDetectionSettings *
       *        projects/{project}/eventThreatDetectionSettings
       * @return the request
       */
      public Calculate calculate(java.lang.String name) throws java.io.IOException {
        Calculate result = new Calculate(name);
        initialize(result);
        return result;
      }

      public class Calculate extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings> {

        private static final String REST_PATH = "v1beta2/{+name}:calculate";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/eventThreatDetectionSettings$");

        /**
         * Calculates the effective EventThreatDetectionSettings based on its level in the resource
         * hierarchy and its settings.
         *
         * Create a request for the method "eventThreatDetectionSettings.calculate".
         *
         * This request holds the parameters needed by the the securitycenter server.  After setting any
         * optional parameters, call the {@link Calculate#execute()} method to invoke the remote
         * operation. <p> {@link
         * Calculate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
       *        organizations/{organization}/eventThreatDetectionSettings *
       *        folders/{folder}/eventThreatDetectionSettings *
       *        projects/{project}/eventThreatDetectionSettings
         * @since 1.13
         */
        protected Calculate(java.lang.String name) {
          super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.EventThreatDetectionSettings.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/eventThreatDetectionSettings$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Calculate set$Xgafv(java.lang.String $Xgafv) {
          return (Calculate) super.set$Xgafv($Xgafv);
        }

        @Override
        public Calculate setAccessToken(java.lang.String accessToken) {
          return (Calculate) super.setAccessToken(accessToken);
        }

        @Override
        public Calculate setAlt(java.lang.String alt) {
          return (Calculate) super.setAlt(alt);
        }

        @Override
        public Calculate setCallback(java.lang.String callback) {
          return (Calculate) super.setCallback(callback);
        }

        @Override
        public Calculate setFields(java.lang.String fields) {
          return (Calculate) super.setFields(fields);
        }

        @Override
        public Calculate setKey(java.lang.String key) {
          return (Calculate) super.setKey(key);
        }

        @Override
        public Calculate setOauthToken(java.lang.String oauthToken) {
          return (Calculate) super.setOauthToken(oauthToken);
        }

        @Override
        public Calculate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Calculate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Calculate setQuotaUser(java.lang.String quotaUser) {
          return (Calculate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Calculate setUploadType(java.lang.String uploadType) {
          return (Calculate) super.setUploadType(uploadType);
        }

        @Override
        public Calculate setUploadProtocol(java.lang.String uploadProtocol) {
          return (Calculate) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
         * organizations/{organization}/eventThreatDetectionSettings *
         * folders/{folder}/eventThreatDetectionSettings *
         * projects/{project}/eventThreatDetectionSettings
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
       organizations/{organization}/eventThreatDetectionSettings *
       folders/{folder}/eventThreatDetectionSettings * projects/{project}/eventThreatDetectionSettings
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the EventThreatDetectionSettings to calculate. Formats: *
         * organizations/{organization}/eventThreatDetectionSettings *
         * folders/{folder}/eventThreatDetectionSettings *
         * projects/{project}/eventThreatDetectionSettings
         */
        public Calculate setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/eventThreatDetectionSettings$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Calculate set(String parameterName, Object value) {
          return (Calculate) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
     *   {@code SecurityCommandCenter.Locations.List request = securitycenter.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * An accessor for creating requests from the Clusters collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
       *   {@code SecurityCommandCenter.Clusters.List request = securitycenter.clusters().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Clusters clusters() {
        return new Clusters();
      }

      /**
       * The "clusters" collection of methods.
       */
      public class Clusters {

        /**
         * Get the ContainerThreatDetectionSettings resource.
         *
         * Create a request for the method "clusters.getContainerThreatDetectionSettings".
         *
         * This request holds the parameters needed by the securitycenter server.  After setting any
         * optional parameters, call the {@link GetContainerThreatDetectionSettings#execute()} method to
         * invoke the remote operation.
         *
         * @param name Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
         *        organizations/{organization}/containerThreatDetectionSettings *
         *        folders/{folder}/containerThreatDetectionSettings *
         *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
         *        on}/clusters/{cluster}/containerThreatDetectionSettings
         * @return the request
         */
        public GetContainerThreatDetectionSettings getContainerThreatDetectionSettings(java.lang.String name) throws java.io.IOException {
          GetContainerThreatDetectionSettings result = new GetContainerThreatDetectionSettings(name);
          initialize(result);
          return result;
        }

        public class GetContainerThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings> {

          private static final String REST_PATH = "v1beta2/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/clusters/[^/]+/containerThreatDetectionSettings$");

          /**
           * Get the ContainerThreatDetectionSettings resource.
           *
           * Create a request for the method "clusters.getContainerThreatDetectionSettings".
           *
           * This request holds the parameters needed by the the securitycenter server.  After setting any
           * optional parameters, call the {@link GetContainerThreatDetectionSettings#execute()} method to
           * invoke the remote operation. <p> {@link GetContainerThreatDetectionSettings#initialize(com.goog
           * le.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to initialize
           * this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
         *        organizations/{organization}/containerThreatDetectionSettings *
         *        folders/{folder}/containerThreatDetectionSettings *
         *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
         *        on}/clusters/{cluster}/containerThreatDetectionSettings
           * @since 1.13
           */
          protected GetContainerThreatDetectionSettings(java.lang.String name) {
            super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/clusters/[^/]+/containerThreatDetectionSettings$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public GetContainerThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
            return (GetContainerThreatDetectionSettings) super.set$Xgafv($Xgafv);
          }

          @Override
          public GetContainerThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
            return (GetContainerThreatDetectionSettings) super.setAccessToken(accessToken);
          }

          @Override
          public GetContainerThreatDetectionSettings setAlt(java.lang.String alt) {
            return (GetContainerThreatDetectionSettings) super.setAlt(alt);
          }

          @Override
          public GetContainerThreatDetectionSettings setCallback(java.lang.String callback) {
            return (GetContainerThreatDetectionSettings) super.setCallback(callback);
          }

          @Override
          public GetContainerThreatDetectionSettings setFields(java.lang.String fields) {
            return (GetContainerThreatDetectionSettings) super.setFields(fields);
          }

          @Override
          public GetContainerThreatDetectionSettings setKey(java.lang.String key) {
            return (GetContainerThreatDetectionSettings) super.setKey(key);
          }

          @Override
          public GetContainerThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
            return (GetContainerThreatDetectionSettings) super.setOauthToken(oauthToken);
          }

          @Override
          public GetContainerThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (GetContainerThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public GetContainerThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
            return (GetContainerThreatDetectionSettings) super.setQuotaUser(quotaUser);
          }

          @Override
          public GetContainerThreatDetectionSettings setUploadType(java.lang.String uploadType) {
            return (GetContainerThreatDetectionSettings) super.setUploadType(uploadType);
          }

          @Override
          public GetContainerThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
            return (GetContainerThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
           * organizations/{organization}/containerThreatDetectionSettings *
           * folders/{folder}/containerThreatDetectionSettings *
           * projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{loc
           * ation}/clusters/{cluster}/containerThreatDetectionSettings
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
         organizations/{organization}/containerThreatDetectionSettings *
         folders/{folder}/containerThreatDetectionSettings *
         projects/{project}/containerThreatDetectionSettings *
         projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the ContainerThreatDetectionSettings to retrieve. Formats: *
           * organizations/{organization}/containerThreatDetectionSettings *
           * folders/{folder}/containerThreatDetectionSettings *
           * projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{loc
           * ation}/clusters/{cluster}/containerThreatDetectionSettings
           */
          public GetContainerThreatDetectionSettings setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/clusters/[^/]+/containerThreatDetectionSettings$");
            }
            this.name = name;
            return this;
          }

          @Override
          public GetContainerThreatDetectionSettings set(String parameterName, Object value) {
            return (GetContainerThreatDetectionSettings) super.set(parameterName, value);
          }
        }
        /**
         * Update the ContainerThreatDetectionSettings resource.
         *
         * Create a request for the method "clusters.updateContainerThreatDetectionSettings".
         *
         * This request holds the parameters needed by the securitycenter server.  After setting any
         * optional parameters, call the {@link UpdateContainerThreatDetectionSettings#execute()} method to
         * invoke the remote operation.
         *
         * @param name The resource name of the ContainerThreatDetectionSettings. Formats: *
         *        organizations/{organization}/containerThreatDetectionSettings *
         *        folders/{folder}/containerThreatDetectionSettings *
         *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
         *        on}/clusters/{cluster}/containerThreatDetectionSettings
         * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings}
         * @return the request
         */
        public UpdateContainerThreatDetectionSettings updateContainerThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings content) throws java.io.IOException {
          UpdateContainerThreatDetectionSettings result = new UpdateContainerThreatDetectionSettings(name, content);
          initialize(result);
          return result;
        }

        public class UpdateContainerThreatDetectionSettings extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings> {

          private static final String REST_PATH = "v1beta2/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/clusters/[^/]+/containerThreatDetectionSettings$");

          /**
           * Update the ContainerThreatDetectionSettings resource.
           *
           * Create a request for the method "clusters.updateContainerThreatDetectionSettings".
           *
           * This request holds the parameters needed by the the securitycenter server.  After setting any
           * optional parameters, call the {@link UpdateContainerThreatDetectionSettings#execute()} method
           * to invoke the remote operation. <p> {@link UpdateContainerThreatDetectionSettings#initialize(co
           * m.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be called to
           * initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The resource name of the ContainerThreatDetectionSettings. Formats: *
         *        organizations/{organization}/containerThreatDetectionSettings *
         *        folders/{folder}/containerThreatDetectionSettings *
         *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
         *        on}/clusters/{cluster}/containerThreatDetectionSettings
           * @param content the {@link com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings}
           * @since 1.13
           */
          protected UpdateContainerThreatDetectionSettings(java.lang.String name, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings content) {
            super(SecurityCommandCenter.this, "PATCH", REST_PATH, content, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/clusters/[^/]+/containerThreatDetectionSettings$");
            }
          }

          @Override
          public UpdateContainerThreatDetectionSettings set$Xgafv(java.lang.String $Xgafv) {
            return (UpdateContainerThreatDetectionSettings) super.set$Xgafv($Xgafv);
          }

          @Override
          public UpdateContainerThreatDetectionSettings setAccessToken(java.lang.String accessToken) {
            return (UpdateContainerThreatDetectionSettings) super.setAccessToken(accessToken);
          }

          @Override
          public UpdateContainerThreatDetectionSettings setAlt(java.lang.String alt) {
            return (UpdateContainerThreatDetectionSettings) super.setAlt(alt);
          }

          @Override
          public UpdateContainerThreatDetectionSettings setCallback(java.lang.String callback) {
            return (UpdateContainerThreatDetectionSettings) super.setCallback(callback);
          }

          @Override
          public UpdateContainerThreatDetectionSettings setFields(java.lang.String fields) {
            return (UpdateContainerThreatDetectionSettings) super.setFields(fields);
          }

          @Override
          public UpdateContainerThreatDetectionSettings setKey(java.lang.String key) {
            return (UpdateContainerThreatDetectionSettings) super.setKey(key);
          }

          @Override
          public UpdateContainerThreatDetectionSettings setOauthToken(java.lang.String oauthToken) {
            return (UpdateContainerThreatDetectionSettings) super.setOauthToken(oauthToken);
          }

          @Override
          public UpdateContainerThreatDetectionSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (UpdateContainerThreatDetectionSettings) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public UpdateContainerThreatDetectionSettings setQuotaUser(java.lang.String quotaUser) {
            return (UpdateContainerThreatDetectionSettings) super.setQuotaUser(quotaUser);
          }

          @Override
          public UpdateContainerThreatDetectionSettings setUploadType(java.lang.String uploadType) {
            return (UpdateContainerThreatDetectionSettings) super.setUploadType(uploadType);
          }

          @Override
          public UpdateContainerThreatDetectionSettings setUploadProtocol(java.lang.String uploadProtocol) {
            return (UpdateContainerThreatDetectionSettings) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the ContainerThreatDetectionSettings. Formats: *
           * organizations/{organization}/containerThreatDetectionSettings *
           * folders/{folder}/containerThreatDetectionSettings *
           * projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{loc
           * ation}/clusters/{cluster}/containerThreatDetectionSettings
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The resource name of the ContainerThreatDetectionSettings. Formats: *
         organizations/{organization}/containerThreatDetectionSettings *
         folders/{folder}/containerThreatDetectionSettings *
         projects/{project}/containerThreatDetectionSettings *
         projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The resource name of the ContainerThreatDetectionSettings. Formats: *
           * organizations/{organization}/containerThreatDetectionSettings *
           * folders/{folder}/containerThreatDetectionSettings *
           * projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{loc
           * ation}/clusters/{cluster}/containerThreatDetectionSettings
           */
          public UpdateContainerThreatDetectionSettings setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/clusters/[^/]+/containerThreatDetectionSettings$");
            }
            this.name = name;
            return this;
          }

          /** The list of fields to be updated. */
          @com.google.api.client.util.Key
          private String updateMask;

          /** The list of fields to be updated.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /** The list of fields to be updated. */
          public UpdateContainerThreatDetectionSettings setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          @Override
          public UpdateContainerThreatDetectionSettings set(String parameterName, Object value) {
            return (UpdateContainerThreatDetectionSettings) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the ContainerThreatDetectionSettings collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
         *   {@code SecurityCommandCenter.ContainerThreatDetectionSettings.List request = securitycenter.containerThreatDetectionSettings().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public ContainerThreatDetectionSettings containerThreatDetectionSettings() {
          return new ContainerThreatDetectionSettings();
        }

        /**
         * The "containerThreatDetectionSettings" collection of methods.
         */
        public class ContainerThreatDetectionSettings {

          /**
           * Calculates the effective ContainerThreatDetectionSettings based on its level in the resource
           * hierarchy and its settings.
           *
           * Create a request for the method "containerThreatDetectionSettings.calculate".
           *
           * This request holds the parameters needed by the securitycenter server.  After setting any
           * optional parameters, call the {@link Calculate#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
           *        organizations/{organization}/containerThreatDetectionSettings *
           *        folders/{folder}/containerThreatDetectionSettings *
           *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
           *        on}/clusters/{cluster}/containerThreatDetectionSettings
           * @return the request
           */
          public Calculate calculate(java.lang.String name) throws java.io.IOException {
            Calculate result = new Calculate(name);
            initialize(result);
            return result;
          }

          public class Calculate extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings> {

            private static final String REST_PATH = "v1beta2/{+name}:calculate";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/clusters/[^/]+/containerThreatDetectionSettings$");

            /**
             * Calculates the effective ContainerThreatDetectionSettings based on its level in the resource
             * hierarchy and its settings.
             *
             * Create a request for the method "containerThreatDetectionSettings.calculate".
             *
             * This request holds the parameters needed by the the securitycenter server.  After setting any
             * optional parameters, call the {@link Calculate#execute()} method to invoke the remote
             * operation. <p> {@link
             * Calculate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
           *        organizations/{organization}/containerThreatDetectionSettings *
           *        folders/{folder}/containerThreatDetectionSettings *
           *        projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{locati
           *        on}/clusters/{cluster}/containerThreatDetectionSettings
             * @since 1.13
             */
            protected Calculate(java.lang.String name) {
              super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.ContainerThreatDetectionSettings.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/clusters/[^/]+/containerThreatDetectionSettings$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Calculate set$Xgafv(java.lang.String $Xgafv) {
              return (Calculate) super.set$Xgafv($Xgafv);
            }

            @Override
            public Calculate setAccessToken(java.lang.String accessToken) {
              return (Calculate) super.setAccessToken(accessToken);
            }

            @Override
            public Calculate setAlt(java.lang.String alt) {
              return (Calculate) super.setAlt(alt);
            }

            @Override
            public Calculate setCallback(java.lang.String callback) {
              return (Calculate) super.setCallback(callback);
            }

            @Override
            public Calculate setFields(java.lang.String fields) {
              return (Calculate) super.setFields(fields);
            }

            @Override
            public Calculate setKey(java.lang.String key) {
              return (Calculate) super.setKey(key);
            }

            @Override
            public Calculate setOauthToken(java.lang.String oauthToken) {
              return (Calculate) super.setOauthToken(oauthToken);
            }

            @Override
            public Calculate setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Calculate) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Calculate setQuotaUser(java.lang.String quotaUser) {
              return (Calculate) super.setQuotaUser(quotaUser);
            }

            @Override
            public Calculate setUploadType(java.lang.String uploadType) {
              return (Calculate) super.setUploadType(uploadType);
            }

            @Override
            public Calculate setUploadProtocol(java.lang.String uploadProtocol) {
              return (Calculate) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
             * organizations/{organization}/containerThreatDetectionSettings *
             * folders/{folder}/containerThreatDetectionSettings *
             * projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{l
             * ocation}/clusters/{cluster}/containerThreatDetectionSettings
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
           organizations/{organization}/containerThreatDetectionSettings *
           folders/{folder}/containerThreatDetectionSettings *
           projects/{project}/containerThreatDetectionSettings *
           projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The name of the ContainerThreatDetectionSettings to calculate. Formats: *
             * organizations/{organization}/containerThreatDetectionSettings *
             * folders/{folder}/containerThreatDetectionSettings *
             * projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{l
             * ocation}/clusters/{cluster}/containerThreatDetectionSettings
             */
            public Calculate setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/clusters/[^/]+/containerThreatDetectionSettings$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Calculate set(String parameterName, Object value) {
              return (Calculate) super.set(parameterName, value);
            }
          }

        }
      }
    }
    /**
     * An accessor for creating requests from the SecurityHealthAnalyticsSettings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
     *   {@code SecurityCommandCenter.SecurityHealthAnalyticsSettings.List request = securitycenter.securityHealthAnalyticsSettings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public SecurityHealthAnalyticsSettings securityHealthAnalyticsSettings() {
      return new SecurityHealthAnalyticsSettings();
    }

    /**
     * The "securityHealthAnalyticsSettings" collection of methods.
     */
    public class SecurityHealthAnalyticsSettings {

      /**
       * Calculates the effective SecurityHealthAnalyticsSettings based on its level in the resource
       * hierarchy and its settings.
       *
       * Create a request for the method "securityHealthAnalyticsSettings.calculate".
       *
       * This request holds the parameters needed by the securitycenter server.  After setting any
       * optional parameters, call the {@link Calculate#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
       *        organizations/{organization}/securityHealthAnalyticsSettings *
       *        folders/{folder}/securityHealthAnalyticsSettings *
       *        projects/{project}/securityHealthAnalyticsSettings
       * @return the request
       */
      public Calculate calculate(java.lang.String name) throws java.io.IOException {
        Calculate result = new Calculate(name);
        initialize(result);
        return result;
      }

      public class Calculate extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings> {

        private static final String REST_PATH = "v1beta2/{+name}:calculate";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/securityHealthAnalyticsSettings$");

        /**
         * Calculates the effective SecurityHealthAnalyticsSettings based on its level in the resource
         * hierarchy and its settings.
         *
         * Create a request for the method "securityHealthAnalyticsSettings.calculate".
         *
         * This request holds the parameters needed by the the securitycenter server.  After setting any
         * optional parameters, call the {@link Calculate#execute()} method to invoke the remote
         * operation. <p> {@link
         * Calculate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
       *        organizations/{organization}/securityHealthAnalyticsSettings *
       *        folders/{folder}/securityHealthAnalyticsSettings *
       *        projects/{project}/securityHealthAnalyticsSettings
         * @since 1.13
         */
        protected Calculate(java.lang.String name) {
          super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.SecurityHealthAnalyticsSettings.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/securityHealthAnalyticsSettings$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Calculate set$Xgafv(java.lang.String $Xgafv) {
          return (Calculate) super.set$Xgafv($Xgafv);
        }

        @Override
        public Calculate setAccessToken(java.lang.String accessToken) {
          return (Calculate) super.setAccessToken(accessToken);
        }

        @Override
        public Calculate setAlt(java.lang.String alt) {
          return (Calculate) super.setAlt(alt);
        }

        @Override
        public Calculate setCallback(java.lang.String callback) {
          return (Calculate) super.setCallback(callback);
        }

        @Override
        public Calculate setFields(java.lang.String fields) {
          return (Calculate) super.setFields(fields);
        }

        @Override
        public Calculate setKey(java.lang.String key) {
          return (Calculate) super.setKey(key);
        }

        @Override
        public Calculate setOauthToken(java.lang.String oauthToken) {
          return (Calculate) super.setOauthToken(oauthToken);
        }

        @Override
        public Calculate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Calculate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Calculate setQuotaUser(java.lang.String quotaUser) {
          return (Calculate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Calculate setUploadType(java.lang.String uploadType) {
          return (Calculate) super.setUploadType(uploadType);
        }

        @Override
        public Calculate setUploadProtocol(java.lang.String uploadProtocol) {
          return (Calculate) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
         * organizations/{organization}/securityHealthAnalyticsSettings *
         * folders/{folder}/securityHealthAnalyticsSettings *
         * projects/{project}/securityHealthAnalyticsSettings
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
       organizations/{organization}/securityHealthAnalyticsSettings *
       folders/{folder}/securityHealthAnalyticsSettings *
       projects/{project}/securityHealthAnalyticsSettings
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the SecurityHealthAnalyticsSettings to calculate. Formats: *
         * organizations/{organization}/securityHealthAnalyticsSettings *
         * folders/{folder}/securityHealthAnalyticsSettings *
         * projects/{project}/securityHealthAnalyticsSettings
         */
        public Calculate setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/securityHealthAnalyticsSettings$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Calculate set(String parameterName, Object value) {
          return (Calculate) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the WebSecurityScannerSettings collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code SecurityCommandCenter securitycenter = new SecurityCommandCenter(...);}
     *   {@code SecurityCommandCenter.WebSecurityScannerSettings.List request = securitycenter.webSecurityScannerSettings().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public WebSecurityScannerSettings webSecurityScannerSettings() {
      return new WebSecurityScannerSettings();
    }

    /**
     * The "webSecurityScannerSettings" collection of methods.
     */
    public class WebSecurityScannerSettings {

      /**
       * Calculates the effective WebSecurityScannerSettings based on its level in the resource hierarchy
       * and its settings.
       *
       * Create a request for the method "webSecurityScannerSettings.calculate".
       *
       * This request holds the parameters needed by the securitycenter server.  After setting any
       * optional parameters, call the {@link Calculate#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
       *        organizations/{organization}/webSecurityScannerSettings *
       *        folders/{folder}/webSecurityScannerSettings *
       *        projects/{project}/webSecurityScannerSettings
       * @return the request
       */
      public Calculate calculate(java.lang.String name) throws java.io.IOException {
        Calculate result = new Calculate(name);
        initialize(result);
        return result;
      }

      public class Calculate extends SecurityCommandCenterRequest<com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings> {

        private static final String REST_PATH = "v1beta2/{+name}:calculate";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/webSecurityScannerSettings$");

        /**
         * Calculates the effective WebSecurityScannerSettings based on its level in the resource
         * hierarchy and its settings.
         *
         * Create a request for the method "webSecurityScannerSettings.calculate".
         *
         * This request holds the parameters needed by the the securitycenter server.  After setting any
         * optional parameters, call the {@link Calculate#execute()} method to invoke the remote
         * operation. <p> {@link
         * Calculate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
       *        organizations/{organization}/webSecurityScannerSettings *
       *        folders/{folder}/webSecurityScannerSettings *
       *        projects/{project}/webSecurityScannerSettings
         * @since 1.13
         */
        protected Calculate(java.lang.String name) {
          super(SecurityCommandCenter.this, "GET", REST_PATH, null, com.google.api.services.securitycenter.v1beta2.model.WebSecurityScannerSettings.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/webSecurityScannerSettings$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Calculate set$Xgafv(java.lang.String $Xgafv) {
          return (Calculate) super.set$Xgafv($Xgafv);
        }

        @Override
        public Calculate setAccessToken(java.lang.String accessToken) {
          return (Calculate) super.setAccessToken(accessToken);
        }

        @Override
        public Calculate setAlt(java.lang.String alt) {
          return (Calculate) super.setAlt(alt);
        }

        @Override
        public Calculate setCallback(java.lang.String callback) {
          return (Calculate) super.setCallback(callback);
        }

        @Override
        public Calculate setFields(java.lang.String fields) {
          return (Calculate) super.setFields(fields);
        }

        @Override
        public Calculate setKey(java.lang.String key) {
          return (Calculate) super.setKey(key);
        }

        @Override
        public Calculate setOauthToken(java.lang.String oauthToken) {
          return (Calculate) super.setOauthToken(oauthToken);
        }

        @Override
        public Calculate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Calculate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Calculate setQuotaUser(java.lang.String quotaUser) {
          return (Calculate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Calculate setUploadType(java.lang.String uploadType) {
          return (Calculate) super.setUploadType(uploadType);
        }

        @Override
        public Calculate setUploadProtocol(java.lang.String uploadProtocol) {
          return (Calculate) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
         * organizations/{organization}/webSecurityScannerSettings *
         * folders/{folder}/webSecurityScannerSettings *
         * projects/{project}/webSecurityScannerSettings
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
       organizations/{organization}/webSecurityScannerSettings *
       folders/{folder}/webSecurityScannerSettings * projects/{project}/webSecurityScannerSettings
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the WebSecurityScannerSettings to calculate. Formats: *
         * organizations/{organization}/webSecurityScannerSettings *
         * folders/{folder}/webSecurityScannerSettings *
         * projects/{project}/webSecurityScannerSettings
         */
        public Calculate setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/webSecurityScannerSettings$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Calculate set(String parameterName, Object value) {
          return (Calculate) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link SecurityCommandCenter}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link SecurityCommandCenter}. */
    @Override
    public SecurityCommandCenter build() {
      return new SecurityCommandCenter(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link SecurityCommandCenterRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setSecurityCommandCenterRequestInitializer(
        SecurityCommandCenterRequestInitializer securitycommandcenterRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(securitycommandcenterRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
