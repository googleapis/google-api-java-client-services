/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1.model;

/**
 * A Firestore query.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Firestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class StructuredQuery extends com.google.api.client.json.GenericJson {

  /**
   * A end point for the query results.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Cursor endAt;

  /**
   * The collections to query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CollectionSelector> from;

  static {
    // hack to force ProGuard to consider CollectionSelector used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CollectionSelector.class);
  }

  /**
   * The maximum number of results to return.
   *
   * Applies after all other constraints. Must be >= 0 if specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer limit;

  /**
   * The number of results to skip.
   *
   * Applies before limit, but after all other constraints. Must be >= 0 if specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer offset;

  /**
   * The order to apply to the query results.
   *
   * Firestore guarantees a stable ordering through the following rules:
   *
   *  * Any field required to appear in `order_by`, that is not already    specified in `order_by`,
   * is appended to the order in field name order    by default.  * If an order on `__name__` is not
   * specified, it is appended by default.
   *
   * Fields are appended with the same sort direction as the last order specified, or 'ASCENDING' if
   * no order was specified. For example:
   *
   *  * `SELECT * FROM Foo ORDER BY A` becomes    `SELECT * FROM Foo ORDER BY A, __name__`  *
   * `SELECT * FROM Foo ORDER BY A DESC` becomes    `SELECT * FROM Foo ORDER BY A DESC, __name__
   * DESC`  * `SELECT * FROM Foo WHERE A > 1` becomes    `SELECT * FROM Foo WHERE A > 1 ORDER BY A,
   * __name__`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Order> orderBy;

  static {
    // hack to force ProGuard to consider Order used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Order.class);
  }

  /**
   * The projection to return.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Projection select;

  /**
   * A starting point for the query results.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Cursor startAt;

  /**
   * The filter to apply.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Filter where;

  /**
   * A end point for the query results.
   * @return value or {@code null} for none
   */
  public Cursor getEndAt() {
    return endAt;
  }

  /**
   * A end point for the query results.
   * @param endAt endAt or {@code null} for none
   */
  public StructuredQuery setEndAt(Cursor endAt) {
    this.endAt = endAt;
    return this;
  }

  /**
   * The collections to query.
   * @return value or {@code null} for none
   */
  public java.util.List<CollectionSelector> getFrom() {
    return from;
  }

  /**
   * The collections to query.
   * @param from from or {@code null} for none
   */
  public StructuredQuery setFrom(java.util.List<CollectionSelector> from) {
    this.from = from;
    return this;
  }

  /**
   * The maximum number of results to return.
   *
   * Applies after all other constraints. Must be >= 0 if specified.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLimit() {
    return limit;
  }

  /**
   * The maximum number of results to return.
   *
   * Applies after all other constraints. Must be >= 0 if specified.
   * @param limit limit or {@code null} for none
   */
  public StructuredQuery setLimit(java.lang.Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The number of results to skip.
   *
   * Applies before limit, but after all other constraints. Must be >= 0 if specified.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOffset() {
    return offset;
  }

  /**
   * The number of results to skip.
   *
   * Applies before limit, but after all other constraints. Must be >= 0 if specified.
   * @param offset offset or {@code null} for none
   */
  public StructuredQuery setOffset(java.lang.Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The order to apply to the query results.
   *
   * Firestore guarantees a stable ordering through the following rules:
   *
   *  * Any field required to appear in `order_by`, that is not already    specified in `order_by`,
   * is appended to the order in field name order    by default.  * If an order on `__name__` is not
   * specified, it is appended by default.
   *
   * Fields are appended with the same sort direction as the last order specified, or 'ASCENDING' if
   * no order was specified. For example:
   *
   *  * `SELECT * FROM Foo ORDER BY A` becomes    `SELECT * FROM Foo ORDER BY A, __name__`  *
   * `SELECT * FROM Foo ORDER BY A DESC` becomes    `SELECT * FROM Foo ORDER BY A DESC, __name__
   * DESC`  * `SELECT * FROM Foo WHERE A > 1` becomes    `SELECT * FROM Foo WHERE A > 1 ORDER BY A,
   * __name__`
   * @return value or {@code null} for none
   */
  public java.util.List<Order> getOrderBy() {
    return orderBy;
  }

  /**
   * The order to apply to the query results.
   *
   * Firestore guarantees a stable ordering through the following rules:
   *
   *  * Any field required to appear in `order_by`, that is not already    specified in `order_by`,
   * is appended to the order in field name order    by default.  * If an order on `__name__` is not
   * specified, it is appended by default.
   *
   * Fields are appended with the same sort direction as the last order specified, or 'ASCENDING' if
   * no order was specified. For example:
   *
   *  * `SELECT * FROM Foo ORDER BY A` becomes    `SELECT * FROM Foo ORDER BY A, __name__`  *
   * `SELECT * FROM Foo ORDER BY A DESC` becomes    `SELECT * FROM Foo ORDER BY A DESC, __name__
   * DESC`  * `SELECT * FROM Foo WHERE A > 1` becomes    `SELECT * FROM Foo WHERE A > 1 ORDER BY A,
   * __name__`
   * @param orderBy orderBy or {@code null} for none
   */
  public StructuredQuery setOrderBy(java.util.List<Order> orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  /**
   * The projection to return.
   * @return value or {@code null} for none
   */
  public Projection getSelect() {
    return select;
  }

  /**
   * The projection to return.
   * @param select select or {@code null} for none
   */
  public StructuredQuery setSelect(Projection select) {
    this.select = select;
    return this;
  }

  /**
   * A starting point for the query results.
   * @return value or {@code null} for none
   */
  public Cursor getStartAt() {
    return startAt;
  }

  /**
   * A starting point for the query results.
   * @param startAt startAt or {@code null} for none
   */
  public StructuredQuery setStartAt(Cursor startAt) {
    this.startAt = startAt;
    return this;
  }

  /**
   * The filter to apply.
   * @return value or {@code null} for none
   */
  public Filter getWhere() {
    return where;
  }

  /**
   * The filter to apply.
   * @param where where or {@code null} for none
   */
  public StructuredQuery setWhere(Filter where) {
    this.where = where;
    return this;
  }

  @Override
  public StructuredQuery set(String fieldName, Object value) {
    return (StructuredQuery) super.set(fieldName, value);
  }

  @Override
  public StructuredQuery clone() {
    return (StructuredQuery) super.clone();
  }

}
