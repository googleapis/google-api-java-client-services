/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vectortile.v1.model;

/**
 * A tile containing information about the map features located in the region it covers.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Semantic Tile API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FeatureTile extends com.google.api.client.json.GenericJson {

  /**
   * The global tile coordinates that uniquely identify this tile.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TileCoordinates coordinates;

  /**
   * Features present on this map tile.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Feature> features;

  static {
    // hack to force ProGuard to consider Feature used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Feature.class);
  }

  /**
   * Resource name of the tile. The tile resource name is prefixed by its collection ID `tiles/`
   * followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level
   * as `@,,z`. For example, `tiles/@1,2,3z`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Data providers for the data contained in this tile.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ProviderInfo> providers;

  /**
   * Tile response status code to support tile caching.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String status;

  /**
   * An opaque value, usually less than 30 characters, that contains version info about this tile
   * and the data that was used to generate it. The client should store this value in its tile cache
   * and pass it back to the API in the client_tile_version_id field of subsequent tile requests in
   * order to enable the API to detect when the new tile would be the same as the one the client
   * already has in its cache. Also see STATUS_OK_DATA_UNCHANGED.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String versionId;

  /**
   * The global tile coordinates that uniquely identify this tile.
   * @return value or {@code null} for none
   */
  public TileCoordinates getCoordinates() {
    return coordinates;
  }

  /**
   * The global tile coordinates that uniquely identify this tile.
   * @param coordinates coordinates or {@code null} for none
   */
  public FeatureTile setCoordinates(TileCoordinates coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  /**
   * Features present on this map tile.
   * @return value or {@code null} for none
   */
  public java.util.List<Feature> getFeatures() {
    return features;
  }

  /**
   * Features present on this map tile.
   * @param features features or {@code null} for none
   */
  public FeatureTile setFeatures(java.util.List<Feature> features) {
    this.features = features;
    return this;
  }

  /**
   * Resource name of the tile. The tile resource name is prefixed by its collection ID `tiles/`
   * followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level
   * as `@,,z`. For example, `tiles/@1,2,3z`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Resource name of the tile. The tile resource name is prefixed by its collection ID `tiles/`
   * followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level
   * as `@,,z`. For example, `tiles/@1,2,3z`.
   * @param name name or {@code null} for none
   */
  public FeatureTile setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Data providers for the data contained in this tile.
   * @return value or {@code null} for none
   */
  public java.util.List<ProviderInfo> getProviders() {
    return providers;
  }

  /**
   * Data providers for the data contained in this tile.
   * @param providers providers or {@code null} for none
   */
  public FeatureTile setProviders(java.util.List<ProviderInfo> providers) {
    this.providers = providers;
    return this;
  }

  /**
   * Tile response status code to support tile caching.
   * @return value or {@code null} for none
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * Tile response status code to support tile caching.
   * @param status status or {@code null} for none
   */
  public FeatureTile setStatus(java.lang.String status) {
    this.status = status;
    return this;
  }

  /**
   * An opaque value, usually less than 30 characters, that contains version info about this tile
   * and the data that was used to generate it. The client should store this value in its tile cache
   * and pass it back to the API in the client_tile_version_id field of subsequent tile requests in
   * order to enable the API to detect when the new tile would be the same as the one the client
   * already has in its cache. Also see STATUS_OK_DATA_UNCHANGED.
   * @return value or {@code null} for none
   */
  public java.lang.String getVersionId() {
    return versionId;
  }

  /**
   * An opaque value, usually less than 30 characters, that contains version info about this tile
   * and the data that was used to generate it. The client should store this value in its tile cache
   * and pass it back to the API in the client_tile_version_id field of subsequent tile requests in
   * order to enable the API to detect when the new tile would be the same as the one the client
   * already has in its cache. Also see STATUS_OK_DATA_UNCHANGED.
   * @param versionId versionId or {@code null} for none
   */
  public FeatureTile setVersionId(java.lang.String versionId) {
    this.versionId = versionId;
    return this;
  }

  @Override
  public FeatureTile set(String fieldName, Object value) {
    return (FeatureTile) super.set(fieldName, value);
  }

  @Override
  public FeatureTile clone() {
    return (FeatureTile) super.clone();
  }

}
