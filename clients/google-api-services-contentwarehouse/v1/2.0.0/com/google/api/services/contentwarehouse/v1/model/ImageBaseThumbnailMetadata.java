/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Next ID: 15
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImageBaseThumbnailMetadata extends com.google.api.client.json.GenericJson {

  /**
   * the size of the stored thumbnail
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer byteSize;

  /**
   * SmartCrop crop-hints By default, this field is not populated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ContentAwareCropsIndexing crops;

  /**
   * DeepCrop crop-hints. Usage in thumbnails could be deprecated in favor or deep_crop_pixels
   * (below). By default, this field is not populated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DeepCropIndexing deepCrop;

  /**
   * DeepCrop signal in pixels, equivalent to deep_crop (above) but with pixels instead of
   * percentages. By default, this field is not populated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DeepCropPixels deepCropPixels;

  /**
   * the Amarna docid of the thumbnail
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger docid;

  /**
   * encrypted version of docid
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String encryptedDocid;

  /**
   * the fprint of the thumbnail
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger fprint;

  /**
   * the height of the stored thumbnail
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer height;

  /**
   * The mime_type of the thumbnail ("image/jpeg", "image/png", etc.).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mimeType;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer originalHeight;

  /**
   * Not populated by Amarna/image pipelines, ever. This was apparently introduced by a customer
   * that wished to extend ThumbnailMetadata with this custom data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer originalWidth;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * the width of the stored thumbnail
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer width;

  /**
   * the size of the stored thumbnail
   * @return value or {@code null} for none
   */
  public java.lang.Integer getByteSize() {
    return byteSize;
  }

  /**
   * the size of the stored thumbnail
   * @param byteSize byteSize or {@code null} for none
   */
  public ImageBaseThumbnailMetadata setByteSize(java.lang.Integer byteSize) {
    this.byteSize = byteSize;
    return this;
  }

  /**
   * SmartCrop crop-hints By default, this field is not populated.
   * @return value or {@code null} for none
   */
  public ContentAwareCropsIndexing getCrops() {
    return crops;
  }

  /**
   * SmartCrop crop-hints By default, this field is not populated.
   * @param crops crops or {@code null} for none
   */
  public ImageBaseThumbnailMetadata setCrops(ContentAwareCropsIndexing crops) {
    this.crops = crops;
    return this;
  }

  /**
   * DeepCrop crop-hints. Usage in thumbnails could be deprecated in favor or deep_crop_pixels
   * (below). By default, this field is not populated.
   * @return value or {@code null} for none
   */
  public DeepCropIndexing getDeepCrop() {
    return deepCrop;
  }

  /**
   * DeepCrop crop-hints. Usage in thumbnails could be deprecated in favor or deep_crop_pixels
   * (below). By default, this field is not populated.
   * @param deepCrop deepCrop or {@code null} for none
   */
  public ImageBaseThumbnailMetadata setDeepCrop(DeepCropIndexing deepCrop) {
    this.deepCrop = deepCrop;
    return this;
  }

  /**
   * DeepCrop signal in pixels, equivalent to deep_crop (above) but with pixels instead of
   * percentages. By default, this field is not populated.
   * @return value or {@code null} for none
   */
  public DeepCropPixels getDeepCropPixels() {
    return deepCropPixels;
  }

  /**
   * DeepCrop signal in pixels, equivalent to deep_crop (above) but with pixels instead of
   * percentages. By default, this field is not populated.
   * @param deepCropPixels deepCropPixels or {@code null} for none
   */
  public ImageBaseThumbnailMetadata setDeepCropPixels(DeepCropPixels deepCropPixels) {
    this.deepCropPixels = deepCropPixels;
    return this;
  }

  /**
   * the Amarna docid of the thumbnail
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getDocid() {
    return docid;
  }

  /**
   * the Amarna docid of the thumbnail
   * @param docid docid or {@code null} for none
   */
  public ImageBaseThumbnailMetadata setDocid(java.math.BigInteger docid) {
    this.docid = docid;
    return this;
  }

  /**
   * encrypted version of docid
   * @return value or {@code null} for none
   */
  public java.lang.String getEncryptedDocid() {
    return encryptedDocid;
  }

  /**
   * encrypted version of docid
   * @param encryptedDocid encryptedDocid or {@code null} for none
   */
  public ImageBaseThumbnailMetadata setEncryptedDocid(java.lang.String encryptedDocid) {
    this.encryptedDocid = encryptedDocid;
    return this;
  }

  /**
   * the fprint of the thumbnail
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getFprint() {
    return fprint;
  }

  /**
   * the fprint of the thumbnail
   * @param fprint fprint or {@code null} for none
   */
  public ImageBaseThumbnailMetadata setFprint(java.math.BigInteger fprint) {
    this.fprint = fprint;
    return this;
  }

  /**
   * the height of the stored thumbnail
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHeight() {
    return height;
  }

  /**
   * the height of the stored thumbnail
   * @param height height or {@code null} for none
   */
  public ImageBaseThumbnailMetadata setHeight(java.lang.Integer height) {
    this.height = height;
    return this;
  }

  /**
   * The mime_type of the thumbnail ("image/jpeg", "image/png", etc.).
   * @return value or {@code null} for none
   */
  public java.lang.String getMimeType() {
    return mimeType;
  }

  /**
   * The mime_type of the thumbnail ("image/jpeg", "image/png", etc.).
   * @param mimeType mimeType or {@code null} for none
   */
  public ImageBaseThumbnailMetadata setMimeType(java.lang.String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOriginalHeight() {
    return originalHeight;
  }

  /**
   * @param originalHeight originalHeight or {@code null} for none
   */
  public ImageBaseThumbnailMetadata setOriginalHeight(java.lang.Integer originalHeight) {
    this.originalHeight = originalHeight;
    return this;
  }

  /**
   * Not populated by Amarna/image pipelines, ever. This was apparently introduced by a customer
   * that wished to extend ThumbnailMetadata with this custom data.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOriginalWidth() {
    return originalWidth;
  }

  /**
   * Not populated by Amarna/image pipelines, ever. This was apparently introduced by a customer
   * that wished to extend ThumbnailMetadata with this custom data.
   * @param originalWidth originalWidth or {@code null} for none
   */
  public ImageBaseThumbnailMetadata setOriginalWidth(java.lang.Integer originalWidth) {
    this.originalWidth = originalWidth;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * @param type type or {@code null} for none
   */
  public ImageBaseThumbnailMetadata setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * the width of the stored thumbnail
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWidth() {
    return width;
  }

  /**
   * the width of the stored thumbnail
   * @param width width or {@code null} for none
   */
  public ImageBaseThumbnailMetadata setWidth(java.lang.Integer width) {
    this.width = width;
    return this;
  }

  @Override
  public ImageBaseThumbnailMetadata set(String fieldName, Object value) {
    return (ImageBaseThumbnailMetadata) super.set(fieldName, value);
  }

  @Override
  public ImageBaseThumbnailMetadata clone() {
    return (ImageBaseThumbnailMetadata) super.clone();
  }

}
