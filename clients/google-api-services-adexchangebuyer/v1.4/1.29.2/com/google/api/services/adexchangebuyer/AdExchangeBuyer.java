/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.adexchangebuyer;

/**
 * Service definition for AdExchangeBuyer (v1.4).
 *
 * <p>
 * Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/ad-exchange/buyer-rest" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link AdExchangeBuyerRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class AdExchangeBuyer extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.29.2 of the Ad Exchange Buyer API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "adexchangebuyer/v1.4/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch/adexchangebuyer/v1.4";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public AdExchangeBuyer(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  AdExchangeBuyer(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Accounts collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdExchangeBuyer adexchangebuyer = new AdExchangeBuyer(...);}
   *   {@code AdExchangeBuyer.Accounts.List request = adexchangebuyer.accounts().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Accounts accounts() {
    return new Accounts();
  }

  /**
   * The "accounts" collection of methods.
   */
  public class Accounts {

    /**
     * Gets one account by ID.
     *
     * Create a request for the method "accounts.get".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id The account id
     * @return the request
     */
    public Get get(java.lang.Integer id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.Account> {

      private static final String REST_PATH = "accounts/{id}";

      /**
       * Gets one account by ID.
       *
       * Create a request for the method "accounts.get".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The account id
       * @since 1.13
       */
      protected Get(java.lang.Integer id) {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.Account.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The account id */
      @com.google.api.client.util.Key
      private java.lang.Integer id;

      /** The account id
       */
      public java.lang.Integer getId() {
        return id;
      }

      /** The account id */
      public Get setId(java.lang.Integer id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the authenticated user's list of accounts.
     *
     * Create a request for the method "accounts.list".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.AccountsList> {

      private static final String REST_PATH = "accounts";

      /**
       * Retrieves the authenticated user's list of accounts.
       *
       * Create a request for the method "accounts.list".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.AccountsList.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates an existing account. This method supports patch semantics.
     *
     * Create a request for the method "accounts.patch".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param id The account id
     * @param content the {@link com.google.api.services.adexchangebuyer.model.Account}
     * @return the request
     */
    public Patch patch(java.lang.Integer id, com.google.api.services.adexchangebuyer.model.Account content) throws java.io.IOException {
      Patch result = new Patch(id, content);
      initialize(result);
      return result;
    }

    public class Patch extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.Account> {

      private static final String REST_PATH = "accounts/{id}";

      /**
       * Updates an existing account. This method supports patch semantics.
       *
       * Create a request for the method "accounts.patch".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The account id
       * @param content the {@link com.google.api.services.adexchangebuyer.model.Account}
       * @since 1.13
       */
      protected Patch(java.lang.Integer id, com.google.api.services.adexchangebuyer.model.Account content) {
        super(AdExchangeBuyer.this, "PATCH", REST_PATH, content, com.google.api.services.adexchangebuyer.model.Account.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** The account id */
      @com.google.api.client.util.Key
      private java.lang.Integer id;

      /** The account id
       */
      public java.lang.Integer getId() {
        return id;
      }

      /** The account id */
      public Patch setId(java.lang.Integer id) {
        this.id = id;
        return this;
      }

      /** Confirmation for erasing bidder and cookie matching urls. */
      @com.google.api.client.util.Key
      private java.lang.Boolean confirmUnsafeAccountChange;

      /** Confirmation for erasing bidder and cookie matching urls.
       */
      public java.lang.Boolean getConfirmUnsafeAccountChange() {
        return confirmUnsafeAccountChange;
      }

      /** Confirmation for erasing bidder and cookie matching urls. */
      public Patch setConfirmUnsafeAccountChange(java.lang.Boolean confirmUnsafeAccountChange) {
        this.confirmUnsafeAccountChange = confirmUnsafeAccountChange;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Updates an existing account.
     *
     * Create a request for the method "accounts.update".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param id The account id
     * @param content the {@link com.google.api.services.adexchangebuyer.model.Account}
     * @return the request
     */
    public Update update(java.lang.Integer id, com.google.api.services.adexchangebuyer.model.Account content) throws java.io.IOException {
      Update result = new Update(id, content);
      initialize(result);
      return result;
    }

    public class Update extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.Account> {

      private static final String REST_PATH = "accounts/{id}";

      /**
       * Updates an existing account.
       *
       * Create a request for the method "accounts.update".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id The account id
       * @param content the {@link com.google.api.services.adexchangebuyer.model.Account}
       * @since 1.13
       */
      protected Update(java.lang.Integer id, com.google.api.services.adexchangebuyer.model.Account content) {
        super(AdExchangeBuyer.this, "PUT", REST_PATH, content, com.google.api.services.adexchangebuyer.model.Account.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** The account id */
      @com.google.api.client.util.Key
      private java.lang.Integer id;

      /** The account id
       */
      public java.lang.Integer getId() {
        return id;
      }

      /** The account id */
      public Update setId(java.lang.Integer id) {
        this.id = id;
        return this;
      }

      /** Confirmation for erasing bidder and cookie matching urls. */
      @com.google.api.client.util.Key
      private java.lang.Boolean confirmUnsafeAccountChange;

      /** Confirmation for erasing bidder and cookie matching urls.
       */
      public java.lang.Boolean getConfirmUnsafeAccountChange() {
        return confirmUnsafeAccountChange;
      }

      /** Confirmation for erasing bidder and cookie matching urls. */
      public Update setConfirmUnsafeAccountChange(java.lang.Boolean confirmUnsafeAccountChange) {
        this.confirmUnsafeAccountChange = confirmUnsafeAccountChange;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the BillingInfo collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdExchangeBuyer adexchangebuyer = new AdExchangeBuyer(...);}
   *   {@code AdExchangeBuyer.BillingInfo.List request = adexchangebuyer.billingInfo().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public BillingInfo billingInfo() {
    return new BillingInfo();
  }

  /**
   * The "billingInfo" collection of methods.
   */
  public class BillingInfo {

    /**
     * Returns the billing information for one account specified by account ID.
     *
     * Create a request for the method "billingInfo.get".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param accountId The account id.
     * @return the request
     */
    public Get get(java.lang.Integer accountId) throws java.io.IOException {
      Get result = new Get(accountId);
      initialize(result);
      return result;
    }

    public class Get extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.BillingInfo> {

      private static final String REST_PATH = "billinginfo/{accountId}";

      /**
       * Returns the billing information for one account specified by account ID.
       *
       * Create a request for the method "billingInfo.get".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The account id.
       * @since 1.13
       */
      protected Get(java.lang.Integer accountId) {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.BillingInfo.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The account id. */
      @com.google.api.client.util.Key
      private java.lang.Integer accountId;

      /** The account id.
       */
      public java.lang.Integer getAccountId() {
        return accountId;
      }

      /** The account id. */
      public Get setAccountId(java.lang.Integer accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of billing information for all accounts of the authenticated user.
     *
     * Create a request for the method "billingInfo.list".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.BillingInfoList> {

      private static final String REST_PATH = "billinginfo";

      /**
       * Retrieves a list of billing information for all accounts of the authenticated user.
       *
       * Create a request for the method "billingInfo.list".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.BillingInfoList.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Budget collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdExchangeBuyer adexchangebuyer = new AdExchangeBuyer(...);}
   *   {@code AdExchangeBuyer.Budget.List request = adexchangebuyer.budget().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Budget budget() {
    return new Budget();
  }

  /**
   * The "budget" collection of methods.
   */
  public class Budget {

    /**
     * Returns the budget information for the adgroup specified by the accountId and billingId.
     *
     * Create a request for the method "budget.get".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param accountId The account id to get the budget information for.
     * @param billingId The billing id to get the budget information for.
     * @return the request
     */
    public Get get(java.lang.Long accountId, java.lang.Long billingId) throws java.io.IOException {
      Get result = new Get(accountId, billingId);
      initialize(result);
      return result;
    }

    public class Get extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.Budget> {

      private static final String REST_PATH = "billinginfo/{accountId}/{billingId}";

      /**
       * Returns the budget information for the adgroup specified by the accountId and billingId.
       *
       * Create a request for the method "budget.get".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The account id to get the budget information for.
       * @param billingId The billing id to get the budget information for.
       * @since 1.13
       */
      protected Get(java.lang.Long accountId, java.lang.Long billingId) {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.Budget.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.billingId = com.google.api.client.util.Preconditions.checkNotNull(billingId, "Required parameter billingId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The account id to get the budget information for. */
      @com.google.api.client.util.Key
      private java.lang.Long accountId;

      /** The account id to get the budget information for.
       */
      public java.lang.Long getAccountId() {
        return accountId;
      }

      /** The account id to get the budget information for. */
      public Get setAccountId(java.lang.Long accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The billing id to get the budget information for. */
      @com.google.api.client.util.Key
      private java.lang.Long billingId;

      /** The billing id to get the budget information for.
       */
      public java.lang.Long getBillingId() {
        return billingId;
      }

      /** The billing id to get the budget information for. */
      public Get setBillingId(java.lang.Long billingId) {
        this.billingId = billingId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Updates the budget amount for the budget of the adgroup specified by the accountId and billingId,
     * with the budget amount in the request. This method supports patch semantics.
     *
     * Create a request for the method "budget.patch".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param accountId The account id associated with the budget being updated.
     * @param billingId The billing id associated with the budget being updated.
     * @param content the {@link com.google.api.services.adexchangebuyer.model.Budget}
     * @return the request
     */
    public Patch patch(java.lang.Long accountId, java.lang.Long billingId, com.google.api.services.adexchangebuyer.model.Budget content) throws java.io.IOException {
      Patch result = new Patch(accountId, billingId, content);
      initialize(result);
      return result;
    }

    public class Patch extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.Budget> {

      private static final String REST_PATH = "billinginfo/{accountId}/{billingId}";

      /**
       * Updates the budget amount for the budget of the adgroup specified by the accountId and
       * billingId, with the budget amount in the request. This method supports patch semantics.
       *
       * Create a request for the method "budget.patch".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The account id associated with the budget being updated.
       * @param billingId The billing id associated with the budget being updated.
       * @param content the {@link com.google.api.services.adexchangebuyer.model.Budget}
       * @since 1.13
       */
      protected Patch(java.lang.Long accountId, java.lang.Long billingId, com.google.api.services.adexchangebuyer.model.Budget content) {
        super(AdExchangeBuyer.this, "PATCH", REST_PATH, content, com.google.api.services.adexchangebuyer.model.Budget.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.billingId = com.google.api.client.util.Preconditions.checkNotNull(billingId, "Required parameter billingId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** The account id associated with the budget being updated. */
      @com.google.api.client.util.Key
      private java.lang.Long accountId;

      /** The account id associated with the budget being updated.
       */
      public java.lang.Long getAccountId() {
        return accountId;
      }

      /** The account id associated with the budget being updated. */
      public Patch setAccountId(java.lang.Long accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The billing id associated with the budget being updated. */
      @com.google.api.client.util.Key
      private java.lang.Long billingId;

      /** The billing id associated with the budget being updated.
       */
      public java.lang.Long getBillingId() {
        return billingId;
      }

      /** The billing id associated with the budget being updated. */
      public Patch setBillingId(java.lang.Long billingId) {
        this.billingId = billingId;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Updates the budget amount for the budget of the adgroup specified by the accountId and billingId,
     * with the budget amount in the request.
     *
     * Create a request for the method "budget.update".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param accountId The account id associated with the budget being updated.
     * @param billingId The billing id associated with the budget being updated.
     * @param content the {@link com.google.api.services.adexchangebuyer.model.Budget}
     * @return the request
     */
    public Update update(java.lang.Long accountId, java.lang.Long billingId, com.google.api.services.adexchangebuyer.model.Budget content) throws java.io.IOException {
      Update result = new Update(accountId, billingId, content);
      initialize(result);
      return result;
    }

    public class Update extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.Budget> {

      private static final String REST_PATH = "billinginfo/{accountId}/{billingId}";

      /**
       * Updates the budget amount for the budget of the adgroup specified by the accountId and
       * billingId, with the budget amount in the request.
       *
       * Create a request for the method "budget.update".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The account id associated with the budget being updated.
       * @param billingId The billing id associated with the budget being updated.
       * @param content the {@link com.google.api.services.adexchangebuyer.model.Budget}
       * @since 1.13
       */
      protected Update(java.lang.Long accountId, java.lang.Long billingId, com.google.api.services.adexchangebuyer.model.Budget content) {
        super(AdExchangeBuyer.this, "PUT", REST_PATH, content, com.google.api.services.adexchangebuyer.model.Budget.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.billingId = com.google.api.client.util.Preconditions.checkNotNull(billingId, "Required parameter billingId must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** The account id associated with the budget being updated. */
      @com.google.api.client.util.Key
      private java.lang.Long accountId;

      /** The account id associated with the budget being updated.
       */
      public java.lang.Long getAccountId() {
        return accountId;
      }

      /** The account id associated with the budget being updated. */
      public Update setAccountId(java.lang.Long accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The billing id associated with the budget being updated. */
      @com.google.api.client.util.Key
      private java.lang.Long billingId;

      /** The billing id associated with the budget being updated.
       */
      public java.lang.Long getBillingId() {
        return billingId;
      }

      /** The billing id associated with the budget being updated. */
      public Update setBillingId(java.lang.Long billingId) {
        this.billingId = billingId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Creatives collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdExchangeBuyer adexchangebuyer = new AdExchangeBuyer(...);}
   *   {@code AdExchangeBuyer.Creatives.List request = adexchangebuyer.creatives().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Creatives creatives() {
    return new Creatives();
  }

  /**
   * The "creatives" collection of methods.
   */
  public class Creatives {

    /**
     * Add a deal id association for the creative.
     *
     * Create a request for the method "creatives.addDeal".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link AddDeal#execute()} method to invoke the remote operation.
     *
     * @param accountId The id for the account that will serve this creative.
     * @param buyerCreativeId The buyer-specific id for this creative.
     * @param dealId The id of the deal id to associate with this creative.
     * @return the request
     */
    public AddDeal addDeal(java.lang.Integer accountId, java.lang.String buyerCreativeId, java.lang.Long dealId) throws java.io.IOException {
      AddDeal result = new AddDeal(accountId, buyerCreativeId, dealId);
      initialize(result);
      return result;
    }

    public class AddDeal extends AdExchangeBuyerRequest<Void> {

      private static final String REST_PATH = "creatives/{accountId}/{buyerCreativeId}/addDeal/{dealId}";

      /**
       * Add a deal id association for the creative.
       *
       * Create a request for the method "creatives.addDeal".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link AddDeal#execute()} method to invoke the remote operation.
       * <p> {@link
       * AddDeal#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The id for the account that will serve this creative.
       * @param buyerCreativeId The buyer-specific id for this creative.
       * @param dealId The id of the deal id to associate with this creative.
       * @since 1.13
       */
      protected AddDeal(java.lang.Integer accountId, java.lang.String buyerCreativeId, java.lang.Long dealId) {
        super(AdExchangeBuyer.this, "POST", REST_PATH, null, Void.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.buyerCreativeId = com.google.api.client.util.Preconditions.checkNotNull(buyerCreativeId, "Required parameter buyerCreativeId must be specified.");
        this.dealId = com.google.api.client.util.Preconditions.checkNotNull(dealId, "Required parameter dealId must be specified.");
      }

      @Override
      public AddDeal setAlt(java.lang.String alt) {
        return (AddDeal) super.setAlt(alt);
      }

      @Override
      public AddDeal setFields(java.lang.String fields) {
        return (AddDeal) super.setFields(fields);
      }

      @Override
      public AddDeal setKey(java.lang.String key) {
        return (AddDeal) super.setKey(key);
      }

      @Override
      public AddDeal setOauthToken(java.lang.String oauthToken) {
        return (AddDeal) super.setOauthToken(oauthToken);
      }

      @Override
      public AddDeal setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddDeal) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddDeal setQuotaUser(java.lang.String quotaUser) {
        return (AddDeal) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddDeal setUserIp(java.lang.String userIp) {
        return (AddDeal) super.setUserIp(userIp);
      }

      /** The id for the account that will serve this creative. */
      @com.google.api.client.util.Key
      private java.lang.Integer accountId;

      /** The id for the account that will serve this creative.
       */
      public java.lang.Integer getAccountId() {
        return accountId;
      }

      /** The id for the account that will serve this creative. */
      public AddDeal setAccountId(java.lang.Integer accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The buyer-specific id for this creative. */
      @com.google.api.client.util.Key
      private java.lang.String buyerCreativeId;

      /** The buyer-specific id for this creative.
       */
      public java.lang.String getBuyerCreativeId() {
        return buyerCreativeId;
      }

      /** The buyer-specific id for this creative. */
      public AddDeal setBuyerCreativeId(java.lang.String buyerCreativeId) {
        this.buyerCreativeId = buyerCreativeId;
        return this;
      }

      /** The id of the deal id to associate with this creative. */
      @com.google.api.client.util.Key
      private java.lang.Long dealId;

      /** The id of the deal id to associate with this creative.
       */
      public java.lang.Long getDealId() {
        return dealId;
      }

      /** The id of the deal id to associate with this creative. */
      public AddDeal setDealId(java.lang.Long dealId) {
        this.dealId = dealId;
        return this;
      }

      @Override
      public AddDeal set(String parameterName, Object value) {
        return (AddDeal) super.set(parameterName, value);
      }
    }
    /**
     * Gets the status for a single creative. A creative will be available 30-40 minutes after
     * submission.
     *
     * Create a request for the method "creatives.get".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param accountId The id for the account that will serve this creative.
     * @param buyerCreativeId The buyer-specific id for this creative.
     * @return the request
     */
    public Get get(java.lang.Integer accountId, java.lang.String buyerCreativeId) throws java.io.IOException {
      Get result = new Get(accountId, buyerCreativeId);
      initialize(result);
      return result;
    }

    public class Get extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.Creative> {

      private static final String REST_PATH = "creatives/{accountId}/{buyerCreativeId}";

      /**
       * Gets the status for a single creative. A creative will be available 30-40 minutes after
       * submission.
       *
       * Create a request for the method "creatives.get".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The id for the account that will serve this creative.
       * @param buyerCreativeId The buyer-specific id for this creative.
       * @since 1.13
       */
      protected Get(java.lang.Integer accountId, java.lang.String buyerCreativeId) {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.Creative.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.buyerCreativeId = com.google.api.client.util.Preconditions.checkNotNull(buyerCreativeId, "Required parameter buyerCreativeId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The id for the account that will serve this creative. */
      @com.google.api.client.util.Key
      private java.lang.Integer accountId;

      /** The id for the account that will serve this creative.
       */
      public java.lang.Integer getAccountId() {
        return accountId;
      }

      /** The id for the account that will serve this creative. */
      public Get setAccountId(java.lang.Integer accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The buyer-specific id for this creative. */
      @com.google.api.client.util.Key
      private java.lang.String buyerCreativeId;

      /** The buyer-specific id for this creative.
       */
      public java.lang.String getBuyerCreativeId() {
        return buyerCreativeId;
      }

      /** The buyer-specific id for this creative. */
      public Get setBuyerCreativeId(java.lang.String buyerCreativeId) {
        this.buyerCreativeId = buyerCreativeId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Submit a new creative.
     *
     * Create a request for the method "creatives.insert".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.adexchangebuyer.model.Creative}
     * @return the request
     */
    public Insert insert(com.google.api.services.adexchangebuyer.model.Creative content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.Creative> {

      private static final String REST_PATH = "creatives";

      /**
       * Submit a new creative.
       *
       * Create a request for the method "creatives.insert".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.adexchangebuyer.model.Creative}
       * @since 1.13
       */
      protected Insert(com.google.api.services.adexchangebuyer.model.Creative content) {
        super(AdExchangeBuyer.this, "POST", REST_PATH, content, com.google.api.services.adexchangebuyer.model.Creative.class);
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getAccountId(), "Creative.getAccountId()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getAdvertiserName(), "Creative.getAdvertiserName()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getBuyerCreativeId(), "Creative.getBuyerCreativeId()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getHeight(), "Creative.getHeight()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getWidth(), "Creative.getWidth()");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40
     * minutes after submission.
     *
     * Create a request for the method "creatives.list".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.CreativesList> {

      private static final String REST_PATH = "creatives";

      /**
       * Retrieves a list of the authenticated user's active creatives. A creative will be available
       * 30-40 minutes after submission.
       *
       * Create a request for the method "creatives.list".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.CreativesList.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** When specified, only creatives for the given account ids are returned. */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.Integer> accountId;

      /** When specified, only creatives for the given account ids are returned.
       */
      public java.util.List<java.lang.Integer> getAccountId() {
        return accountId;
      }

      /** When specified, only creatives for the given account ids are returned. */
      public List setAccountId(java.util.List<java.lang.Integer> accountId) {
        this.accountId = accountId;
        return this;
      }

      /** When specified, only creatives for the given buyer creative ids are returned. */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> buyerCreativeId;

      /** When specified, only creatives for the given buyer creative ids are returned.
       */
      public java.util.List<java.lang.String> getBuyerCreativeId() {
        return buyerCreativeId;
      }

      /** When specified, only creatives for the given buyer creative ids are returned. */
      public List setBuyerCreativeId(java.util.List<java.lang.String> buyerCreativeId) {
        this.buyerCreativeId = buyerCreativeId;
        return this;
      }

      /** When specified, only creatives having the given deals status are returned. */
      @com.google.api.client.util.Key
      private java.lang.String dealsStatusFilter;

      /** When specified, only creatives having the given deals status are returned.
       */
      public java.lang.String getDealsStatusFilter() {
        return dealsStatusFilter;
      }

      /** When specified, only creatives having the given deals status are returned. */
      public List setDealsStatusFilter(java.lang.String dealsStatusFilter) {
        this.dealsStatusFilter = dealsStatusFilter;
        return this;
      }

      /**
       * Maximum number of entries returned on one result page. If not set, the default is 100.
       * Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of entries returned on one result page. If not set, the default is 100. Optional.

     [minimum: 1] [maximum: 1000]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /**
       * Maximum number of entries returned on one result page. If not set, the default is 100.
       * Optional.
       */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** When specified, only creatives having the given open auction status are returned. */
      @com.google.api.client.util.Key
      private java.lang.String openAuctionStatusFilter;

      /** When specified, only creatives having the given open auction status are returned.
       */
      public java.lang.String getOpenAuctionStatusFilter() {
        return openAuctionStatusFilter;
      }

      /** When specified, only creatives having the given open auction status are returned. */
      public List setOpenAuctionStatusFilter(java.lang.String openAuctionStatusFilter) {
        this.openAuctionStatusFilter = openAuctionStatusFilter;
        return this;
      }

      /**
       * A continuation token, used to page through ad clients. To retrieve the next page, set this
       * parameter to the value of "nextPageToken" from the previous response. Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** A continuation token, used to page through ad clients. To retrieve the next page, set this
     parameter to the value of "nextPageToken" from the previous response. Optional.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * A continuation token, used to page through ad clients. To retrieve the next page, set this
       * parameter to the value of "nextPageToken" from the previous response. Optional.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Lists the external deal ids associated with the creative.
     *
     * Create a request for the method "creatives.listDeals".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link ListDeals#execute()} method to invoke the remote operation.
     *
     * @param accountId The id for the account that will serve this creative.
     * @param buyerCreativeId The buyer-specific id for this creative.
     * @return the request
     */
    public ListDeals listDeals(java.lang.Integer accountId, java.lang.String buyerCreativeId) throws java.io.IOException {
      ListDeals result = new ListDeals(accountId, buyerCreativeId);
      initialize(result);
      return result;
    }

    public class ListDeals extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.CreativeDealIds> {

      private static final String REST_PATH = "creatives/{accountId}/{buyerCreativeId}/listDeals";

      /**
       * Lists the external deal ids associated with the creative.
       *
       * Create a request for the method "creatives.listDeals".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link ListDeals#execute()} method to invoke the remote
       * operation. <p> {@link
       * ListDeals#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The id for the account that will serve this creative.
       * @param buyerCreativeId The buyer-specific id for this creative.
       * @since 1.13
       */
      protected ListDeals(java.lang.Integer accountId, java.lang.String buyerCreativeId) {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.CreativeDealIds.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.buyerCreativeId = com.google.api.client.util.Preconditions.checkNotNull(buyerCreativeId, "Required parameter buyerCreativeId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public ListDeals setAlt(java.lang.String alt) {
        return (ListDeals) super.setAlt(alt);
      }

      @Override
      public ListDeals setFields(java.lang.String fields) {
        return (ListDeals) super.setFields(fields);
      }

      @Override
      public ListDeals setKey(java.lang.String key) {
        return (ListDeals) super.setKey(key);
      }

      @Override
      public ListDeals setOauthToken(java.lang.String oauthToken) {
        return (ListDeals) super.setOauthToken(oauthToken);
      }

      @Override
      public ListDeals setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ListDeals) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ListDeals setQuotaUser(java.lang.String quotaUser) {
        return (ListDeals) super.setQuotaUser(quotaUser);
      }

      @Override
      public ListDeals setUserIp(java.lang.String userIp) {
        return (ListDeals) super.setUserIp(userIp);
      }

      /** The id for the account that will serve this creative. */
      @com.google.api.client.util.Key
      private java.lang.Integer accountId;

      /** The id for the account that will serve this creative.
       */
      public java.lang.Integer getAccountId() {
        return accountId;
      }

      /** The id for the account that will serve this creative. */
      public ListDeals setAccountId(java.lang.Integer accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The buyer-specific id for this creative. */
      @com.google.api.client.util.Key
      private java.lang.String buyerCreativeId;

      /** The buyer-specific id for this creative.
       */
      public java.lang.String getBuyerCreativeId() {
        return buyerCreativeId;
      }

      /** The buyer-specific id for this creative. */
      public ListDeals setBuyerCreativeId(java.lang.String buyerCreativeId) {
        this.buyerCreativeId = buyerCreativeId;
        return this;
      }

      @Override
      public ListDeals set(String parameterName, Object value) {
        return (ListDeals) super.set(parameterName, value);
      }
    }
    /**
     * Remove a deal id associated with the creative.
     *
     * Create a request for the method "creatives.removeDeal".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link RemoveDeal#execute()} method to invoke the remote operation.
     *
     * @param accountId The id for the account that will serve this creative.
     * @param buyerCreativeId The buyer-specific id for this creative.
     * @param dealId The id of the deal id to disassociate with this creative.
     * @return the request
     */
    public RemoveDeal removeDeal(java.lang.Integer accountId, java.lang.String buyerCreativeId, java.lang.Long dealId) throws java.io.IOException {
      RemoveDeal result = new RemoveDeal(accountId, buyerCreativeId, dealId);
      initialize(result);
      return result;
    }

    public class RemoveDeal extends AdExchangeBuyerRequest<Void> {

      private static final String REST_PATH = "creatives/{accountId}/{buyerCreativeId}/removeDeal/{dealId}";

      /**
       * Remove a deal id associated with the creative.
       *
       * Create a request for the method "creatives.removeDeal".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link RemoveDeal#execute()} method to invoke the remote
       * operation. <p> {@link
       * RemoveDeal#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The id for the account that will serve this creative.
       * @param buyerCreativeId The buyer-specific id for this creative.
       * @param dealId The id of the deal id to disassociate with this creative.
       * @since 1.13
       */
      protected RemoveDeal(java.lang.Integer accountId, java.lang.String buyerCreativeId, java.lang.Long dealId) {
        super(AdExchangeBuyer.this, "POST", REST_PATH, null, Void.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.buyerCreativeId = com.google.api.client.util.Preconditions.checkNotNull(buyerCreativeId, "Required parameter buyerCreativeId must be specified.");
        this.dealId = com.google.api.client.util.Preconditions.checkNotNull(dealId, "Required parameter dealId must be specified.");
      }

      @Override
      public RemoveDeal setAlt(java.lang.String alt) {
        return (RemoveDeal) super.setAlt(alt);
      }

      @Override
      public RemoveDeal setFields(java.lang.String fields) {
        return (RemoveDeal) super.setFields(fields);
      }

      @Override
      public RemoveDeal setKey(java.lang.String key) {
        return (RemoveDeal) super.setKey(key);
      }

      @Override
      public RemoveDeal setOauthToken(java.lang.String oauthToken) {
        return (RemoveDeal) super.setOauthToken(oauthToken);
      }

      @Override
      public RemoveDeal setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RemoveDeal) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RemoveDeal setQuotaUser(java.lang.String quotaUser) {
        return (RemoveDeal) super.setQuotaUser(quotaUser);
      }

      @Override
      public RemoveDeal setUserIp(java.lang.String userIp) {
        return (RemoveDeal) super.setUserIp(userIp);
      }

      /** The id for the account that will serve this creative. */
      @com.google.api.client.util.Key
      private java.lang.Integer accountId;

      /** The id for the account that will serve this creative.
       */
      public java.lang.Integer getAccountId() {
        return accountId;
      }

      /** The id for the account that will serve this creative. */
      public RemoveDeal setAccountId(java.lang.Integer accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The buyer-specific id for this creative. */
      @com.google.api.client.util.Key
      private java.lang.String buyerCreativeId;

      /** The buyer-specific id for this creative.
       */
      public java.lang.String getBuyerCreativeId() {
        return buyerCreativeId;
      }

      /** The buyer-specific id for this creative. */
      public RemoveDeal setBuyerCreativeId(java.lang.String buyerCreativeId) {
        this.buyerCreativeId = buyerCreativeId;
        return this;
      }

      /** The id of the deal id to disassociate with this creative. */
      @com.google.api.client.util.Key
      private java.lang.Long dealId;

      /** The id of the deal id to disassociate with this creative.
       */
      public java.lang.Long getDealId() {
        return dealId;
      }

      /** The id of the deal id to disassociate with this creative. */
      public RemoveDeal setDealId(java.lang.Long dealId) {
        this.dealId = dealId;
        return this;
      }

      @Override
      public RemoveDeal set(String parameterName, Object value) {
        return (RemoveDeal) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Marketplacedeals collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdExchangeBuyer adexchangebuyer = new AdExchangeBuyer(...);}
   *   {@code AdExchangeBuyer.Marketplacedeals.List request = adexchangebuyer.marketplacedeals().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Marketplacedeals marketplacedeals() {
    return new Marketplacedeals();
  }

  /**
   * The "marketplacedeals" collection of methods.
   */
  public class Marketplacedeals {

    /**
     * Delete the specified deals from the proposal
     *
     * Create a request for the method "marketplacedeals.delete".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param proposalId The proposalId to delete deals from.
     * @param content the {@link com.google.api.services.adexchangebuyer.model.DeleteOrderDealsRequest}
     * @return the request
     */
    public Delete delete(java.lang.String proposalId, com.google.api.services.adexchangebuyer.model.DeleteOrderDealsRequest content) throws java.io.IOException {
      Delete result = new Delete(proposalId, content);
      initialize(result);
      return result;
    }

    public class Delete extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.DeleteOrderDealsResponse> {

      private static final String REST_PATH = "proposals/{proposalId}/deals/delete";

      /**
       * Delete the specified deals from the proposal
       *
       * Create a request for the method "marketplacedeals.delete".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param proposalId The proposalId to delete deals from.
       * @param content the {@link com.google.api.services.adexchangebuyer.model.DeleteOrderDealsRequest}
       * @since 1.13
       */
      protected Delete(java.lang.String proposalId, com.google.api.services.adexchangebuyer.model.DeleteOrderDealsRequest content) {
        super(AdExchangeBuyer.this, "POST", REST_PATH, content, com.google.api.services.adexchangebuyer.model.DeleteOrderDealsResponse.class);
        this.proposalId = com.google.api.client.util.Preconditions.checkNotNull(proposalId, "Required parameter proposalId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** The proposalId to delete deals from. */
      @com.google.api.client.util.Key
      private java.lang.String proposalId;

      /** The proposalId to delete deals from.
       */
      public java.lang.String getProposalId() {
        return proposalId;
      }

      /** The proposalId to delete deals from. */
      public Delete setProposalId(java.lang.String proposalId) {
        this.proposalId = proposalId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Add new deals for the specified proposal
     *
     * Create a request for the method "marketplacedeals.insert".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param proposalId proposalId for which deals need to be added.
     * @param content the {@link com.google.api.services.adexchangebuyer.model.AddOrderDealsRequest}
     * @return the request
     */
    public Insert insert(java.lang.String proposalId, com.google.api.services.adexchangebuyer.model.AddOrderDealsRequest content) throws java.io.IOException {
      Insert result = new Insert(proposalId, content);
      initialize(result);
      return result;
    }

    public class Insert extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.AddOrderDealsResponse> {

      private static final String REST_PATH = "proposals/{proposalId}/deals/insert";

      /**
       * Add new deals for the specified proposal
       *
       * Create a request for the method "marketplacedeals.insert".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param proposalId proposalId for which deals need to be added.
       * @param content the {@link com.google.api.services.adexchangebuyer.model.AddOrderDealsRequest}
       * @since 1.13
       */
      protected Insert(java.lang.String proposalId, com.google.api.services.adexchangebuyer.model.AddOrderDealsRequest content) {
        super(AdExchangeBuyer.this, "POST", REST_PATH, content, com.google.api.services.adexchangebuyer.model.AddOrderDealsResponse.class);
        this.proposalId = com.google.api.client.util.Preconditions.checkNotNull(proposalId, "Required parameter proposalId must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** proposalId for which deals need to be added. */
      @com.google.api.client.util.Key
      private java.lang.String proposalId;

      /** proposalId for which deals need to be added.
       */
      public java.lang.String getProposalId() {
        return proposalId;
      }

      /** proposalId for which deals need to be added. */
      public Insert setProposalId(java.lang.String proposalId) {
        this.proposalId = proposalId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * List all the deals for a given proposal
     *
     * Create a request for the method "marketplacedeals.list".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param proposalId The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of
     *        the URL.
     * @return the request
     */
    public List list(java.lang.String proposalId) throws java.io.IOException {
      List result = new List(proposalId);
      initialize(result);
      return result;
    }

    public class List extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.GetOrderDealsResponse> {

      private static final String REST_PATH = "proposals/{proposalId}/deals";

      /**
       * List all the deals for a given proposal
       *
       * Create a request for the method "marketplacedeals.list".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param proposalId The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of
     *        the URL.
       * @since 1.13
       */
      protected List(java.lang.String proposalId) {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.GetOrderDealsResponse.class);
        this.proposalId = com.google.api.client.util.Preconditions.checkNotNull(proposalId, "Required parameter proposalId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /**
       * The proposalId to get deals for. To search across all proposals specify order_id = '-' as
       * part of the URL.
       */
      @com.google.api.client.util.Key
      private java.lang.String proposalId;

      /** The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of
     the URL.
       */
      public java.lang.String getProposalId() {
        return proposalId;
      }

      /**
       * The proposalId to get deals for. To search across all proposals specify order_id = '-' as
       * part of the URL.
       */
      public List setProposalId(java.lang.String proposalId) {
        this.proposalId = proposalId;
        return this;
      }

      /** Query string to retrieve specific deals. */
      @com.google.api.client.util.Key
      private java.lang.String pqlQuery;

      /** Query string to retrieve specific deals.
       */
      public java.lang.String getPqlQuery() {
        return pqlQuery;
      }

      /** Query string to retrieve specific deals. */
      public List setPqlQuery(java.lang.String pqlQuery) {
        this.pqlQuery = pqlQuery;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Replaces all the deals in the proposal with the passed in deals
     *
     * Create a request for the method "marketplacedeals.update".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param proposalId The proposalId to edit deals on.
     * @param content the {@link com.google.api.services.adexchangebuyer.model.EditAllOrderDealsRequest}
     * @return the request
     */
    public Update update(java.lang.String proposalId, com.google.api.services.adexchangebuyer.model.EditAllOrderDealsRequest content) throws java.io.IOException {
      Update result = new Update(proposalId, content);
      initialize(result);
      return result;
    }

    public class Update extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.EditAllOrderDealsResponse> {

      private static final String REST_PATH = "proposals/{proposalId}/deals/update";

      /**
       * Replaces all the deals in the proposal with the passed in deals
       *
       * Create a request for the method "marketplacedeals.update".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param proposalId The proposalId to edit deals on.
       * @param content the {@link com.google.api.services.adexchangebuyer.model.EditAllOrderDealsRequest}
       * @since 1.13
       */
      protected Update(java.lang.String proposalId, com.google.api.services.adexchangebuyer.model.EditAllOrderDealsRequest content) {
        super(AdExchangeBuyer.this, "POST", REST_PATH, content, com.google.api.services.adexchangebuyer.model.EditAllOrderDealsResponse.class);
        this.proposalId = com.google.api.client.util.Preconditions.checkNotNull(proposalId, "Required parameter proposalId must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** The proposalId to edit deals on. */
      @com.google.api.client.util.Key
      private java.lang.String proposalId;

      /** The proposalId to edit deals on.
       */
      public java.lang.String getProposalId() {
        return proposalId;
      }

      /** The proposalId to edit deals on. */
      public Update setProposalId(java.lang.String proposalId) {
        this.proposalId = proposalId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Marketplacenotes collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdExchangeBuyer adexchangebuyer = new AdExchangeBuyer(...);}
   *   {@code AdExchangeBuyer.Marketplacenotes.List request = adexchangebuyer.marketplacenotes().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Marketplacenotes marketplacenotes() {
    return new Marketplacenotes();
  }

  /**
   * The "marketplacenotes" collection of methods.
   */
  public class Marketplacenotes {

    /**
     * Add notes to the proposal
     *
     * Create a request for the method "marketplacenotes.insert".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param proposalId The proposalId to add notes for.
     * @param content the {@link com.google.api.services.adexchangebuyer.model.AddOrderNotesRequest}
     * @return the request
     */
    public Insert insert(java.lang.String proposalId, com.google.api.services.adexchangebuyer.model.AddOrderNotesRequest content) throws java.io.IOException {
      Insert result = new Insert(proposalId, content);
      initialize(result);
      return result;
    }

    public class Insert extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.AddOrderNotesResponse> {

      private static final String REST_PATH = "proposals/{proposalId}/notes/insert";

      /**
       * Add notes to the proposal
       *
       * Create a request for the method "marketplacenotes.insert".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param proposalId The proposalId to add notes for.
       * @param content the {@link com.google.api.services.adexchangebuyer.model.AddOrderNotesRequest}
       * @since 1.13
       */
      protected Insert(java.lang.String proposalId, com.google.api.services.adexchangebuyer.model.AddOrderNotesRequest content) {
        super(AdExchangeBuyer.this, "POST", REST_PATH, content, com.google.api.services.adexchangebuyer.model.AddOrderNotesResponse.class);
        this.proposalId = com.google.api.client.util.Preconditions.checkNotNull(proposalId, "Required parameter proposalId must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** The proposalId to add notes for. */
      @com.google.api.client.util.Key
      private java.lang.String proposalId;

      /** The proposalId to add notes for.
       */
      public java.lang.String getProposalId() {
        return proposalId;
      }

      /** The proposalId to add notes for. */
      public Insert setProposalId(java.lang.String proposalId) {
        this.proposalId = proposalId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Get all the notes associated with a proposal
     *
     * Create a request for the method "marketplacenotes.list".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param proposalId The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of
     *        the URL.
     * @return the request
     */
    public List list(java.lang.String proposalId) throws java.io.IOException {
      List result = new List(proposalId);
      initialize(result);
      return result;
    }

    public class List extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.GetOrderNotesResponse> {

      private static final String REST_PATH = "proposals/{proposalId}/notes";

      /**
       * Get all the notes associated with a proposal
       *
       * Create a request for the method "marketplacenotes.list".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param proposalId The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of
     *        the URL.
       * @since 1.13
       */
      protected List(java.lang.String proposalId) {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.GetOrderNotesResponse.class);
        this.proposalId = com.google.api.client.util.Preconditions.checkNotNull(proposalId, "Required parameter proposalId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /**
       * The proposalId to get notes for. To search across all proposals specify order_id = '-' as
       * part of the URL.
       */
      @com.google.api.client.util.Key
      private java.lang.String proposalId;

      /** The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of
     the URL.
       */
      public java.lang.String getProposalId() {
        return proposalId;
      }

      /**
       * The proposalId to get notes for. To search across all proposals specify order_id = '-' as
       * part of the URL.
       */
      public List setProposalId(java.lang.String proposalId) {
        this.proposalId = proposalId;
        return this;
      }

      /**
       * Query string to retrieve specific notes. To search the text contents of notes, please use
       * syntax like "WHERE note.note = "foo" or "WHERE note.note LIKE "%bar%"
       */
      @com.google.api.client.util.Key
      private java.lang.String pqlQuery;

      /** Query string to retrieve specific notes. To search the text contents of notes, please use syntax
     like "WHERE note.note = "foo" or "WHERE note.note LIKE "%bar%"
       */
      public java.lang.String getPqlQuery() {
        return pqlQuery;
      }

      /**
       * Query string to retrieve specific notes. To search the text contents of notes, please use
       * syntax like "WHERE note.note = "foo" or "WHERE note.note LIKE "%bar%"
       */
      public List setPqlQuery(java.lang.String pqlQuery) {
        this.pqlQuery = pqlQuery;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Marketplaceprivateauction collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdExchangeBuyer adexchangebuyer = new AdExchangeBuyer(...);}
   *   {@code AdExchangeBuyer.Marketplaceprivateauction.List request = adexchangebuyer.marketplaceprivateauction().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Marketplaceprivateauction marketplaceprivateauction() {
    return new Marketplaceprivateauction();
  }

  /**
   * The "marketplaceprivateauction" collection of methods.
   */
  public class Marketplaceprivateauction {

    /**
     * Update a given private auction proposal
     *
     * Create a request for the method "marketplaceprivateauction.updateproposal".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Updateproposal#execute()} method to invoke the remote
     * operation.
     *
     * @param privateAuctionId The private auction id to be updated.
     * @param content the {@link com.google.api.services.adexchangebuyer.model.UpdatePrivateAuctionProposalRequest}
     * @return the request
     */
    public Updateproposal updateproposal(java.lang.String privateAuctionId, com.google.api.services.adexchangebuyer.model.UpdatePrivateAuctionProposalRequest content) throws java.io.IOException {
      Updateproposal result = new Updateproposal(privateAuctionId, content);
      initialize(result);
      return result;
    }

    public class Updateproposal extends AdExchangeBuyerRequest<Void> {

      private static final String REST_PATH = "privateauction/{privateAuctionId}/updateproposal";

      /**
       * Update a given private auction proposal
       *
       * Create a request for the method "marketplaceprivateauction.updateproposal".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Updateproposal#execute()} method to invoke the remote
       * operation. <p> {@link Updateproposal#initialize(com.google.api.client.googleapis.services.Abstr
       * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param privateAuctionId The private auction id to be updated.
       * @param content the {@link com.google.api.services.adexchangebuyer.model.UpdatePrivateAuctionProposalRequest}
       * @since 1.13
       */
      protected Updateproposal(java.lang.String privateAuctionId, com.google.api.services.adexchangebuyer.model.UpdatePrivateAuctionProposalRequest content) {
        super(AdExchangeBuyer.this, "POST", REST_PATH, content, Void.class);
        this.privateAuctionId = com.google.api.client.util.Preconditions.checkNotNull(privateAuctionId, "Required parameter privateAuctionId must be specified.");
      }

      @Override
      public Updateproposal setAlt(java.lang.String alt) {
        return (Updateproposal) super.setAlt(alt);
      }

      @Override
      public Updateproposal setFields(java.lang.String fields) {
        return (Updateproposal) super.setFields(fields);
      }

      @Override
      public Updateproposal setKey(java.lang.String key) {
        return (Updateproposal) super.setKey(key);
      }

      @Override
      public Updateproposal setOauthToken(java.lang.String oauthToken) {
        return (Updateproposal) super.setOauthToken(oauthToken);
      }

      @Override
      public Updateproposal setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Updateproposal) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Updateproposal setQuotaUser(java.lang.String quotaUser) {
        return (Updateproposal) super.setQuotaUser(quotaUser);
      }

      @Override
      public Updateproposal setUserIp(java.lang.String userIp) {
        return (Updateproposal) super.setUserIp(userIp);
      }

      /** The private auction id to be updated. */
      @com.google.api.client.util.Key
      private java.lang.String privateAuctionId;

      /** The private auction id to be updated.
       */
      public java.lang.String getPrivateAuctionId() {
        return privateAuctionId;
      }

      /** The private auction id to be updated. */
      public Updateproposal setPrivateAuctionId(java.lang.String privateAuctionId) {
        this.privateAuctionId = privateAuctionId;
        return this;
      }

      @Override
      public Updateproposal set(String parameterName, Object value) {
        return (Updateproposal) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the PerformanceReport collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdExchangeBuyer adexchangebuyer = new AdExchangeBuyer(...);}
   *   {@code AdExchangeBuyer.PerformanceReport.List request = adexchangebuyer.performanceReport().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public PerformanceReport performanceReport() {
    return new PerformanceReport();
  }

  /**
   * The "performanceReport" collection of methods.
   */
  public class PerformanceReport {

    /**
     * Retrieves the authenticated user's list of performance metrics.
     *
     * Create a request for the method "performanceReport.list".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param accountId The account id to get the reports.
     * @param endDateTime The end time of the report in ISO 8601 timestamp format using UTC.
     * @param startDateTime The start time of the report in ISO 8601 timestamp format using UTC.
     * @return the request
     */
    public List list(java.lang.Long accountId, java.lang.String endDateTime, java.lang.String startDateTime) throws java.io.IOException {
      List result = new List(accountId, endDateTime, startDateTime);
      initialize(result);
      return result;
    }

    public class List extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.PerformanceReportList> {

      private static final String REST_PATH = "performancereport";

      /**
       * Retrieves the authenticated user's list of performance metrics.
       *
       * Create a request for the method "performanceReport.list".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The account id to get the reports.
       * @param endDateTime The end time of the report in ISO 8601 timestamp format using UTC.
       * @param startDateTime The start time of the report in ISO 8601 timestamp format using UTC.
       * @since 1.13
       */
      protected List(java.lang.Long accountId, java.lang.String endDateTime, java.lang.String startDateTime) {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.PerformanceReportList.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.endDateTime = com.google.api.client.util.Preconditions.checkNotNull(endDateTime, "Required parameter endDateTime must be specified.");
        this.startDateTime = com.google.api.client.util.Preconditions.checkNotNull(startDateTime, "Required parameter startDateTime must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** The account id to get the reports. */
      @com.google.api.client.util.Key
      private java.lang.Long accountId;

      /** The account id to get the reports.
       */
      public java.lang.Long getAccountId() {
        return accountId;
      }

      /** The account id to get the reports. */
      public List setAccountId(java.lang.Long accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The end time of the report in ISO 8601 timestamp format using UTC. */
      @com.google.api.client.util.Key
      private java.lang.String endDateTime;

      /** The end time of the report in ISO 8601 timestamp format using UTC.
       */
      public java.lang.String getEndDateTime() {
        return endDateTime;
      }

      /** The end time of the report in ISO 8601 timestamp format using UTC. */
      public List setEndDateTime(java.lang.String endDateTime) {
        this.endDateTime = endDateTime;
        return this;
      }

      /** The start time of the report in ISO 8601 timestamp format using UTC. */
      @com.google.api.client.util.Key
      private java.lang.String startDateTime;

      /** The start time of the report in ISO 8601 timestamp format using UTC.
       */
      public java.lang.String getStartDateTime() {
        return startDateTime;
      }

      /** The start time of the report in ISO 8601 timestamp format using UTC. */
      public List setStartDateTime(java.lang.String startDateTime) {
        this.startDateTime = startDateTime;
        return this;
      }

      /**
       * Maximum number of entries returned on one result page. If not set, the default is 100.
       * Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of entries returned on one result page. If not set, the default is 100. Optional.

     [minimum: 1] [maximum: 1000]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /**
       * Maximum number of entries returned on one result page. If not set, the default is 100.
       * Optional.
       */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * A continuation token, used to page through performance reports. To retrieve the next page,
       * set this parameter to the value of "nextPageToken" from the previous response. Optional.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** A continuation token, used to page through performance reports. To retrieve the next page, set this
     parameter to the value of "nextPageToken" from the previous response. Optional.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * A continuation token, used to page through performance reports. To retrieve the next page,
       * set this parameter to the value of "nextPageToken" from the previous response. Optional.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the PretargetingConfig collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdExchangeBuyer adexchangebuyer = new AdExchangeBuyer(...);}
   *   {@code AdExchangeBuyer.PretargetingConfig.List request = adexchangebuyer.pretargetingConfig().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public PretargetingConfig pretargetingConfig() {
    return new PretargetingConfig();
  }

  /**
   * The "pretargetingConfig" collection of methods.
   */
  public class PretargetingConfig {

    /**
     * Deletes an existing pretargeting config.
     *
     * Create a request for the method "pretargetingConfig.delete".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param accountId The account id to delete the pretargeting config for.
     * @param configId The specific id of the configuration to delete.
     * @return the request
     */
    public Delete delete(java.lang.Long accountId, java.lang.Long configId) throws java.io.IOException {
      Delete result = new Delete(accountId, configId);
      initialize(result);
      return result;
    }

    public class Delete extends AdExchangeBuyerRequest<Void> {

      private static final String REST_PATH = "pretargetingconfigs/{accountId}/{configId}";

      /**
       * Deletes an existing pretargeting config.
       *
       * Create a request for the method "pretargetingConfig.delete".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The account id to delete the pretargeting config for.
       * @param configId The specific id of the configuration to delete.
       * @since 1.13
       */
      protected Delete(java.lang.Long accountId, java.lang.Long configId) {
        super(AdExchangeBuyer.this, "DELETE", REST_PATH, null, Void.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.configId = com.google.api.client.util.Preconditions.checkNotNull(configId, "Required parameter configId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** The account id to delete the pretargeting config for. */
      @com.google.api.client.util.Key
      private java.lang.Long accountId;

      /** The account id to delete the pretargeting config for.
       */
      public java.lang.Long getAccountId() {
        return accountId;
      }

      /** The account id to delete the pretargeting config for. */
      public Delete setAccountId(java.lang.Long accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The specific id of the configuration to delete. */
      @com.google.api.client.util.Key
      private java.lang.Long configId;

      /** The specific id of the configuration to delete.
       */
      public java.lang.Long getConfigId() {
        return configId;
      }

      /** The specific id of the configuration to delete. */
      public Delete setConfigId(java.lang.Long configId) {
        this.configId = configId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Gets a specific pretargeting configuration
     *
     * Create a request for the method "pretargetingConfig.get".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param accountId The account id to get the pretargeting config for.
     * @param configId The specific id of the configuration to retrieve.
     * @return the request
     */
    public Get get(java.lang.Long accountId, java.lang.Long configId) throws java.io.IOException {
      Get result = new Get(accountId, configId);
      initialize(result);
      return result;
    }

    public class Get extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.PretargetingConfig> {

      private static final String REST_PATH = "pretargetingconfigs/{accountId}/{configId}";

      /**
       * Gets a specific pretargeting configuration
       *
       * Create a request for the method "pretargetingConfig.get".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The account id to get the pretargeting config for.
       * @param configId The specific id of the configuration to retrieve.
       * @since 1.13
       */
      protected Get(java.lang.Long accountId, java.lang.Long configId) {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.PretargetingConfig.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.configId = com.google.api.client.util.Preconditions.checkNotNull(configId, "Required parameter configId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The account id to get the pretargeting config for. */
      @com.google.api.client.util.Key
      private java.lang.Long accountId;

      /** The account id to get the pretargeting config for.
       */
      public java.lang.Long getAccountId() {
        return accountId;
      }

      /** The account id to get the pretargeting config for. */
      public Get setAccountId(java.lang.Long accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The specific id of the configuration to retrieve. */
      @com.google.api.client.util.Key
      private java.lang.Long configId;

      /** The specific id of the configuration to retrieve.
       */
      public java.lang.Long getConfigId() {
        return configId;
      }

      /** The specific id of the configuration to retrieve. */
      public Get setConfigId(java.lang.Long configId) {
        this.configId = configId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Inserts a new pretargeting configuration.
     *
     * Create a request for the method "pretargetingConfig.insert".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param accountId The account id to insert the pretargeting config for.
     * @param content the {@link com.google.api.services.adexchangebuyer.model.PretargetingConfig}
     * @return the request
     */
    public Insert insert(java.lang.Long accountId, com.google.api.services.adexchangebuyer.model.PretargetingConfig content) throws java.io.IOException {
      Insert result = new Insert(accountId, content);
      initialize(result);
      return result;
    }

    public class Insert extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.PretargetingConfig> {

      private static final String REST_PATH = "pretargetingconfigs/{accountId}";

      /**
       * Inserts a new pretargeting configuration.
       *
       * Create a request for the method "pretargetingConfig.insert".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The account id to insert the pretargeting config for.
       * @param content the {@link com.google.api.services.adexchangebuyer.model.PretargetingConfig}
       * @since 1.13
       */
      protected Insert(java.lang.Long accountId, com.google.api.services.adexchangebuyer.model.PretargetingConfig content) {
        super(AdExchangeBuyer.this, "POST", REST_PATH, content, com.google.api.services.adexchangebuyer.model.PretargetingConfig.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** The account id to insert the pretargeting config for. */
      @com.google.api.client.util.Key
      private java.lang.Long accountId;

      /** The account id to insert the pretargeting config for.
       */
      public java.lang.Long getAccountId() {
        return accountId;
      }

      /** The account id to insert the pretargeting config for. */
      public Insert setAccountId(java.lang.Long accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of the authenticated user's pretargeting configurations.
     *
     * Create a request for the method "pretargetingConfig.list".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param accountId The account id to get the pretargeting configs for.
     * @return the request
     */
    public List list(java.lang.Long accountId) throws java.io.IOException {
      List result = new List(accountId);
      initialize(result);
      return result;
    }

    public class List extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.PretargetingConfigList> {

      private static final String REST_PATH = "pretargetingconfigs/{accountId}";

      /**
       * Retrieves a list of the authenticated user's pretargeting configurations.
       *
       * Create a request for the method "pretargetingConfig.list".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The account id to get the pretargeting configs for.
       * @since 1.13
       */
      protected List(java.lang.Long accountId) {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.PretargetingConfigList.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** The account id to get the pretargeting configs for. */
      @com.google.api.client.util.Key
      private java.lang.Long accountId;

      /** The account id to get the pretargeting configs for.
       */
      public java.lang.Long getAccountId() {
        return accountId;
      }

      /** The account id to get the pretargeting configs for. */
      public List setAccountId(java.lang.Long accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates an existing pretargeting config. This method supports patch semantics.
     *
     * Create a request for the method "pretargetingConfig.patch".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param accountId The account id to update the pretargeting config for.
     * @param configId The specific id of the configuration to update.
     * @param content the {@link com.google.api.services.adexchangebuyer.model.PretargetingConfig}
     * @return the request
     */
    public Patch patch(java.lang.Long accountId, java.lang.Long configId, com.google.api.services.adexchangebuyer.model.PretargetingConfig content) throws java.io.IOException {
      Patch result = new Patch(accountId, configId, content);
      initialize(result);
      return result;
    }

    public class Patch extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.PretargetingConfig> {

      private static final String REST_PATH = "pretargetingconfigs/{accountId}/{configId}";

      /**
       * Updates an existing pretargeting config. This method supports patch semantics.
       *
       * Create a request for the method "pretargetingConfig.patch".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The account id to update the pretargeting config for.
       * @param configId The specific id of the configuration to update.
       * @param content the {@link com.google.api.services.adexchangebuyer.model.PretargetingConfig}
       * @since 1.13
       */
      protected Patch(java.lang.Long accountId, java.lang.Long configId, com.google.api.services.adexchangebuyer.model.PretargetingConfig content) {
        super(AdExchangeBuyer.this, "PATCH", REST_PATH, content, com.google.api.services.adexchangebuyer.model.PretargetingConfig.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.configId = com.google.api.client.util.Preconditions.checkNotNull(configId, "Required parameter configId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** The account id to update the pretargeting config for. */
      @com.google.api.client.util.Key
      private java.lang.Long accountId;

      /** The account id to update the pretargeting config for.
       */
      public java.lang.Long getAccountId() {
        return accountId;
      }

      /** The account id to update the pretargeting config for. */
      public Patch setAccountId(java.lang.Long accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The specific id of the configuration to update. */
      @com.google.api.client.util.Key
      private java.lang.Long configId;

      /** The specific id of the configuration to update.
       */
      public java.lang.Long getConfigId() {
        return configId;
      }

      /** The specific id of the configuration to update. */
      public Patch setConfigId(java.lang.Long configId) {
        this.configId = configId;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Updates an existing pretargeting config.
     *
     * Create a request for the method "pretargetingConfig.update".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param accountId The account id to update the pretargeting config for.
     * @param configId The specific id of the configuration to update.
     * @param content the {@link com.google.api.services.adexchangebuyer.model.PretargetingConfig}
     * @return the request
     */
    public Update update(java.lang.Long accountId, java.lang.Long configId, com.google.api.services.adexchangebuyer.model.PretargetingConfig content) throws java.io.IOException {
      Update result = new Update(accountId, configId, content);
      initialize(result);
      return result;
    }

    public class Update extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.PretargetingConfig> {

      private static final String REST_PATH = "pretargetingconfigs/{accountId}/{configId}";

      /**
       * Updates an existing pretargeting config.
       *
       * Create a request for the method "pretargetingConfig.update".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The account id to update the pretargeting config for.
       * @param configId The specific id of the configuration to update.
       * @param content the {@link com.google.api.services.adexchangebuyer.model.PretargetingConfig}
       * @since 1.13
       */
      protected Update(java.lang.Long accountId, java.lang.Long configId, com.google.api.services.adexchangebuyer.model.PretargetingConfig content) {
        super(AdExchangeBuyer.this, "PUT", REST_PATH, content, com.google.api.services.adexchangebuyer.model.PretargetingConfig.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        this.configId = com.google.api.client.util.Preconditions.checkNotNull(configId, "Required parameter configId must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** The account id to update the pretargeting config for. */
      @com.google.api.client.util.Key
      private java.lang.Long accountId;

      /** The account id to update the pretargeting config for.
       */
      public java.lang.Long getAccountId() {
        return accountId;
      }

      /** The account id to update the pretargeting config for. */
      public Update setAccountId(java.lang.Long accountId) {
        this.accountId = accountId;
        return this;
      }

      /** The specific id of the configuration to update. */
      @com.google.api.client.util.Key
      private java.lang.Long configId;

      /** The specific id of the configuration to update.
       */
      public java.lang.Long getConfigId() {
        return configId;
      }

      /** The specific id of the configuration to update. */
      public Update setConfigId(java.lang.Long configId) {
        this.configId = configId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Products collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdExchangeBuyer adexchangebuyer = new AdExchangeBuyer(...);}
   *   {@code AdExchangeBuyer.Products.List request = adexchangebuyer.products().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Products products() {
    return new Products();
  }

  /**
   * The "products" collection of methods.
   */
  public class Products {

    /**
     * Gets the requested product by id.
     *
     * Create a request for the method "products.get".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param productId The id for the product to get the head revision for.
     * @return the request
     */
    public Get get(java.lang.String productId) throws java.io.IOException {
      Get result = new Get(productId);
      initialize(result);
      return result;
    }

    public class Get extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.Product> {

      private static final String REST_PATH = "products/{productId}";

      /**
       * Gets the requested product by id.
       *
       * Create a request for the method "products.get".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param productId The id for the product to get the head revision for.
       * @since 1.13
       */
      protected Get(java.lang.String productId) {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.Product.class);
        this.productId = com.google.api.client.util.Preconditions.checkNotNull(productId, "Required parameter productId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The id for the product to get the head revision for. */
      @com.google.api.client.util.Key
      private java.lang.String productId;

      /** The id for the product to get the head revision for.
       */
      public java.lang.String getProductId() {
        return productId;
      }

      /** The id for the product to get the head revision for. */
      public Get setProductId(java.lang.String productId) {
        this.productId = productId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Gets the requested product.
     *
     * Create a request for the method "products.search".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Search#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Search search() throws java.io.IOException {
      Search result = new Search();
      initialize(result);
      return result;
    }

    public class Search extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.GetOffersResponse> {

      private static final String REST_PATH = "products/search";

      /**
       * Gets the requested product.
       *
       * Create a request for the method "products.search".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Search#execute()} method to invoke the remote operation.
       * <p> {@link
       * Search#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Search() {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.GetOffersResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Search setAlt(java.lang.String alt) {
        return (Search) super.setAlt(alt);
      }

      @Override
      public Search setFields(java.lang.String fields) {
        return (Search) super.setFields(fields);
      }

      @Override
      public Search setKey(java.lang.String key) {
        return (Search) super.setKey(key);
      }

      @Override
      public Search setOauthToken(java.lang.String oauthToken) {
        return (Search) super.setOauthToken(oauthToken);
      }

      @Override
      public Search setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Search) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Search setQuotaUser(java.lang.String quotaUser) {
        return (Search) super.setQuotaUser(quotaUser);
      }

      @Override
      public Search setUserIp(java.lang.String userIp) {
        return (Search) super.setUserIp(userIp);
      }

      /** The pql query used to query for products. */
      @com.google.api.client.util.Key
      private java.lang.String pqlQuery;

      /** The pql query used to query for products.
       */
      public java.lang.String getPqlQuery() {
        return pqlQuery;
      }

      /** The pql query used to query for products. */
      public Search setPqlQuery(java.lang.String pqlQuery) {
        this.pqlQuery = pqlQuery;
        return this;
      }

      @Override
      public Search set(String parameterName, Object value) {
        return (Search) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Proposals collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdExchangeBuyer adexchangebuyer = new AdExchangeBuyer(...);}
   *   {@code AdExchangeBuyer.Proposals.List request = adexchangebuyer.proposals().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Proposals proposals() {
    return new Proposals();
  }

  /**
   * The "proposals" collection of methods.
   */
  public class Proposals {

    /**
     * Get a proposal given its id
     *
     * Create a request for the method "proposals.get".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param proposalId Id of the proposal to retrieve.
     * @return the request
     */
    public Get get(java.lang.String proposalId) throws java.io.IOException {
      Get result = new Get(proposalId);
      initialize(result);
      return result;
    }

    public class Get extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.Proposal> {

      private static final String REST_PATH = "proposals/{proposalId}";

      /**
       * Get a proposal given its id
       *
       * Create a request for the method "proposals.get".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param proposalId Id of the proposal to retrieve.
       * @since 1.13
       */
      protected Get(java.lang.String proposalId) {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.Proposal.class);
        this.proposalId = com.google.api.client.util.Preconditions.checkNotNull(proposalId, "Required parameter proposalId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Id of the proposal to retrieve. */
      @com.google.api.client.util.Key
      private java.lang.String proposalId;

      /** Id of the proposal to retrieve.
       */
      public java.lang.String getProposalId() {
        return proposalId;
      }

      /** Id of the proposal to retrieve. */
      public Get setProposalId(java.lang.String proposalId) {
        this.proposalId = proposalId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create the given list of proposals
     *
     * Create a request for the method "proposals.insert".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.adexchangebuyer.model.CreateOrdersRequest}
     * @return the request
     */
    public Insert insert(com.google.api.services.adexchangebuyer.model.CreateOrdersRequest content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.CreateOrdersResponse> {

      private static final String REST_PATH = "proposals/insert";

      /**
       * Create the given list of proposals
       *
       * Create a request for the method "proposals.insert".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.adexchangebuyer.model.CreateOrdersRequest}
       * @since 1.13
       */
      protected Insert(com.google.api.services.adexchangebuyer.model.CreateOrdersRequest content) {
        super(AdExchangeBuyer.this, "POST", REST_PATH, content, com.google.api.services.adexchangebuyer.model.CreateOrdersResponse.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Update the given proposal. This method supports patch semantics.
     *
     * Create a request for the method "proposals.patch".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param proposalId The proposal id to update.
     * @param revisionNumber The last known revision number to update. If the head revision in the marketplace database has since
     *        changed, an error will be thrown. The caller should then fetch the latest proposal at head
     *        revision and retry the update at that revision.
     * @param updateAction The proposed action to take on the proposal. This field is required and it must be set when updating
     *        a proposal.
     * @param content the {@link com.google.api.services.adexchangebuyer.model.Proposal}
     * @return the request
     */
    public Patch patch(java.lang.String proposalId, java.lang.Long revisionNumber, java.lang.String updateAction, com.google.api.services.adexchangebuyer.model.Proposal content) throws java.io.IOException {
      Patch result = new Patch(proposalId, revisionNumber, updateAction, content);
      initialize(result);
      return result;
    }

    public class Patch extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.Proposal> {

      private static final String REST_PATH = "proposals/{proposalId}/{revisionNumber}/{updateAction}";

      /**
       * Update the given proposal. This method supports patch semantics.
       *
       * Create a request for the method "proposals.patch".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param proposalId The proposal id to update.
       * @param revisionNumber The last known revision number to update. If the head revision in the marketplace database has since
     *        changed, an error will be thrown. The caller should then fetch the latest proposal at head
     *        revision and retry the update at that revision.
       * @param updateAction The proposed action to take on the proposal. This field is required and it must be set when updating
     *        a proposal.
       * @param content the {@link com.google.api.services.adexchangebuyer.model.Proposal}
       * @since 1.13
       */
      protected Patch(java.lang.String proposalId, java.lang.Long revisionNumber, java.lang.String updateAction, com.google.api.services.adexchangebuyer.model.Proposal content) {
        super(AdExchangeBuyer.this, "PATCH", REST_PATH, content, com.google.api.services.adexchangebuyer.model.Proposal.class);
        this.proposalId = com.google.api.client.util.Preconditions.checkNotNull(proposalId, "Required parameter proposalId must be specified.");
        this.revisionNumber = com.google.api.client.util.Preconditions.checkNotNull(revisionNumber, "Required parameter revisionNumber must be specified.");
        this.updateAction = com.google.api.client.util.Preconditions.checkNotNull(updateAction, "Required parameter updateAction must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** The proposal id to update. */
      @com.google.api.client.util.Key
      private java.lang.String proposalId;

      /** The proposal id to update.
       */
      public java.lang.String getProposalId() {
        return proposalId;
      }

      /** The proposal id to update. */
      public Patch setProposalId(java.lang.String proposalId) {
        this.proposalId = proposalId;
        return this;
      }

      /**
       * The last known revision number to update. If the head revision in the marketplace database
       * has since changed, an error will be thrown. The caller should then fetch the latest
       * proposal at head revision and retry the update at that revision.
       */
      @com.google.api.client.util.Key
      private java.lang.Long revisionNumber;

      /** The last known revision number to update. If the head revision in the marketplace database has
     since changed, an error will be thrown. The caller should then fetch the latest proposal at head
     revision and retry the update at that revision.
       */
      public java.lang.Long getRevisionNumber() {
        return revisionNumber;
      }

      /**
       * The last known revision number to update. If the head revision in the marketplace database
       * has since changed, an error will be thrown. The caller should then fetch the latest
       * proposal at head revision and retry the update at that revision.
       */
      public Patch setRevisionNumber(java.lang.Long revisionNumber) {
        this.revisionNumber = revisionNumber;
        return this;
      }

      /**
       * The proposed action to take on the proposal. This field is required and it must be set when
       * updating a proposal.
       */
      @com.google.api.client.util.Key
      private java.lang.String updateAction;

      /** The proposed action to take on the proposal. This field is required and it must be set when
     updating a proposal.
       */
      public java.lang.String getUpdateAction() {
        return updateAction;
      }

      /**
       * The proposed action to take on the proposal. This field is required and it must be set when
       * updating a proposal.
       */
      public Patch setUpdateAction(java.lang.String updateAction) {
        this.updateAction = updateAction;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Search for proposals using pql query
     *
     * Create a request for the method "proposals.search".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Search#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Search search() throws java.io.IOException {
      Search result = new Search();
      initialize(result);
      return result;
    }

    public class Search extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.GetOrdersResponse> {

      private static final String REST_PATH = "proposals/search";

      /**
       * Search for proposals using pql query
       *
       * Create a request for the method "proposals.search".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Search#execute()} method to invoke the remote operation.
       * <p> {@link
       * Search#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Search() {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.GetOrdersResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Search setAlt(java.lang.String alt) {
        return (Search) super.setAlt(alt);
      }

      @Override
      public Search setFields(java.lang.String fields) {
        return (Search) super.setFields(fields);
      }

      @Override
      public Search setKey(java.lang.String key) {
        return (Search) super.setKey(key);
      }

      @Override
      public Search setOauthToken(java.lang.String oauthToken) {
        return (Search) super.setOauthToken(oauthToken);
      }

      @Override
      public Search setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Search) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Search setQuotaUser(java.lang.String quotaUser) {
        return (Search) super.setQuotaUser(quotaUser);
      }

      @Override
      public Search setUserIp(java.lang.String userIp) {
        return (Search) super.setUserIp(userIp);
      }

      /** Query string to retrieve specific proposals. */
      @com.google.api.client.util.Key
      private java.lang.String pqlQuery;

      /** Query string to retrieve specific proposals.
       */
      public java.lang.String getPqlQuery() {
        return pqlQuery;
      }

      /** Query string to retrieve specific proposals. */
      public Search setPqlQuery(java.lang.String pqlQuery) {
        this.pqlQuery = pqlQuery;
        return this;
      }

      @Override
      public Search set(String parameterName, Object value) {
        return (Search) super.set(parameterName, value);
      }
    }
    /**
     * Update the given proposal to indicate that setup has been completed.
     *
     * Create a request for the method "proposals.setupcomplete".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Setupcomplete#execute()} method to invoke the remote
     * operation.
     *
     * @param proposalId The proposal id for which the setup is complete
     * @return the request
     */
    public Setupcomplete setupcomplete(java.lang.String proposalId) throws java.io.IOException {
      Setupcomplete result = new Setupcomplete(proposalId);
      initialize(result);
      return result;
    }

    public class Setupcomplete extends AdExchangeBuyerRequest<Void> {

      private static final String REST_PATH = "proposals/{proposalId}/setupcomplete";

      /**
       * Update the given proposal to indicate that setup has been completed.
       *
       * Create a request for the method "proposals.setupcomplete".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Setupcomplete#execute()} method to invoke the remote
       * operation. <p> {@link Setupcomplete#initialize(com.google.api.client.googleapis.services.Abstra
       * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param proposalId The proposal id for which the setup is complete
       * @since 1.13
       */
      protected Setupcomplete(java.lang.String proposalId) {
        super(AdExchangeBuyer.this, "POST", REST_PATH, null, Void.class);
        this.proposalId = com.google.api.client.util.Preconditions.checkNotNull(proposalId, "Required parameter proposalId must be specified.");
      }

      @Override
      public Setupcomplete setAlt(java.lang.String alt) {
        return (Setupcomplete) super.setAlt(alt);
      }

      @Override
      public Setupcomplete setFields(java.lang.String fields) {
        return (Setupcomplete) super.setFields(fields);
      }

      @Override
      public Setupcomplete setKey(java.lang.String key) {
        return (Setupcomplete) super.setKey(key);
      }

      @Override
      public Setupcomplete setOauthToken(java.lang.String oauthToken) {
        return (Setupcomplete) super.setOauthToken(oauthToken);
      }

      @Override
      public Setupcomplete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Setupcomplete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Setupcomplete setQuotaUser(java.lang.String quotaUser) {
        return (Setupcomplete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Setupcomplete setUserIp(java.lang.String userIp) {
        return (Setupcomplete) super.setUserIp(userIp);
      }

      /** The proposal id for which the setup is complete */
      @com.google.api.client.util.Key
      private java.lang.String proposalId;

      /** The proposal id for which the setup is complete
       */
      public java.lang.String getProposalId() {
        return proposalId;
      }

      /** The proposal id for which the setup is complete */
      public Setupcomplete setProposalId(java.lang.String proposalId) {
        this.proposalId = proposalId;
        return this;
      }

      @Override
      public Setupcomplete set(String parameterName, Object value) {
        return (Setupcomplete) super.set(parameterName, value);
      }
    }
    /**
     * Update the given proposal
     *
     * Create a request for the method "proposals.update".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param proposalId The proposal id to update.
     * @param revisionNumber The last known revision number to update. If the head revision in the marketplace database has since
     *        changed, an error will be thrown. The caller should then fetch the latest proposal at head
     *        revision and retry the update at that revision.
     * @param updateAction The proposed action to take on the proposal. This field is required and it must be set when updating
     *        a proposal.
     * @param content the {@link com.google.api.services.adexchangebuyer.model.Proposal}
     * @return the request
     */
    public Update update(java.lang.String proposalId, java.lang.Long revisionNumber, java.lang.String updateAction, com.google.api.services.adexchangebuyer.model.Proposal content) throws java.io.IOException {
      Update result = new Update(proposalId, revisionNumber, updateAction, content);
      initialize(result);
      return result;
    }

    public class Update extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.Proposal> {

      private static final String REST_PATH = "proposals/{proposalId}/{revisionNumber}/{updateAction}";

      /**
       * Update the given proposal
       *
       * Create a request for the method "proposals.update".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param proposalId The proposal id to update.
       * @param revisionNumber The last known revision number to update. If the head revision in the marketplace database has since
     *        changed, an error will be thrown. The caller should then fetch the latest proposal at head
     *        revision and retry the update at that revision.
       * @param updateAction The proposed action to take on the proposal. This field is required and it must be set when updating
     *        a proposal.
       * @param content the {@link com.google.api.services.adexchangebuyer.model.Proposal}
       * @since 1.13
       */
      protected Update(java.lang.String proposalId, java.lang.Long revisionNumber, java.lang.String updateAction, com.google.api.services.adexchangebuyer.model.Proposal content) {
        super(AdExchangeBuyer.this, "PUT", REST_PATH, content, com.google.api.services.adexchangebuyer.model.Proposal.class);
        this.proposalId = com.google.api.client.util.Preconditions.checkNotNull(proposalId, "Required parameter proposalId must be specified.");
        this.revisionNumber = com.google.api.client.util.Preconditions.checkNotNull(revisionNumber, "Required parameter revisionNumber must be specified.");
        this.updateAction = com.google.api.client.util.Preconditions.checkNotNull(updateAction, "Required parameter updateAction must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** The proposal id to update. */
      @com.google.api.client.util.Key
      private java.lang.String proposalId;

      /** The proposal id to update.
       */
      public java.lang.String getProposalId() {
        return proposalId;
      }

      /** The proposal id to update. */
      public Update setProposalId(java.lang.String proposalId) {
        this.proposalId = proposalId;
        return this;
      }

      /**
       * The last known revision number to update. If the head revision in the marketplace database
       * has since changed, an error will be thrown. The caller should then fetch the latest
       * proposal at head revision and retry the update at that revision.
       */
      @com.google.api.client.util.Key
      private java.lang.Long revisionNumber;

      /** The last known revision number to update. If the head revision in the marketplace database has
     since changed, an error will be thrown. The caller should then fetch the latest proposal at head
     revision and retry the update at that revision.
       */
      public java.lang.Long getRevisionNumber() {
        return revisionNumber;
      }

      /**
       * The last known revision number to update. If the head revision in the marketplace database
       * has since changed, an error will be thrown. The caller should then fetch the latest
       * proposal at head revision and retry the update at that revision.
       */
      public Update setRevisionNumber(java.lang.Long revisionNumber) {
        this.revisionNumber = revisionNumber;
        return this;
      }

      /**
       * The proposed action to take on the proposal. This field is required and it must be set when
       * updating a proposal.
       */
      @com.google.api.client.util.Key
      private java.lang.String updateAction;

      /** The proposed action to take on the proposal. This field is required and it must be set when
     updating a proposal.
       */
      public java.lang.String getUpdateAction() {
        return updateAction;
      }

      /**
       * The proposed action to take on the proposal. This field is required and it must be set when
       * updating a proposal.
       */
      public Update setUpdateAction(java.lang.String updateAction) {
        this.updateAction = updateAction;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Pubprofiles collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdExchangeBuyer adexchangebuyer = new AdExchangeBuyer(...);}
   *   {@code AdExchangeBuyer.Pubprofiles.List request = adexchangebuyer.pubprofiles().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Pubprofiles pubprofiles() {
    return new Pubprofiles();
  }

  /**
   * The "pubprofiles" collection of methods.
   */
  public class Pubprofiles {

    /**
     * Gets the requested publisher profile(s) by publisher accountId.
     *
     * Create a request for the method "pubprofiles.list".
     *
     * This request holds the parameters needed by the adexchangebuyer server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param accountId The accountId of the publisher to get profiles for.
     * @return the request
     */
    public List list(java.lang.Integer accountId) throws java.io.IOException {
      List result = new List(accountId);
      initialize(result);
      return result;
    }

    public class List extends AdExchangeBuyerRequest<com.google.api.services.adexchangebuyer.model.GetPublisherProfilesByAccountIdResponse> {

      private static final String REST_PATH = "publisher/{accountId}/profiles";

      /**
       * Gets the requested publisher profile(s) by publisher accountId.
       *
       * Create a request for the method "pubprofiles.list".
       *
       * This request holds the parameters needed by the the adexchangebuyer server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId The accountId of the publisher to get profiles for.
       * @since 1.13
       */
      protected List(java.lang.Integer accountId) {
        super(AdExchangeBuyer.this, "GET", REST_PATH, null, com.google.api.services.adexchangebuyer.model.GetPublisherProfilesByAccountIdResponse.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** The accountId of the publisher to get profiles for. */
      @com.google.api.client.util.Key
      private java.lang.Integer accountId;

      /** The accountId of the publisher to get profiles for.
       */
      public java.lang.Integer getAccountId() {
        return accountId;
      }

      /** The accountId of the publisher to get profiles for. */
      public List setAccountId(java.lang.Integer accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link AdExchangeBuyer}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link AdExchangeBuyer}. */
    @Override
    public AdExchangeBuyer build() {
      return new AdExchangeBuyer(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link AdExchangeBuyerRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setAdExchangeBuyerRequestInitializer(
        AdExchangeBuyerRequestInitializer adexchangebuyerRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(adexchangebuyerRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
