/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.servicecontrol.v1.model;

/**
 * Report v2 extension proto for passing the resource metadata associated with a resource
 * create/update/delete/undelete event from ESF to Chemist. ResourceEvent proto should be serialized
 * into the ReportRequest.operations.extensions.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Service Control API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class V1ResourceEvent extends com.google.api.client.json.GenericJson {

  /**
   * The destinations field determines which backend services should handle the event. This should
   * be specified as a comma-delimited string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String destinations;

  /**
   * The parent resource for the resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Resource parent;

  /**
   * The api path the resource event was created in. This should match the source of the `payload`
   * field. For direct integrations with Chemist, this should generally be the RESPONSE. go
   * /resource-event-pipeline-type
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String path;

  /**
   * The payload contains metadata associated with the resource event. A ResourceEventPayloadStatus
   * is provided instead if the original payload cannot be returned due to a limitation (e.g. size
   * limit).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Object> payload;

  /**
   * The resource associated with the event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Resource resource;

  /**
   * The resource event type determines how the backend service should process the event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The destinations field determines which backend services should handle the event. This should
   * be specified as a comma-delimited string.
   * @return value or {@code null} for none
   */
  public java.lang.String getDestinations() {
    return destinations;
  }

  /**
   * The destinations field determines which backend services should handle the event. This should
   * be specified as a comma-delimited string.
   * @param destinations destinations or {@code null} for none
   */
  public V1ResourceEvent setDestinations(java.lang.String destinations) {
    this.destinations = destinations;
    return this;
  }

  /**
   * The parent resource for the resource.
   * @return value or {@code null} for none
   */
  public Resource getParent() {
    return parent;
  }

  /**
   * The parent resource for the resource.
   * @param parent parent or {@code null} for none
   */
  public V1ResourceEvent setParent(Resource parent) {
    this.parent = parent;
    return this;
  }

  /**
   * The api path the resource event was created in. This should match the source of the `payload`
   * field. For direct integrations with Chemist, this should generally be the RESPONSE. go
   * /resource-event-pipeline-type
   * @return value or {@code null} for none
   */
  public java.lang.String getPath() {
    return path;
  }

  /**
   * The api path the resource event was created in. This should match the source of the `payload`
   * field. For direct integrations with Chemist, this should generally be the RESPONSE. go
   * /resource-event-pipeline-type
   * @param path path or {@code null} for none
   */
  public V1ResourceEvent setPath(java.lang.String path) {
    this.path = path;
    return this;
  }

  /**
   * The payload contains metadata associated with the resource event. A ResourceEventPayloadStatus
   * is provided instead if the original payload cannot be returned due to a limitation (e.g. size
   * limit).
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Object> getPayload() {
    return payload;
  }

  /**
   * The payload contains metadata associated with the resource event. A ResourceEventPayloadStatus
   * is provided instead if the original payload cannot be returned due to a limitation (e.g. size
   * limit).
   * @param payload payload or {@code null} for none
   */
  public V1ResourceEvent setPayload(java.util.Map<String, java.lang.Object> payload) {
    this.payload = payload;
    return this;
  }

  /**
   * The resource associated with the event.
   * @return value or {@code null} for none
   */
  public Resource getResource() {
    return resource;
  }

  /**
   * The resource associated with the event.
   * @param resource resource or {@code null} for none
   */
  public V1ResourceEvent setResource(Resource resource) {
    this.resource = resource;
    return this;
  }

  /**
   * The resource event type determines how the backend service should process the event.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The resource event type determines how the backend service should process the event.
   * @param type type or {@code null} for none
   */
  public V1ResourceEvent setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public V1ResourceEvent set(String fieldName, Object value) {
    return (V1ResourceEvent) super.set(fieldName, value);
  }

  @Override
  public V1ResourceEvent clone() {
    return (V1ResourceEvent) super.clone();
  }

}
