/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.migrationcenter.v1alpha1.model;

/**
 * Details of the machine architecture.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Migration Center API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MachineArchitectureDetails extends com.google.api.client.json.GenericJson {

  /**
   * BIOS Details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BiosDetails bios;

  /**
   * CPU architecture, e.g., "x64-based PC", "x86_64", "i686" etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cpuArchitecture;

  /**
   * CPU name, e.g., "Intel Xeon E5-2690", "AMD EPYC 7571" etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cpuName;

  /**
   * Number of processor sockets allocated to the machine.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer cpuSocketCount;

  /**
   * Firmware type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String firmwareType;

  /**
   * CPU hyper-threading support.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hyperthreading;

  /**
   * Hardware vendor.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vendor;

  /**
   * BIOS Details.
   * @return value or {@code null} for none
   */
  public BiosDetails getBios() {
    return bios;
  }

  /**
   * BIOS Details.
   * @param bios bios or {@code null} for none
   */
  public MachineArchitectureDetails setBios(BiosDetails bios) {
    this.bios = bios;
    return this;
  }

  /**
   * CPU architecture, e.g., "x64-based PC", "x86_64", "i686" etc.
   * @return value or {@code null} for none
   */
  public java.lang.String getCpuArchitecture() {
    return cpuArchitecture;
  }

  /**
   * CPU architecture, e.g., "x64-based PC", "x86_64", "i686" etc.
   * @param cpuArchitecture cpuArchitecture or {@code null} for none
   */
  public MachineArchitectureDetails setCpuArchitecture(java.lang.String cpuArchitecture) {
    this.cpuArchitecture = cpuArchitecture;
    return this;
  }

  /**
   * CPU name, e.g., "Intel Xeon E5-2690", "AMD EPYC 7571" etc.
   * @return value or {@code null} for none
   */
  public java.lang.String getCpuName() {
    return cpuName;
  }

  /**
   * CPU name, e.g., "Intel Xeon E5-2690", "AMD EPYC 7571" etc.
   * @param cpuName cpuName or {@code null} for none
   */
  public MachineArchitectureDetails setCpuName(java.lang.String cpuName) {
    this.cpuName = cpuName;
    return this;
  }

  /**
   * Number of processor sockets allocated to the machine.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCpuSocketCount() {
    return cpuSocketCount;
  }

  /**
   * Number of processor sockets allocated to the machine.
   * @param cpuSocketCount cpuSocketCount or {@code null} for none
   */
  public MachineArchitectureDetails setCpuSocketCount(java.lang.Integer cpuSocketCount) {
    this.cpuSocketCount = cpuSocketCount;
    return this;
  }

  /**
   * Firmware type.
   * @return value or {@code null} for none
   */
  public java.lang.String getFirmwareType() {
    return firmwareType;
  }

  /**
   * Firmware type.
   * @param firmwareType firmwareType or {@code null} for none
   */
  public MachineArchitectureDetails setFirmwareType(java.lang.String firmwareType) {
    this.firmwareType = firmwareType;
    return this;
  }

  /**
   * CPU hyper-threading support.
   * @return value or {@code null} for none
   */
  public java.lang.String getHyperthreading() {
    return hyperthreading;
  }

  /**
   * CPU hyper-threading support.
   * @param hyperthreading hyperthreading or {@code null} for none
   */
  public MachineArchitectureDetails setHyperthreading(java.lang.String hyperthreading) {
    this.hyperthreading = hyperthreading;
    return this;
  }

  /**
   * Hardware vendor.
   * @return value or {@code null} for none
   */
  public java.lang.String getVendor() {
    return vendor;
  }

  /**
   * Hardware vendor.
   * @param vendor vendor or {@code null} for none
   */
  public MachineArchitectureDetails setVendor(java.lang.String vendor) {
    this.vendor = vendor;
    return this;
  }

  @Override
  public MachineArchitectureDetails set(String fieldName, Object value) {
    return (MachineArchitectureDetails) super.set(fieldName, value);
  }

  @Override
  public MachineArchitectureDetails clone() {
    return (MachineArchitectureDetails) super.clone();
  }

}
