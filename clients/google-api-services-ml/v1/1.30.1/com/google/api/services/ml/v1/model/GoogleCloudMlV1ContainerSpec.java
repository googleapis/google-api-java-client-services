/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.ml.v1.model;

/**
 * Specify a custom container to deploy. Our ContainerSpec is a subset of the Kubernetes Container
 * specification. https://kubernetes.io/docs/reference/generated/kubernetes-
 * api/v1.10/#container-v1-core
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the AI Platform Training & Prediction API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudMlV1ContainerSpec extends com.google.api.client.json.GenericJson {

  /**
   * Immutable. Arguments to the entrypoint. The docker image's CMD is used if this is not provided.
   * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
   * cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
   * can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
   * regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks
   * /inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> args;

  /**
   * Immutable. Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used
   * if this is not provided. Variable references $(VAR_NAME) are expanded using the container's
   * environment. If a variable cannot be resolved, the reference in the input string will be
   * unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
   * references will never be expanded, regardless of whether the variable exists or not. More info:
   * https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-
   * container/#running-a-command-in-a-shell
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> command;

  /**
   * Immutable. List of environment variables to set in the container.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudMlV1EnvVar> env;

  /**
   * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String image;

  /**
   * Immutable. List of ports to expose from the container. Exposing a port here gives the system
   * additional information about the network connections a container uses, but is primarily
   * informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any
   * port which is listening on the default "0.0.0.0" address inside a container will be accessible
   * from the network.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudMlV1ContainerPort> ports;

  static {
    // hack to force ProGuard to consider GoogleCloudMlV1ContainerPort used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleCloudMlV1ContainerPort.class);
  }

  /**
   * Immutable. Arguments to the entrypoint. The docker image's CMD is used if this is not provided.
   * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
   * cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
   * can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
   * regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks
   * /inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getArgs() {
    return args;
  }

  /**
   * Immutable. Arguments to the entrypoint. The docker image's CMD is used if this is not provided.
   * Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
   * cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
   * can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
   * regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks
   * /inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
   * @param args args or {@code null} for none
   */
  public GoogleCloudMlV1ContainerSpec setArgs(java.util.List<java.lang.String> args) {
    this.args = args;
    return this;
  }

  /**
   * Immutable. Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used
   * if this is not provided. Variable references $(VAR_NAME) are expanded using the container's
   * environment. If a variable cannot be resolved, the reference in the input string will be
   * unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
   * references will never be expanded, regardless of whether the variable exists or not. More info:
   * https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-
   * container/#running-a-command-in-a-shell
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCommand() {
    return command;
  }

  /**
   * Immutable. Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used
   * if this is not provided. Variable references $(VAR_NAME) are expanded using the container's
   * environment. If a variable cannot be resolved, the reference in the input string will be
   * unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
   * references will never be expanded, regardless of whether the variable exists or not. More info:
   * https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-
   * container/#running-a-command-in-a-shell
   * @param command command or {@code null} for none
   */
  public GoogleCloudMlV1ContainerSpec setCommand(java.util.List<java.lang.String> command) {
    this.command = command;
    return this;
  }

  /**
   * Immutable. List of environment variables to set in the container.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudMlV1EnvVar> getEnv() {
    return env;
  }

  /**
   * Immutable. List of environment variables to set in the container.
   * @param env env or {@code null} for none
   */
  public GoogleCloudMlV1ContainerSpec setEnv(java.util.List<GoogleCloudMlV1EnvVar> env) {
    this.env = env;
    return this;
  }

  /**
   * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
   * @return value or {@code null} for none
   */
  public java.lang.String getImage() {
    return image;
  }

  /**
   * Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
   * @param image image or {@code null} for none
   */
  public GoogleCloudMlV1ContainerSpec setImage(java.lang.String image) {
    this.image = image;
    return this;
  }

  /**
   * Immutable. List of ports to expose from the container. Exposing a port here gives the system
   * additional information about the network connections a container uses, but is primarily
   * informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any
   * port which is listening on the default "0.0.0.0" address inside a container will be accessible
   * from the network.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudMlV1ContainerPort> getPorts() {
    return ports;
  }

  /**
   * Immutable. List of ports to expose from the container. Exposing a port here gives the system
   * additional information about the network connections a container uses, but is primarily
   * informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any
   * port which is listening on the default "0.0.0.0" address inside a container will be accessible
   * from the network.
   * @param ports ports or {@code null} for none
   */
  public GoogleCloudMlV1ContainerSpec setPorts(java.util.List<GoogleCloudMlV1ContainerPort> ports) {
    this.ports = ports;
    return this;
  }

  @Override
  public GoogleCloudMlV1ContainerSpec set(String fieldName, Object value) {
    return (GoogleCloudMlV1ContainerSpec) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudMlV1ContainerSpec clone() {
    return (GoogleCloudMlV1ContainerSpec) super.clone();
  }

}
