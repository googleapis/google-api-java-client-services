/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.connectors.v2.model;

/**
 * JsonSchema representation of schema metadata
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Connectors API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class JsonSchema extends com.google.api.client.json.GenericJson {

  /**
   * Additional details apart from standard json schema fields, this gives flexibility to store
   * metadata about the schema
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Object> additionalDetails;

  /**
   * The default value of the field or object described by this schema.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("default")
  private java.lang.Object default__;

  /**
   * A description of this schema.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Possible values for an enumeration. This works in conjunction with `type` to represent types
   * with a fixed set of legal values
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("enum")
  private java.util.List<java.lang.Object> enum__;

  /**
   * Format of the value as per https://json-schema.org/understanding-json-
   * schema/reference/string.html#format
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String format;

  /**
   * Schema that applies to array values, applicable only if this is of type `array`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private JsonSchema items;

  /**
   * JDBC datatype of the field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String jdbcType;

  /**
   * The child schemas, applicable only if this is of type `object`. The key is the name of the
   * property and the value is the json schema that describes that property
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, JsonSchema> properties;

  /**
   * Whether this property is required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> required;

  /**
   * JSON Schema Validation: A Vocabulary for Structural Validation of JSON
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> type;

  /**
   * Additional details apart from standard json schema fields, this gives flexibility to store
   * metadata about the schema
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Object> getAdditionalDetails() {
    return additionalDetails;
  }

  /**
   * Additional details apart from standard json schema fields, this gives flexibility to store
   * metadata about the schema
   * @param additionalDetails additionalDetails or {@code null} for none
   */
  public JsonSchema setAdditionalDetails(java.util.Map<String, java.lang.Object> additionalDetails) {
    this.additionalDetails = additionalDetails;
    return this;
  }

  /**
   * The default value of the field or object described by this schema.
   * @return value or {@code null} for none
   */
  public java.lang.Object getDefault() {
    return default__;
  }

  /**
   * The default value of the field or object described by this schema.
   * @param default__ default__ or {@code null} for none
   */
  public JsonSchema setDefault(java.lang.Object default__) {
    this.default__ = default__;
    return this;
  }

  /**
   * A description of this schema.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * A description of this schema.
   * @param description description or {@code null} for none
   */
  public JsonSchema setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Possible values for an enumeration. This works in conjunction with `type` to represent types
   * with a fixed set of legal values
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Object> getEnum() {
    return enum__;
  }

  /**
   * Possible values for an enumeration. This works in conjunction with `type` to represent types
   * with a fixed set of legal values
   * @param enum__ enum__ or {@code null} for none
   */
  public JsonSchema setEnum(java.util.List<java.lang.Object> enum__) {
    this.enum__ = enum__;
    return this;
  }

  /**
   * Format of the value as per https://json-schema.org/understanding-json-
   * schema/reference/string.html#format
   * @return value or {@code null} for none
   */
  public java.lang.String getFormat() {
    return format;
  }

  /**
   * Format of the value as per https://json-schema.org/understanding-json-
   * schema/reference/string.html#format
   * @param format format or {@code null} for none
   */
  public JsonSchema setFormat(java.lang.String format) {
    this.format = format;
    return this;
  }

  /**
   * Schema that applies to array values, applicable only if this is of type `array`.
   * @return value or {@code null} for none
   */
  public JsonSchema getItems() {
    return items;
  }

  /**
   * Schema that applies to array values, applicable only if this is of type `array`.
   * @param items items or {@code null} for none
   */
  public JsonSchema setItems(JsonSchema items) {
    this.items = items;
    return this;
  }

  /**
   * JDBC datatype of the field.
   * @return value or {@code null} for none
   */
  public java.lang.String getJdbcType() {
    return jdbcType;
  }

  /**
   * JDBC datatype of the field.
   * @param jdbcType jdbcType or {@code null} for none
   */
  public JsonSchema setJdbcType(java.lang.String jdbcType) {
    this.jdbcType = jdbcType;
    return this;
  }

  /**
   * The child schemas, applicable only if this is of type `object`. The key is the name of the
   * property and the value is the json schema that describes that property
   * @return value or {@code null} for none
   */
  public java.util.Map<String, JsonSchema> getProperties() {
    return properties;
  }

  /**
   * The child schemas, applicable only if this is of type `object`. The key is the name of the
   * property and the value is the json schema that describes that property
   * @param properties properties or {@code null} for none
   */
  public JsonSchema setProperties(java.util.Map<String, JsonSchema> properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Whether this property is required.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getRequired() {
    return required;
  }

  /**
   * Whether this property is required.
   * @param required required or {@code null} for none
   */
  public JsonSchema setRequired(java.util.List<java.lang.String> required) {
    this.required = required;
    return this;
  }

  /**
   * JSON Schema Validation: A Vocabulary for Structural Validation of JSON
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getType() {
    return type;
  }

  /**
   * JSON Schema Validation: A Vocabulary for Structural Validation of JSON
   * @param type type or {@code null} for none
   */
  public JsonSchema setType(java.util.List<java.lang.String> type) {
    this.type = type;
    return this;
  }

  @Override
  public JsonSchema set(String fieldName, Object value) {
    return (JsonSchema) super.set(fieldName, value);
  }

  @Override
  public JsonSchema clone() {
    return (JsonSchema) super.clone();
  }

}
