/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.language.v1.model;

/**
 * Indicated the type of data that can be stored in a structured data entity (e.g. a table).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Natural Language API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class XPSDataType extends com.google.api.client.json.GenericJson {

  /**
   * The highly compatible data types to this data type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<XPSDataType> compatibleDataTypes;

  /**
   * If type_code == ARRAY, then `list_element_type` is the type of the elements.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private XPSDataType listElementType;

  /**
   * If true, this DataType can also be `null`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean nullable;

  /**
   * If type_code == STRUCT, then `struct_type` provides type information for the struct's fields.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private XPSStructType structType;

  /**
   * If type_code == TIMESTAMP then `time_format` provides the format in which that time field is
   * expressed. The time_format must be written in `strftime` syntax. If time_format is not set,
   * then the default format as described on the field is used.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String timeFormat;

  /**
   * Required. The TypeCode for this type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String typeCode;

  /**
   * The highly compatible data types to this data type.
   * @return value or {@code null} for none
   */
  public java.util.List<XPSDataType> getCompatibleDataTypes() {
    return compatibleDataTypes;
  }

  /**
   * The highly compatible data types to this data type.
   * @param compatibleDataTypes compatibleDataTypes or {@code null} for none
   */
  public XPSDataType setCompatibleDataTypes(java.util.List<XPSDataType> compatibleDataTypes) {
    this.compatibleDataTypes = compatibleDataTypes;
    return this;
  }

  /**
   * If type_code == ARRAY, then `list_element_type` is the type of the elements.
   * @return value or {@code null} for none
   */
  public XPSDataType getListElementType() {
    return listElementType;
  }

  /**
   * If type_code == ARRAY, then `list_element_type` is the type of the elements.
   * @param listElementType listElementType or {@code null} for none
   */
  public XPSDataType setListElementType(XPSDataType listElementType) {
    this.listElementType = listElementType;
    return this;
  }

  /**
   * If true, this DataType can also be `null`.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNullable() {
    return nullable;
  }

  /**
   * If true, this DataType can also be `null`.
   * @param nullable nullable or {@code null} for none
   */
  public XPSDataType setNullable(java.lang.Boolean nullable) {
    this.nullable = nullable;
    return this;
  }

  /**
   * If type_code == STRUCT, then `struct_type` provides type information for the struct's fields.
   * @return value or {@code null} for none
   */
  public XPSStructType getStructType() {
    return structType;
  }

  /**
   * If type_code == STRUCT, then `struct_type` provides type information for the struct's fields.
   * @param structType structType or {@code null} for none
   */
  public XPSDataType setStructType(XPSStructType structType) {
    this.structType = structType;
    return this;
  }

  /**
   * If type_code == TIMESTAMP then `time_format` provides the format in which that time field is
   * expressed. The time_format must be written in `strftime` syntax. If time_format is not set,
   * then the default format as described on the field is used.
   * @return value or {@code null} for none
   */
  public java.lang.String getTimeFormat() {
    return timeFormat;
  }

  /**
   * If type_code == TIMESTAMP then `time_format` provides the format in which that time field is
   * expressed. The time_format must be written in `strftime` syntax. If time_format is not set,
   * then the default format as described on the field is used.
   * @param timeFormat timeFormat or {@code null} for none
   */
  public XPSDataType setTimeFormat(java.lang.String timeFormat) {
    this.timeFormat = timeFormat;
    return this;
  }

  /**
   * Required. The TypeCode for this type.
   * @return value or {@code null} for none
   */
  public java.lang.String getTypeCode() {
    return typeCode;
  }

  /**
   * Required. The TypeCode for this type.
   * @param typeCode typeCode or {@code null} for none
   */
  public XPSDataType setTypeCode(java.lang.String typeCode) {
    this.typeCode = typeCode;
    return this;
  }

  @Override
  public XPSDataType set(String fieldName, Object value) {
    return (XPSDataType) super.set(fieldName, value);
  }

  @Override
  public XPSDataType clone() {
    return (XPSDataType) super.clone();
  }

}
