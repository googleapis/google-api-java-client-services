/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataplex.v1.model;

/**
 * An object that describes the values that you want to set for an entry and its attached aspects
 * when you import metadata. Used when you run a metadata import job. See CreateMetadataJob.You
 * provide a collection of import items in a metadata import file. For more information about how to
 * create a metadata import file, see Metadata import file
 * (https://cloud.google.com/dataplex/docs/import-metadata#metadata-import-file).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Dataplex API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDataplexV1ImportItem extends com.google.api.client.json.GenericJson {

  /**
   * The aspects to modify. Supports the following syntaxes: {aspect_type_reference}: matches
   * aspects that belong to the specified aspect type and are attached directly to the entry.
   * {aspect_type_reference}@{path}: matches aspects that belong to the specified aspect type and
   * path. {aspect_type_reference}@* : matches aspects of the given type for all paths. *@path :
   * matches aspects of all types on the given path.Replace {aspect_type_reference} with a reference
   * to the aspect type, in the format {project_id_or_number}.{location_id}.{aspect_type_id}.In FULL
   * entry sync mode, if you leave this field empty, it is treated as specifying exactly those
   * aspects that are present within the specified entry. Dataplex implicitly adds the keys for all
   * of the required aspects of an entry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> aspectKeys;

  /**
   * Information about an entry and its attached aspects.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("entry")
  private GoogleCloudDataplexV1Entry entry__;

  /**
   * The fields to update, in paths that are relative to the Entry resource. Separate each field
   * with a comma.In FULL entry sync mode, Dataplex includes the paths of all of the fields for an
   * entry that can be modified, including aspects. This means that Dataplex replaces the existing
   * entry with the entry in the metadata import file. All modifiable fields are updated, regardless
   * of the fields that are listed in the update mask, and regardless of whether a field is present
   * in the entry object.The update_mask field is ignored when an entry is created or re-created.In
   * an aspect-only metadata job (when entry sync mode is NONE), set this value to aspects.Dataplex
   * also determines which entries and aspects to modify by comparing the values and timestamps that
   * you provide in the metadata import file with the values and timestamps that exist in your
   * project. For more information, see Comparison logic
   * (https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateMask;

  /**
   * The aspects to modify. Supports the following syntaxes: {aspect_type_reference}: matches
   * aspects that belong to the specified aspect type and are attached directly to the entry.
   * {aspect_type_reference}@{path}: matches aspects that belong to the specified aspect type and
   * path. {aspect_type_reference}@* : matches aspects of the given type for all paths. *@path :
   * matches aspects of all types on the given path.Replace {aspect_type_reference} with a reference
   * to the aspect type, in the format {project_id_or_number}.{location_id}.{aspect_type_id}.In FULL
   * entry sync mode, if you leave this field empty, it is treated as specifying exactly those
   * aspects that are present within the specified entry. Dataplex implicitly adds the keys for all
   * of the required aspects of an entry.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAspectKeys() {
    return aspectKeys;
  }

  /**
   * The aspects to modify. Supports the following syntaxes: {aspect_type_reference}: matches
   * aspects that belong to the specified aspect type and are attached directly to the entry.
   * {aspect_type_reference}@{path}: matches aspects that belong to the specified aspect type and
   * path. {aspect_type_reference}@* : matches aspects of the given type for all paths. *@path :
   * matches aspects of all types on the given path.Replace {aspect_type_reference} with a reference
   * to the aspect type, in the format {project_id_or_number}.{location_id}.{aspect_type_id}.In FULL
   * entry sync mode, if you leave this field empty, it is treated as specifying exactly those
   * aspects that are present within the specified entry. Dataplex implicitly adds the keys for all
   * of the required aspects of an entry.
   * @param aspectKeys aspectKeys or {@code null} for none
   */
  public GoogleCloudDataplexV1ImportItem setAspectKeys(java.util.List<java.lang.String> aspectKeys) {
    this.aspectKeys = aspectKeys;
    return this;
  }

  /**
   * Information about an entry and its attached aspects.
   * @return value or {@code null} for none
   */
  public GoogleCloudDataplexV1Entry getEntry() {
    return entry__;
  }

  /**
   * Information about an entry and its attached aspects.
   * @param entry__ entry__ or {@code null} for none
   */
  public GoogleCloudDataplexV1ImportItem setEntry(GoogleCloudDataplexV1Entry entry__) {
    this.entry__ = entry__;
    return this;
  }

  /**
   * The fields to update, in paths that are relative to the Entry resource. Separate each field
   * with a comma.In FULL entry sync mode, Dataplex includes the paths of all of the fields for an
   * entry that can be modified, including aspects. This means that Dataplex replaces the existing
   * entry with the entry in the metadata import file. All modifiable fields are updated, regardless
   * of the fields that are listed in the update mask, and regardless of whether a field is present
   * in the entry object.The update_mask field is ignored when an entry is created or re-created.In
   * an aspect-only metadata job (when entry sync mode is NONE), set this value to aspects.Dataplex
   * also determines which entries and aspects to modify by comparing the values and timestamps that
   * you provide in the metadata import file with the values and timestamps that exist in your
   * project. For more information, see Comparison logic
   * (https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
   * @return value or {@code null} for none
   */
  public String getUpdateMask() {
    return updateMask;
  }

  /**
   * The fields to update, in paths that are relative to the Entry resource. Separate each field
   * with a comma.In FULL entry sync mode, Dataplex includes the paths of all of the fields for an
   * entry that can be modified, including aspects. This means that Dataplex replaces the existing
   * entry with the entry in the metadata import file. All modifiable fields are updated, regardless
   * of the fields that are listed in the update mask, and regardless of whether a field is present
   * in the entry object.The update_mask field is ignored when an entry is created or re-created.In
   * an aspect-only metadata job (when entry sync mode is NONE), set this value to aspects.Dataplex
   * also determines which entries and aspects to modify by comparing the values and timestamps that
   * you provide in the metadata import file with the values and timestamps that exist in your
   * project. For more information, see Comparison logic
   * (https://cloud.google.com/dataplex/docs/import-metadata#data-modification-logic).
   * @param updateMask updateMask or {@code null} for none
   */
  public GoogleCloudDataplexV1ImportItem setUpdateMask(String updateMask) {
    this.updateMask = updateMask;
    return this;
  }

  @Override
  public GoogleCloudDataplexV1ImportItem set(String fieldName, Object value) {
    return (GoogleCloudDataplexV1ImportItem) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDataplexV1ImportItem clone() {
    return (GoogleCloudDataplexV1ImportItem) super.clone();
  }

}
