/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This message is embedded in the RankDetailsProto (below). It represents one rank signal, which is
 * a floating point value estimating the Oyster Rank of the feature.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreRankSignalProto extends com.google.api.client.json.GenericJson {

  /**
   * Field-level metadata for this signal.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFieldMetadataProto metadata;

  /**
   * A value in the range [0, 1] estimating Oyster Rank according to this signal. Non-provider
   * specific signals (e.g. SIGNAL_POPULATION) are interpreted by some common code in the ranking
   * pipeline. Because of that, data providers should leave this field empty when setting such
   * signals (so that the rank assignment can be uniform across all features regardless of
   * contributing data providers). On the other hand, provider-specific signals (e.g.
   * SIGNAL_ZENRIN_CITY_CATEGORY) are required to specify the rank field (it is not optional for
   * them). That is because no code other than that of the provider itself will be able to fill in a
   * meaningful value later on. We don't want clients to be reading from the raw_scalar / raw_string
   * fields to interpret the data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float rank;

  /**
   * The raw scalar value that was used to compute 'rank' above. The meaning of this attribute
   * changes depending on the signal type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float rawScalar;

  /**
   * The raw string value that was used to compute 'rank' above. The meaning of this attribute
   * changes depending on the signal type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rawString;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Field-level metadata for this signal.
   * @return value or {@code null} for none
   */
  public GeostoreFieldMetadataProto getMetadata() {
    return metadata;
  }

  /**
   * Field-level metadata for this signal.
   * @param metadata metadata or {@code null} for none
   */
  public GeostoreRankSignalProto setMetadata(GeostoreFieldMetadataProto metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * A value in the range [0, 1] estimating Oyster Rank according to this signal. Non-provider
   * specific signals (e.g. SIGNAL_POPULATION) are interpreted by some common code in the ranking
   * pipeline. Because of that, data providers should leave this field empty when setting such
   * signals (so that the rank assignment can be uniform across all features regardless of
   * contributing data providers). On the other hand, provider-specific signals (e.g.
   * SIGNAL_ZENRIN_CITY_CATEGORY) are required to specify the rank field (it is not optional for
   * them). That is because no code other than that of the provider itself will be able to fill in a
   * meaningful value later on. We don't want clients to be reading from the raw_scalar / raw_string
   * fields to interpret the data.
   * @return value or {@code null} for none
   */
  public java.lang.Float getRank() {
    return rank;
  }

  /**
   * A value in the range [0, 1] estimating Oyster Rank according to this signal. Non-provider
   * specific signals (e.g. SIGNAL_POPULATION) are interpreted by some common code in the ranking
   * pipeline. Because of that, data providers should leave this field empty when setting such
   * signals (so that the rank assignment can be uniform across all features regardless of
   * contributing data providers). On the other hand, provider-specific signals (e.g.
   * SIGNAL_ZENRIN_CITY_CATEGORY) are required to specify the rank field (it is not optional for
   * them). That is because no code other than that of the provider itself will be able to fill in a
   * meaningful value later on. We don't want clients to be reading from the raw_scalar / raw_string
   * fields to interpret the data.
   * @param rank rank or {@code null} for none
   */
  public GeostoreRankSignalProto setRank(java.lang.Float rank) {
    this.rank = rank;
    return this;
  }

  /**
   * The raw scalar value that was used to compute 'rank' above. The meaning of this attribute
   * changes depending on the signal type.
   * @return value or {@code null} for none
   */
  public java.lang.Float getRawScalar() {
    return rawScalar;
  }

  /**
   * The raw scalar value that was used to compute 'rank' above. The meaning of this attribute
   * changes depending on the signal type.
   * @param rawScalar rawScalar or {@code null} for none
   */
  public GeostoreRankSignalProto setRawScalar(java.lang.Float rawScalar) {
    this.rawScalar = rawScalar;
    return this;
  }

  /**
   * The raw string value that was used to compute 'rank' above. The meaning of this attribute
   * changes depending on the signal type.
   * @return value or {@code null} for none
   */
  public java.lang.String getRawString() {
    return rawString;
  }

  /**
   * The raw string value that was used to compute 'rank' above. The meaning of this attribute
   * changes depending on the signal type.
   * @param rawString rawString or {@code null} for none
   */
  public GeostoreRankSignalProto setRawString(java.lang.String rawString) {
    this.rawString = rawString;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * @param type type or {@code null} for none
   */
  public GeostoreRankSignalProto setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public GeostoreRankSignalProto set(String fieldName, Object value) {
    return (GeostoreRankSignalProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreRankSignalProto clone() {
    return (GeostoreRankSignalProto) super.clone();
  }

}
