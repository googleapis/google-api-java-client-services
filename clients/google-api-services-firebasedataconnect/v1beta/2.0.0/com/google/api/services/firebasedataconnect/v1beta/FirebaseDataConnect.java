/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebasedataconnect.v1beta;

/**
 * Service definition for FirebaseDataConnect (v1beta).
 *
 * <p>
 * Firebase Data Connect is a relational database service for mobile and web apps that lets you build and scale using a fully-managed PostgreSQL database powered by Cloud SQL. The REST API lets developers manage the connections to their database, change the schema of their database, and query the database.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://firebase.google.com/docs/data-connect" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FirebaseDataConnectRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class FirebaseDataConnect extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Firebase Data Connect API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://firebasedataconnect.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://firebasedataconnect.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public FirebaseDataConnect(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  FirebaseDataConnect(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code FirebaseDataConnect firebasedataconnect = new FirebaseDataConnect(...);}
   *   {@code FirebaseDataConnect.Projects.List request = firebasedataconnect.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseDataConnect firebasedataconnect = new FirebaseDataConnect(...);}
     *   {@code FirebaseDataConnect.Locations.List request = firebasedataconnect.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * Gets information about a location.
       *
       * Create a request for the method "locations.get".
       *
       * This request holds the parameters needed by the firebasedataconnect server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Resource name for the location.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Location> {

        private static final String REST_PATH = "v1beta/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

        /**
         * Gets information about a location.
         *
         * Create a request for the method "locations.get".
         *
         * This request holds the parameters needed by the the firebasedataconnect server.  After setting
         * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         * <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Resource name for the location.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(FirebaseDataConnect.this, "GET", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.Location.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Resource name for the location. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Resource name for the location.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Resource name for the location. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/locations/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists information about the supported locations for this service.
       *
       * Create a request for the method "locations.list".
       *
       * This request holds the parameters needed by the firebasedataconnect server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param name The resource that owns the locations collection, if applicable.
       * @return the request
       */
      public List list(java.lang.String name) throws java.io.IOException {
        List result = new List(name);
        initialize(result);
        return result;
      }

      public class List extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.ListLocationsResponse> {

        private static final String REST_PATH = "v1beta/{+name}/locations";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists information about the supported locations for this service.
         *
         * Create a request for the method "locations.list".
         *
         * This request holds the parameters needed by the the firebasedataconnect server.  After setting
         * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         * <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource that owns the locations collection, if applicable.
         * @since 1.13
         */
        protected List(java.lang.String name) {
          super(FirebaseDataConnect.this, "GET", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.ListLocationsResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** The resource that owns the locations collection, if applicable. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource that owns the locations collection, if applicable.
         */
        public java.lang.String getName() {
          return name;
        }

        /** The resource that owns the locations collection, if applicable. */
        public List setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** A filter to narrow down results to a preferred subset. The filtering language accepts strings like
       `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /**
         * A filter to narrow down results to a preferred subset. The filtering language accepts
         * strings like `"displayName=tokyo"`, and is documented in more detail in
         * [AIP-160](https://google.aip.dev/160).
         */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of results to return. If not set, the service selects a default.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** The maximum number of results to return. If not set, the service selects a default. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A page token received from the `next_page_token` field in the response. Send that page token to
       receive the subsequent page.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A page token received from the `next_page_token` field in the response. Send that page
         * token to receive the subsequent page.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Operations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseDataConnect firebasedataconnect = new FirebaseDataConnect(...);}
       *   {@code FirebaseDataConnect.Operations.List request = firebasedataconnect.operations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Operations operations() {
        return new Operations();
      }

      /**
       * The "operations" collection of methods.
       */
      public class Operations {

        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
         * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
         * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
         * methods to check whether the cancellation succeeded or whether the operation completed despite
         * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
         * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
         * `Code.CANCELLED`.
         *
         * Create a request for the method "operations.cancel".
         *
         * This request holds the parameters needed by the firebasedataconnect server.  After setting any
         * optional parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be cancelled.
         * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.CancelOperationRequest}
         * @return the request
         */
        public Cancel cancel(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.CancelOperationRequest content) throws java.io.IOException {
          Cancel result = new Cancel(name, content);
          initialize(result);
          return result;
        }

        public class Cancel extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Empty> {

          private static final String REST_PATH = "v1beta/{+name}:cancel";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
           * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
           * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
           * methods to check whether the cancellation succeeded or whether the operation completed despite
           * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
           * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
           * `Code.CANCELLED`.
           *
           * Create a request for the method "operations.cancel".
           *
           * This request holds the parameters needed by the the firebasedataconnect server.  After setting
           * any optional parameters, call the {@link Cancel#execute()} method to invoke the remote
           * operation. <p> {@link
           * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be cancelled.
           * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.CancelOperationRequest}
           * @since 1.13
           */
          protected Cancel(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.CancelOperationRequest content) {
            super(FirebaseDataConnect.this, "POST", REST_PATH, content, com.google.api.services.firebasedataconnect.v1beta.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Cancel set$Xgafv(java.lang.String $Xgafv) {
            return (Cancel) super.set$Xgafv($Xgafv);
          }

          @Override
          public Cancel setAccessToken(java.lang.String accessToken) {
            return (Cancel) super.setAccessToken(accessToken);
          }

          @Override
          public Cancel setAlt(java.lang.String alt) {
            return (Cancel) super.setAlt(alt);
          }

          @Override
          public Cancel setCallback(java.lang.String callback) {
            return (Cancel) super.setCallback(callback);
          }

          @Override
          public Cancel setFields(java.lang.String fields) {
            return (Cancel) super.setFields(fields);
          }

          @Override
          public Cancel setKey(java.lang.String key) {
            return (Cancel) super.setKey(key);
          }

          @Override
          public Cancel setOauthToken(java.lang.String oauthToken) {
            return (Cancel) super.setOauthToken(oauthToken);
          }

          @Override
          public Cancel setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Cancel) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Cancel setQuotaUser(java.lang.String quotaUser) {
            return (Cancel) super.setQuotaUser(quotaUser);
          }

          @Override
          public Cancel setUploadType(java.lang.String uploadType) {
            return (Cancel) super.setUploadType(uploadType);
          }

          @Override
          public Cancel setUploadProtocol(java.lang.String uploadProtocol) {
            return (Cancel) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be cancelled. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be cancelled.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be cancelled. */
          public Cancel setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Cancel set(String parameterName, Object value) {
            return (Cancel) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested
         * in the operation result. It does not cancel the operation. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.delete".
         *
         * This request holds the parameters needed by the firebasedataconnect server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be deleted.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Empty> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Deletes a long-running operation. This method indicates that the client is no longer interested
           * in the operation result. It does not cancel the operation. If the server doesn't support this
           * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.delete".
           *
           * This request holds the parameters needed by the the firebasedataconnect server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be deleted.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(FirebaseDataConnect.this, "DELETE", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be deleted. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be deleted.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be deleted. */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets the latest state of a long-running operation. Clients can use this method to poll the
         * operation result at intervals as recommended by the API service.
         *
         * Create a request for the method "operations.get".
         *
         * This request holds the parameters needed by the firebasedataconnect server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Operation> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

          /**
           * Gets the latest state of a long-running operation. Clients can use this method to poll the
           * operation result at intervals as recommended by the API service.
           *
           * Create a request for the method "operations.get".
           *
           * This request holds the parameters needed by the the firebasedataconnect server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(FirebaseDataConnect.this, "GET", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support
         * this method, it returns `UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.list".
         *
         * This request holds the parameters needed by the firebasedataconnect server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation's parent resource.
         * @return the request
         */
        public List list(java.lang.String name) throws java.io.IOException {
          List result = new List(name);
          initialize(result);
          return result;
        }

        public class List extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.ListOperationsResponse> {

          private static final String REST_PATH = "v1beta/{+name}/operations";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists operations that match the specified filter in the request. If the server doesn't support
           * this method, it returns `UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.list".
           *
           * This request holds the parameters needed by the the firebasedataconnect server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation's parent resource.
           * @since 1.13
           */
          protected List(java.lang.String name) {
            super(FirebaseDataConnect.this, "GET", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.ListOperationsResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation's parent resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation's parent resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation's parent resource. */
          public List setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /** The standard list filter. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** The standard list filter.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** The standard list filter. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** The standard list page size. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The standard list page size.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The standard list page size. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The standard list page token. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The standard list page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The standard list page token. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
      /**
       * An accessor for creating requests from the Services collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseDataConnect firebasedataconnect = new FirebaseDataConnect(...);}
       *   {@code FirebaseDataConnect.Services.List request = firebasedataconnect.services().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Services services() {
        return new Services();
      }

      /**
       * The "services" collection of methods.
       */
      public class Services {

        /**
         * Creates a new Service in a given project and location.
         *
         * Create a request for the method "services.create".
         *
         * This request holds the parameters needed by the firebasedataconnect server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. Value of parent.
         * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.Service}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.firebasedataconnect.v1beta.model.Service content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Operation> {

          private static final String REST_PATH = "v1beta/{+parent}/services";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Creates a new Service in a given project and location.
           *
           * Create a request for the method "services.create".
           *
           * This request holds the parameters needed by the the firebasedataconnect server.  After setting
           * any optional parameters, call the {@link Create#execute()} method to invoke the remote
           * operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. Value of parent.
           * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.Service}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.firebasedataconnect.v1beta.model.Service content) {
            super(FirebaseDataConnect.this, "POST", REST_PATH, content, com.google.api.services.firebasedataconnect.v1beta.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. Value of parent. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. Value of parent.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. Value of parent. */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          @com.google.api.client.util.Key
          private java.lang.String requestId;

          /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
         must retry your request, the server will know to ignore the request if it has already been
         completed. The server will guarantee that for at least 60 minutes since the first request. For
         example, consider a situation where you make an initial request and the request times out. If you
         make the request again with the same request ID, the server can check if original operation with
         the same request ID was received, and if so, will ignore the second request. This prevents clients
         from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
         exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public java.lang.String getRequestId() {
            return requestId;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public Create setRequestId(java.lang.String requestId) {
            this.requestId = requestId;
            return this;
          }

          /**
           * Required. The ID to use for the service, which will become the final component of the
           * service's resource name.
           */
          @com.google.api.client.util.Key
          private java.lang.String serviceId;

          /** Required. The ID to use for the service, which will become the final component of the service's
         resource name.
           */
          public java.lang.String getServiceId() {
            return serviceId;
          }

          /**
           * Required. The ID to use for the service, which will become the final component of the
           * service's resource name.
           */
          public Create setServiceId(java.lang.String serviceId) {
            this.serviceId = serviceId;
            return this;
          }

          /**
           * Optional. If set, validate the request and preview the Service, but do not actually
           * create it.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean validateOnly;

          /** Optional. If set, validate the request and preview the Service, but do not actually create it.
           */
          public java.lang.Boolean getValidateOnly() {
            return validateOnly;
          }

          /**
           * Optional. If set, validate the request and preview the Service, but do not actually
           * create it.
           */
          public Create setValidateOnly(java.lang.Boolean validateOnly) {
            this.validateOnly = validateOnly;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a single Service.
         *
         * Create a request for the method "services.delete".
         *
         * This request holds the parameters needed by the firebasedataconnect server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the service to delete, in the format: ```
         *        projects/{project}/locations/{location}/services/{service} ```
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Operation> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+$");

          /**
           * Deletes a single Service.
           *
           * Create a request for the method "services.delete".
           *
           * This request holds the parameters needed by the the firebasedataconnect server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the service to delete, in the format: ```
         *        projects/{project}/locations/{location}/services/{service} ```
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(FirebaseDataConnect.this, "DELETE", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the service to delete, in the format: ```
           * projects/{project}/locations/{location}/services/{service} ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the service to delete, in the format: ```
         projects/{project}/locations/{location}/services/{service} ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the service to delete, in the format: ```
           * projects/{project}/locations/{location}/services/{service} ```
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Optional. If true and the Service is not found, the request will succeed but no action
           * will be taken on the server.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean allowMissing;

          /** Optional. If true and the Service is not found, the request will succeed but no action will be
         taken on the server.
           */
          public java.lang.Boolean getAllowMissing() {
            return allowMissing;
          }

          /**
           * Optional. If true and the Service is not found, the request will succeed but no action
           * will be taken on the server.
           */
          public Delete setAllowMissing(java.lang.Boolean allowMissing) {
            this.allowMissing = allowMissing;
            return this;
          }

          /**
           * Optional. The etag of the Service. If this is provided, it must match the server's
           * etag.
           */
          @com.google.api.client.util.Key
          private java.lang.String etag;

          /** Optional. The etag of the Service. If this is provided, it must match the server's etag.
           */
          public java.lang.String getEtag() {
            return etag;
          }

          /**
           * Optional. The etag of the Service. If this is provided, it must match the server's
           * etag.
           */
          public Delete setEtag(java.lang.String etag) {
            this.etag = etag;
            return this;
          }

          /**
           * Optional. If set to true, any child resources (i.e. Schema, SchemaRevisions,
           * Connectors, and ConnectorRevisions) will also be deleted. Otherwise, the request will
           * only work if the Service has no child resources.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean force;

          /** Optional. If set to true, any child resources (i.e. Schema, SchemaRevisions, Connectors, and
         ConnectorRevisions) will also be deleted. Otherwise, the request will only work if the Service has
         no child resources.
           */
          public java.lang.Boolean getForce() {
            return force;
          }

          /**
           * Optional. If set to true, any child resources (i.e. Schema, SchemaRevisions,
           * Connectors, and ConnectorRevisions) will also be deleted. Otherwise, the request will
           * only work if the Service has no child resources.
           */
          public Delete setForce(java.lang.Boolean force) {
            this.force = force;
            return this;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * after the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          @com.google.api.client.util.Key
          private java.lang.String requestId;

          /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
         must retry your request, the server will know to ignore the request if it has already been
         completed. The server will guarantee that for at least 60 minutes after the first request. For
         example, consider a situation where you make an initial request and the request times out. If you
         make the request again with the same request ID, the server can check if original operation with
         the same request ID was received, and if so, will ignore the second request. This prevents clients
         from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
         exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public java.lang.String getRequestId() {
            return requestId;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * after the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public Delete setRequestId(java.lang.String requestId) {
            this.requestId = requestId;
            return this;
          }

          /**
           * Optional. If set, validate the request and preview the Service, but do not actually
           * delete it.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean validateOnly;

          /** Optional. If set, validate the request and preview the Service, but do not actually delete it.
           */
          public java.lang.Boolean getValidateOnly() {
            return validateOnly;
          }

          /**
           * Optional. If set, validate the request and preview the Service, but do not actually
           * delete it.
           */
          public Delete setValidateOnly(java.lang.Boolean validateOnly) {
            this.validateOnly = validateOnly;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Execute any GraphQL query and mutation against the Firebase Data Connect's generated GraphQL
         * schema. Grants full read and write access to the connected data sources. Note: Use introspection
         * query to explore the generated GraphQL schema.
         *
         * Create a request for the method "services.executeGraphql".
         *
         * This request holds the parameters needed by the firebasedataconnect server.  After setting any
         * optional parameters, call the {@link ExecuteGraphql#execute()} method to invoke the remote
         * operation.
         *
         * @param name Required. The relative resource name of Firebase Data Connect service, in the format: ```
         *        projects/{project}/locations/{location}/services/{service} ```
         * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.GraphqlRequest}
         * @return the request
         */
        public ExecuteGraphql executeGraphql(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.GraphqlRequest content) throws java.io.IOException {
          ExecuteGraphql result = new ExecuteGraphql(name, content);
          initialize(result);
          return result;
        }

        public class ExecuteGraphql extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.GraphqlResponse> {

          private static final String REST_PATH = "v1beta/{+name}:executeGraphql";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+$");

          /**
           * Execute any GraphQL query and mutation against the Firebase Data Connect's generated GraphQL
           * schema. Grants full read and write access to the connected data sources. Note: Use
           * introspection query to explore the generated GraphQL schema.
           *
           * Create a request for the method "services.executeGraphql".
           *
           * This request holds the parameters needed by the the firebasedataconnect server.  After setting
           * any optional parameters, call the {@link ExecuteGraphql#execute()} method to invoke the remote
           * operation. <p> {@link ExecuteGraphql#initialize(com.google.api.client.googleapis.services.Abstr
           * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
           * the constructor. </p>
           *
           * @param name Required. The relative resource name of Firebase Data Connect service, in the format: ```
         *        projects/{project}/locations/{location}/services/{service} ```
           * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.GraphqlRequest}
           * @since 1.13
           */
          protected ExecuteGraphql(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.GraphqlRequest content) {
            super(FirebaseDataConnect.this, "POST", REST_PATH, content, com.google.api.services.firebasedataconnect.v1beta.model.GraphqlResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
            }
          }

          @Override
          public ExecuteGraphql set$Xgafv(java.lang.String $Xgafv) {
            return (ExecuteGraphql) super.set$Xgafv($Xgafv);
          }

          @Override
          public ExecuteGraphql setAccessToken(java.lang.String accessToken) {
            return (ExecuteGraphql) super.setAccessToken(accessToken);
          }

          @Override
          public ExecuteGraphql setAlt(java.lang.String alt) {
            return (ExecuteGraphql) super.setAlt(alt);
          }

          @Override
          public ExecuteGraphql setCallback(java.lang.String callback) {
            return (ExecuteGraphql) super.setCallback(callback);
          }

          @Override
          public ExecuteGraphql setFields(java.lang.String fields) {
            return (ExecuteGraphql) super.setFields(fields);
          }

          @Override
          public ExecuteGraphql setKey(java.lang.String key) {
            return (ExecuteGraphql) super.setKey(key);
          }

          @Override
          public ExecuteGraphql setOauthToken(java.lang.String oauthToken) {
            return (ExecuteGraphql) super.setOauthToken(oauthToken);
          }

          @Override
          public ExecuteGraphql setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (ExecuteGraphql) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public ExecuteGraphql setQuotaUser(java.lang.String quotaUser) {
            return (ExecuteGraphql) super.setQuotaUser(quotaUser);
          }

          @Override
          public ExecuteGraphql setUploadType(java.lang.String uploadType) {
            return (ExecuteGraphql) super.setUploadType(uploadType);
          }

          @Override
          public ExecuteGraphql setUploadProtocol(java.lang.String uploadProtocol) {
            return (ExecuteGraphql) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of Firebase Data Connect service, in the format:
           * ``` projects/{project}/locations/{location}/services/{service} ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of Firebase Data Connect service, in the format: ```
         projects/{project}/locations/{location}/services/{service} ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of Firebase Data Connect service, in the format:
           * ``` projects/{project}/locations/{location}/services/{service} ```
           */
          public ExecuteGraphql setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public ExecuteGraphql set(String parameterName, Object value) {
            return (ExecuteGraphql) super.set(parameterName, value);
          }
        }
        /**
         * Execute any GraphQL query against the Firebase Data Connect's generated GraphQL schema. Grants
         * full read to the connected data sources. `ExecuteGraphqlRead` is identical to `ExecuteGraphql`
         * except it only accepts read-only query.
         *
         * Create a request for the method "services.executeGraphqlRead".
         *
         * This request holds the parameters needed by the firebasedataconnect server.  After setting any
         * optional parameters, call the {@link ExecuteGraphqlRead#execute()} method to invoke the remote
         * operation.
         *
         * @param name Required. The relative resource name of Firebase Data Connect service, in the format: ```
         *        projects/{project}/locations/{location}/services/{service} ```
         * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.GraphqlRequest}
         * @return the request
         */
        public ExecuteGraphqlRead executeGraphqlRead(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.GraphqlRequest content) throws java.io.IOException {
          ExecuteGraphqlRead result = new ExecuteGraphqlRead(name, content);
          initialize(result);
          return result;
        }

        public class ExecuteGraphqlRead extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.GraphqlResponse> {

          private static final String REST_PATH = "v1beta/{+name}:executeGraphqlRead";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+$");

          /**
           * Execute any GraphQL query against the Firebase Data Connect's generated GraphQL schema. Grants
           * full read to the connected data sources. `ExecuteGraphqlRead` is identical to `ExecuteGraphql`
           * except it only accepts read-only query.
           *
           * Create a request for the method "services.executeGraphqlRead".
           *
           * This request holds the parameters needed by the the firebasedataconnect server.  After setting
           * any optional parameters, call the {@link ExecuteGraphqlRead#execute()} method to invoke the
           * remote operation. <p> {@link ExecuteGraphqlRead#initialize(com.google.api.client.googleapis.ser
           * vices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
           * after invoking the constructor. </p>
           *
           * @param name Required. The relative resource name of Firebase Data Connect service, in the format: ```
         *        projects/{project}/locations/{location}/services/{service} ```
           * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.GraphqlRequest}
           * @since 1.13
           */
          protected ExecuteGraphqlRead(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.GraphqlRequest content) {
            super(FirebaseDataConnect.this, "POST", REST_PATH, content, com.google.api.services.firebasedataconnect.v1beta.model.GraphqlResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
            }
          }

          @Override
          public ExecuteGraphqlRead set$Xgafv(java.lang.String $Xgafv) {
            return (ExecuteGraphqlRead) super.set$Xgafv($Xgafv);
          }

          @Override
          public ExecuteGraphqlRead setAccessToken(java.lang.String accessToken) {
            return (ExecuteGraphqlRead) super.setAccessToken(accessToken);
          }

          @Override
          public ExecuteGraphqlRead setAlt(java.lang.String alt) {
            return (ExecuteGraphqlRead) super.setAlt(alt);
          }

          @Override
          public ExecuteGraphqlRead setCallback(java.lang.String callback) {
            return (ExecuteGraphqlRead) super.setCallback(callback);
          }

          @Override
          public ExecuteGraphqlRead setFields(java.lang.String fields) {
            return (ExecuteGraphqlRead) super.setFields(fields);
          }

          @Override
          public ExecuteGraphqlRead setKey(java.lang.String key) {
            return (ExecuteGraphqlRead) super.setKey(key);
          }

          @Override
          public ExecuteGraphqlRead setOauthToken(java.lang.String oauthToken) {
            return (ExecuteGraphqlRead) super.setOauthToken(oauthToken);
          }

          @Override
          public ExecuteGraphqlRead setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (ExecuteGraphqlRead) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public ExecuteGraphqlRead setQuotaUser(java.lang.String quotaUser) {
            return (ExecuteGraphqlRead) super.setQuotaUser(quotaUser);
          }

          @Override
          public ExecuteGraphqlRead setUploadType(java.lang.String uploadType) {
            return (ExecuteGraphqlRead) super.setUploadType(uploadType);
          }

          @Override
          public ExecuteGraphqlRead setUploadProtocol(java.lang.String uploadProtocol) {
            return (ExecuteGraphqlRead) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The relative resource name of Firebase Data Connect service, in the format:
           * ``` projects/{project}/locations/{location}/services/{service} ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The relative resource name of Firebase Data Connect service, in the format: ```
         projects/{project}/locations/{location}/services/{service} ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The relative resource name of Firebase Data Connect service, in the format:
           * ``` projects/{project}/locations/{location}/services/{service} ```
           */
          public ExecuteGraphqlRead setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public ExecuteGraphqlRead set(String parameterName, Object value) {
            return (ExecuteGraphqlRead) super.set(parameterName, value);
          }
        }
        /**
         * Gets details of a single Service.
         *
         * Create a request for the method "services.get".
         *
         * This request holds the parameters needed by the firebasedataconnect server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the service to retrieve, in the format: ```
         *        projects/{project}/locations/{location}/services/{service} ```
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Service> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+$");

          /**
           * Gets details of a single Service.
           *
           * Create a request for the method "services.get".
           *
           * This request holds the parameters needed by the the firebasedataconnect server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the service to retrieve, in the format: ```
         *        projects/{project}/locations/{location}/services/{service} ```
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(FirebaseDataConnect.this, "GET", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.Service.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the service to retrieve, in the format: ```
           * projects/{project}/locations/{location}/services/{service} ```
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the service to retrieve, in the format: ```
         projects/{project}/locations/{location}/services/{service} ```
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the service to retrieve, in the format: ```
           * projects/{project}/locations/{location}/services/{service} ```
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists Services in a given project and location.
         *
         * Create a request for the method "services.list".
         *
         * This request holds the parameters needed by the firebasedataconnect server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. Value of parent.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.ListServicesResponse> {

          private static final String REST_PATH = "v1beta/{+parent}/services";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

          /**
           * Lists Services in a given project and location.
           *
           * Create a request for the method "services.list".
           *
           * This request holds the parameters needed by the the firebasedataconnect server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. Value of parent.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(FirebaseDataConnect.this, "GET", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.ListServicesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. Value of parent. */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. Value of parent.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /** Required. Value of parent. */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /** Optional. Filtering results. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** Optional. Filtering results.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** Optional. Filtering results. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** Optional. Hint for how to order the results. */
          @com.google.api.client.util.Key
          private java.lang.String orderBy;

          /** Optional. Hint for how to order the results.
           */
          public java.lang.String getOrderBy() {
            return orderBy;
          }

          /** Optional. Hint for how to order the results. */
          public List setOrderBy(java.lang.String orderBy) {
            this.orderBy = orderBy;
            return this;
          }

          /**
           * Optional. Requested page size. Server may return fewer items than requested. If
           * unspecified, server will pick an appropriate default.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Optional. Requested page size. Server may return fewer items than requested. If unspecified, server
         will pick an appropriate default.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * Optional. Requested page size. Server may return fewer items than requested. If
           * unspecified, server will pick an appropriate default.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * Optional. A page token, received from a previous `ListServices` call. Provide this to
           * retrieve the subsequent page. When paginating, all other parameters provided to
           * `ListServices` must match the call that provided the page token.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** Optional. A page token, received from a previous `ListServices` call. Provide this to retrieve the
         subsequent page. When paginating, all other parameters provided to `ListServices` must match the
         call that provided the page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * Optional. A page token, received from a previous `ListServices` call. Provide this to
           * retrieve the subsequent page. When paginating, all other parameters provided to
           * `ListServices` must match the call that provided the page token.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Updates the parameters of a single Service.
         *
         * Create a request for the method "services.patch".
         *
         * This request holds the parameters needed by the firebasedataconnect server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param name Identifier. The relative resource name of the Firebase Data Connect service, in the format: ```
         *        projects/{project}/locations/{location}/services/{service} ``` Note that the service ID is
         *        specific to Firebase Data Connect and does not correspond to any of the instance IDs of
         *        the underlying data source connections.
         * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.Service}
         * @return the request
         */
        public Patch patch(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.Service content) throws java.io.IOException {
          Patch result = new Patch(name, content);
          initialize(result);
          return result;
        }

        public class Patch extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Operation> {

          private static final String REST_PATH = "v1beta/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+$");

          /**
           * Updates the parameters of a single Service.
           *
           * Create a request for the method "services.patch".
           *
           * This request holds the parameters needed by the the firebasedataconnect server.  After setting
           * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
           * operation. <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Identifier. The relative resource name of the Firebase Data Connect service, in the format: ```
         *        projects/{project}/locations/{location}/services/{service} ``` Note that the service ID is
         *        specific to Firebase Data Connect and does not correspond to any of the instance IDs of
         *        the underlying data source connections.
           * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.Service}
           * @since 1.13
           */
          protected Patch(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.Service content) {
            super(FirebaseDataConnect.this, "PATCH", REST_PATH, content, com.google.api.services.firebasedataconnect.v1beta.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
            }
          }

          @Override
          public Patch set$Xgafv(java.lang.String $Xgafv) {
            return (Patch) super.set$Xgafv($Xgafv);
          }

          @Override
          public Patch setAccessToken(java.lang.String accessToken) {
            return (Patch) super.setAccessToken(accessToken);
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setCallback(java.lang.String callback) {
            return (Patch) super.setCallback(callback);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUploadType(java.lang.String uploadType) {
            return (Patch) super.setUploadType(uploadType);
          }

          @Override
          public Patch setUploadProtocol(java.lang.String uploadProtocol) {
            return (Patch) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Identifier. The relative resource name of the Firebase Data Connect service, in the
           * format: ``` projects/{project}/locations/{location}/services/{service} ``` Note that
           * the service ID is specific to Firebase Data Connect and does not correspond to any of
           * the instance IDs of the underlying data source connections.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Identifier. The relative resource name of the Firebase Data Connect service, in the format: ```
         projects/{project}/locations/{location}/services/{service} ``` Note that the service ID is specific
         to Firebase Data Connect and does not correspond to any of the instance IDs of the underlying data
         source connections.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Identifier. The relative resource name of the Firebase Data Connect service, in the
           * format: ``` projects/{project}/locations/{location}/services/{service} ``` Note that
           * the service ID is specific to Firebase Data Connect and does not correspond to any of
           * the instance IDs of the underlying data source connections.
           */
          public Patch setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
            }
            this.name = name;
            return this;
          }

          /**
           * Optional. If true and the Service is not found, a new Service will be created. In this
           * case, `update_mask` is ignored.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean allowMissing;

          /** Optional. If true and the Service is not found, a new Service will be created. In this case,
         `update_mask` is ignored.
           */
          public java.lang.Boolean getAllowMissing() {
            return allowMissing;
          }

          /**
           * Optional. If true and the Service is not found, a new Service will be created. In this
           * case, `update_mask` is ignored.
           */
          public Patch setAllowMissing(java.lang.Boolean allowMissing) {
            this.allowMissing = allowMissing;
            return this;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          @com.google.api.client.util.Key
          private java.lang.String requestId;

          /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
         must retry your request, the server will know to ignore the request if it has already been
         completed. The server will guarantee that for at least 60 minutes since the first request. For
         example, consider a situation where you make an initial request and the request times out. If you
         make the request again with the same request ID, the server can check if original operation with
         the same request ID was received, and if so, will ignore the second request. This prevents clients
         from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
         exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public java.lang.String getRequestId() {
            return requestId;
          }

          /**
           * Optional. An optional request ID to identify requests. Specify a unique request ID so
           * that if you must retry your request, the server will know to ignore the request if it
           * has already been completed. The server will guarantee that for at least 60 minutes
           * since the first request. For example, consider a situation where you make an initial
           * request and the request times out. If you make the request again with the same request
           * ID, the server can check if original operation with the same request ID was received,
           * and if so, will ignore the second request. This prevents clients from accidentally
           * creating duplicate commitments. The request ID must be a valid UUID with the exception
           * that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
           */
          public Patch setRequestId(java.lang.String requestId) {
            this.requestId = requestId;
            return this;
          }

          /**
           * Optional. Field mask is used to specify the fields to be overwritten in the Service
           * resource by the update. The fields specified in the update_mask are relative to the
           * resource, not the full request. A field will be overwritten if it is in the mask. If
           * the user does not provide a mask then all fields will be overwritten.
           */
          @com.google.api.client.util.Key
          private String updateMask;

          /** Optional. Field mask is used to specify the fields to be overwritten in the Service resource by the
         update. The fields specified in the update_mask are relative to the resource, not the full request.
         A field will be overwritten if it is in the mask. If the user does not provide a mask then all
         fields will be overwritten.
           */
          public String getUpdateMask() {
            return updateMask;
          }

          /**
           * Optional. Field mask is used to specify the fields to be overwritten in the Service
           * resource by the update. The fields specified in the update_mask are relative to the
           * resource, not the full request. A field will be overwritten if it is in the mask. If
           * the user does not provide a mask then all fields will be overwritten.
           */
          public Patch setUpdateMask(String updateMask) {
            this.updateMask = updateMask;
            return this;
          }

          /**
           * Optional. If set, validate the request and preview the Service, but do not actually
           * update it.
           */
          @com.google.api.client.util.Key
          private java.lang.Boolean validateOnly;

          /** Optional. If set, validate the request and preview the Service, but do not actually update it.
           */
          public java.lang.Boolean getValidateOnly() {
            return validateOnly;
          }

          /**
           * Optional. If set, validate the request and preview the Service, but do not actually
           * update it.
           */
          public Patch setValidateOnly(java.lang.Boolean validateOnly) {
            this.validateOnly = validateOnly;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the Connectors collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code FirebaseDataConnect firebasedataconnect = new FirebaseDataConnect(...);}
         *   {@code FirebaseDataConnect.Connectors.List request = firebasedataconnect.connectors().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Connectors connectors() {
          return new Connectors();
        }

        /**
         * The "connectors" collection of methods.
         */
        public class Connectors {

          /**
           * Creates a new Connector in a given project and location. The operations are validated against and
           * must be compatible with the active schema. If the operations and schema are not compatible or if
           * the schema is not present, this will result in an error.
           *
           * Create a request for the method "connectors.create".
           *
           * This request holds the parameters needed by the firebasedataconnect server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. Value for parent.
           * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.Connector}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.firebasedataconnect.v1beta.model.Connector content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Operation> {

            private static final String REST_PATH = "v1beta/{+parent}/connectors";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+$");

            /**
             * Creates a new Connector in a given project and location. The operations are validated against
             * and must be compatible with the active schema. If the operations and schema are not compatible
             * or if the schema is not present, this will result in an error.
             *
             * Create a request for the method "connectors.create".
             *
             * This request holds the parameters needed by the the firebasedataconnect server.  After setting
             * any optional parameters, call the {@link Create#execute()} method to invoke the remote
             * operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. Value for parent.
             * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.Connector}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.firebasedataconnect.v1beta.model.Connector content) {
              super(FirebaseDataConnect.this, "POST", REST_PATH, content, com.google.api.services.firebasedataconnect.v1beta.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. Value for parent. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. Value for parent.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. Value for parent. */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Required. The ID to use for the connector, which will become the final component of
             * the connector's resource name.
             */
            @com.google.api.client.util.Key
            private java.lang.String connectorId;

            /** Required. The ID to use for the connector, which will become the final component of the connector's
           resource name.
             */
            public java.lang.String getConnectorId() {
              return connectorId;
            }

            /**
             * Required. The ID to use for the connector, which will become the final component of
             * the connector's resource name.
             */
            public Create setConnectorId(java.lang.String connectorId) {
              this.connectorId = connectorId;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes since the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Create setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /**
             * Optional. If set, validate the request and preview the Connector, but do not actually
             * create it.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. If set, validate the request and preview the Connector, but do not actually create it.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. If set, validate the request and preview the Connector, but do not actually
             * create it.
             */
            public Create setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a single Connector.
           *
           * Create a request for the method "connectors.delete".
           *
           * This request holds the parameters needed by the firebasedataconnect server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the connector to delete, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Operation> {

            private static final String REST_PATH = "v1beta/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");

            /**
             * Deletes a single Connector.
             *
             * Create a request for the method "connectors.delete".
             *
             * This request holds the parameters needed by the the firebasedataconnect server.  After setting
             * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
             * operation. <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the connector to delete, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(FirebaseDataConnect.this, "DELETE", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the connector to delete, in the format: ```
             * projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the connector to delete, in the format: ```
           projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The name of the connector to delete, in the format: ```
             * projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. If true and the Connector is not found, the request will succeed but no
             * action will be taken on the server.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean allowMissing;

            /** Optional. If true and the Connector is not found, the request will succeed but no action will be
           taken on the server.
             */
            public java.lang.Boolean getAllowMissing() {
              return allowMissing;
            }

            /**
             * Optional. If true and the Connector is not found, the request will succeed but no
             * action will be taken on the server.
             */
            public Delete setAllowMissing(java.lang.Boolean allowMissing) {
              this.allowMissing = allowMissing;
              return this;
            }

            /**
             * Optional. The etag of the Connector. If this is provided, it must match the server's
             * etag.
             */
            @com.google.api.client.util.Key
            private java.lang.String etag;

            /** Optional. The etag of the Connector. If this is provided, it must match the server's etag.
             */
            public java.lang.String getEtag() {
              return etag;
            }

            /**
             * Optional. The etag of the Connector. If this is provided, it must match the server's
             * etag.
             */
            public Delete setEtag(java.lang.String etag) {
              this.etag = etag;
              return this;
            }

            /**
             * Optional. If set to true, any child resources (i.e. ConnectorRevisions) will also be
             * deleted. Otherwise, the request will only work if the Connector has no child
             * resources.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean force;

            /** Optional. If set to true, any child resources (i.e. ConnectorRevisions) will also be deleted.
           Otherwise, the request will only work if the Connector has no child resources.
             */
            public java.lang.Boolean getForce() {
              return force;
            }

            /**
             * Optional. If set to true, any child resources (i.e. ConnectorRevisions) will also be
             * deleted. Otherwise, the request will only work if the Connector has no child
             * resources.
             */
            public Delete setForce(java.lang.Boolean force) {
              this.force = force;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * after the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes after the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * after the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Delete setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /**
             * Optional. If set, validate the request and preview the Connector, but do not actually
             * delete it.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. If set, validate the request and preview the Connector, but do not actually delete it.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. If set, validate the request and preview the Connector, but do not actually
             * delete it.
             */
            public Delete setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Execute a predefined mutation in a Connector.
           *
           * Create a request for the method "connectors.executeMutation".
           *
           * This request holds the parameters needed by the firebasedataconnect server.  After setting any
           * optional parameters, call the {@link ExecuteMutation#execute()} method to invoke the remote
           * operation.
           *
           * @param name Required. The resource name of the connector to find the predefined mutation, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
           * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.ExecuteMutationRequest}
           * @return the request
           */
          public ExecuteMutation executeMutation(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.ExecuteMutationRequest content) throws java.io.IOException {
            ExecuteMutation result = new ExecuteMutation(name, content);
            initialize(result);
            return result;
          }

          public class ExecuteMutation extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.ExecuteMutationResponse> {

            private static final String REST_PATH = "v1beta/{+name}:executeMutation";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");

            /**
             * Execute a predefined mutation in a Connector.
             *
             * Create a request for the method "connectors.executeMutation".
             *
             * This request holds the parameters needed by the the firebasedataconnect server.  After setting
             * any optional parameters, call the {@link ExecuteMutation#execute()} method to invoke the remote
             * operation. <p> {@link ExecuteMutation#initialize(com.google.api.client.googleapis.services.Abst
             * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
             * the constructor. </p>
             *
             * @param name Required. The resource name of the connector to find the predefined mutation, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.ExecuteMutationRequest}
             * @since 1.13
             */
            protected ExecuteMutation(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.ExecuteMutationRequest content) {
              super(FirebaseDataConnect.this, "POST", REST_PATH, content, com.google.api.services.firebasedataconnect.v1beta.model.ExecuteMutationResponse.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");
              }
            }

            @Override
            public ExecuteMutation set$Xgafv(java.lang.String $Xgafv) {
              return (ExecuteMutation) super.set$Xgafv($Xgafv);
            }

            @Override
            public ExecuteMutation setAccessToken(java.lang.String accessToken) {
              return (ExecuteMutation) super.setAccessToken(accessToken);
            }

            @Override
            public ExecuteMutation setAlt(java.lang.String alt) {
              return (ExecuteMutation) super.setAlt(alt);
            }

            @Override
            public ExecuteMutation setCallback(java.lang.String callback) {
              return (ExecuteMutation) super.setCallback(callback);
            }

            @Override
            public ExecuteMutation setFields(java.lang.String fields) {
              return (ExecuteMutation) super.setFields(fields);
            }

            @Override
            public ExecuteMutation setKey(java.lang.String key) {
              return (ExecuteMutation) super.setKey(key);
            }

            @Override
            public ExecuteMutation setOauthToken(java.lang.String oauthToken) {
              return (ExecuteMutation) super.setOauthToken(oauthToken);
            }

            @Override
            public ExecuteMutation setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ExecuteMutation) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ExecuteMutation setQuotaUser(java.lang.String quotaUser) {
              return (ExecuteMutation) super.setQuotaUser(quotaUser);
            }

            @Override
            public ExecuteMutation setUploadType(java.lang.String uploadType) {
              return (ExecuteMutation) super.setUploadType(uploadType);
            }

            @Override
            public ExecuteMutation setUploadProtocol(java.lang.String uploadProtocol) {
              return (ExecuteMutation) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The resource name of the connector to find the predefined mutation, in the
             * format: ```
             * projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The resource name of the connector to find the predefined mutation, in the format: ```
           projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The resource name of the connector to find the predefined mutation, in the
             * format: ```
             * projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            public ExecuteMutation setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public ExecuteMutation set(String parameterName, Object value) {
              return (ExecuteMutation) super.set(parameterName, value);
            }
          }
          /**
           * Execute a predefined query in a Connector.
           *
           * Create a request for the method "connectors.executeQuery".
           *
           * This request holds the parameters needed by the firebasedataconnect server.  After setting any
           * optional parameters, call the {@link ExecuteQuery#execute()} method to invoke the remote
           * operation.
           *
           * @param name Required. The resource name of the connector to find the predefined query, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
           * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.ExecuteQueryRequest}
           * @return the request
           */
          public ExecuteQuery executeQuery(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.ExecuteQueryRequest content) throws java.io.IOException {
            ExecuteQuery result = new ExecuteQuery(name, content);
            initialize(result);
            return result;
          }

          public class ExecuteQuery extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.ExecuteQueryResponse> {

            private static final String REST_PATH = "v1beta/{+name}:executeQuery";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");

            /**
             * Execute a predefined query in a Connector.
             *
             * Create a request for the method "connectors.executeQuery".
             *
             * This request holds the parameters needed by the the firebasedataconnect server.  After setting
             * any optional parameters, call the {@link ExecuteQuery#execute()} method to invoke the remote
             * operation. <p> {@link
             * ExecuteQuery#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The resource name of the connector to find the predefined query, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.ExecuteQueryRequest}
             * @since 1.13
             */
            protected ExecuteQuery(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.ExecuteQueryRequest content) {
              super(FirebaseDataConnect.this, "POST", REST_PATH, content, com.google.api.services.firebasedataconnect.v1beta.model.ExecuteQueryResponse.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");
              }
            }

            @Override
            public ExecuteQuery set$Xgafv(java.lang.String $Xgafv) {
              return (ExecuteQuery) super.set$Xgafv($Xgafv);
            }

            @Override
            public ExecuteQuery setAccessToken(java.lang.String accessToken) {
              return (ExecuteQuery) super.setAccessToken(accessToken);
            }

            @Override
            public ExecuteQuery setAlt(java.lang.String alt) {
              return (ExecuteQuery) super.setAlt(alt);
            }

            @Override
            public ExecuteQuery setCallback(java.lang.String callback) {
              return (ExecuteQuery) super.setCallback(callback);
            }

            @Override
            public ExecuteQuery setFields(java.lang.String fields) {
              return (ExecuteQuery) super.setFields(fields);
            }

            @Override
            public ExecuteQuery setKey(java.lang.String key) {
              return (ExecuteQuery) super.setKey(key);
            }

            @Override
            public ExecuteQuery setOauthToken(java.lang.String oauthToken) {
              return (ExecuteQuery) super.setOauthToken(oauthToken);
            }

            @Override
            public ExecuteQuery setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ExecuteQuery) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ExecuteQuery setQuotaUser(java.lang.String quotaUser) {
              return (ExecuteQuery) super.setQuotaUser(quotaUser);
            }

            @Override
            public ExecuteQuery setUploadType(java.lang.String uploadType) {
              return (ExecuteQuery) super.setUploadType(uploadType);
            }

            @Override
            public ExecuteQuery setUploadProtocol(java.lang.String uploadProtocol) {
              return (ExecuteQuery) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The resource name of the connector to find the predefined query, in the
             * format: ```
             * projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The resource name of the connector to find the predefined query, in the format: ```
           projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The resource name of the connector to find the predefined query, in the
             * format: ```
             * projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            public ExecuteQuery setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public ExecuteQuery set(String parameterName, Object value) {
              return (ExecuteQuery) super.set(parameterName, value);
            }
          }
          /**
           * Gets details of a single Connector.
           *
           * Create a request for the method "connectors.get".
           *
           * This request holds the parameters needed by the firebasedataconnect server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the connector to retrieve, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Connector> {

            private static final String REST_PATH = "v1beta/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");

            /**
             * Gets details of a single Connector.
             *
             * Create a request for the method "connectors.get".
             *
             * This request holds the parameters needed by the the firebasedataconnect server.  After setting
             * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             * <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the connector to retrieve, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(FirebaseDataConnect.this, "GET", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.Connector.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the connector to retrieve, in the format: ```
             * projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the connector to retrieve, in the format: ```
           projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The name of the connector to retrieve, in the format: ```
             * projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists Connectors in a given project and location.
           *
           * Create a request for the method "connectors.list".
           *
           * This request holds the parameters needed by the firebasedataconnect server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. Value of parent.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.ListConnectorsResponse> {

            private static final String REST_PATH = "v1beta/{+parent}/connectors";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+$");

            /**
             * Lists Connectors in a given project and location.
             *
             * Create a request for the method "connectors.list".
             *
             * This request holds the parameters needed by the the firebasedataconnect server.  After setting
             * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             * <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. Value of parent.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(FirebaseDataConnect.this, "GET", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.ListConnectorsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. Value of parent. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. Value of parent.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. Value of parent. */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Optional. Filtering results. */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** Optional. Filtering results.
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /** Optional. Filtering results. */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** Optional. Hint for how to order the results. */
            @com.google.api.client.util.Key
            private java.lang.String orderBy;

            /** Optional. Hint for how to order the results.
             */
            public java.lang.String getOrderBy() {
              return orderBy;
            }

            /** Optional. Hint for how to order the results. */
            public List setOrderBy(java.lang.String orderBy) {
              this.orderBy = orderBy;
              return this;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. Requested page size. Server may return fewer items than requested. If unspecified, server
           will pick an appropriate default.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * Optional. A page token, received from a previous `ListConnectors` call. Provide this
             * to retrieve the subsequent page. When paginating, all other parameters provided to
             * `ListConnectors` must match the call that provided the page token.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. A page token, received from a previous `ListConnectors` call. Provide this to retrieve
           the subsequent page. When paginating, all other parameters provided to `ListConnectors` must match
           the call that provided the page token.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * Optional. A page token, received from a previous `ListConnectors` call. Provide this
             * to retrieve the subsequent page. When paginating, all other parameters provided to
             * `ListConnectors` must match the call that provided the page token.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates the parameters of a single Connector, and creates a new ConnectorRevision with the
           * updated Connector. The operations are validated against and must be compatible with the live
           * schema. If the operations and schema are not compatible or if the schema is not present, this
           * will result in an error.
           *
           * Create a request for the method "connectors.patch".
           *
           * This request holds the parameters needed by the firebasedataconnect server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name Identifier. The relative resource name of the connector, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
           * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.Connector}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.Connector content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Operation> {

            private static final String REST_PATH = "v1beta/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");

            /**
             * Updates the parameters of a single Connector, and creates a new ConnectorRevision with the
             * updated Connector. The operations are validated against and must be compatible with the live
             * schema. If the operations and schema are not compatible or if the schema is not present, this
             * will result in an error.
             *
             * Create a request for the method "connectors.patch".
             *
             * This request holds the parameters needed by the the firebasedataconnect server.  After setting
             * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
             * operation. <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Identifier. The relative resource name of the connector, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.Connector}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.Connector content) {
              super(FirebaseDataConnect.this, "PATCH", REST_PATH, content, com.google.api.services.firebasedataconnect.v1beta.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Identifier. The relative resource name of the connector, in the format: ```
             * projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Identifier. The relative resource name of the connector, in the format: ```
           projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Identifier. The relative resource name of the connector, in the format: ```
             * projects/{project}/locations/{location}/services/{service}/connectors/{connector} ```
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/connectors/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. If true and the Connector is not found, a new Connector will be created. In
             * this case, `update_mask` is ignored.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean allowMissing;

            /** Optional. If true and the Connector is not found, a new Connector will be created. In this case,
           `update_mask` is ignored.
             */
            public java.lang.Boolean getAllowMissing() {
              return allowMissing;
            }

            /**
             * Optional. If true and the Connector is not found, a new Connector will be created. In
             * this case, `update_mask` is ignored.
             */
            public Patch setAllowMissing(java.lang.Boolean allowMissing) {
              this.allowMissing = allowMissing;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes since the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Patch setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /**
             * Optional. Field mask is used to specify the fields to be overwritten in the Connector
             * resource by the update. The fields specified in the update_mask are relative to the
             * resource, not the full request. A field will be overwritten if it is in the mask. If
             * the user does not provide a mask then all fields will be overwritten.
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Optional. Field mask is used to specify the fields to be overwritten in the Connector resource by
           the update. The fields specified in the update_mask are relative to the resource, not the full
           request. A field will be overwritten if it is in the mask. If the user does not provide a mask then
           all fields will be overwritten.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * Optional. Field mask is used to specify the fields to be overwritten in the Connector
             * resource by the update. The fields specified in the update_mask are relative to the
             * resource, not the full request. A field will be overwritten if it is in the mask. If
             * the user does not provide a mask then all fields will be overwritten.
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            /**
             * Optional. If set, validate the request and preview the Connector, but do not actually
             * update it.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. If set, validate the request and preview the Connector, but do not actually update it.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. If set, validate the request and preview the Connector, but do not actually
             * update it.
             */
            public Patch setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Schemas collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code FirebaseDataConnect firebasedataconnect = new FirebaseDataConnect(...);}
         *   {@code FirebaseDataConnect.Schemas.List request = firebasedataconnect.schemas().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Schemas schemas() {
          return new Schemas();
        }

        /**
         * The "schemas" collection of methods.
         */
        public class Schemas {

          /**
           * Creates a new Schema in a given project and location. Only creation of `schemas/main` is
           * supported and calling create with any other schema ID will result in an error.
           *
           * Create a request for the method "schemas.create".
           *
           * This request holds the parameters needed by the firebasedataconnect server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. Value for parent.
           * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.Schema}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.firebasedataconnect.v1beta.model.Schema content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Operation> {

            private static final String REST_PATH = "v1beta/{+parent}/schemas";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+$");

            /**
             * Creates a new Schema in a given project and location. Only creation of `schemas/main` is
             * supported and calling create with any other schema ID will result in an error.
             *
             * Create a request for the method "schemas.create".
             *
             * This request holds the parameters needed by the the firebasedataconnect server.  After setting
             * any optional parameters, call the {@link Create#execute()} method to invoke the remote
             * operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. Value for parent.
             * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.Schema}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.firebasedataconnect.v1beta.model.Schema content) {
              super(FirebaseDataConnect.this, "POST", REST_PATH, content, com.google.api.services.firebasedataconnect.v1beta.model.Operation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. Value for parent. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. Value for parent.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. Value for parent. */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes since the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Create setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /**
             * Required. The ID to use for the schema, which will become the final component of the
             * schema's resource name. Currently, only `main` is supported and any other schema ID
             * will result in an error.
             */
            @com.google.api.client.util.Key
            private java.lang.String schemaId;

            /** Required. The ID to use for the schema, which will become the final component of the schema's
           resource name. Currently, only `main` is supported and any other schema ID will result in an error.
             */
            public java.lang.String getSchemaId() {
              return schemaId;
            }

            /**
             * Required. The ID to use for the schema, which will become the final component of the
             * schema's resource name. Currently, only `main` is supported and any other schema ID
             * will result in an error.
             */
            public Create setSchemaId(java.lang.String schemaId) {
              this.schemaId = schemaId;
              return this;
            }

            /**
             * Optional. If set, validate the request and preview the Schema, but do not actually
             * update it.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. If set, validate the request and preview the Schema, but do not actually update it.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. If set, validate the request and preview the Schema, but do not actually
             * update it.
             */
            public Create setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a single Schema. Because the schema and connectors must be compatible at all times, if
           * this is called while any connectors are active, this will result in an error.
           *
           * Create a request for the method "schemas.delete".
           *
           * This request holds the parameters needed by the firebasedataconnect server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the schema to delete, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/schemas/{schema} ```
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Operation> {

            private static final String REST_PATH = "v1beta/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+/schemas/[^/]+$");

            /**
             * Deletes a single Schema. Because the schema and connectors must be compatible at all times, if
             * this is called while any connectors are active, this will result in an error.
             *
             * Create a request for the method "schemas.delete".
             *
             * This request holds the parameters needed by the the firebasedataconnect server.  After setting
             * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
             * operation. <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the schema to delete, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/schemas/{schema} ```
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(FirebaseDataConnect.this, "DELETE", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/schemas/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the schema to delete, in the format: ```
             * projects/{project}/locations/{location}/services/{service}/schemas/{schema} ```
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the schema to delete, in the format: ```
           projects/{project}/locations/{location}/services/{service}/schemas/{schema} ```
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The name of the schema to delete, in the format: ```
             * projects/{project}/locations/{location}/services/{service}/schemas/{schema} ```
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/schemas/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. If true and the Schema is not found, the request will succeed but no action
             * will be taken on the server.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean allowMissing;

            /** Optional. If true and the Schema is not found, the request will succeed but no action will be taken
           on the server.
             */
            public java.lang.Boolean getAllowMissing() {
              return allowMissing;
            }

            /**
             * Optional. If true and the Schema is not found, the request will succeed but no action
             * will be taken on the server.
             */
            public Delete setAllowMissing(java.lang.Boolean allowMissing) {
              this.allowMissing = allowMissing;
              return this;
            }

            /**
             * Optional. The etag of the Schema. If this is provided, it must match the server's
             * etag.
             */
            @com.google.api.client.util.Key
            private java.lang.String etag;

            /** Optional. The etag of the Schema. If this is provided, it must match the server's etag.
             */
            public java.lang.String getEtag() {
              return etag;
            }

            /**
             * Optional. The etag of the Schema. If this is provided, it must match the server's
             * etag.
             */
            public Delete setEtag(java.lang.String etag) {
              this.etag = etag;
              return this;
            }

            /**
             * Optional. If set to true, any child resources (i.e. SchemaRevisions) will also be
             * deleted.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean force;

            /** Optional. If set to true, any child resources (i.e. SchemaRevisions) will also be deleted.
             */
            public java.lang.Boolean getForce() {
              return force;
            }

            /**
             * Optional. If set to true, any child resources (i.e. SchemaRevisions) will also be
             * deleted.
             */
            public Delete setForce(java.lang.Boolean force) {
              this.force = force;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * after the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes after the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * after the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Delete setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /**
             * Optional. If set, validate the request and preview the Schema, but do not actually
             * delete it.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. If set, validate the request and preview the Schema, but do not actually delete it.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. If set, validate the request and preview the Schema, but do not actually
             * delete it.
             */
            public Delete setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets details of a single Schema.
           *
           * Create a request for the method "schemas.get".
           *
           * This request holds the parameters needed by the firebasedataconnect server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the schema to retrieve, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/schemas/{schema} ```
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Schema> {

            private static final String REST_PATH = "v1beta/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+/schemas/[^/]+$");

            /**
             * Gets details of a single Schema.
             *
             * Create a request for the method "schemas.get".
             *
             * This request holds the parameters needed by the the firebasedataconnect server.  After setting
             * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             * <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the schema to retrieve, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/schemas/{schema} ```
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(FirebaseDataConnect.this, "GET", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.Schema.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/schemas/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the schema to retrieve, in the format: ```
             * projects/{project}/locations/{location}/services/{service}/schemas/{schema} ```
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the schema to retrieve, in the format: ```
           projects/{project}/locations/{location}/services/{service}/schemas/{schema} ```
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The name of the schema to retrieve, in the format: ```
             * projects/{project}/locations/{location}/services/{service}/schemas/{schema} ```
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/schemas/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists Schemas in a given project and location. Note that only `schemas/main` is supported, so
           * this will always return at most one Schema.
           *
           * Create a request for the method "schemas.list".
           *
           * This request holds the parameters needed by the firebasedataconnect server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. Value of parent.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.ListSchemasResponse> {

            private static final String REST_PATH = "v1beta/{+parent}/schemas";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+$");

            /**
             * Lists Schemas in a given project and location. Note that only `schemas/main` is supported, so
             * this will always return at most one Schema.
             *
             * Create a request for the method "schemas.list".
             *
             * This request holds the parameters needed by the the firebasedataconnect server.  After setting
             * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             * <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. Value of parent.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(FirebaseDataConnect.this, "GET", REST_PATH, null, com.google.api.services.firebasedataconnect.v1beta.model.ListSchemasResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. Value of parent. */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. Value of parent.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /** Required. Value of parent. */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Optional. Filtering results. */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** Optional. Filtering results.
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /** Optional. Filtering results. */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** Optional. Hint for how to order the results. */
            @com.google.api.client.util.Key
            private java.lang.String orderBy;

            /** Optional. Hint for how to order the results.
             */
            public java.lang.String getOrderBy() {
              return orderBy;
            }

            /** Optional. Hint for how to order the results. */
            public List setOrderBy(java.lang.String orderBy) {
              this.orderBy = orderBy;
              return this;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Optional. Requested page size. Server may return fewer items than requested. If unspecified, server
           will pick an appropriate default.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * Optional. Requested page size. Server may return fewer items than requested. If
             * unspecified, server will pick an appropriate default.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * Optional. A page token, received from a previous `ListSchemas` call. Provide this to
             * retrieve the subsequent page. When paginating, all other parameters provided to
             * `ListSchemas` must match the call that provided the page token.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Optional. A page token, received from a previous `ListSchemas` call. Provide this to retrieve the
           subsequent page. When paginating, all other parameters provided to `ListSchemas` must match the
           call that provided the page token.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * Optional. A page token, received from a previous `ListSchemas` call. Provide this to
             * retrieve the subsequent page. When paginating, all other parameters provided to
             * `ListSchemas` must match the call that provided the page token.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates the parameters of a single Schema, and creates a new SchemaRevision with the updated
           * Schema.
           *
           * Create a request for the method "schemas.patch".
           *
           * This request holds the parameters needed by the firebasedataconnect server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name Identifier. The relative resource name of the schema, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/schemas/{schema} ``` Right now,
           *        the only supported schema is "main".
           * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.Schema}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.Schema content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends FirebaseDataConnectRequest<com.google.api.services.firebasedataconnect.v1beta.model.Operation> {

            private static final String REST_PATH = "v1beta/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/services/[^/]+/schemas/[^/]+$");

            /**
             * Updates the parameters of a single Schema, and creates a new SchemaRevision with the updated
             * Schema.
             *
             * Create a request for the method "schemas.patch".
             *
             * This request holds the parameters needed by the the firebasedataconnect server.  After setting
             * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
             * operation. <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Identifier. The relative resource name of the schema, in the format: ```
           *        projects/{project}/locations/{location}/services/{service}/schemas/{schema} ``` Right now,
           *        the only supported schema is "main".
             * @param content the {@link com.google.api.services.firebasedataconnect.v1beta.model.Schema}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.firebasedataconnect.v1beta.model.Schema content) {
              super(FirebaseDataConnect.this, "PATCH", REST_PATH, content, com.google.api.services.firebasedataconnect.v1beta.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/schemas/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Identifier. The relative resource name of the schema, in the format: ```
             * projects/{project}/locations/{location}/services/{service}/schemas/{schema} ``` Right
             * now, the only supported schema is "main".
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Identifier. The relative resource name of the schema, in the format: ```
           projects/{project}/locations/{location}/services/{service}/schemas/{schema} ``` Right now, the only
           supported schema is "main".
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Identifier. The relative resource name of the schema, in the format: ```
             * projects/{project}/locations/{location}/services/{service}/schemas/{schema} ``` Right
             * now, the only supported schema is "main".
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/services/[^/]+/schemas/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /**
             * Optional. If true and the Schema is not found, a new Schema will be created. In this
             * case, `update_mask` is ignored.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean allowMissing;

            /** Optional. If true and the Schema is not found, a new Schema will be created. In this case,
           `update_mask` is ignored.
             */
            public java.lang.Boolean getAllowMissing() {
              return allowMissing;
            }

            /**
             * Optional. If true and the Schema is not found, a new Schema will be created. In this
             * case, `update_mask` is ignored.
             */
            public Patch setAllowMissing(java.lang.Boolean allowMissing) {
              this.allowMissing = allowMissing;
              return this;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            @com.google.api.client.util.Key
            private java.lang.String requestId;

            /** Optional. An optional request ID to identify requests. Specify a unique request ID so that if you
           must retry your request, the server will know to ignore the request if it has already been
           completed. The server will guarantee that for at least 60 minutes since the first request. For
           example, consider a situation where you make an initial request and the request times out. If you
           make the request again with the same request ID, the server can check if original operation with
           the same request ID was received, and if so, will ignore the second request. This prevents clients
           from accidentally creating duplicate commitments. The request ID must be a valid UUID with the
           exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public java.lang.String getRequestId() {
              return requestId;
            }

            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so
             * that if you must retry your request, the server will know to ignore the request if it
             * has already been completed. The server will guarantee that for at least 60 minutes
             * since the first request. For example, consider a situation where you make an initial
             * request and the request times out. If you make the request again with the same
             * request ID, the server can check if original operation with the same request ID was
             * received, and if so, will ignore the second request. This prevents clients from
             * accidentally creating duplicate commitments. The request ID must be a valid UUID with
             * the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
             */
            public Patch setRequestId(java.lang.String requestId) {
              this.requestId = requestId;
              return this;
            }

            /**
             * Optional. Field mask is used to specify the fields to be overwritten in the Schema
             * resource by the update. The fields specified in the update_mask are relative to the
             * resource, not the full request. A field will be overwritten if it is in the mask. If
             * the user does not provide a mask then all fields will be overwritten.
             */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Optional. Field mask is used to specify the fields to be overwritten in the Schema resource by the
           update. The fields specified in the update_mask are relative to the resource, not the full request.
           A field will be overwritten if it is in the mask. If the user does not provide a mask then all
           fields will be overwritten.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /**
             * Optional. Field mask is used to specify the fields to be overwritten in the Schema
             * resource by the update. The fields specified in the update_mask are relative to the
             * resource, not the full request. A field will be overwritten if it is in the mask. If
             * the user does not provide a mask then all fields will be overwritten.
             */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            /**
             * Optional. If set, validate the request and preview the Schema, but do not actually
             * update it.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean validateOnly;

            /** Optional. If set, validate the request and preview the Schema, but do not actually update it.
             */
            public java.lang.Boolean getValidateOnly() {
              return validateOnly;
            }

            /**
             * Optional. If set, validate the request and preview the Schema, but do not actually
             * update it.
             */
            public Patch setValidateOnly(java.lang.Boolean validateOnly) {
              this.validateOnly = validateOnly;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

        }
      }
    }
  }

  /**
   * Builder for {@link FirebaseDataConnect}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link FirebaseDataConnect}. */
    @Override
    public FirebaseDataConnect build() {
      return new FirebaseDataConnect(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FirebaseDataConnectRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFirebaseDataConnectRequestInitializer(
        FirebaseDataConnectRequestInitializer firebasedataconnectRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(firebasedataconnectRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
