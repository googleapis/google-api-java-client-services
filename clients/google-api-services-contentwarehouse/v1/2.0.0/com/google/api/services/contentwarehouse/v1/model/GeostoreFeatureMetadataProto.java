/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * General metadata related to a given feature in the Geo repository.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreFeatureMetadataProto extends com.google.api.client.json.GenericJson {

  /**
   * This field indicates whether the feature is subject to bulk updates. Caution must be exercised
   * while editing such features since the changes made by the edits will be overwritten by the bulk
   * update (if the feature is bulk updated). See go/mapfacts-abu for more information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bulkUpdatable;

  /**
   * core_version_token is an opaque token representing the version of the core fields of the
   * feature. This field is not updated when attachments are changed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String coreVersionToken;

  /**
   * Metadata about certain repeated fields and their subfields, for which field type is not
   * granular enough.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureFieldMetadataProto fieldMetadata;

  /**
   * Feature ID forwardings, if applicable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdForwardingsProto forwardings;

  /**
   * Metadata related to the history.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureHistoryMetadataProto history;

  /**
   * version_token is an opaque token representing the version of this feature. It can be used as a
   * concurrency token when sending edits.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String versionToken;

  /**
   * This field indicates whether the feature is subject to bulk updates. Caution must be exercised
   * while editing such features since the changes made by the edits will be overwritten by the bulk
   * update (if the feature is bulk updated). See go/mapfacts-abu for more information.
   * @return value or {@code null} for none
   */
  public java.lang.String getBulkUpdatable() {
    return bulkUpdatable;
  }

  /**
   * This field indicates whether the feature is subject to bulk updates. Caution must be exercised
   * while editing such features since the changes made by the edits will be overwritten by the bulk
   * update (if the feature is bulk updated). See go/mapfacts-abu for more information.
   * @param bulkUpdatable bulkUpdatable or {@code null} for none
   */
  public GeostoreFeatureMetadataProto setBulkUpdatable(java.lang.String bulkUpdatable) {
    this.bulkUpdatable = bulkUpdatable;
    return this;
  }

  /**
   * core_version_token is an opaque token representing the version of the core fields of the
   * feature. This field is not updated when attachments are changed.
   * @see #decodeCoreVersionToken()
   * @return value or {@code null} for none
   */
  public java.lang.String getCoreVersionToken() {
    return coreVersionToken;
  }

  /**
   * core_version_token is an opaque token representing the version of the core fields of the
   * feature. This field is not updated when attachments are changed.
   * @see #getCoreVersionToken()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeCoreVersionToken() {
    return com.google.api.client.util.Base64.decodeBase64(coreVersionToken);
  }

  /**
   * core_version_token is an opaque token representing the version of the core fields of the
   * feature. This field is not updated when attachments are changed.
   * @see #encodeCoreVersionToken()
   * @param coreVersionToken coreVersionToken or {@code null} for none
   */
  public GeostoreFeatureMetadataProto setCoreVersionToken(java.lang.String coreVersionToken) {
    this.coreVersionToken = coreVersionToken;
    return this;
  }

  /**
   * core_version_token is an opaque token representing the version of the core fields of the
   * feature. This field is not updated when attachments are changed.
   * @see #setCoreVersionToken()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public GeostoreFeatureMetadataProto encodeCoreVersionToken(byte[] coreVersionToken) {
    this.coreVersionToken = com.google.api.client.util.Base64.encodeBase64URLSafeString(coreVersionToken);
    return this;
  }

  /**
   * Metadata about certain repeated fields and their subfields, for which field type is not
   * granular enough.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureFieldMetadataProto getFieldMetadata() {
    return fieldMetadata;
  }

  /**
   * Metadata about certain repeated fields and their subfields, for which field type is not
   * granular enough.
   * @param fieldMetadata fieldMetadata or {@code null} for none
   */
  public GeostoreFeatureMetadataProto setFieldMetadata(GeostoreFeatureFieldMetadataProto fieldMetadata) {
    this.fieldMetadata = fieldMetadata;
    return this;
  }

  /**
   * Feature ID forwardings, if applicable.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdForwardingsProto getForwardings() {
    return forwardings;
  }

  /**
   * Feature ID forwardings, if applicable.
   * @param forwardings forwardings or {@code null} for none
   */
  public GeostoreFeatureMetadataProto setForwardings(GeostoreFeatureIdForwardingsProto forwardings) {
    this.forwardings = forwardings;
    return this;
  }

  /**
   * Metadata related to the history.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureHistoryMetadataProto getHistory() {
    return history;
  }

  /**
   * Metadata related to the history.
   * @param history history or {@code null} for none
   */
  public GeostoreFeatureMetadataProto setHistory(GeostoreFeatureHistoryMetadataProto history) {
    this.history = history;
    return this;
  }

  /**
   * version_token is an opaque token representing the version of this feature. It can be used as a
   * concurrency token when sending edits.
   * @see #decodeVersionToken()
   * @return value or {@code null} for none
   */
  public java.lang.String getVersionToken() {
    return versionToken;
  }

  /**
   * version_token is an opaque token representing the version of this feature. It can be used as a
   * concurrency token when sending edits.
   * @see #getVersionToken()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeVersionToken() {
    return com.google.api.client.util.Base64.decodeBase64(versionToken);
  }

  /**
   * version_token is an opaque token representing the version of this feature. It can be used as a
   * concurrency token when sending edits.
   * @see #encodeVersionToken()
   * @param versionToken versionToken or {@code null} for none
   */
  public GeostoreFeatureMetadataProto setVersionToken(java.lang.String versionToken) {
    this.versionToken = versionToken;
    return this;
  }

  /**
   * version_token is an opaque token representing the version of this feature. It can be used as a
   * concurrency token when sending edits.
   * @see #setVersionToken()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public GeostoreFeatureMetadataProto encodeVersionToken(byte[] versionToken) {
    this.versionToken = com.google.api.client.util.Base64.encodeBase64URLSafeString(versionToken);
    return this;
  }

  @Override
  public GeostoreFeatureMetadataProto set(String fieldName, Object value) {
    return (GeostoreFeatureMetadataProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreFeatureMetadataProto clone() {
    return (GeostoreFeatureMetadataProto) super.clone();
  }

}
