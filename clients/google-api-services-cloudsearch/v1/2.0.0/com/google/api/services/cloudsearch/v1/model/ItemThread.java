/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * An ItemThread is an ordered list of Items. An ItemThread corresponds to a "conversation" in the
 * context of mail. An Item belongs to exactly one ItemThread.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ItemThread extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ClusterInfo clusterInfo;

  /**
   * The Items in the ItemThread. In the context of a search, the list of Items may be a subset of
   * those that logically belong to the ItemThread. The details of which items are included are
   * available in the ItemThreadView returned in the overall rpc response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<FuseboxItem> item;

  static {
    // hack to force ProGuard to consider FuseboxItem used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(FuseboxItem.class);
  }

  /**
   * The server id of the last item returned in the ItemThread. This can be deduced from the [item]
   * list but is provided for convenience. When manually constructing an ItemThreadViewSpec to
   * perform operations on the ItemThread, this value can be used as the [high_item_id_watermark].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger lastItemId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private FuseboxItemThreadMatchInfo matchInfo;

  /**
   * A snippet summarizing the thread. This field is only populated for searches.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String snippet;

  /**
   * The MultiKey that identifies this thread. This value never changes, i.e. remains constant
   * across modifications to the thread, including addition, relabeling, or deletion of contained
   * Items. As such, the thread key may not necessarily correspond to the key of an contained Item.
   * Legacy note: The "server_id" of the thread key is equivalent to the notion of the "original
   * thread id" in the CSS API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MultiKey threadKey;

  /**
   * A base64 encoded and encrypted string generated from the Gaia Id and the thread id. Used to
   * generate the permalink for this thread, exposed from Gmail API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String threadLocator;

  /**
   * Next available id : 10
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TopicState topicState;

  /**
   * The latest history operation id that resulted in a mutation of any item in the thread.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger version;

  /**
   * @return value or {@code null} for none
   */
  public ClusterInfo getClusterInfo() {
    return clusterInfo;
  }

  /**
   * @param clusterInfo clusterInfo or {@code null} for none
   */
  public ItemThread setClusterInfo(ClusterInfo clusterInfo) {
    this.clusterInfo = clusterInfo;
    return this;
  }

  /**
   * The Items in the ItemThread. In the context of a search, the list of Items may be a subset of
   * those that logically belong to the ItemThread. The details of which items are included are
   * available in the ItemThreadView returned in the overall rpc response.
   * @return value or {@code null} for none
   */
  public java.util.List<FuseboxItem> getItem() {
    return item;
  }

  /**
   * The Items in the ItemThread. In the context of a search, the list of Items may be a subset of
   * those that logically belong to the ItemThread. The details of which items are included are
   * available in the ItemThreadView returned in the overall rpc response.
   * @param item item or {@code null} for none
   */
  public ItemThread setItem(java.util.List<FuseboxItem> item) {
    this.item = item;
    return this;
  }

  /**
   * The server id of the last item returned in the ItemThread. This can be deduced from the [item]
   * list but is provided for convenience. When manually constructing an ItemThreadViewSpec to
   * perform operations on the ItemThread, this value can be used as the [high_item_id_watermark].
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getLastItemId() {
    return lastItemId;
  }

  /**
   * The server id of the last item returned in the ItemThread. This can be deduced from the [item]
   * list but is provided for convenience. When manually constructing an ItemThreadViewSpec to
   * perform operations on the ItemThread, this value can be used as the [high_item_id_watermark].
   * @param lastItemId lastItemId or {@code null} for none
   */
  public ItemThread setLastItemId(java.math.BigInteger lastItemId) {
    this.lastItemId = lastItemId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public FuseboxItemThreadMatchInfo getMatchInfo() {
    return matchInfo;
  }

  /**
   * @param matchInfo matchInfo or {@code null} for none
   */
  public ItemThread setMatchInfo(FuseboxItemThreadMatchInfo matchInfo) {
    this.matchInfo = matchInfo;
    return this;
  }

  /**
   * A snippet summarizing the thread. This field is only populated for searches.
   * @return value or {@code null} for none
   */
  public java.lang.String getSnippet() {
    return snippet;
  }

  /**
   * A snippet summarizing the thread. This field is only populated for searches.
   * @param snippet snippet or {@code null} for none
   */
  public ItemThread setSnippet(java.lang.String snippet) {
    this.snippet = snippet;
    return this;
  }

  /**
   * The MultiKey that identifies this thread. This value never changes, i.e. remains constant
   * across modifications to the thread, including addition, relabeling, or deletion of contained
   * Items. As such, the thread key may not necessarily correspond to the key of an contained Item.
   * Legacy note: The "server_id" of the thread key is equivalent to the notion of the "original
   * thread id" in the CSS API.
   * @return value or {@code null} for none
   */
  public MultiKey getThreadKey() {
    return threadKey;
  }

  /**
   * The MultiKey that identifies this thread. This value never changes, i.e. remains constant
   * across modifications to the thread, including addition, relabeling, or deletion of contained
   * Items. As such, the thread key may not necessarily correspond to the key of an contained Item.
   * Legacy note: The "server_id" of the thread key is equivalent to the notion of the "original
   * thread id" in the CSS API.
   * @param threadKey threadKey or {@code null} for none
   */
  public ItemThread setThreadKey(MultiKey threadKey) {
    this.threadKey = threadKey;
    return this;
  }

  /**
   * A base64 encoded and encrypted string generated from the Gaia Id and the thread id. Used to
   * generate the permalink for this thread, exposed from Gmail API.
   * @return value or {@code null} for none
   */
  public java.lang.String getThreadLocator() {
    return threadLocator;
  }

  /**
   * A base64 encoded and encrypted string generated from the Gaia Id and the thread id. Used to
   * generate the permalink for this thread, exposed from Gmail API.
   * @param threadLocator threadLocator or {@code null} for none
   */
  public ItemThread setThreadLocator(java.lang.String threadLocator) {
    this.threadLocator = threadLocator;
    return this;
  }

  /**
   * Next available id : 10
   * @return value or {@code null} for none
   */
  public TopicState getTopicState() {
    return topicState;
  }

  /**
   * Next available id : 10
   * @param topicState topicState or {@code null} for none
   */
  public ItemThread setTopicState(TopicState topicState) {
    this.topicState = topicState;
    return this;
  }

  /**
   * The latest history operation id that resulted in a mutation of any item in the thread.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getVersion() {
    return version;
  }

  /**
   * The latest history operation id that resulted in a mutation of any item in the thread.
   * @param version version or {@code null} for none
   */
  public ItemThread setVersion(java.math.BigInteger version) {
    this.version = version;
    return this;
  }

  @Override
  public ItemThread set(String fieldName, Object value) {
    return (ItemThread) super.set(fieldName, value);
  }

  @Override
  public ItemThread clone() {
    return (ItemThread) super.clone();
  }

}
