/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.civicinfo.v2.model;

/**
 * Detailed summary of the result from geocoding an address
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Civic Information API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeocodingSummary extends com.google.api.client.json.GenericJson {

  /**
   * Represents the best estimate of whether or not the input address was fully understood and the
   * address is correctly componentized. Mirrors the same-name field in
   * geostore.staging.AddressLinkupScoringProto.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean addressUnderstood;

  /**
   * The ID of the FeatureProto returned by the geocoder
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private FeatureIdProto featureId;

  /**
   * The feature type for the FeatureProto returned by the geocoder
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String featureType;

  /**
   * Precision of the center point (lat/long) of the geocoded FeatureProto
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double positionPrecisionMeters;

  /**
   * The query sent to the geocoder
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String queryString;

  /**
   * Represents the best estimate of whether or not the input address was fully understood and the
   * address is correctly componentized. Mirrors the same-name field in
   * geostore.staging.AddressLinkupScoringProto.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAddressUnderstood() {
    return addressUnderstood;
  }

  /**
   * Represents the best estimate of whether or not the input address was fully understood and the
   * address is correctly componentized. Mirrors the same-name field in
   * geostore.staging.AddressLinkupScoringProto.
   * @param addressUnderstood addressUnderstood or {@code null} for none
   */
  public GeocodingSummary setAddressUnderstood(java.lang.Boolean addressUnderstood) {
    this.addressUnderstood = addressUnderstood;
    return this;
  }

  /**
   * The ID of the FeatureProto returned by the geocoder
   * @return value or {@code null} for none
   */
  public FeatureIdProto getFeatureId() {
    return featureId;
  }

  /**
   * The ID of the FeatureProto returned by the geocoder
   * @param featureId featureId or {@code null} for none
   */
  public GeocodingSummary setFeatureId(FeatureIdProto featureId) {
    this.featureId = featureId;
    return this;
  }

  /**
   * The feature type for the FeatureProto returned by the geocoder
   * @return value or {@code null} for none
   */
  public java.lang.String getFeatureType() {
    return featureType;
  }

  /**
   * The feature type for the FeatureProto returned by the geocoder
   * @param featureType featureType or {@code null} for none
   */
  public GeocodingSummary setFeatureType(java.lang.String featureType) {
    this.featureType = featureType;
    return this;
  }

  /**
   * Precision of the center point (lat/long) of the geocoded FeatureProto
   * @return value or {@code null} for none
   */
  public java.lang.Double getPositionPrecisionMeters() {
    return positionPrecisionMeters;
  }

  /**
   * Precision of the center point (lat/long) of the geocoded FeatureProto
   * @param positionPrecisionMeters positionPrecisionMeters or {@code null} for none
   */
  public GeocodingSummary setPositionPrecisionMeters(java.lang.Double positionPrecisionMeters) {
    this.positionPrecisionMeters = positionPrecisionMeters;
    return this;
  }

  /**
   * The query sent to the geocoder
   * @return value or {@code null} for none
   */
  public java.lang.String getQueryString() {
    return queryString;
  }

  /**
   * The query sent to the geocoder
   * @param queryString queryString or {@code null} for none
   */
  public GeocodingSummary setQueryString(java.lang.String queryString) {
    this.queryString = queryString;
    return this;
  }

  @Override
  public GeocodingSummary set(String fieldName, Object value) {
    return (GeocodingSummary) super.set(fieldName, value);
  }

  @Override
  public GeocodingSummary clone() {
    return (GeocodingSummary) super.clone();
  }

}
