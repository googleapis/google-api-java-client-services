/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.merchantapi.notifications_v1beta.model;

/**
 * Represents a notification subscription owned by a Merchant account.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Merchant API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NotificationSubscription extends com.google.api.client.json.GenericJson {

  /**
   * If this value is true, the requesting account is notified of the specified event for all
   * managed accounts (can be subaccounts or other linked accounts) including newly added accounts
   * on a daily basis.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean allManagedAccounts;

  /**
   * URL to be used to push the notification to the merchant.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String callBackUri;

  /**
   * Output only. The `name` of the notification configuration. Generated by the Content API upon
   * creation of a new `NotificationSubscription`. The `account` represents the merchant ID of the
   * merchant that owns the configuration. Format:
   * `accounts/{account}/notificationsubscriptions/{notification_subscription}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The event that the merchant wants to be notified about.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String registeredEvent;

  /**
   * The `name` of the account you want to receive notifications for. Format: `accounts/{account}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetAccount;

  /**
   * If this value is true, the requesting account is notified of the specified event for all
   * managed accounts (can be subaccounts or other linked accounts) including newly added accounts
   * on a daily basis.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAllManagedAccounts() {
    return allManagedAccounts;
  }

  /**
   * If this value is true, the requesting account is notified of the specified event for all
   * managed accounts (can be subaccounts or other linked accounts) including newly added accounts
   * on a daily basis.
   * @param allManagedAccounts allManagedAccounts or {@code null} for none
   */
  public NotificationSubscription setAllManagedAccounts(java.lang.Boolean allManagedAccounts) {
    this.allManagedAccounts = allManagedAccounts;
    return this;
  }

  /**
   * URL to be used to push the notification to the merchant.
   * @return value or {@code null} for none
   */
  public java.lang.String getCallBackUri() {
    return callBackUri;
  }

  /**
   * URL to be used to push the notification to the merchant.
   * @param callBackUri callBackUri or {@code null} for none
   */
  public NotificationSubscription setCallBackUri(java.lang.String callBackUri) {
    this.callBackUri = callBackUri;
    return this;
  }

  /**
   * Output only. The `name` of the notification configuration. Generated by the Content API upon
   * creation of a new `NotificationSubscription`. The `account` represents the merchant ID of the
   * merchant that owns the configuration. Format:
   * `accounts/{account}/notificationsubscriptions/{notification_subscription}`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The `name` of the notification configuration. Generated by the Content API upon
   * creation of a new `NotificationSubscription`. The `account` represents the merchant ID of the
   * merchant that owns the configuration. Format:
   * `accounts/{account}/notificationsubscriptions/{notification_subscription}`
   * @param name name or {@code null} for none
   */
  public NotificationSubscription setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The event that the merchant wants to be notified about.
   * @return value or {@code null} for none
   */
  public java.lang.String getRegisteredEvent() {
    return registeredEvent;
  }

  /**
   * The event that the merchant wants to be notified about.
   * @param registeredEvent registeredEvent or {@code null} for none
   */
  public NotificationSubscription setRegisteredEvent(java.lang.String registeredEvent) {
    this.registeredEvent = registeredEvent;
    return this;
  }

  /**
   * The `name` of the account you want to receive notifications for. Format: `accounts/{account}`
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetAccount() {
    return targetAccount;
  }

  /**
   * The `name` of the account you want to receive notifications for. Format: `accounts/{account}`
   * @param targetAccount targetAccount or {@code null} for none
   */
  public NotificationSubscription setTargetAccount(java.lang.String targetAccount) {
    this.targetAccount = targetAccount;
    return this;
  }

  @Override
  public NotificationSubscription set(String fieldName, Object value) {
    return (NotificationSubscription) super.set(fieldName, value);
  }

  @Override
  public NotificationSubscription clone() {
    return (NotificationSubscription) super.clone();
  }

}
