/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.bigqueryreservation.v1alpha2.model;

/**
 * Slot pool is a way to purchase slots with some minimum committed period of usage. Slot pool is
 * immutable and cannot be deleted until the end of the commitment period. After the end of the
 * commitment period, slots are still available but can be freely removed any time. Annual
 * commitments will automatically be downgraded to monthly after the commitment ends. A slot pool
 * resource exists as a child resource of a top-level reservation. Sum of all the ACTIVE pools
 * slot_count is always equal to the reservation slot_capacity.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the BigQuery Reservation API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SlotPool extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The end of the commitment period. Slot pool cannot be removed before
   * commitment_end_time. It is applicable only for ACTIVE slot pools and is computed as a
   * combination of the plan and the time when the slot pool became ACTIVE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String commitmentEndTime;

  /**
   * Output only. For FAILED slot pool, provides the reason of failure.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Status failureStatus;

  /**
   * Output only. The resource name of the slot pool, e.g., projects/myproject/locations/us-
   * central1/reservations/myreservation/slotPools/123
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Slot pool commitment plan.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String plan;

  /**
   * Number of slots in this pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long slotCount;

  /**
   * Output only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. The end of the commitment period. Slot pool cannot be removed before
   * commitment_end_time. It is applicable only for ACTIVE slot pools and is computed as a
   * combination of the plan and the time when the slot pool became ACTIVE.
   * @return value or {@code null} for none
   */
  public String getCommitmentEndTime() {
    return commitmentEndTime;
  }

  /**
   * Output only. The end of the commitment period. Slot pool cannot be removed before
   * commitment_end_time. It is applicable only for ACTIVE slot pools and is computed as a
   * combination of the plan and the time when the slot pool became ACTIVE.
   * @param commitmentEndTime commitmentEndTime or {@code null} for none
   */
  public SlotPool setCommitmentEndTime(String commitmentEndTime) {
    this.commitmentEndTime = commitmentEndTime;
    return this;
  }

  /**
   * Output only. For FAILED slot pool, provides the reason of failure.
   * @return value or {@code null} for none
   */
  public Status getFailureStatus() {
    return failureStatus;
  }

  /**
   * Output only. For FAILED slot pool, provides the reason of failure.
   * @param failureStatus failureStatus or {@code null} for none
   */
  public SlotPool setFailureStatus(Status failureStatus) {
    this.failureStatus = failureStatus;
    return this;
  }

  /**
   * Output only. The resource name of the slot pool, e.g., projects/myproject/locations/us-
   * central1/reservations/myreservation/slotPools/123
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The resource name of the slot pool, e.g., projects/myproject/locations/us-
   * central1/reservations/myreservation/slotPools/123
   * @param name name or {@code null} for none
   */
  public SlotPool setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Slot pool commitment plan.
   * @return value or {@code null} for none
   */
  public java.lang.String getPlan() {
    return plan;
  }

  /**
   * Slot pool commitment plan.
   * @param plan plan or {@code null} for none
   */
  public SlotPool setPlan(java.lang.String plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Number of slots in this pool.
   * @return value or {@code null} for none
   */
  public java.lang.Long getSlotCount() {
    return slotCount;
  }

  /**
   * Number of slots in this pool.
   * @param slotCount slotCount or {@code null} for none
   */
  public SlotPool setSlotCount(java.lang.Long slotCount) {
    this.slotCount = slotCount;
    return this;
  }

  /**
   * Output only.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only.
   * @param state state or {@code null} for none
   */
  public SlotPool setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  @Override
  public SlotPool set(String fieldName, Object value) {
    return (SlotPool) super.set(fieldName, value);
  }

  @Override
  public SlotPool clone() {
    return (SlotPool) super.clone();
  }

}
