/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dialogflow.v3beta1.model;

/**
 * The playbook import strategy used for resource conflict resolution associated with an
 * ImportPlaybookRequest.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Dialogflow API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDialogflowCxV3beta1PlaybookImportStrategy extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Specifies the import strategy used when resolving conflicts with the main playbook.
   * If not specified, 'CREATE_NEW' is assumed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mainPlaybookImportStrategy;

  /**
   * Optional. Specifies the import strategy used when resolving referenced playbook/flow conflicts.
   * If not specified, 'CREATE_NEW' is assumed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nestedResourceImportStrategy;

  /**
   * Optional. Specifies the import strategy used when resolving tool conflicts. If not specified,
   * 'CREATE_NEW' is assumed. This will be applied after the main playbook and nested resource
   * import strategies, meaning if the playbook that references the tool is skipped, the tool will
   * also be skipped.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String toolImportStrategy;

  /**
   * Optional. Specifies the import strategy used when resolving conflicts with the main playbook.
   * If not specified, 'CREATE_NEW' is assumed.
   * @return value or {@code null} for none
   */
  public java.lang.String getMainPlaybookImportStrategy() {
    return mainPlaybookImportStrategy;
  }

  /**
   * Optional. Specifies the import strategy used when resolving conflicts with the main playbook.
   * If not specified, 'CREATE_NEW' is assumed.
   * @param mainPlaybookImportStrategy mainPlaybookImportStrategy or {@code null} for none
   */
  public GoogleCloudDialogflowCxV3beta1PlaybookImportStrategy setMainPlaybookImportStrategy(java.lang.String mainPlaybookImportStrategy) {
    this.mainPlaybookImportStrategy = mainPlaybookImportStrategy;
    return this;
  }

  /**
   * Optional. Specifies the import strategy used when resolving referenced playbook/flow conflicts.
   * If not specified, 'CREATE_NEW' is assumed.
   * @return value or {@code null} for none
   */
  public java.lang.String getNestedResourceImportStrategy() {
    return nestedResourceImportStrategy;
  }

  /**
   * Optional. Specifies the import strategy used when resolving referenced playbook/flow conflicts.
   * If not specified, 'CREATE_NEW' is assumed.
   * @param nestedResourceImportStrategy nestedResourceImportStrategy or {@code null} for none
   */
  public GoogleCloudDialogflowCxV3beta1PlaybookImportStrategy setNestedResourceImportStrategy(java.lang.String nestedResourceImportStrategy) {
    this.nestedResourceImportStrategy = nestedResourceImportStrategy;
    return this;
  }

  /**
   * Optional. Specifies the import strategy used when resolving tool conflicts. If not specified,
   * 'CREATE_NEW' is assumed. This will be applied after the main playbook and nested resource
   * import strategies, meaning if the playbook that references the tool is skipped, the tool will
   * also be skipped.
   * @return value or {@code null} for none
   */
  public java.lang.String getToolImportStrategy() {
    return toolImportStrategy;
  }

  /**
   * Optional. Specifies the import strategy used when resolving tool conflicts. If not specified,
   * 'CREATE_NEW' is assumed. This will be applied after the main playbook and nested resource
   * import strategies, meaning if the playbook that references the tool is skipped, the tool will
   * also be skipped.
   * @param toolImportStrategy toolImportStrategy or {@code null} for none
   */
  public GoogleCloudDialogflowCxV3beta1PlaybookImportStrategy setToolImportStrategy(java.lang.String toolImportStrategy) {
    this.toolImportStrategy = toolImportStrategy;
    return this;
  }

  @Override
  public GoogleCloudDialogflowCxV3beta1PlaybookImportStrategy set(String fieldName, Object value) {
    return (GoogleCloudDialogflowCxV3beta1PlaybookImportStrategy) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDialogflowCxV3beta1PlaybookImportStrategy clone() {
    return (GoogleCloudDialogflowCxV3beta1PlaybookImportStrategy) super.clone();
  }

}
