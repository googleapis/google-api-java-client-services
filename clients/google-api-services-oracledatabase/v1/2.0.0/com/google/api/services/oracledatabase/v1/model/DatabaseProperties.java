/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.oracledatabase.v1.model;

/**
 * The properties of a Database.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Oracle Database@Google Cloud API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DatabaseProperties extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The Database Management config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DatabaseManagementConfig databaseManagementConfig;

  /**
   * Optional. Backup options for the Database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DbBackupConfig dbBackupConfig;

  /**
   * Required. The Oracle Database version.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dbVersion;

  /**
   * Output only. State of the Database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. The Database Management config.
   * @return value or {@code null} for none
   */
  public DatabaseManagementConfig getDatabaseManagementConfig() {
    return databaseManagementConfig;
  }

  /**
   * Output only. The Database Management config.
   * @param databaseManagementConfig databaseManagementConfig or {@code null} for none
   */
  public DatabaseProperties setDatabaseManagementConfig(DatabaseManagementConfig databaseManagementConfig) {
    this.databaseManagementConfig = databaseManagementConfig;
    return this;
  }

  /**
   * Optional. Backup options for the Database.
   * @return value or {@code null} for none
   */
  public DbBackupConfig getDbBackupConfig() {
    return dbBackupConfig;
  }

  /**
   * Optional. Backup options for the Database.
   * @param dbBackupConfig dbBackupConfig or {@code null} for none
   */
  public DatabaseProperties setDbBackupConfig(DbBackupConfig dbBackupConfig) {
    this.dbBackupConfig = dbBackupConfig;
    return this;
  }

  /**
   * Required. The Oracle Database version.
   * @return value or {@code null} for none
   */
  public java.lang.String getDbVersion() {
    return dbVersion;
  }

  /**
   * Required. The Oracle Database version.
   * @param dbVersion dbVersion or {@code null} for none
   */
  public DatabaseProperties setDbVersion(java.lang.String dbVersion) {
    this.dbVersion = dbVersion;
    return this;
  }

  /**
   * Output only. State of the Database.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. State of the Database.
   * @param state state or {@code null} for none
   */
  public DatabaseProperties setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  @Override
  public DatabaseProperties set(String fieldName, Object value) {
    return (DatabaseProperties) super.set(fieldName, value);
  }

  @Override
  public DatabaseProperties clone() {
    return (DatabaseProperties) super.clone();
  }

}
