/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Detailed statistics about the annotations in the document. Contains, for example, the number of
 * ranges with name matches, the number of entities matched, and the number of entities with
 * mentions. This information can be used to tune some WebRef-internal scoring functions based on
 * existing annotations (e.g., document-length normalization in global link support). Next available
 * tag: 10.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefWebrefAnnotationStats extends com.google.api.client.json.GenericJson {

  /**
   * The relative weight of the document, used when aggregating information from multiple documents.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float docWeight;

  /**
   * Extracted n-grams context scores (in cdoc language, weighted by doc_weight) output if
   * webref_populate_annotation_ngrams is enabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefNgramContext> ngramContext;

  static {
    // hack to force ProGuard to consider RepositoryWebrefNgramContext used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(RepositoryWebrefNgramContext.class);
  }

  /**
   * The total number of candidates.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long numCandidates;

  /**
   * The total number of concepts with at least 1 candidate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long numConceptsWithCandidates;

  /**
   * The total number of concepts with at least 1 mention.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long numConceptsWithMentions;

  /**
   * The total number of RangeData objects with at least one candidate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long numRangesWithCandidates;

  /**
   * Statistics for each token type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RepositoryWebrefAnnotationStatsPerType> statsPerType;

  static {
    // hack to force ProGuard to consider RepositoryWebrefAnnotationStatsPerType used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(RepositoryWebrefAnnotationStatsPerType.class);
  }

  /**
   * The relative weight of the document, used when aggregating information from multiple documents.
   * @return value or {@code null} for none
   */
  public java.lang.Float getDocWeight() {
    return docWeight;
  }

  /**
   * The relative weight of the document, used when aggregating information from multiple documents.
   * @param docWeight docWeight or {@code null} for none
   */
  public RepositoryWebrefWebrefAnnotationStats setDocWeight(java.lang.Float docWeight) {
    this.docWeight = docWeight;
    return this;
  }

  /**
   * Extracted n-grams context scores (in cdoc language, weighted by doc_weight) output if
   * webref_populate_annotation_ngrams is enabled.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefNgramContext> getNgramContext() {
    return ngramContext;
  }

  /**
   * Extracted n-grams context scores (in cdoc language, weighted by doc_weight) output if
   * webref_populate_annotation_ngrams is enabled.
   * @param ngramContext ngramContext or {@code null} for none
   */
  public RepositoryWebrefWebrefAnnotationStats setNgramContext(java.util.List<RepositoryWebrefNgramContext> ngramContext) {
    this.ngramContext = ngramContext;
    return this;
  }

  /**
   * The total number of candidates.
   * @return value or {@code null} for none
   */
  public java.lang.Long getNumCandidates() {
    return numCandidates;
  }

  /**
   * The total number of candidates.
   * @param numCandidates numCandidates or {@code null} for none
   */
  public RepositoryWebrefWebrefAnnotationStats setNumCandidates(java.lang.Long numCandidates) {
    this.numCandidates = numCandidates;
    return this;
  }

  /**
   * The total number of concepts with at least 1 candidate.
   * @return value or {@code null} for none
   */
  public java.lang.Long getNumConceptsWithCandidates() {
    return numConceptsWithCandidates;
  }

  /**
   * The total number of concepts with at least 1 candidate.
   * @param numConceptsWithCandidates numConceptsWithCandidates or {@code null} for none
   */
  public RepositoryWebrefWebrefAnnotationStats setNumConceptsWithCandidates(java.lang.Long numConceptsWithCandidates) {
    this.numConceptsWithCandidates = numConceptsWithCandidates;
    return this;
  }

  /**
   * The total number of concepts with at least 1 mention.
   * @return value or {@code null} for none
   */
  public java.lang.Long getNumConceptsWithMentions() {
    return numConceptsWithMentions;
  }

  /**
   * The total number of concepts with at least 1 mention.
   * @param numConceptsWithMentions numConceptsWithMentions or {@code null} for none
   */
  public RepositoryWebrefWebrefAnnotationStats setNumConceptsWithMentions(java.lang.Long numConceptsWithMentions) {
    this.numConceptsWithMentions = numConceptsWithMentions;
    return this;
  }

  /**
   * The total number of RangeData objects with at least one candidate.
   * @return value or {@code null} for none
   */
  public java.lang.Long getNumRangesWithCandidates() {
    return numRangesWithCandidates;
  }

  /**
   * The total number of RangeData objects with at least one candidate.
   * @param numRangesWithCandidates numRangesWithCandidates or {@code null} for none
   */
  public RepositoryWebrefWebrefAnnotationStats setNumRangesWithCandidates(java.lang.Long numRangesWithCandidates) {
    this.numRangesWithCandidates = numRangesWithCandidates;
    return this;
  }

  /**
   * Statistics for each token type.
   * @return value or {@code null} for none
   */
  public java.util.List<RepositoryWebrefAnnotationStatsPerType> getStatsPerType() {
    return statsPerType;
  }

  /**
   * Statistics for each token type.
   * @param statsPerType statsPerType or {@code null} for none
   */
  public RepositoryWebrefWebrefAnnotationStats setStatsPerType(java.util.List<RepositoryWebrefAnnotationStatsPerType> statsPerType) {
    this.statsPerType = statsPerType;
    return this;
  }

  @Override
  public RepositoryWebrefWebrefAnnotationStats set(String fieldName, Object value) {
    return (RepositoryWebrefWebrefAnnotationStats) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefWebrefAnnotationStats clone() {
    return (RepositoryWebrefWebrefAnnotationStats) super.clone();
  }

}
