/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.chromewebstore.v2.model;

/**
 * Response message for `FetchItemStatus`.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Chrome Web Store API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FetchItemStatusResponse extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The ID of the item.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String itemId;

  /**
   * Output only. The state of the last async upload for an item. Only set when there has been an
   * async upload for the item in the past 24 hours.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lastAsyncUploadState;

  /**
   * The name of the requested item.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The public key of the item, which may be generated by the store.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String publicKey;

  /**
   * Output only. Status of the current published revision of the item. Will be unset if the item is
   * not published.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ItemRevisionStatus publishedItemRevisionStatus;

  /**
   * Status of the item revision submitted to be published. Will be unset if the item has not been
   * submitted for publishing since the last successful publish.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ItemRevisionStatus submittedItemRevisionStatus;

  /**
   * If true, the item has been taken down for a policy violation. Check the developer dashboard for
   * details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean takenDown;

  /**
   * If true, the item has been warned for a policy violation and will be taken down if not
   * resolved. Check the developer dashboard for details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean warned;

  /**
   * Output only. The ID of the item.
   * @return value or {@code null} for none
   */
  public java.lang.String getItemId() {
    return itemId;
  }

  /**
   * Output only. The ID of the item.
   * @param itemId itemId or {@code null} for none
   */
  public FetchItemStatusResponse setItemId(java.lang.String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Output only. The state of the last async upload for an item. Only set when there has been an
   * async upload for the item in the past 24 hours.
   * @return value or {@code null} for none
   */
  public java.lang.String getLastAsyncUploadState() {
    return lastAsyncUploadState;
  }

  /**
   * Output only. The state of the last async upload for an item. Only set when there has been an
   * async upload for the item in the past 24 hours.
   * @param lastAsyncUploadState lastAsyncUploadState or {@code null} for none
   */
  public FetchItemStatusResponse setLastAsyncUploadState(java.lang.String lastAsyncUploadState) {
    this.lastAsyncUploadState = lastAsyncUploadState;
    return this;
  }

  /**
   * The name of the requested item.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name of the requested item.
   * @param name name or {@code null} for none
   */
  public FetchItemStatusResponse setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The public key of the item, which may be generated by the store.
   * @return value or {@code null} for none
   */
  public java.lang.String getPublicKey() {
    return publicKey;
  }

  /**
   * The public key of the item, which may be generated by the store.
   * @param publicKey publicKey or {@code null} for none
   */
  public FetchItemStatusResponse setPublicKey(java.lang.String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Output only. Status of the current published revision of the item. Will be unset if the item is
   * not published.
   * @return value or {@code null} for none
   */
  public ItemRevisionStatus getPublishedItemRevisionStatus() {
    return publishedItemRevisionStatus;
  }

  /**
   * Output only. Status of the current published revision of the item. Will be unset if the item is
   * not published.
   * @param publishedItemRevisionStatus publishedItemRevisionStatus or {@code null} for none
   */
  public FetchItemStatusResponse setPublishedItemRevisionStatus(ItemRevisionStatus publishedItemRevisionStatus) {
    this.publishedItemRevisionStatus = publishedItemRevisionStatus;
    return this;
  }

  /**
   * Status of the item revision submitted to be published. Will be unset if the item has not been
   * submitted for publishing since the last successful publish.
   * @return value or {@code null} for none
   */
  public ItemRevisionStatus getSubmittedItemRevisionStatus() {
    return submittedItemRevisionStatus;
  }

  /**
   * Status of the item revision submitted to be published. Will be unset if the item has not been
   * submitted for publishing since the last successful publish.
   * @param submittedItemRevisionStatus submittedItemRevisionStatus or {@code null} for none
   */
  public FetchItemStatusResponse setSubmittedItemRevisionStatus(ItemRevisionStatus submittedItemRevisionStatus) {
    this.submittedItemRevisionStatus = submittedItemRevisionStatus;
    return this;
  }

  /**
   * If true, the item has been taken down for a policy violation. Check the developer dashboard for
   * details.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getTakenDown() {
    return takenDown;
  }

  /**
   * If true, the item has been taken down for a policy violation. Check the developer dashboard for
   * details.
   * @param takenDown takenDown or {@code null} for none
   */
  public FetchItemStatusResponse setTakenDown(java.lang.Boolean takenDown) {
    this.takenDown = takenDown;
    return this;
  }

  /**
   * If true, the item has been warned for a policy violation and will be taken down if not
   * resolved. Check the developer dashboard for details.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getWarned() {
    return warned;
  }

  /**
   * If true, the item has been warned for a policy violation and will be taken down if not
   * resolved. Check the developer dashboard for details.
   * @param warned warned or {@code null} for none
   */
  public FetchItemStatusResponse setWarned(java.lang.Boolean warned) {
    this.warned = warned;
    return this;
  }

  @Override
  public FetchItemStatusResponse set(String fieldName, Object value) {
    return (FetchItemStatusResponse) super.set(fieldName, value);
  }

  @Override
  public FetchItemStatusResponse clone() {
    return (FetchItemStatusResponse) super.clone();
  }

}
