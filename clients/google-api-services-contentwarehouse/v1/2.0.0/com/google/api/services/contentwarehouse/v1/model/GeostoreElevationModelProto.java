/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Represents raster digital elevation model data.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreElevationModelProto extends com.google.api.client.json.GenericJson {

  /**
   * Defines the relative order in which terrain data should be rendered. Features with higher
   * blend_order should be blended on top of features with lower blend_order. NOTE: this is
   * backwards from the way BlendRank works in Magrathean.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer blendOrder;

  /**
   * The zoom level at which this data is defined. Level 0 is world level data, and each increase in
   * zoom level corresponds to a factor of 2 increase in scale.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer dataLevel;

  /**
   * The maximum (finest) level at which this terrain data has sufficient resolution to be
   * displayed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer dataMaxlevel;

  /**
   * A place to store an elevation data protocol buffer. Currently, this must be a
   * keyhole::AssetTileCompressed (see google3/keyhole/common/proto/magrathean.protodevel).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Proto2BridgeMessageSet elevationData;

  /**
   * If true, all of the data contained in this feature is available at the next highest (more
   * detailed) level. If this is true, partial_child_data_available should also be true.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean fullChildDataAvailable;

  /**
   * If true, at least part of the data contained in this feature is available at the next highest
   * (more detailed) level.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean partialChildDataAvailable;

  /**
   * Defines the relative order in which terrain data should be rendered. Features with higher
   * blend_order should be blended on top of features with lower blend_order. NOTE: this is
   * backwards from the way BlendRank works in Magrathean.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBlendOrder() {
    return blendOrder;
  }

  /**
   * Defines the relative order in which terrain data should be rendered. Features with higher
   * blend_order should be blended on top of features with lower blend_order. NOTE: this is
   * backwards from the way BlendRank works in Magrathean.
   * @param blendOrder blendOrder or {@code null} for none
   */
  public GeostoreElevationModelProto setBlendOrder(java.lang.Integer blendOrder) {
    this.blendOrder = blendOrder;
    return this;
  }

  /**
   * The zoom level at which this data is defined. Level 0 is world level data, and each increase in
   * zoom level corresponds to a factor of 2 increase in scale.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDataLevel() {
    return dataLevel;
  }

  /**
   * The zoom level at which this data is defined. Level 0 is world level data, and each increase in
   * zoom level corresponds to a factor of 2 increase in scale.
   * @param dataLevel dataLevel or {@code null} for none
   */
  public GeostoreElevationModelProto setDataLevel(java.lang.Integer dataLevel) {
    this.dataLevel = dataLevel;
    return this;
  }

  /**
   * The maximum (finest) level at which this terrain data has sufficient resolution to be
   * displayed.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDataMaxlevel() {
    return dataMaxlevel;
  }

  /**
   * The maximum (finest) level at which this terrain data has sufficient resolution to be
   * displayed.
   * @param dataMaxlevel dataMaxlevel or {@code null} for none
   */
  public GeostoreElevationModelProto setDataMaxlevel(java.lang.Integer dataMaxlevel) {
    this.dataMaxlevel = dataMaxlevel;
    return this;
  }

  /**
   * A place to store an elevation data protocol buffer. Currently, this must be a
   * keyhole::AssetTileCompressed (see google3/keyhole/common/proto/magrathean.protodevel).
   * @return value or {@code null} for none
   */
  public Proto2BridgeMessageSet getElevationData() {
    return elevationData;
  }

  /**
   * A place to store an elevation data protocol buffer. Currently, this must be a
   * keyhole::AssetTileCompressed (see google3/keyhole/common/proto/magrathean.protodevel).
   * @param elevationData elevationData or {@code null} for none
   */
  public GeostoreElevationModelProto setElevationData(Proto2BridgeMessageSet elevationData) {
    this.elevationData = elevationData;
    return this;
  }

  /**
   * If true, all of the data contained in this feature is available at the next highest (more
   * detailed) level. If this is true, partial_child_data_available should also be true.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getFullChildDataAvailable() {
    return fullChildDataAvailable;
  }

  /**
   * If true, all of the data contained in this feature is available at the next highest (more
   * detailed) level. If this is true, partial_child_data_available should also be true.
   * @param fullChildDataAvailable fullChildDataAvailable or {@code null} for none
   */
  public GeostoreElevationModelProto setFullChildDataAvailable(java.lang.Boolean fullChildDataAvailable) {
    this.fullChildDataAvailable = fullChildDataAvailable;
    return this;
  }

  /**
   * If true, at least part of the data contained in this feature is available at the next highest
   * (more detailed) level.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPartialChildDataAvailable() {
    return partialChildDataAvailable;
  }

  /**
   * If true, at least part of the data contained in this feature is available at the next highest
   * (more detailed) level.
   * @param partialChildDataAvailable partialChildDataAvailable or {@code null} for none
   */
  public GeostoreElevationModelProto setPartialChildDataAvailable(java.lang.Boolean partialChildDataAvailable) {
    this.partialChildDataAvailable = partialChildDataAvailable;
    return this;
  }

  @Override
  public GeostoreElevationModelProto set(String fieldName, Object value) {
    return (GeostoreElevationModelProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreElevationModelProto clone() {
    return (GeostoreElevationModelProto) super.clone();
  }

}
