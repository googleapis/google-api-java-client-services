/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A polygonal surface, composed of a closed exterior loop with optional closed interior loops.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreCityJsonProtoCityObjectGeometrySurface extends com.google.api.client.json.GenericJson {

  /**
   * The first loop is exterior; any additional are interior.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreCityJsonProtoCityObjectGeometryMultiPoint> loops;

  static {
    // hack to force ProGuard to consider GeostoreCityJsonProtoCityObjectGeometryMultiPoint used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreCityJsonProtoCityObjectGeometryMultiPoint.class);
  }

  /**
   * The materials this surface is made of. May be left blank if materials are unspecified for this
   * surface. IMPORTANT: This field must not contain more than one MaterialSpec unless CityJSON's
   * material "theme" is incorporated into CityJsonProto (see discussion in go/cityjson-for-hand-
   * modeled-landmarks).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreCityJsonProtoCityObjectGeometryMaterialSpec> materialSpecs;

  static {
    // hack to force ProGuard to consider GeostoreCityJsonProtoCityObjectGeometryMaterialSpec used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreCityJsonProtoCityObjectGeometryMaterialSpec.class);
  }

  /**
   * The semantics of this surface (e.g. what part of a building it is) represented as an index into
   * the containing Geometry's `semantics` field. May be left blank if semantics are unspecified for
   * this surface.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer semanticsIndex;

  /**
   * The first loop is exterior; any additional are interior.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreCityJsonProtoCityObjectGeometryMultiPoint> getLoops() {
    return loops;
  }

  /**
   * The first loop is exterior; any additional are interior.
   * @param loops loops or {@code null} for none
   */
  public GeostoreCityJsonProtoCityObjectGeometrySurface setLoops(java.util.List<GeostoreCityJsonProtoCityObjectGeometryMultiPoint> loops) {
    this.loops = loops;
    return this;
  }

  /**
   * The materials this surface is made of. May be left blank if materials are unspecified for this
   * surface. IMPORTANT: This field must not contain more than one MaterialSpec unless CityJSON's
   * material "theme" is incorporated into CityJsonProto (see discussion in go/cityjson-for-hand-
   * modeled-landmarks).
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreCityJsonProtoCityObjectGeometryMaterialSpec> getMaterialSpecs() {
    return materialSpecs;
  }

  /**
   * The materials this surface is made of. May be left blank if materials are unspecified for this
   * surface. IMPORTANT: This field must not contain more than one MaterialSpec unless CityJSON's
   * material "theme" is incorporated into CityJsonProto (see discussion in go/cityjson-for-hand-
   * modeled-landmarks).
   * @param materialSpecs materialSpecs or {@code null} for none
   */
  public GeostoreCityJsonProtoCityObjectGeometrySurface setMaterialSpecs(java.util.List<GeostoreCityJsonProtoCityObjectGeometryMaterialSpec> materialSpecs) {
    this.materialSpecs = materialSpecs;
    return this;
  }

  /**
   * The semantics of this surface (e.g. what part of a building it is) represented as an index into
   * the containing Geometry's `semantics` field. May be left blank if semantics are unspecified for
   * this surface.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSemanticsIndex() {
    return semanticsIndex;
  }

  /**
   * The semantics of this surface (e.g. what part of a building it is) represented as an index into
   * the containing Geometry's `semantics` field. May be left blank if semantics are unspecified for
   * this surface.
   * @param semanticsIndex semanticsIndex or {@code null} for none
   */
  public GeostoreCityJsonProtoCityObjectGeometrySurface setSemanticsIndex(java.lang.Integer semanticsIndex) {
    this.semanticsIndex = semanticsIndex;
    return this;
  }

  @Override
  public GeostoreCityJsonProtoCityObjectGeometrySurface set(String fieldName, Object value) {
    return (GeostoreCityJsonProtoCityObjectGeometrySurface) super.set(fieldName, value);
  }

  @Override
  public GeostoreCityJsonProtoCityObjectGeometrySurface clone() {
    return (GeostoreCityJsonProtoCityObjectGeometrySurface) super.clone();
  }

}
