/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * LINT: LEGACY_NAMES MovingThumbnail is defined as a short video clip that represents the whole
 * video content. Next id: 17.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DrishtiVesperMovingThumbnail extends com.google.api.client.json.GenericJson {

  /**
   * The begin timestamp in milliseconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer beginTimestampMs;

  /**
   * The duration of the moving thumbnail in milliseconds. Note that the duration may not be the
   * difference between begin_timestamp_ms and end_timestamp_ms, esp when the moving thumbnail
   * covers multiple clips from the video.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer durationMs;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String encodedGifAnimation;

  /**
   * The encoded video string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String encodedVideoString;

  /**
   * The encoded WebP animation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String encodedWebpAnimation;

  /**
   * The end timestamp in milliseconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer endTimestampMs;

  /**
   * Pixel height of the moving thumbnail.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer height;

  /**
   * MovingThumbnail id (e.g., the video id).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * If set, this is the algorithm version used to generate this moving thumbnail.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String movingThumbnailerVersion;

  /**
   * MovingThumbnail name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The score of the moving thumbnail.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float score;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DrishtiVesperMovingThumbnailScoreComponents scoreComponents;

  /**
   * A set of single frame thumbnails in the MovingThumbnail.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DrishtiVesperThumbnail> thumbnails;

  /**
   * MovingThumbnail type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The actual quality of the Webp animation. Note this value may not be equal to the quality value
   * requested in the animation creator's options. This is because other requirements, such as the
   * max file size, may force the creator to lower the actual quality value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float webpQualityLevel;

  /**
   * Pixel width of the moving thumbnail.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer width;

  /**
   * The begin timestamp in milliseconds.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBeginTimestampMs() {
    return beginTimestampMs;
  }

  /**
   * The begin timestamp in milliseconds.
   * @param beginTimestampMs beginTimestampMs or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setBeginTimestampMs(java.lang.Integer beginTimestampMs) {
    this.beginTimestampMs = beginTimestampMs;
    return this;
  }

  /**
   * The duration of the moving thumbnail in milliseconds. Note that the duration may not be the
   * difference between begin_timestamp_ms and end_timestamp_ms, esp when the moving thumbnail
   * covers multiple clips from the video.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDurationMs() {
    return durationMs;
  }

  /**
   * The duration of the moving thumbnail in milliseconds. Note that the duration may not be the
   * difference between begin_timestamp_ms and end_timestamp_ms, esp when the moving thumbnail
   * covers multiple clips from the video.
   * @param durationMs durationMs or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setDurationMs(java.lang.Integer durationMs) {
    this.durationMs = durationMs;
    return this;
  }

  /**
   * @see #decodeEncodedGifAnimation()
   * @return value or {@code null} for none
   */
  public java.lang.String getEncodedGifAnimation() {
    return encodedGifAnimation;
  }

  /**

   * @see #getEncodedGifAnimation()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeEncodedGifAnimation() {
    return com.google.api.client.util.Base64.decodeBase64(encodedGifAnimation);
  }

  /**
   * @see #encodeEncodedGifAnimation()
   * @param encodedGifAnimation encodedGifAnimation or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setEncodedGifAnimation(java.lang.String encodedGifAnimation) {
    this.encodedGifAnimation = encodedGifAnimation;
    return this;
  }

  /**

   * @see #setEncodedGifAnimation()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public DrishtiVesperMovingThumbnail encodeEncodedGifAnimation(byte[] encodedGifAnimation) {
    this.encodedGifAnimation = com.google.api.client.util.Base64.encodeBase64URLSafeString(encodedGifAnimation);
    return this;
  }

  /**
   * The encoded video string.
   * @see #decodeEncodedVideoString()
   * @return value or {@code null} for none
   */
  public java.lang.String getEncodedVideoString() {
    return encodedVideoString;
  }

  /**
   * The encoded video string.
   * @see #getEncodedVideoString()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeEncodedVideoString() {
    return com.google.api.client.util.Base64.decodeBase64(encodedVideoString);
  }

  /**
   * The encoded video string.
   * @see #encodeEncodedVideoString()
   * @param encodedVideoString encodedVideoString or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setEncodedVideoString(java.lang.String encodedVideoString) {
    this.encodedVideoString = encodedVideoString;
    return this;
  }

  /**
   * The encoded video string.
   * @see #setEncodedVideoString()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public DrishtiVesperMovingThumbnail encodeEncodedVideoString(byte[] encodedVideoString) {
    this.encodedVideoString = com.google.api.client.util.Base64.encodeBase64URLSafeString(encodedVideoString);
    return this;
  }

  /**
   * The encoded WebP animation.
   * @see #decodeEncodedWebpAnimation()
   * @return value or {@code null} for none
   */
  public java.lang.String getEncodedWebpAnimation() {
    return encodedWebpAnimation;
  }

  /**
   * The encoded WebP animation.
   * @see #getEncodedWebpAnimation()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeEncodedWebpAnimation() {
    return com.google.api.client.util.Base64.decodeBase64(encodedWebpAnimation);
  }

  /**
   * The encoded WebP animation.
   * @see #encodeEncodedWebpAnimation()
   * @param encodedWebpAnimation encodedWebpAnimation or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setEncodedWebpAnimation(java.lang.String encodedWebpAnimation) {
    this.encodedWebpAnimation = encodedWebpAnimation;
    return this;
  }

  /**
   * The encoded WebP animation.
   * @see #setEncodedWebpAnimation()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public DrishtiVesperMovingThumbnail encodeEncodedWebpAnimation(byte[] encodedWebpAnimation) {
    this.encodedWebpAnimation = com.google.api.client.util.Base64.encodeBase64URLSafeString(encodedWebpAnimation);
    return this;
  }

  /**
   * The end timestamp in milliseconds.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getEndTimestampMs() {
    return endTimestampMs;
  }

  /**
   * The end timestamp in milliseconds.
   * @param endTimestampMs endTimestampMs or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setEndTimestampMs(java.lang.Integer endTimestampMs) {
    this.endTimestampMs = endTimestampMs;
    return this;
  }

  /**
   * Pixel height of the moving thumbnail.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHeight() {
    return height;
  }

  /**
   * Pixel height of the moving thumbnail.
   * @param height height or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setHeight(java.lang.Integer height) {
    this.height = height;
    return this;
  }

  /**
   * MovingThumbnail id (e.g., the video id).
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * MovingThumbnail id (e.g., the video id).
   * @param id id or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * If set, this is the algorithm version used to generate this moving thumbnail.
   * @return value or {@code null} for none
   */
  public java.lang.String getMovingThumbnailerVersion() {
    return movingThumbnailerVersion;
  }

  /**
   * If set, this is the algorithm version used to generate this moving thumbnail.
   * @param movingThumbnailerVersion movingThumbnailerVersion or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setMovingThumbnailerVersion(java.lang.String movingThumbnailerVersion) {
    this.movingThumbnailerVersion = movingThumbnailerVersion;
    return this;
  }

  /**
   * MovingThumbnail name.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * MovingThumbnail name.
   * @param name name or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The score of the moving thumbnail.
   * @return value or {@code null} for none
   */
  public java.lang.Float getScore() {
    return score;
  }

  /**
   * The score of the moving thumbnail.
   * @param score score or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setScore(java.lang.Float score) {
    this.score = score;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public DrishtiVesperMovingThumbnailScoreComponents getScoreComponents() {
    return scoreComponents;
  }

  /**
   * @param scoreComponents scoreComponents or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setScoreComponents(DrishtiVesperMovingThumbnailScoreComponents scoreComponents) {
    this.scoreComponents = scoreComponents;
    return this;
  }

  /**
   * A set of single frame thumbnails in the MovingThumbnail.
   * @return value or {@code null} for none
   */
  public java.util.List<DrishtiVesperThumbnail> getThumbnails() {
    return thumbnails;
  }

  /**
   * A set of single frame thumbnails in the MovingThumbnail.
   * @param thumbnails thumbnails or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setThumbnails(java.util.List<DrishtiVesperThumbnail> thumbnails) {
    this.thumbnails = thumbnails;
    return this;
  }

  /**
   * MovingThumbnail type.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * MovingThumbnail type.
   * @param type type or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * The actual quality of the Webp animation. Note this value may not be equal to the quality value
   * requested in the animation creator's options. This is because other requirements, such as the
   * max file size, may force the creator to lower the actual quality value.
   * @return value or {@code null} for none
   */
  public java.lang.Float getWebpQualityLevel() {
    return webpQualityLevel;
  }

  /**
   * The actual quality of the Webp animation. Note this value may not be equal to the quality value
   * requested in the animation creator's options. This is because other requirements, such as the
   * max file size, may force the creator to lower the actual quality value.
   * @param webpQualityLevel webpQualityLevel or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setWebpQualityLevel(java.lang.Float webpQualityLevel) {
    this.webpQualityLevel = webpQualityLevel;
    return this;
  }

  /**
   * Pixel width of the moving thumbnail.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWidth() {
    return width;
  }

  /**
   * Pixel width of the moving thumbnail.
   * @param width width or {@code null} for none
   */
  public DrishtiVesperMovingThumbnail setWidth(java.lang.Integer width) {
    this.width = width;
    return this;
  }

  @Override
  public DrishtiVesperMovingThumbnail set(String fieldName, Object value) {
    return (DrishtiVesperMovingThumbnail) super.set(fieldName, value);
  }

  @Override
  public DrishtiVesperMovingThumbnail clone() {
    return (DrishtiVesperMovingThumbnail) super.clone();
  }

}
