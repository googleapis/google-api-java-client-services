/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Below is some horrible ASCII art and a description of the components of a road sign.
 * +-------------------+ | A11 E50 Paris | | Chartres | +-------------------+ This sign would be
 * composed of four components (all of them text components, the only option we support for now).
 * The three in the first row would all have a "major_position" of zero. Their "minor_position"
 * values would be zero for "A11", one for "E50", and two for "Paris". The component in the second
 * row would have "major_position" value of one. This message provides the details of a single
 * component of a road sign. A component defines its position within a sign, its type, and its
 * content.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreRoadSignComponentProto extends com.google.api.client.json.GenericJson {

  /**
   * The id of the feature referred to by this component, typically the route or locality feature
   * this sign points towards. In the ASCII art example above, this field would contain the id for
   * the routes A11 and E50 and the localities Chartres and Paris in the corresponding component.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto featureId;

  /**
   * The type of the feature referred to by this component. If feature_id is specified type of that
   * feature should be the same as this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer featureType;

  /**
   * This is the "major" position of this component within the set of components that make up a
   * sign. This number can be thought of as the "row" of the sign on which the component appears,
   * but no guarantees are made that there is a one-to-one mapping between "major_position" and the
   * rows of information on the actual sign being modeled. A "major_position" value of zero would
   * indicate that the component is near the top of the sign.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer majorPosition;

  /**
   * This is the position of a component within the components of a sign that share a common
   * "major_position". It can be though of as the "column" of the component, but like
   * "major_position", no guarantees are made regarding its mapping to reality. For data sources
   * that don't provide enough information to determine a component's major and minor positions,
   * major position should be populated and minor position should not be present. A "minor_position"
   * value of zero would indicate that the component is near the "beginning" of the sign. In
   * countries where signs are read from left to right, "minor_position" zero would be near the left
   * side of the sign.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minorPosition;

  /**
   * The direction of traffic for the referenced TYPE_ROUTE feature.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String routeDirection;

  /**
   * If this sign component is of type "TYPE_TEXT", this field contains the text of the component. A
   * NameProto is used to allow language and flags to be associated with the text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreNameProto text;

  /**
   * This type of content represented by this sign component.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The id of the feature referred to by this component, typically the route or locality feature
   * this sign points towards. In the ASCII art example above, this field would contain the id for
   * the routes A11 and E50 and the localities Chartres and Paris in the corresponding component.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getFeatureId() {
    return featureId;
  }

  /**
   * The id of the feature referred to by this component, typically the route or locality feature
   * this sign points towards. In the ASCII art example above, this field would contain the id for
   * the routes A11 and E50 and the localities Chartres and Paris in the corresponding component.
   * @param featureId featureId or {@code null} for none
   */
  public GeostoreRoadSignComponentProto setFeatureId(GeostoreFeatureIdProto featureId) {
    this.featureId = featureId;
    return this;
  }

  /**
   * The type of the feature referred to by this component. If feature_id is specified type of that
   * feature should be the same as this field.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFeatureType() {
    return featureType;
  }

  /**
   * The type of the feature referred to by this component. If feature_id is specified type of that
   * feature should be the same as this field.
   * @param featureType featureType or {@code null} for none
   */
  public GeostoreRoadSignComponentProto setFeatureType(java.lang.Integer featureType) {
    this.featureType = featureType;
    return this;
  }

  /**
   * This is the "major" position of this component within the set of components that make up a
   * sign. This number can be thought of as the "row" of the sign on which the component appears,
   * but no guarantees are made that there is a one-to-one mapping between "major_position" and the
   * rows of information on the actual sign being modeled. A "major_position" value of zero would
   * indicate that the component is near the top of the sign.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMajorPosition() {
    return majorPosition;
  }

  /**
   * This is the "major" position of this component within the set of components that make up a
   * sign. This number can be thought of as the "row" of the sign on which the component appears,
   * but no guarantees are made that there is a one-to-one mapping between "major_position" and the
   * rows of information on the actual sign being modeled. A "major_position" value of zero would
   * indicate that the component is near the top of the sign.
   * @param majorPosition majorPosition or {@code null} for none
   */
  public GeostoreRoadSignComponentProto setMajorPosition(java.lang.Integer majorPosition) {
    this.majorPosition = majorPosition;
    return this;
  }

  /**
   * This is the position of a component within the components of a sign that share a common
   * "major_position". It can be though of as the "column" of the component, but like
   * "major_position", no guarantees are made regarding its mapping to reality. For data sources
   * that don't provide enough information to determine a component's major and minor positions,
   * major position should be populated and minor position should not be present. A "minor_position"
   * value of zero would indicate that the component is near the "beginning" of the sign. In
   * countries where signs are read from left to right, "minor_position" zero would be near the left
   * side of the sign.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinorPosition() {
    return minorPosition;
  }

  /**
   * This is the position of a component within the components of a sign that share a common
   * "major_position". It can be though of as the "column" of the component, but like
   * "major_position", no guarantees are made regarding its mapping to reality. For data sources
   * that don't provide enough information to determine a component's major and minor positions,
   * major position should be populated and minor position should not be present. A "minor_position"
   * value of zero would indicate that the component is near the "beginning" of the sign. In
   * countries where signs are read from left to right, "minor_position" zero would be near the left
   * side of the sign.
   * @param minorPosition minorPosition or {@code null} for none
   */
  public GeostoreRoadSignComponentProto setMinorPosition(java.lang.Integer minorPosition) {
    this.minorPosition = minorPosition;
    return this;
  }

  /**
   * The direction of traffic for the referenced TYPE_ROUTE feature.
   * @return value or {@code null} for none
   */
  public java.lang.String getRouteDirection() {
    return routeDirection;
  }

  /**
   * The direction of traffic for the referenced TYPE_ROUTE feature.
   * @param routeDirection routeDirection or {@code null} for none
   */
  public GeostoreRoadSignComponentProto setRouteDirection(java.lang.String routeDirection) {
    this.routeDirection = routeDirection;
    return this;
  }

  /**
   * If this sign component is of type "TYPE_TEXT", this field contains the text of the component. A
   * NameProto is used to allow language and flags to be associated with the text.
   * @return value or {@code null} for none
   */
  public GeostoreNameProto getText() {
    return text;
  }

  /**
   * If this sign component is of type "TYPE_TEXT", this field contains the text of the component. A
   * NameProto is used to allow language and flags to be associated with the text.
   * @param text text or {@code null} for none
   */
  public GeostoreRoadSignComponentProto setText(GeostoreNameProto text) {
    this.text = text;
    return this;
  }

  /**
   * This type of content represented by this sign component.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * This type of content represented by this sign component.
   * @param type type or {@code null} for none
   */
  public GeostoreRoadSignComponentProto setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public GeostoreRoadSignComponentProto set(String fieldName, Object value) {
    return (GeostoreRoadSignComponentProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreRoadSignComponentProto clone() {
    return (GeostoreRoadSignComponentProto) super.clone();
  }

}
