/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.managedkafka.v1.model;

/**
 * Represents the set of ACLs for a given Kafka Resource Pattern, which consists of resource_type,
 * resource_name and pattern_type.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Managed Service for Apache Kafka API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Acl extends com.google.api.client.json.GenericJson {

  /**
   * Required. The ACL entries that apply to the resource pattern. The maximum number of allowed
   * entries 100.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AclEntry> aclEntries;

  /**
   * Optional. `etag` is used for concurrency control. An `etag` is returned in the response to
   * `GetAcl` and `CreateAcl`. Callers are required to put that etag in the request to `UpdateAcl`
   * to ensure that their change will be applied to the same version of the acl that exists in the
   * Kafka Cluster. A terminal 'T' character in the etag indicates that the AclEntries were
   * truncated; more entries for the Acl exist on the Kafka Cluster, but can't be returned in the
   * Acl due to repeated field limits.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Identifier. The name for the acl. Represents a single Resource Pattern. Structured like:
   * projects/{project}/locations/{location}/clusters/{cluster}/acls/{acl_id} The structure of
   * `acl_id` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl.
   * `acl_id` is structured like one of the following: For acls on the cluster: `cluster` For acls
   * on a single resource within the cluster: `topic/{resource_name}`
   * `consumerGroup/{resource_name}` `transactionalId/{resource_name}` For acls on all resources
   * that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}`
   * `transactionalIdPrefixed/{resource_name}` For acls on all resources of a given type (i.e. the
   * wildcard literal "*"): `allTopics` (represents `topic`) `allConsumerGroups` (represents
   * `consumerGroup`) `allTransactionalIds` (represents `transactionalId`)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The ACL pattern type derived from the name. One of: LITERAL, PREFIXED.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String patternType;

  /**
   * Output only. The ACL resource name derived from the name. For cluster resource_type, this is
   * always "kafka-cluster". Can be the wildcard literal "*".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String resourceName;

  /**
   * Output only. The ACL resource type derived from the name. One of: CLUSTER, TOPIC, GROUP,
   * TRANSACTIONAL_ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String resourceType;

  /**
   * Required. The ACL entries that apply to the resource pattern. The maximum number of allowed
   * entries 100.
   * @return value or {@code null} for none
   */
  public java.util.List<AclEntry> getAclEntries() {
    return aclEntries;
  }

  /**
   * Required. The ACL entries that apply to the resource pattern. The maximum number of allowed
   * entries 100.
   * @param aclEntries aclEntries or {@code null} for none
   */
  public Acl setAclEntries(java.util.List<AclEntry> aclEntries) {
    this.aclEntries = aclEntries;
    return this;
  }

  /**
   * Optional. `etag` is used for concurrency control. An `etag` is returned in the response to
   * `GetAcl` and `CreateAcl`. Callers are required to put that etag in the request to `UpdateAcl`
   * to ensure that their change will be applied to the same version of the acl that exists in the
   * Kafka Cluster. A terminal 'T' character in the etag indicates that the AclEntries were
   * truncated; more entries for the Acl exist on the Kafka Cluster, but can't be returned in the
   * Acl due to repeated field limits.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Optional. `etag` is used for concurrency control. An `etag` is returned in the response to
   * `GetAcl` and `CreateAcl`. Callers are required to put that etag in the request to `UpdateAcl`
   * to ensure that their change will be applied to the same version of the acl that exists in the
   * Kafka Cluster. A terminal 'T' character in the etag indicates that the AclEntries were
   * truncated; more entries for the Acl exist on the Kafka Cluster, but can't be returned in the
   * Acl due to repeated field limits.
   * @param etag etag or {@code null} for none
   */
  public Acl setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Identifier. The name for the acl. Represents a single Resource Pattern. Structured like:
   * projects/{project}/locations/{location}/clusters/{cluster}/acls/{acl_id} The structure of
   * `acl_id` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl.
   * `acl_id` is structured like one of the following: For acls on the cluster: `cluster` For acls
   * on a single resource within the cluster: `topic/{resource_name}`
   * `consumerGroup/{resource_name}` `transactionalId/{resource_name}` For acls on all resources
   * that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}`
   * `transactionalIdPrefixed/{resource_name}` For acls on all resources of a given type (i.e. the
   * wildcard literal "*"): `allTopics` (represents `topic`) `allConsumerGroups` (represents
   * `consumerGroup`) `allTransactionalIds` (represents `transactionalId`)
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The name for the acl. Represents a single Resource Pattern. Structured like:
   * projects/{project}/locations/{location}/clusters/{cluster}/acls/{acl_id} The structure of
   * `acl_id` defines the Resource Pattern (resource_type, resource_name, pattern_type) of the acl.
   * `acl_id` is structured like one of the following: For acls on the cluster: `cluster` For acls
   * on a single resource within the cluster: `topic/{resource_name}`
   * `consumerGroup/{resource_name}` `transactionalId/{resource_name}` For acls on all resources
   * that match a prefix: `topicPrefixed/{resource_name}` `consumerGroupPrefixed/{resource_name}`
   * `transactionalIdPrefixed/{resource_name}` For acls on all resources of a given type (i.e. the
   * wildcard literal "*"): `allTopics` (represents `topic`) `allConsumerGroups` (represents
   * `consumerGroup`) `allTransactionalIds` (represents `transactionalId`)
   * @param name name or {@code null} for none
   */
  public Acl setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The ACL pattern type derived from the name. One of: LITERAL, PREFIXED.
   * @return value or {@code null} for none
   */
  public java.lang.String getPatternType() {
    return patternType;
  }

  /**
   * Output only. The ACL pattern type derived from the name. One of: LITERAL, PREFIXED.
   * @param patternType patternType or {@code null} for none
   */
  public Acl setPatternType(java.lang.String patternType) {
    this.patternType = patternType;
    return this;
  }

  /**
   * Output only. The ACL resource name derived from the name. For cluster resource_type, this is
   * always "kafka-cluster". Can be the wildcard literal "*".
   * @return value or {@code null} for none
   */
  public java.lang.String getResourceName() {
    return resourceName;
  }

  /**
   * Output only. The ACL resource name derived from the name. For cluster resource_type, this is
   * always "kafka-cluster". Can be the wildcard literal "*".
   * @param resourceName resourceName or {@code null} for none
   */
  public Acl setResourceName(java.lang.String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Output only. The ACL resource type derived from the name. One of: CLUSTER, TOPIC, GROUP,
   * TRANSACTIONAL_ID.
   * @return value or {@code null} for none
   */
  public java.lang.String getResourceType() {
    return resourceType;
  }

  /**
   * Output only. The ACL resource type derived from the name. One of: CLUSTER, TOPIC, GROUP,
   * TRANSACTIONAL_ID.
   * @param resourceType resourceType or {@code null} for none
   */
  public Acl setResourceType(java.lang.String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  @Override
  public Acl set(String fieldName, Object value) {
    return (Acl) super.set(fieldName, value);
  }

  @Override
  public Acl clone() {
    return (Acl) super.clone();
  }

}
