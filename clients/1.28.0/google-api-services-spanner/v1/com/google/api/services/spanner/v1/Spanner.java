/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1;

/**
 * Service definition for Spanner (v1).
 *
 * <p>
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/spanner/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link SpannerRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Spanner extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Cloud Spanner API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://spanner.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Spanner(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Spanner(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Spanner spanner = new Spanner(...);}
   *   {@code Spanner.Projects.List request = spanner.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the InstanceConfigs collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Spanner spanner = new Spanner(...);}
     *   {@code Spanner.InstanceConfigs.List request = spanner.instanceConfigs().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public InstanceConfigs instanceConfigs() {
      return new InstanceConfigs();
    }

    /**
     * The "instanceConfigs" collection of methods.
     */
    public class InstanceConfigs {

      /**
       * Gets information about a particular instance configuration.
       *
       * Create a request for the method "instanceConfigs.get".
       *
       * This request holds the parameters needed by the spanner server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the requested instance configuration. Values are of
      the form
       *        `projects//instanceConfigs/`.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends SpannerRequest<com.google.api.services.spanner.v1.model.InstanceConfig> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/instanceConfigs/[^/]+$");

        /**
         * Gets information about a particular instance configuration.
         *
         * Create a request for the method "instanceConfigs.get".
         *
         * This request holds the parameters needed by the the spanner server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the requested instance configuration. Values are of
      the form
       *        `projects//instanceConfigs/`.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(Spanner.this, "GET", REST_PATH, null, com.google.api.services.spanner.v1.model.InstanceConfig.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/instanceConfigs/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the requested instance configuration. Values are of the form
         * `projects//instanceConfigs/`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the requested instance configuration. Values are of the form
       `projects//instanceConfigs/`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the requested instance configuration. Values are of the form
         * `projects//instanceConfigs/`.
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/instanceConfigs/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists the supported instance configurations for a given project.
       *
       * Create a request for the method "instanceConfigs.list".
       *
       * This request holds the parameters needed by the spanner server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The name of the project for which a list of supported instance
      configurations is
       *        requested. Values are of the form
      `projects/`.
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends SpannerRequest<com.google.api.services.spanner.v1.model.ListInstanceConfigsResponse> {

        private static final String REST_PATH = "v1/{+parent}/instanceConfigs";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists the supported instance configurations for a given project.
         *
         * Create a request for the method "instanceConfigs.list".
         *
         * This request holds the parameters needed by the the spanner server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The name of the project for which a list of supported instance
      configurations is
       *        requested. Values are of the form
      `projects/`.
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(Spanner.this, "GET", REST_PATH, null, com.google.api.services.spanner.v1.model.ListInstanceConfigsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the project for which a list of supported instance configurations
         * is requested. Values are of the form `projects/`.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The name of the project for which a list of supported instance configurations is
       requested. Values are of the form `projects/`.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The name of the project for which a list of supported instance configurations
         * is requested. Values are of the form `projects/`.
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * Number of instance configurations to be returned in the response. If 0 or less, defaults
         * to the server's maximum allowed page size.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Number of instance configurations to be returned in the response. If 0 or less, defaults to the
       server's maximum allowed page size.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Number of instance configurations to be returned in the response. If 0 or less, defaults
         * to the server's maximum allowed page size.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * If non-empty, `page_token` should contain a next_page_token from a previous
         * ListInstanceConfigsResponse.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** If non-empty, `page_token` should contain a next_page_token from a previous
       ListInstanceConfigsResponse.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * If non-empty, `page_token` should contain a next_page_token from a previous
         * ListInstanceConfigsResponse.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Instances collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Spanner spanner = new Spanner(...);}
     *   {@code Spanner.Instances.List request = spanner.instances().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Instances instances() {
      return new Instances();
    }

    /**
     * The "instances" collection of methods.
     */
    public class Instances {

      /**
       * Creates an instance and begins preparing it to begin serving. The returned long-running operation
       * can be used to track the progress of preparing the new instance. The instance name is assigned by
       * the caller. If the named instance already exists, `CreateInstance` returns `ALREADY_EXISTS`.
       *
       * Immediately upon completion of this request:
       *
       *   * The instance is readable via the API, with all requested attributes     but no allocated
       * resources. Its state is `CREATING`.
       *
       * Until completion of the returned operation:
       *
       *   * Cancelling the operation renders the instance immediately unreadable     via the API.   * The
       * instance can be deleted.   * All other attempts to modify the instance are rejected.
       *
       * Upon completion of the returned operation:
       *
       *   * Billing for all successfully-allocated resources begins (some types     may have lower than
       * the requested levels).   * Databases can be created in the instance.   * The instance's allocated
       * resource levels are readable via the API.   * The instance's state becomes `READY`.
       *
       * The returned long-running operation will have a name of the format `/operations/` and can be used
       * to track creation of the instance.  The metadata field type is CreateInstanceMetadata. The
       * response field type is Instance, if successful.
       *
       * Create a request for the method "instances.create".
       *
       * This request holds the parameters needed by the spanner server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The name of the project in which to create the instance. Values
      are of the form
       *        `projects/`.
       * @param content the {@link com.google.api.services.spanner.v1.model.CreateInstanceRequest}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.spanner.v1.model.CreateInstanceRequest content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends SpannerRequest<com.google.api.services.spanner.v1.model.Operation> {

        private static final String REST_PATH = "v1/{+parent}/instances";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Creates an instance and begins preparing it to begin serving. The returned long-running
         * operation can be used to track the progress of preparing the new instance. The instance name is
         * assigned by the caller. If the named instance already exists, `CreateInstance` returns
         * `ALREADY_EXISTS`.
         *
         * Immediately upon completion of this request:
         *
         *   * The instance is readable via the API, with all requested attributes     but no allocated
         * resources. Its state is `CREATING`.
         *
         * Until completion of the returned operation:
         *
         *   * Cancelling the operation renders the instance immediately unreadable     via the API.   *
         * The instance can be deleted.   * All other attempts to modify the instance are rejected.
         *
         * Upon completion of the returned operation:
         *
         *   * Billing for all successfully-allocated resources begins (some types     may have lower than
         * the requested levels).   * Databases can be created in the instance.   * The instance's
         * allocated resource levels are readable via the API.   * The instance's state becomes `READY`.
         *
         * The returned long-running operation will have a name of the format `/operations/` and can be
         * used to track creation of the instance.  The metadata field type is CreateInstanceMetadata. The
         * response field type is Instance, if successful.
         *
         * Create a request for the method "instances.create".
         *
         * This request holds the parameters needed by the the spanner server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The name of the project in which to create the instance. Values
      are of the form
       *        `projects/`.
         * @param content the {@link com.google.api.services.spanner.v1.model.CreateInstanceRequest}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.spanner.v1.model.CreateInstanceRequest content) {
          super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.Operation.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the project in which to create the instance. Values are of the form
         * `projects/`.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The name of the project in which to create the instance. Values are of the form
       `projects/`.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The name of the project in which to create the instance. Values are of the form
         * `projects/`.
         */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Deletes an instance.
       *
       * Immediately upon completion of the request:
       *
       *   * Billing ceases for all of the instance's reserved resources.
       *
       * Soon afterward:
       *
       *   * The instance and *all of its databases* immediately and     irrevocably disappear from the
       * API. All data in the databases     is permanently deleted.
       *
       * Create a request for the method "instances.delete".
       *
       * This request holds the parameters needed by the spanner server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the instance to be deleted. Values are of the form
      `projects//instances/`
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends SpannerRequest<com.google.api.services.spanner.v1.model.Empty> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+$");

        /**
         * Deletes an instance.
         *
         * Immediately upon completion of the request:
         *
         *   * Billing ceases for all of the instance's reserved resources.
         *
         * Soon afterward:
         *
         *   * The instance and *all of its databases* immediately and     irrevocably disappear from the
         * API. All data in the databases     is permanently deleted.
         *
         * Create a request for the method "instances.delete".
         *
         * This request holds the parameters needed by the the spanner server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the instance to be deleted. Values are of the form
      `projects//instances/`
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(Spanner.this, "DELETE", REST_PATH, null, com.google.api.services.spanner.v1.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/instances/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the instance to be deleted. Values are of the form
         * `projects//instances/`
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the instance to be deleted. Values are of the form `projects//instances/`
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the instance to be deleted. Values are of the form
         * `projects//instances/`
         */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/instances/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Gets information about a particular instance.
       *
       * Create a request for the method "instances.get".
       *
       * This request holds the parameters needed by the spanner server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the requested instance. Values are of the form
      `projects//instances/`.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends SpannerRequest<com.google.api.services.spanner.v1.model.Instance> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+$");

        /**
         * Gets information about a particular instance.
         *
         * Create a request for the method "instances.get".
         *
         * This request holds the parameters needed by the the spanner server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the requested instance. Values are of the form
      `projects//instances/`.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(Spanner.this, "GET", REST_PATH, null, com.google.api.services.spanner.v1.model.Instance.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/instances/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the requested instance. Values are of the form
         * `projects//instances/`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the requested instance. Values are of the form `projects//instances/`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the requested instance. Values are of the form
         * `projects//instances/`.
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/instances/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Gets the access control policy for an instance resource. Returns an empty policy if an instance
       * exists but does not have a policy set.
       *
       * Authorization requires `spanner.instances.getIamPolicy` on resource.
       *
       * Create a request for the method "instances.getIamPolicy".
       *
       * This request holds the parameters needed by the spanner server.  After setting any optional
       * parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote operation.
       *
       * @param resource REQUIRED: The Cloud Spanner resource for which the policy is being retrieved. The format is
       *        `projects//instances/` for instance resources and `projects//instances//databases/` for
       *        database resources.
       * @param content the {@link com.google.api.services.spanner.v1.model.GetIamPolicyRequest}
       * @return the request
       */
      public GetIamPolicy getIamPolicy(java.lang.String resource, com.google.api.services.spanner.v1.model.GetIamPolicyRequest content) throws java.io.IOException {
        GetIamPolicy result = new GetIamPolicy(resource, content);
        initialize(result);
        return result;
      }

      public class GetIamPolicy extends SpannerRequest<com.google.api.services.spanner.v1.model.Policy> {

        private static final String REST_PATH = "v1/{+resource}:getIamPolicy";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+$");

        /**
         * Gets the access control policy for an instance resource. Returns an empty policy if an instance
         * exists but does not have a policy set.
         *
         * Authorization requires `spanner.instances.getIamPolicy` on resource.
         *
         * Create a request for the method "instances.getIamPolicy".
         *
         * This request holds the parameters needed by the the spanner server.  After setting any optional
         * parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote operation. <p>
         * {@link
         * GetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The Cloud Spanner resource for which the policy is being retrieved. The format is
       *        `projects//instances/` for instance resources and `projects//instances//databases/` for
       *        database resources.
         * @param content the {@link com.google.api.services.spanner.v1.model.GetIamPolicyRequest}
         * @since 1.13
         */
        protected GetIamPolicy(java.lang.String resource, com.google.api.services.spanner.v1.model.GetIamPolicyRequest content) {
          super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.Policy.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/instances/[^/]+$");
          }
        }

        @Override
        public GetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
          return (GetIamPolicy) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetIamPolicy setAccessToken(java.lang.String accessToken) {
          return (GetIamPolicy) super.setAccessToken(accessToken);
        }

        @Override
        public GetIamPolicy setAlt(java.lang.String alt) {
          return (GetIamPolicy) super.setAlt(alt);
        }

        @Override
        public GetIamPolicy setCallback(java.lang.String callback) {
          return (GetIamPolicy) super.setCallback(callback);
        }

        @Override
        public GetIamPolicy setFields(java.lang.String fields) {
          return (GetIamPolicy) super.setFields(fields);
        }

        @Override
        public GetIamPolicy setKey(java.lang.String key) {
          return (GetIamPolicy) super.setKey(key);
        }

        @Override
        public GetIamPolicy setOauthToken(java.lang.String oauthToken) {
          return (GetIamPolicy) super.setOauthToken(oauthToken);
        }

        @Override
        public GetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetIamPolicy) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetIamPolicy setQuotaUser(java.lang.String quotaUser) {
          return (GetIamPolicy) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetIamPolicy setUploadType(java.lang.String uploadType) {
          return (GetIamPolicy) super.setUploadType(uploadType);
        }

        @Override
        public GetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetIamPolicy) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The Cloud Spanner resource for which the policy is being retrieved. The format
         * is `projects//instances/` for instance resources and `projects//instances//databases/`
         * for database resources.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The Cloud Spanner resource for which the policy is being retrieved. The format is
       `projects//instances/` for instance resources and `projects//instances//databases/` for database
       resources.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The Cloud Spanner resource for which the policy is being retrieved. The format
         * is `projects//instances/` for instance resources and `projects//instances//databases/`
         * for database resources.
         */
        public GetIamPolicy setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/instances/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public GetIamPolicy set(String parameterName, Object value) {
          return (GetIamPolicy) super.set(parameterName, value);
        }
      }
      /**
       * Lists all instances in the given project.
       *
       * Create a request for the method "instances.list".
       *
       * This request holds the parameters needed by the spanner server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The name of the project for which a list of instances is
      requested. Values are of the form
       *        `projects/`.
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends SpannerRequest<com.google.api.services.spanner.v1.model.ListInstancesResponse> {

        private static final String REST_PATH = "v1/{+parent}/instances";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists all instances in the given project.
         *
         * Create a request for the method "instances.list".
         *
         * This request holds the parameters needed by the the spanner server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The name of the project for which a list of instances is
      requested. Values are of the form
       *        `projects/`.
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(Spanner.this, "GET", REST_PATH, null, com.google.api.services.spanner.v1.model.ListInstancesResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the project for which a list of instances is requested. Values are
         * of the form `projects/`.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The name of the project for which a list of instances is requested. Values are of the
       form `projects/`.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The name of the project for which a list of instances is requested. Values are
         * of the form `projects/`.
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * An expression for filtering the results of the request. Filter rules are case
         * insensitive. The fields eligible for filtering are:
         *
         * * `name` * `display_name` * `labels.key` where key is the name of a label
         *
         * Some examples of using filters are:
         *
         * * `name:*` --> The instance has a name. * `name:Howl` --> The instance's name contains
         * the string "howl". * `name:HOWL` --> Equivalent to above. * `NAME:howl` --> Equivalent to
         * above. * `labels.env:*` --> The instance has the label "env". * `labels.env:dev` --> The
         * instance has the label "env" and the value of the label contains the string "dev". *
         * `name:howl labels.env:dev` --> The instance's name contains "howl" and it has the label
         * "env" with its value containing "dev".
         */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** An expression for filtering the results of the request. Filter rules are case insensitive. The
       fields eligible for filtering are:

       * `name` * `display_name` * `labels.key` where key is the name of a label

       Some examples of using filters are:

       * `name:*` --> The instance has a name. * `name:Howl` --> The instance's name contains the string
       "howl". * `name:HOWL` --> Equivalent to above. * `NAME:howl` --> Equivalent to above. *
       `labels.env:*` --> The instance has the label "env". * `labels.env:dev` --> The instance has the
       label "env" and the value of the label contains the string "dev". * `name:howl labels.env:dev` -->
       The instance's name contains "howl" and it has the label "env" with its value containing "dev".
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /**
         * An expression for filtering the results of the request. Filter rules are case
         * insensitive. The fields eligible for filtering are:
         *
         * * `name` * `display_name` * `labels.key` where key is the name of a label
         *
         * Some examples of using filters are:
         *
         * * `name:*` --> The instance has a name. * `name:Howl` --> The instance's name contains
         * the string "howl". * `name:HOWL` --> Equivalent to above. * `NAME:howl` --> Equivalent to
         * above. * `labels.env:*` --> The instance has the label "env". * `labels.env:dev` --> The
         * instance has the label "env" and the value of the label contains the string "dev". *
         * `name:howl labels.env:dev` --> The instance's name contains "howl" and it has the label
         * "env" with its value containing "dev".
         */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /**
         * Number of instances to be returned in the response. If 0 or less, defaults to the
         * server's maximum allowed page size.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Number of instances to be returned in the response. If 0 or less, defaults to the server's maximum
       allowed page size.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Number of instances to be returned in the response. If 0 or less, defaults to the
         * server's maximum allowed page size.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * If non-empty, `page_token` should contain a next_page_token from a previous
         * ListInstancesResponse.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** If non-empty, `page_token` should contain a next_page_token from a previous ListInstancesResponse.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * If non-empty, `page_token` should contain a next_page_token from a previous
         * ListInstancesResponse.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates an instance, and begins allocating or releasing resources as requested. The returned
       * long-running operation can be used to track the progress of updating the instance. If the named
       * instance does not exist, returns `NOT_FOUND`.
       *
       * Immediately upon completion of this request:
       *
       *   * For resource types for which a decrease in the instance's allocation     has been requested,
       * billing is based on the newly-requested level.
       *
       * Until completion of the returned operation:
       *
       *   * Cancelling the operation sets its metadata's     cancel_time, and begins     restoring
       * resources to their pre-request values. The operation     is guaranteed to succeed at undoing all
       * resource changes,     after which point it terminates with a `CANCELLED` status.   * All other
       * attempts to modify the instance are rejected.   * Reading the instance via the API continues to
       * give the pre-request     resource levels.
       *
       * Upon completion of the returned operation:
       *
       *   * Billing begins for all successfully-allocated resources (some types     may have lower than
       * the requested levels).   * All newly-reserved resources are available for serving the instance's
       * tables.   * The instance's new resource levels are readable via the API.
       *
       * The returned long-running operation will have a name of the format `/operations/` and can be used
       * to track the instance modification.  The metadata field type is UpdateInstanceMetadata. The
       * response field type is Instance, if successful.
       *
       * Authorization requires `spanner.instances.update` permission on resource name.
       *
       * Create a request for the method "instances.patch".
       *
       * This request holds the parameters needed by the spanner server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name Required. A unique identifier for the instance, which cannot be changed
      after the instance is
       *        created. Values are of the form
      `projects//instances/a-z*[a-z0-9]`. The final
      segment of
       *        the name must be between 6 and 30 characters in length.
       * @param content the {@link com.google.api.services.spanner.v1.model.UpdateInstanceRequest}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.spanner.v1.model.UpdateInstanceRequest content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends SpannerRequest<com.google.api.services.spanner.v1.model.Operation> {

        private static final String REST_PATH = "v1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+$");

        /**
         * Updates an instance, and begins allocating or releasing resources as requested. The returned
         * long-running operation can be used to track the progress of updating the instance. If the named
         * instance does not exist, returns `NOT_FOUND`.
         *
         * Immediately upon completion of this request:
         *
         *   * For resource types for which a decrease in the instance's allocation     has been
         * requested, billing is based on the newly-requested level.
         *
         * Until completion of the returned operation:
         *
         *   * Cancelling the operation sets its metadata's     cancel_time, and begins     restoring
         * resources to their pre-request values. The operation     is guaranteed to succeed at undoing
         * all resource changes,     after which point it terminates with a `CANCELLED` status.   * All
         * other attempts to modify the instance are rejected.   * Reading the instance via the API
         * continues to give the pre-request     resource levels.
         *
         * Upon completion of the returned operation:
         *
         *   * Billing begins for all successfully-allocated resources (some types     may have lower than
         * the requested levels).   * All newly-reserved resources are available for serving the
         * instance's     tables.   * The instance's new resource levels are readable via the API.
         *
         * The returned long-running operation will have a name of the format `/operations/` and can be
         * used to track the instance modification.  The metadata field type is UpdateInstanceMetadata.
         * The response field type is Instance, if successful.
         *
         * Authorization requires `spanner.instances.update` permission on resource name.
         *
         * Create a request for the method "instances.patch".
         *
         * This request holds the parameters needed by the the spanner server.  After setting any optional
         * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. A unique identifier for the instance, which cannot be changed
      after the instance is
       *        created. Values are of the form
      `projects//instances/a-z*[a-z0-9]`. The final
      segment of
       *        the name must be between 6 and 30 characters in length.
         * @param content the {@link com.google.api.services.spanner.v1.model.UpdateInstanceRequest}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.spanner.v1.model.UpdateInstanceRequest content) {
          super(Spanner.this, "PATCH", REST_PATH, content, com.google.api.services.spanner.v1.model.Operation.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/instances/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. A unique identifier for the instance, which cannot be changed after the
         * instance is created. Values are of the form `projects//instances/a-z*[a-z0-9]`. The final
         * segment of the name must be between 6 and 30 characters in length.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. A unique identifier for the instance, which cannot be changed after the instance is
       created. Values are of the form `projects//instances/a-z*[a-z0-9]`. The final segment of the name
       must be between 6 and 30 characters in length.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. A unique identifier for the instance, which cannot be changed after the
         * instance is created. Values are of the form `projects//instances/a-z*[a-z0-9]`. The final
         * segment of the name must be between 6 and 30 characters in length.
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/instances/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }
      /**
       * Sets the access control policy on an instance resource. Replaces any existing policy.
       *
       * Authorization requires `spanner.instances.setIamPolicy` on resource.
       *
       * Create a request for the method "instances.setIamPolicy".
       *
       * This request holds the parameters needed by the spanner server.  After setting any optional
       * parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote operation.
       *
       * @param resource REQUIRED: The Cloud Spanner resource for which the policy is being set. The format is
       *        `projects//instances/` for instance resources and `projects//instances//databases/` for
       *        databases resources.
       * @param content the {@link com.google.api.services.spanner.v1.model.SetIamPolicyRequest}
       * @return the request
       */
      public SetIamPolicy setIamPolicy(java.lang.String resource, com.google.api.services.spanner.v1.model.SetIamPolicyRequest content) throws java.io.IOException {
        SetIamPolicy result = new SetIamPolicy(resource, content);
        initialize(result);
        return result;
      }

      public class SetIamPolicy extends SpannerRequest<com.google.api.services.spanner.v1.model.Policy> {

        private static final String REST_PATH = "v1/{+resource}:setIamPolicy";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+$");

        /**
         * Sets the access control policy on an instance resource. Replaces any existing policy.
         *
         * Authorization requires `spanner.instances.setIamPolicy` on resource.
         *
         * Create a request for the method "instances.setIamPolicy".
         *
         * This request holds the parameters needed by the the spanner server.  After setting any optional
         * parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote operation. <p>
         * {@link
         * SetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param resource REQUIRED: The Cloud Spanner resource for which the policy is being set. The format is
       *        `projects//instances/` for instance resources and `projects//instances//databases/` for
       *        databases resources.
         * @param content the {@link com.google.api.services.spanner.v1.model.SetIamPolicyRequest}
         * @since 1.13
         */
        protected SetIamPolicy(java.lang.String resource, com.google.api.services.spanner.v1.model.SetIamPolicyRequest content) {
          super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.Policy.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/instances/[^/]+$");
          }
        }

        @Override
        public SetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
          return (SetIamPolicy) super.set$Xgafv($Xgafv);
        }

        @Override
        public SetIamPolicy setAccessToken(java.lang.String accessToken) {
          return (SetIamPolicy) super.setAccessToken(accessToken);
        }

        @Override
        public SetIamPolicy setAlt(java.lang.String alt) {
          return (SetIamPolicy) super.setAlt(alt);
        }

        @Override
        public SetIamPolicy setCallback(java.lang.String callback) {
          return (SetIamPolicy) super.setCallback(callback);
        }

        @Override
        public SetIamPolicy setFields(java.lang.String fields) {
          return (SetIamPolicy) super.setFields(fields);
        }

        @Override
        public SetIamPolicy setKey(java.lang.String key) {
          return (SetIamPolicy) super.setKey(key);
        }

        @Override
        public SetIamPolicy setOauthToken(java.lang.String oauthToken) {
          return (SetIamPolicy) super.setOauthToken(oauthToken);
        }

        @Override
        public SetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (SetIamPolicy) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public SetIamPolicy setQuotaUser(java.lang.String quotaUser) {
          return (SetIamPolicy) super.setQuotaUser(quotaUser);
        }

        @Override
        public SetIamPolicy setUploadType(java.lang.String uploadType) {
          return (SetIamPolicy) super.setUploadType(uploadType);
        }

        @Override
        public SetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
          return (SetIamPolicy) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The Cloud Spanner resource for which the policy is being set. The format is
         * `projects//instances/` for instance resources and `projects//instances//databases/` for
         * databases resources.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The Cloud Spanner resource for which the policy is being set. The format is
       `projects//instances/` for instance resources and `projects//instances//databases/` for databases
       resources.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The Cloud Spanner resource for which the policy is being set. The format is
         * `projects//instances/` for instance resources and `projects//instances//databases/` for
         * databases resources.
         */
        public SetIamPolicy setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/instances/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public SetIamPolicy set(String parameterName, Object value) {
          return (SetIamPolicy) super.set(parameterName, value);
        }
      }
      /**
       * Returns permissions that the caller has on the specified instance resource.
       *
       * Attempting this RPC on a non-existent Cloud Spanner instance resource will result in a NOT_FOUND
       * error if the user has `spanner.instances.list` permission on the containing Google Cloud Project.
       * Otherwise returns an empty set of permissions.
       *
       * Create a request for the method "instances.testIamPermissions".
       *
       * This request holds the parameters needed by the spanner server.  After setting any optional
       * parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote operation.
       *
       * @param resource REQUIRED: The Cloud Spanner resource for which permissions are being tested. The format is
       *        `projects//instances/` for instance resources and `projects//instances//databases/` for
       *        database resources.
       * @param content the {@link com.google.api.services.spanner.v1.model.TestIamPermissionsRequest}
       * @return the request
       */
      public TestIamPermissions testIamPermissions(java.lang.String resource, com.google.api.services.spanner.v1.model.TestIamPermissionsRequest content) throws java.io.IOException {
        TestIamPermissions result = new TestIamPermissions(resource, content);
        initialize(result);
        return result;
      }

      public class TestIamPermissions extends SpannerRequest<com.google.api.services.spanner.v1.model.TestIamPermissionsResponse> {

        private static final String REST_PATH = "v1/{+resource}:testIamPermissions";

        private final java.util.regex.Pattern RESOURCE_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+$");

        /**
         * Returns permissions that the caller has on the specified instance resource.
         *
         * Attempting this RPC on a non-existent Cloud Spanner instance resource will result in a
         * NOT_FOUND error if the user has `spanner.instances.list` permission on the containing Google
         * Cloud Project. Otherwise returns an empty set of permissions.
         *
         * Create a request for the method "instances.testIamPermissions".
         *
         * This request holds the parameters needed by the the spanner server.  After setting any optional
         * parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
         * operation. <p> {@link TestIamPermissions#initialize(com.google.api.client.googleapis.services.A
         * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
         * invoking the constructor. </p>
         *
         * @param resource REQUIRED: The Cloud Spanner resource for which permissions are being tested. The format is
       *        `projects//instances/` for instance resources and `projects//instances//databases/` for
       *        database resources.
         * @param content the {@link com.google.api.services.spanner.v1.model.TestIamPermissionsRequest}
         * @since 1.13
         */
        protected TestIamPermissions(java.lang.String resource, com.google.api.services.spanner.v1.model.TestIamPermissionsRequest content) {
          super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.TestIamPermissionsResponse.class);
          this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/instances/[^/]+$");
          }
        }

        @Override
        public TestIamPermissions set$Xgafv(java.lang.String $Xgafv) {
          return (TestIamPermissions) super.set$Xgafv($Xgafv);
        }

        @Override
        public TestIamPermissions setAccessToken(java.lang.String accessToken) {
          return (TestIamPermissions) super.setAccessToken(accessToken);
        }

        @Override
        public TestIamPermissions setAlt(java.lang.String alt) {
          return (TestIamPermissions) super.setAlt(alt);
        }

        @Override
        public TestIamPermissions setCallback(java.lang.String callback) {
          return (TestIamPermissions) super.setCallback(callback);
        }

        @Override
        public TestIamPermissions setFields(java.lang.String fields) {
          return (TestIamPermissions) super.setFields(fields);
        }

        @Override
        public TestIamPermissions setKey(java.lang.String key) {
          return (TestIamPermissions) super.setKey(key);
        }

        @Override
        public TestIamPermissions setOauthToken(java.lang.String oauthToken) {
          return (TestIamPermissions) super.setOauthToken(oauthToken);
        }

        @Override
        public TestIamPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (TestIamPermissions) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public TestIamPermissions setQuotaUser(java.lang.String quotaUser) {
          return (TestIamPermissions) super.setQuotaUser(quotaUser);
        }

        @Override
        public TestIamPermissions setUploadType(java.lang.String uploadType) {
          return (TestIamPermissions) super.setUploadType(uploadType);
        }

        @Override
        public TestIamPermissions setUploadProtocol(java.lang.String uploadProtocol) {
          return (TestIamPermissions) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * REQUIRED: The Cloud Spanner resource for which permissions are being tested. The format
         * is `projects//instances/` for instance resources and `projects//instances//databases/`
         * for database resources.
         */
        @com.google.api.client.util.Key
        private java.lang.String resource;

        /** REQUIRED: The Cloud Spanner resource for which permissions are being tested. The format is
       `projects//instances/` for instance resources and `projects//instances//databases/` for database
       resources.
         */
        public java.lang.String getResource() {
          return resource;
        }

        /**
         * REQUIRED: The Cloud Spanner resource for which permissions are being tested. The format
         * is `projects//instances/` for instance resources and `projects//instances//databases/`
         * for database resources.
         */
        public TestIamPermissions setResource(java.lang.String resource) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                "Parameter resource must conform to the pattern " +
                "^projects/[^/]+/instances/[^/]+$");
          }
          this.resource = resource;
          return this;
        }

        @Override
        public TestIamPermissions set(String parameterName, Object value) {
          return (TestIamPermissions) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Databases collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Spanner spanner = new Spanner(...);}
       *   {@code Spanner.Databases.List request = spanner.databases().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Databases databases() {
        return new Databases();
      }

      /**
       * The "databases" collection of methods.
       */
      public class Databases {

        /**
         * Creates a new Cloud Spanner database and starts to prepare it for serving. The returned long-
         * running operation will have a name of the format `/operations/` and can be used to track
         * preparation of the database. The metadata field type is CreateDatabaseMetadata. The response
         * field type is Database, if successful.
         *
         * Create a request for the method "databases.create".
         *
         * This request holds the parameters needed by the spanner server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The name of the instance that will serve the new database.
        Values are of the form
         *        `projects//instances/`.
         * @param content the {@link com.google.api.services.spanner.v1.model.CreateDatabaseRequest}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.spanner.v1.model.CreateDatabaseRequest content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends SpannerRequest<com.google.api.services.spanner.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+parent}/databases";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+$");

          /**
           * Creates a new Cloud Spanner database and starts to prepare it for serving. The returned long-
           * running operation will have a name of the format `/operations/` and can be used to track
           * preparation of the database. The metadata field type is CreateDatabaseMetadata. The response
           * field type is Database, if successful.
           *
           * Create a request for the method "databases.create".
           *
           * This request holds the parameters needed by the the spanner server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The name of the instance that will serve the new database.
        Values are of the form
         *        `projects//instances/`.
           * @param content the {@link com.google.api.services.spanner.v1.model.CreateDatabaseRequest}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.spanner.v1.model.CreateDatabaseRequest content) {
            super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.Operation.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the instance that will serve the new database. Values are of the
           * form `projects//instances/`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The name of the instance that will serve the new database. Values are of the form
         `projects//instances/`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The name of the instance that will serve the new database. Values are of the
           * form `projects//instances/`.
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Drops (aka deletes) a Cloud Spanner database.
         *
         * Create a request for the method "databases.dropDatabase".
         *
         * This request holds the parameters needed by the spanner server.  After setting any optional
         * parameters, call the {@link DropDatabase#execute()} method to invoke the remote operation.
         *
         * @param database Required. The database to be dropped.
         * @return the request
         */
        public DropDatabase dropDatabase(java.lang.String database) throws java.io.IOException {
          DropDatabase result = new DropDatabase(database);
          initialize(result);
          return result;
        }

        public class DropDatabase extends SpannerRequest<com.google.api.services.spanner.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+database}";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+$");

          /**
           * Drops (aka deletes) a Cloud Spanner database.
           *
           * Create a request for the method "databases.dropDatabase".
           *
           * This request holds the parameters needed by the the spanner server.  After setting any optional
           * parameters, call the {@link DropDatabase#execute()} method to invoke the remote operation. <p>
           * {@link
           * DropDatabase#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database Required. The database to be dropped.
           * @since 1.13
           */
          protected DropDatabase(java.lang.String database) {
            super(Spanner.this, "DELETE", REST_PATH, null, com.google.api.services.spanner.v1.model.Empty.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public DropDatabase set$Xgafv(java.lang.String $Xgafv) {
            return (DropDatabase) super.set$Xgafv($Xgafv);
          }

          @Override
          public DropDatabase setAccessToken(java.lang.String accessToken) {
            return (DropDatabase) super.setAccessToken(accessToken);
          }

          @Override
          public DropDatabase setAlt(java.lang.String alt) {
            return (DropDatabase) super.setAlt(alt);
          }

          @Override
          public DropDatabase setCallback(java.lang.String callback) {
            return (DropDatabase) super.setCallback(callback);
          }

          @Override
          public DropDatabase setFields(java.lang.String fields) {
            return (DropDatabase) super.setFields(fields);
          }

          @Override
          public DropDatabase setKey(java.lang.String key) {
            return (DropDatabase) super.setKey(key);
          }

          @Override
          public DropDatabase setOauthToken(java.lang.String oauthToken) {
            return (DropDatabase) super.setOauthToken(oauthToken);
          }

          @Override
          public DropDatabase setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (DropDatabase) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public DropDatabase setQuotaUser(java.lang.String quotaUser) {
            return (DropDatabase) super.setQuotaUser(quotaUser);
          }

          @Override
          public DropDatabase setUploadType(java.lang.String uploadType) {
            return (DropDatabase) super.setUploadType(uploadType);
          }

          @Override
          public DropDatabase setUploadProtocol(java.lang.String uploadProtocol) {
            return (DropDatabase) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The database to be dropped. */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** Required. The database to be dropped.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /** Required. The database to be dropped. */
          public DropDatabase setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public DropDatabase set(String parameterName, Object value) {
            return (DropDatabase) super.set(parameterName, value);
          }
        }
        /**
         * Gets the state of a Cloud Spanner database.
         *
         * Create a request for the method "databases.get".
         *
         * This request holds the parameters needed by the spanner server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name Required. The name of the requested database. Values are of the form
         *        `projects//instances//databases/`.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends SpannerRequest<com.google.api.services.spanner.v1.model.Database> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+$");

          /**
           * Gets the state of a Cloud Spanner database.
           *
           * Create a request for the method "databases.get".
           *
           * This request holds the parameters needed by the the spanner server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name Required. The name of the requested database. Values are of the form
         *        `projects//instances//databases/`.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Spanner.this, "GET", REST_PATH, null, com.google.api.services.spanner.v1.model.Database.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The name of the requested database. Values are of the form
           * `projects//instances//databases/`.
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** Required. The name of the requested database. Values are of the form
         `projects//instances//databases/`.
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * Required. The name of the requested database. Values are of the form
           * `projects//instances//databases/`.
           */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Returns the schema of a Cloud Spanner database as a list of formatted DDL statements. This method
         * does not show pending schema updates, those may be queried using the Operations API.
         *
         * Create a request for the method "databases.getDdl".
         *
         * This request holds the parameters needed by the spanner server.  After setting any optional
         * parameters, call the {@link GetDdl#execute()} method to invoke the remote operation.
         *
         * @param database Required. The database whose schema we wish to get.
         * @return the request
         */
        public GetDdl getDdl(java.lang.String database) throws java.io.IOException {
          GetDdl result = new GetDdl(database);
          initialize(result);
          return result;
        }

        public class GetDdl extends SpannerRequest<com.google.api.services.spanner.v1.model.GetDatabaseDdlResponse> {

          private static final String REST_PATH = "v1/{+database}/ddl";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+$");

          /**
           * Returns the schema of a Cloud Spanner database as a list of formatted DDL statements. This
           * method does not show pending schema updates, those may be queried using the Operations API.
           *
           * Create a request for the method "databases.getDdl".
           *
           * This request holds the parameters needed by the the spanner server.  After setting any optional
           * parameters, call the {@link GetDdl#execute()} method to invoke the remote operation. <p> {@link
           * GetDdl#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database Required. The database whose schema we wish to get.
           * @since 1.13
           */
          protected GetDdl(java.lang.String database) {
            super(Spanner.this, "GET", REST_PATH, null, com.google.api.services.spanner.v1.model.GetDatabaseDdlResponse.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public GetDdl set$Xgafv(java.lang.String $Xgafv) {
            return (GetDdl) super.set$Xgafv($Xgafv);
          }

          @Override
          public GetDdl setAccessToken(java.lang.String accessToken) {
            return (GetDdl) super.setAccessToken(accessToken);
          }

          @Override
          public GetDdl setAlt(java.lang.String alt) {
            return (GetDdl) super.setAlt(alt);
          }

          @Override
          public GetDdl setCallback(java.lang.String callback) {
            return (GetDdl) super.setCallback(callback);
          }

          @Override
          public GetDdl setFields(java.lang.String fields) {
            return (GetDdl) super.setFields(fields);
          }

          @Override
          public GetDdl setKey(java.lang.String key) {
            return (GetDdl) super.setKey(key);
          }

          @Override
          public GetDdl setOauthToken(java.lang.String oauthToken) {
            return (GetDdl) super.setOauthToken(oauthToken);
          }

          @Override
          public GetDdl setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (GetDdl) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public GetDdl setQuotaUser(java.lang.String quotaUser) {
            return (GetDdl) super.setQuotaUser(quotaUser);
          }

          @Override
          public GetDdl setUploadType(java.lang.String uploadType) {
            return (GetDdl) super.setUploadType(uploadType);
          }

          @Override
          public GetDdl setUploadProtocol(java.lang.String uploadProtocol) {
            return (GetDdl) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The database whose schema we wish to get. */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** Required. The database whose schema we wish to get.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /** Required. The database whose schema we wish to get. */
          public GetDdl setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public GetDdl set(String parameterName, Object value) {
            return (GetDdl) super.set(parameterName, value);
          }
        }
        /**
         * Gets the access control policy for a database resource. Returns an empty policy if a database
         * exists but does not have a policy set.
         *
         * Authorization requires `spanner.databases.getIamPolicy` permission on resource.
         *
         * Create a request for the method "databases.getIamPolicy".
         *
         * This request holds the parameters needed by the spanner server.  After setting any optional
         * parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote operation.
         *
         * @param resource REQUIRED: The Cloud Spanner resource for which the policy is being retrieved. The format is
         *        `projects//instances/` for instance resources and `projects//instances//databases/` for
         *        database resources.
         * @param content the {@link com.google.api.services.spanner.v1.model.GetIamPolicyRequest}
         * @return the request
         */
        public GetIamPolicy getIamPolicy(java.lang.String resource, com.google.api.services.spanner.v1.model.GetIamPolicyRequest content) throws java.io.IOException {
          GetIamPolicy result = new GetIamPolicy(resource, content);
          initialize(result);
          return result;
        }

        public class GetIamPolicy extends SpannerRequest<com.google.api.services.spanner.v1.model.Policy> {

          private static final String REST_PATH = "v1/{+resource}:getIamPolicy";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+$");

          /**
           * Gets the access control policy for a database resource. Returns an empty policy if a database
           * exists but does not have a policy set.
           *
           * Authorization requires `spanner.databases.getIamPolicy` permission on resource.
           *
           * Create a request for the method "databases.getIamPolicy".
           *
           * This request holds the parameters needed by the the spanner server.  After setting any optional
           * parameters, call the {@link GetIamPolicy#execute()} method to invoke the remote operation. <p>
           * {@link
           * GetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The Cloud Spanner resource for which the policy is being retrieved. The format is
         *        `projects//instances/` for instance resources and `projects//instances//databases/` for
         *        database resources.
           * @param content the {@link com.google.api.services.spanner.v1.model.GetIamPolicyRequest}
           * @since 1.13
           */
          protected GetIamPolicy(java.lang.String resource, com.google.api.services.spanner.v1.model.GetIamPolicyRequest content) {
            super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.Policy.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public GetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
            return (GetIamPolicy) super.set$Xgafv($Xgafv);
          }

          @Override
          public GetIamPolicy setAccessToken(java.lang.String accessToken) {
            return (GetIamPolicy) super.setAccessToken(accessToken);
          }

          @Override
          public GetIamPolicy setAlt(java.lang.String alt) {
            return (GetIamPolicy) super.setAlt(alt);
          }

          @Override
          public GetIamPolicy setCallback(java.lang.String callback) {
            return (GetIamPolicy) super.setCallback(callback);
          }

          @Override
          public GetIamPolicy setFields(java.lang.String fields) {
            return (GetIamPolicy) super.setFields(fields);
          }

          @Override
          public GetIamPolicy setKey(java.lang.String key) {
            return (GetIamPolicy) super.setKey(key);
          }

          @Override
          public GetIamPolicy setOauthToken(java.lang.String oauthToken) {
            return (GetIamPolicy) super.setOauthToken(oauthToken);
          }

          @Override
          public GetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (GetIamPolicy) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public GetIamPolicy setQuotaUser(java.lang.String quotaUser) {
            return (GetIamPolicy) super.setQuotaUser(quotaUser);
          }

          @Override
          public GetIamPolicy setUploadType(java.lang.String uploadType) {
            return (GetIamPolicy) super.setUploadType(uploadType);
          }

          @Override
          public GetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
            return (GetIamPolicy) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The Cloud Spanner resource for which the policy is being retrieved. The
           * format is `projects//instances/` for instance resources and
           * `projects//instances//databases/` for database resources.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The Cloud Spanner resource for which the policy is being retrieved. The format is
         `projects//instances/` for instance resources and `projects//instances//databases/` for database
         resources.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The Cloud Spanner resource for which the policy is being retrieved. The
           * format is `projects//instances/` for instance resources and
           * `projects//instances//databases/` for database resources.
           */
          public GetIamPolicy setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public GetIamPolicy set(String parameterName, Object value) {
            return (GetIamPolicy) super.set(parameterName, value);
          }
        }
        /**
         * Lists Cloud Spanner databases.
         *
         * Create a request for the method "databases.list".
         *
         * This request holds the parameters needed by the spanner server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent Required. The instance whose databases should be listed.
        Values are of the form
         *        `projects//instances/`.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends SpannerRequest<com.google.api.services.spanner.v1.model.ListDatabasesResponse> {

          private static final String REST_PATH = "v1/{+parent}/databases";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+$");

          /**
           * Lists Cloud Spanner databases.
           *
           * Create a request for the method "databases.list".
           *
           * This request holds the parameters needed by the the spanner server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent Required. The instance whose databases should be listed.
        Values are of the form
         *        `projects//instances/`.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(Spanner.this, "GET", REST_PATH, null, com.google.api.services.spanner.v1.model.ListDatabasesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. The instance whose databases should be listed. Values are of the form
           * `projects//instances/`.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** Required. The instance whose databases should be listed. Values are of the form
         `projects//instances/`.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * Required. The instance whose databases should be listed. Values are of the form
           * `projects//instances/`.
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          /**
           * Number of databases to be returned in the response. If 0 or less, defaults to the
           * server's maximum allowed page size.
           */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** Number of databases to be returned in the response. If 0 or less, defaults to the server's maximum
         allowed page size.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /**
           * Number of databases to be returned in the response. If 0 or less, defaults to the
           * server's maximum allowed page size.
           */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /**
           * If non-empty, `page_token` should contain a next_page_token from a previous
           * ListDatabasesResponse.
           */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** If non-empty, `page_token` should contain a next_page_token from a previous ListDatabasesResponse.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /**
           * If non-empty, `page_token` should contain a next_page_token from a previous
           * ListDatabasesResponse.
           */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Sets the access control policy on a database resource. Replaces any existing policy.
         *
         * Authorization requires `spanner.databases.setIamPolicy` permission on resource.
         *
         * Create a request for the method "databases.setIamPolicy".
         *
         * This request holds the parameters needed by the spanner server.  After setting any optional
         * parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote operation.
         *
         * @param resource REQUIRED: The Cloud Spanner resource for which the policy is being set. The format is
         *        `projects//instances/` for instance resources and `projects//instances//databases/` for
         *        databases resources.
         * @param content the {@link com.google.api.services.spanner.v1.model.SetIamPolicyRequest}
         * @return the request
         */
        public SetIamPolicy setIamPolicy(java.lang.String resource, com.google.api.services.spanner.v1.model.SetIamPolicyRequest content) throws java.io.IOException {
          SetIamPolicy result = new SetIamPolicy(resource, content);
          initialize(result);
          return result;
        }

        public class SetIamPolicy extends SpannerRequest<com.google.api.services.spanner.v1.model.Policy> {

          private static final String REST_PATH = "v1/{+resource}:setIamPolicy";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+$");

          /**
           * Sets the access control policy on a database resource. Replaces any existing policy.
           *
           * Authorization requires `spanner.databases.setIamPolicy` permission on resource.
           *
           * Create a request for the method "databases.setIamPolicy".
           *
           * This request holds the parameters needed by the the spanner server.  After setting any optional
           * parameters, call the {@link SetIamPolicy#execute()} method to invoke the remote operation. <p>
           * {@link
           * SetIamPolicy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param resource REQUIRED: The Cloud Spanner resource for which the policy is being set. The format is
         *        `projects//instances/` for instance resources and `projects//instances//databases/` for
         *        databases resources.
           * @param content the {@link com.google.api.services.spanner.v1.model.SetIamPolicyRequest}
           * @since 1.13
           */
          protected SetIamPolicy(java.lang.String resource, com.google.api.services.spanner.v1.model.SetIamPolicyRequest content) {
            super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.Policy.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public SetIamPolicy set$Xgafv(java.lang.String $Xgafv) {
            return (SetIamPolicy) super.set$Xgafv($Xgafv);
          }

          @Override
          public SetIamPolicy setAccessToken(java.lang.String accessToken) {
            return (SetIamPolicy) super.setAccessToken(accessToken);
          }

          @Override
          public SetIamPolicy setAlt(java.lang.String alt) {
            return (SetIamPolicy) super.setAlt(alt);
          }

          @Override
          public SetIamPolicy setCallback(java.lang.String callback) {
            return (SetIamPolicy) super.setCallback(callback);
          }

          @Override
          public SetIamPolicy setFields(java.lang.String fields) {
            return (SetIamPolicy) super.setFields(fields);
          }

          @Override
          public SetIamPolicy setKey(java.lang.String key) {
            return (SetIamPolicy) super.setKey(key);
          }

          @Override
          public SetIamPolicy setOauthToken(java.lang.String oauthToken) {
            return (SetIamPolicy) super.setOauthToken(oauthToken);
          }

          @Override
          public SetIamPolicy setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (SetIamPolicy) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public SetIamPolicy setQuotaUser(java.lang.String quotaUser) {
            return (SetIamPolicy) super.setQuotaUser(quotaUser);
          }

          @Override
          public SetIamPolicy setUploadType(java.lang.String uploadType) {
            return (SetIamPolicy) super.setUploadType(uploadType);
          }

          @Override
          public SetIamPolicy setUploadProtocol(java.lang.String uploadProtocol) {
            return (SetIamPolicy) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The Cloud Spanner resource for which the policy is being set. The format is
           * `projects//instances/` for instance resources and `projects//instances//databases/` for
           * databases resources.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The Cloud Spanner resource for which the policy is being set. The format is
         `projects//instances/` for instance resources and `projects//instances//databases/` for databases
         resources.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The Cloud Spanner resource for which the policy is being set. The format is
           * `projects//instances/` for instance resources and `projects//instances//databases/` for
           * databases resources.
           */
          public SetIamPolicy setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public SetIamPolicy set(String parameterName, Object value) {
            return (SetIamPolicy) super.set(parameterName, value);
          }
        }
        /**
         * Returns permissions that the caller has on the specified database resource.
         *
         * Attempting this RPC on a non-existent Cloud Spanner database will result in a NOT_FOUND error if
         * the user has `spanner.databases.list` permission on the containing Cloud Spanner instance.
         * Otherwise returns an empty set of permissions.
         *
         * Create a request for the method "databases.testIamPermissions".
         *
         * This request holds the parameters needed by the spanner server.  After setting any optional
         * parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote operation.
         *
         * @param resource REQUIRED: The Cloud Spanner resource for which permissions are being tested. The format is
         *        `projects//instances/` for instance resources and `projects//instances//databases/` for
         *        database resources.
         * @param content the {@link com.google.api.services.spanner.v1.model.TestIamPermissionsRequest}
         * @return the request
         */
        public TestIamPermissions testIamPermissions(java.lang.String resource, com.google.api.services.spanner.v1.model.TestIamPermissionsRequest content) throws java.io.IOException {
          TestIamPermissions result = new TestIamPermissions(resource, content);
          initialize(result);
          return result;
        }

        public class TestIamPermissions extends SpannerRequest<com.google.api.services.spanner.v1.model.TestIamPermissionsResponse> {

          private static final String REST_PATH = "v1/{+resource}:testIamPermissions";

          private final java.util.regex.Pattern RESOURCE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+$");

          /**
           * Returns permissions that the caller has on the specified database resource.
           *
           * Attempting this RPC on a non-existent Cloud Spanner database will result in a NOT_FOUND error
           * if the user has `spanner.databases.list` permission on the containing Cloud Spanner instance.
           * Otherwise returns an empty set of permissions.
           *
           * Create a request for the method "databases.testIamPermissions".
           *
           * This request holds the parameters needed by the the spanner server.  After setting any optional
           * parameters, call the {@link TestIamPermissions#execute()} method to invoke the remote
           * operation. <p> {@link TestIamPermissions#initialize(com.google.api.client.googleapis.services.A
           * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
           * invoking the constructor. </p>
           *
           * @param resource REQUIRED: The Cloud Spanner resource for which permissions are being tested. The format is
         *        `projects//instances/` for instance resources and `projects//instances//databases/` for
         *        database resources.
           * @param content the {@link com.google.api.services.spanner.v1.model.TestIamPermissionsRequest}
           * @since 1.13
           */
          protected TestIamPermissions(java.lang.String resource, com.google.api.services.spanner.v1.model.TestIamPermissionsRequest content) {
            super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.TestIamPermissionsResponse.class);
            this.resource = com.google.api.client.util.Preconditions.checkNotNull(resource, "Required parameter resource must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public TestIamPermissions set$Xgafv(java.lang.String $Xgafv) {
            return (TestIamPermissions) super.set$Xgafv($Xgafv);
          }

          @Override
          public TestIamPermissions setAccessToken(java.lang.String accessToken) {
            return (TestIamPermissions) super.setAccessToken(accessToken);
          }

          @Override
          public TestIamPermissions setAlt(java.lang.String alt) {
            return (TestIamPermissions) super.setAlt(alt);
          }

          @Override
          public TestIamPermissions setCallback(java.lang.String callback) {
            return (TestIamPermissions) super.setCallback(callback);
          }

          @Override
          public TestIamPermissions setFields(java.lang.String fields) {
            return (TestIamPermissions) super.setFields(fields);
          }

          @Override
          public TestIamPermissions setKey(java.lang.String key) {
            return (TestIamPermissions) super.setKey(key);
          }

          @Override
          public TestIamPermissions setOauthToken(java.lang.String oauthToken) {
            return (TestIamPermissions) super.setOauthToken(oauthToken);
          }

          @Override
          public TestIamPermissions setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (TestIamPermissions) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public TestIamPermissions setQuotaUser(java.lang.String quotaUser) {
            return (TestIamPermissions) super.setQuotaUser(quotaUser);
          }

          @Override
          public TestIamPermissions setUploadType(java.lang.String uploadType) {
            return (TestIamPermissions) super.setUploadType(uploadType);
          }

          @Override
          public TestIamPermissions setUploadProtocol(java.lang.String uploadProtocol) {
            return (TestIamPermissions) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * REQUIRED: The Cloud Spanner resource for which permissions are being tested. The format
           * is `projects//instances/` for instance resources and `projects//instances//databases/`
           * for database resources.
           */
          @com.google.api.client.util.Key
          private java.lang.String resource;

          /** REQUIRED: The Cloud Spanner resource for which permissions are being tested. The format is
         `projects//instances/` for instance resources and `projects//instances//databases/` for database
         resources.
           */
          public java.lang.String getResource() {
            return resource;
          }

          /**
           * REQUIRED: The Cloud Spanner resource for which permissions are being tested. The format
           * is `projects//instances/` for instance resources and `projects//instances//databases/`
           * for database resources.
           */
          public TestIamPermissions setResource(java.lang.String resource) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(RESOURCE_PATTERN.matcher(resource).matches(),
                  "Parameter resource must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
            this.resource = resource;
            return this;
          }

          @Override
          public TestIamPermissions set(String parameterName, Object value) {
            return (TestIamPermissions) super.set(parameterName, value);
          }
        }
        /**
         * Updates the schema of a Cloud Spanner database by creating/altering/dropping tables, columns,
         * indexes, etc. The returned long-running operation will have a name of the format `/operations/`
         * and can be used to track execution of the schema change(s). The metadata field type is
         * UpdateDatabaseDdlMetadata.  The operation has no response.
         *
         * Create a request for the method "databases.updateDdl".
         *
         * This request holds the parameters needed by the spanner server.  After setting any optional
         * parameters, call the {@link UpdateDdl#execute()} method to invoke the remote operation.
         *
         * @param database Required. The database to update.
         * @param content the {@link com.google.api.services.spanner.v1.model.UpdateDatabaseDdlRequest}
         * @return the request
         */
        public UpdateDdl updateDdl(java.lang.String database, com.google.api.services.spanner.v1.model.UpdateDatabaseDdlRequest content) throws java.io.IOException {
          UpdateDdl result = new UpdateDdl(database, content);
          initialize(result);
          return result;
        }

        public class UpdateDdl extends SpannerRequest<com.google.api.services.spanner.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+database}/ddl";

          private final java.util.regex.Pattern DATABASE_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+$");

          /**
           * Updates the schema of a Cloud Spanner database by creating/altering/dropping tables, columns,
           * indexes, etc. The returned long-running operation will have a name of the format `/operations/`
           * and can be used to track execution of the schema change(s). The metadata field type is
           * UpdateDatabaseDdlMetadata.  The operation has no response.
           *
           * Create a request for the method "databases.updateDdl".
           *
           * This request holds the parameters needed by the the spanner server.  After setting any optional
           * parameters, call the {@link UpdateDdl#execute()} method to invoke the remote operation. <p>
           * {@link
           * UpdateDdl#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param database Required. The database to update.
           * @param content the {@link com.google.api.services.spanner.v1.model.UpdateDatabaseDdlRequest}
           * @since 1.13
           */
          protected UpdateDdl(java.lang.String database, com.google.api.services.spanner.v1.model.UpdateDatabaseDdlRequest content) {
            super(Spanner.this, "PATCH", REST_PATH, content, com.google.api.services.spanner.v1.model.Operation.class);
            this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
          }

          @Override
          public UpdateDdl set$Xgafv(java.lang.String $Xgafv) {
            return (UpdateDdl) super.set$Xgafv($Xgafv);
          }

          @Override
          public UpdateDdl setAccessToken(java.lang.String accessToken) {
            return (UpdateDdl) super.setAccessToken(accessToken);
          }

          @Override
          public UpdateDdl setAlt(java.lang.String alt) {
            return (UpdateDdl) super.setAlt(alt);
          }

          @Override
          public UpdateDdl setCallback(java.lang.String callback) {
            return (UpdateDdl) super.setCallback(callback);
          }

          @Override
          public UpdateDdl setFields(java.lang.String fields) {
            return (UpdateDdl) super.setFields(fields);
          }

          @Override
          public UpdateDdl setKey(java.lang.String key) {
            return (UpdateDdl) super.setKey(key);
          }

          @Override
          public UpdateDdl setOauthToken(java.lang.String oauthToken) {
            return (UpdateDdl) super.setOauthToken(oauthToken);
          }

          @Override
          public UpdateDdl setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (UpdateDdl) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public UpdateDdl setQuotaUser(java.lang.String quotaUser) {
            return (UpdateDdl) super.setQuotaUser(quotaUser);
          }

          @Override
          public UpdateDdl setUploadType(java.lang.String uploadType) {
            return (UpdateDdl) super.setUploadType(uploadType);
          }

          @Override
          public UpdateDdl setUploadProtocol(java.lang.String uploadProtocol) {
            return (UpdateDdl) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. The database to update. */
          @com.google.api.client.util.Key
          private java.lang.String database;

          /** Required. The database to update.
           */
          public java.lang.String getDatabase() {
            return database;
          }

          /** Required. The database to update. */
          public UpdateDdl setDatabase(java.lang.String database) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                  "Parameter database must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
            }
            this.database = database;
            return this;
          }

          @Override
          public UpdateDdl set(String parameterName, Object value) {
            return (UpdateDdl) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the Operations collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Spanner spanner = new Spanner(...);}
         *   {@code Spanner.Operations.List request = spanner.operations().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Operations operations() {
          return new Operations();
        }

        /**
         * The "operations" collection of methods.
         */
        public class Operations {

          /**
           * Starts asynchronous cancellation on a long-running operation.  The server makes a best effort to
           * cancel the operation, but success is not guaranteed.  If the server doesn't support this method,
           * it returns `google.rpc.Code.UNIMPLEMENTED`.  Clients can use Operations.GetOperation or other
           * methods to check whether the cancellation succeeded or whether the operation completed despite
           * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
           * operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to
           * `Code.CANCELLED`.
           *
           * Create a request for the method "operations.cancel".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
           *
           * @param name The name of the operation resource to be cancelled.
           * @return the request
           */
          public Cancel cancel(java.lang.String name) throws java.io.IOException {
            Cancel result = new Cancel(name);
            initialize(result);
            return result;
          }

          public class Cancel extends SpannerRequest<com.google.api.services.spanner.v1.model.Empty> {

            private static final String REST_PATH = "v1/{+name}:cancel";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/operations/[^/]+$");

            /**
             * Starts asynchronous cancellation on a long-running operation.  The server makes a best effort
             * to cancel the operation, but success is not guaranteed.  If the server doesn't support this
             * method, it returns `google.rpc.Code.UNIMPLEMENTED`.  Clients can use Operations.GetOperation or
             * other methods to check whether the cancellation succeeded or whether the operation completed
             * despite cancellation. On successful cancellation, the operation is not deleted; instead, it
             * becomes an operation with an Operation.error value with a google.rpc.Status.code of 1,
             * corresponding to `Code.CANCELLED`.
             *
             * Create a request for the method "operations.cancel".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link Cancel#execute()} method to invoke the remote operation. <p> {@link
             * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the operation resource to be cancelled.
             * @since 1.13
             */
            protected Cancel(java.lang.String name) {
              super(Spanner.this, "POST", REST_PATH, null, com.google.api.services.spanner.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/operations/[^/]+$");
              }
            }

            @Override
            public Cancel set$Xgafv(java.lang.String $Xgafv) {
              return (Cancel) super.set$Xgafv($Xgafv);
            }

            @Override
            public Cancel setAccessToken(java.lang.String accessToken) {
              return (Cancel) super.setAccessToken(accessToken);
            }

            @Override
            public Cancel setAlt(java.lang.String alt) {
              return (Cancel) super.setAlt(alt);
            }

            @Override
            public Cancel setCallback(java.lang.String callback) {
              return (Cancel) super.setCallback(callback);
            }

            @Override
            public Cancel setFields(java.lang.String fields) {
              return (Cancel) super.setFields(fields);
            }

            @Override
            public Cancel setKey(java.lang.String key) {
              return (Cancel) super.setKey(key);
            }

            @Override
            public Cancel setOauthToken(java.lang.String oauthToken) {
              return (Cancel) super.setOauthToken(oauthToken);
            }

            @Override
            public Cancel setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Cancel) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Cancel setQuotaUser(java.lang.String quotaUser) {
              return (Cancel) super.setQuotaUser(quotaUser);
            }

            @Override
            public Cancel setUploadType(java.lang.String uploadType) {
              return (Cancel) super.setUploadType(uploadType);
            }

            @Override
            public Cancel setUploadProtocol(java.lang.String uploadProtocol) {
              return (Cancel) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the operation resource to be cancelled. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the operation resource to be cancelled.
             */
            public java.lang.String getName() {
              return name;
            }

            /** The name of the operation resource to be cancelled. */
            public Cancel setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/operations/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Cancel set(String parameterName, Object value) {
              return (Cancel) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a long-running operation. This method indicates that the client is no longer interested
           * in the operation result. It does not cancel the operation. If the server doesn't support this
           * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.delete".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name The name of the operation resource to be deleted.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends SpannerRequest<com.google.api.services.spanner.v1.model.Empty> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/operations/[^/]+$");

            /**
             * Deletes a long-running operation. This method indicates that the client is no longer interested
             * in the operation result. It does not cancel the operation. If the server doesn't support this
             * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
             *
             * Create a request for the method "operations.delete".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the operation resource to be deleted.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(Spanner.this, "DELETE", REST_PATH, null, com.google.api.services.spanner.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/operations/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the operation resource to be deleted. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the operation resource to be deleted.
             */
            public java.lang.String getName() {
              return name;
            }

            /** The name of the operation resource to be deleted. */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/operations/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets the latest state of a long-running operation.  Clients can use this method to poll the
           * operation result at intervals as recommended by the API service.
           *
           * Create a request for the method "operations.get".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name The name of the operation resource.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends SpannerRequest<com.google.api.services.spanner.v1.model.Operation> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/operations/[^/]+$");

            /**
             * Gets the latest state of a long-running operation.  Clients can use this method to poll the
             * operation result at intervals as recommended by the API service.
             *
             * Create a request for the method "operations.get".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the operation resource.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(Spanner.this, "GET", REST_PATH, null, com.google.api.services.spanner.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/operations/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the operation resource. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the operation resource.
             */
            public java.lang.String getName() {
              return name;
            }

            /** The name of the operation resource. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/operations/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists operations that match the specified filter in the request. If the server doesn't support
           * this method, it returns `UNIMPLEMENTED`.
           *
           * NOTE: the `name` binding allows API services to override the binding to use different resource
           * name schemes, such as `users/operations`. To override the binding, API services can add a binding
           * such as `"/v1/{name=users}/operations"` to their service configuration. For backwards
           * compatibility, the default name includes the operations collection id, however overriding users
           * must ensure the name binding is the parent resource, without the operations collection id.
           *
           * Create a request for the method "operations.list".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param name The name of the operation's parent resource.
           * @return the request
           */
          public List list(java.lang.String name) throws java.io.IOException {
            List result = new List(name);
            initialize(result);
            return result;
          }

          public class List extends SpannerRequest<com.google.api.services.spanner.v1.model.ListOperationsResponse> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/operations$");

            /**
             * Lists operations that match the specified filter in the request. If the server doesn't support
             * this method, it returns `UNIMPLEMENTED`.
             *
             * NOTE: the `name` binding allows API services to override the binding to use different resource
             * name schemes, such as `users/operations`. To override the binding, API services can add a
             * binding such as `"/v1/{name=users}/operations"` to their service configuration. For backwards
             * compatibility, the default name includes the operations collection id, however overriding users
             * must ensure the name binding is the parent resource, without the operations collection id.
             *
             * Create a request for the method "operations.list".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the operation's parent resource.
             * @since 1.13
             */
            protected List(java.lang.String name) {
              super(Spanner.this, "GET", REST_PATH, null, com.google.api.services.spanner.v1.model.ListOperationsResponse.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/operations$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the operation's parent resource. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the operation's parent resource.
             */
            public java.lang.String getName() {
              return name;
            }

            /** The name of the operation's parent resource. */
            public List setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/operations$");
              }
              this.name = name;
              return this;
            }

            /** The standard list filter. */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** The standard list filter.
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /** The standard list filter. */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** The standard list page size. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The standard list page size.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The standard list page size. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** The standard list page token. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** The standard list page token.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** The standard list page token. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Sessions collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Spanner spanner = new Spanner(...);}
         *   {@code Spanner.Sessions.List request = spanner.sessions().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Sessions sessions() {
          return new Sessions();
        }

        /**
         * The "sessions" collection of methods.
         */
        public class Sessions {

          /**
           * Begins a new transaction. This step can often be skipped: Read, ExecuteSql and Commit can begin a
           * new transaction as a side-effect.
           *
           * Create a request for the method "sessions.beginTransaction".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link BeginTransaction#execute()} method to invoke the remote operation.
           *
           * @param session Required. The session in which the transaction runs.
           * @param content the {@link com.google.api.services.spanner.v1.model.BeginTransactionRequest}
           * @return the request
           */
          public BeginTransaction beginTransaction(java.lang.String session, com.google.api.services.spanner.v1.model.BeginTransactionRequest content) throws java.io.IOException {
            BeginTransaction result = new BeginTransaction(session, content);
            initialize(result);
            return result;
          }

          public class BeginTransaction extends SpannerRequest<com.google.api.services.spanner.v1.model.Transaction> {

            private static final String REST_PATH = "v1/{+session}:beginTransaction";

            private final java.util.regex.Pattern SESSION_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");

            /**
             * Begins a new transaction. This step can often be skipped: Read, ExecuteSql and Commit can begin
             * a new transaction as a side-effect.
             *
             * Create a request for the method "sessions.beginTransaction".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link BeginTransaction#execute()} method to invoke the remote operation.
             * <p> {@link BeginTransaction#initialize(com.google.api.client.googleapis.services.AbstractGoogle
             * ClientRequest)} must be called to initialize this instance immediately after invoking the
             * constructor. </p>
             *
             * @param session Required. The session in which the transaction runs.
             * @param content the {@link com.google.api.services.spanner.v1.model.BeginTransactionRequest}
             * @since 1.13
             */
            protected BeginTransaction(java.lang.String session, com.google.api.services.spanner.v1.model.BeginTransactionRequest content) {
              super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.Transaction.class);
              this.session = com.google.api.client.util.Preconditions.checkNotNull(session, "Required parameter session must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
            }

            @Override
            public BeginTransaction set$Xgafv(java.lang.String $Xgafv) {
              return (BeginTransaction) super.set$Xgafv($Xgafv);
            }

            @Override
            public BeginTransaction setAccessToken(java.lang.String accessToken) {
              return (BeginTransaction) super.setAccessToken(accessToken);
            }

            @Override
            public BeginTransaction setAlt(java.lang.String alt) {
              return (BeginTransaction) super.setAlt(alt);
            }

            @Override
            public BeginTransaction setCallback(java.lang.String callback) {
              return (BeginTransaction) super.setCallback(callback);
            }

            @Override
            public BeginTransaction setFields(java.lang.String fields) {
              return (BeginTransaction) super.setFields(fields);
            }

            @Override
            public BeginTransaction setKey(java.lang.String key) {
              return (BeginTransaction) super.setKey(key);
            }

            @Override
            public BeginTransaction setOauthToken(java.lang.String oauthToken) {
              return (BeginTransaction) super.setOauthToken(oauthToken);
            }

            @Override
            public BeginTransaction setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (BeginTransaction) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public BeginTransaction setQuotaUser(java.lang.String quotaUser) {
              return (BeginTransaction) super.setQuotaUser(quotaUser);
            }

            @Override
            public BeginTransaction setUploadType(java.lang.String uploadType) {
              return (BeginTransaction) super.setUploadType(uploadType);
            }

            @Override
            public BeginTransaction setUploadProtocol(java.lang.String uploadProtocol) {
              return (BeginTransaction) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The session in which the transaction runs. */
            @com.google.api.client.util.Key
            private java.lang.String session;

            /** Required. The session in which the transaction runs.
             */
            public java.lang.String getSession() {
              return session;
            }

            /** Required. The session in which the transaction runs. */
            public BeginTransaction setSession(java.lang.String session) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
              this.session = session;
              return this;
            }

            @Override
            public BeginTransaction set(String parameterName, Object value) {
              return (BeginTransaction) super.set(parameterName, value);
            }
          }
          /**
           * Commits a transaction. The request includes the mutations to be applied to rows in the database.
           *
           * `Commit` might return an `ABORTED` error. This can occur at any time; commonly, the cause is
           * conflicts with concurrent transactions. However, it can also happen for a variety of other
           * reasons. If `Commit` returns `ABORTED`, the caller should re-attempt the transaction from the
           * beginning, re-using the same session.
           *
           * Create a request for the method "sessions.commit".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link Commit#execute()} method to invoke the remote operation.
           *
           * @param session Required. The session in which the transaction to be committed is running.
           * @param content the {@link com.google.api.services.spanner.v1.model.CommitRequest}
           * @return the request
           */
          public Commit commit(java.lang.String session, com.google.api.services.spanner.v1.model.CommitRequest content) throws java.io.IOException {
            Commit result = new Commit(session, content);
            initialize(result);
            return result;
          }

          public class Commit extends SpannerRequest<com.google.api.services.spanner.v1.model.CommitResponse> {

            private static final String REST_PATH = "v1/{+session}:commit";

            private final java.util.regex.Pattern SESSION_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");

            /**
             * Commits a transaction. The request includes the mutations to be applied to rows in the
             * database.
             *
             * `Commit` might return an `ABORTED` error. This can occur at any time; commonly, the cause is
             * conflicts with concurrent transactions. However, it can also happen for a variety of other
             * reasons. If `Commit` returns `ABORTED`, the caller should re-attempt the transaction from the
             * beginning, re-using the same session.
             *
             * Create a request for the method "sessions.commit".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link Commit#execute()} method to invoke the remote operation. <p> {@link
             * Commit#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param session Required. The session in which the transaction to be committed is running.
             * @param content the {@link com.google.api.services.spanner.v1.model.CommitRequest}
             * @since 1.13
             */
            protected Commit(java.lang.String session, com.google.api.services.spanner.v1.model.CommitRequest content) {
              super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.CommitResponse.class);
              this.session = com.google.api.client.util.Preconditions.checkNotNull(session, "Required parameter session must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
            }

            @Override
            public Commit set$Xgafv(java.lang.String $Xgafv) {
              return (Commit) super.set$Xgafv($Xgafv);
            }

            @Override
            public Commit setAccessToken(java.lang.String accessToken) {
              return (Commit) super.setAccessToken(accessToken);
            }

            @Override
            public Commit setAlt(java.lang.String alt) {
              return (Commit) super.setAlt(alt);
            }

            @Override
            public Commit setCallback(java.lang.String callback) {
              return (Commit) super.setCallback(callback);
            }

            @Override
            public Commit setFields(java.lang.String fields) {
              return (Commit) super.setFields(fields);
            }

            @Override
            public Commit setKey(java.lang.String key) {
              return (Commit) super.setKey(key);
            }

            @Override
            public Commit setOauthToken(java.lang.String oauthToken) {
              return (Commit) super.setOauthToken(oauthToken);
            }

            @Override
            public Commit setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Commit) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Commit setQuotaUser(java.lang.String quotaUser) {
              return (Commit) super.setQuotaUser(quotaUser);
            }

            @Override
            public Commit setUploadType(java.lang.String uploadType) {
              return (Commit) super.setUploadType(uploadType);
            }

            @Override
            public Commit setUploadProtocol(java.lang.String uploadProtocol) {
              return (Commit) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The session in which the transaction to be committed is running. */
            @com.google.api.client.util.Key
            private java.lang.String session;

            /** Required. The session in which the transaction to be committed is running.
             */
            public java.lang.String getSession() {
              return session;
            }

            /** Required. The session in which the transaction to be committed is running. */
            public Commit setSession(java.lang.String session) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
              this.session = session;
              return this;
            }

            @Override
            public Commit set(String parameterName, Object value) {
              return (Commit) super.set(parameterName, value);
            }
          }
          /**
           * Creates a new session. A session can be used to perform transactions that read and/or modify data
           * in a Cloud Spanner database. Sessions are meant to be reused for many consecutive transactions.
           *
           * Sessions can only execute one transaction at a time. To execute multiple concurrent read-write
           * /write-only transactions, create multiple sessions. Note that standalone reads and queries use a
           * transaction internally, and count toward the one transaction limit.
           *
           * Cloud Spanner limits the number of sessions that can exist at any given time; thus, it is a good
           * idea to delete idle and/or unneeded sessions. Aside from explicit deletes, Cloud Spanner can
           * delete sessions for which no operations are sent for more than an hour. If a session is deleted,
           * requests to it return `NOT_FOUND`.
           *
           * Idle sessions can be kept alive by sending a trivial SQL query periodically, e.g., `"SELECT 1"`.
           *
           * Create a request for the method "sessions.create".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param database Required. The database in which the new session is created.
           * @param content the {@link com.google.api.services.spanner.v1.model.CreateSessionRequest}
           * @return the request
           */
          public Create create(java.lang.String database, com.google.api.services.spanner.v1.model.CreateSessionRequest content) throws java.io.IOException {
            Create result = new Create(database, content);
            initialize(result);
            return result;
          }

          public class Create extends SpannerRequest<com.google.api.services.spanner.v1.model.Session> {

            private static final String REST_PATH = "v1/{+database}/sessions";

            private final java.util.regex.Pattern DATABASE_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+$");

            /**
             * Creates a new session. A session can be used to perform transactions that read and/or modify
             * data in a Cloud Spanner database. Sessions are meant to be reused for many consecutive
             * transactions.
             *
             * Sessions can only execute one transaction at a time. To execute multiple concurrent read-write
             * /write-only transactions, create multiple sessions. Note that standalone reads and queries use
             * a transaction internally, and count toward the one transaction limit.
             *
             * Cloud Spanner limits the number of sessions that can exist at any given time; thus, it is a
             * good idea to delete idle and/or unneeded sessions. Aside from explicit deletes, Cloud Spanner
             * can delete sessions for which no operations are sent for more than an hour. If a session is
             * deleted, requests to it return `NOT_FOUND`.
             *
             * Idle sessions can be kept alive by sending a trivial SQL query periodically, e.g., `"SELECT
             * 1"`.
             *
             * Create a request for the method "sessions.create".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param database Required. The database in which the new session is created.
             * @param content the {@link com.google.api.services.spanner.v1.model.CreateSessionRequest}
             * @since 1.13
             */
            protected Create(java.lang.String database, com.google.api.services.spanner.v1.model.CreateSessionRequest content) {
              super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.Session.class);
              this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                    "Parameter database must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The database in which the new session is created. */
            @com.google.api.client.util.Key
            private java.lang.String database;

            /** Required. The database in which the new session is created.
             */
            public java.lang.String getDatabase() {
              return database;
            }

            /** Required. The database in which the new session is created. */
            public Create setDatabase(java.lang.String database) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                    "Parameter database must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
              }
              this.database = database;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Ends a session, releasing server resources associated with it.
           *
           * Create a request for the method "sessions.delete".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the session to delete.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends SpannerRequest<com.google.api.services.spanner.v1.model.Empty> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");

            /**
             * Ends a session, releasing server resources associated with it.
             *
             * Create a request for the method "sessions.delete".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the session to delete.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(Spanner.this, "DELETE", REST_PATH, null, com.google.api.services.spanner.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the session to delete. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the session to delete.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the session to delete. */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Executes an SQL statement, returning all results in a single reply. This method cannot be used to
           * return a result set larger than 10 MiB; if the query yields more data than that, the query fails
           * with a `FAILED_PRECONDITION` error.
           *
           * Operations inside read-write transactions might return `ABORTED`. If this occurs, the application
           * should restart the transaction from the beginning. See Transaction for more details.
           *
           * Larger result sets can be fetched in streaming fashion by calling ExecuteStreamingSql instead.
           *
           * Create a request for the method "sessions.executeSql".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link ExecuteSql#execute()} method to invoke the remote operation.
           *
           * @param session Required. The session in which the SQL query should be performed.
           * @param content the {@link com.google.api.services.spanner.v1.model.ExecuteSqlRequest}
           * @return the request
           */
          public ExecuteSql executeSql(java.lang.String session, com.google.api.services.spanner.v1.model.ExecuteSqlRequest content) throws java.io.IOException {
            ExecuteSql result = new ExecuteSql(session, content);
            initialize(result);
            return result;
          }

          public class ExecuteSql extends SpannerRequest<com.google.api.services.spanner.v1.model.ResultSet> {

            private static final String REST_PATH = "v1/{+session}:executeSql";

            private final java.util.regex.Pattern SESSION_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");

            /**
             * Executes an SQL statement, returning all results in a single reply. This method cannot be used
             * to return a result set larger than 10 MiB; if the query yields more data than that, the query
             * fails with a `FAILED_PRECONDITION` error.
             *
             * Operations inside read-write transactions might return `ABORTED`. If this occurs, the
             * application should restart the transaction from the beginning. See Transaction for more
             * details.
             *
             * Larger result sets can be fetched in streaming fashion by calling ExecuteStreamingSql instead.
             *
             * Create a request for the method "sessions.executeSql".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link ExecuteSql#execute()} method to invoke the remote operation. <p>
             * {@link
             * ExecuteSql#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param session Required. The session in which the SQL query should be performed.
             * @param content the {@link com.google.api.services.spanner.v1.model.ExecuteSqlRequest}
             * @since 1.13
             */
            protected ExecuteSql(java.lang.String session, com.google.api.services.spanner.v1.model.ExecuteSqlRequest content) {
              super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.ResultSet.class);
              this.session = com.google.api.client.util.Preconditions.checkNotNull(session, "Required parameter session must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
            }

            @Override
            public ExecuteSql set$Xgafv(java.lang.String $Xgafv) {
              return (ExecuteSql) super.set$Xgafv($Xgafv);
            }

            @Override
            public ExecuteSql setAccessToken(java.lang.String accessToken) {
              return (ExecuteSql) super.setAccessToken(accessToken);
            }

            @Override
            public ExecuteSql setAlt(java.lang.String alt) {
              return (ExecuteSql) super.setAlt(alt);
            }

            @Override
            public ExecuteSql setCallback(java.lang.String callback) {
              return (ExecuteSql) super.setCallback(callback);
            }

            @Override
            public ExecuteSql setFields(java.lang.String fields) {
              return (ExecuteSql) super.setFields(fields);
            }

            @Override
            public ExecuteSql setKey(java.lang.String key) {
              return (ExecuteSql) super.setKey(key);
            }

            @Override
            public ExecuteSql setOauthToken(java.lang.String oauthToken) {
              return (ExecuteSql) super.setOauthToken(oauthToken);
            }

            @Override
            public ExecuteSql setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ExecuteSql) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ExecuteSql setQuotaUser(java.lang.String quotaUser) {
              return (ExecuteSql) super.setQuotaUser(quotaUser);
            }

            @Override
            public ExecuteSql setUploadType(java.lang.String uploadType) {
              return (ExecuteSql) super.setUploadType(uploadType);
            }

            @Override
            public ExecuteSql setUploadProtocol(java.lang.String uploadProtocol) {
              return (ExecuteSql) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The session in which the SQL query should be performed. */
            @com.google.api.client.util.Key
            private java.lang.String session;

            /** Required. The session in which the SQL query should be performed.
             */
            public java.lang.String getSession() {
              return session;
            }

            /** Required. The session in which the SQL query should be performed. */
            public ExecuteSql setSession(java.lang.String session) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
              this.session = session;
              return this;
            }

            @Override
            public ExecuteSql set(String parameterName, Object value) {
              return (ExecuteSql) super.set(parameterName, value);
            }
          }
          /**
           * Like ExecuteSql, except returns the result set as a stream. Unlike ExecuteSql, there is no limit
           * on the size of the returned result set. However, no individual row in the result set can exceed
           * 100 MiB, and no column value can exceed 10 MiB.
           *
           * Create a request for the method "sessions.executeStreamingSql".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link ExecuteStreamingSql#execute()} method to invoke the remote operation.
           *
           * @param session Required. The session in which the SQL query should be performed.
           * @param content the {@link com.google.api.services.spanner.v1.model.ExecuteSqlRequest}
           * @return the request
           */
          public ExecuteStreamingSql executeStreamingSql(java.lang.String session, com.google.api.services.spanner.v1.model.ExecuteSqlRequest content) throws java.io.IOException {
            ExecuteStreamingSql result = new ExecuteStreamingSql(session, content);
            initialize(result);
            return result;
          }

          public class ExecuteStreamingSql extends SpannerRequest<com.google.api.services.spanner.v1.model.PartialResultSet> {

            private static final String REST_PATH = "v1/{+session}:executeStreamingSql";

            private final java.util.regex.Pattern SESSION_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");

            /**
             * Like ExecuteSql, except returns the result set as a stream. Unlike ExecuteSql, there is no
             * limit on the size of the returned result set. However, no individual row in the result set can
             * exceed 100 MiB, and no column value can exceed 10 MiB.
             *
             * Create a request for the method "sessions.executeStreamingSql".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link ExecuteStreamingSql#execute()} method to invoke the remote
             * operation. <p> {@link ExecuteStreamingSql#initialize(com.google.api.client.googleapis.services.
             * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
             * invoking the constructor. </p>
             *
             * @param session Required. The session in which the SQL query should be performed.
             * @param content the {@link com.google.api.services.spanner.v1.model.ExecuteSqlRequest}
             * @since 1.13
             */
            protected ExecuteStreamingSql(java.lang.String session, com.google.api.services.spanner.v1.model.ExecuteSqlRequest content) {
              super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.PartialResultSet.class);
              this.session = com.google.api.client.util.Preconditions.checkNotNull(session, "Required parameter session must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
            }

            @Override
            public ExecuteStreamingSql set$Xgafv(java.lang.String $Xgafv) {
              return (ExecuteStreamingSql) super.set$Xgafv($Xgafv);
            }

            @Override
            public ExecuteStreamingSql setAccessToken(java.lang.String accessToken) {
              return (ExecuteStreamingSql) super.setAccessToken(accessToken);
            }

            @Override
            public ExecuteStreamingSql setAlt(java.lang.String alt) {
              return (ExecuteStreamingSql) super.setAlt(alt);
            }

            @Override
            public ExecuteStreamingSql setCallback(java.lang.String callback) {
              return (ExecuteStreamingSql) super.setCallback(callback);
            }

            @Override
            public ExecuteStreamingSql setFields(java.lang.String fields) {
              return (ExecuteStreamingSql) super.setFields(fields);
            }

            @Override
            public ExecuteStreamingSql setKey(java.lang.String key) {
              return (ExecuteStreamingSql) super.setKey(key);
            }

            @Override
            public ExecuteStreamingSql setOauthToken(java.lang.String oauthToken) {
              return (ExecuteStreamingSql) super.setOauthToken(oauthToken);
            }

            @Override
            public ExecuteStreamingSql setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ExecuteStreamingSql) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ExecuteStreamingSql setQuotaUser(java.lang.String quotaUser) {
              return (ExecuteStreamingSql) super.setQuotaUser(quotaUser);
            }

            @Override
            public ExecuteStreamingSql setUploadType(java.lang.String uploadType) {
              return (ExecuteStreamingSql) super.setUploadType(uploadType);
            }

            @Override
            public ExecuteStreamingSql setUploadProtocol(java.lang.String uploadProtocol) {
              return (ExecuteStreamingSql) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The session in which the SQL query should be performed. */
            @com.google.api.client.util.Key
            private java.lang.String session;

            /** Required. The session in which the SQL query should be performed.
             */
            public java.lang.String getSession() {
              return session;
            }

            /** Required. The session in which the SQL query should be performed. */
            public ExecuteStreamingSql setSession(java.lang.String session) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
              this.session = session;
              return this;
            }

            @Override
            public ExecuteStreamingSql set(String parameterName, Object value) {
              return (ExecuteStreamingSql) super.set(parameterName, value);
            }
          }
          /**
           * Gets a session. Returns `NOT_FOUND` if the session does not exist. This is mainly useful for
           * determining whether a session is still alive.
           *
           * Create a request for the method "sessions.get".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the session to retrieve.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends SpannerRequest<com.google.api.services.spanner.v1.model.Session> {

            private static final String REST_PATH = "v1/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");

            /**
             * Gets a session. Returns `NOT_FOUND` if the session does not exist. This is mainly useful for
             * determining whether a session is still alive.
             *
             * Create a request for the method "sessions.get".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the session to retrieve.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(Spanner.this, "GET", REST_PATH, null, com.google.api.services.spanner.v1.model.Session.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the session to retrieve. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the session to retrieve.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the session to retrieve. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists all sessions in a given database.
           *
           * Create a request for the method "sessions.list".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param database Required. The database in which to list sessions.
           * @return the request
           */
          public List list(java.lang.String database) throws java.io.IOException {
            List result = new List(database);
            initialize(result);
            return result;
          }

          public class List extends SpannerRequest<com.google.api.services.spanner.v1.model.ListSessionsResponse> {

            private static final String REST_PATH = "v1/{+database}/sessions";

            private final java.util.regex.Pattern DATABASE_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+$");

            /**
             * Lists all sessions in a given database.
             *
             * Create a request for the method "sessions.list".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param database Required. The database in which to list sessions.
             * @since 1.13
             */
            protected List(java.lang.String database) {
              super(Spanner.this, "GET", REST_PATH, null, com.google.api.services.spanner.v1.model.ListSessionsResponse.class);
              this.database = com.google.api.client.util.Preconditions.checkNotNull(database, "Required parameter database must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                    "Parameter database must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The database in which to list sessions. */
            @com.google.api.client.util.Key
            private java.lang.String database;

            /** Required. The database in which to list sessions.
             */
            public java.lang.String getDatabase() {
              return database;
            }

            /** Required. The database in which to list sessions. */
            public List setDatabase(java.lang.String database) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(DATABASE_PATTERN.matcher(database).matches(),
                    "Parameter database must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+$");
              }
              this.database = database;
              return this;
            }

            /**
             * An expression for filtering the results of the request. Filter rules are case
             * insensitive. The fields eligible for filtering are:
             *
             * * `labels.key` where key is the name of a label
             *
             * Some examples of using filters are:
             *
             * * `labels.env:*` --> The session has the label "env". * `labels.env:dev` --> The
             * session has the label "env" and the value of the label contains the string "dev".
             */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** An expression for filtering the results of the request. Filter rules are case insensitive. The
           fields eligible for filtering are:

           * `labels.key` where key is the name of a label

           Some examples of using filters are:

           * `labels.env:*` --> The session has the label "env". * `labels.env:dev` --> The session has the
           label "env" and the value of the label contains the string "dev".
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /**
             * An expression for filtering the results of the request. Filter rules are case
             * insensitive. The fields eligible for filtering are:
             *
             * * `labels.key` where key is the name of a label
             *
             * Some examples of using filters are:
             *
             * * `labels.env:*` --> The session has the label "env". * `labels.env:dev` --> The
             * session has the label "env" and the value of the label contains the string "dev".
             */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /**
             * Number of sessions to be returned in the response. If 0 or less, defaults to the
             * server's maximum allowed page size.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Number of sessions to be returned in the response. If 0 or less, defaults to the server's maximum
           allowed page size.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * Number of sessions to be returned in the response. If 0 or less, defaults to the
             * server's maximum allowed page size.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * If non-empty, `page_token` should contain a next_page_token from a previous
             * ListSessionsResponse.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** If non-empty, `page_token` should contain a next_page_token from a previous ListSessionsResponse.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * If non-empty, `page_token` should contain a next_page_token from a previous
             * ListSessionsResponse.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Creates a set of partition tokens that can be used to execute a query operation in parallel.
           * Each of the returned partition tokens can be used by ExecuteStreamingSql to specify a subset of
           * the query result to read.  The same session and read-only transaction must be used by the
           * PartitionQueryRequest used to create the partition tokens and the ExecuteSqlRequests that use the
           * partition tokens.
           *
           * Partition tokens become invalid when the session used to create them is deleted, is idle for too
           * long, begins a new transaction, or becomes too old.  When any of these happen, it is not possible
           * to resume the query, and the whole operation must be restarted from the beginning.
           *
           * Create a request for the method "sessions.partitionQuery".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link PartitionQuery#execute()} method to invoke the remote operation.
           *
           * @param session Required. The session used to create the partitions.
           * @param content the {@link com.google.api.services.spanner.v1.model.PartitionQueryRequest}
           * @return the request
           */
          public PartitionQuery partitionQuery(java.lang.String session, com.google.api.services.spanner.v1.model.PartitionQueryRequest content) throws java.io.IOException {
            PartitionQuery result = new PartitionQuery(session, content);
            initialize(result);
            return result;
          }

          public class PartitionQuery extends SpannerRequest<com.google.api.services.spanner.v1.model.PartitionResponse> {

            private static final String REST_PATH = "v1/{+session}:partitionQuery";

            private final java.util.regex.Pattern SESSION_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");

            /**
             * Creates a set of partition tokens that can be used to execute a query operation in parallel.
             * Each of the returned partition tokens can be used by ExecuteStreamingSql to specify a subset of
             * the query result to read.  The same session and read-only transaction must be used by the
             * PartitionQueryRequest used to create the partition tokens and the ExecuteSqlRequests that use
             * the partition tokens.
             *
             * Partition tokens become invalid when the session used to create them is deleted, is idle for
             * too long, begins a new transaction, or becomes too old.  When any of these happen, it is not
             * possible to resume the query, and the whole operation must be restarted from the beginning.
             *
             * Create a request for the method "sessions.partitionQuery".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link PartitionQuery#execute()} method to invoke the remote operation.
             * <p> {@link PartitionQuery#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
             * ientRequest)} must be called to initialize this instance immediately after invoking the
             * constructor. </p>
             *
             * @param session Required. The session used to create the partitions.
             * @param content the {@link com.google.api.services.spanner.v1.model.PartitionQueryRequest}
             * @since 1.13
             */
            protected PartitionQuery(java.lang.String session, com.google.api.services.spanner.v1.model.PartitionQueryRequest content) {
              super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.PartitionResponse.class);
              this.session = com.google.api.client.util.Preconditions.checkNotNull(session, "Required parameter session must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
            }

            @Override
            public PartitionQuery set$Xgafv(java.lang.String $Xgafv) {
              return (PartitionQuery) super.set$Xgafv($Xgafv);
            }

            @Override
            public PartitionQuery setAccessToken(java.lang.String accessToken) {
              return (PartitionQuery) super.setAccessToken(accessToken);
            }

            @Override
            public PartitionQuery setAlt(java.lang.String alt) {
              return (PartitionQuery) super.setAlt(alt);
            }

            @Override
            public PartitionQuery setCallback(java.lang.String callback) {
              return (PartitionQuery) super.setCallback(callback);
            }

            @Override
            public PartitionQuery setFields(java.lang.String fields) {
              return (PartitionQuery) super.setFields(fields);
            }

            @Override
            public PartitionQuery setKey(java.lang.String key) {
              return (PartitionQuery) super.setKey(key);
            }

            @Override
            public PartitionQuery setOauthToken(java.lang.String oauthToken) {
              return (PartitionQuery) super.setOauthToken(oauthToken);
            }

            @Override
            public PartitionQuery setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (PartitionQuery) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public PartitionQuery setQuotaUser(java.lang.String quotaUser) {
              return (PartitionQuery) super.setQuotaUser(quotaUser);
            }

            @Override
            public PartitionQuery setUploadType(java.lang.String uploadType) {
              return (PartitionQuery) super.setUploadType(uploadType);
            }

            @Override
            public PartitionQuery setUploadProtocol(java.lang.String uploadProtocol) {
              return (PartitionQuery) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The session used to create the partitions. */
            @com.google.api.client.util.Key
            private java.lang.String session;

            /** Required. The session used to create the partitions.
             */
            public java.lang.String getSession() {
              return session;
            }

            /** Required. The session used to create the partitions. */
            public PartitionQuery setSession(java.lang.String session) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
              this.session = session;
              return this;
            }

            @Override
            public PartitionQuery set(String parameterName, Object value) {
              return (PartitionQuery) super.set(parameterName, value);
            }
          }
          /**
           * Creates a set of partition tokens that can be used to execute a read operation in parallel.  Each
           * of the returned partition tokens can be used by StreamingRead to specify a subset of the read
           * result to read.  The same session and read-only transaction must be used by the
           * PartitionReadRequest used to create the partition tokens and the ReadRequests that use the
           * partition tokens.  There are no ordering guarantees on rows returned among the returned partition
           * tokens, or even within each individual StreamingRead call issued with a partition_token.
           *
           * Partition tokens become invalid when the session used to create them is deleted, is idle for too
           * long, begins a new transaction, or becomes too old.  When any of these happen, it is not possible
           * to resume the read, and the whole operation must be restarted from the beginning.
           *
           * Create a request for the method "sessions.partitionRead".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link PartitionRead#execute()} method to invoke the remote operation.
           *
           * @param session Required. The session used to create the partitions.
           * @param content the {@link com.google.api.services.spanner.v1.model.PartitionReadRequest}
           * @return the request
           */
          public PartitionRead partitionRead(java.lang.String session, com.google.api.services.spanner.v1.model.PartitionReadRequest content) throws java.io.IOException {
            PartitionRead result = new PartitionRead(session, content);
            initialize(result);
            return result;
          }

          public class PartitionRead extends SpannerRequest<com.google.api.services.spanner.v1.model.PartitionResponse> {

            private static final String REST_PATH = "v1/{+session}:partitionRead";

            private final java.util.regex.Pattern SESSION_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");

            /**
             * Creates a set of partition tokens that can be used to execute a read operation in parallel.
             * Each of the returned partition tokens can be used by StreamingRead to specify a subset of the
             * read result to read.  The same session and read-only transaction must be used by the
             * PartitionReadRequest used to create the partition tokens and the ReadRequests that use the
             * partition tokens.  There are no ordering guarantees on rows returned among the returned
             * partition tokens, or even within each individual StreamingRead call issued with a
             * partition_token.
             *
             * Partition tokens become invalid when the session used to create them is deleted, is idle for
             * too long, begins a new transaction, or becomes too old.  When any of these happen, it is not
             * possible to resume the read, and the whole operation must be restarted from the beginning.
             *
             * Create a request for the method "sessions.partitionRead".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link PartitionRead#execute()} method to invoke the remote operation. <p>
             * {@link PartitionRead#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
             * equest)} must be called to initialize this instance immediately after invoking the constructor.
             * </p>
             *
             * @param session Required. The session used to create the partitions.
             * @param content the {@link com.google.api.services.spanner.v1.model.PartitionReadRequest}
             * @since 1.13
             */
            protected PartitionRead(java.lang.String session, com.google.api.services.spanner.v1.model.PartitionReadRequest content) {
              super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.PartitionResponse.class);
              this.session = com.google.api.client.util.Preconditions.checkNotNull(session, "Required parameter session must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
            }

            @Override
            public PartitionRead set$Xgafv(java.lang.String $Xgafv) {
              return (PartitionRead) super.set$Xgafv($Xgafv);
            }

            @Override
            public PartitionRead setAccessToken(java.lang.String accessToken) {
              return (PartitionRead) super.setAccessToken(accessToken);
            }

            @Override
            public PartitionRead setAlt(java.lang.String alt) {
              return (PartitionRead) super.setAlt(alt);
            }

            @Override
            public PartitionRead setCallback(java.lang.String callback) {
              return (PartitionRead) super.setCallback(callback);
            }

            @Override
            public PartitionRead setFields(java.lang.String fields) {
              return (PartitionRead) super.setFields(fields);
            }

            @Override
            public PartitionRead setKey(java.lang.String key) {
              return (PartitionRead) super.setKey(key);
            }

            @Override
            public PartitionRead setOauthToken(java.lang.String oauthToken) {
              return (PartitionRead) super.setOauthToken(oauthToken);
            }

            @Override
            public PartitionRead setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (PartitionRead) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public PartitionRead setQuotaUser(java.lang.String quotaUser) {
              return (PartitionRead) super.setQuotaUser(quotaUser);
            }

            @Override
            public PartitionRead setUploadType(java.lang.String uploadType) {
              return (PartitionRead) super.setUploadType(uploadType);
            }

            @Override
            public PartitionRead setUploadProtocol(java.lang.String uploadProtocol) {
              return (PartitionRead) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The session used to create the partitions. */
            @com.google.api.client.util.Key
            private java.lang.String session;

            /** Required. The session used to create the partitions.
             */
            public java.lang.String getSession() {
              return session;
            }

            /** Required. The session used to create the partitions. */
            public PartitionRead setSession(java.lang.String session) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
              this.session = session;
              return this;
            }

            @Override
            public PartitionRead set(String parameterName, Object value) {
              return (PartitionRead) super.set(parameterName, value);
            }
          }
          /**
           * Reads rows from the database using key lookups and scans, as a simple key/value style alternative
           * to ExecuteSql.  This method cannot be used to return a result set larger than 10 MiB; if the read
           * matches more data than that, the read fails with a `FAILED_PRECONDITION` error.
           *
           * Reads inside read-write transactions might return `ABORTED`. If this occurs, the application
           * should restart the transaction from the beginning. See Transaction for more details.
           *
           * Larger result sets can be yielded in streaming fashion by calling StreamingRead instead.
           *
           * Create a request for the method "sessions.read".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link Read#execute()} method to invoke the remote operation.
           *
           * @param session Required. The session in which the read should be performed.
           * @param content the {@link com.google.api.services.spanner.v1.model.ReadRequest}
           * @return the request
           */
          public Read read(java.lang.String session, com.google.api.services.spanner.v1.model.ReadRequest content) throws java.io.IOException {
            Read result = new Read(session, content);
            initialize(result);
            return result;
          }

          public class Read extends SpannerRequest<com.google.api.services.spanner.v1.model.ResultSet> {

            private static final String REST_PATH = "v1/{+session}:read";

            private final java.util.regex.Pattern SESSION_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");

            /**
             * Reads rows from the database using key lookups and scans, as a simple key/value style
             * alternative to ExecuteSql.  This method cannot be used to return a result set larger than 10
             * MiB; if the read matches more data than that, the read fails with a `FAILED_PRECONDITION`
             * error.
             *
             * Reads inside read-write transactions might return `ABORTED`. If this occurs, the application
             * should restart the transaction from the beginning. See Transaction for more details.
             *
             * Larger result sets can be yielded in streaming fashion by calling StreamingRead instead.
             *
             * Create a request for the method "sessions.read".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link Read#execute()} method to invoke the remote operation. <p> {@link
             * Read#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param session Required. The session in which the read should be performed.
             * @param content the {@link com.google.api.services.spanner.v1.model.ReadRequest}
             * @since 1.13
             */
            protected Read(java.lang.String session, com.google.api.services.spanner.v1.model.ReadRequest content) {
              super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.ResultSet.class);
              this.session = com.google.api.client.util.Preconditions.checkNotNull(session, "Required parameter session must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
            }

            @Override
            public Read set$Xgafv(java.lang.String $Xgafv) {
              return (Read) super.set$Xgafv($Xgafv);
            }

            @Override
            public Read setAccessToken(java.lang.String accessToken) {
              return (Read) super.setAccessToken(accessToken);
            }

            @Override
            public Read setAlt(java.lang.String alt) {
              return (Read) super.setAlt(alt);
            }

            @Override
            public Read setCallback(java.lang.String callback) {
              return (Read) super.setCallback(callback);
            }

            @Override
            public Read setFields(java.lang.String fields) {
              return (Read) super.setFields(fields);
            }

            @Override
            public Read setKey(java.lang.String key) {
              return (Read) super.setKey(key);
            }

            @Override
            public Read setOauthToken(java.lang.String oauthToken) {
              return (Read) super.setOauthToken(oauthToken);
            }

            @Override
            public Read setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Read) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Read setQuotaUser(java.lang.String quotaUser) {
              return (Read) super.setQuotaUser(quotaUser);
            }

            @Override
            public Read setUploadType(java.lang.String uploadType) {
              return (Read) super.setUploadType(uploadType);
            }

            @Override
            public Read setUploadProtocol(java.lang.String uploadProtocol) {
              return (Read) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The session in which the read should be performed. */
            @com.google.api.client.util.Key
            private java.lang.String session;

            /** Required. The session in which the read should be performed.
             */
            public java.lang.String getSession() {
              return session;
            }

            /** Required. The session in which the read should be performed. */
            public Read setSession(java.lang.String session) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
              this.session = session;
              return this;
            }

            @Override
            public Read set(String parameterName, Object value) {
              return (Read) super.set(parameterName, value);
            }
          }
          /**
           * Rolls back a transaction, releasing any locks it holds. It is a good idea to call this for any
           * transaction that includes one or more Read or ExecuteSql requests and ultimately decides not to
           * commit.
           *
           * `Rollback` returns `OK` if it successfully aborts the transaction, the transaction was already
           * aborted, or the transaction is not found. `Rollback` never returns `ABORTED`.
           *
           * Create a request for the method "sessions.rollback".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link Rollback#execute()} method to invoke the remote operation.
           *
           * @param session Required. The session in which the transaction to roll back is running.
           * @param content the {@link com.google.api.services.spanner.v1.model.RollbackRequest}
           * @return the request
           */
          public Rollback rollback(java.lang.String session, com.google.api.services.spanner.v1.model.RollbackRequest content) throws java.io.IOException {
            Rollback result = new Rollback(session, content);
            initialize(result);
            return result;
          }

          public class Rollback extends SpannerRequest<com.google.api.services.spanner.v1.model.Empty> {

            private static final String REST_PATH = "v1/{+session}:rollback";

            private final java.util.regex.Pattern SESSION_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");

            /**
             * Rolls back a transaction, releasing any locks it holds. It is a good idea to call this for any
             * transaction that includes one or more Read or ExecuteSql requests and ultimately decides not to
             * commit.
             *
             * `Rollback` returns `OK` if it successfully aborts the transaction, the transaction was already
             * aborted, or the transaction is not found. `Rollback` never returns `ABORTED`.
             *
             * Create a request for the method "sessions.rollback".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link Rollback#execute()} method to invoke the remote operation. <p>
             * {@link
             * Rollback#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param session Required. The session in which the transaction to roll back is running.
             * @param content the {@link com.google.api.services.spanner.v1.model.RollbackRequest}
             * @since 1.13
             */
            protected Rollback(java.lang.String session, com.google.api.services.spanner.v1.model.RollbackRequest content) {
              super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.Empty.class);
              this.session = com.google.api.client.util.Preconditions.checkNotNull(session, "Required parameter session must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
            }

            @Override
            public Rollback set$Xgafv(java.lang.String $Xgafv) {
              return (Rollback) super.set$Xgafv($Xgafv);
            }

            @Override
            public Rollback setAccessToken(java.lang.String accessToken) {
              return (Rollback) super.setAccessToken(accessToken);
            }

            @Override
            public Rollback setAlt(java.lang.String alt) {
              return (Rollback) super.setAlt(alt);
            }

            @Override
            public Rollback setCallback(java.lang.String callback) {
              return (Rollback) super.setCallback(callback);
            }

            @Override
            public Rollback setFields(java.lang.String fields) {
              return (Rollback) super.setFields(fields);
            }

            @Override
            public Rollback setKey(java.lang.String key) {
              return (Rollback) super.setKey(key);
            }

            @Override
            public Rollback setOauthToken(java.lang.String oauthToken) {
              return (Rollback) super.setOauthToken(oauthToken);
            }

            @Override
            public Rollback setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Rollback) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Rollback setQuotaUser(java.lang.String quotaUser) {
              return (Rollback) super.setQuotaUser(quotaUser);
            }

            @Override
            public Rollback setUploadType(java.lang.String uploadType) {
              return (Rollback) super.setUploadType(uploadType);
            }

            @Override
            public Rollback setUploadProtocol(java.lang.String uploadProtocol) {
              return (Rollback) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The session in which the transaction to roll back is running. */
            @com.google.api.client.util.Key
            private java.lang.String session;

            /** Required. The session in which the transaction to roll back is running.
             */
            public java.lang.String getSession() {
              return session;
            }

            /** Required. The session in which the transaction to roll back is running. */
            public Rollback setSession(java.lang.String session) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
              this.session = session;
              return this;
            }

            @Override
            public Rollback set(String parameterName, Object value) {
              return (Rollback) super.set(parameterName, value);
            }
          }
          /**
           * Like Read, except returns the result set as a stream. Unlike Read, there is no limit on the size
           * of the returned result set. However, no individual row in the result set can exceed 100 MiB, and
           * no column value can exceed 10 MiB.
           *
           * Create a request for the method "sessions.streamingRead".
           *
           * This request holds the parameters needed by the spanner server.  After setting any optional
           * parameters, call the {@link StreamingRead#execute()} method to invoke the remote operation.
           *
           * @param session Required. The session in which the read should be performed.
           * @param content the {@link com.google.api.services.spanner.v1.model.ReadRequest}
           * @return the request
           */
          public StreamingRead streamingRead(java.lang.String session, com.google.api.services.spanner.v1.model.ReadRequest content) throws java.io.IOException {
            StreamingRead result = new StreamingRead(session, content);
            initialize(result);
            return result;
          }

          public class StreamingRead extends SpannerRequest<com.google.api.services.spanner.v1.model.PartialResultSet> {

            private static final String REST_PATH = "v1/{+session}:streamingRead";

            private final java.util.regex.Pattern SESSION_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");

            /**
             * Like Read, except returns the result set as a stream. Unlike Read, there is no limit on the
             * size of the returned result set. However, no individual row in the result set can exceed 100
             * MiB, and no column value can exceed 10 MiB.
             *
             * Create a request for the method "sessions.streamingRead".
             *
             * This request holds the parameters needed by the the spanner server.  After setting any optional
             * parameters, call the {@link StreamingRead#execute()} method to invoke the remote operation. <p>
             * {@link StreamingRead#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
             * equest)} must be called to initialize this instance immediately after invoking the constructor.
             * </p>
             *
             * @param session Required. The session in which the read should be performed.
             * @param content the {@link com.google.api.services.spanner.v1.model.ReadRequest}
             * @since 1.13
             */
            protected StreamingRead(java.lang.String session, com.google.api.services.spanner.v1.model.ReadRequest content) {
              super(Spanner.this, "POST", REST_PATH, content, com.google.api.services.spanner.v1.model.PartialResultSet.class);
              this.session = com.google.api.client.util.Preconditions.checkNotNull(session, "Required parameter session must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
            }

            @Override
            public StreamingRead set$Xgafv(java.lang.String $Xgafv) {
              return (StreamingRead) super.set$Xgafv($Xgafv);
            }

            @Override
            public StreamingRead setAccessToken(java.lang.String accessToken) {
              return (StreamingRead) super.setAccessToken(accessToken);
            }

            @Override
            public StreamingRead setAlt(java.lang.String alt) {
              return (StreamingRead) super.setAlt(alt);
            }

            @Override
            public StreamingRead setCallback(java.lang.String callback) {
              return (StreamingRead) super.setCallback(callback);
            }

            @Override
            public StreamingRead setFields(java.lang.String fields) {
              return (StreamingRead) super.setFields(fields);
            }

            @Override
            public StreamingRead setKey(java.lang.String key) {
              return (StreamingRead) super.setKey(key);
            }

            @Override
            public StreamingRead setOauthToken(java.lang.String oauthToken) {
              return (StreamingRead) super.setOauthToken(oauthToken);
            }

            @Override
            public StreamingRead setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (StreamingRead) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public StreamingRead setQuotaUser(java.lang.String quotaUser) {
              return (StreamingRead) super.setQuotaUser(quotaUser);
            }

            @Override
            public StreamingRead setUploadType(java.lang.String uploadType) {
              return (StreamingRead) super.setUploadType(uploadType);
            }

            @Override
            public StreamingRead setUploadProtocol(java.lang.String uploadProtocol) {
              return (StreamingRead) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The session in which the read should be performed. */
            @com.google.api.client.util.Key
            private java.lang.String session;

            /** Required. The session in which the read should be performed.
             */
            public java.lang.String getSession() {
              return session;
            }

            /** Required. The session in which the read should be performed. */
            public StreamingRead setSession(java.lang.String session) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SESSION_PATTERN.matcher(session).matches(),
                    "Parameter session must conform to the pattern " +
                    "^projects/[^/]+/instances/[^/]+/databases/[^/]+/sessions/[^/]+$");
              }
              this.session = session;
              return this;
            }

            @Override
            public StreamingRead set(String parameterName, Object value) {
              return (StreamingRead) super.set(parameterName, value);
            }
          }

        }
      }
      /**
       * An accessor for creating requests from the Operations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Spanner spanner = new Spanner(...);}
       *   {@code Spanner.Operations.List request = spanner.operations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Operations operations() {
        return new Operations();
      }

      /**
       * The "operations" collection of methods.
       */
      public class Operations {

        /**
         * Starts asynchronous cancellation on a long-running operation.  The server makes a best effort to
         * cancel the operation, but success is not guaranteed.  If the server doesn't support this method,
         * it returns `google.rpc.Code.UNIMPLEMENTED`.  Clients can use Operations.GetOperation or other
         * methods to check whether the cancellation succeeded or whether the operation completed despite
         * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
         * operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to
         * `Code.CANCELLED`.
         *
         * Create a request for the method "operations.cancel".
         *
         * This request holds the parameters needed by the spanner server.  After setting any optional
         * parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be cancelled.
         * @return the request
         */
        public Cancel cancel(java.lang.String name) throws java.io.IOException {
          Cancel result = new Cancel(name);
          initialize(result);
          return result;
        }

        public class Cancel extends SpannerRequest<com.google.api.services.spanner.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}:cancel";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/operations/[^/]+$");

          /**
           * Starts asynchronous cancellation on a long-running operation.  The server makes a best effort
           * to cancel the operation, but success is not guaranteed.  If the server doesn't support this
           * method, it returns `google.rpc.Code.UNIMPLEMENTED`.  Clients can use Operations.GetOperation or
           * other methods to check whether the cancellation succeeded or whether the operation completed
           * despite cancellation. On successful cancellation, the operation is not deleted; instead, it
           * becomes an operation with an Operation.error value with a google.rpc.Status.code of 1,
           * corresponding to `Code.CANCELLED`.
           *
           * Create a request for the method "operations.cancel".
           *
           * This request holds the parameters needed by the the spanner server.  After setting any optional
           * parameters, call the {@link Cancel#execute()} method to invoke the remote operation. <p> {@link
           * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be cancelled.
           * @since 1.13
           */
          protected Cancel(java.lang.String name) {
            super(Spanner.this, "POST", REST_PATH, null, com.google.api.services.spanner.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Cancel set$Xgafv(java.lang.String $Xgafv) {
            return (Cancel) super.set$Xgafv($Xgafv);
          }

          @Override
          public Cancel setAccessToken(java.lang.String accessToken) {
            return (Cancel) super.setAccessToken(accessToken);
          }

          @Override
          public Cancel setAlt(java.lang.String alt) {
            return (Cancel) super.setAlt(alt);
          }

          @Override
          public Cancel setCallback(java.lang.String callback) {
            return (Cancel) super.setCallback(callback);
          }

          @Override
          public Cancel setFields(java.lang.String fields) {
            return (Cancel) super.setFields(fields);
          }

          @Override
          public Cancel setKey(java.lang.String key) {
            return (Cancel) super.setKey(key);
          }

          @Override
          public Cancel setOauthToken(java.lang.String oauthToken) {
            return (Cancel) super.setOauthToken(oauthToken);
          }

          @Override
          public Cancel setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Cancel) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Cancel setQuotaUser(java.lang.String quotaUser) {
            return (Cancel) super.setQuotaUser(quotaUser);
          }

          @Override
          public Cancel setUploadType(java.lang.String uploadType) {
            return (Cancel) super.setUploadType(uploadType);
          }

          @Override
          public Cancel setUploadProtocol(java.lang.String uploadProtocol) {
            return (Cancel) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be cancelled. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be cancelled.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be cancelled. */
          public Cancel setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Cancel set(String parameterName, Object value) {
            return (Cancel) super.set(parameterName, value);
          }
        }
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested
         * in the operation result. It does not cancel the operation. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         *
         * Create a request for the method "operations.delete".
         *
         * This request holds the parameters needed by the spanner server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource to be deleted.
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends SpannerRequest<com.google.api.services.spanner.v1.model.Empty> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/operations/[^/]+$");

          /**
           * Deletes a long-running operation. This method indicates that the client is no longer interested
           * in the operation result. It does not cancel the operation. If the server doesn't support this
           * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.delete".
           *
           * This request holds the parameters needed by the the spanner server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource to be deleted.
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(Spanner.this, "DELETE", REST_PATH, null, com.google.api.services.spanner.v1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource to be deleted. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource to be deleted.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource to be deleted. */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Gets the latest state of a long-running operation.  Clients can use this method to poll the
         * operation result at intervals as recommended by the API service.
         *
         * Create a request for the method "operations.get".
         *
         * This request holds the parameters needed by the spanner server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation resource.
         * @return the request
         */
        public Get get(java.lang.String name) throws java.io.IOException {
          Get result = new Get(name);
          initialize(result);
          return result;
        }

        public class Get extends SpannerRequest<com.google.api.services.spanner.v1.model.Operation> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/operations/[^/]+$");

          /**
           * Gets the latest state of a long-running operation.  Clients can use this method to poll the
           * operation result at intervals as recommended by the API service.
           *
           * Create a request for the method "operations.get".
           *
           * This request holds the parameters needed by the the spanner server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation resource.
           * @since 1.13
           */
          protected Get(java.lang.String name) {
            super(Spanner.this, "GET", REST_PATH, null, com.google.api.services.spanner.v1.model.Operation.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/operations/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get set$Xgafv(java.lang.String $Xgafv) {
            return (Get) super.set$Xgafv($Xgafv);
          }

          @Override
          public Get setAccessToken(java.lang.String accessToken) {
            return (Get) super.setAccessToken(accessToken);
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setCallback(java.lang.String callback) {
            return (Get) super.setCallback(callback);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUploadType(java.lang.String uploadType) {
            return (Get) super.setUploadType(uploadType);
          }

          @Override
          public Get setUploadProtocol(java.lang.String uploadProtocol) {
            return (Get) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation resource. */
          public Get setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/operations/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support
         * this method, it returns `UNIMPLEMENTED`.
         *
         * NOTE: the `name` binding allows API services to override the binding to use different resource
         * name schemes, such as `users/operations`. To override the binding, API services can add a binding
         * such as `"/v1/{name=users}/operations"` to their service configuration. For backwards
         * compatibility, the default name includes the operations collection id, however overriding users
         * must ensure the name binding is the parent resource, without the operations collection id.
         *
         * Create a request for the method "operations.list".
         *
         * This request holds the parameters needed by the spanner server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param name The name of the operation's parent resource.
         * @return the request
         */
        public List list(java.lang.String name) throws java.io.IOException {
          List result = new List(name);
          initialize(result);
          return result;
        }

        public class List extends SpannerRequest<com.google.api.services.spanner.v1.model.ListOperationsResponse> {

          private static final String REST_PATH = "v1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/instances/[^/]+/operations$");

          /**
           * Lists operations that match the specified filter in the request. If the server doesn't support
           * this method, it returns `UNIMPLEMENTED`.
           *
           * NOTE: the `name` binding allows API services to override the binding to use different resource
           * name schemes, such as `users/operations`. To override the binding, API services can add a
           * binding such as `"/v1/{name=users}/operations"` to their service configuration. For backwards
           * compatibility, the default name includes the operations collection id, however overriding users
           * must ensure the name binding is the parent resource, without the operations collection id.
           *
           * Create a request for the method "operations.list".
           *
           * This request holds the parameters needed by the the spanner server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The name of the operation's parent resource.
           * @since 1.13
           */
          protected List(java.lang.String name) {
            super(Spanner.this, "GET", REST_PATH, null, com.google.api.services.spanner.v1.model.ListOperationsResponse.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/operations$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /** The name of the operation's parent resource. */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The name of the operation's parent resource.
           */
          public java.lang.String getName() {
            return name;
          }

          /** The name of the operation's parent resource. */
          public List setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/instances/[^/]+/operations$");
            }
            this.name = name;
            return this;
          }

          /** The standard list filter. */
          @com.google.api.client.util.Key
          private java.lang.String filter;

          /** The standard list filter.
           */
          public java.lang.String getFilter() {
            return filter;
          }

          /** The standard list filter. */
          public List setFilter(java.lang.String filter) {
            this.filter = filter;
            return this;
          }

          /** The standard list page size. */
          @com.google.api.client.util.Key
          private java.lang.Integer pageSize;

          /** The standard list page size.
           */
          public java.lang.Integer getPageSize() {
            return pageSize;
          }

          /** The standard list page size. */
          public List setPageSize(java.lang.Integer pageSize) {
            this.pageSize = pageSize;
            return this;
          }

          /** The standard list page token. */
          @com.google.api.client.util.Key
          private java.lang.String pageToken;

          /** The standard list page token.
           */
          public java.lang.String getPageToken() {
            return pageToken;
          }

          /** The standard list page token. */
          public List setPageToken(java.lang.String pageToken) {
            this.pageToken = pageToken;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link Spanner}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Spanner}. */
    @Override
    public Spanner build() {
      return new Spanner(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link SpannerRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setSpannerRequestInitializer(
        SpannerRequestInitializer spannerRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(spannerRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
