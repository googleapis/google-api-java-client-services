/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.privateca.v1beta1.model;

/**
 * A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an
 * alternative to using ASN.1 / X.509.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Certificate Authority API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CertificateDescription extends com.google.api.client.json.GenericJson {

  /**
   * Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access"
   * extension in the certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> aiaIssuingCertificateUrls;

  /**
   * Identifies the subject_key_id of the parent certificate, per
   * https://tools.ietf.org/html/rfc5280#section-4.2.1.1
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private KeyId authorityKeyId;

  /**
   * The hash of the x.509 certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CertificateFingerprint certFingerprint;

  /**
   * Describes some of the technical fields in a certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ReusableConfigValues configValues;

  /**
   * Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName
   * described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> crlDistributionPoints;

  /**
   * The public key that corresponds to an issued certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PublicKey publicKey;

  /**
   * Describes some of the values in a certificate that are related to the subject and lifetime.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SubjectDescription subjectDescription;

  /**
   * Provides a means of identifiying certificates that contain a particular public key, per
   * https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private KeyId subjectKeyId;

  /**
   * Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access"
   * extension in the certificate.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAiaIssuingCertificateUrls() {
    return aiaIssuingCertificateUrls;
  }

  /**
   * Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access"
   * extension in the certificate.
   * @param aiaIssuingCertificateUrls aiaIssuingCertificateUrls or {@code null} for none
   */
  public CertificateDescription setAiaIssuingCertificateUrls(java.util.List<java.lang.String> aiaIssuingCertificateUrls) {
    this.aiaIssuingCertificateUrls = aiaIssuingCertificateUrls;
    return this;
  }

  /**
   * Identifies the subject_key_id of the parent certificate, per
   * https://tools.ietf.org/html/rfc5280#section-4.2.1.1
   * @return value or {@code null} for none
   */
  public KeyId getAuthorityKeyId() {
    return authorityKeyId;
  }

  /**
   * Identifies the subject_key_id of the parent certificate, per
   * https://tools.ietf.org/html/rfc5280#section-4.2.1.1
   * @param authorityKeyId authorityKeyId or {@code null} for none
   */
  public CertificateDescription setAuthorityKeyId(KeyId authorityKeyId) {
    this.authorityKeyId = authorityKeyId;
    return this;
  }

  /**
   * The hash of the x.509 certificate.
   * @return value or {@code null} for none
   */
  public CertificateFingerprint getCertFingerprint() {
    return certFingerprint;
  }

  /**
   * The hash of the x.509 certificate.
   * @param certFingerprint certFingerprint or {@code null} for none
   */
  public CertificateDescription setCertFingerprint(CertificateFingerprint certFingerprint) {
    this.certFingerprint = certFingerprint;
    return this;
  }

  /**
   * Describes some of the technical fields in a certificate.
   * @return value or {@code null} for none
   */
  public ReusableConfigValues getConfigValues() {
    return configValues;
  }

  /**
   * Describes some of the technical fields in a certificate.
   * @param configValues configValues or {@code null} for none
   */
  public CertificateDescription setConfigValues(ReusableConfigValues configValues) {
    this.configValues = configValues;
    return this;
  }

  /**
   * Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName
   * described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCrlDistributionPoints() {
    return crlDistributionPoints;
  }

  /**
   * Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName
   * described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13
   * @param crlDistributionPoints crlDistributionPoints or {@code null} for none
   */
  public CertificateDescription setCrlDistributionPoints(java.util.List<java.lang.String> crlDistributionPoints) {
    this.crlDistributionPoints = crlDistributionPoints;
    return this;
  }

  /**
   * The public key that corresponds to an issued certificate.
   * @return value or {@code null} for none
   */
  public PublicKey getPublicKey() {
    return publicKey;
  }

  /**
   * The public key that corresponds to an issued certificate.
   * @param publicKey publicKey or {@code null} for none
   */
  public CertificateDescription setPublicKey(PublicKey publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Describes some of the values in a certificate that are related to the subject and lifetime.
   * @return value or {@code null} for none
   */
  public SubjectDescription getSubjectDescription() {
    return subjectDescription;
  }

  /**
   * Describes some of the values in a certificate that are related to the subject and lifetime.
   * @param subjectDescription subjectDescription or {@code null} for none
   */
  public CertificateDescription setSubjectDescription(SubjectDescription subjectDescription) {
    this.subjectDescription = subjectDescription;
    return this;
  }

  /**
   * Provides a means of identifiying certificates that contain a particular public key, per
   * https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
   * @return value or {@code null} for none
   */
  public KeyId getSubjectKeyId() {
    return subjectKeyId;
  }

  /**
   * Provides a means of identifiying certificates that contain a particular public key, per
   * https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
   * @param subjectKeyId subjectKeyId or {@code null} for none
   */
  public CertificateDescription setSubjectKeyId(KeyId subjectKeyId) {
    this.subjectKeyId = subjectKeyId;
    return this;
  }

  @Override
  public CertificateDescription set(String fieldName, Object value) {
    return (CertificateDescription) super.set(fieldName, value);
  }

  @Override
  public CertificateDescription clone() {
    return (CertificateDescription) super.clone();
  }

}
