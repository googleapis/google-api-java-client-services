/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.fusiontables;

/**
 * Service definition for Fusiontables (v1).
 *
 * <p>
 * API for working with Fusion Tables data.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/fusiontables" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FusiontablesRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Fusiontables extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Fusion Tables API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "fusiontables/v1/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch/fusiontables/v1";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Fusiontables(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Fusiontables(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Column collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Fusiontables fusiontables = new Fusiontables(...);}
   *   {@code Fusiontables.Column.List request = fusiontables.column().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Column column() {
    return new Column();
  }

  /**
   * The "column" collection of methods.
   */
  public class Column {

    /**
     * Deletes the column.
     *
     * Create a request for the method "column.delete".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param tableId Table from which the column is being deleted.
     * @param columnId Name or identifier for the column being deleted.
     * @return the request
     */
    public Delete delete(java.lang.String tableId, java.lang.String columnId) throws java.io.IOException {
      Delete result = new Delete(tableId, columnId);
      initialize(result);
      return result;
    }

    public class Delete extends FusiontablesRequest<Void> {

      private static final String REST_PATH = "tables/{tableId}/columns/{columnId}";

      /**
       * Deletes the column.
       *
       * Create a request for the method "column.delete".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table from which the column is being deleted.
       * @param columnId Name or identifier for the column being deleted.
       * @since 1.13
       */
      protected Delete(java.lang.String tableId, java.lang.String columnId) {
        super(Fusiontables.this, "DELETE", REST_PATH, null, Void.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.columnId = com.google.api.client.util.Preconditions.checkNotNull(columnId, "Required parameter columnId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** Table from which the column is being deleted. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table from which the column is being deleted.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table from which the column is being deleted. */
      public Delete setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Name or identifier for the column being deleted. */
      @com.google.api.client.util.Key
      private java.lang.String columnId;

      /** Name or identifier for the column being deleted.
       */
      public java.lang.String getColumnId() {
        return columnId;
      }

      /** Name or identifier for the column being deleted. */
      public Delete setColumnId(java.lang.String columnId) {
        this.columnId = columnId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a specific column by its id.
     *
     * Create a request for the method "column.get".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param tableId Table to which the column belongs.
     * @param columnId Name or identifier for the column that is being requested.
     * @return the request
     */
    public Get get(java.lang.String tableId, java.lang.String columnId) throws java.io.IOException {
      Get result = new Get(tableId, columnId);
      initialize(result);
      return result;
    }

    public class Get extends FusiontablesRequest<com.google.api.services.fusiontables.model.Column> {

      private static final String REST_PATH = "tables/{tableId}/columns/{columnId}";

      /**
       * Retrieves a specific column by its id.
       *
       * Create a request for the method "column.get".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table to which the column belongs.
       * @param columnId Name or identifier for the column that is being requested.
       * @since 1.13
       */
      protected Get(java.lang.String tableId, java.lang.String columnId) {
        super(Fusiontables.this, "GET", REST_PATH, null, com.google.api.services.fusiontables.model.Column.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.columnId = com.google.api.client.util.Preconditions.checkNotNull(columnId, "Required parameter columnId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Table to which the column belongs. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table to which the column belongs.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table to which the column belongs. */
      public Get setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Name or identifier for the column that is being requested. */
      @com.google.api.client.util.Key
      private java.lang.String columnId;

      /** Name or identifier for the column that is being requested.
       */
      public java.lang.String getColumnId() {
        return columnId;
      }

      /** Name or identifier for the column that is being requested. */
      public Get setColumnId(java.lang.String columnId) {
        this.columnId = columnId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Adds a new column to the table.
     *
     * Create a request for the method "column.insert".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param tableId Table for which a new column is being added.
     * @param content the {@link com.google.api.services.fusiontables.model.Column}
     * @return the request
     */
    public Insert insert(java.lang.String tableId, com.google.api.services.fusiontables.model.Column content) throws java.io.IOException {
      Insert result = new Insert(tableId, content);
      initialize(result);
      return result;
    }

    public class Insert extends FusiontablesRequest<com.google.api.services.fusiontables.model.Column> {

      private static final String REST_PATH = "tables/{tableId}/columns";

      /**
       * Adds a new column to the table.
       *
       * Create a request for the method "column.insert".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table for which a new column is being added.
       * @param content the {@link com.google.api.services.fusiontables.model.Column}
       * @since 1.13
       */
      protected Insert(java.lang.String tableId, com.google.api.services.fusiontables.model.Column content) {
        super(Fusiontables.this, "POST", REST_PATH, content, com.google.api.services.fusiontables.model.Column.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getName(), "Column.getName()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getType(), "Column.getType()");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** Table for which a new column is being added. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table for which a new column is being added.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table for which a new column is being added. */
      public Insert setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of columns.
     *
     * Create a request for the method "column.list".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param tableId Table whose columns are being listed.
     * @return the request
     */
    public List list(java.lang.String tableId) throws java.io.IOException {
      List result = new List(tableId);
      initialize(result);
      return result;
    }

    public class List extends FusiontablesRequest<com.google.api.services.fusiontables.model.ColumnList> {

      private static final String REST_PATH = "tables/{tableId}/columns";

      /**
       * Retrieves a list of columns.
       *
       * Create a request for the method "column.list".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table whose columns are being listed.
       * @since 1.13
       */
      protected List(java.lang.String tableId) {
        super(Fusiontables.this, "GET", REST_PATH, null, com.google.api.services.fusiontables.model.ColumnList.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** Table whose columns are being listed. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table whose columns are being listed.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table whose columns are being listed. */
      public List setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Maximum number of columns to return. Optional. Default is 5. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of columns to return. Optional. Default is 5.

     [minimum: 0]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of columns to return. Optional. Default is 5. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Continuation token specifying which result page to return. Optional. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Continuation token specifying which result page to return. Optional.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Continuation token specifying which result page to return. Optional. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates the name or type of an existing column. This method supports patch semantics.
     *
     * Create a request for the method "column.patch".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param tableId Table for which the column is being updated.
     * @param columnId Name or identifier for the column that is being updated.
     * @param content the {@link com.google.api.services.fusiontables.model.Column}
     * @return the request
     */
    public Patch patch(java.lang.String tableId, java.lang.String columnId, com.google.api.services.fusiontables.model.Column content) throws java.io.IOException {
      Patch result = new Patch(tableId, columnId, content);
      initialize(result);
      return result;
    }

    public class Patch extends FusiontablesRequest<com.google.api.services.fusiontables.model.Column> {

      private static final String REST_PATH = "tables/{tableId}/columns/{columnId}";

      /**
       * Updates the name or type of an existing column. This method supports patch semantics.
       *
       * Create a request for the method "column.patch".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table for which the column is being updated.
       * @param columnId Name or identifier for the column that is being updated.
       * @param content the {@link com.google.api.services.fusiontables.model.Column}
       * @since 1.13
       */
      protected Patch(java.lang.String tableId, java.lang.String columnId, com.google.api.services.fusiontables.model.Column content) {
        super(Fusiontables.this, "PATCH", REST_PATH, content, com.google.api.services.fusiontables.model.Column.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.columnId = com.google.api.client.util.Preconditions.checkNotNull(columnId, "Required parameter columnId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** Table for which the column is being updated. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table for which the column is being updated.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table for which the column is being updated. */
      public Patch setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Name or identifier for the column that is being updated. */
      @com.google.api.client.util.Key
      private java.lang.String columnId;

      /** Name or identifier for the column that is being updated.
       */
      public java.lang.String getColumnId() {
        return columnId;
      }

      /** Name or identifier for the column that is being updated. */
      public Patch setColumnId(java.lang.String columnId) {
        this.columnId = columnId;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Updates the name or type of an existing column.
     *
     * Create a request for the method "column.update".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param tableId Table for which the column is being updated.
     * @param columnId Name or identifier for the column that is being updated.
     * @param content the {@link com.google.api.services.fusiontables.model.Column}
     * @return the request
     */
    public Update update(java.lang.String tableId, java.lang.String columnId, com.google.api.services.fusiontables.model.Column content) throws java.io.IOException {
      Update result = new Update(tableId, columnId, content);
      initialize(result);
      return result;
    }

    public class Update extends FusiontablesRequest<com.google.api.services.fusiontables.model.Column> {

      private static final String REST_PATH = "tables/{tableId}/columns/{columnId}";

      /**
       * Updates the name or type of an existing column.
       *
       * Create a request for the method "column.update".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table for which the column is being updated.
       * @param columnId Name or identifier for the column that is being updated.
       * @param content the {@link com.google.api.services.fusiontables.model.Column}
       * @since 1.13
       */
      protected Update(java.lang.String tableId, java.lang.String columnId, com.google.api.services.fusiontables.model.Column content) {
        super(Fusiontables.this, "PUT", REST_PATH, content, com.google.api.services.fusiontables.model.Column.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.columnId = com.google.api.client.util.Preconditions.checkNotNull(columnId, "Required parameter columnId must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** Table for which the column is being updated. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table for which the column is being updated.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table for which the column is being updated. */
      public Update setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Name or identifier for the column that is being updated. */
      @com.google.api.client.util.Key
      private java.lang.String columnId;

      /** Name or identifier for the column that is being updated.
       */
      public java.lang.String getColumnId() {
        return columnId;
      }

      /** Name or identifier for the column that is being updated. */
      public Update setColumnId(java.lang.String columnId) {
        this.columnId = columnId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Query collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Fusiontables fusiontables = new Fusiontables(...);}
   *   {@code Fusiontables.Query.List request = fusiontables.query().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Query query() {
    return new Query();
  }

  /**
   * The "query" collection of methods.
   */
  public class Query {

    /**
     * Executes an SQL SELECT/INSERT/UPDATE/DELETE/SHOW/DESCRIBE/CREATE statement.
     *
     * Create a request for the method "query.sql".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Sql#execute()} method to invoke the remote operation.
     *
     * @param sql An SQL SELECT/SHOW/DESCRIBE/INSERT/UPDATE/DELETE/CREATE statement.
     * @return the request
     */
    public Sql sql(java.lang.String sql) throws java.io.IOException {
      Sql result = new Sql(sql);
      initialize(result);
      return result;
    }

    public class Sql extends FusiontablesRequest<com.google.api.services.fusiontables.model.Sqlresponse> {

      private static final String REST_PATH = "query";

      /**
       * Executes an SQL SELECT/INSERT/UPDATE/DELETE/SHOW/DESCRIBE/CREATE statement.
       *
       * Create a request for the method "query.sql".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Sql#execute()} method to invoke the remote operation. <p>
       * {@link Sql#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param sql An SQL SELECT/SHOW/DESCRIBE/INSERT/UPDATE/DELETE/CREATE statement.
       * @since 1.13
       */
      protected Sql(java.lang.String sql) {
        super(Fusiontables.this, "POST", REST_PATH, null, com.google.api.services.fusiontables.model.Sqlresponse.class);
        this.sql = com.google.api.client.util.Preconditions.checkNotNull(sql, "Required parameter sql must be specified.");
        initializeMediaDownload();
      }

      @Override
      public void executeMediaAndDownloadTo(java.io.OutputStream outputStream) throws java.io.IOException {
        super.executeMediaAndDownloadTo(outputStream);
      }

      @Override
      public java.io.InputStream executeMediaAsInputStream() throws java.io.IOException {
        return super.executeMediaAsInputStream();
      }

      @Override
      public com.google.api.client.http.HttpResponse executeMedia() throws java.io.IOException {
        return super.executeMedia();
      }

      @Override
      public com.google.api.client.http.GenericUrl buildHttpRequestUrl() {
        java.lang.String baseUrl = ("media".equals(get("alt")) && getMediaHttpUploader() == null)
            ? getRootUrl() + "download/" + getServicePath() : getBaseUrl();
        return new com.google.api.client.http.GenericUrl(
            com.google.api.client.http.UriTemplate.expand(baseUrl, getUriTemplate(), this, true));
      }

      @Override
      public Sql setAlt(java.lang.String alt) {
        return (Sql) super.setAlt(alt);
      }

      @Override
      public Sql setFields(java.lang.String fields) {
        return (Sql) super.setFields(fields);
      }

      @Override
      public Sql setKey(java.lang.String key) {
        return (Sql) super.setKey(key);
      }

      @Override
      public Sql setOauthToken(java.lang.String oauthToken) {
        return (Sql) super.setOauthToken(oauthToken);
      }

      @Override
      public Sql setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Sql) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Sql setQuotaUser(java.lang.String quotaUser) {
        return (Sql) super.setQuotaUser(quotaUser);
      }

      @Override
      public Sql setUserIp(java.lang.String userIp) {
        return (Sql) super.setUserIp(userIp);
      }

      /** An SQL SELECT/SHOW/DESCRIBE/INSERT/UPDATE/DELETE/CREATE statement. */
      @com.google.api.client.util.Key
      private java.lang.String sql;

      /** An SQL SELECT/SHOW/DESCRIBE/INSERT/UPDATE/DELETE/CREATE statement.
       */
      public java.lang.String getSql() {
        return sql;
      }

      /** An SQL SELECT/SHOW/DESCRIBE/INSERT/UPDATE/DELETE/CREATE statement. */
      public Sql setSql(java.lang.String sql) {
        this.sql = sql;
        return this;
      }

      /** Should column names be included (in the first row)?. Default is true. */
      @com.google.api.client.util.Key
      private java.lang.Boolean hdrs;

      /** Should column names be included (in the first row)?. Default is true.
       */
      public java.lang.Boolean getHdrs() {
        return hdrs;
      }

      /** Should column names be included (in the first row)?. Default is true. */
      public Sql setHdrs(java.lang.Boolean hdrs) {
        this.hdrs = hdrs;
        return this;
      }

      /**
       * Should typed values be returned in the (JSON) response -- numbers for numeric values and
       * parsed geometries for KML values? Default is true.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean typed;

      /** Should typed values be returned in the (JSON) response -- numbers for numeric values and parsed
     geometries for KML values? Default is true.
       */
      public java.lang.Boolean getTyped() {
        return typed;
      }

      /**
       * Should typed values be returned in the (JSON) response -- numbers for numeric values and
       * parsed geometries for KML values? Default is true.
       */
      public Sql setTyped(java.lang.Boolean typed) {
        this.typed = typed;
        return this;
      }

      @Override
      public Sql set(String parameterName, Object value) {
        return (Sql) super.set(parameterName, value);
      }
    }
    /**
     * Executes an SQL SELECT/SHOW/DESCRIBE statement.
     *
     * Create a request for the method "query.sqlGet".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link SqlGet#execute()} method to invoke the remote operation.
     *
     * @param sql An SQL SELECT/SHOW/DESCRIBE statement.
     * @return the request
     */
    public SqlGet sqlGet(java.lang.String sql) throws java.io.IOException {
      SqlGet result = new SqlGet(sql);
      initialize(result);
      return result;
    }

    public class SqlGet extends FusiontablesRequest<com.google.api.services.fusiontables.model.Sqlresponse> {

      private static final String REST_PATH = "query";

      /**
       * Executes an SQL SELECT/SHOW/DESCRIBE statement.
       *
       * Create a request for the method "query.sqlGet".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link SqlGet#execute()} method to invoke the remote operation.
       * <p> {@link
       * SqlGet#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param sql An SQL SELECT/SHOW/DESCRIBE statement.
       * @since 1.13
       */
      protected SqlGet(java.lang.String sql) {
        super(Fusiontables.this, "GET", REST_PATH, null, com.google.api.services.fusiontables.model.Sqlresponse.class);
        this.sql = com.google.api.client.util.Preconditions.checkNotNull(sql, "Required parameter sql must be specified.");
        initializeMediaDownload();
      }

      @Override
      public void executeMediaAndDownloadTo(java.io.OutputStream outputStream) throws java.io.IOException {
        super.executeMediaAndDownloadTo(outputStream);
      }

      @Override
      public java.io.InputStream executeMediaAsInputStream() throws java.io.IOException {
        return super.executeMediaAsInputStream();
      }

      @Override
      public com.google.api.client.http.HttpResponse executeMedia() throws java.io.IOException {
        return super.executeMedia();
      }

      @Override
      public com.google.api.client.http.GenericUrl buildHttpRequestUrl() {
        java.lang.String baseUrl = ("media".equals(get("alt")) && getMediaHttpUploader() == null)
            ? getRootUrl() + "download/" + getServicePath() : getBaseUrl();
        return new com.google.api.client.http.GenericUrl(
            com.google.api.client.http.UriTemplate.expand(baseUrl, getUriTemplate(), this, true));
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public SqlGet setAlt(java.lang.String alt) {
        return (SqlGet) super.setAlt(alt);
      }

      @Override
      public SqlGet setFields(java.lang.String fields) {
        return (SqlGet) super.setFields(fields);
      }

      @Override
      public SqlGet setKey(java.lang.String key) {
        return (SqlGet) super.setKey(key);
      }

      @Override
      public SqlGet setOauthToken(java.lang.String oauthToken) {
        return (SqlGet) super.setOauthToken(oauthToken);
      }

      @Override
      public SqlGet setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SqlGet) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SqlGet setQuotaUser(java.lang.String quotaUser) {
        return (SqlGet) super.setQuotaUser(quotaUser);
      }

      @Override
      public SqlGet setUserIp(java.lang.String userIp) {
        return (SqlGet) super.setUserIp(userIp);
      }

      /** An SQL SELECT/SHOW/DESCRIBE statement. */
      @com.google.api.client.util.Key
      private java.lang.String sql;

      /** An SQL SELECT/SHOW/DESCRIBE statement.
       */
      public java.lang.String getSql() {
        return sql;
      }

      /** An SQL SELECT/SHOW/DESCRIBE statement. */
      public SqlGet setSql(java.lang.String sql) {
        this.sql = sql;
        return this;
      }

      /** Should column names be included (in the first row)?. Default is true. */
      @com.google.api.client.util.Key
      private java.lang.Boolean hdrs;

      /** Should column names be included (in the first row)?. Default is true.
       */
      public java.lang.Boolean getHdrs() {
        return hdrs;
      }

      /** Should column names be included (in the first row)?. Default is true. */
      public SqlGet setHdrs(java.lang.Boolean hdrs) {
        this.hdrs = hdrs;
        return this;
      }

      /**
       * Should typed values be returned in the (JSON) response -- numbers for numeric values and
       * parsed geometries for KML values? Default is true.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean typed;

      /** Should typed values be returned in the (JSON) response -- numbers for numeric values and parsed
     geometries for KML values? Default is true.
       */
      public java.lang.Boolean getTyped() {
        return typed;
      }

      /**
       * Should typed values be returned in the (JSON) response -- numbers for numeric values and
       * parsed geometries for KML values? Default is true.
       */
      public SqlGet setTyped(java.lang.Boolean typed) {
        this.typed = typed;
        return this;
      }

      @Override
      public SqlGet set(String parameterName, Object value) {
        return (SqlGet) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Style collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Fusiontables fusiontables = new Fusiontables(...);}
   *   {@code Fusiontables.Style.List request = fusiontables.style().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Style style() {
    return new Style();
  }

  /**
   * The "style" collection of methods.
   */
  public class Style {

    /**
     * Deletes a style.
     *
     * Create a request for the method "style.delete".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param tableId Table from which the style is being deleted
     * @param styleId Identifier (within a table) for the style being deleted
     * @return the request
     */
    public Delete delete(java.lang.String tableId, java.lang.Integer styleId) throws java.io.IOException {
      Delete result = new Delete(tableId, styleId);
      initialize(result);
      return result;
    }

    public class Delete extends FusiontablesRequest<Void> {

      private static final String REST_PATH = "tables/{tableId}/styles/{styleId}";

      /**
       * Deletes a style.
       *
       * Create a request for the method "style.delete".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table from which the style is being deleted
       * @param styleId Identifier (within a table) for the style being deleted
       * @since 1.13
       */
      protected Delete(java.lang.String tableId, java.lang.Integer styleId) {
        super(Fusiontables.this, "DELETE", REST_PATH, null, Void.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.styleId = com.google.api.client.util.Preconditions.checkNotNull(styleId, "Required parameter styleId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** Table from which the style is being deleted */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table from which the style is being deleted
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table from which the style is being deleted */
      public Delete setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Identifier (within a table) for the style being deleted */
      @com.google.api.client.util.Key
      private java.lang.Integer styleId;

      /** Identifier (within a table) for the style being deleted
       */
      public java.lang.Integer getStyleId() {
        return styleId;
      }

      /** Identifier (within a table) for the style being deleted */
      public Delete setStyleId(java.lang.Integer styleId) {
        this.styleId = styleId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Gets a specific style.
     *
     * Create a request for the method "style.get".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param tableId Table to which the requested style belongs
     * @param styleId Identifier (integer) for a specific style in a table
     * @return the request
     */
    public Get get(java.lang.String tableId, java.lang.Integer styleId) throws java.io.IOException {
      Get result = new Get(tableId, styleId);
      initialize(result);
      return result;
    }

    public class Get extends FusiontablesRequest<com.google.api.services.fusiontables.model.StyleSetting> {

      private static final String REST_PATH = "tables/{tableId}/styles/{styleId}";

      /**
       * Gets a specific style.
       *
       * Create a request for the method "style.get".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table to which the requested style belongs
       * @param styleId Identifier (integer) for a specific style in a table
       * @since 1.13
       */
      protected Get(java.lang.String tableId, java.lang.Integer styleId) {
        super(Fusiontables.this, "GET", REST_PATH, null, com.google.api.services.fusiontables.model.StyleSetting.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.styleId = com.google.api.client.util.Preconditions.checkNotNull(styleId, "Required parameter styleId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Table to which the requested style belongs */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table to which the requested style belongs
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table to which the requested style belongs */
      public Get setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Identifier (integer) for a specific style in a table */
      @com.google.api.client.util.Key
      private java.lang.Integer styleId;

      /** Identifier (integer) for a specific style in a table
       */
      public java.lang.Integer getStyleId() {
        return styleId;
      }

      /** Identifier (integer) for a specific style in a table */
      public Get setStyleId(java.lang.Integer styleId) {
        this.styleId = styleId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Adds a new style for the table.
     *
     * Create a request for the method "style.insert".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param tableId Table for which a new style is being added
     * @param content the {@link com.google.api.services.fusiontables.model.StyleSetting}
     * @return the request
     */
    public Insert insert(java.lang.String tableId, com.google.api.services.fusiontables.model.StyleSetting content) throws java.io.IOException {
      Insert result = new Insert(tableId, content);
      initialize(result);
      return result;
    }

    public class Insert extends FusiontablesRequest<com.google.api.services.fusiontables.model.StyleSetting> {

      private static final String REST_PATH = "tables/{tableId}/styles";

      /**
       * Adds a new style for the table.
       *
       * Create a request for the method "style.insert".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table for which a new style is being added
       * @param content the {@link com.google.api.services.fusiontables.model.StyleSetting}
       * @since 1.13
       */
      protected Insert(java.lang.String tableId, com.google.api.services.fusiontables.model.StyleSetting content) {
        super(Fusiontables.this, "POST", REST_PATH, content, com.google.api.services.fusiontables.model.StyleSetting.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** Table for which a new style is being added */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table for which a new style is being added
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table for which a new style is being added */
      public Insert setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of styles.
     *
     * Create a request for the method "style.list".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param tableId Table whose styles are being listed
     * @return the request
     */
    public List list(java.lang.String tableId) throws java.io.IOException {
      List result = new List(tableId);
      initialize(result);
      return result;
    }

    public class List extends FusiontablesRequest<com.google.api.services.fusiontables.model.StyleSettingList> {

      private static final String REST_PATH = "tables/{tableId}/styles";

      /**
       * Retrieves a list of styles.
       *
       * Create a request for the method "style.list".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table whose styles are being listed
       * @since 1.13
       */
      protected List(java.lang.String tableId) {
        super(Fusiontables.this, "GET", REST_PATH, null, com.google.api.services.fusiontables.model.StyleSettingList.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** Table whose styles are being listed */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table whose styles are being listed
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table whose styles are being listed */
      public List setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Maximum number of styles to return. Optional. Default is 5. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of styles to return. Optional. Default is 5.

     [minimum: 0]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of styles to return. Optional. Default is 5. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Continuation token specifying which result page to return. Optional. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Continuation token specifying which result page to return. Optional.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Continuation token specifying which result page to return. Optional. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates an existing style. This method supports patch semantics.
     *
     * Create a request for the method "style.patch".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param tableId Table whose style is being updated.
     * @param styleId Identifier (within a table) for the style being updated.
     * @param content the {@link com.google.api.services.fusiontables.model.StyleSetting}
     * @return the request
     */
    public Patch patch(java.lang.String tableId, java.lang.Integer styleId, com.google.api.services.fusiontables.model.StyleSetting content) throws java.io.IOException {
      Patch result = new Patch(tableId, styleId, content);
      initialize(result);
      return result;
    }

    public class Patch extends FusiontablesRequest<com.google.api.services.fusiontables.model.StyleSetting> {

      private static final String REST_PATH = "tables/{tableId}/styles/{styleId}";

      /**
       * Updates an existing style. This method supports patch semantics.
       *
       * Create a request for the method "style.patch".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table whose style is being updated.
       * @param styleId Identifier (within a table) for the style being updated.
       * @param content the {@link com.google.api.services.fusiontables.model.StyleSetting}
       * @since 1.13
       */
      protected Patch(java.lang.String tableId, java.lang.Integer styleId, com.google.api.services.fusiontables.model.StyleSetting content) {
        super(Fusiontables.this, "PATCH", REST_PATH, content, com.google.api.services.fusiontables.model.StyleSetting.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.styleId = com.google.api.client.util.Preconditions.checkNotNull(styleId, "Required parameter styleId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** Table whose style is being updated. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table whose style is being updated.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table whose style is being updated. */
      public Patch setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Identifier (within a table) for the style being updated. */
      @com.google.api.client.util.Key
      private java.lang.Integer styleId;

      /** Identifier (within a table) for the style being updated.
       */
      public java.lang.Integer getStyleId() {
        return styleId;
      }

      /** Identifier (within a table) for the style being updated. */
      public Patch setStyleId(java.lang.Integer styleId) {
        this.styleId = styleId;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Updates an existing style.
     *
     * Create a request for the method "style.update".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param tableId Table whose style is being updated.
     * @param styleId Identifier (within a table) for the style being updated.
     * @param content the {@link com.google.api.services.fusiontables.model.StyleSetting}
     * @return the request
     */
    public Update update(java.lang.String tableId, java.lang.Integer styleId, com.google.api.services.fusiontables.model.StyleSetting content) throws java.io.IOException {
      Update result = new Update(tableId, styleId, content);
      initialize(result);
      return result;
    }

    public class Update extends FusiontablesRequest<com.google.api.services.fusiontables.model.StyleSetting> {

      private static final String REST_PATH = "tables/{tableId}/styles/{styleId}";

      /**
       * Updates an existing style.
       *
       * Create a request for the method "style.update".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table whose style is being updated.
       * @param styleId Identifier (within a table) for the style being updated.
       * @param content the {@link com.google.api.services.fusiontables.model.StyleSetting}
       * @since 1.13
       */
      protected Update(java.lang.String tableId, java.lang.Integer styleId, com.google.api.services.fusiontables.model.StyleSetting content) {
        super(Fusiontables.this, "PUT", REST_PATH, content, com.google.api.services.fusiontables.model.StyleSetting.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.styleId = com.google.api.client.util.Preconditions.checkNotNull(styleId, "Required parameter styleId must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** Table whose style is being updated. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table whose style is being updated.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table whose style is being updated. */
      public Update setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Identifier (within a table) for the style being updated. */
      @com.google.api.client.util.Key
      private java.lang.Integer styleId;

      /** Identifier (within a table) for the style being updated.
       */
      public java.lang.Integer getStyleId() {
        return styleId;
      }

      /** Identifier (within a table) for the style being updated. */
      public Update setStyleId(java.lang.Integer styleId) {
        this.styleId = styleId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Table collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Fusiontables fusiontables = new Fusiontables(...);}
   *   {@code Fusiontables.Table.List request = fusiontables.table().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Table table() {
    return new Table();
  }

  /**
   * The "table" collection of methods.
   */
  public class Table {

    /**
     * Copies a table.
     *
     * Create a request for the method "table.copy".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Copy#execute()} method to invoke the remote operation.
     *
     * @param tableId ID of the table that is being copied.
     * @return the request
     */
    public Copy copy(java.lang.String tableId) throws java.io.IOException {
      Copy result = new Copy(tableId);
      initialize(result);
      return result;
    }

    public class Copy extends FusiontablesRequest<com.google.api.services.fusiontables.model.Table> {

      private static final String REST_PATH = "tables/{tableId}/copy";

      /**
       * Copies a table.
       *
       * Create a request for the method "table.copy".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Copy#execute()} method to invoke the remote operation. <p>
       * {@link Copy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId ID of the table that is being copied.
       * @since 1.13
       */
      protected Copy(java.lang.String tableId) {
        super(Fusiontables.this, "POST", REST_PATH, null, com.google.api.services.fusiontables.model.Table.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
      }

      @Override
      public Copy setAlt(java.lang.String alt) {
        return (Copy) super.setAlt(alt);
      }

      @Override
      public Copy setFields(java.lang.String fields) {
        return (Copy) super.setFields(fields);
      }

      @Override
      public Copy setKey(java.lang.String key) {
        return (Copy) super.setKey(key);
      }

      @Override
      public Copy setOauthToken(java.lang.String oauthToken) {
        return (Copy) super.setOauthToken(oauthToken);
      }

      @Override
      public Copy setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Copy) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Copy setQuotaUser(java.lang.String quotaUser) {
        return (Copy) super.setQuotaUser(quotaUser);
      }

      @Override
      public Copy setUserIp(java.lang.String userIp) {
        return (Copy) super.setUserIp(userIp);
      }

      /** ID of the table that is being copied. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** ID of the table that is being copied.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** ID of the table that is being copied. */
      public Copy setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Whether to also copy tabs, styles, and templates. Default is false. */
      @com.google.api.client.util.Key
      private java.lang.Boolean copyPresentation;

      /** Whether to also copy tabs, styles, and templates. Default is false.
       */
      public java.lang.Boolean getCopyPresentation() {
        return copyPresentation;
      }

      /** Whether to also copy tabs, styles, and templates. Default is false. */
      public Copy setCopyPresentation(java.lang.Boolean copyPresentation) {
        this.copyPresentation = copyPresentation;
        return this;
      }

      @Override
      public Copy set(String parameterName, Object value) {
        return (Copy) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a table.
     *
     * Create a request for the method "table.delete".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param tableId ID of the table that is being deleted.
     * @return the request
     */
    public Delete delete(java.lang.String tableId) throws java.io.IOException {
      Delete result = new Delete(tableId);
      initialize(result);
      return result;
    }

    public class Delete extends FusiontablesRequest<Void> {

      private static final String REST_PATH = "tables/{tableId}";

      /**
       * Deletes a table.
       *
       * Create a request for the method "table.delete".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId ID of the table that is being deleted.
       * @since 1.13
       */
      protected Delete(java.lang.String tableId) {
        super(Fusiontables.this, "DELETE", REST_PATH, null, Void.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** ID of the table that is being deleted. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** ID of the table that is being deleted.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** ID of the table that is being deleted. */
      public Delete setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a specific table by its id.
     *
     * Create a request for the method "table.get".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param tableId Identifier(ID) for the table being requested.
     * @return the request
     */
    public Get get(java.lang.String tableId) throws java.io.IOException {
      Get result = new Get(tableId);
      initialize(result);
      return result;
    }

    public class Get extends FusiontablesRequest<com.google.api.services.fusiontables.model.Table> {

      private static final String REST_PATH = "tables/{tableId}";

      /**
       * Retrieves a specific table by its id.
       *
       * Create a request for the method "table.get".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Identifier(ID) for the table being requested.
       * @since 1.13
       */
      protected Get(java.lang.String tableId) {
        super(Fusiontables.this, "GET", REST_PATH, null, com.google.api.services.fusiontables.model.Table.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Identifier(ID) for the table being requested. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Identifier(ID) for the table being requested.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Identifier(ID) for the table being requested. */
      public Get setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Import more rows into a table.
     *
     * Create a request for the method "table.importRows".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link ImportRows#execute()} method to invoke the remote operation.
     *
     * @param tableId The table into which new rows are being imported.
     * @return the request
     */
    public ImportRows importRows(java.lang.String tableId) throws java.io.IOException {
      ImportRows result = new ImportRows(tableId);
      initialize(result);
      return result;
    }

    /**
     * Import more rows into a table.
     *
     * Create a request for the method "table.importRows".
     *
     * This request holds the parameters needed by the the fusiontables server.  After setting any
     * optional parameters, call the {@link ImportRows#execute()} method to invoke the remote operation.
     *
     * <p>
     * This method should be used for uploading media content.
     * </p>
     *
     * @param tableId The table into which new rows are being imported.
     * @param mediaContent The media HTTP content or {@code null} if none.
     * @return the request
     * @throws java.io.IOException if the initialization of the request fails
     */
    public ImportRows importRows(java.lang.String tableId, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
      ImportRows result = new ImportRows(tableId, mediaContent);
      initialize(result);
      return result;
    }

    public class ImportRows extends FusiontablesRequest<com.google.api.services.fusiontables.model.FusiontablesImport> {

      private static final String REST_PATH = "tables/{tableId}/import";

      /**
       * Import more rows into a table.
       *
       * Create a request for the method "table.importRows".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link ImportRows#execute()} method to invoke the remote
       * operation. <p> {@link
       * ImportRows#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId The table into which new rows are being imported.
       * @since 1.13
       */
      protected ImportRows(java.lang.String tableId) {
        super(Fusiontables.this, "POST", REST_PATH, null, com.google.api.services.fusiontables.model.FusiontablesImport.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
      }

      /**
       * Import more rows into a table.
       *
       * Create a request for the method "table.importRows".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link ImportRows#execute()} method to invoke the remote
       * operation. <p> {@link
       * ImportRows#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * <p>
       * This constructor should be used for uploading media content.
       * </p>
       *
       * @param tableId The table into which new rows are being imported.
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @since 1.13
       */
      protected ImportRows(java.lang.String tableId, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
        super(Fusiontables.this, "POST", "/upload/" + getServicePath() + REST_PATH, null, com.google.api.services.fusiontables.model.FusiontablesImport.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        initializeMediaUpload(mediaContent);
      }

      @Override
      public ImportRows setAlt(java.lang.String alt) {
        return (ImportRows) super.setAlt(alt);
      }

      @Override
      public ImportRows setFields(java.lang.String fields) {
        return (ImportRows) super.setFields(fields);
      }

      @Override
      public ImportRows setKey(java.lang.String key) {
        return (ImportRows) super.setKey(key);
      }

      @Override
      public ImportRows setOauthToken(java.lang.String oauthToken) {
        return (ImportRows) super.setOauthToken(oauthToken);
      }

      @Override
      public ImportRows setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ImportRows) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ImportRows setQuotaUser(java.lang.String quotaUser) {
        return (ImportRows) super.setQuotaUser(quotaUser);
      }

      @Override
      public ImportRows setUserIp(java.lang.String userIp) {
        return (ImportRows) super.setUserIp(userIp);
      }

      /** The table into which new rows are being imported. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** The table into which new rows are being imported.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** The table into which new rows are being imported. */
      public ImportRows setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /**
       * The delimiter used to separate cell values. This can only consist of a single character.
       * Default is ','.
       */
      @com.google.api.client.util.Key
      private java.lang.String delimiter;

      /** The delimiter used to separate cell values. This can only consist of a single character. Default is
     ','.
       */
      public java.lang.String getDelimiter() {
        return delimiter;
      }

      /**
       * The delimiter used to separate cell values. This can only consist of a single character.
       * Default is ','.
       */
      public ImportRows setDelimiter(java.lang.String delimiter) {
        this.delimiter = delimiter;
        return this;
      }

      /**
       * The encoding of the content. Default is UTF-8. Use 'auto-detect' if you are unsure of the
       * encoding.
       */
      @com.google.api.client.util.Key
      private java.lang.String encoding;

      /** The encoding of the content. Default is UTF-8. Use 'auto-detect' if you are unsure of the encoding.
       */
      public java.lang.String getEncoding() {
        return encoding;
      }

      /**
       * The encoding of the content. Default is UTF-8. Use 'auto-detect' if you are unsure of the
       * encoding.
       */
      public ImportRows setEncoding(java.lang.String encoding) {
        this.encoding = encoding;
        return this;
      }

      /**
       * The index of the last line from which to start importing, exclusive. Thus, the number of
       * imported lines is endLine - startLine. If this parameter is not provided, the file will be
       * imported until the last line of the file. If endLine is negative, then the imported content
       * will exclude the last endLine lines. That is, if endline is negative, no line will be
       * imported whose index is greater than N + endLine where N is the number of lines in the
       * file, and the number of imported lines will be N + endLine - startLine.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer endLine;

      /** The index of the last line from which to start importing, exclusive. Thus, the number of imported
     lines is endLine - startLine. If this parameter is not provided, the file will be imported until
     the last line of the file. If endLine is negative, then the imported content will exclude the last
     endLine lines. That is, if endline is negative, no line will be imported whose index is greater
     than N + endLine where N is the number of lines in the file, and the number of imported lines will
     be N + endLine - startLine.
       */
      public java.lang.Integer getEndLine() {
        return endLine;
      }

      /**
       * The index of the last line from which to start importing, exclusive. Thus, the number of
       * imported lines is endLine - startLine. If this parameter is not provided, the file will be
       * imported until the last line of the file. If endLine is negative, then the imported content
       * will exclude the last endLine lines. That is, if endline is negative, no line will be
       * imported whose index is greater than N + endLine where N is the number of lines in the
       * file, and the number of imported lines will be N + endLine - startLine.
       */
      public ImportRows setEndLine(java.lang.Integer endLine) {
        this.endLine = endLine;
        return this;
      }

      /**
       * Whether the CSV must have the same number of values for each row. If false, rows with fewer
       * values will be padded with empty values. Default is true.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean isStrict;

      /** Whether the CSV must have the same number of values for each row. If false, rows with fewer values
     will be padded with empty values. Default is true.
       */
      public java.lang.Boolean getIsStrict() {
        return isStrict;
      }

      /**
       * Whether the CSV must have the same number of values for each row. If false, rows with fewer
       * values will be padded with empty values. Default is true.
       */
      public ImportRows setIsStrict(java.lang.Boolean isStrict) {
        this.isStrict = isStrict;
        return this;
      }

      /** The index of the first line from which to start importing, inclusive. Default is 0. */
      @com.google.api.client.util.Key
      private java.lang.Integer startLine;

      /** The index of the first line from which to start importing, inclusive. Default is 0.
       */
      public java.lang.Integer getStartLine() {
        return startLine;
      }

      /** The index of the first line from which to start importing, inclusive. Default is 0. */
      public ImportRows setStartLine(java.lang.Integer startLine) {
        this.startLine = startLine;
        return this;
      }

      @Override
      public ImportRows set(String parameterName, Object value) {
        return (ImportRows) super.set(parameterName, value);
      }
    }
    /**
     * Import a new table.
     *
     * Create a request for the method "table.importTable".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link ImportTable#execute()} method to invoke the remote operation.
     *
     * @param name The name to be assigned to the new table.
     * @return the request
     */
    public ImportTable importTable(java.lang.String name) throws java.io.IOException {
      ImportTable result = new ImportTable(name);
      initialize(result);
      return result;
    }

    /**
     * Import a new table.
     *
     * Create a request for the method "table.importTable".
     *
     * This request holds the parameters needed by the the fusiontables server.  After setting any
     * optional parameters, call the {@link ImportTable#execute()} method to invoke the remote
     * operation.
     *
     * <p>
     * This method should be used for uploading media content.
     * </p>
     *
     * @param name The name to be assigned to the new table.
     * @param mediaContent The media HTTP content or {@code null} if none.
     * @return the request
     * @throws java.io.IOException if the initialization of the request fails
     */
    public ImportTable importTable(java.lang.String name, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
      ImportTable result = new ImportTable(name, mediaContent);
      initialize(result);
      return result;
    }

    public class ImportTable extends FusiontablesRequest<com.google.api.services.fusiontables.model.Table> {

      private static final String REST_PATH = "tables/import";

      /**
       * Import a new table.
       *
       * Create a request for the method "table.importTable".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link ImportTable#execute()} method to invoke the remote
       * operation. <p> {@link
       * ImportTable#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name The name to be assigned to the new table.
       * @since 1.13
       */
      protected ImportTable(java.lang.String name) {
        super(Fusiontables.this, "POST", REST_PATH, null, com.google.api.services.fusiontables.model.Table.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
      }

      /**
       * Import a new table.
       *
       * Create a request for the method "table.importTable".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link ImportTable#execute()} method to invoke the remote
       * operation. <p> {@link
       * ImportTable#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * <p>
       * This constructor should be used for uploading media content.
       * </p>
       *
       * @param name The name to be assigned to the new table.
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @since 1.13
       */
      protected ImportTable(java.lang.String name, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
        super(Fusiontables.this, "POST", "/upload/" + getServicePath() + REST_PATH, null, com.google.api.services.fusiontables.model.Table.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        initializeMediaUpload(mediaContent);
      }

      @Override
      public ImportTable setAlt(java.lang.String alt) {
        return (ImportTable) super.setAlt(alt);
      }

      @Override
      public ImportTable setFields(java.lang.String fields) {
        return (ImportTable) super.setFields(fields);
      }

      @Override
      public ImportTable setKey(java.lang.String key) {
        return (ImportTable) super.setKey(key);
      }

      @Override
      public ImportTable setOauthToken(java.lang.String oauthToken) {
        return (ImportTable) super.setOauthToken(oauthToken);
      }

      @Override
      public ImportTable setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ImportTable) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ImportTable setQuotaUser(java.lang.String quotaUser) {
        return (ImportTable) super.setQuotaUser(quotaUser);
      }

      @Override
      public ImportTable setUserIp(java.lang.String userIp) {
        return (ImportTable) super.setUserIp(userIp);
      }

      /** The name to be assigned to the new table. */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The name to be assigned to the new table.
       */
      public java.lang.String getName() {
        return name;
      }

      /** The name to be assigned to the new table. */
      public ImportTable setName(java.lang.String name) {
        this.name = name;
        return this;
      }

      /**
       * The delimiter used to separate cell values. This can only consist of a single character.
       * Default is ','.
       */
      @com.google.api.client.util.Key
      private java.lang.String delimiter;

      /** The delimiter used to separate cell values. This can only consist of a single character. Default is
     ','.
       */
      public java.lang.String getDelimiter() {
        return delimiter;
      }

      /**
       * The delimiter used to separate cell values. This can only consist of a single character.
       * Default is ','.
       */
      public ImportTable setDelimiter(java.lang.String delimiter) {
        this.delimiter = delimiter;
        return this;
      }

      /**
       * The encoding of the content. Default is UTF-8. Use 'auto-detect' if you are unsure of the
       * encoding.
       */
      @com.google.api.client.util.Key
      private java.lang.String encoding;

      /** The encoding of the content. Default is UTF-8. Use 'auto-detect' if you are unsure of the encoding.
       */
      public java.lang.String getEncoding() {
        return encoding;
      }

      /**
       * The encoding of the content. Default is UTF-8. Use 'auto-detect' if you are unsure of the
       * encoding.
       */
      public ImportTable setEncoding(java.lang.String encoding) {
        this.encoding = encoding;
        return this;
      }

      @Override
      public ImportTable set(String parameterName, Object value) {
        return (ImportTable) super.set(parameterName, value);
      }
    }
    /**
     * Creates a new table.
     *
     * Create a request for the method "table.insert".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.fusiontables.model.Table}
     * @return the request
     */
    public Insert insert(com.google.api.services.fusiontables.model.Table content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends FusiontablesRequest<com.google.api.services.fusiontables.model.Table> {

      private static final String REST_PATH = "tables";

      /**
       * Creates a new table.
       *
       * Create a request for the method "table.insert".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.fusiontables.model.Table}
       * @since 1.13
       */
      protected Insert(com.google.api.services.fusiontables.model.Table content) {
        super(Fusiontables.this, "POST", REST_PATH, content, com.google.api.services.fusiontables.model.Table.class);
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getIsExportable(), "Table.getIsExportable()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getName(), "Table.getName()");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of tables a user owns.
     *
     * Create a request for the method "table.list".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends FusiontablesRequest<com.google.api.services.fusiontables.model.TableList> {

      private static final String REST_PATH = "tables";

      /**
       * Retrieves a list of tables a user owns.
       *
       * Create a request for the method "table.list".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Fusiontables.this, "GET", REST_PATH, null, com.google.api.services.fusiontables.model.TableList.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** Maximum number of styles to return. Optional. Default is 5. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of styles to return. Optional. Default is 5.

     [minimum: 0]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of styles to return. Optional. Default is 5. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Continuation token specifying which result page to return. Optional. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Continuation token specifying which result page to return. Optional.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Continuation token specifying which result page to return. Optional. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates an existing table. Unless explicitly requested, only the name, description, and
     * attribution will be updated. This method supports patch semantics.
     *
     * Create a request for the method "table.patch".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param tableId ID of the table that is being updated.
     * @param content the {@link com.google.api.services.fusiontables.model.Table}
     * @return the request
     */
    public Patch patch(java.lang.String tableId, com.google.api.services.fusiontables.model.Table content) throws java.io.IOException {
      Patch result = new Patch(tableId, content);
      initialize(result);
      return result;
    }

    public class Patch extends FusiontablesRequest<com.google.api.services.fusiontables.model.Table> {

      private static final String REST_PATH = "tables/{tableId}";

      /**
       * Updates an existing table. Unless explicitly requested, only the name, description, and
       * attribution will be updated. This method supports patch semantics.
       *
       * Create a request for the method "table.patch".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId ID of the table that is being updated.
       * @param content the {@link com.google.api.services.fusiontables.model.Table}
       * @since 1.13
       */
      protected Patch(java.lang.String tableId, com.google.api.services.fusiontables.model.Table content) {
        super(Fusiontables.this, "PATCH", REST_PATH, content, com.google.api.services.fusiontables.model.Table.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** ID of the table that is being updated. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** ID of the table that is being updated.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** ID of the table that is being updated. */
      public Patch setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /**
       * Should the view definition also be updated? The specified view definition replaces the
       * existing one. Only a view can be updated with a new definition.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean replaceViewDefinition;

      /** Should the view definition also be updated? The specified view definition replaces the existing
     one. Only a view can be updated with a new definition.
       */
      public java.lang.Boolean getReplaceViewDefinition() {
        return replaceViewDefinition;
      }

      /**
       * Should the view definition also be updated? The specified view definition replaces the
       * existing one. Only a view can be updated with a new definition.
       */
      public Patch setReplaceViewDefinition(java.lang.Boolean replaceViewDefinition) {
        this.replaceViewDefinition = replaceViewDefinition;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Updates an existing table. Unless explicitly requested, only the name, description, and
     * attribution will be updated.
     *
     * Create a request for the method "table.update".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param tableId ID of the table that is being updated.
     * @param content the {@link com.google.api.services.fusiontables.model.Table}
     * @return the request
     */
    public Update update(java.lang.String tableId, com.google.api.services.fusiontables.model.Table content) throws java.io.IOException {
      Update result = new Update(tableId, content);
      initialize(result);
      return result;
    }

    public class Update extends FusiontablesRequest<com.google.api.services.fusiontables.model.Table> {

      private static final String REST_PATH = "tables/{tableId}";

      /**
       * Updates an existing table. Unless explicitly requested, only the name, description, and
       * attribution will be updated.
       *
       * Create a request for the method "table.update".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId ID of the table that is being updated.
       * @param content the {@link com.google.api.services.fusiontables.model.Table}
       * @since 1.13
       */
      protected Update(java.lang.String tableId, com.google.api.services.fusiontables.model.Table content) {
        super(Fusiontables.this, "PUT", REST_PATH, content, com.google.api.services.fusiontables.model.Table.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getIsExportable(), "Table.getIsExportable()");
        checkRequiredParameter(content, "content");
        checkRequiredParameter(content.getName(), "Table.getName()");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** ID of the table that is being updated. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** ID of the table that is being updated.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** ID of the table that is being updated. */
      public Update setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /**
       * Should the view definition also be updated? The specified view definition replaces the
       * existing one. Only a view can be updated with a new definition.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean replaceViewDefinition;

      /** Should the view definition also be updated? The specified view definition replaces the existing
     one. Only a view can be updated with a new definition.
       */
      public java.lang.Boolean getReplaceViewDefinition() {
        return replaceViewDefinition;
      }

      /**
       * Should the view definition also be updated? The specified view definition replaces the
       * existing one. Only a view can be updated with a new definition.
       */
      public Update setReplaceViewDefinition(java.lang.Boolean replaceViewDefinition) {
        this.replaceViewDefinition = replaceViewDefinition;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Task collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Fusiontables fusiontables = new Fusiontables(...);}
   *   {@code Fusiontables.Task.List request = fusiontables.task().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Task task() {
    return new Task();
  }

  /**
   * The "task" collection of methods.
   */
  public class Task {

    /**
     * Deletes the task, unless already started.
     *
     * Create a request for the method "task.delete".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param tableId Table from which the task is being deleted.
     * @param taskId
     * @return the request
     */
    public Delete delete(java.lang.String tableId, java.lang.String taskId) throws java.io.IOException {
      Delete result = new Delete(tableId, taskId);
      initialize(result);
      return result;
    }

    public class Delete extends FusiontablesRequest<Void> {

      private static final String REST_PATH = "tables/{tableId}/tasks/{taskId}";

      /**
       * Deletes the task, unless already started.
       *
       * Create a request for the method "task.delete".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table from which the task is being deleted.
       * @param taskId
       * @since 1.13
       */
      protected Delete(java.lang.String tableId, java.lang.String taskId) {
        super(Fusiontables.this, "DELETE", REST_PATH, null, Void.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.taskId = com.google.api.client.util.Preconditions.checkNotNull(taskId, "Required parameter taskId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** Table from which the task is being deleted. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table from which the task is being deleted.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table from which the task is being deleted. */
      public Delete setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String taskId;

      /**

       */
      public java.lang.String getTaskId() {
        return taskId;
      }

      public Delete setTaskId(java.lang.String taskId) {
        this.taskId = taskId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a specific task by its id.
     *
     * Create a request for the method "task.get".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param tableId Table to which the task belongs.
     * @param taskId
     * @return the request
     */
    public Get get(java.lang.String tableId, java.lang.String taskId) throws java.io.IOException {
      Get result = new Get(tableId, taskId);
      initialize(result);
      return result;
    }

    public class Get extends FusiontablesRequest<com.google.api.services.fusiontables.model.Task> {

      private static final String REST_PATH = "tables/{tableId}/tasks/{taskId}";

      /**
       * Retrieves a specific task by its id.
       *
       * Create a request for the method "task.get".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table to which the task belongs.
       * @param taskId
       * @since 1.13
       */
      protected Get(java.lang.String tableId, java.lang.String taskId) {
        super(Fusiontables.this, "GET", REST_PATH, null, com.google.api.services.fusiontables.model.Task.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.taskId = com.google.api.client.util.Preconditions.checkNotNull(taskId, "Required parameter taskId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Table to which the task belongs. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table to which the task belongs.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table to which the task belongs. */
      public Get setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String taskId;

      /**

       */
      public java.lang.String getTaskId() {
        return taskId;
      }

      public Get setTaskId(java.lang.String taskId) {
        this.taskId = taskId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of tasks.
     *
     * Create a request for the method "task.list".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param tableId Table whose tasks are being listed.
     * @return the request
     */
    public List list(java.lang.String tableId) throws java.io.IOException {
      List result = new List(tableId);
      initialize(result);
      return result;
    }

    public class List extends FusiontablesRequest<com.google.api.services.fusiontables.model.TaskList> {

      private static final String REST_PATH = "tables/{tableId}/tasks";

      /**
       * Retrieves a list of tasks.
       *
       * Create a request for the method "task.list".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table whose tasks are being listed.
       * @since 1.13
       */
      protected List(java.lang.String tableId) {
        super(Fusiontables.this, "GET", REST_PATH, null, com.google.api.services.fusiontables.model.TaskList.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** Table whose tasks are being listed. */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table whose tasks are being listed.
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table whose tasks are being listed. */
      public List setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Maximum number of columns to return. Optional. Default is 5. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of columns to return. Optional. Default is 5.

     [minimum: 0]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of columns to return. Optional. Default is 5. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /**

       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long startIndex;

      /**

       */
      public java.lang.Long getStartIndex() {
        return startIndex;
      }

      public List setStartIndex(java.lang.Long startIndex) {
        this.startIndex = startIndex;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Template collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Fusiontables fusiontables = new Fusiontables(...);}
   *   {@code Fusiontables.Template.List request = fusiontables.template().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Template template() {
    return new Template();
  }

  /**
   * The "template" collection of methods.
   */
  public class Template {

    /**
     * Deletes a template
     *
     * Create a request for the method "template.delete".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param tableId Table from which the template is being deleted
     * @param templateId Identifier for the template which is being deleted
     * @return the request
     */
    public Delete delete(java.lang.String tableId, java.lang.Integer templateId) throws java.io.IOException {
      Delete result = new Delete(tableId, templateId);
      initialize(result);
      return result;
    }

    public class Delete extends FusiontablesRequest<Void> {

      private static final String REST_PATH = "tables/{tableId}/templates/{templateId}";

      /**
       * Deletes a template
       *
       * Create a request for the method "template.delete".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table from which the template is being deleted
       * @param templateId Identifier for the template which is being deleted
       * @since 1.13
       */
      protected Delete(java.lang.String tableId, java.lang.Integer templateId) {
        super(Fusiontables.this, "DELETE", REST_PATH, null, Void.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.templateId = com.google.api.client.util.Preconditions.checkNotNull(templateId, "Required parameter templateId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** Table from which the template is being deleted */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table from which the template is being deleted
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table from which the template is being deleted */
      public Delete setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Identifier for the template which is being deleted */
      @com.google.api.client.util.Key
      private java.lang.Integer templateId;

      /** Identifier for the template which is being deleted
       */
      public java.lang.Integer getTemplateId() {
        return templateId;
      }

      /** Identifier for the template which is being deleted */
      public Delete setTemplateId(java.lang.Integer templateId) {
        this.templateId = templateId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a specific template by its id
     *
     * Create a request for the method "template.get".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param tableId Table to which the template belongs
     * @param templateId Identifier for the template that is being requested
     * @return the request
     */
    public Get get(java.lang.String tableId, java.lang.Integer templateId) throws java.io.IOException {
      Get result = new Get(tableId, templateId);
      initialize(result);
      return result;
    }

    public class Get extends FusiontablesRequest<com.google.api.services.fusiontables.model.Template> {

      private static final String REST_PATH = "tables/{tableId}/templates/{templateId}";

      /**
       * Retrieves a specific template by its id
       *
       * Create a request for the method "template.get".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table to which the template belongs
       * @param templateId Identifier for the template that is being requested
       * @since 1.13
       */
      protected Get(java.lang.String tableId, java.lang.Integer templateId) {
        super(Fusiontables.this, "GET", REST_PATH, null, com.google.api.services.fusiontables.model.Template.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.templateId = com.google.api.client.util.Preconditions.checkNotNull(templateId, "Required parameter templateId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Table to which the template belongs */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table to which the template belongs
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table to which the template belongs */
      public Get setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Identifier for the template that is being requested */
      @com.google.api.client.util.Key
      private java.lang.Integer templateId;

      /** Identifier for the template that is being requested
       */
      public java.lang.Integer getTemplateId() {
        return templateId;
      }

      /** Identifier for the template that is being requested */
      public Get setTemplateId(java.lang.Integer templateId) {
        this.templateId = templateId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Creates a new template for the table.
     *
     * Create a request for the method "template.insert".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param tableId Table for which a new template is being created
     * @param content the {@link com.google.api.services.fusiontables.model.Template}
     * @return the request
     */
    public Insert insert(java.lang.String tableId, com.google.api.services.fusiontables.model.Template content) throws java.io.IOException {
      Insert result = new Insert(tableId, content);
      initialize(result);
      return result;
    }

    public class Insert extends FusiontablesRequest<com.google.api.services.fusiontables.model.Template> {

      private static final String REST_PATH = "tables/{tableId}/templates";

      /**
       * Creates a new template for the table.
       *
       * Create a request for the method "template.insert".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table for which a new template is being created
       * @param content the {@link com.google.api.services.fusiontables.model.Template}
       * @since 1.13
       */
      protected Insert(java.lang.String tableId, com.google.api.services.fusiontables.model.Template content) {
        super(Fusiontables.this, "POST", REST_PATH, content, com.google.api.services.fusiontables.model.Template.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** Table for which a new template is being created */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table for which a new template is being created
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table for which a new template is being created */
      public Insert setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a list of templates.
     *
     * Create a request for the method "template.list".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param tableId Identifier for the table whose templates are being requested
     * @return the request
     */
    public List list(java.lang.String tableId) throws java.io.IOException {
      List result = new List(tableId);
      initialize(result);
      return result;
    }

    public class List extends FusiontablesRequest<com.google.api.services.fusiontables.model.TemplateList> {

      private static final String REST_PATH = "tables/{tableId}/templates";

      /**
       * Retrieves a list of templates.
       *
       * Create a request for the method "template.list".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Identifier for the table whose templates are being requested
       * @since 1.13
       */
      protected List(java.lang.String tableId) {
        super(Fusiontables.this, "GET", REST_PATH, null, com.google.api.services.fusiontables.model.TemplateList.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** Identifier for the table whose templates are being requested */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Identifier for the table whose templates are being requested
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Identifier for the table whose templates are being requested */
      public List setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Maximum number of templates to return. Optional. Default is 5. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of templates to return. Optional. Default is 5.

     [minimum: 0]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of templates to return. Optional. Default is 5. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Continuation token specifying which results page to return. Optional. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Continuation token specifying which results page to return. Optional.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Continuation token specifying which results page to return. Optional. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates an existing template. This method supports patch semantics.
     *
     * Create a request for the method "template.patch".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param tableId Table to which the updated template belongs
     * @param templateId Identifier for the template that is being updated
     * @param content the {@link com.google.api.services.fusiontables.model.Template}
     * @return the request
     */
    public Patch patch(java.lang.String tableId, java.lang.Integer templateId, com.google.api.services.fusiontables.model.Template content) throws java.io.IOException {
      Patch result = new Patch(tableId, templateId, content);
      initialize(result);
      return result;
    }

    public class Patch extends FusiontablesRequest<com.google.api.services.fusiontables.model.Template> {

      private static final String REST_PATH = "tables/{tableId}/templates/{templateId}";

      /**
       * Updates an existing template. This method supports patch semantics.
       *
       * Create a request for the method "template.patch".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table to which the updated template belongs
       * @param templateId Identifier for the template that is being updated
       * @param content the {@link com.google.api.services.fusiontables.model.Template}
       * @since 1.13
       */
      protected Patch(java.lang.String tableId, java.lang.Integer templateId, com.google.api.services.fusiontables.model.Template content) {
        super(Fusiontables.this, "PATCH", REST_PATH, content, com.google.api.services.fusiontables.model.Template.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.templateId = com.google.api.client.util.Preconditions.checkNotNull(templateId, "Required parameter templateId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** Table to which the updated template belongs */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table to which the updated template belongs
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table to which the updated template belongs */
      public Patch setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Identifier for the template that is being updated */
      @com.google.api.client.util.Key
      private java.lang.Integer templateId;

      /** Identifier for the template that is being updated
       */
      public java.lang.Integer getTemplateId() {
        return templateId;
      }

      /** Identifier for the template that is being updated */
      public Patch setTemplateId(java.lang.Integer templateId) {
        this.templateId = templateId;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Updates an existing template
     *
     * Create a request for the method "template.update".
     *
     * This request holds the parameters needed by the fusiontables server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param tableId Table to which the updated template belongs
     * @param templateId Identifier for the template that is being updated
     * @param content the {@link com.google.api.services.fusiontables.model.Template}
     * @return the request
     */
    public Update update(java.lang.String tableId, java.lang.Integer templateId, com.google.api.services.fusiontables.model.Template content) throws java.io.IOException {
      Update result = new Update(tableId, templateId, content);
      initialize(result);
      return result;
    }

    public class Update extends FusiontablesRequest<com.google.api.services.fusiontables.model.Template> {

      private static final String REST_PATH = "tables/{tableId}/templates/{templateId}";

      /**
       * Updates an existing template
       *
       * Create a request for the method "template.update".
       *
       * This request holds the parameters needed by the the fusiontables server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param tableId Table to which the updated template belongs
       * @param templateId Identifier for the template that is being updated
       * @param content the {@link com.google.api.services.fusiontables.model.Template}
       * @since 1.13
       */
      protected Update(java.lang.String tableId, java.lang.Integer templateId, com.google.api.services.fusiontables.model.Template content) {
        super(Fusiontables.this, "PUT", REST_PATH, content, com.google.api.services.fusiontables.model.Template.class);
        this.tableId = com.google.api.client.util.Preconditions.checkNotNull(tableId, "Required parameter tableId must be specified.");
        this.templateId = com.google.api.client.util.Preconditions.checkNotNull(templateId, "Required parameter templateId must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** Table to which the updated template belongs */
      @com.google.api.client.util.Key
      private java.lang.String tableId;

      /** Table to which the updated template belongs
       */
      public java.lang.String getTableId() {
        return tableId;
      }

      /** Table to which the updated template belongs */
      public Update setTableId(java.lang.String tableId) {
        this.tableId = tableId;
        return this;
      }

      /** Identifier for the template that is being updated */
      @com.google.api.client.util.Key
      private java.lang.Integer templateId;

      /** Identifier for the template that is being updated
       */
      public java.lang.Integer getTemplateId() {
        return templateId;
      }

      /** Identifier for the template that is being updated */
      public Update setTemplateId(java.lang.Integer templateId) {
        this.templateId = templateId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Fusiontables}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Fusiontables}. */
    @Override
    public Fusiontables build() {
      return new Fusiontables(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FusiontablesRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFusiontablesRequestInitializer(
        FusiontablesRequestInitializer fusiontablesRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(fusiontablesRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
