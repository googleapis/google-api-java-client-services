/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.netapp.v1.model;

/**
 * ActiveDirectory is the public representation of the active directory config.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the NetApp API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ActiveDirectory extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Users to be added to the Built-in Admininstrators group.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> administrators;

  /**
   * If enabled, AES encryption will be enabled for SMB communication.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean aesEncryption;

  /**
   * Optional. Users to be added to the Built-in Backup Operator active directory group.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> backupOperators;

  /**
   * Output only. Create time of the active directory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Description of the active directory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Required. Comma separated list of DNS server IP addresses for the Active Directory domain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dns;

  /**
   * Required. Name of the Active Directory domain
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String domain;

  /**
   * If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean encryptDcConnections;

  /**
   * Name of the active directory machine. This optional parameter is used only while creating
   * kerberos volume
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kdcHostname;

  /**
   * KDC server IP address for the active directory machine.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kdcIp;

  /**
   * Labels for the active directory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Specifies whether or not the LDAP traffic needs to be signed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean ldapSigning;

  /**
   * Identifier. The resource name of the active directory. Format:
   * `projects/{project_number}/locations/{location_id}/activeDirectories/{active_directory_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Required. NetBIOSPrefix is used as a prefix for SMB server name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String netBiosPrefix;

  /**
   * If enabled, will allow access to local users and LDAP users. If access is needed for only LDAP
   * users, it has to be disabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean nfsUsersWithLdap;

  /**
   * The Organizational Unit (OU) within the Windows Active Directory the user belongs to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String organizationalUnit;

  /**
   * Required. Password of the Active Directory domain administrator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String password;

  /**
   * Optional. Domain users to be given the SeSecurityPrivilege.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> securityOperators;

  /**
   * The Active Directory site the service will limit Domain Controller discovery too.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String site;

  /**
   * Output only. The state of the AD.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. The state details of the Active Directory.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stateDetails;

  /**
   * Required. Username of the Active Directory domain administrator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String username;

  /**
   * Optional. Users to be added to the Built-in Admininstrators group.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAdministrators() {
    return administrators;
  }

  /**
   * Optional. Users to be added to the Built-in Admininstrators group.
   * @param administrators administrators or {@code null} for none
   */
  public ActiveDirectory setAdministrators(java.util.List<java.lang.String> administrators) {
    this.administrators = administrators;
    return this;
  }

  /**
   * If enabled, AES encryption will be enabled for SMB communication.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAesEncryption() {
    return aesEncryption;
  }

  /**
   * If enabled, AES encryption will be enabled for SMB communication.
   * @param aesEncryption aesEncryption or {@code null} for none
   */
  public ActiveDirectory setAesEncryption(java.lang.Boolean aesEncryption) {
    this.aesEncryption = aesEncryption;
    return this;
  }

  /**
   * Optional. Users to be added to the Built-in Backup Operator active directory group.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getBackupOperators() {
    return backupOperators;
  }

  /**
   * Optional. Users to be added to the Built-in Backup Operator active directory group.
   * @param backupOperators backupOperators or {@code null} for none
   */
  public ActiveDirectory setBackupOperators(java.util.List<java.lang.String> backupOperators) {
    this.backupOperators = backupOperators;
    return this;
  }

  /**
   * Output only. Create time of the active directory.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Create time of the active directory.
   * @param createTime createTime or {@code null} for none
   */
  public ActiveDirectory setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Description of the active directory.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Description of the active directory.
   * @param description description or {@code null} for none
   */
  public ActiveDirectory setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Required. Comma separated list of DNS server IP addresses for the Active Directory domain.
   * @return value or {@code null} for none
   */
  public java.lang.String getDns() {
    return dns;
  }

  /**
   * Required. Comma separated list of DNS server IP addresses for the Active Directory domain.
   * @param dns dns or {@code null} for none
   */
  public ActiveDirectory setDns(java.lang.String dns) {
    this.dns = dns;
    return this;
  }

  /**
   * Required. Name of the Active Directory domain
   * @return value or {@code null} for none
   */
  public java.lang.String getDomain() {
    return domain;
  }

  /**
   * Required. Name of the Active Directory domain
   * @param domain domain or {@code null} for none
   */
  public ActiveDirectory setDomain(java.lang.String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEncryptDcConnections() {
    return encryptDcConnections;
  }

  /**
   * If enabled, traffic between the SMB server to Domain Controller (DC) will be encrypted.
   * @param encryptDcConnections encryptDcConnections or {@code null} for none
   */
  public ActiveDirectory setEncryptDcConnections(java.lang.Boolean encryptDcConnections) {
    this.encryptDcConnections = encryptDcConnections;
    return this;
  }

  /**
   * Name of the active directory machine. This optional parameter is used only while creating
   * kerberos volume
   * @return value or {@code null} for none
   */
  public java.lang.String getKdcHostname() {
    return kdcHostname;
  }

  /**
   * Name of the active directory machine. This optional parameter is used only while creating
   * kerberos volume
   * @param kdcHostname kdcHostname or {@code null} for none
   */
  public ActiveDirectory setKdcHostname(java.lang.String kdcHostname) {
    this.kdcHostname = kdcHostname;
    return this;
  }

  /**
   * KDC server IP address for the active directory machine.
   * @return value or {@code null} for none
   */
  public java.lang.String getKdcIp() {
    return kdcIp;
  }

  /**
   * KDC server IP address for the active directory machine.
   * @param kdcIp kdcIp or {@code null} for none
   */
  public ActiveDirectory setKdcIp(java.lang.String kdcIp) {
    this.kdcIp = kdcIp;
    return this;
  }

  /**
   * Labels for the active directory.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Labels for the active directory.
   * @param labels labels or {@code null} for none
   */
  public ActiveDirectory setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Specifies whether or not the LDAP traffic needs to be signed.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getLdapSigning() {
    return ldapSigning;
  }

  /**
   * Specifies whether or not the LDAP traffic needs to be signed.
   * @param ldapSigning ldapSigning or {@code null} for none
   */
  public ActiveDirectory setLdapSigning(java.lang.Boolean ldapSigning) {
    this.ldapSigning = ldapSigning;
    return this;
  }

  /**
   * Identifier. The resource name of the active directory. Format:
   * `projects/{project_number}/locations/{location_id}/activeDirectories/{active_directory_id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The resource name of the active directory. Format:
   * `projects/{project_number}/locations/{location_id}/activeDirectories/{active_directory_id}`.
   * @param name name or {@code null} for none
   */
  public ActiveDirectory setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. NetBIOSPrefix is used as a prefix for SMB server name.
   * @return value or {@code null} for none
   */
  public java.lang.String getNetBiosPrefix() {
    return netBiosPrefix;
  }

  /**
   * Required. NetBIOSPrefix is used as a prefix for SMB server name.
   * @param netBiosPrefix netBiosPrefix or {@code null} for none
   */
  public ActiveDirectory setNetBiosPrefix(java.lang.String netBiosPrefix) {
    this.netBiosPrefix = netBiosPrefix;
    return this;
  }

  /**
   * If enabled, will allow access to local users and LDAP users. If access is needed for only LDAP
   * users, it has to be disabled.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getNfsUsersWithLdap() {
    return nfsUsersWithLdap;
  }

  /**
   * If enabled, will allow access to local users and LDAP users. If access is needed for only LDAP
   * users, it has to be disabled.
   * @param nfsUsersWithLdap nfsUsersWithLdap or {@code null} for none
   */
  public ActiveDirectory setNfsUsersWithLdap(java.lang.Boolean nfsUsersWithLdap) {
    this.nfsUsersWithLdap = nfsUsersWithLdap;
    return this;
  }

  /**
   * The Organizational Unit (OU) within the Windows Active Directory the user belongs to.
   * @return value or {@code null} for none
   */
  public java.lang.String getOrganizationalUnit() {
    return organizationalUnit;
  }

  /**
   * The Organizational Unit (OU) within the Windows Active Directory the user belongs to.
   * @param organizationalUnit organizationalUnit or {@code null} for none
   */
  public ActiveDirectory setOrganizationalUnit(java.lang.String organizationalUnit) {
    this.organizationalUnit = organizationalUnit;
    return this;
  }

  /**
   * Required. Password of the Active Directory domain administrator.
   * @return value or {@code null} for none
   */
  public java.lang.String getPassword() {
    return password;
  }

  /**
   * Required. Password of the Active Directory domain administrator.
   * @param password password or {@code null} for none
   */
  public ActiveDirectory setPassword(java.lang.String password) {
    this.password = password;
    return this;
  }

  /**
   * Optional. Domain users to be given the SeSecurityPrivilege.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSecurityOperators() {
    return securityOperators;
  }

  /**
   * Optional. Domain users to be given the SeSecurityPrivilege.
   * @param securityOperators securityOperators or {@code null} for none
   */
  public ActiveDirectory setSecurityOperators(java.util.List<java.lang.String> securityOperators) {
    this.securityOperators = securityOperators;
    return this;
  }

  /**
   * The Active Directory site the service will limit Domain Controller discovery too.
   * @return value or {@code null} for none
   */
  public java.lang.String getSite() {
    return site;
  }

  /**
   * The Active Directory site the service will limit Domain Controller discovery too.
   * @param site site or {@code null} for none
   */
  public ActiveDirectory setSite(java.lang.String site) {
    this.site = site;
    return this;
  }

  /**
   * Output only. The state of the AD.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The state of the AD.
   * @param state state or {@code null} for none
   */
  public ActiveDirectory setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. The state details of the Active Directory.
   * @return value or {@code null} for none
   */
  public java.lang.String getStateDetails() {
    return stateDetails;
  }

  /**
   * Output only. The state details of the Active Directory.
   * @param stateDetails stateDetails or {@code null} for none
   */
  public ActiveDirectory setStateDetails(java.lang.String stateDetails) {
    this.stateDetails = stateDetails;
    return this;
  }

  /**
   * Required. Username of the Active Directory domain administrator.
   * @return value or {@code null} for none
   */
  public java.lang.String getUsername() {
    return username;
  }

  /**
   * Required. Username of the Active Directory domain administrator.
   * @param username username or {@code null} for none
   */
  public ActiveDirectory setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  @Override
  public ActiveDirectory set(String fieldName, Object value) {
    return (ActiveDirectory) super.set(fieldName, value);
  }

  @Override
  public ActiveDirectory clone() {
    return (ActiveDirectory) super.clone();
  }

}
