/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.gamesConfiguration;

/**
 * Service definition for GamesConfiguration (v1configuration).
 *
 * <p>
 * The Publishing API for Google Play Game Services.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/games/services" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link GamesConfigurationRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class GamesConfiguration extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Google Play Game Services Publishing API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "games/v1configuration/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch/gamesConfiguration/v1configuration";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public GamesConfiguration(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  GamesConfiguration(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the AchievementConfigurations collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code GamesConfiguration gamesConfiguration = new GamesConfiguration(...);}
   *   {@code GamesConfiguration.AchievementConfigurations.List request = gamesConfiguration.achievementConfigurations().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public AchievementConfigurations achievementConfigurations() {
    return new AchievementConfigurations();
  }

  /**
   * The "achievementConfigurations" collection of methods.
   */
  public class AchievementConfigurations {

    /**
     * Delete the achievement configuration with the given ID.
     *
     * Create a request for the method "achievementConfigurations.delete".
     *
     * This request holds the parameters needed by the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param achievementId The ID of the achievement used by this method.
     * @return the request
     */
    public Delete delete(java.lang.String achievementId) throws java.io.IOException {
      Delete result = new Delete(achievementId);
      initialize(result);
      return result;
    }

    public class Delete extends GamesConfigurationRequest<Void> {

      private static final String REST_PATH = "achievements/{achievementId}";

      /**
       * Delete the achievement configuration with the given ID.
       *
       * Create a request for the method "achievementConfigurations.delete".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
       * operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param achievementId The ID of the achievement used by this method.
       * @since 1.13
       */
      protected Delete(java.lang.String achievementId) {
        super(GamesConfiguration.this, "DELETE", REST_PATH, null, Void.class);
        this.achievementId = com.google.api.client.util.Preconditions.checkNotNull(achievementId, "Required parameter achievementId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** The ID of the achievement used by this method. */
      @com.google.api.client.util.Key
      private java.lang.String achievementId;

      /** The ID of the achievement used by this method.
       */
      public java.lang.String getAchievementId() {
        return achievementId;
      }

      /** The ID of the achievement used by this method. */
      public Delete setAchievementId(java.lang.String achievementId) {
        this.achievementId = achievementId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the metadata of the achievement configuration with the given ID.
     *
     * Create a request for the method "achievementConfigurations.get".
     *
     * This request holds the parameters needed by the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param achievementId The ID of the achievement used by this method.
     * @return the request
     */
    public Get get(java.lang.String achievementId) throws java.io.IOException {
      Get result = new Get(achievementId);
      initialize(result);
      return result;
    }

    public class Get extends GamesConfigurationRequest<com.google.api.services.gamesConfiguration.model.AchievementConfiguration> {

      private static final String REST_PATH = "achievements/{achievementId}";

      /**
       * Retrieves the metadata of the achievement configuration with the given ID.
       *
       * Create a request for the method "achievementConfigurations.get".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       * <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param achievementId The ID of the achievement used by this method.
       * @since 1.13
       */
      protected Get(java.lang.String achievementId) {
        super(GamesConfiguration.this, "GET", REST_PATH, null, com.google.api.services.gamesConfiguration.model.AchievementConfiguration.class);
        this.achievementId = com.google.api.client.util.Preconditions.checkNotNull(achievementId, "Required parameter achievementId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The ID of the achievement used by this method. */
      @com.google.api.client.util.Key
      private java.lang.String achievementId;

      /** The ID of the achievement used by this method.
       */
      public java.lang.String getAchievementId() {
        return achievementId;
      }

      /** The ID of the achievement used by this method. */
      public Get setAchievementId(java.lang.String achievementId) {
        this.achievementId = achievementId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Insert a new achievement configuration in this application.
     *
     * Create a request for the method "achievementConfigurations.insert".
     *
     * This request holds the parameters needed by the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param applicationId The application ID from the Google Play developer console.
     * @param content the {@link com.google.api.services.gamesConfiguration.model.AchievementConfiguration}
     * @return the request
     */
    public Insert insert(java.lang.String applicationId, com.google.api.services.gamesConfiguration.model.AchievementConfiguration content) throws java.io.IOException {
      Insert result = new Insert(applicationId, content);
      initialize(result);
      return result;
    }

    public class Insert extends GamesConfigurationRequest<com.google.api.services.gamesConfiguration.model.AchievementConfiguration> {

      private static final String REST_PATH = "applications/{applicationId}/achievements";

      /**
       * Insert a new achievement configuration in this application.
       *
       * Create a request for the method "achievementConfigurations.insert".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link Insert#execute()} method to invoke the remote
       * operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param applicationId The application ID from the Google Play developer console.
       * @param content the {@link com.google.api.services.gamesConfiguration.model.AchievementConfiguration}
       * @since 1.13
       */
      protected Insert(java.lang.String applicationId, com.google.api.services.gamesConfiguration.model.AchievementConfiguration content) {
        super(GamesConfiguration.this, "POST", REST_PATH, content, com.google.api.services.gamesConfiguration.model.AchievementConfiguration.class);
        this.applicationId = com.google.api.client.util.Preconditions.checkNotNull(applicationId, "Required parameter applicationId must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** The application ID from the Google Play developer console. */
      @com.google.api.client.util.Key
      private java.lang.String applicationId;

      /** The application ID from the Google Play developer console.
       */
      public java.lang.String getApplicationId() {
        return applicationId;
      }

      /** The application ID from the Google Play developer console. */
      public Insert setApplicationId(java.lang.String applicationId) {
        this.applicationId = applicationId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Returns a list of the achievement configurations in this application.
     *
     * Create a request for the method "achievementConfigurations.list".
     *
     * This request holds the parameters needed by the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param applicationId The application ID from the Google Play developer console.
     * @return the request
     */
    public List list(java.lang.String applicationId) throws java.io.IOException {
      List result = new List(applicationId);
      initialize(result);
      return result;
    }

    public class List extends GamesConfigurationRequest<com.google.api.services.gamesConfiguration.model.AchievementConfigurationListResponse> {

      private static final String REST_PATH = "applications/{applicationId}/achievements";

      /**
       * Returns a list of the achievement configurations in this application.
       *
       * Create a request for the method "achievementConfigurations.list".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       * <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param applicationId The application ID from the Google Play developer console.
       * @since 1.13
       */
      protected List(java.lang.String applicationId) {
        super(GamesConfiguration.this, "GET", REST_PATH, null, com.google.api.services.gamesConfiguration.model.AchievementConfigurationListResponse.class);
        this.applicationId = com.google.api.client.util.Preconditions.checkNotNull(applicationId, "Required parameter applicationId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** The application ID from the Google Play developer console. */
      @com.google.api.client.util.Key
      private java.lang.String applicationId;

      /** The application ID from the Google Play developer console.
       */
      public java.lang.String getApplicationId() {
        return applicationId;
      }

      /** The application ID from the Google Play developer console. */
      public List setApplicationId(java.lang.String applicationId) {
        this.applicationId = applicationId;
        return this;
      }

      /**
       * The maximum number of resource configurations to return in the response, used for paging.
       * For any response, the actual number of resources returned may be less than the specified
       * maxResults.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer maxResults;

      /** The maximum number of resource configurations to return in the response, used for paging. For any
     response, the actual number of resources returned may be less than the specified maxResults.

     [minimum: 1] [maximum: 200]
       */
      public java.lang.Integer getMaxResults() {
        return maxResults;
      }

      /**
       * The maximum number of resource configurations to return in the response, used for paging.
       * For any response, the actual number of resources returned may be less than the specified
       * maxResults.
       */
      public List setMaxResults(java.lang.Integer maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Update the metadata of the achievement configuration with the given ID. This method supports
     * patch semantics.
     *
     * Create a request for the method "achievementConfigurations.patch".
     *
     * This request holds the parameters needed by the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param achievementId The ID of the achievement used by this method.
     * @param content the {@link com.google.api.services.gamesConfiguration.model.AchievementConfiguration}
     * @return the request
     */
    public Patch patch(java.lang.String achievementId, com.google.api.services.gamesConfiguration.model.AchievementConfiguration content) throws java.io.IOException {
      Patch result = new Patch(achievementId, content);
      initialize(result);
      return result;
    }

    public class Patch extends GamesConfigurationRequest<com.google.api.services.gamesConfiguration.model.AchievementConfiguration> {

      private static final String REST_PATH = "achievements/{achievementId}";

      /**
       * Update the metadata of the achievement configuration with the given ID. This method supports
       * patch semantics.
       *
       * Create a request for the method "achievementConfigurations.patch".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
       * operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param achievementId The ID of the achievement used by this method.
       * @param content the {@link com.google.api.services.gamesConfiguration.model.AchievementConfiguration}
       * @since 1.13
       */
      protected Patch(java.lang.String achievementId, com.google.api.services.gamesConfiguration.model.AchievementConfiguration content) {
        super(GamesConfiguration.this, "PATCH", REST_PATH, content, com.google.api.services.gamesConfiguration.model.AchievementConfiguration.class);
        this.achievementId = com.google.api.client.util.Preconditions.checkNotNull(achievementId, "Required parameter achievementId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** The ID of the achievement used by this method. */
      @com.google.api.client.util.Key
      private java.lang.String achievementId;

      /** The ID of the achievement used by this method.
       */
      public java.lang.String getAchievementId() {
        return achievementId;
      }

      /** The ID of the achievement used by this method. */
      public Patch setAchievementId(java.lang.String achievementId) {
        this.achievementId = achievementId;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Update the metadata of the achievement configuration with the given ID.
     *
     * Create a request for the method "achievementConfigurations.update".
     *
     * This request holds the parameters needed by the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param achievementId The ID of the achievement used by this method.
     * @param content the {@link com.google.api.services.gamesConfiguration.model.AchievementConfiguration}
     * @return the request
     */
    public Update update(java.lang.String achievementId, com.google.api.services.gamesConfiguration.model.AchievementConfiguration content) throws java.io.IOException {
      Update result = new Update(achievementId, content);
      initialize(result);
      return result;
    }

    public class Update extends GamesConfigurationRequest<com.google.api.services.gamesConfiguration.model.AchievementConfiguration> {

      private static final String REST_PATH = "achievements/{achievementId}";

      /**
       * Update the metadata of the achievement configuration with the given ID.
       *
       * Create a request for the method "achievementConfigurations.update".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link Update#execute()} method to invoke the remote
       * operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param achievementId The ID of the achievement used by this method.
       * @param content the {@link com.google.api.services.gamesConfiguration.model.AchievementConfiguration}
       * @since 1.13
       */
      protected Update(java.lang.String achievementId, com.google.api.services.gamesConfiguration.model.AchievementConfiguration content) {
        super(GamesConfiguration.this, "PUT", REST_PATH, content, com.google.api.services.gamesConfiguration.model.AchievementConfiguration.class);
        this.achievementId = com.google.api.client.util.Preconditions.checkNotNull(achievementId, "Required parameter achievementId must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** The ID of the achievement used by this method. */
      @com.google.api.client.util.Key
      private java.lang.String achievementId;

      /** The ID of the achievement used by this method.
       */
      public java.lang.String getAchievementId() {
        return achievementId;
      }

      /** The ID of the achievement used by this method. */
      public Update setAchievementId(java.lang.String achievementId) {
        this.achievementId = achievementId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the ImageConfigurations collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code GamesConfiguration gamesConfiguration = new GamesConfiguration(...);}
   *   {@code GamesConfiguration.ImageConfigurations.List request = gamesConfiguration.imageConfigurations().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public ImageConfigurations imageConfigurations() {
    return new ImageConfigurations();
  }

  /**
   * The "imageConfigurations" collection of methods.
   */
  public class ImageConfigurations {

    /**
     * Uploads an image for a resource with the given ID and image type.
     *
     * Create a request for the method "imageConfigurations.upload".
     *
     * This request holds the parameters needed by the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
     *
     * @param resourceId The ID of the resource used by this method.
     * @param imageType Selects which image in a resource for this method.
     * @return the request
     */
    public Upload upload(java.lang.String resourceId, java.lang.String imageType) throws java.io.IOException {
      Upload result = new Upload(resourceId, imageType);
      initialize(result);
      return result;
    }

    /**
     * Uploads an image for a resource with the given ID and image type.
     *
     * Create a request for the method "imageConfigurations.upload".
     *
     * This request holds the parameters needed by the the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
     *
     * <p>
     * This method should be used for uploading media content.
     * </p>
     *
     * @param resourceId The ID of the resource used by this method.@param imageType Selects which image in a resource for this method.
     * @param mediaContent The media HTTP content or {@code null} if none.
     * @return the request
     * @throws java.io.IOException if the initialization of the request fails
     */
    public Upload upload(java.lang.String resourceId, java.lang.String imageType, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
      Upload result = new Upload(resourceId, imageType, mediaContent);
      initialize(result);
      return result;
    }

    public class Upload extends GamesConfigurationRequest<com.google.api.services.gamesConfiguration.model.ImageConfiguration> {

      private static final String REST_PATH = "images/{resourceId}/imageType/{imageType}";

      /**
       * Uploads an image for a resource with the given ID and image type.
       *
       * Create a request for the method "imageConfigurations.upload".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link Upload#execute()} method to invoke the remote
       * operation. <p> {@link
       * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param resourceId The ID of the resource used by this method.
       * @param imageType Selects which image in a resource for this method.
       * @since 1.13
       */
      protected Upload(java.lang.String resourceId, java.lang.String imageType) {
        super(GamesConfiguration.this, "POST", REST_PATH, null, com.google.api.services.gamesConfiguration.model.ImageConfiguration.class);
        this.resourceId = com.google.api.client.util.Preconditions.checkNotNull(resourceId, "Required parameter resourceId must be specified.");
        this.imageType = com.google.api.client.util.Preconditions.checkNotNull(imageType, "Required parameter imageType must be specified.");
      }

      /**
       * Uploads an image for a resource with the given ID and image type.
       *
       * Create a request for the method "imageConfigurations.upload".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link Upload#execute()} method to invoke the remote
       * operation. <p> {@link
       * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * <p>
       * This constructor should be used for uploading media content.
       * </p>
       *
       * @param resourceId The ID of the resource used by this method.@param imageType Selects which image in a resource for this method.
       * @param mediaContent The media HTTP content or {@code null} if none.
       * @since 1.13
       */
      protected Upload(java.lang.String resourceId, java.lang.String imageType, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
        super(GamesConfiguration.this, "POST", "/upload/" + getServicePath() + REST_PATH, null, com.google.api.services.gamesConfiguration.model.ImageConfiguration.class);
        this.resourceId = com.google.api.client.util.Preconditions.checkNotNull(resourceId, "Required parameter resourceId must be specified.");
        this.imageType = com.google.api.client.util.Preconditions.checkNotNull(imageType, "Required parameter imageType must be specified.");
        initializeMediaUpload(mediaContent);
      }

      @Override
      public Upload setAlt(java.lang.String alt) {
        return (Upload) super.setAlt(alt);
      }

      @Override
      public Upload setFields(java.lang.String fields) {
        return (Upload) super.setFields(fields);
      }

      @Override
      public Upload setKey(java.lang.String key) {
        return (Upload) super.setKey(key);
      }

      @Override
      public Upload setOauthToken(java.lang.String oauthToken) {
        return (Upload) super.setOauthToken(oauthToken);
      }

      @Override
      public Upload setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Upload) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Upload setQuotaUser(java.lang.String quotaUser) {
        return (Upload) super.setQuotaUser(quotaUser);
      }

      @Override
      public Upload setUserIp(java.lang.String userIp) {
        return (Upload) super.setUserIp(userIp);
      }

      /** The ID of the resource used by this method. */
      @com.google.api.client.util.Key
      private java.lang.String resourceId;

      /** The ID of the resource used by this method.
       */
      public java.lang.String getResourceId() {
        return resourceId;
      }

      /** The ID of the resource used by this method. */
      public Upload setResourceId(java.lang.String resourceId) {
        this.resourceId = resourceId;
        return this;
      }

      /** Selects which image in a resource for this method. */
      @com.google.api.client.util.Key
      private java.lang.String imageType;

      /** Selects which image in a resource for this method.
       */
      public java.lang.String getImageType() {
        return imageType;
      }

      /** Selects which image in a resource for this method. */
      public Upload setImageType(java.lang.String imageType) {
        this.imageType = imageType;
        return this;
      }

      @Override
      public Upload set(String parameterName, Object value) {
        return (Upload) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the LeaderboardConfigurations collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code GamesConfiguration gamesConfiguration = new GamesConfiguration(...);}
   *   {@code GamesConfiguration.LeaderboardConfigurations.List request = gamesConfiguration.leaderboardConfigurations().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public LeaderboardConfigurations leaderboardConfigurations() {
    return new LeaderboardConfigurations();
  }

  /**
   * The "leaderboardConfigurations" collection of methods.
   */
  public class LeaderboardConfigurations {

    /**
     * Delete the leaderboard configuration with the given ID.
     *
     * Create a request for the method "leaderboardConfigurations.delete".
     *
     * This request holds the parameters needed by the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param leaderboardId The ID of the leaderboard.
     * @return the request
     */
    public Delete delete(java.lang.String leaderboardId) throws java.io.IOException {
      Delete result = new Delete(leaderboardId);
      initialize(result);
      return result;
    }

    public class Delete extends GamesConfigurationRequest<Void> {

      private static final String REST_PATH = "leaderboards/{leaderboardId}";

      /**
       * Delete the leaderboard configuration with the given ID.
       *
       * Create a request for the method "leaderboardConfigurations.delete".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
       * operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param leaderboardId The ID of the leaderboard.
       * @since 1.13
       */
      protected Delete(java.lang.String leaderboardId) {
        super(GamesConfiguration.this, "DELETE", REST_PATH, null, Void.class);
        this.leaderboardId = com.google.api.client.util.Preconditions.checkNotNull(leaderboardId, "Required parameter leaderboardId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** The ID of the leaderboard. */
      @com.google.api.client.util.Key
      private java.lang.String leaderboardId;

      /** The ID of the leaderboard.
       */
      public java.lang.String getLeaderboardId() {
        return leaderboardId;
      }

      /** The ID of the leaderboard. */
      public Delete setLeaderboardId(java.lang.String leaderboardId) {
        this.leaderboardId = leaderboardId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves the metadata of the leaderboard configuration with the given ID.
     *
     * Create a request for the method "leaderboardConfigurations.get".
     *
     * This request holds the parameters needed by the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param leaderboardId The ID of the leaderboard.
     * @return the request
     */
    public Get get(java.lang.String leaderboardId) throws java.io.IOException {
      Get result = new Get(leaderboardId);
      initialize(result);
      return result;
    }

    public class Get extends GamesConfigurationRequest<com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration> {

      private static final String REST_PATH = "leaderboards/{leaderboardId}";

      /**
       * Retrieves the metadata of the leaderboard configuration with the given ID.
       *
       * Create a request for the method "leaderboardConfigurations.get".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       * <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param leaderboardId The ID of the leaderboard.
       * @since 1.13
       */
      protected Get(java.lang.String leaderboardId) {
        super(GamesConfiguration.this, "GET", REST_PATH, null, com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration.class);
        this.leaderboardId = com.google.api.client.util.Preconditions.checkNotNull(leaderboardId, "Required parameter leaderboardId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** The ID of the leaderboard. */
      @com.google.api.client.util.Key
      private java.lang.String leaderboardId;

      /** The ID of the leaderboard.
       */
      public java.lang.String getLeaderboardId() {
        return leaderboardId;
      }

      /** The ID of the leaderboard. */
      public Get setLeaderboardId(java.lang.String leaderboardId) {
        this.leaderboardId = leaderboardId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Insert a new leaderboard configuration in this application.
     *
     * Create a request for the method "leaderboardConfigurations.insert".
     *
     * This request holds the parameters needed by the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param applicationId The application ID from the Google Play developer console.
     * @param content the {@link com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration}
     * @return the request
     */
    public Insert insert(java.lang.String applicationId, com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration content) throws java.io.IOException {
      Insert result = new Insert(applicationId, content);
      initialize(result);
      return result;
    }

    public class Insert extends GamesConfigurationRequest<com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration> {

      private static final String REST_PATH = "applications/{applicationId}/leaderboards";

      /**
       * Insert a new leaderboard configuration in this application.
       *
       * Create a request for the method "leaderboardConfigurations.insert".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link Insert#execute()} method to invoke the remote
       * operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param applicationId The application ID from the Google Play developer console.
       * @param content the {@link com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration}
       * @since 1.13
       */
      protected Insert(java.lang.String applicationId, com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration content) {
        super(GamesConfiguration.this, "POST", REST_PATH, content, com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration.class);
        this.applicationId = com.google.api.client.util.Preconditions.checkNotNull(applicationId, "Required parameter applicationId must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** The application ID from the Google Play developer console. */
      @com.google.api.client.util.Key
      private java.lang.String applicationId;

      /** The application ID from the Google Play developer console.
       */
      public java.lang.String getApplicationId() {
        return applicationId;
      }

      /** The application ID from the Google Play developer console. */
      public Insert setApplicationId(java.lang.String applicationId) {
        this.applicationId = applicationId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Returns a list of the leaderboard configurations in this application.
     *
     * Create a request for the method "leaderboardConfigurations.list".
     *
     * This request holds the parameters needed by the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param applicationId The application ID from the Google Play developer console.
     * @return the request
     */
    public List list(java.lang.String applicationId) throws java.io.IOException {
      List result = new List(applicationId);
      initialize(result);
      return result;
    }

    public class List extends GamesConfigurationRequest<com.google.api.services.gamesConfiguration.model.LeaderboardConfigurationListResponse> {

      private static final String REST_PATH = "applications/{applicationId}/leaderboards";

      /**
       * Returns a list of the leaderboard configurations in this application.
       *
       * Create a request for the method "leaderboardConfigurations.list".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       * <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param applicationId The application ID from the Google Play developer console.
       * @since 1.13
       */
      protected List(java.lang.String applicationId) {
        super(GamesConfiguration.this, "GET", REST_PATH, null, com.google.api.services.gamesConfiguration.model.LeaderboardConfigurationListResponse.class);
        this.applicationId = com.google.api.client.util.Preconditions.checkNotNull(applicationId, "Required parameter applicationId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** The application ID from the Google Play developer console. */
      @com.google.api.client.util.Key
      private java.lang.String applicationId;

      /** The application ID from the Google Play developer console.
       */
      public java.lang.String getApplicationId() {
        return applicationId;
      }

      /** The application ID from the Google Play developer console. */
      public List setApplicationId(java.lang.String applicationId) {
        this.applicationId = applicationId;
        return this;
      }

      /**
       * The maximum number of resource configurations to return in the response, used for paging.
       * For any response, the actual number of resources returned may be less than the specified
       * maxResults.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer maxResults;

      /** The maximum number of resource configurations to return in the response, used for paging. For any
     response, the actual number of resources returned may be less than the specified maxResults.

     [minimum: 1] [maximum: 200]
       */
      public java.lang.Integer getMaxResults() {
        return maxResults;
      }

      /**
       * The maximum number of resource configurations to return in the response, used for paging.
       * For any response, the actual number of resources returned may be less than the specified
       * maxResults.
       */
      public List setMaxResults(java.lang.Integer maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** The token returned by the previous request. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** The token returned by the previous request.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** The token returned by the previous request. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Update the metadata of the leaderboard configuration with the given ID. This method supports
     * patch semantics.
     *
     * Create a request for the method "leaderboardConfigurations.patch".
     *
     * This request holds the parameters needed by the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param leaderboardId The ID of the leaderboard.
     * @param content the {@link com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration}
     * @return the request
     */
    public Patch patch(java.lang.String leaderboardId, com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration content) throws java.io.IOException {
      Patch result = new Patch(leaderboardId, content);
      initialize(result);
      return result;
    }

    public class Patch extends GamesConfigurationRequest<com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration> {

      private static final String REST_PATH = "leaderboards/{leaderboardId}";

      /**
       * Update the metadata of the leaderboard configuration with the given ID. This method supports
       * patch semantics.
       *
       * Create a request for the method "leaderboardConfigurations.patch".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
       * operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param leaderboardId The ID of the leaderboard.
       * @param content the {@link com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration}
       * @since 1.13
       */
      protected Patch(java.lang.String leaderboardId, com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration content) {
        super(GamesConfiguration.this, "PATCH", REST_PATH, content, com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration.class);
        this.leaderboardId = com.google.api.client.util.Preconditions.checkNotNull(leaderboardId, "Required parameter leaderboardId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** The ID of the leaderboard. */
      @com.google.api.client.util.Key
      private java.lang.String leaderboardId;

      /** The ID of the leaderboard.
       */
      public java.lang.String getLeaderboardId() {
        return leaderboardId;
      }

      /** The ID of the leaderboard. */
      public Patch setLeaderboardId(java.lang.String leaderboardId) {
        this.leaderboardId = leaderboardId;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Update the metadata of the leaderboard configuration with the given ID.
     *
     * Create a request for the method "leaderboardConfigurations.update".
     *
     * This request holds the parameters needed by the gamesConfiguration server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param leaderboardId The ID of the leaderboard.
     * @param content the {@link com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration}
     * @return the request
     */
    public Update update(java.lang.String leaderboardId, com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration content) throws java.io.IOException {
      Update result = new Update(leaderboardId, content);
      initialize(result);
      return result;
    }

    public class Update extends GamesConfigurationRequest<com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration> {

      private static final String REST_PATH = "leaderboards/{leaderboardId}";

      /**
       * Update the metadata of the leaderboard configuration with the given ID.
       *
       * Create a request for the method "leaderboardConfigurations.update".
       *
       * This request holds the parameters needed by the the gamesConfiguration server.  After setting
       * any optional parameters, call the {@link Update#execute()} method to invoke the remote
       * operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param leaderboardId The ID of the leaderboard.
       * @param content the {@link com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration}
       * @since 1.13
       */
      protected Update(java.lang.String leaderboardId, com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration content) {
        super(GamesConfiguration.this, "PUT", REST_PATH, content, com.google.api.services.gamesConfiguration.model.LeaderboardConfiguration.class);
        this.leaderboardId = com.google.api.client.util.Preconditions.checkNotNull(leaderboardId, "Required parameter leaderboardId must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** The ID of the leaderboard. */
      @com.google.api.client.util.Key
      private java.lang.String leaderboardId;

      /** The ID of the leaderboard.
       */
      public java.lang.String getLeaderboardId() {
        return leaderboardId;
      }

      /** The ID of the leaderboard. */
      public Update setLeaderboardId(java.lang.String leaderboardId) {
        this.leaderboardId = leaderboardId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link GamesConfiguration}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link GamesConfiguration}. */
    @Override
    public GamesConfiguration build() {
      return new GamesConfiguration(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link GamesConfigurationRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setGamesConfigurationRequestInitializer(
        GamesConfigurationRequestInitializer gamesconfigurationRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(gamesconfigurationRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
