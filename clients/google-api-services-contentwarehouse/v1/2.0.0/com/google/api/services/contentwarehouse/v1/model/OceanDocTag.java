/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * ============> Next available number: 102 (ksridhara) <================
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class OceanDocTag extends com.google.api.client.json.GenericJson {

  /**
   * this is in ONIX format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDApplicationDate")
  private java.lang.String dEPRECATEDApplicationDate;

  /**
   * this is in ONIX format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDIssueDate")
  private java.lang.String dEPRECATEDIssueDate;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDPatentAssignee")
  private java.lang.String dEPRECATEDPatentAssignee;

  /**
   * patent-specific fields. ALL DEPRECATED, moved into PatentSpecific group, above.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDPatentNumber")
  private java.lang.String dEPRECATEDPatentNumber;

  /**
   * Percent rights granted by publisher. This should only be set, and definitely should only be
   * considered, if source_type == BoundVolumeSource::PUBLISHER. '0' may mean we have no info on
   * publisher rights so we have to just assume 0%. Deprecated as this is taken into account by
   * viewability
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDPublisherPercentVisible")
  private java.lang.Integer dEPRECATEDPublisherPercentVisible;

  /**
   * TODO(leonid) Deprecate these Authors string for front end.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String authors;

  /**
   * A bitmap containing all available download formats (values defined in AvaialableDownloadFormats
   * enum) NOTE: Only populated for Volume level docs
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer availableDownloads;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean blockSnippet;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanDocTagBookSpecific bookspecific;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanDocTagCatalogSpecific catalogspecific;

  /**
   * The content type of the document. See BoundVolumeSource::ContentType in
   * ocean/data/volume_types.protodevel for possible values.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer contentType;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<OceanDocTagContributor> contributor;

  /**
   * cover page (PrintedAsSeen string), to generate results snippet thumbnail image urls
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String coverPage;

  /**
   * The size (in pixels) of the full-resolution clean images used for the cover page. The width and
   * height will be zero if no image for that page.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanImageSize coverPageSize;

  /**
   * Editors string for front end.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String editors;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String encryptedExpressionId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String encryptedVolumeId;

  /**
   * DEPRECATED! Being replaced in favor of viewability, below. geo restrict info (from
   * OceanRights::geo_restrict) In CAv2: geo restrict info (from
   * ocean::VolumeImprintRights::geo_restrict)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> geoRestrict;

  /**
   * Text quality as defined in CA_VolumeScoreResult::OACapabilities::TextQualityAssessment Note -
   * This is only populated if good_text() and is_ge_quality() are true
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer goodTextDetail;

  /**
   * List of locales for which this book can be bought from a publisher, and read as a Google eBook.
   * Each locale is a lowercase, two-letter country-code (eg "ca"), and is copied from
   * PublisherGrantability.Locale.locale, defined in ocean/data/docinfo/volume_viewability.proto.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> grantableLocale;

  /**
   * Set to true if volume has ge quality
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isGeQuality;

  /**
   * whether this a landing page chosen at indexing time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isLandingPage;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanDocTagMagazineSpecific magazinespecific;

  /**
   * metadata_cover_exists will be set if there's a metadata-provided cover thumbnail. the thumbnail
   * will be used for scanless books or when a scanned book is in metadata-only view.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean metadataCoverExists;

  /**
   * The size (in pixels) of the metadata cover image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanImageSize metadataCoverSize;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanDocTagNewspaperSpecific newspaperspecific;

  /**
   * Number of pages in this volume (usually as specified in metadata)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numPages;

  /**
   * A bitmap indicating whether content may be objectionable NOTE: Only populated for volume level
   * docs
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer objectionableContentBitmap;

  /**
   * page_number of the page (OceanTypes::PageNumberType) In CAv2: page_number of the page
   * ocean::PageNumber::T
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer pageNumber;

  /**
   * pageid of the page (OceanTypes::PageIdType)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer pageid;

  /**
   * the page rank value of the book page
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double pagerank;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanDocTagPatentSpecific patentspecific;

  /**
   * Price information for a volume (per locale). Note existence of a price for a locale implies
   * that the book is sellable for that locale.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanGEPrice price;

  /**
   * printed page number (OceanPrintedPageNumber; from OceanPageInfoMap::Page::printed_page_number)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String printedPageNumber;

  /**
   * the URL of the reference page (About this book)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String refPageUrl;

  /**
   * the URL for the "search in book"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String searchInBookUrl;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer segmentTime;

  /**
   * The source type of the document. See BoundVolumeSource::SourceType in
   * ocean/data/volume_types.protodevel for possible values.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sourceType;

  /**
   * In CAv2 only: structured page number (printed number as we understand it) (result of
   * ocean::StructuredPageNumberProto::AppendToString)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String structuredPageNumber;

  /**
   * Sub title string for front end
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subTitle;

  /**
   * Bitmap indicating top-level subjects associated with this document. See
   * ocean/metadata/subjects/util.h for more detail.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subjectBitmap;

  /**
   * the URL of the cover page.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String thumbnailUrl;

  /**
   * Title string for front end.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String title;

  /**
   * Bibkey to be used as part of the URL (to make them persistent in some sense). This is obtained
   * by doing a GetURLKey() on the bibdata which returns the main bibkey associated with the volume
   * based on priority. This is parseable into an OceanVolumeBibKey (ocean/metadata/bibkeys.h) Note:
   * This should ideally be a required field longer term but for now keeping it optional for
   * compatibility. In case of this being absent, we don't include the key in the URL (just use
   * volumeId as before). Note: For content type books, this key is supplemented by other bibkeys
   * for this volumes(the field is aux_bibkeys)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String urlKey;

  /**
   * using_actual_cover will be set if we are using the actual cover of the book (instead of the
   * table of content, etc.). This is particularly useful to identify books where we inserted a
   * generated cover via Coverups.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean usingActualCover;

  /**
   * Volume viewability, which defines how/if the volume should be displayed in various locales.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanVolumeViewability viewability;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer volumeType;

  /**
   * The version of the volume (serialized form). ONLY populated for Volume level docs
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String volumeVersion;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private OceanDocTagWorkCluster workcluster;

  /**
   * this is in ONIX format.
   * @return value or {@code null} for none
   */
  public java.lang.String getDEPRECATEDApplicationDate() {
    return dEPRECATEDApplicationDate;
  }

  /**
   * this is in ONIX format.
   * @param dEPRECATEDApplicationDate dEPRECATEDApplicationDate or {@code null} for none
   */
  public OceanDocTag setDEPRECATEDApplicationDate(java.lang.String dEPRECATEDApplicationDate) {
    this.dEPRECATEDApplicationDate = dEPRECATEDApplicationDate;
    return this;
  }

  /**
   * this is in ONIX format.
   * @return value or {@code null} for none
   */
  public java.lang.String getDEPRECATEDIssueDate() {
    return dEPRECATEDIssueDate;
  }

  /**
   * this is in ONIX format.
   * @param dEPRECATEDIssueDate dEPRECATEDIssueDate or {@code null} for none
   */
  public OceanDocTag setDEPRECATEDIssueDate(java.lang.String dEPRECATEDIssueDate) {
    this.dEPRECATEDIssueDate = dEPRECATEDIssueDate;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDEPRECATEDPatentAssignee() {
    return dEPRECATEDPatentAssignee;
  }

  /**
   * @param dEPRECATEDPatentAssignee dEPRECATEDPatentAssignee or {@code null} for none
   */
  public OceanDocTag setDEPRECATEDPatentAssignee(java.lang.String dEPRECATEDPatentAssignee) {
    this.dEPRECATEDPatentAssignee = dEPRECATEDPatentAssignee;
    return this;
  }

  /**
   * patent-specific fields. ALL DEPRECATED, moved into PatentSpecific group, above.
   * @return value or {@code null} for none
   */
  public java.lang.String getDEPRECATEDPatentNumber() {
    return dEPRECATEDPatentNumber;
  }

  /**
   * patent-specific fields. ALL DEPRECATED, moved into PatentSpecific group, above.
   * @param dEPRECATEDPatentNumber dEPRECATEDPatentNumber or {@code null} for none
   */
  public OceanDocTag setDEPRECATEDPatentNumber(java.lang.String dEPRECATEDPatentNumber) {
    this.dEPRECATEDPatentNumber = dEPRECATEDPatentNumber;
    return this;
  }

  /**
   * Percent rights granted by publisher. This should only be set, and definitely should only be
   * considered, if source_type == BoundVolumeSource::PUBLISHER. '0' may mean we have no info on
   * publisher rights so we have to just assume 0%. Deprecated as this is taken into account by
   * viewability
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDEPRECATEDPublisherPercentVisible() {
    return dEPRECATEDPublisherPercentVisible;
  }

  /**
   * Percent rights granted by publisher. This should only be set, and definitely should only be
   * considered, if source_type == BoundVolumeSource::PUBLISHER. '0' may mean we have no info on
   * publisher rights so we have to just assume 0%. Deprecated as this is taken into account by
   * viewability
   * @param dEPRECATEDPublisherPercentVisible dEPRECATEDPublisherPercentVisible or {@code null} for none
   */
  public OceanDocTag setDEPRECATEDPublisherPercentVisible(java.lang.Integer dEPRECATEDPublisherPercentVisible) {
    this.dEPRECATEDPublisherPercentVisible = dEPRECATEDPublisherPercentVisible;
    return this;
  }

  /**
   * TODO(leonid) Deprecate these Authors string for front end.
   * @return value or {@code null} for none
   */
  public java.lang.String getAuthors() {
    return authors;
  }

  /**
   * TODO(leonid) Deprecate these Authors string for front end.
   * @param authors authors or {@code null} for none
   */
  public OceanDocTag setAuthors(java.lang.String authors) {
    this.authors = authors;
    return this;
  }

  /**
   * A bitmap containing all available download formats (values defined in AvaialableDownloadFormats
   * enum) NOTE: Only populated for Volume level docs
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAvailableDownloads() {
    return availableDownloads;
  }

  /**
   * A bitmap containing all available download formats (values defined in AvaialableDownloadFormats
   * enum) NOTE: Only populated for Volume level docs
   * @param availableDownloads availableDownloads or {@code null} for none
   */
  public OceanDocTag setAvailableDownloads(java.lang.Integer availableDownloads) {
    this.availableDownloads = availableDownloads;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getBlockSnippet() {
    return blockSnippet;
  }

  /**
   * @param blockSnippet blockSnippet or {@code null} for none
   */
  public OceanDocTag setBlockSnippet(java.lang.Boolean blockSnippet) {
    this.blockSnippet = blockSnippet;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public OceanDocTagBookSpecific getBookspecific() {
    return bookspecific;
  }

  /**
   * @param bookspecific bookspecific or {@code null} for none
   */
  public OceanDocTag setBookspecific(OceanDocTagBookSpecific bookspecific) {
    this.bookspecific = bookspecific;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public OceanDocTagCatalogSpecific getCatalogspecific() {
    return catalogspecific;
  }

  /**
   * @param catalogspecific catalogspecific or {@code null} for none
   */
  public OceanDocTag setCatalogspecific(OceanDocTagCatalogSpecific catalogspecific) {
    this.catalogspecific = catalogspecific;
    return this;
  }

  /**
   * The content type of the document. See BoundVolumeSource::ContentType in
   * ocean/data/volume_types.protodevel for possible values.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getContentType() {
    return contentType;
  }

  /**
   * The content type of the document. See BoundVolumeSource::ContentType in
   * ocean/data/volume_types.protodevel for possible values.
   * @param contentType contentType or {@code null} for none
   */
  public OceanDocTag setContentType(java.lang.Integer contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<OceanDocTagContributor> getContributor() {
    return contributor;
  }

  /**
   * @param contributor contributor or {@code null} for none
   */
  public OceanDocTag setContributor(java.util.List<OceanDocTagContributor> contributor) {
    this.contributor = contributor;
    return this;
  }

  /**
   * cover page (PrintedAsSeen string), to generate results snippet thumbnail image urls
   * @return value or {@code null} for none
   */
  public java.lang.String getCoverPage() {
    return coverPage;
  }

  /**
   * cover page (PrintedAsSeen string), to generate results snippet thumbnail image urls
   * @param coverPage coverPage or {@code null} for none
   */
  public OceanDocTag setCoverPage(java.lang.String coverPage) {
    this.coverPage = coverPage;
    return this;
  }

  /**
   * The size (in pixels) of the full-resolution clean images used for the cover page. The width and
   * height will be zero if no image for that page.
   * @return value or {@code null} for none
   */
  public OceanImageSize getCoverPageSize() {
    return coverPageSize;
  }

  /**
   * The size (in pixels) of the full-resolution clean images used for the cover page. The width and
   * height will be zero if no image for that page.
   * @param coverPageSize coverPageSize or {@code null} for none
   */
  public OceanDocTag setCoverPageSize(OceanImageSize coverPageSize) {
    this.coverPageSize = coverPageSize;
    return this;
  }

  /**
   * Editors string for front end.
   * @return value or {@code null} for none
   */
  public java.lang.String getEditors() {
    return editors;
  }

  /**
   * Editors string for front end.
   * @param editors editors or {@code null} for none
   */
  public OceanDocTag setEditors(java.lang.String editors) {
    this.editors = editors;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getEncryptedExpressionId() {
    return encryptedExpressionId;
  }

  /**
   * @param encryptedExpressionId encryptedExpressionId or {@code null} for none
   */
  public OceanDocTag setEncryptedExpressionId(java.lang.String encryptedExpressionId) {
    this.encryptedExpressionId = encryptedExpressionId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getEncryptedVolumeId() {
    return encryptedVolumeId;
  }

  /**
   * @param encryptedVolumeId encryptedVolumeId or {@code null} for none
   */
  public OceanDocTag setEncryptedVolumeId(java.lang.String encryptedVolumeId) {
    this.encryptedVolumeId = encryptedVolumeId;
    return this;
  }

  /**
   * DEPRECATED! Being replaced in favor of viewability, below. geo restrict info (from
   * OceanRights::geo_restrict) In CAv2: geo restrict info (from
   * ocean::VolumeImprintRights::geo_restrict)
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getGeoRestrict() {
    return geoRestrict;
  }

  /**
   * DEPRECATED! Being replaced in favor of viewability, below. geo restrict info (from
   * OceanRights::geo_restrict) In CAv2: geo restrict info (from
   * ocean::VolumeImprintRights::geo_restrict)
   * @param geoRestrict geoRestrict or {@code null} for none
   */
  public OceanDocTag setGeoRestrict(java.util.List<java.lang.String> geoRestrict) {
    this.geoRestrict = geoRestrict;
    return this;
  }

  /**
   * Text quality as defined in CA_VolumeScoreResult::OACapabilities::TextQualityAssessment Note -
   * This is only populated if good_text() and is_ge_quality() are true
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGoodTextDetail() {
    return goodTextDetail;
  }

  /**
   * Text quality as defined in CA_VolumeScoreResult::OACapabilities::TextQualityAssessment Note -
   * This is only populated if good_text() and is_ge_quality() are true
   * @param goodTextDetail goodTextDetail or {@code null} for none
   */
  public OceanDocTag setGoodTextDetail(java.lang.Integer goodTextDetail) {
    this.goodTextDetail = goodTextDetail;
    return this;
  }

  /**
   * List of locales for which this book can be bought from a publisher, and read as a Google eBook.
   * Each locale is a lowercase, two-letter country-code (eg "ca"), and is copied from
   * PublisherGrantability.Locale.locale, defined in ocean/data/docinfo/volume_viewability.proto.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getGrantableLocale() {
    return grantableLocale;
  }

  /**
   * List of locales for which this book can be bought from a publisher, and read as a Google eBook.
   * Each locale is a lowercase, two-letter country-code (eg "ca"), and is copied from
   * PublisherGrantability.Locale.locale, defined in ocean/data/docinfo/volume_viewability.proto.
   * @param grantableLocale grantableLocale or {@code null} for none
   */
  public OceanDocTag setGrantableLocale(java.util.List<java.lang.String> grantableLocale) {
    this.grantableLocale = grantableLocale;
    return this;
  }

  /**
   * Set to true if volume has ge quality
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsGeQuality() {
    return isGeQuality;
  }

  /**
   * Set to true if volume has ge quality
   * @param isGeQuality isGeQuality or {@code null} for none
   */
  public OceanDocTag setIsGeQuality(java.lang.Boolean isGeQuality) {
    this.isGeQuality = isGeQuality;
    return this;
  }

  /**
   * whether this a landing page chosen at indexing time.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsLandingPage() {
    return isLandingPage;
  }

  /**
   * whether this a landing page chosen at indexing time.
   * @param isLandingPage isLandingPage or {@code null} for none
   */
  public OceanDocTag setIsLandingPage(java.lang.Boolean isLandingPage) {
    this.isLandingPage = isLandingPage;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public OceanDocTagMagazineSpecific getMagazinespecific() {
    return magazinespecific;
  }

  /**
   * @param magazinespecific magazinespecific or {@code null} for none
   */
  public OceanDocTag setMagazinespecific(OceanDocTagMagazineSpecific magazinespecific) {
    this.magazinespecific = magazinespecific;
    return this;
  }

  /**
   * metadata_cover_exists will be set if there's a metadata-provided cover thumbnail. the thumbnail
   * will be used for scanless books or when a scanned book is in metadata-only view.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMetadataCoverExists() {
    return metadataCoverExists;
  }

  /**
   * metadata_cover_exists will be set if there's a metadata-provided cover thumbnail. the thumbnail
   * will be used for scanless books or when a scanned book is in metadata-only view.
   * @param metadataCoverExists metadataCoverExists or {@code null} for none
   */
  public OceanDocTag setMetadataCoverExists(java.lang.Boolean metadataCoverExists) {
    this.metadataCoverExists = metadataCoverExists;
    return this;
  }

  /**
   * The size (in pixels) of the metadata cover image.
   * @return value or {@code null} for none
   */
  public OceanImageSize getMetadataCoverSize() {
    return metadataCoverSize;
  }

  /**
   * The size (in pixels) of the metadata cover image.
   * @param metadataCoverSize metadataCoverSize or {@code null} for none
   */
  public OceanDocTag setMetadataCoverSize(OceanImageSize metadataCoverSize) {
    this.metadataCoverSize = metadataCoverSize;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public OceanDocTagNewspaperSpecific getNewspaperspecific() {
    return newspaperspecific;
  }

  /**
   * @param newspaperspecific newspaperspecific or {@code null} for none
   */
  public OceanDocTag setNewspaperspecific(OceanDocTagNewspaperSpecific newspaperspecific) {
    this.newspaperspecific = newspaperspecific;
    return this;
  }

  /**
   * Number of pages in this volume (usually as specified in metadata)
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumPages() {
    return numPages;
  }

  /**
   * Number of pages in this volume (usually as specified in metadata)
   * @param numPages numPages or {@code null} for none
   */
  public OceanDocTag setNumPages(java.lang.Integer numPages) {
    this.numPages = numPages;
    return this;
  }

  /**
   * A bitmap indicating whether content may be objectionable NOTE: Only populated for volume level
   * docs
   * @return value or {@code null} for none
   */
  public java.lang.Integer getObjectionableContentBitmap() {
    return objectionableContentBitmap;
  }

  /**
   * A bitmap indicating whether content may be objectionable NOTE: Only populated for volume level
   * docs
   * @param objectionableContentBitmap objectionableContentBitmap or {@code null} for none
   */
  public OceanDocTag setObjectionableContentBitmap(java.lang.Integer objectionableContentBitmap) {
    this.objectionableContentBitmap = objectionableContentBitmap;
    return this;
  }

  /**
   * page_number of the page (OceanTypes::PageNumberType) In CAv2: page_number of the page
   * ocean::PageNumber::T
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPageNumber() {
    return pageNumber;
  }

  /**
   * page_number of the page (OceanTypes::PageNumberType) In CAv2: page_number of the page
   * ocean::PageNumber::T
   * @param pageNumber pageNumber or {@code null} for none
   */
  public OceanDocTag setPageNumber(java.lang.Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

  /**
   * pageid of the page (OceanTypes::PageIdType)
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPageid() {
    return pageid;
  }

  /**
   * pageid of the page (OceanTypes::PageIdType)
   * @param pageid pageid or {@code null} for none
   */
  public OceanDocTag setPageid(java.lang.Integer pageid) {
    this.pageid = pageid;
    return this;
  }

  /**
   * the page rank value of the book page
   * @return value or {@code null} for none
   */
  public java.lang.Double getPagerank() {
    return pagerank;
  }

  /**
   * the page rank value of the book page
   * @param pagerank pagerank or {@code null} for none
   */
  public OceanDocTag setPagerank(java.lang.Double pagerank) {
    this.pagerank = pagerank;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public OceanDocTagPatentSpecific getPatentspecific() {
    return patentspecific;
  }

  /**
   * @param patentspecific patentspecific or {@code null} for none
   */
  public OceanDocTag setPatentspecific(OceanDocTagPatentSpecific patentspecific) {
    this.patentspecific = patentspecific;
    return this;
  }

  /**
   * Price information for a volume (per locale). Note existence of a price for a locale implies
   * that the book is sellable for that locale.
   * @return value or {@code null} for none
   */
  public OceanGEPrice getPrice() {
    return price;
  }

  /**
   * Price information for a volume (per locale). Note existence of a price for a locale implies
   * that the book is sellable for that locale.
   * @param price price or {@code null} for none
   */
  public OceanDocTag setPrice(OceanGEPrice price) {
    this.price = price;
    return this;
  }

  /**
   * printed page number (OceanPrintedPageNumber; from OceanPageInfoMap::Page::printed_page_number)
   * @return value or {@code null} for none
   */
  public java.lang.String getPrintedPageNumber() {
    return printedPageNumber;
  }

  /**
   * printed page number (OceanPrintedPageNumber; from OceanPageInfoMap::Page::printed_page_number)
   * @param printedPageNumber printedPageNumber or {@code null} for none
   */
  public OceanDocTag setPrintedPageNumber(java.lang.String printedPageNumber) {
    this.printedPageNumber = printedPageNumber;
    return this;
  }

  /**
   * the URL of the reference page (About this book)
   * @return value or {@code null} for none
   */
  public java.lang.String getRefPageUrl() {
    return refPageUrl;
  }

  /**
   * the URL of the reference page (About this book)
   * @param refPageUrl refPageUrl or {@code null} for none
   */
  public OceanDocTag setRefPageUrl(java.lang.String refPageUrl) {
    this.refPageUrl = refPageUrl;
    return this;
  }

  /**
   * the URL for the "search in book"
   * @return value or {@code null} for none
   */
  public java.lang.String getSearchInBookUrl() {
    return searchInBookUrl;
  }

  /**
   * the URL for the "search in book"
   * @param searchInBookUrl searchInBookUrl or {@code null} for none
   */
  public OceanDocTag setSearchInBookUrl(java.lang.String searchInBookUrl) {
    this.searchInBookUrl = searchInBookUrl;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSegmentTime() {
    return segmentTime;
  }

  /**
   * @param segmentTime segmentTime or {@code null} for none
   */
  public OceanDocTag setSegmentTime(java.lang.Integer segmentTime) {
    this.segmentTime = segmentTime;
    return this;
  }

  /**
   * The source type of the document. See BoundVolumeSource::SourceType in
   * ocean/data/volume_types.protodevel for possible values.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSourceType() {
    return sourceType;
  }

  /**
   * The source type of the document. See BoundVolumeSource::SourceType in
   * ocean/data/volume_types.protodevel for possible values.
   * @param sourceType sourceType or {@code null} for none
   */
  public OceanDocTag setSourceType(java.lang.Integer sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * In CAv2 only: structured page number (printed number as we understand it) (result of
   * ocean::StructuredPageNumberProto::AppendToString)
   * @return value or {@code null} for none
   */
  public java.lang.String getStructuredPageNumber() {
    return structuredPageNumber;
  }

  /**
   * In CAv2 only: structured page number (printed number as we understand it) (result of
   * ocean::StructuredPageNumberProto::AppendToString)
   * @param structuredPageNumber structuredPageNumber or {@code null} for none
   */
  public OceanDocTag setStructuredPageNumber(java.lang.String structuredPageNumber) {
    this.structuredPageNumber = structuredPageNumber;
    return this;
  }

  /**
   * Sub title string for front end
   * @return value or {@code null} for none
   */
  public java.lang.String getSubTitle() {
    return subTitle;
  }

  /**
   * Sub title string for front end
   * @param subTitle subTitle or {@code null} for none
   */
  public OceanDocTag setSubTitle(java.lang.String subTitle) {
    this.subTitle = subTitle;
    return this;
  }

  /**
   * Bitmap indicating top-level subjects associated with this document. See
   * ocean/metadata/subjects/util.h for more detail.
   * @see #decodeSubjectBitmap()
   * @return value or {@code null} for none
   */
  public java.lang.String getSubjectBitmap() {
    return subjectBitmap;
  }

  /**
   * Bitmap indicating top-level subjects associated with this document. See
   * ocean/metadata/subjects/util.h for more detail.
   * @see #getSubjectBitmap()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeSubjectBitmap() {
    return com.google.api.client.util.Base64.decodeBase64(subjectBitmap);
  }

  /**
   * Bitmap indicating top-level subjects associated with this document. See
   * ocean/metadata/subjects/util.h for more detail.
   * @see #encodeSubjectBitmap()
   * @param subjectBitmap subjectBitmap or {@code null} for none
   */
  public OceanDocTag setSubjectBitmap(java.lang.String subjectBitmap) {
    this.subjectBitmap = subjectBitmap;
    return this;
  }

  /**
   * Bitmap indicating top-level subjects associated with this document. See
   * ocean/metadata/subjects/util.h for more detail.
   * @see #setSubjectBitmap()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public OceanDocTag encodeSubjectBitmap(byte[] subjectBitmap) {
    this.subjectBitmap = com.google.api.client.util.Base64.encodeBase64URLSafeString(subjectBitmap);
    return this;
  }

  /**
   * the URL of the cover page.
   * @return value or {@code null} for none
   */
  public java.lang.String getThumbnailUrl() {
    return thumbnailUrl;
  }

  /**
   * the URL of the cover page.
   * @param thumbnailUrl thumbnailUrl or {@code null} for none
   */
  public OceanDocTag setThumbnailUrl(java.lang.String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
    return this;
  }

  /**
   * Title string for front end.
   * @return value or {@code null} for none
   */
  public java.lang.String getTitle() {
    return title;
  }

  /**
   * Title string for front end.
   * @param title title or {@code null} for none
   */
  public OceanDocTag setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  /**
   * Bibkey to be used as part of the URL (to make them persistent in some sense). This is obtained
   * by doing a GetURLKey() on the bibdata which returns the main bibkey associated with the volume
   * based on priority. This is parseable into an OceanVolumeBibKey (ocean/metadata/bibkeys.h) Note:
   * This should ideally be a required field longer term but for now keeping it optional for
   * compatibility. In case of this being absent, we don't include the key in the URL (just use
   * volumeId as before). Note: For content type books, this key is supplemented by other bibkeys
   * for this volumes(the field is aux_bibkeys)
   * @return value or {@code null} for none
   */
  public java.lang.String getUrlKey() {
    return urlKey;
  }

  /**
   * Bibkey to be used as part of the URL (to make them persistent in some sense). This is obtained
   * by doing a GetURLKey() on the bibdata which returns the main bibkey associated with the volume
   * based on priority. This is parseable into an OceanVolumeBibKey (ocean/metadata/bibkeys.h) Note:
   * This should ideally be a required field longer term but for now keeping it optional for
   * compatibility. In case of this being absent, we don't include the key in the URL (just use
   * volumeId as before). Note: For content type books, this key is supplemented by other bibkeys
   * for this volumes(the field is aux_bibkeys)
   * @param urlKey urlKey or {@code null} for none
   */
  public OceanDocTag setUrlKey(java.lang.String urlKey) {
    this.urlKey = urlKey;
    return this;
  }

  /**
   * using_actual_cover will be set if we are using the actual cover of the book (instead of the
   * table of content, etc.). This is particularly useful to identify books where we inserted a
   * generated cover via Coverups.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUsingActualCover() {
    return usingActualCover;
  }

  /**
   * using_actual_cover will be set if we are using the actual cover of the book (instead of the
   * table of content, etc.). This is particularly useful to identify books where we inserted a
   * generated cover via Coverups.
   * @param usingActualCover usingActualCover or {@code null} for none
   */
  public OceanDocTag setUsingActualCover(java.lang.Boolean usingActualCover) {
    this.usingActualCover = usingActualCover;
    return this;
  }

  /**
   * Volume viewability, which defines how/if the volume should be displayed in various locales.
   * @return value or {@code null} for none
   */
  public OceanVolumeViewability getViewability() {
    return viewability;
  }

  /**
   * Volume viewability, which defines how/if the volume should be displayed in various locales.
   * @param viewability viewability or {@code null} for none
   */
  public OceanDocTag setViewability(OceanVolumeViewability viewability) {
    this.viewability = viewability;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getVolumeType() {
    return volumeType;
  }

  /**
   * @param volumeType volumeType or {@code null} for none
   */
  public OceanDocTag setVolumeType(java.lang.Integer volumeType) {
    this.volumeType = volumeType;
    return this;
  }

  /**
   * The version of the volume (serialized form). ONLY populated for Volume level docs
   * @return value or {@code null} for none
   */
  public java.lang.String getVolumeVersion() {
    return volumeVersion;
  }

  /**
   * The version of the volume (serialized form). ONLY populated for Volume level docs
   * @param volumeVersion volumeVersion or {@code null} for none
   */
  public OceanDocTag setVolumeVersion(java.lang.String volumeVersion) {
    this.volumeVersion = volumeVersion;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public OceanDocTagWorkCluster getWorkcluster() {
    return workcluster;
  }

  /**
   * @param workcluster workcluster or {@code null} for none
   */
  public OceanDocTag setWorkcluster(OceanDocTagWorkCluster workcluster) {
    this.workcluster = workcluster;
    return this;
  }

  @Override
  public OceanDocTag set(String fieldName, Object value) {
    return (OceanDocTag) super.set(fieldName, value);
  }

  @Override
  public OceanDocTag clone() {
    return (OceanDocTag) super.clone();
  }

}
