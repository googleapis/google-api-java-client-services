/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.compute.model;

/**
 * [Deprecated] Defines the mechanism to obtain the client or server certificate. Defines the
 * mechanism to obtain the client or server certificate.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Compute Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TlsCertificateContext extends com.google.api.client.json.GenericJson {

  /**
   * Specifies the certificate and private key paths. This field is applicable only if
   * tlsCertificateSource is set to USE_PATH.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TlsCertificatePaths certificatePaths;

  /**
   * Defines how TLS certificates are obtained.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String certificateSource;

  /**
   * Specifies the config to retrieve certificates through SDS. This field is applicable only if
   * tlsCertificateSource is set to USE_SDS.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SdsConfig sdsConfig;

  /**
   * Specifies the certificate and private key paths. This field is applicable only if
   * tlsCertificateSource is set to USE_PATH.
   * @return value or {@code null} for none
   */
  public TlsCertificatePaths getCertificatePaths() {
    return certificatePaths;
  }

  /**
   * Specifies the certificate and private key paths. This field is applicable only if
   * tlsCertificateSource is set to USE_PATH.
   * @param certificatePaths certificatePaths or {@code null} for none
   */
  public TlsCertificateContext setCertificatePaths(TlsCertificatePaths certificatePaths) {
    this.certificatePaths = certificatePaths;
    return this;
  }

  /**
   * Defines how TLS certificates are obtained.
   * @return value or {@code null} for none
   */
  public java.lang.String getCertificateSource() {
    return certificateSource;
  }

  /**
   * Defines how TLS certificates are obtained.
   * @param certificateSource certificateSource or {@code null} for none
   */
  public TlsCertificateContext setCertificateSource(java.lang.String certificateSource) {
    this.certificateSource = certificateSource;
    return this;
  }

  /**
   * Specifies the config to retrieve certificates through SDS. This field is applicable only if
   * tlsCertificateSource is set to USE_SDS.
   * @return value or {@code null} for none
   */
  public SdsConfig getSdsConfig() {
    return sdsConfig;
  }

  /**
   * Specifies the config to retrieve certificates through SDS. This field is applicable only if
   * tlsCertificateSource is set to USE_SDS.
   * @param sdsConfig sdsConfig or {@code null} for none
   */
  public TlsCertificateContext setSdsConfig(SdsConfig sdsConfig) {
    this.sdsConfig = sdsConfig;
    return this;
  }

  @Override
  public TlsCertificateContext set(String fieldName, Object value) {
    return (TlsCertificateContext) super.set(fieldName, value);
  }

  @Override
  public TlsCertificateContext clone() {
    return (TlsCertificateContext) super.clone();
  }

}
