/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.appengine.model;

/**
 * Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript
 * source files. Static directory handlers make it easy to serve the entire contents of a directory
 * as static files.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the App Engine Admin API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class StaticDirectoryHandler extends com.google.api.client.json.GenericJson {

  /**
   * Whether files should also be uploaded as code data. By default, files declared in static
   * directory handlers are uploaded as static data and are only served to end users; they cannot be
   * read by the application. If enabled, uploads are charged against both your code and static data
   * storage resource quotas.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean applicationReadable;

  /**
   * Path to the directory containing the static files from the application root directory.
   * Everything after the end of the matched URL pattern is appended to static_dir to form the full
   * path to the requested file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String directory;

  /**
   * Time a static file served by this handler should be cached.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String expiration;

  /**
   * HTTP headers to use for all responses from these URLs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> httpHeaders;

  /**
   * MIME type used to serve all files served by this handler. Defaults to file-specific MIME types,
   * which are direved from each file's filename extension.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mimeType;

  /**
   * Whether this handler should match the request if the file referenced by the handler does not
   * exist.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean requireMatchingFile;

  /**
   * Whether files should also be uploaded as code data. By default, files declared in static
   * directory handlers are uploaded as static data and are only served to end users; they cannot be
   * read by the application. If enabled, uploads are charged against both your code and static data
   * storage resource quotas.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getApplicationReadable() {
    return applicationReadable;
  }

  /**
   * Whether files should also be uploaded as code data. By default, files declared in static
   * directory handlers are uploaded as static data and are only served to end users; they cannot be
   * read by the application. If enabled, uploads are charged against both your code and static data
   * storage resource quotas.
   * @param applicationReadable applicationReadable or {@code null} for none
   */
  public StaticDirectoryHandler setApplicationReadable(java.lang.Boolean applicationReadable) {
    this.applicationReadable = applicationReadable;
    return this;
  }

  /**
   * Path to the directory containing the static files from the application root directory.
   * Everything after the end of the matched URL pattern is appended to static_dir to form the full
   * path to the requested file.
   * @return value or {@code null} for none
   */
  public java.lang.String getDirectory() {
    return directory;
  }

  /**
   * Path to the directory containing the static files from the application root directory.
   * Everything after the end of the matched URL pattern is appended to static_dir to form the full
   * path to the requested file.
   * @param directory directory or {@code null} for none
   */
  public StaticDirectoryHandler setDirectory(java.lang.String directory) {
    this.directory = directory;
    return this;
  }

  /**
   * Time a static file served by this handler should be cached.
   * @return value or {@code null} for none
   */
  public String getExpiration() {
    return expiration;
  }

  /**
   * Time a static file served by this handler should be cached.
   * @param expiration expiration or {@code null} for none
   */
  public StaticDirectoryHandler setExpiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * HTTP headers to use for all responses from these URLs.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getHttpHeaders() {
    return httpHeaders;
  }

  /**
   * HTTP headers to use for all responses from these URLs.
   * @param httpHeaders httpHeaders or {@code null} for none
   */
  public StaticDirectoryHandler setHttpHeaders(java.util.Map<String, java.lang.String> httpHeaders) {
    this.httpHeaders = httpHeaders;
    return this;
  }

  /**
   * MIME type used to serve all files served by this handler. Defaults to file-specific MIME types,
   * which are direved from each file's filename extension.
   * @return value or {@code null} for none
   */
  public java.lang.String getMimeType() {
    return mimeType;
  }

  /**
   * MIME type used to serve all files served by this handler. Defaults to file-specific MIME types,
   * which are direved from each file's filename extension.
   * @param mimeType mimeType or {@code null} for none
   */
  public StaticDirectoryHandler setMimeType(java.lang.String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * Whether this handler should match the request if the file referenced by the handler does not
   * exist.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRequireMatchingFile() {
    return requireMatchingFile;
  }

  /**
   * Whether this handler should match the request if the file referenced by the handler does not
   * exist.
   * @param requireMatchingFile requireMatchingFile or {@code null} for none
   */
  public StaticDirectoryHandler setRequireMatchingFile(java.lang.Boolean requireMatchingFile) {
    this.requireMatchingFile = requireMatchingFile;
    return this;
  }

  @Override
  public StaticDirectoryHandler set(String fieldName, Object value) {
    return (StaticDirectoryHandler) super.set(fieldName, value);
  }

  @Override
  public StaticDirectoryHandler clone() {
    return (StaticDirectoryHandler) super.clone();
  }

}
