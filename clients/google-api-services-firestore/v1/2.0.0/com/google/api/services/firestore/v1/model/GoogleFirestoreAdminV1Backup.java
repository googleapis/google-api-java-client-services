/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1.model;

/**
 * A Backup of a Cloud Firestore Database. The backup contains all documents and index
 * configurations for the given database at specific point in time.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Firestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleFirestoreAdminV1Backup extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Name of the Firestore database that the backup is from. Format is
   * `projects/{project}/databases/{database}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String database;

  /**
   * Output only. The system-generated UUID4 for the Firestore database that the backup is from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String databaseUid;

  /**
   * Output only. The timestamp at which this backup expires.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String expireTime;

  /**
   * Output only. The unique resource name of the Backup. Format is
   * `projects/{project}/locations/{location}/backups/{backup}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The backup contains an externally consistent copy of the database at this time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String snapshotTime;

  /**
   * Output only. The current state of the backup.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Statistics about the backup. This data only becomes available after the backup is
   * fully materialized to secondary storage. This field will be empty till then.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleFirestoreAdminV1Stats stats;

  /**
   * Output only. Name of the Firestore database that the backup is from. Format is
   * `projects/{project}/databases/{database}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabase() {
    return database;
  }

  /**
   * Output only. Name of the Firestore database that the backup is from. Format is
   * `projects/{project}/databases/{database}`.
   * @param database database or {@code null} for none
   */
  public GoogleFirestoreAdminV1Backup setDatabase(java.lang.String database) {
    this.database = database;
    return this;
  }

  /**
   * Output only. The system-generated UUID4 for the Firestore database that the backup is from.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabaseUid() {
    return databaseUid;
  }

  /**
   * Output only. The system-generated UUID4 for the Firestore database that the backup is from.
   * @param databaseUid databaseUid or {@code null} for none
   */
  public GoogleFirestoreAdminV1Backup setDatabaseUid(java.lang.String databaseUid) {
    this.databaseUid = databaseUid;
    return this;
  }

  /**
   * Output only. The timestamp at which this backup expires.
   * @return value or {@code null} for none
   */
  public String getExpireTime() {
    return expireTime;
  }

  /**
   * Output only. The timestamp at which this backup expires.
   * @param expireTime expireTime or {@code null} for none
   */
  public GoogleFirestoreAdminV1Backup setExpireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Output only. The unique resource name of the Backup. Format is
   * `projects/{project}/locations/{location}/backups/{backup}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The unique resource name of the Backup. Format is
   * `projects/{project}/locations/{location}/backups/{backup}`.
   * @param name name or {@code null} for none
   */
  public GoogleFirestoreAdminV1Backup setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The backup contains an externally consistent copy of the database at this time.
   * @return value or {@code null} for none
   */
  public String getSnapshotTime() {
    return snapshotTime;
  }

  /**
   * Output only. The backup contains an externally consistent copy of the database at this time.
   * @param snapshotTime snapshotTime or {@code null} for none
   */
  public GoogleFirestoreAdminV1Backup setSnapshotTime(String snapshotTime) {
    this.snapshotTime = snapshotTime;
    return this;
  }

  /**
   * Output only. The current state of the backup.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The current state of the backup.
   * @param state state or {@code null} for none
   */
  public GoogleFirestoreAdminV1Backup setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Statistics about the backup. This data only becomes available after the backup is
   * fully materialized to secondary storage. This field will be empty till then.
   * @return value or {@code null} for none
   */
  public GoogleFirestoreAdminV1Stats getStats() {
    return stats;
  }

  /**
   * Output only. Statistics about the backup. This data only becomes available after the backup is
   * fully materialized to secondary storage. This field will be empty till then.
   * @param stats stats or {@code null} for none
   */
  public GoogleFirestoreAdminV1Backup setStats(GoogleFirestoreAdminV1Stats stats) {
    this.stats = stats;
    return this;
  }

  @Override
  public GoogleFirestoreAdminV1Backup set(String fieldName, Object value) {
    return (GoogleFirestoreAdminV1Backup) super.set(fieldName, value);
  }

  @Override
  public GoogleFirestoreAdminV1Backup clone() {
    return (GoogleFirestoreAdminV1Backup) super.clone();
  }

}
