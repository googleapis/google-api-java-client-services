/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * ------------------------------------------------------------------------- The total number of
 * anchors collected per dupforwarding (including the canonical itself). Includes additional data
 * about redundant and offdomain counts and the last timestamp it was collected from.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingDocjoinerAnchorStatisticsPerDupStats extends com.google.api.client.json.GenericJson {

  /**
   * Count of anchors kept from forwarding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer anchorCount;

  /**
   * This is EcnCollectType in anchor-ecn-matcher.h for the latest ECN of this dup: - kCollectNormal
   * = 0, // Normal collection. - kCollectUnforwarded = 1, // Forwarding leader docid match only. -
   * kCollectWhitelisted = 2, // Collected anchors matching whitelist. - kCollectNone = 4 // Skipped
   * ECN anchor cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer collectType;

  /**
   * If missing, the same as the canonical.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dupUrl;

  /**
   * Count of offdomain anchors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer offdomainAnchorCount;

  /**
   * Count of redundant anchors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer redundantAnchorCount;

  /**
   * The number of anchors being scanned from storage per dupforwarding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer scannedAnchorCount;

  /**
   * Walltime when this was scanned last.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer timestamp;

  /**
   * Count of anchors kept from forwarding.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAnchorCount() {
    return anchorCount;
  }

  /**
   * Count of anchors kept from forwarding.
   * @param anchorCount anchorCount or {@code null} for none
   */
  public IndexingDocjoinerAnchorStatisticsPerDupStats setAnchorCount(java.lang.Integer anchorCount) {
    this.anchorCount = anchorCount;
    return this;
  }

  /**
   * This is EcnCollectType in anchor-ecn-matcher.h for the latest ECN of this dup: - kCollectNormal
   * = 0, // Normal collection. - kCollectUnforwarded = 1, // Forwarding leader docid match only. -
   * kCollectWhitelisted = 2, // Collected anchors matching whitelist. - kCollectNone = 4 // Skipped
   * ECN anchor cluster.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCollectType() {
    return collectType;
  }

  /**
   * This is EcnCollectType in anchor-ecn-matcher.h for the latest ECN of this dup: - kCollectNormal
   * = 0, // Normal collection. - kCollectUnforwarded = 1, // Forwarding leader docid match only. -
   * kCollectWhitelisted = 2, // Collected anchors matching whitelist. - kCollectNone = 4 // Skipped
   * ECN anchor cluster.
   * @param collectType collectType or {@code null} for none
   */
  public IndexingDocjoinerAnchorStatisticsPerDupStats setCollectType(java.lang.Integer collectType) {
    this.collectType = collectType;
    return this;
  }

  /**
   * If missing, the same as the canonical.
   * @return value or {@code null} for none
   */
  public java.lang.String getDupUrl() {
    return dupUrl;
  }

  /**
   * If missing, the same as the canonical.
   * @param dupUrl dupUrl or {@code null} for none
   */
  public IndexingDocjoinerAnchorStatisticsPerDupStats setDupUrl(java.lang.String dupUrl) {
    this.dupUrl = dupUrl;
    return this;
  }

  /**
   * Count of offdomain anchors.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOffdomainAnchorCount() {
    return offdomainAnchorCount;
  }

  /**
   * Count of offdomain anchors.
   * @param offdomainAnchorCount offdomainAnchorCount or {@code null} for none
   */
  public IndexingDocjoinerAnchorStatisticsPerDupStats setOffdomainAnchorCount(java.lang.Integer offdomainAnchorCount) {
    this.offdomainAnchorCount = offdomainAnchorCount;
    return this;
  }

  /**
   * Count of redundant anchors.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRedundantAnchorCount() {
    return redundantAnchorCount;
  }

  /**
   * Count of redundant anchors.
   * @param redundantAnchorCount redundantAnchorCount or {@code null} for none
   */
  public IndexingDocjoinerAnchorStatisticsPerDupStats setRedundantAnchorCount(java.lang.Integer redundantAnchorCount) {
    this.redundantAnchorCount = redundantAnchorCount;
    return this;
  }

  /**
   * The number of anchors being scanned from storage per dupforwarding.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getScannedAnchorCount() {
    return scannedAnchorCount;
  }

  /**
   * The number of anchors being scanned from storage per dupforwarding.
   * @param scannedAnchorCount scannedAnchorCount or {@code null} for none
   */
  public IndexingDocjoinerAnchorStatisticsPerDupStats setScannedAnchorCount(java.lang.Integer scannedAnchorCount) {
    this.scannedAnchorCount = scannedAnchorCount;
    return this;
  }

  /**
   * Walltime when this was scanned last.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTimestamp() {
    return timestamp;
  }

  /**
   * Walltime when this was scanned last.
   * @param timestamp timestamp or {@code null} for none
   */
  public IndexingDocjoinerAnchorStatisticsPerDupStats setTimestamp(java.lang.Integer timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  @Override
  public IndexingDocjoinerAnchorStatisticsPerDupStats set(String fieldName, Object value) {
    return (IndexingDocjoinerAnchorStatisticsPerDupStats) super.set(fieldName, value);
  }

  @Override
  public IndexingDocjoinerAnchorStatisticsPerDupStats clone() {
    return (IndexingDocjoinerAnchorStatisticsPerDupStats) super.clone();
  }

}
