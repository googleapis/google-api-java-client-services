/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.discoveryengine.v1beta.model;

/**
 * A singleton resource of DataStore. If it's empty when DataStore is created and DataStore is set
 * to DataStore.ContentConfig.CONTENT_REQUIRED, the default parser will default to digital parser.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Discovery Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig extends com.google.api.client.json.GenericJson {

  /**
   * Whether chunking mode is enabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigChunkingConfig chunkingConfig;

  /**
   * Configurations for default Document parser. If not specified, we will configure it as default
   * DigitalParsingConfig, and the default parsing config will be applied to all file types for
   * Document parsing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig defaultParsingConfig;

  /**
   * The full resource name of the Document Processing Config. Format:
   * `projects/locations/collections/dataStores/documentProcessingConfig`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Map from file type to override the default parsing configuration based on the file type.
   * Supported keys: * `pdf`: Override parsing config for PDF files, either digital parsing, ocr
   * parsing or layout parsing is supported. * `html`: Override parsing config for HTML files, only
   * digital parsing and layout parsing are supported. * `docx`: Override parsing config for DOCX
   * files, only digital parsing and layout parsing are supported. * `pptx`: Override parsing config
   * for PPTX files, only digital parsing and layout parsing are supported. * `xlsm`: Override
   * parsing config for XLSM files, only digital parsing and layout parsing are supported. * `xlsx`:
   * Override parsing config for XLSX files, only digital parsing and layout parsing are supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig> parsingConfigOverrides;

  /**
   * Whether chunking mode is enabled.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigChunkingConfig getChunkingConfig() {
    return chunkingConfig;
  }

  /**
   * Whether chunking mode is enabled.
   * @param chunkingConfig chunkingConfig or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig setChunkingConfig(GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigChunkingConfig chunkingConfig) {
    this.chunkingConfig = chunkingConfig;
    return this;
  }

  /**
   * Configurations for default Document parser. If not specified, we will configure it as default
   * DigitalParsingConfig, and the default parsing config will be applied to all file types for
   * Document parsing.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig getDefaultParsingConfig() {
    return defaultParsingConfig;
  }

  /**
   * Configurations for default Document parser. If not specified, we will configure it as default
   * DigitalParsingConfig, and the default parsing config will be applied to all file types for
   * Document parsing.
   * @param defaultParsingConfig defaultParsingConfig or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig setDefaultParsingConfig(GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig defaultParsingConfig) {
    this.defaultParsingConfig = defaultParsingConfig;
    return this;
  }

  /**
   * The full resource name of the Document Processing Config. Format:
   * `projects/locations/collections/dataStores/documentProcessingConfig`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The full resource name of the Document Processing Config. Format:
   * `projects/locations/collections/dataStores/documentProcessingConfig`.
   * @param name name or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Map from file type to override the default parsing configuration based on the file type.
   * Supported keys: * `pdf`: Override parsing config for PDF files, either digital parsing, ocr
   * parsing or layout parsing is supported. * `html`: Override parsing config for HTML files, only
   * digital parsing and layout parsing are supported. * `docx`: Override parsing config for DOCX
   * files, only digital parsing and layout parsing are supported. * `pptx`: Override parsing config
   * for PPTX files, only digital parsing and layout parsing are supported. * `xlsm`: Override
   * parsing config for XLSM files, only digital parsing and layout parsing are supported. * `xlsx`:
   * Override parsing config for XLSX files, only digital parsing and layout parsing are supported.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig> getParsingConfigOverrides() {
    return parsingConfigOverrides;
  }

  /**
   * Map from file type to override the default parsing configuration based on the file type.
   * Supported keys: * `pdf`: Override parsing config for PDF files, either digital parsing, ocr
   * parsing or layout parsing is supported. * `html`: Override parsing config for HTML files, only
   * digital parsing and layout parsing are supported. * `docx`: Override parsing config for DOCX
   * files, only digital parsing and layout parsing are supported. * `pptx`: Override parsing config
   * for PPTX files, only digital parsing and layout parsing are supported. * `xlsm`: Override
   * parsing config for XLSM files, only digital parsing and layout parsing are supported. * `xlsx`:
   * Override parsing config for XLSX files, only digital parsing and layout parsing are supported.
   * @param parsingConfigOverrides parsingConfigOverrides or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig setParsingConfigOverrides(java.util.Map<String, GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig> parsingConfigOverrides) {
    this.parsingConfigOverrides = parsingConfigOverrides;
    return this;
  }

  @Override
  public GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig set(String fieldName, Object value) {
    return (GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig clone() {
    return (GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig) super.clone();
  }

}
