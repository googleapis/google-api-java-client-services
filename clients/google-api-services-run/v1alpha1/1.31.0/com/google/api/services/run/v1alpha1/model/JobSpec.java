/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.run.v1alpha1.model;

/**
 * JobSpec describes how the job execution will look like.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Run Admin API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class JobSpec extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Not supported. Specifies the duration in seconds relative to the startTime that the
   * job may be active before the system tries to terminate it. If set to zero, the system will
   * never attempt to terminate the job based on time. Otherwise, the value must be positive
   * integer. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long activeDeadlineSeconds;

  /**
   * Optional. Specifies the number of retries per instance, before marking this job failed. If set
   * to zero, instances will never retry on failure. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer backoffLimit;

  /**
   * Optional. Specifies the desired number of successfully finished instances the job should be run
   * with. Setting to 1 means that parallelism is limited to 1 and the success of that instance
   * signals the success of the job. More info:
   * https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer completions;

  /**
   * Optional. Specifies the maximum desired number of instances the job should run at any given
   * time. Must be <= completions. The actual number of instances running in steady state will be
   * less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e.
   * when the work left to do is less than max parallelism. More info:
   * https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer parallelism;

  /**
   * Optional. Describes the instance that will be created when executing a job.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private InstanceTemplateSpec template;

  /**
   * Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished
   * execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the
   * Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its
   * lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job
   * won't be automatically deleted. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer ttlSecondsAfterFinished;

  /**
   * Optional. Not supported. Specifies the duration in seconds relative to the startTime that the
   * job may be active before the system tries to terminate it. If set to zero, the system will
   * never attempt to terminate the job based on time. Otherwise, the value must be positive
   * integer. +optional
   * @return value or {@code null} for none
   */
  public java.lang.Long getActiveDeadlineSeconds() {
    return activeDeadlineSeconds;
  }

  /**
   * Optional. Not supported. Specifies the duration in seconds relative to the startTime that the
   * job may be active before the system tries to terminate it. If set to zero, the system will
   * never attempt to terminate the job based on time. Otherwise, the value must be positive
   * integer. +optional
   * @param activeDeadlineSeconds activeDeadlineSeconds or {@code null} for none
   */
  public JobSpec setActiveDeadlineSeconds(java.lang.Long activeDeadlineSeconds) {
    this.activeDeadlineSeconds = activeDeadlineSeconds;
    return this;
  }

  /**
   * Optional. Specifies the number of retries per instance, before marking this job failed. If set
   * to zero, instances will never retry on failure. +optional
   * @return value or {@code null} for none
   */
  public java.lang.Integer getBackoffLimit() {
    return backoffLimit;
  }

  /**
   * Optional. Specifies the number of retries per instance, before marking this job failed. If set
   * to zero, instances will never retry on failure. +optional
   * @param backoffLimit backoffLimit or {@code null} for none
   */
  public JobSpec setBackoffLimit(java.lang.Integer backoffLimit) {
    this.backoffLimit = backoffLimit;
    return this;
  }

  /**
   * Optional. Specifies the desired number of successfully finished instances the job should be run
   * with. Setting to 1 means that parallelism is limited to 1 and the success of that instance
   * signals the success of the job. More info:
   * https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCompletions() {
    return completions;
  }

  /**
   * Optional. Specifies the desired number of successfully finished instances the job should be run
   * with. Setting to 1 means that parallelism is limited to 1 and the success of that instance
   * signals the success of the job. More info:
   * https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
   * @param completions completions or {@code null} for none
   */
  public JobSpec setCompletions(java.lang.Integer completions) {
    this.completions = completions;
    return this;
  }

  /**
   * Optional. Specifies the maximum desired number of instances the job should run at any given
   * time. Must be <= completions. The actual number of instances running in steady state will be
   * less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e.
   * when the work left to do is less than max parallelism. More info:
   * https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
   * @return value or {@code null} for none
   */
  public java.lang.Integer getParallelism() {
    return parallelism;
  }

  /**
   * Optional. Specifies the maximum desired number of instances the job should run at any given
   * time. Must be <= completions. The actual number of instances running in steady state will be
   * less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e.
   * when the work left to do is less than max parallelism. More info:
   * https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
   * @param parallelism parallelism or {@code null} for none
   */
  public JobSpec setParallelism(java.lang.Integer parallelism) {
    this.parallelism = parallelism;
    return this;
  }

  /**
   * Optional. Describes the instance that will be created when executing a job.
   * @return value or {@code null} for none
   */
  public InstanceTemplateSpec getTemplate() {
    return template;
  }

  /**
   * Optional. Describes the instance that will be created when executing a job.
   * @param template template or {@code null} for none
   */
  public JobSpec setTemplate(InstanceTemplateSpec template) {
    this.template = template;
    return this;
  }

  /**
   * Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished
   * execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the
   * Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its
   * lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job
   * won't be automatically deleted. +optional
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTtlSecondsAfterFinished() {
    return ttlSecondsAfterFinished;
  }

  /**
   * Optional. Not supported. ttlSecondsAfterFinished limits the lifetime of a Job that has finished
   * execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the
   * Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its
   * lifecycle guarantees (e.g. finalizers) will be honored. If this field is set to zero, the Job
   * won't be automatically deleted. +optional
   * @param ttlSecondsAfterFinished ttlSecondsAfterFinished or {@code null} for none
   */
  public JobSpec setTtlSecondsAfterFinished(java.lang.Integer ttlSecondsAfterFinished) {
    this.ttlSecondsAfterFinished = ttlSecondsAfterFinished;
    return this;
  }

  @Override
  public JobSpec set(String fieldName, Object value) {
    return (JobSpec) super.set(fieldName, value);
  }

  @Override
  public JobSpec clone() {
    return (JobSpec) super.clone();
  }

}
