/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Generic geo-location information. This is error-prone due to the fact that is uses signed integer
 * fields, which are not supported by proto1 API and are cast to unsigned integers. Consider using
 * the metadata_util function directly, which fills out a version 2 API proto.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoVideoGeoLocation extends com.google.api.client.json.GenericJson {

  /**
   * Altitude is in meters and multiplied by 100 (i.e., in centimeters). Up till 10 km this fits in
   * 3 bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer altitudeE2;

  /**
   * Latitude and longitude are in degrees and multiplied by 10^7. This gives the worst precision of
   * about 1 cm at the equator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer latitudeE7;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer longitudeE7;

  /**
   * Altitude is in meters and multiplied by 100 (i.e., in centimeters). Up till 10 km this fits in
   * 3 bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAltitudeE2() {
    return altitudeE2;
  }

  /**
   * Altitude is in meters and multiplied by 100 (i.e., in centimeters). Up till 10 km this fits in
   * 3 bytes.
   * @param altitudeE2 altitudeE2 or {@code null} for none
   */
  public VideoVideoGeoLocation setAltitudeE2(java.lang.Integer altitudeE2) {
    this.altitudeE2 = altitudeE2;
    return this;
  }

  /**
   * Latitude and longitude are in degrees and multiplied by 10^7. This gives the worst precision of
   * about 1 cm at the equator.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLatitudeE7() {
    return latitudeE7;
  }

  /**
   * Latitude and longitude are in degrees and multiplied by 10^7. This gives the worst precision of
   * about 1 cm at the equator.
   * @param latitudeE7 latitudeE7 or {@code null} for none
   */
  public VideoVideoGeoLocation setLatitudeE7(java.lang.Integer latitudeE7) {
    this.latitudeE7 = latitudeE7;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLongitudeE7() {
    return longitudeE7;
  }

  /**
   * @param longitudeE7 longitudeE7 or {@code null} for none
   */
  public VideoVideoGeoLocation setLongitudeE7(java.lang.Integer longitudeE7) {
    this.longitudeE7 = longitudeE7;
    return this;
  }

  @Override
  public VideoVideoGeoLocation set(String fieldName, Object value) {
    return (VideoVideoGeoLocation) super.set(fieldName, value);
  }

  @Override
  public VideoVideoGeoLocation clone() {
    return (VideoVideoGeoLocation) super.clone();
  }

}
