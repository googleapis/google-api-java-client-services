/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.appengine.v1.model;

/**
 * Health checking configuration for VM instances. Unhealthy instances are killed and replaced with
 * new instances.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the App Engine Admin API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LivenessCheck extends com.google.api.client.json.GenericJson {

  /**
   * Interval between health checks.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String checkInterval;

  /**
   * Number of consecutive failed checks required before considering the VM unhealthy.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long failureThreshold;

  /**
   * Host header to send when performing a HTTP Liveness check. Example: "myapp.appspot.com"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String host;

  /**
   * The initial delay before starting to execute the checks.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String initialDelay;

  /**
   * The request path.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String path;

  /**
   * Number of consecutive successful checks required before considering the VM healthy.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long successThreshold;

  /**
   * Time before the check is considered failed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String timeout;

  /**
   * Interval between health checks.
   * @return value or {@code null} for none
   */
  public String getCheckInterval() {
    return checkInterval;
  }

  /**
   * Interval between health checks.
   * @param checkInterval checkInterval or {@code null} for none
   */
  public LivenessCheck setCheckInterval(String checkInterval) {
    this.checkInterval = checkInterval;
    return this;
  }

  /**
   * Number of consecutive failed checks required before considering the VM unhealthy.
   * @return value or {@code null} for none
   */
  public java.lang.Long getFailureThreshold() {
    return failureThreshold;
  }

  /**
   * Number of consecutive failed checks required before considering the VM unhealthy.
   * @param failureThreshold failureThreshold or {@code null} for none
   */
  public LivenessCheck setFailureThreshold(java.lang.Long failureThreshold) {
    this.failureThreshold = failureThreshold;
    return this;
  }

  /**
   * Host header to send when performing a HTTP Liveness check. Example: "myapp.appspot.com"
   * @return value or {@code null} for none
   */
  public java.lang.String getHost() {
    return host;
  }

  /**
   * Host header to send when performing a HTTP Liveness check. Example: "myapp.appspot.com"
   * @param host host or {@code null} for none
   */
  public LivenessCheck setHost(java.lang.String host) {
    this.host = host;
    return this;
  }

  /**
   * The initial delay before starting to execute the checks.
   * @return value or {@code null} for none
   */
  public String getInitialDelay() {
    return initialDelay;
  }

  /**
   * The initial delay before starting to execute the checks.
   * @param initialDelay initialDelay or {@code null} for none
   */
  public LivenessCheck setInitialDelay(String initialDelay) {
    this.initialDelay = initialDelay;
    return this;
  }

  /**
   * The request path.
   * @return value or {@code null} for none
   */
  public java.lang.String getPath() {
    return path;
  }

  /**
   * The request path.
   * @param path path or {@code null} for none
   */
  public LivenessCheck setPath(java.lang.String path) {
    this.path = path;
    return this;
  }

  /**
   * Number of consecutive successful checks required before considering the VM healthy.
   * @return value or {@code null} for none
   */
  public java.lang.Long getSuccessThreshold() {
    return successThreshold;
  }

  /**
   * Number of consecutive successful checks required before considering the VM healthy.
   * @param successThreshold successThreshold or {@code null} for none
   */
  public LivenessCheck setSuccessThreshold(java.lang.Long successThreshold) {
    this.successThreshold = successThreshold;
    return this;
  }

  /**
   * Time before the check is considered failed.
   * @return value or {@code null} for none
   */
  public String getTimeout() {
    return timeout;
  }

  /**
   * Time before the check is considered failed.
   * @param timeout timeout or {@code null} for none
   */
  public LivenessCheck setTimeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  @Override
  public LivenessCheck set(String fieldName, Object value) {
    return (LivenessCheck) super.set(fieldName, value);
  }

  @Override
  public LivenessCheck clone() {
    return (LivenessCheck) super.clone();
  }

}
