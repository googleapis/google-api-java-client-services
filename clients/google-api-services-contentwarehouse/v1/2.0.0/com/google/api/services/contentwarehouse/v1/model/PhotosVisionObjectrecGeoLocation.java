/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The geo-location of a single point, or of the "center" of a group of points.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PhotosVisionObjectrecGeoLocation extends com.google.api.client.json.GenericJson {

  /**
   * Altitude of the point above the earth's surface, in meters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double altitudeMeters;

  /**
   * Country code string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String countryCode;

  /**
   * Indicates if the lat/lon above is assumed to come from a GPS device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean fromGps;

  /**
   * Latitude in degrees north. Values south of the equator are negative.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double lat;

  /**
   * When applied to a single point, represents the estimated error bounds of manual geotagging. The
   * estimate is based on size of the bounding box of the map used for manual geotagging. When
   * applied to a group of points, the error bounds represent the dispersion around the group center
   * (lat/lon above). The dispersion in this case is computed as half the interquartile range.
   * Reference: http://en.wikipedia.org/wiki/Interquartile_range (lat +/- lat_error_bound, lng +/-
   * lng_error_bound).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double latErrorBound;

  /**
   * Longitude in degrees east. Values west of 0 deg are negative.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double lon;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double lonErrorBound;

  /**
   * Altitude of the point above the earth's surface, in meters.
   * @return value or {@code null} for none
   */
  public java.lang.Double getAltitudeMeters() {
    return altitudeMeters;
  }

  /**
   * Altitude of the point above the earth's surface, in meters.
   * @param altitudeMeters altitudeMeters or {@code null} for none
   */
  public PhotosVisionObjectrecGeoLocation setAltitudeMeters(java.lang.Double altitudeMeters) {
    this.altitudeMeters = altitudeMeters;
    return this;
  }

  /**
   * Country code string.
   * @return value or {@code null} for none
   */
  public java.lang.String getCountryCode() {
    return countryCode;
  }

  /**
   * Country code string.
   * @param countryCode countryCode or {@code null} for none
   */
  public PhotosVisionObjectrecGeoLocation setCountryCode(java.lang.String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Indicates if the lat/lon above is assumed to come from a GPS device.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getFromGps() {
    return fromGps;
  }

  /**
   * Indicates if the lat/lon above is assumed to come from a GPS device.
   * @param fromGps fromGps or {@code null} for none
   */
  public PhotosVisionObjectrecGeoLocation setFromGps(java.lang.Boolean fromGps) {
    this.fromGps = fromGps;
    return this;
  }

  /**
   * Latitude in degrees north. Values south of the equator are negative.
   * @return value or {@code null} for none
   */
  public java.lang.Double getLat() {
    return lat;
  }

  /**
   * Latitude in degrees north. Values south of the equator are negative.
   * @param lat lat or {@code null} for none
   */
  public PhotosVisionObjectrecGeoLocation setLat(java.lang.Double lat) {
    this.lat = lat;
    return this;
  }

  /**
   * When applied to a single point, represents the estimated error bounds of manual geotagging. The
   * estimate is based on size of the bounding box of the map used for manual geotagging. When
   * applied to a group of points, the error bounds represent the dispersion around the group center
   * (lat/lon above). The dispersion in this case is computed as half the interquartile range.
   * Reference: http://en.wikipedia.org/wiki/Interquartile_range (lat +/- lat_error_bound, lng +/-
   * lng_error_bound).
   * @return value or {@code null} for none
   */
  public java.lang.Double getLatErrorBound() {
    return latErrorBound;
  }

  /**
   * When applied to a single point, represents the estimated error bounds of manual geotagging. The
   * estimate is based on size of the bounding box of the map used for manual geotagging. When
   * applied to a group of points, the error bounds represent the dispersion around the group center
   * (lat/lon above). The dispersion in this case is computed as half the interquartile range.
   * Reference: http://en.wikipedia.org/wiki/Interquartile_range (lat +/- lat_error_bound, lng +/-
   * lng_error_bound).
   * @param latErrorBound latErrorBound or {@code null} for none
   */
  public PhotosVisionObjectrecGeoLocation setLatErrorBound(java.lang.Double latErrorBound) {
    this.latErrorBound = latErrorBound;
    return this;
  }

  /**
   * Longitude in degrees east. Values west of 0 deg are negative.
   * @return value or {@code null} for none
   */
  public java.lang.Double getLon() {
    return lon;
  }

  /**
   * Longitude in degrees east. Values west of 0 deg are negative.
   * @param lon lon or {@code null} for none
   */
  public PhotosVisionObjectrecGeoLocation setLon(java.lang.Double lon) {
    this.lon = lon;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getLonErrorBound() {
    return lonErrorBound;
  }

  /**
   * @param lonErrorBound lonErrorBound or {@code null} for none
   */
  public PhotosVisionObjectrecGeoLocation setLonErrorBound(java.lang.Double lonErrorBound) {
    this.lonErrorBound = lonErrorBound;
    return this;
  }

  @Override
  public PhotosVisionObjectrecGeoLocation set(String fieldName, Object value) {
    return (PhotosVisionObjectrecGeoLocation) super.set(fieldName, value);
  }

  @Override
  public PhotosVisionObjectrecGeoLocation clone() {
    return (PhotosVisionObjectrecGeoLocation) super.clone();
  }

}
