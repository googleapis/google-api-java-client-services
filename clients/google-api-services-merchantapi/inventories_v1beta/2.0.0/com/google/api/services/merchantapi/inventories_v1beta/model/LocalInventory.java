/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.merchantapi.inventories_v1beta.model;

/**
 * Local inventory information for the product. Represents in-store information for a specific
 * product at the store specified by `storeCode`. For a list of all accepted attribute values, see
 * the [local product inventory data
 * specification](https://support.google.com/merchants/answer/3061342).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Merchant API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LocalInventory extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The account that owns the product. This field will be ignored if set by the
   * client.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long account;

  /**
   * Availability of the product at this store. For accepted attribute values, see the [local
   * product inventory data specification](https://support.google.com/merchants/answer/3061342)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String availability;

  /**
   * A list of custom (merchant-provided) attributes. You can also use `CustomAttribute` to submit
   * any attribute of the data specification in its generic form.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CustomAttribute> customAttributes;

  static {
    // hack to force ProGuard to consider CustomAttribute used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CustomAttribute.class);
  }

  /**
   * Location of the product inside the store. Maximum length is 20 bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String instoreProductLocation;

  /**
   * Output only. The name of the `LocalInventory` resource. Format:
   * `accounts/{account}/products/{product}/localInventories/{store_code}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Supported pickup method for this product. Unless the value is `"not supported"`, this field
   * must be submitted together with `pickupSla`. For accepted attribute values, see the [local
   * product inventory data specification](https://support.google.com/merchants/answer/3061342)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pickupMethod;

  /**
   * Relative time period from the order date for an order for this product, from this store, to be
   * ready for pickup. Must be submitted with `pickupMethod`. For accepted attribute values, see the
   * [local product inventory data
   * specification](https://support.google.com/merchants/answer/3061342)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pickupSla;

  /**
   * Price of the product at this store.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Price price;

  /**
   * Quantity of the product available at this store. Must be greater than or equal to zero.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long quantity;

  /**
   * Sale price of the product at this store. Mandatory if `salePriceEffectiveDate` is defined.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Price salePrice;

  /**
   * The `TimePeriod` of the sale at this store.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Interval salePriceEffectiveDate;

  /**
   * Required. Immutable. Store code (the store ID from your Business Profile) of the physical store
   * the product is sold in. See the [Local product inventory data
   * specification](https://support.google.com/merchants/answer/3061342) for more information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String storeCode;

  /**
   * Output only. The account that owns the product. This field will be ignored if set by the
   * client.
   * @return value or {@code null} for none
   */
  public java.lang.Long getAccount() {
    return account;
  }

  /**
   * Output only. The account that owns the product. This field will be ignored if set by the
   * client.
   * @param account account or {@code null} for none
   */
  public LocalInventory setAccount(java.lang.Long account) {
    this.account = account;
    return this;
  }

  /**
   * Availability of the product at this store. For accepted attribute values, see the [local
   * product inventory data specification](https://support.google.com/merchants/answer/3061342)
   * @return value or {@code null} for none
   */
  public java.lang.String getAvailability() {
    return availability;
  }

  /**
   * Availability of the product at this store. For accepted attribute values, see the [local
   * product inventory data specification](https://support.google.com/merchants/answer/3061342)
   * @param availability availability or {@code null} for none
   */
  public LocalInventory setAvailability(java.lang.String availability) {
    this.availability = availability;
    return this;
  }

  /**
   * A list of custom (merchant-provided) attributes. You can also use `CustomAttribute` to submit
   * any attribute of the data specification in its generic form.
   * @return value or {@code null} for none
   */
  public java.util.List<CustomAttribute> getCustomAttributes() {
    return customAttributes;
  }

  /**
   * A list of custom (merchant-provided) attributes. You can also use `CustomAttribute` to submit
   * any attribute of the data specification in its generic form.
   * @param customAttributes customAttributes or {@code null} for none
   */
  public LocalInventory setCustomAttributes(java.util.List<CustomAttribute> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  /**
   * Location of the product inside the store. Maximum length is 20 bytes.
   * @return value or {@code null} for none
   */
  public java.lang.String getInstoreProductLocation() {
    return instoreProductLocation;
  }

  /**
   * Location of the product inside the store. Maximum length is 20 bytes.
   * @param instoreProductLocation instoreProductLocation or {@code null} for none
   */
  public LocalInventory setInstoreProductLocation(java.lang.String instoreProductLocation) {
    this.instoreProductLocation = instoreProductLocation;
    return this;
  }

  /**
   * Output only. The name of the `LocalInventory` resource. Format:
   * `accounts/{account}/products/{product}/localInventories/{store_code}`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The name of the `LocalInventory` resource. Format:
   * `accounts/{account}/products/{product}/localInventories/{store_code}`
   * @param name name or {@code null} for none
   */
  public LocalInventory setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Supported pickup method for this product. Unless the value is `"not supported"`, this field
   * must be submitted together with `pickupSla`. For accepted attribute values, see the [local
   * product inventory data specification](https://support.google.com/merchants/answer/3061342)
   * @return value or {@code null} for none
   */
  public java.lang.String getPickupMethod() {
    return pickupMethod;
  }

  /**
   * Supported pickup method for this product. Unless the value is `"not supported"`, this field
   * must be submitted together with `pickupSla`. For accepted attribute values, see the [local
   * product inventory data specification](https://support.google.com/merchants/answer/3061342)
   * @param pickupMethod pickupMethod or {@code null} for none
   */
  public LocalInventory setPickupMethod(java.lang.String pickupMethod) {
    this.pickupMethod = pickupMethod;
    return this;
  }

  /**
   * Relative time period from the order date for an order for this product, from this store, to be
   * ready for pickup. Must be submitted with `pickupMethod`. For accepted attribute values, see the
   * [local product inventory data
   * specification](https://support.google.com/merchants/answer/3061342)
   * @return value or {@code null} for none
   */
  public java.lang.String getPickupSla() {
    return pickupSla;
  }

  /**
   * Relative time period from the order date for an order for this product, from this store, to be
   * ready for pickup. Must be submitted with `pickupMethod`. For accepted attribute values, see the
   * [local product inventory data
   * specification](https://support.google.com/merchants/answer/3061342)
   * @param pickupSla pickupSla or {@code null} for none
   */
  public LocalInventory setPickupSla(java.lang.String pickupSla) {
    this.pickupSla = pickupSla;
    return this;
  }

  /**
   * Price of the product at this store.
   * @return value or {@code null} for none
   */
  public Price getPrice() {
    return price;
  }

  /**
   * Price of the product at this store.
   * @param price price or {@code null} for none
   */
  public LocalInventory setPrice(Price price) {
    this.price = price;
    return this;
  }

  /**
   * Quantity of the product available at this store. Must be greater than or equal to zero.
   * @return value or {@code null} for none
   */
  public java.lang.Long getQuantity() {
    return quantity;
  }

  /**
   * Quantity of the product available at this store. Must be greater than or equal to zero.
   * @param quantity quantity or {@code null} for none
   */
  public LocalInventory setQuantity(java.lang.Long quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Sale price of the product at this store. Mandatory if `salePriceEffectiveDate` is defined.
   * @return value or {@code null} for none
   */
  public Price getSalePrice() {
    return salePrice;
  }

  /**
   * Sale price of the product at this store. Mandatory if `salePriceEffectiveDate` is defined.
   * @param salePrice salePrice or {@code null} for none
   */
  public LocalInventory setSalePrice(Price salePrice) {
    this.salePrice = salePrice;
    return this;
  }

  /**
   * The `TimePeriod` of the sale at this store.
   * @return value or {@code null} for none
   */
  public Interval getSalePriceEffectiveDate() {
    return salePriceEffectiveDate;
  }

  /**
   * The `TimePeriod` of the sale at this store.
   * @param salePriceEffectiveDate salePriceEffectiveDate or {@code null} for none
   */
  public LocalInventory setSalePriceEffectiveDate(Interval salePriceEffectiveDate) {
    this.salePriceEffectiveDate = salePriceEffectiveDate;
    return this;
  }

  /**
   * Required. Immutable. Store code (the store ID from your Business Profile) of the physical store
   * the product is sold in. See the [Local product inventory data
   * specification](https://support.google.com/merchants/answer/3061342) for more information.
   * @return value or {@code null} for none
   */
  public java.lang.String getStoreCode() {
    return storeCode;
  }

  /**
   * Required. Immutable. Store code (the store ID from your Business Profile) of the physical store
   * the product is sold in. See the [Local product inventory data
   * specification](https://support.google.com/merchants/answer/3061342) for more information.
   * @param storeCode storeCode or {@code null} for none
   */
  public LocalInventory setStoreCode(java.lang.String storeCode) {
    this.storeCode = storeCode;
    return this;
  }

  @Override
  public LocalInventory set(String fieldName, Object value) {
    return (LocalInventory) super.set(fieldName, value);
  }

  @Override
  public LocalInventory clone() {
    return (LocalInventory) super.clone();
  }

}
