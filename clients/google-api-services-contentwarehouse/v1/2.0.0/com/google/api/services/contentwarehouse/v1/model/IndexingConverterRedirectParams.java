/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * If we detect any server or content based redirect, we will store the characteristics in this
 * message.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingConverterRedirectParams extends com.google.api.client.json.GenericJson {

  /**
   * The time difference between page loading and redirect occurrence. When missing, it means the
   * redirect happens immediately (i.e. delay = 0). In seconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer delay;

  /**
   * Populated for SINGLE_FRAME and SINGLE_IFRAME redirects only and indicates that the target url
   * requested not to be framed, by virtue of using the "X-Frame-Options" HTTP header.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean frameTargetDeniesFraming;

  /**
   * Indicates corresponding redirect is a download. This field is only set when rendering redirect
   * chain is used. This field represents the value of corresponding
   * "RedirectEvent.target_content_downloaded" field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isDownload;

  /**
   * Indicates corresponding redirect is from rendering if set to true.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isRenderingRedirect;

  /**
   * If set, it means that the redirect of type META was detected by Trawler (as opposed to the
   * content processor.) Only makes sense when type is META.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean metaRedirectFromTrawler;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The time difference between page loading and redirect occurrence. When missing, it means the
   * redirect happens immediately (i.e. delay = 0). In seconds.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDelay() {
    return delay;
  }

  /**
   * The time difference between page loading and redirect occurrence. When missing, it means the
   * redirect happens immediately (i.e. delay = 0). In seconds.
   * @param delay delay or {@code null} for none
   */
  public IndexingConverterRedirectParams setDelay(java.lang.Integer delay) {
    this.delay = delay;
    return this;
  }

  /**
   * Populated for SINGLE_FRAME and SINGLE_IFRAME redirects only and indicates that the target url
   * requested not to be framed, by virtue of using the "X-Frame-Options" HTTP header.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getFrameTargetDeniesFraming() {
    return frameTargetDeniesFraming;
  }

  /**
   * Populated for SINGLE_FRAME and SINGLE_IFRAME redirects only and indicates that the target url
   * requested not to be framed, by virtue of using the "X-Frame-Options" HTTP header.
   * @param frameTargetDeniesFraming frameTargetDeniesFraming or {@code null} for none
   */
  public IndexingConverterRedirectParams setFrameTargetDeniesFraming(java.lang.Boolean frameTargetDeniesFraming) {
    this.frameTargetDeniesFraming = frameTargetDeniesFraming;
    return this;
  }

  /**
   * Indicates corresponding redirect is a download. This field is only set when rendering redirect
   * chain is used. This field represents the value of corresponding
   * "RedirectEvent.target_content_downloaded" field.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsDownload() {
    return isDownload;
  }

  /**
   * Indicates corresponding redirect is a download. This field is only set when rendering redirect
   * chain is used. This field represents the value of corresponding
   * "RedirectEvent.target_content_downloaded" field.
   * @param isDownload isDownload or {@code null} for none
   */
  public IndexingConverterRedirectParams setIsDownload(java.lang.Boolean isDownload) {
    this.isDownload = isDownload;
    return this;
  }

  /**
   * Indicates corresponding redirect is from rendering if set to true.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsRenderingRedirect() {
    return isRenderingRedirect;
  }

  /**
   * Indicates corresponding redirect is from rendering if set to true.
   * @param isRenderingRedirect isRenderingRedirect or {@code null} for none
   */
  public IndexingConverterRedirectParams setIsRenderingRedirect(java.lang.Boolean isRenderingRedirect) {
    this.isRenderingRedirect = isRenderingRedirect;
    return this;
  }

  /**
   * If set, it means that the redirect of type META was detected by Trawler (as opposed to the
   * content processor.) Only makes sense when type is META.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMetaRedirectFromTrawler() {
    return metaRedirectFromTrawler;
  }

  /**
   * If set, it means that the redirect of type META was detected by Trawler (as opposed to the
   * content processor.) Only makes sense when type is META.
   * @param metaRedirectFromTrawler metaRedirectFromTrawler or {@code null} for none
   */
  public IndexingConverterRedirectParams setMetaRedirectFromTrawler(java.lang.Boolean metaRedirectFromTrawler) {
    this.metaRedirectFromTrawler = metaRedirectFromTrawler;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * @param type type or {@code null} for none
   */
  public IndexingConverterRedirectParams setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public IndexingConverterRedirectParams set(String fieldName, Object value) {
    return (IndexingConverterRedirectParams) super.set(fieldName, value);
  }

  @Override
  public IndexingConverterRedirectParams clone() {
    return (IndexingConverterRedirectParams) super.clone();
  }

}
