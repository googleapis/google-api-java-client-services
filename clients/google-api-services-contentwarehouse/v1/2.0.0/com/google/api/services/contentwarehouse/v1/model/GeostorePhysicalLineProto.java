/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Describes a single physical marker line.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostorePhysicalLineProto extends com.google.api.client.json.GenericJson {

  /**
   * Applicable for DASHED and DOTTED_DASHED lines.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float dashLengthMeters;

  /**
   * This should be rarely needed, but can represent patterns of alternating colors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostorePaintedElementLogicalColorProto gapColor;

  /**
   * Applicable for DASHED, DOTTED, and DOTTED_DASHED lines.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float gapLengthMeters;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> material;

  /**
   * Color for the painted elements. Applicable to all types.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostorePaintedElementLogicalColorProto paintColor;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pattern;

  /**
   * A token that can be used to identify the version of the data about this marker line.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String physicalLineToken;

  /**
   * Applicable for DASHED and DOTTED_DASHED lines.
   * @return value or {@code null} for none
   */
  public java.lang.Float getDashLengthMeters() {
    return dashLengthMeters;
  }

  /**
   * Applicable for DASHED and DOTTED_DASHED lines.
   * @param dashLengthMeters dashLengthMeters or {@code null} for none
   */
  public GeostorePhysicalLineProto setDashLengthMeters(java.lang.Float dashLengthMeters) {
    this.dashLengthMeters = dashLengthMeters;
    return this;
  }

  /**
   * This should be rarely needed, but can represent patterns of alternating colors.
   * @return value or {@code null} for none
   */
  public GeostorePaintedElementLogicalColorProto getGapColor() {
    return gapColor;
  }

  /**
   * This should be rarely needed, but can represent patterns of alternating colors.
   * @param gapColor gapColor or {@code null} for none
   */
  public GeostorePhysicalLineProto setGapColor(GeostorePaintedElementLogicalColorProto gapColor) {
    this.gapColor = gapColor;
    return this;
  }

  /**
   * Applicable for DASHED, DOTTED, and DOTTED_DASHED lines.
   * @return value or {@code null} for none
   */
  public java.lang.Float getGapLengthMeters() {
    return gapLengthMeters;
  }

  /**
   * Applicable for DASHED, DOTTED, and DOTTED_DASHED lines.
   * @param gapLengthMeters gapLengthMeters or {@code null} for none
   */
  public GeostorePhysicalLineProto setGapLengthMeters(java.lang.Float gapLengthMeters) {
    this.gapLengthMeters = gapLengthMeters;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMaterial() {
    return material;
  }

  /**
   * @param material material or {@code null} for none
   */
  public GeostorePhysicalLineProto setMaterial(java.util.List<java.lang.String> material) {
    this.material = material;
    return this;
  }

  /**
   * Color for the painted elements. Applicable to all types.
   * @return value or {@code null} for none
   */
  public GeostorePaintedElementLogicalColorProto getPaintColor() {
    return paintColor;
  }

  /**
   * Color for the painted elements. Applicable to all types.
   * @param paintColor paintColor or {@code null} for none
   */
  public GeostorePhysicalLineProto setPaintColor(GeostorePaintedElementLogicalColorProto paintColor) {
    this.paintColor = paintColor;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getPattern() {
    return pattern;
  }

  /**
   * @param pattern pattern or {@code null} for none
   */
  public GeostorePhysicalLineProto setPattern(java.lang.String pattern) {
    this.pattern = pattern;
    return this;
  }

  /**
   * A token that can be used to identify the version of the data about this marker line.
   * @return value or {@code null} for none
   */
  public java.lang.String getPhysicalLineToken() {
    return physicalLineToken;
  }

  /**
   * A token that can be used to identify the version of the data about this marker line.
   * @param physicalLineToken physicalLineToken or {@code null} for none
   */
  public GeostorePhysicalLineProto setPhysicalLineToken(java.lang.String physicalLineToken) {
    this.physicalLineToken = physicalLineToken;
    return this;
  }

  @Override
  public GeostorePhysicalLineProto set(String fieldName, Object value) {
    return (GeostorePhysicalLineProto) super.set(fieldName, value);
  }

  @Override
  public GeostorePhysicalLineProto clone() {
    return (GeostorePhysicalLineProto) super.clone();
  }

}
