/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.file.v1beta1.model;

/**
 * Performance configuration. Used for setting the performance configuration. Defaults to
 * `iops_by_capacity` if unset in instance creation.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Filestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PerformanceConfig extends com.google.api.client.json.GenericJson {

  /**
   * Choose a fixed provisioned IOPS value for the instance, which will remain constant regardless
   * of instance capacity. Value must be a multiple of 1000. If the chosen value is outside the
   * supported range for the instance's capacity during instance creation, instance creation will
   * fail with an `InvalidArgument` error. Similarly, if an instance capacity update would result in
   * a value outside the supported range, the update will fail with an `InvalidArgument` error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private FixedIOPS fixedIops;

  /**
   * Automatically provision maximum available IOPS based on the capacity of the instance. Larger
   * instances will be granted more IOPS. If instance capacity is increased or decreased, IOPS will
   * be automatically adjusted upwards or downwards accordingly. The maximum available IOPS for a
   * given capacity is defined in Filestore documentation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean iopsByCapacity;

  /**
   * Provision IOPS dynamically based on the capacity of the instance. Provisioned read IOPS will be
   * calculated by by multiplying the capacity of the instance in GiB by the `iops_per_gb` value,
   * and rounding to the nearest 1000. For example, for a 1 TiB instance with an `iops_per_gb` value
   * of 15, the provisioned read IOPS would be `1024 * 15 = 15,360`, rounded to `15,000`. If the
   * calculated value is outside the supported range for the instance's capacity during instance
   * creation, instance creation will fail with an `InvalidArgument` error. Similarly, if an
   * instance capacity update would result in a value outside the supported range, the update will
   * fail with an `InvalidArgument` error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IOPSPerGB iopsPerGb;

  /**
   * Choose a fixed provisioned IOPS value for the instance, which will remain constant regardless
   * of instance capacity. Value must be a multiple of 1000. If the chosen value is outside the
   * supported range for the instance's capacity during instance creation, instance creation will
   * fail with an `InvalidArgument` error. Similarly, if an instance capacity update would result in
   * a value outside the supported range, the update will fail with an `InvalidArgument` error.
   * @return value or {@code null} for none
   */
  public FixedIOPS getFixedIops() {
    return fixedIops;
  }

  /**
   * Choose a fixed provisioned IOPS value for the instance, which will remain constant regardless
   * of instance capacity. Value must be a multiple of 1000. If the chosen value is outside the
   * supported range for the instance's capacity during instance creation, instance creation will
   * fail with an `InvalidArgument` error. Similarly, if an instance capacity update would result in
   * a value outside the supported range, the update will fail with an `InvalidArgument` error.
   * @param fixedIops fixedIops or {@code null} for none
   */
  public PerformanceConfig setFixedIops(FixedIOPS fixedIops) {
    this.fixedIops = fixedIops;
    return this;
  }

  /**
   * Automatically provision maximum available IOPS based on the capacity of the instance. Larger
   * instances will be granted more IOPS. If instance capacity is increased or decreased, IOPS will
   * be automatically adjusted upwards or downwards accordingly. The maximum available IOPS for a
   * given capacity is defined in Filestore documentation.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIopsByCapacity() {
    return iopsByCapacity;
  }

  /**
   * Automatically provision maximum available IOPS based on the capacity of the instance. Larger
   * instances will be granted more IOPS. If instance capacity is increased or decreased, IOPS will
   * be automatically adjusted upwards or downwards accordingly. The maximum available IOPS for a
   * given capacity is defined in Filestore documentation.
   * @param iopsByCapacity iopsByCapacity or {@code null} for none
   */
  public PerformanceConfig setIopsByCapacity(java.lang.Boolean iopsByCapacity) {
    this.iopsByCapacity = iopsByCapacity;
    return this;
  }

  /**
   * Provision IOPS dynamically based on the capacity of the instance. Provisioned read IOPS will be
   * calculated by by multiplying the capacity of the instance in GiB by the `iops_per_gb` value,
   * and rounding to the nearest 1000. For example, for a 1 TiB instance with an `iops_per_gb` value
   * of 15, the provisioned read IOPS would be `1024 * 15 = 15,360`, rounded to `15,000`. If the
   * calculated value is outside the supported range for the instance's capacity during instance
   * creation, instance creation will fail with an `InvalidArgument` error. Similarly, if an
   * instance capacity update would result in a value outside the supported range, the update will
   * fail with an `InvalidArgument` error.
   * @return value or {@code null} for none
   */
  public IOPSPerGB getIopsPerGb() {
    return iopsPerGb;
  }

  /**
   * Provision IOPS dynamically based on the capacity of the instance. Provisioned read IOPS will be
   * calculated by by multiplying the capacity of the instance in GiB by the `iops_per_gb` value,
   * and rounding to the nearest 1000. For example, for a 1 TiB instance with an `iops_per_gb` value
   * of 15, the provisioned read IOPS would be `1024 * 15 = 15,360`, rounded to `15,000`. If the
   * calculated value is outside the supported range for the instance's capacity during instance
   * creation, instance creation will fail with an `InvalidArgument` error. Similarly, if an
   * instance capacity update would result in a value outside the supported range, the update will
   * fail with an `InvalidArgument` error.
   * @param iopsPerGb iopsPerGb or {@code null} for none
   */
  public PerformanceConfig setIopsPerGb(IOPSPerGB iopsPerGb) {
    this.iopsPerGb = iopsPerGb;
    return this;
  }

  @Override
  public PerformanceConfig set(String fieldName, Object value) {
    return (PerformanceConfig) super.set(fieldName, value);
  }

  @Override
  public PerformanceConfig clone() {
    return (PerformanceConfig) super.clone();
  }

}
