/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Bot-specific profile information.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AppsDynamiteFrontendBotInfo extends com.google.api.client.json.GenericJson {

  /**
   * Identifier of the application associated with the bot.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AppsDynamiteAppId appId;

  /**
   * URL for the avatar picture of the User in dynamite. This field should be populated if the
   * request is FetchBotCategories/ListBotCatalogEntries
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String botAvatarUrl;

  /**
   * Non-unique, user-defined display name of the Bot. This field should be populated if the request
   * is FetchBotCategories/ListBotCatalogEntries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String botName;

  /**
   * Short description for the bot.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Name of bot developer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String developerName;

  /**
   * URL for the banner image in GSuite Market Place. The banner will be 220x140.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String marketPlaceBannerUrl;

  /**
   * Indicates whether bot is enabled/disabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String status;

  /**
   * Urls with additional information related to the bot. This field should always be set even if
   * all the fields within it are empty, so that it is convenient for clients to work with this
   * field in javascript.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AppsDynamiteFrontendBotInfoSupportUrls supportUrls;

  /**
   * The supported uses are limited according to the user that made the request. If the user does
   * not have permission to use the bot, the list will be empty. This could occur for non
   * whitelisted bots in the catalog.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> supportedUses;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String whitelistStatus;

  /**
   * Identifier of the application associated with the bot.
   * @return value or {@code null} for none
   */
  public AppsDynamiteAppId getAppId() {
    return appId;
  }

  /**
   * Identifier of the application associated with the bot.
   * @param appId appId or {@code null} for none
   */
  public AppsDynamiteFrontendBotInfo setAppId(AppsDynamiteAppId appId) {
    this.appId = appId;
    return this;
  }

  /**
   * URL for the avatar picture of the User in dynamite. This field should be populated if the
   * request is FetchBotCategories/ListBotCatalogEntries
   * @return value or {@code null} for none
   */
  public java.lang.String getBotAvatarUrl() {
    return botAvatarUrl;
  }

  /**
   * URL for the avatar picture of the User in dynamite. This field should be populated if the
   * request is FetchBotCategories/ListBotCatalogEntries
   * @param botAvatarUrl botAvatarUrl or {@code null} for none
   */
  public AppsDynamiteFrontendBotInfo setBotAvatarUrl(java.lang.String botAvatarUrl) {
    this.botAvatarUrl = botAvatarUrl;
    return this;
  }

  /**
   * Non-unique, user-defined display name of the Bot. This field should be populated if the request
   * is FetchBotCategories/ListBotCatalogEntries.
   * @return value or {@code null} for none
   */
  public java.lang.String getBotName() {
    return botName;
  }

  /**
   * Non-unique, user-defined display name of the Bot. This field should be populated if the request
   * is FetchBotCategories/ListBotCatalogEntries.
   * @param botName botName or {@code null} for none
   */
  public AppsDynamiteFrontendBotInfo setBotName(java.lang.String botName) {
    this.botName = botName;
    return this;
  }

  /**
   * Short description for the bot.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Short description for the bot.
   * @param description description or {@code null} for none
   */
  public AppsDynamiteFrontendBotInfo setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Name of bot developer.
   * @return value or {@code null} for none
   */
  public java.lang.String getDeveloperName() {
    return developerName;
  }

  /**
   * Name of bot developer.
   * @param developerName developerName or {@code null} for none
   */
  public AppsDynamiteFrontendBotInfo setDeveloperName(java.lang.String developerName) {
    this.developerName = developerName;
    return this;
  }

  /**
   * URL for the banner image in GSuite Market Place. The banner will be 220x140.
   * @return value or {@code null} for none
   */
  public java.lang.String getMarketPlaceBannerUrl() {
    return marketPlaceBannerUrl;
  }

  /**
   * URL for the banner image in GSuite Market Place. The banner will be 220x140.
   * @param marketPlaceBannerUrl marketPlaceBannerUrl or {@code null} for none
   */
  public AppsDynamiteFrontendBotInfo setMarketPlaceBannerUrl(java.lang.String marketPlaceBannerUrl) {
    this.marketPlaceBannerUrl = marketPlaceBannerUrl;
    return this;
  }

  /**
   * Indicates whether bot is enabled/disabled.
   * @return value or {@code null} for none
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * Indicates whether bot is enabled/disabled.
   * @param status status or {@code null} for none
   */
  public AppsDynamiteFrontendBotInfo setStatus(java.lang.String status) {
    this.status = status;
    return this;
  }

  /**
   * Urls with additional information related to the bot. This field should always be set even if
   * all the fields within it are empty, so that it is convenient for clients to work with this
   * field in javascript.
   * @return value or {@code null} for none
   */
  public AppsDynamiteFrontendBotInfoSupportUrls getSupportUrls() {
    return supportUrls;
  }

  /**
   * Urls with additional information related to the bot. This field should always be set even if
   * all the fields within it are empty, so that it is convenient for clients to work with this
   * field in javascript.
   * @param supportUrls supportUrls or {@code null} for none
   */
  public AppsDynamiteFrontendBotInfo setSupportUrls(AppsDynamiteFrontendBotInfoSupportUrls supportUrls) {
    this.supportUrls = supportUrls;
    return this;
  }

  /**
   * The supported uses are limited according to the user that made the request. If the user does
   * not have permission to use the bot, the list will be empty. This could occur for non
   * whitelisted bots in the catalog.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSupportedUses() {
    return supportedUses;
  }

  /**
   * The supported uses are limited according to the user that made the request. If the user does
   * not have permission to use the bot, the list will be empty. This could occur for non
   * whitelisted bots in the catalog.
   * @param supportedUses supportedUses or {@code null} for none
   */
  public AppsDynamiteFrontendBotInfo setSupportedUses(java.util.List<java.lang.String> supportedUses) {
    this.supportedUses = supportedUses;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getWhitelistStatus() {
    return whitelistStatus;
  }

  /**
   * @param whitelistStatus whitelistStatus or {@code null} for none
   */
  public AppsDynamiteFrontendBotInfo setWhitelistStatus(java.lang.String whitelistStatus) {
    this.whitelistStatus = whitelistStatus;
    return this;
  }

  @Override
  public AppsDynamiteFrontendBotInfo set(String fieldName, Object value) {
    return (AppsDynamiteFrontendBotInfo) super.set(fieldName, value);
  }

  @Override
  public AppsDynamiteFrontendBotInfo clone() {
    return (AppsDynamiteFrontendBotInfo) super.clone();
  }

}
