/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.reseller.model;

/**
 * JSON template for subscription seats.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Enterprise Apps Reseller API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Seats extends com.google.api.client.json.GenericJson {

  /**
   * Identifies the resource as a subscription change plan request. Value: subscriptions#seats
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * Read-only field containing the current number of licensed seats for FLEXIBLE Google-Apps
   * subscriptions and secondary subscriptions such as Google-Vault and Drive-storage.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer licensedNumberOfSeats;

  /**
   * The maximumNumberOfSeats property is the maximum number of licenses that the customer can
   * purchase. This property applies to plans other than the annual commitment plan. How a user's
   * licenses are managed depends on the subscription's payment plan: - annual commitment plan (with
   * monthly or yearly payments) — For this plan, a reseller is invoiced on the number of user
   * licenses in the numberOfSeats property. The maximumNumberOfSeats property is a read-only
   * property in the API's response.   - flexible plan — For this plan, a reseller is invoiced on
   * the actual number of users which is capped by the maximumNumberOfSeats. This is the maximum
   * number of user licenses a customer has for user license provisioning. This quantity can be
   * increased up to the maximum limit defined in the reseller's contract. And the minimum quantity
   * is the current number of users in the customer account.   - 30-day free trial plan — A
   * subscription in a 30-day free trial is restricted to maximum 10 seats.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maximumNumberOfSeats;

  /**
   * The numberOfSeats property holds the customer's number of user licenses. How a user's licenses
   * are managed depends on the subscription's plan: - annual commitment plan (with monthly or
   * yearly pay) — For this plan, a reseller is invoiced on the number of user licenses in the
   * numberOfSeats property. This is the maximum number of user licenses that a reseller's customer
   * can create. The reseller can add more licenses, but once set, the numberOfSeats can not be
   * reduced until renewal. The reseller is invoiced based on the numberOfSeats value regardless of
   * how many of these user licenses are provisioned users.   - flexible plan — For this plan, a
   * reseller is invoiced on the actual number of users which is capped by the maximumNumberOfSeats.
   * The numberOfSeats property is not used in the request or response for flexible plan customers.
   * - 30-day free trial plan — The numberOfSeats property is not used in the request or response
   * for an account in a 30-day trial.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numberOfSeats;

  /**
   * Identifies the resource as a subscription change plan request. Value: subscriptions#seats
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * Identifies the resource as a subscription change plan request. Value: subscriptions#seats
   * @param kind kind or {@code null} for none
   */
  public Seats setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Read-only field containing the current number of licensed seats for FLEXIBLE Google-Apps
   * subscriptions and secondary subscriptions such as Google-Vault and Drive-storage.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLicensedNumberOfSeats() {
    return licensedNumberOfSeats;
  }

  /**
   * Read-only field containing the current number of licensed seats for FLEXIBLE Google-Apps
   * subscriptions and secondary subscriptions such as Google-Vault and Drive-storage.
   * @param licensedNumberOfSeats licensedNumberOfSeats or {@code null} for none
   */
  public Seats setLicensedNumberOfSeats(java.lang.Integer licensedNumberOfSeats) {
    this.licensedNumberOfSeats = licensedNumberOfSeats;
    return this;
  }

  /**
   * The maximumNumberOfSeats property is the maximum number of licenses that the customer can
   * purchase. This property applies to plans other than the annual commitment plan. How a user's
   * licenses are managed depends on the subscription's payment plan: - annual commitment plan (with
   * monthly or yearly payments) — For this plan, a reseller is invoiced on the number of user
   * licenses in the numberOfSeats property. The maximumNumberOfSeats property is a read-only
   * property in the API's response.   - flexible plan — For this plan, a reseller is invoiced on
   * the actual number of users which is capped by the maximumNumberOfSeats. This is the maximum
   * number of user licenses a customer has for user license provisioning. This quantity can be
   * increased up to the maximum limit defined in the reseller's contract. And the minimum quantity
   * is the current number of users in the customer account.   - 30-day free trial plan — A
   * subscription in a 30-day free trial is restricted to maximum 10 seats.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaximumNumberOfSeats() {
    return maximumNumberOfSeats;
  }

  /**
   * The maximumNumberOfSeats property is the maximum number of licenses that the customer can
   * purchase. This property applies to plans other than the annual commitment plan. How a user's
   * licenses are managed depends on the subscription's payment plan: - annual commitment plan (with
   * monthly or yearly payments) — For this plan, a reseller is invoiced on the number of user
   * licenses in the numberOfSeats property. The maximumNumberOfSeats property is a read-only
   * property in the API's response.   - flexible plan — For this plan, a reseller is invoiced on
   * the actual number of users which is capped by the maximumNumberOfSeats. This is the maximum
   * number of user licenses a customer has for user license provisioning. This quantity can be
   * increased up to the maximum limit defined in the reseller's contract. And the minimum quantity
   * is the current number of users in the customer account.   - 30-day free trial plan — A
   * subscription in a 30-day free trial is restricted to maximum 10 seats.
   * @param maximumNumberOfSeats maximumNumberOfSeats or {@code null} for none
   */
  public Seats setMaximumNumberOfSeats(java.lang.Integer maximumNumberOfSeats) {
    this.maximumNumberOfSeats = maximumNumberOfSeats;
    return this;
  }

  /**
   * The numberOfSeats property holds the customer's number of user licenses. How a user's licenses
   * are managed depends on the subscription's plan: - annual commitment plan (with monthly or
   * yearly pay) — For this plan, a reseller is invoiced on the number of user licenses in the
   * numberOfSeats property. This is the maximum number of user licenses that a reseller's customer
   * can create. The reseller can add more licenses, but once set, the numberOfSeats can not be
   * reduced until renewal. The reseller is invoiced based on the numberOfSeats value regardless of
   * how many of these user licenses are provisioned users.   - flexible plan — For this plan, a
   * reseller is invoiced on the actual number of users which is capped by the maximumNumberOfSeats.
   * The numberOfSeats property is not used in the request or response for flexible plan customers.
   * - 30-day free trial plan — The numberOfSeats property is not used in the request or response
   * for an account in a 30-day trial.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumberOfSeats() {
    return numberOfSeats;
  }

  /**
   * The numberOfSeats property holds the customer's number of user licenses. How a user's licenses
   * are managed depends on the subscription's plan: - annual commitment plan (with monthly or
   * yearly pay) — For this plan, a reseller is invoiced on the number of user licenses in the
   * numberOfSeats property. This is the maximum number of user licenses that a reseller's customer
   * can create. The reseller can add more licenses, but once set, the numberOfSeats can not be
   * reduced until renewal. The reseller is invoiced based on the numberOfSeats value regardless of
   * how many of these user licenses are provisioned users.   - flexible plan — For this plan, a
   * reseller is invoiced on the actual number of users which is capped by the maximumNumberOfSeats.
   * The numberOfSeats property is not used in the request or response for flexible plan customers.
   * - 30-day free trial plan — The numberOfSeats property is not used in the request or response
   * for an account in a 30-day trial.
   * @param numberOfSeats numberOfSeats or {@code null} for none
   */
  public Seats setNumberOfSeats(java.lang.Integer numberOfSeats) {
    this.numberOfSeats = numberOfSeats;
    return this;
  }

  @Override
  public Seats set(String fieldName, Object value) {
    return (Seats) super.set(fieldName, value);
  }

  @Override
  public Seats clone() {
    return (Seats) super.clone();
  }

}
