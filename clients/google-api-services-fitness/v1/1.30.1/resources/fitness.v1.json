{
  "rootUrl": "https://fitness.googleapis.com/",
  "protocol": "rest",
  "version": "v1",
  "title": "Fitness API",
  "kind": "discovery#restDescription",
  "description": "The Fitness API for managing users' fitness tracking data.",
  "schemas": {
    "DataTypeField": {
      "id": "DataTypeField",
      "description": "In case of multi-dimensional data (such as an accelerometer with x, y, and z axes) each field represents one dimension. Each data type field has a unique name which identifies it. The field also defines the format of the data (int, float, etc.). This message is only instantiated in code and not used for wire comms or stored in any way.",
      "type": "object",
      "properties": {
        "optional": {
          "type": "boolean"
        },
        "name": {
          "description": "Defines the name and format of data. Unlike data type names, field names are not namespaced, and only need to be unique within the data type.",
          "type": "string",
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update"
            ]
          }
        },
        "format": {
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "enum": [
            "integer",
            "floatPoint",
            "string",
            "map",
            "integerList",
            "floatList",
            "blob"
          ],
          "description": "The different supported formats for each field in a data type.",
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update"
            ]
          },
          "type": "string"
        }
      }
    },
    "BucketByTime": {
      "type": "object",
      "id": "BucketByTime",
      "properties": {
        "durationMillis": {
          "type": "string",
          "format": "int64",
          "description": "Specifies that result buckets aggregate data by exactly durationMillis time frames. Time frames that contain no data will be included in the response with an empty dataset."
        },
        "period": {
          "$ref": "BucketByTimePeriod"
        }
      }
    },
    "ListDataPointChangesResponse": {
      "type": "object",
      "id": "ListDataPointChangesResponse",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "deletedDataPoint": {
          "type": "array",
          "items": {
            "$ref": "DataPoint"
          },
          "description": "Deleted data points for the user. Note, for modifications this should be parsed before handling insertions."
        },
        "dataSourceId": {
          "type": "string",
          "description": "The data stream ID of the data source with data point changes."
        },
        "insertedDataPoint": {
          "description": "Inserted data points for the user.",
          "type": "array",
          "items": {
            "$ref": "DataPoint"
          }
        }
      }
    },
    "MapValue": {
      "description": "Holder object for the value of an entry in a map field of a data point. A map value supports a subset of the formats that the regular Value supports.",
      "id": "MapValue",
      "type": "object",
      "properties": {
        "fpVal": {
          "description": "Floating point value.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "DataSource": {
      "id": "DataSource",
      "properties": {
        "type": {
          "enumDescriptions": [
            "",
            ""
          ],
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update"
            ]
          },
          "description": "A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.",
          "enum": [
            "raw",
            "derived"
          ],
          "type": "string"
        },
        "application": {
          "$ref": "Application",
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update"
            ]
          },
          "description": "Information about an application which feeds sensor data into the platform."
        },
        "dataType": {
          "$ref": "DataType",
          "description": "The data type defines the schema for a stream of data being collected by, inserted into, or queried from the Fitness API.",
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update"
            ]
          }
        },
        "device": {
          "$ref": "Device",
          "description": "Representation of an integrated device (such as a phone or a wearable) that can hold sensors.",
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update"
            ]
          }
        },
        "dataStreamName": {
          "type": "string",
          "description": "The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors."
        },
        "dataStreamId": {
          "annotations": {
            "required": [
              "fitness.users.dataSources.update"
            ]
          },
          "type": "string",
          "description": "A unique identifier for the data stream produced by this data source. The identifier includes: - The physical device's manufacturer, model, and serial number (UID). - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. - The data source's type. - The data source's stream name. Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal. The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName When any of the optional fields that make up the data stream ID are absent, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number Finally, the developer project number and device UID are obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form. This means a client will see a different set of data_stream_ids than another client with different credentials."
        },
        "dataQualityStandard": {
          "items": {
            "enum": [
              "dataQualityUnknown",
              "dataQualityBloodPressureEsh2002",
              "dataQualityBloodPressureEsh2010",
              "dataQualityBloodPressureAami",
              "dataQualityBloodPressureBhsAA",
              "dataQualityBloodPressureBhsAB",
              "dataQualityBloodPressureBhsBA",
              "dataQualityBloodPressureBhsBB",
              "dataQualityBloodGlucoseIso151972003",
              "dataQualityBloodGlucoseIso151972013"
            ],
            "enumDescriptions": [
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            "type": "string"
          },
          "type": "array",
          "description": "DO NOT POPULATE THIS FIELD. It is never populated in responses from the platform, and is ignored in queries. It will be removed in a future version entirely."
        },
        "name": {
          "description": "An end-user visible name for this data source.",
          "type": "string"
        }
      },
      "description": "Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source. The data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type. Each data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.",
      "type": "object"
    },
    "BucketByActivity": {
      "properties": {
        "minDurationMillis": {
          "description": "Specifies that only activity segments of duration longer than minDurationMillis are considered and used as a container for aggregated data.",
          "type": "string",
          "format": "int64"
        },
        "activityDataSourceId": {
          "type": "string",
          "description": "The default activity stream will be used if a specific activityDataSourceId is not specified."
        }
      },
      "id": "BucketByActivity",
      "type": "object"
    },
    "Dataset": {
      "properties": {
        "maxEndTimeNs": {
          "description": "The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the second part of the dataset identifier.",
          "annotations": {
            "required": [
              "fitness.users.dataSources.datasets.patch"
            ]
          },
          "format": "int64",
          "type": "string"
        },
        "minStartTimeNs": {
          "format": "int64",
          "annotations": {
            "required": [
              "fitness.users.dataSources.datasets.patch"
            ]
          },
          "type": "string",
          "description": "The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier."
        },
        "dataSourceId": {
          "description": "The data stream ID of the data source that created the points in this dataset.",
          "annotations": {
            "required": [
              "fitness.users.dataSources.datasets.patch"
            ]
          },
          "type": "string"
        },
        "nextPageToken": {
          "description": "This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset.",
          "type": "string"
        },
        "point": {
          "type": "array",
          "annotations": {
            "required": [
              "fitness.users.dataSources.datasets.patch"
            ]
          },
          "items": {
            "$ref": "DataPoint"
          },
          "description": "A partial list of data points contained in the dataset, ordered by endTimeNanos. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response."
        }
      },
      "description": "A dataset represents a projection container for data points. They do not carry any info of their own. Datasets represent a set of data points from a particular data source. A data point can be found in more than one dataset.",
      "id": "Dataset",
      "type": "object"
    },
    "AggregateBy": {
      "id": "AggregateBy",
      "properties": {
        "dataTypeName": {
          "type": "string",
          "description": "The data type to aggregate. All data sources providing this data type will contribute data to the aggregation. The response will contain a single dataset for this data type name. The dataset will have a data source ID of derived::com.google.android.gms:aggregated. If the user has no data for this data type, an empty data set will be returned. Note: Data can be aggregated by either the dataTypeName or the dataSourceId, not both."
        },
        "dataSourceId": {
          "description": "A data source ID to aggregate. Only data from the specified data source ID will be included in the aggregation. If specified, this data source must exist; the OAuth scopes in the supplied credentials must grant read access to this data type. The dataset in the response will have the same data source ID. Note: Data can be aggregated by either the dataTypeName or the dataSourceId, not both.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The specification of which data to aggregate."
    },
    "DataType": {
      "id": "DataType",
      "type": "object",
      "properties": {
        "field": {
          "items": {
            "$ref": "DataTypeField"
          },
          "type": "array",
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update"
            ]
          },
          "description": "A field represents one dimension of a data type."
        },
        "name": {
          "type": "string",
          "description": "Each data type has a unique, namespaced, name. All data types in the com.google namespace are shared as part of the platform.",
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update"
            ]
          }
        }
      }
    },
    "AggregateBucket": {
      "properties": {
        "activity": {
          "description": "Available for Bucket.Type.ACTIVITY_TYPE, Bucket.Type.ACTIVITY_SEGMENT",
          "format": "int32",
          "type": "integer"
        },
        "dataset": {
          "items": {
            "$ref": "Dataset"
          },
          "type": "array",
          "description": "There will be one dataset per AggregateBy in the request."
        },
        "session": {
          "$ref": "Session",
          "description": "Available for Bucket.Type.SESSION"
        },
        "endTimeMillis": {
          "description": "The end time for the aggregated data, in milliseconds since epoch, inclusive.",
          "type": "string",
          "format": "int64"
        },
        "startTimeMillis": {
          "type": "string",
          "description": "The start time for the aggregated data, in milliseconds since epoch, inclusive.",
          "format": "int64"
        },
        "type": {
          "description": "The type of a bucket signifies how the data aggregation is performed in the bucket.",
          "enumDescriptions": [
            "",
            "Denotes that bucketing by time is requested. When this is specified, the timeBucketDurationMillis field is used to determine how many buckets will be returned.",
            "Denotes that bucketing by session is requested. When this is specified, only data that occurs within sessions that begin and end within the dataset time frame, is included in the results.",
            "Denotes that bucketing by activity type is requested. When this is specified, there will be one bucket for each unique activity type that a user participated in, during the dataset time frame of interest.",
            "Denotes that bucketing by individual activity segment is requested. This will aggregate data by the time boundaries specified by each activity segment occurring within the dataset time frame of interest."
          ],
          "type": "string",
          "enum": [
            "unknown",
            "time",
            "session",
            "activityType",
            "activitySegment"
          ]
        }
      },
      "type": "object",
      "id": "AggregateBucket"
    },
    "ValueMapValEntry": {
      "properties": {
        "value": {
          "$ref": "MapValue"
        },
        "key": {
          "type": "string"
        }
      },
      "type": "object",
      "id": "ValueMapValEntry"
    },
    "BucketBySession": {
      "id": "BucketBySession",
      "type": "object",
      "properties": {
        "minDurationMillis": {
          "description": "Specifies that only sessions of duration longer than minDurationMillis are considered and used as a container for aggregated data.",
          "format": "int64",
          "type": "string"
        }
      }
    },
    "Application": {
      "id": "Application",
      "type": "object",
      "properties": {
        "name": {
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update",
              "fitness.users.sessions.update"
            ]
          },
          "description": "The name of this application. This is required for REST clients, but we do not enforce uniqueness of this name. It is provided as a matter of convenience for other developers who would like to identify which REST created an Application or Data Source.",
          "type": "string"
        },
        "detailsUrl": {
          "type": "string",
          "description": "An optional URI that can be used to link back to the application."
        },
        "version": {
          "type": "string",
          "description": "Version of the application. You should update this field whenever the application changes in a way that affects the computation of the data."
        },
        "packageName": {
          "description": "Package name for this application. This is used as a unique identifier when created by Android applications, but cannot be specified by REST clients. REST clients will have their developer project number reflected into the Data Source data stream IDs, instead of the packageName.",
          "type": "string"
        }
      }
    },
    "ListDataSourcesResponse": {
      "id": "ListDataSourcesResponse",
      "properties": {
        "dataSource": {
          "description": "A previously created data source.",
          "items": {
            "$ref": "DataSource"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AggregateResponse": {
      "id": "AggregateResponse",
      "properties": {
        "bucket": {
          "type": "array",
          "description": "A list of buckets containing the aggregated data.",
          "items": {
            "$ref": "AggregateBucket"
          }
        }
      },
      "type": "object"
    },
    "ListSessionsResponse": {
      "type": "object",
      "id": "ListSessionsResponse",
      "properties": {
        "session": {
          "items": {
            "$ref": "Session"
          },
          "type": "array",
          "description": "Sessions with an end time that is between startTime and endTime of the request."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The sync token which is used to sync further changes. This will only be provided if both startTime and endTime are omitted from the request."
        },
        "hasMoreData": {
          "description": "Flag to indicate server has more data to transfer. DO NOT USE THIS FIELD. It is never populated in responses from the server.",
          "type": "boolean"
        },
        "deletedSession": {
          "items": {
            "$ref": "Session"
          },
          "type": "array",
          "description": "If includeDeleted is set to true in the request, and startTime and endTime are omitted, this will include sessions which were deleted since the last sync."
        }
      }
    },
    "Device": {
      "id": "Device",
      "properties": {
        "type": {
          "type": "string",
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update"
            ]
          },
          "enumDescriptions": [
            "Device type is not known.",
            "An Android phone.",
            "An Android tablet.",
            "A watch or other wrist-mounted band.",
            "A chest strap.",
            "A scale.",
            "Glass or other head-mounted device.",
            "A smart display e.g. Nest device."
          ],
          "enum": [
            "unknown",
            "phone",
            "tablet",
            "watch",
            "chestStrap",
            "scale",
            "headMounted",
            "smartDisplay"
          ],
          "description": "A constant representing the type of the device."
        },
        "manufacturer": {
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update"
            ]
          },
          "type": "string",
          "description": "Manufacturer of the product/hardware."
        },
        "model": {
          "type": "string",
          "description": "End-user visible model name for the device.",
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update"
            ]
          }
        },
        "uid": {
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update"
            ]
          },
          "description": "The serial number or other unique ID for the hardware. This field is obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the uid field in clear and normal form. The obfuscation preserves equality; that is, given two IDs, if id1 == id2, obfuscated(id1) == obfuscated(id2).",
          "type": "string"
        },
        "version": {
          "description": "Version string for the device hardware/software.",
          "annotations": {
            "required": [
              "fitness.users.dataSources.create",
              "fitness.users.dataSources.update"
            ]
          },
          "type": "string"
        }
      },
      "description": "Representation of an integrated device (such as a phone or a wearable) that can hold sensors. Each sensor is exposed as a data source. The main purpose of the device information contained in this class is to identify the hardware of a particular data source. This can be useful in different ways, including: - Distinguishing two similar sensors on different devices (the step counter on two nexus 5 phones, for instance) - Display the source of data to the user (by using the device make / model) - Treat data differently depending on sensor type (accelerometers on a watch may give different patterns than those on a phone) - Build different analysis models for each device/version. ",
      "type": "object"
    },
    "AggregateRequest": {
      "properties": {
        "startTimeMillis": {
          "annotations": {
            "required": [
              "fitness.users.dataset.aggregate"
            ]
          },
          "format": "int64",
          "type": "string",
          "description": "The start of a window of time. Data that intersects with this time window will be aggregated. The time is in milliseconds since epoch, inclusive."
        },
        "bucketByTime": {
          "$ref": "BucketByTime",
          "description": "Specifies that data be aggregated by a single time interval. Mutually exclusive of other bucketing specifications."
        },
        "bucketByActivityType": {
          "$ref": "BucketByActivity",
          "description": "Specifies that data be aggregated by the type of activity being performed when the data was recorded. All data that was recorded during a certain activity type (.for the given time range) will be aggregated into the same bucket. Data that was recorded while the user was not active will not be included in the response. Mutually exclusive of other bucketing specifications."
        },
        "filteredDataQualityStandard": {
          "items": {
            "type": "string",
            "enum": [
              "dataQualityUnknown",
              "dataQualityBloodPressureEsh2002",
              "dataQualityBloodPressureEsh2010",
              "dataQualityBloodPressureAami",
              "dataQualityBloodPressureBhsAA",
              "dataQualityBloodPressureBhsAB",
              "dataQualityBloodPressureBhsBA",
              "dataQualityBloodPressureBhsBB",
              "dataQualityBloodGlucoseIso151972003",
              "dataQualityBloodGlucoseIso151972013"
            ],
            "enumDescriptions": [
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          "description": "DO NOT POPULATE THIS FIELD. It is ignored.",
          "type": "array"
        },
        "aggregateBy": {
          "items": {
            "$ref": "AggregateBy"
          },
          "annotations": {
            "required": [
              "fitness.users.dataset.aggregate"
            ]
          },
          "description": "The specification of data to be aggregated. At least one aggregateBy spec must be provided. All data that is specified will be aggregated using the same bucketing criteria. There will be one dataset in the response for every aggregateBy spec.",
          "type": "array"
        },
        "endTimeMillis": {
          "format": "int64",
          "annotations": {
            "required": [
              "fitness.users.dataset.aggregate"
            ]
          },
          "description": "The end of a window of time. Data that intersects with this time window will be aggregated. The time is in milliseconds since epoch, inclusive.",
          "type": "string"
        },
        "bucketByActivitySegment": {
          "description": "Specifies that data be aggregated each activity segment recorded for a user. Similar to bucketByActivitySegment, but bucketing is done for each activity segment rather than all segments of the same type. Mutually exclusive of other bucketing specifications.",
          "$ref": "BucketByActivity"
        },
        "bucketBySession": {
          "description": "Specifies that data be aggregated by user sessions. Data that does not fall within the time range of a session will not be included in the response. Mutually exclusive of other bucketing specifications.",
          "$ref": "BucketBySession"
        }
      },
      "id": "AggregateRequest",
      "description": "Next id: 10",
      "type": "object"
    },
    "BucketByTimePeriod": {
      "properties": {
        "value": {
          "format": "int32",
          "type": "integer"
        },
        "timeZoneId": {
          "description": "org.joda.timezone.DateTimeZone",
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "day",
            "week",
            "month"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ]
        }
      },
      "id": "BucketByTimePeriod",
      "type": "object"
    },
    "DataPoint": {
      "type": "object",
      "description": "Represents a single data point, generated by a particular data source. A data point holds a value for each field, an end timestamp and an optional start time. The exact semantics of each of these attributes are specified in the documentation for the particular data type. A data point can represent an instantaneous measurement, reading or input observation, as well as averages or aggregates over a time interval. Check the data type documentation to determine which is the case for a particular data type. Data points always contain one value for each field of the data type.",
      "id": "DataPoint",
      "properties": {
        "rawTimestampNanos": {
          "type": "string",
          "format": "int64",
          "description": "The raw timestamp from the original SensorEvent."
        },
        "startTimeNanos": {
          "annotations": {
            "required": [
              "fitness.users.dataSources.datasets.patch"
            ]
          },
          "description": "The start time of the interval represented by this data point, in nanoseconds since epoch.",
          "format": "int64",
          "type": "string"
        },
        "endTimeNanos": {
          "type": "string",
          "format": "int64",
          "annotations": {
            "required": [
              "fitness.users.dataSources.datasets.patch"
            ]
          },
          "description": "The end time of the interval represented by this data point, in nanoseconds since epoch."
        },
        "originDataSourceId": {
          "type": "string",
          "description": "If the data point is contained in a dataset for a derived data source, this field will be populated with the data source stream ID that created the data point originally. WARNING: do not rely on this field for anything other than debugging. The value of this field, if it is set at all, is an implementation detail and is not guaranteed to remain consistent."
        },
        "modifiedTimeMillis": {
          "format": "int64",
          "description": "Indicates the last time this data point was modified. Useful only in contexts where we are listing the data changes, rather than representing the current state of the data.",
          "type": "string"
        },
        "dataTypeName": {
          "description": "The data type defining the format of the values in this data point.",
          "type": "string",
          "annotations": {
            "required": [
              "fitness.users.dataSources.datasets.patch"
            ]
          }
        },
        "computationTimeMillis": {
          "format": "int64",
          "type": "string",
          "description": "DO NOT USE THIS FIELD. It is ignored, and not stored."
        },
        "value": {
          "items": {
            "$ref": "Value"
          },
          "type": "array",
          "annotations": {
            "required": [
              "fitness.users.dataSources.datasets.patch"
            ]
          },
          "description": "Values of each data type field for the data point. It is expected that each value corresponding to a data type field will occur in the same order that the field is listed with in the data type specified in a data source. Only one of integer and floating point fields will be populated, depending on the format enum value within data source's type field."
        }
      }
    },
    "Session": {
      "properties": {
        "description": {
          "description": "A description for this session.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "annotations": {
            "required": [
              "fitness.users.sessions.update"
            ]
          },
          "description": "A human readable name of the session."
        },
        "application": {
          "annotations": {
            "required": [
              "fitness.users.sessions.update"
            ]
          },
          "description": "The application that created the session.",
          "$ref": "Application"
        },
        "activityType": {
          "format": "int32",
          "type": "integer",
          "annotations": {
            "required": [
              "fitness.users.sessions.update"
            ]
          },
          "description": "The type of activity this session represents."
        },
        "endTimeMillis": {
          "description": "An end time, in milliseconds since epoch, inclusive.",
          "type": "string",
          "format": "int64",
          "annotations": {
            "required": [
              "fitness.users.sessions.update"
            ]
          }
        },
        "activeTimeMillis": {
          "type": "string",
          "description": "Session active time. While start_time_millis and end_time_millis define the full session time, the active time can be shorter and specified by active_time_millis. If the inactive time during the session is known, it should also be inserted via a com.google.activity.segment data point with a STILL activity value",
          "format": "int64"
        },
        "startTimeMillis": {
          "format": "int64",
          "annotations": {
            "required": [
              "fitness.users.sessions.update"
            ]
          },
          "type": "string",
          "description": "A start time, in milliseconds since epoch, inclusive."
        },
        "id": {
          "description": "A client-generated identifier that is unique across all sessions owned by this particular user.",
          "type": "string",
          "annotations": {
            "required": [
              "fitness.users.sessions.update"
            ]
          }
        },
        "modifiedTimeMillis": {
          "format": "int64",
          "description": "A timestamp that indicates when the session was last modified.",
          "type": "string"
        }
      },
      "description": "Sessions contain metadata, such as a user-friendly name and time interval information.",
      "id": "Session",
      "type": "object"
    },
    "Value": {
      "type": "object",
      "description": "Holder object for the value of a single field in a data point. A field value has a particular format and is only ever set to one of an integer or a floating point value.",
      "properties": {
        "mapVal": {
          "description": "Map value. The valid key space and units for the corresponding value of each entry should be documented as part of the data type definition. Keys should be kept small whenever possible. Data streams with large keys and high data frequency may be down sampled.",
          "items": {
            "$ref": "ValueMapValEntry"
          },
          "type": "array"
        },
        "intVal": {
          "format": "int32",
          "description": "Integer value. When this is set, other values must not be set.",
          "type": "integer"
        },
        "stringVal": {
          "description": "String value. When this is set, other values must not be set. Strings should be kept small whenever possible. Data streams with large string values and high data frequency may be down sampled.",
          "type": "string"
        },
        "fpVal": {
          "type": "number",
          "format": "double",
          "description": "Floating point value. When this is set, other values must not be set."
        }
      },
      "id": "Value"
    }
  },
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "baseUrl": "https://fitness.googleapis.com/fitness/v1/users/",
  "mtlsRootUrl": "https://fitness.mtls.googleapis.com/",
  "ownerDomain": "google.com",
  "id": "fitness:v1",
  "revision": "20201006",
  "basePath": "/fitness/v1/users/",
  "batchPath": "batch",
  "parameters": {
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "alt": {
      "type": "string",
      "default": "json",
      "description": "Data format for response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query"
    },
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ],
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "location": "query",
      "default": "true",
      "description": "Returns response with indentations and line breaks."
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    }
  },
  "servicePath": "fitness/v1/users/",
  "resources": {
    "users": {
      "resources": {
        "dataset": {
          "methods": {
            "aggregate": {
              "id": "fitness.users.dataset.aggregate",
              "parameters": {
                "userId": {
                  "description": "Aggregate data for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "response": {
                "$ref": "AggregateResponse"
              },
              "request": {
                "$ref": "AggregateRequest"
              },
              "flatPath": "{userId}/dataset:aggregate",
              "path": "{userId}/dataset:aggregate",
              "scopes": [
                "https://www.googleapis.com/auth/fitness.activity.read",
                "https://www.googleapis.com/auth/fitness.activity.write",
                "https://www.googleapis.com/auth/fitness.blood_glucose.read",
                "https://www.googleapis.com/auth/fitness.blood_glucose.write",
                "https://www.googleapis.com/auth/fitness.blood_pressure.read",
                "https://www.googleapis.com/auth/fitness.blood_pressure.write",
                "https://www.googleapis.com/auth/fitness.body.read",
                "https://www.googleapis.com/auth/fitness.body.write",
                "https://www.googleapis.com/auth/fitness.body_temperature.read",
                "https://www.googleapis.com/auth/fitness.body_temperature.write",
                "https://www.googleapis.com/auth/fitness.heart_rate.read",
                "https://www.googleapis.com/auth/fitness.heart_rate.write",
                "https://www.googleapis.com/auth/fitness.location.read",
                "https://www.googleapis.com/auth/fitness.location.write",
                "https://www.googleapis.com/auth/fitness.nutrition.read",
                "https://www.googleapis.com/auth/fitness.nutrition.write",
                "https://www.googleapis.com/auth/fitness.oxygen_saturation.read",
                "https://www.googleapis.com/auth/fitness.oxygen_saturation.write",
                "https://www.googleapis.com/auth/fitness.reproductive_health.read",
                "https://www.googleapis.com/auth/fitness.reproductive_health.write",
                "https://www.googleapis.com/auth/fitness.sleep.read",
                "https://www.googleapis.com/auth/fitness.sleep.write"
              ],
              "parameterOrder": [
                "userId"
              ],
              "description": "Aggregates data of a certain type or stream into buckets divided by a given type of boundary. Multiple data sets of multiple types and from multiple sources can be aggregated into exactly one bucket type per request.",
              "httpMethod": "POST"
            }
          }
        },
        "dataSources": {
          "resources": {
            "datasets": {
              "methods": {
                "patch": {
                  "scopes": [
                    "https://www.googleapis.com/auth/fitness.activity.write",
                    "https://www.googleapis.com/auth/fitness.blood_glucose.write",
                    "https://www.googleapis.com/auth/fitness.blood_pressure.write",
                    "https://www.googleapis.com/auth/fitness.body.write",
                    "https://www.googleapis.com/auth/fitness.body_temperature.write",
                    "https://www.googleapis.com/auth/fitness.heart_rate.write",
                    "https://www.googleapis.com/auth/fitness.location.write",
                    "https://www.googleapis.com/auth/fitness.nutrition.write",
                    "https://www.googleapis.com/auth/fitness.oxygen_saturation.write",
                    "https://www.googleapis.com/auth/fitness.reproductive_health.write",
                    "https://www.googleapis.com/auth/fitness.sleep.write"
                  ],
                  "flatPath": "{userId}/dataSources/{dataSourceId}/datasets/{datasetId}",
                  "httpMethod": "PATCH",
                  "path": "{userId}/dataSources/{dataSourceId}/datasets/{datasetId}",
                  "parameterOrder": [
                    "userId",
                    "dataSourceId",
                    "datasetId"
                  ],
                  "description": "Adds data points to a dataset. The dataset need not be previously created. All points within the given dataset will be returned with subsquent calls to retrieve this dataset. Data points can belong to more than one dataset. This method does not use patch semantics.",
                  "parameters": {
                    "currentTimeMillis": {
                      "location": "query",
                      "type": "string",
                      "description": "The client's current time in milliseconds since epoch. Note that the minStartTimeNs and maxEndTimeNs properties in the request body are in nanoseconds instead of milliseconds.",
                      "format": "int64"
                    },
                    "datasetId": {
                      "required": true,
                      "description": "Dataset identifier that is a composite of the minimum data point start time and maximum data point end time represented as nanoseconds from the epoch. The ID is formatted like: \"startTime-endTime\" where startTime and endTime are 64 bit integers.",
                      "type": "string",
                      "location": "path"
                    },
                    "dataSourceId": {
                      "description": "The data stream ID of the data source that created the dataset.",
                      "type": "string",
                      "required": true,
                      "location": "path"
                    },
                    "userId": {
                      "location": "path",
                      "description": "Patch a dataset for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "id": "fitness.users.dataSources.datasets.patch",
                  "response": {
                    "$ref": "Dataset"
                  },
                  "request": {
                    "$ref": "Dataset"
                  }
                },
                "delete": {
                  "httpMethod": "DELETE",
                  "scopes": [
                    "https://www.googleapis.com/auth/fitness.activity.write",
                    "https://www.googleapis.com/auth/fitness.blood_glucose.write",
                    "https://www.googleapis.com/auth/fitness.blood_pressure.write",
                    "https://www.googleapis.com/auth/fitness.body.write",
                    "https://www.googleapis.com/auth/fitness.body_temperature.write",
                    "https://www.googleapis.com/auth/fitness.heart_rate.write",
                    "https://www.googleapis.com/auth/fitness.location.write",
                    "https://www.googleapis.com/auth/fitness.nutrition.write",
                    "https://www.googleapis.com/auth/fitness.oxygen_saturation.write",
                    "https://www.googleapis.com/auth/fitness.reproductive_health.write",
                    "https://www.googleapis.com/auth/fitness.sleep.write"
                  ],
                  "parameters": {
                    "currentTimeMillis": {
                      "location": "query",
                      "format": "int64",
                      "type": "string",
                      "description": "The client's current time in milliseconds since epoch."
                    },
                    "modifiedTimeMillis": {
                      "type": "string",
                      "description": "When the operation was performed on the client.",
                      "format": "int64",
                      "location": "query"
                    },
                    "datasetId": {
                      "location": "path",
                      "description": "Dataset identifier that is a composite of the minimum data point start time and maximum data point end time represented as nanoseconds from the epoch. The ID is formatted like: \"startTime-endTime\" where startTime and endTime are 64 bit integers.",
                      "type": "string",
                      "required": true
                    },
                    "userId": {
                      "type": "string",
                      "location": "path",
                      "description": "Delete a dataset for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.",
                      "required": true
                    },
                    "dataSourceId": {
                      "location": "path",
                      "description": "The data stream ID of the data source that created the dataset.",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "id": "fitness.users.dataSources.datasets.delete",
                  "flatPath": "{userId}/dataSources/{dataSourceId}/datasets/{datasetId}",
                  "path": "{userId}/dataSources/{dataSourceId}/datasets/{datasetId}",
                  "description": "Performs an inclusive delete of all data points whose start and end times have any overlap with the time range specified by the dataset ID. For most data types, the entire data point will be deleted. For data types where the time span represents a consistent value (such as com.google.activity.segment), and a data point straddles either end point of the dataset, only the overlapping portion of the data point will be deleted.",
                  "parameterOrder": [
                    "userId",
                    "dataSourceId",
                    "datasetId"
                  ]
                },
                "get": {
                  "path": "{userId}/dataSources/{dataSourceId}/datasets/{datasetId}",
                  "response": {
                    "$ref": "Dataset"
                  },
                  "parameters": {
                    "dataSourceId": {
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "description": "The data stream ID of the data source that created the dataset."
                    },
                    "datasetId": {
                      "type": "string",
                      "description": "Dataset identifier that is a composite of the minimum data point start time and maximum data point end time represented as nanoseconds from the epoch. The ID is formatted like: \"startTime-endTime\" where startTime and endTime are 64 bit integers.",
                      "location": "path",
                      "required": true
                    },
                    "limit": {
                      "format": "int32",
                      "type": "integer",
                      "description": "If specified, no more than this many data points will be included in the dataset. If there are more data points in the dataset, nextPageToken will be set in the dataset response.",
                      "location": "query"
                    },
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "The continuation token, which is used to page through large datasets. To get the next page of a dataset, set this parameter to the value of nextPageToken from the previous response. Each subsequent call will yield a partial dataset with data point end timestamps that are strictly smaller than those in the previous partial response."
                    },
                    "userId": {
                      "type": "string",
                      "location": "path",
                      "required": true,
                      "description": "Retrieve a dataset for the person identified. Use me to indicate the authenticated user. Only me is supported at this time."
                    }
                  },
                  "flatPath": "{userId}/dataSources/{dataSourceId}/datasets/{datasetId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/fitness.activity.read",
                    "https://www.googleapis.com/auth/fitness.activity.write",
                    "https://www.googleapis.com/auth/fitness.blood_glucose.read",
                    "https://www.googleapis.com/auth/fitness.blood_glucose.write",
                    "https://www.googleapis.com/auth/fitness.blood_pressure.read",
                    "https://www.googleapis.com/auth/fitness.blood_pressure.write",
                    "https://www.googleapis.com/auth/fitness.body.read",
                    "https://www.googleapis.com/auth/fitness.body.write",
                    "https://www.googleapis.com/auth/fitness.body_temperature.read",
                    "https://www.googleapis.com/auth/fitness.body_temperature.write",
                    "https://www.googleapis.com/auth/fitness.heart_rate.read",
                    "https://www.googleapis.com/auth/fitness.heart_rate.write",
                    "https://www.googleapis.com/auth/fitness.location.read",
                    "https://www.googleapis.com/auth/fitness.location.write",
                    "https://www.googleapis.com/auth/fitness.nutrition.read",
                    "https://www.googleapis.com/auth/fitness.nutrition.write",
                    "https://www.googleapis.com/auth/fitness.oxygen_saturation.read",
                    "https://www.googleapis.com/auth/fitness.oxygen_saturation.write",
                    "https://www.googleapis.com/auth/fitness.reproductive_health.read",
                    "https://www.googleapis.com/auth/fitness.reproductive_health.write",
                    "https://www.googleapis.com/auth/fitness.sleep.read",
                    "https://www.googleapis.com/auth/fitness.sleep.write"
                  ],
                  "description": "Returns a dataset containing all data points whose start and end times overlap with the specified range of the dataset minimum start time and maximum end time. Specifically, any data point whose start time is less than or equal to the dataset end time and whose end time is greater than or equal to the dataset start time.",
                  "id": "fitness.users.dataSources.datasets.get",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "userId",
                    "dataSourceId",
                    "datasetId"
                  ]
                }
              }
            },
            "dataPointChanges": {
              "methods": {
                "list": {
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "description": "The continuation token, which is used to page through large result sets. To get the next page of results, set this parameter to the value of nextPageToken from the previous response.",
                      "location": "query"
                    },
                    "dataSourceId": {
                      "location": "path",
                      "description": "The data stream ID of the data source that created the dataset.",
                      "type": "string",
                      "required": true
                    },
                    "userId": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "description": "List data points for the person identified. Use me to indicate the authenticated user. Only me is supported at this time."
                    },
                    "limit": {
                      "format": "int32",
                      "location": "query",
                      "description": "If specified, no more than this many data point changes will be included in the response.",
                      "type": "integer"
                    }
                  },
                  "description": "Queries for user's data point changes for a particular data source.",
                  "path": "{userId}/dataSources/{dataSourceId}/dataPointChanges",
                  "httpMethod": "GET",
                  "id": "fitness.users.dataSources.dataPointChanges.list",
                  "scopes": [
                    "https://www.googleapis.com/auth/fitness.activity.read",
                    "https://www.googleapis.com/auth/fitness.activity.write",
                    "https://www.googleapis.com/auth/fitness.blood_glucose.read",
                    "https://www.googleapis.com/auth/fitness.blood_glucose.write",
                    "https://www.googleapis.com/auth/fitness.blood_pressure.read",
                    "https://www.googleapis.com/auth/fitness.blood_pressure.write",
                    "https://www.googleapis.com/auth/fitness.body.read",
                    "https://www.googleapis.com/auth/fitness.body.write",
                    "https://www.googleapis.com/auth/fitness.body_temperature.read",
                    "https://www.googleapis.com/auth/fitness.body_temperature.write",
                    "https://www.googleapis.com/auth/fitness.heart_rate.read",
                    "https://www.googleapis.com/auth/fitness.heart_rate.write",
                    "https://www.googleapis.com/auth/fitness.location.read",
                    "https://www.googleapis.com/auth/fitness.location.write",
                    "https://www.googleapis.com/auth/fitness.nutrition.read",
                    "https://www.googleapis.com/auth/fitness.nutrition.write",
                    "https://www.googleapis.com/auth/fitness.oxygen_saturation.read",
                    "https://www.googleapis.com/auth/fitness.oxygen_saturation.write",
                    "https://www.googleapis.com/auth/fitness.reproductive_health.read",
                    "https://www.googleapis.com/auth/fitness.reproductive_health.write",
                    "https://www.googleapis.com/auth/fitness.sleep.read",
                    "https://www.googleapis.com/auth/fitness.sleep.write"
                  ],
                  "flatPath": "{userId}/dataSources/{dataSourceId}/dataPointChanges",
                  "response": {
                    "$ref": "ListDataPointChangesResponse"
                  },
                  "parameterOrder": [
                    "userId",
                    "dataSourceId"
                  ]
                }
              }
            }
          },
          "methods": {
            "delete": {
              "parameterOrder": [
                "userId",
                "dataSourceId"
              ],
              "flatPath": "{userId}/dataSources/{dataSourceId}",
              "path": "{userId}/dataSources/{dataSourceId}",
              "description": "Deletes the specified data source. The request will fail if the data source contains any data points.",
              "response": {
                "$ref": "DataSource"
              },
              "parameters": {
                "userId": {
                  "type": "string",
                  "description": "Retrieve a data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.",
                  "required": true,
                  "location": "path"
                },
                "dataSourceId": {
                  "required": true,
                  "description": "The data stream ID of the data source to delete.",
                  "location": "path",
                  "type": "string"
                }
              },
              "id": "fitness.users.dataSources.delete",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/fitness.activity.write",
                "https://www.googleapis.com/auth/fitness.blood_glucose.write",
                "https://www.googleapis.com/auth/fitness.blood_pressure.write",
                "https://www.googleapis.com/auth/fitness.body.write",
                "https://www.googleapis.com/auth/fitness.body_temperature.write",
                "https://www.googleapis.com/auth/fitness.heart_rate.write",
                "https://www.googleapis.com/auth/fitness.location.write",
                "https://www.googleapis.com/auth/fitness.nutrition.write",
                "https://www.googleapis.com/auth/fitness.oxygen_saturation.write",
                "https://www.googleapis.com/auth/fitness.reproductive_health.write",
                "https://www.googleapis.com/auth/fitness.sleep.write"
              ]
            },
            "get": {
              "description": "Returns the specified data source.",
              "parameterOrder": [
                "userId",
                "dataSourceId"
              ],
              "flatPath": "{userId}/dataSources/{dataSourceId}",
              "response": {
                "$ref": "DataSource"
              },
              "path": "{userId}/dataSources/{dataSourceId}",
              "parameters": {
                "dataSourceId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The data stream ID of the data source to retrieve."
                },
                "userId": {
                  "description": "Retrieve a data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/fitness.activity.read",
                "https://www.googleapis.com/auth/fitness.activity.write",
                "https://www.googleapis.com/auth/fitness.blood_glucose.read",
                "https://www.googleapis.com/auth/fitness.blood_glucose.write",
                "https://www.googleapis.com/auth/fitness.blood_pressure.read",
                "https://www.googleapis.com/auth/fitness.blood_pressure.write",
                "https://www.googleapis.com/auth/fitness.body.read",
                "https://www.googleapis.com/auth/fitness.body.write",
                "https://www.googleapis.com/auth/fitness.body_temperature.read",
                "https://www.googleapis.com/auth/fitness.body_temperature.write",
                "https://www.googleapis.com/auth/fitness.heart_rate.read",
                "https://www.googleapis.com/auth/fitness.heart_rate.write",
                "https://www.googleapis.com/auth/fitness.location.read",
                "https://www.googleapis.com/auth/fitness.location.write",
                "https://www.googleapis.com/auth/fitness.nutrition.read",
                "https://www.googleapis.com/auth/fitness.nutrition.write",
                "https://www.googleapis.com/auth/fitness.oxygen_saturation.read",
                "https://www.googleapis.com/auth/fitness.oxygen_saturation.write",
                "https://www.googleapis.com/auth/fitness.reproductive_health.read",
                "https://www.googleapis.com/auth/fitness.reproductive_health.write",
                "https://www.googleapis.com/auth/fitness.sleep.read",
                "https://www.googleapis.com/auth/fitness.sleep.write"
              ],
              "httpMethod": "GET",
              "id": "fitness.users.dataSources.get"
            },
            "create": {
              "scopes": [
                "https://www.googleapis.com/auth/fitness.activity.write",
                "https://www.googleapis.com/auth/fitness.blood_glucose.write",
                "https://www.googleapis.com/auth/fitness.blood_pressure.write",
                "https://www.googleapis.com/auth/fitness.body.write",
                "https://www.googleapis.com/auth/fitness.body_temperature.write",
                "https://www.googleapis.com/auth/fitness.heart_rate.write",
                "https://www.googleapis.com/auth/fitness.location.write",
                "https://www.googleapis.com/auth/fitness.nutrition.write",
                "https://www.googleapis.com/auth/fitness.oxygen_saturation.write",
                "https://www.googleapis.com/auth/fitness.reproductive_health.write",
                "https://www.googleapis.com/auth/fitness.sleep.write"
              ],
              "request": {
                "$ref": "DataSource"
              },
              "path": "{userId}/dataSources",
              "description": "Creates a new data source that is unique across all data sources belonging to this user. A data source is a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point in every dataset inserted into or read from the Fitness API has an associated data source. Each data source produces a unique stream of dataset updates, with a unique data source identifier. Not all changes to data source affect the data stream ID, so that data collected by updated versions of the same application/device can still be considered to belong to the same data source. Data sources are identified using a string generated by the server, based on the contents of the source being created. The dataStreamId field should not be set when invoking this method. It will be automatically generated by the server with the correct format. If a dataStreamId is set, it must match the format that the server would generate. This format is a combination of some fields from the data source, and has a specific order. If it doesn't match, the request will fail with an error. Specifying a DataType which is not a known type (beginning with \"com.google.\") will create a DataSource with a *custom data type*. Custom data types are only readable by the application that created them. Custom data types are *deprecated*; use standard data types instead. In addition to the data source fields included in the data source ID, the developer project number that is authenticated when creating the data source is included. This developer project number is obfuscated when read by any other developer reading public data types.",
              "parameters": {
                "userId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Create the data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time."
                }
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "userId"
              ],
              "flatPath": "{userId}/dataSources",
              "id": "fitness.users.dataSources.create",
              "response": {
                "$ref": "DataSource"
              }
            },
            "update": {
              "response": {
                "$ref": "DataSource"
              },
              "parameterOrder": [
                "userId",
                "dataSourceId"
              ],
              "httpMethod": "PUT",
              "request": {
                "$ref": "DataSource"
              },
              "path": "{userId}/dataSources/{dataSourceId}",
              "parameters": {
                "dataSourceId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The data stream ID of the data source to update."
                },
                "userId": {
                  "type": "string",
                  "location": "path",
                  "description": "Update the data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.",
                  "required": true
                }
              },
              "id": "fitness.users.dataSources.update",
              "scopes": [
                "https://www.googleapis.com/auth/fitness.activity.write",
                "https://www.googleapis.com/auth/fitness.blood_glucose.write",
                "https://www.googleapis.com/auth/fitness.blood_pressure.write",
                "https://www.googleapis.com/auth/fitness.body.write",
                "https://www.googleapis.com/auth/fitness.body_temperature.write",
                "https://www.googleapis.com/auth/fitness.heart_rate.write",
                "https://www.googleapis.com/auth/fitness.location.write",
                "https://www.googleapis.com/auth/fitness.nutrition.write",
                "https://www.googleapis.com/auth/fitness.oxygen_saturation.write",
                "https://www.googleapis.com/auth/fitness.reproductive_health.write",
                "https://www.googleapis.com/auth/fitness.sleep.write"
              ],
              "description": "Updates the specified data source. The dataStreamId, dataType, type, dataStreamName, and device properties with the exception of version, cannot be modified. Data sources are identified by their dataStreamId.",
              "flatPath": "{userId}/dataSources/{dataSourceId}"
            },
            "list": {
              "response": {
                "$ref": "ListDataSourcesResponse"
              },
              "parameters": {
                "dataTypeName": {
                  "location": "query",
                  "repeated": true,
                  "description": "The names of data types to include in the list. If not specified, all data sources will be returned.",
                  "type": "string"
                },
                "userId": {
                  "required": true,
                  "location": "path",
                  "description": "List data sources for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.",
                  "type": "string"
                }
              },
              "httpMethod": "GET",
              "flatPath": "{userId}/dataSources",
              "path": "{userId}/dataSources",
              "parameterOrder": [
                "userId"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/fitness.activity.read",
                "https://www.googleapis.com/auth/fitness.activity.write",
                "https://www.googleapis.com/auth/fitness.blood_glucose.read",
                "https://www.googleapis.com/auth/fitness.blood_glucose.write",
                "https://www.googleapis.com/auth/fitness.blood_pressure.read",
                "https://www.googleapis.com/auth/fitness.blood_pressure.write",
                "https://www.googleapis.com/auth/fitness.body.read",
                "https://www.googleapis.com/auth/fitness.body.write",
                "https://www.googleapis.com/auth/fitness.body_temperature.read",
                "https://www.googleapis.com/auth/fitness.body_temperature.write",
                "https://www.googleapis.com/auth/fitness.heart_rate.read",
                "https://www.googleapis.com/auth/fitness.heart_rate.write",
                "https://www.googleapis.com/auth/fitness.location.read",
                "https://www.googleapis.com/auth/fitness.location.write",
                "https://www.googleapis.com/auth/fitness.nutrition.read",
                "https://www.googleapis.com/auth/fitness.nutrition.write",
                "https://www.googleapis.com/auth/fitness.oxygen_saturation.read",
                "https://www.googleapis.com/auth/fitness.oxygen_saturation.write",
                "https://www.googleapis.com/auth/fitness.reproductive_health.read",
                "https://www.googleapis.com/auth/fitness.reproductive_health.write",
                "https://www.googleapis.com/auth/fitness.sleep.read",
                "https://www.googleapis.com/auth/fitness.sleep.write"
              ],
              "id": "fitness.users.dataSources.list",
              "description": "Lists all data sources that are visible to the developer, using the OAuth scopes provided. The list is not exhaustive; the user may have private data sources that are only visible to other developers, or calls using other scopes."
            }
          }
        },
        "sessions": {
          "methods": {
            "delete": {
              "flatPath": "{userId}/sessions/{sessionId}",
              "httpMethod": "DELETE",
              "path": "{userId}/sessions/{sessionId}",
              "id": "fitness.users.sessions.delete",
              "scopes": [
                "https://www.googleapis.com/auth/fitness.activity.write",
                "https://www.googleapis.com/auth/fitness.sleep.write"
              ],
              "parameters": {
                "sessionId": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The ID of the session to be deleted."
                },
                "currentTimeMillis": {
                  "description": "The client's current time in milliseconds since epoch.",
                  "format": "int64",
                  "location": "query",
                  "type": "string"
                },
                "userId": {
                  "required": true,
                  "description": "Delete a session for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.",
                  "location": "path",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userId",
                "sessionId"
              ],
              "description": "Deletes a session specified by the given session ID."
            },
            "update": {
              "scopes": [
                "https://www.googleapis.com/auth/fitness.activity.write",
                "https://www.googleapis.com/auth/fitness.sleep.write"
              ],
              "parameters": {
                "userId": {
                  "required": true,
                  "description": "Create sessions for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.",
                  "location": "path",
                  "type": "string"
                },
                "sessionId": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The ID of the session to be created."
                },
                "currentTimeMillis": {
                  "description": "The client's current time in milliseconds since epoch.",
                  "location": "query",
                  "format": "int64",
                  "type": "string"
                }
              },
              "id": "fitness.users.sessions.update",
              "request": {
                "$ref": "Session"
              },
              "httpMethod": "PUT",
              "parameterOrder": [
                "userId",
                "sessionId"
              ],
              "flatPath": "{userId}/sessions/{sessionId}",
              "response": {
                "$ref": "Session"
              },
              "path": "{userId}/sessions/{sessionId}",
              "description": "Updates or insert a given session."
            },
            "list": {
              "flatPath": "{userId}/sessions",
              "response": {
                "$ref": "ListSessionsResponse"
              },
              "parameters": {
                "userId": {
                  "required": true,
                  "description": "List sessions for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.",
                  "type": "string",
                  "location": "path"
                },
                "startTime": {
                  "description": "An RFC3339 timestamp. Only sessions ending between the start and end times will be included in the response. If this time is omitted but endTime is specified, all sessions from the start of time up to endTime will be returned.",
                  "location": "query",
                  "type": "string"
                },
                "includeDeleted": {
                  "location": "query",
                  "type": "boolean",
                  "description": "If true, and if both startTime and endTime are omitted, session deletions will be returned."
                },
                "endTime": {
                  "type": "string",
                  "description": "An RFC3339 timestamp. Only sessions ending between the start and end times will be included in the response. If this time is omitted but startTime is specified, all sessions from startTime to the end of time will be returned.",
                  "location": "query"
                },
                "activityType": {
                  "repeated": true,
                  "description": "If non-empty, only sessions with these activity types should be returned.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "The continuation token, which is used for incremental syncing. To get the next batch of changes, set this parameter to the value of nextPageToken from the previous response. The page token is ignored if either start or end time is specified. If none of start time, end time, and the page token is specified, sessions modified in the last 30 days are returned."
                }
              },
              "parameterOrder": [
                "userId"
              ],
              "httpMethod": "GET",
              "id": "fitness.users.sessions.list",
              "description": "Lists sessions previously created.",
              "path": "{userId}/sessions",
              "scopes": [
                "https://www.googleapis.com/auth/fitness.activity.read",
                "https://www.googleapis.com/auth/fitness.activity.write",
                "https://www.googleapis.com/auth/fitness.blood_glucose.read",
                "https://www.googleapis.com/auth/fitness.blood_glucose.write",
                "https://www.googleapis.com/auth/fitness.blood_pressure.read",
                "https://www.googleapis.com/auth/fitness.blood_pressure.write",
                "https://www.googleapis.com/auth/fitness.body.read",
                "https://www.googleapis.com/auth/fitness.body.write",
                "https://www.googleapis.com/auth/fitness.body_temperature.read",
                "https://www.googleapis.com/auth/fitness.body_temperature.write",
                "https://www.googleapis.com/auth/fitness.heart_rate.read",
                "https://www.googleapis.com/auth/fitness.heart_rate.write",
                "https://www.googleapis.com/auth/fitness.location.read",
                "https://www.googleapis.com/auth/fitness.location.write",
                "https://www.googleapis.com/auth/fitness.nutrition.read",
                "https://www.googleapis.com/auth/fitness.nutrition.write",
                "https://www.googleapis.com/auth/fitness.oxygen_saturation.read",
                "https://www.googleapis.com/auth/fitness.oxygen_saturation.write",
                "https://www.googleapis.com/auth/fitness.reproductive_health.read",
                "https://www.googleapis.com/auth/fitness.reproductive_health.write",
                "https://www.googleapis.com/auth/fitness.sleep.read",
                "https://www.googleapis.com/auth/fitness.sleep.write"
              ]
            }
          }
        }
      }
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/fitness.reproductive_health.read": {
          "description": "See info about your reproductive health in Google Fit. I consent to Google sharing my reproductive health information with this app."
        },
        "https://www.googleapis.com/auth/fitness.oxygen_saturation.write": {
          "description": "See and add info about your oxygen saturation in Google Fit. I consent to Google sharing my oxygen saturation information with this app."
        },
        "https://www.googleapis.com/auth/fitness.blood_pressure.read": {
          "description": "See info about your blood pressure in Google Fit. I consent to Google sharing my blood pressure information with this app."
        },
        "https://www.googleapis.com/auth/fitness.oxygen_saturation.read": {
          "description": "See info about your oxygen saturation in Google Fit. I consent to Google sharing my oxygen saturation information with this app."
        },
        "https://www.googleapis.com/auth/fitness.activity.write": {
          "description": "See and add to your Google Fit physical activity data"
        },
        "https://www.googleapis.com/auth/fitness.location.read": {
          "description": "See your Google Fit speed and distance data"
        },
        "https://www.googleapis.com/auth/fitness.blood_pressure.write": {
          "description": "See and add info about your blood pressure in Google Fit. I consent to Google sharing my blood pressure information with this app."
        },
        "https://www.googleapis.com/auth/fitness.body.write": {
          "description": "See and add info about your body measurements and heart rate to Google Fit"
        },
        "https://www.googleapis.com/auth/fitness.sleep.read": {
          "description": "See your sleep data in Google Fit. I consent to Google sharing my sleep information with this app."
        },
        "https://www.googleapis.com/auth/fitness.body.read": {
          "description": "See info about your body measurements and heart rate in Google Fit"
        },
        "https://www.googleapis.com/auth/fitness.location.write": {
          "description": "See and add to your Google Fit location data"
        },
        "https://www.googleapis.com/auth/fitness.blood_glucose.read": {
          "description": "See info about your blood glucose in Google Fit. I consent to Google sharing my blood glucose information with this app."
        },
        "https://www.googleapis.com/auth/fitness.blood_glucose.write": {
          "description": "See and add info about your blood glucose to Google Fit. I consent to Google sharing my blood glucose information with this app."
        },
        "https://www.googleapis.com/auth/fitness.heart_rate.read": {
          "description": "See your heart rate data in Google Fit. I consent to Google sharing my heart rate information with this app."
        },
        "https://www.googleapis.com/auth/fitness.body_temperature.read": {
          "description": "See info about your body temperature in Google Fit. I consent to Google sharing my body temperature information with this app."
        },
        "https://www.googleapis.com/auth/fitness.nutrition.read": {
          "description": "See info about your nutrition in Google Fit"
        },
        "https://www.googleapis.com/auth/fitness.sleep.write": {
          "description": "See and add to your sleep data in Google Fit. I consent to Google sharing my sleep information with this app."
        },
        "https://www.googleapis.com/auth/fitness.nutrition.write": {
          "description": "See and add to info about your nutrition in Google Fit"
        },
        "https://www.googleapis.com/auth/fitness.heart_rate.write": {
          "description": "See and add to your heart rate data in Google Fit. I consent to Google sharing my heart rate information with this app."
        },
        "https://www.googleapis.com/auth/fitness.activity.read": {
          "description": "Use Google Fit to see and store your physical activity data"
        },
        "https://www.googleapis.com/auth/fitness.reproductive_health.write": {
          "description": "See and add info about your reproductive health in Google Fit. I consent to Google sharing my reproductive health information with this app."
        },
        "https://www.googleapis.com/auth/fitness.body_temperature.write": {
          "description": "See and add to info about your body temperature in Google Fit. I consent to Google sharing my body temperature information with this app."
        }
      }
    }
  },
  "name": "fitness",
  "documentationLink": "https://developers.google.com/fit/rest/v1/get-started",
  "discoveryVersion": "v1",
  "ownerName": "Google"
}
