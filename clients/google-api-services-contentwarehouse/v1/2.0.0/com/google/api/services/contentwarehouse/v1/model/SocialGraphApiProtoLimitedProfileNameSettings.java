/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for SocialGraphApiProtoLimitedProfileNameSettings.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SocialGraphApiProtoLimitedProfileNameSettings extends com.google.api.client.json.GenericJson {

  /**
   * Required. Describes which shortening option the user implicitly chose for their limited
   * profile. E.g., if 'John Doe' chose 'John D.', they implicitly chose: partial_name_options {
   * given_name_spec { show_all: true } family_name_spec: { show_initial: true truncation_indicator:
   * PERIOD } } While we'll in all cases serve the actual name chosen by the user for limited
   * profiles (stored below), we'll use this information to recompute the default limited profile to
   * be rendered to users when they change their core name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SocialGraphApiProtoPartialNameOptions partialNameOptions;

  /**
   * The actual textual name that was chosen by the user in the UI. E.g., if 'John Doe' chose 'John
   * D.', this holds 'John D.'. While `partial_name_options` allows the limited profile name to be
   * computed from the core name, the resulting shortened name might change across different
   * versions of the name shortening logic, and we want to preserve the user's choice verbatim
   * whenever possible. This field will be cleared when the two conditions below are met: (1) A
   * successful core name change is not accompanied by a limited profile settings update and (2) The
   * shortened name computed from `partial_name_options` yields a different result than what is
   * originally stored in `verbatim_full_name`. When this happens, the limited profile is
   * effectively *disabled*. E.g., if 'John Doe' from the example above changes their name to 'Jane
   * Doe' and no LimitedProfileSettings are provided, `Jane D.` is the resulting shortened name.
   * Therefore `verbatim_full_name` will be cleared and the limited profile settings will be
   * disabled. On the other hand, if they change their name to `John Dõe`, the resulting shortened
   * name remains `John D.`, and `verbatim_full_name` is kept as is.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String verbatimFullName;

  /**
   * Required. Describes which shortening option the user implicitly chose for their limited
   * profile. E.g., if 'John Doe' chose 'John D.', they implicitly chose: partial_name_options {
   * given_name_spec { show_all: true } family_name_spec: { show_initial: true truncation_indicator:
   * PERIOD } } While we'll in all cases serve the actual name chosen by the user for limited
   * profiles (stored below), we'll use this information to recompute the default limited profile to
   * be rendered to users when they change their core name.
   * @return value or {@code null} for none
   */
  public SocialGraphApiProtoPartialNameOptions getPartialNameOptions() {
    return partialNameOptions;
  }

  /**
   * Required. Describes which shortening option the user implicitly chose for their limited
   * profile. E.g., if 'John Doe' chose 'John D.', they implicitly chose: partial_name_options {
   * given_name_spec { show_all: true } family_name_spec: { show_initial: true truncation_indicator:
   * PERIOD } } While we'll in all cases serve the actual name chosen by the user for limited
   * profiles (stored below), we'll use this information to recompute the default limited profile to
   * be rendered to users when they change their core name.
   * @param partialNameOptions partialNameOptions or {@code null} for none
   */
  public SocialGraphApiProtoLimitedProfileNameSettings setPartialNameOptions(SocialGraphApiProtoPartialNameOptions partialNameOptions) {
    this.partialNameOptions = partialNameOptions;
    return this;
  }

  /**
   * The actual textual name that was chosen by the user in the UI. E.g., if 'John Doe' chose 'John
   * D.', this holds 'John D.'. While `partial_name_options` allows the limited profile name to be
   * computed from the core name, the resulting shortened name might change across different
   * versions of the name shortening logic, and we want to preserve the user's choice verbatim
   * whenever possible. This field will be cleared when the two conditions below are met: (1) A
   * successful core name change is not accompanied by a limited profile settings update and (2) The
   * shortened name computed from `partial_name_options` yields a different result than what is
   * originally stored in `verbatim_full_name`. When this happens, the limited profile is
   * effectively *disabled*. E.g., if 'John Doe' from the example above changes their name to 'Jane
   * Doe' and no LimitedProfileSettings are provided, `Jane D.` is the resulting shortened name.
   * Therefore `verbatim_full_name` will be cleared and the limited profile settings will be
   * disabled. On the other hand, if they change their name to `John Dõe`, the resulting shortened
   * name remains `John D.`, and `verbatim_full_name` is kept as is.
   * @return value or {@code null} for none
   */
  public java.lang.String getVerbatimFullName() {
    return verbatimFullName;
  }

  /**
   * The actual textual name that was chosen by the user in the UI. E.g., if 'John Doe' chose 'John
   * D.', this holds 'John D.'. While `partial_name_options` allows the limited profile name to be
   * computed from the core name, the resulting shortened name might change across different
   * versions of the name shortening logic, and we want to preserve the user's choice verbatim
   * whenever possible. This field will be cleared when the two conditions below are met: (1) A
   * successful core name change is not accompanied by a limited profile settings update and (2) The
   * shortened name computed from `partial_name_options` yields a different result than what is
   * originally stored in `verbatim_full_name`. When this happens, the limited profile is
   * effectively *disabled*. E.g., if 'John Doe' from the example above changes their name to 'Jane
   * Doe' and no LimitedProfileSettings are provided, `Jane D.` is the resulting shortened name.
   * Therefore `verbatim_full_name` will be cleared and the limited profile settings will be
   * disabled. On the other hand, if they change their name to `John Dõe`, the resulting shortened
   * name remains `John D.`, and `verbatim_full_name` is kept as is.
   * @param verbatimFullName verbatimFullName or {@code null} for none
   */
  public SocialGraphApiProtoLimitedProfileNameSettings setVerbatimFullName(java.lang.String verbatimFullName) {
    this.verbatimFullName = verbatimFullName;
    return this;
  }

  @Override
  public SocialGraphApiProtoLimitedProfileNameSettings set(String fieldName, Object value) {
    return (SocialGraphApiProtoLimitedProfileNameSettings) super.set(fieldName, value);
  }

  @Override
  public SocialGraphApiProtoLimitedProfileNameSettings clone() {
    return (SocialGraphApiProtoLimitedProfileNameSettings) super.clone();
  }

}
