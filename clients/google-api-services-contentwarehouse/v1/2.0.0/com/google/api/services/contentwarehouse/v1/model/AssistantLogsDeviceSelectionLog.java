/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Contains information logged in target device selection. See go/improve-device-targeting-logging
 * for details. Next Id: 22
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantLogsDeviceSelectionLog extends com.google.api.client.json.GenericJson {

  /**
   * Default settings of all nearby devices Deprecated, use default_devices_log instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantLogsDefaultDeviceLog> allDefaultDevices;

  static {
    // hack to force ProGuard to consider AssistantLogsDefaultDeviceLog used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(AssistantLogsDefaultDeviceLog.class);
  }

  /**
   * Logs all active media sessions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsAllMediaStreamLog allMediaStreamLog;

  /**
   * DeviceSelectionLog for counterfactual logging.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsDeviceSelectionLog counterfactualDeviceSelectionLog;

  /**
   * Include default tv and default speaker Deprecated, use all_default_devices below.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsDefaultDeviceLog defaultDevices;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsDefaultDevicesLog defaultDevicesLog;

  /**
   * Temporaray field for debugging ANDROID_AUTO multi_target_devices punt. This will be removed
   * once we identify the root cause.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> devicesStr;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantLogsInputErrorLog> inputErrorLog;

  /**
   * Now we just log the media sessions on local device Deprecated, use
   * NearbyDevicesLog::LocalDevice instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsDeviceInfoLog localDevice;

  /**
   * Indicates which library populated the device_selection_log for this query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String logDataSource;

  /**
   * The Media Focus information. This field should be populated only when there is a Media Focus.
   * Deprecated, use media_focuses below instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsMediaFocusInfoLog mediaFocus;

  /**
   * Media focuses on all devices.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsMediaFocusesLog mediaFocusesLog;

  /**
   * All nearby devices and local device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsNearbyDevicesLog nearbyDevicesLog;

  /**
   * This should log the query annotation features found in the device, such as the device
   * annotation, the room annotation, and the structure annotation from the query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsQueryAnnotationLog queryAnnotation;

  /**
   * The result of device selection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantLogsDeviceSelectionResultLog selectionResult;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantLogsDeviceTargetingTestCode> testCodes;

  /**
   * Default settings of all nearby devices Deprecated, use default_devices_log instead.
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantLogsDefaultDeviceLog> getAllDefaultDevices() {
    return allDefaultDevices;
  }

  /**
   * Default settings of all nearby devices Deprecated, use default_devices_log instead.
   * @param allDefaultDevices allDefaultDevices or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setAllDefaultDevices(java.util.List<AssistantLogsDefaultDeviceLog> allDefaultDevices) {
    this.allDefaultDevices = allDefaultDevices;
    return this;
  }

  /**
   * Logs all active media sessions.
   * @return value or {@code null} for none
   */
  public AssistantLogsAllMediaStreamLog getAllMediaStreamLog() {
    return allMediaStreamLog;
  }

  /**
   * Logs all active media sessions.
   * @param allMediaStreamLog allMediaStreamLog or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setAllMediaStreamLog(AssistantLogsAllMediaStreamLog allMediaStreamLog) {
    this.allMediaStreamLog = allMediaStreamLog;
    return this;
  }

  /**
   * DeviceSelectionLog for counterfactual logging.
   * @return value or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog getCounterfactualDeviceSelectionLog() {
    return counterfactualDeviceSelectionLog;
  }

  /**
   * DeviceSelectionLog for counterfactual logging.
   * @param counterfactualDeviceSelectionLog counterfactualDeviceSelectionLog or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setCounterfactualDeviceSelectionLog(AssistantLogsDeviceSelectionLog counterfactualDeviceSelectionLog) {
    this.counterfactualDeviceSelectionLog = counterfactualDeviceSelectionLog;
    return this;
  }

  /**
   * Include default tv and default speaker Deprecated, use all_default_devices below.
   * @return value or {@code null} for none
   */
  public AssistantLogsDefaultDeviceLog getDefaultDevices() {
    return defaultDevices;
  }

  /**
   * Include default tv and default speaker Deprecated, use all_default_devices below.
   * @param defaultDevices defaultDevices or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setDefaultDevices(AssistantLogsDefaultDeviceLog defaultDevices) {
    this.defaultDevices = defaultDevices;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public AssistantLogsDefaultDevicesLog getDefaultDevicesLog() {
    return defaultDevicesLog;
  }

  /**
   * @param defaultDevicesLog defaultDevicesLog or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setDefaultDevicesLog(AssistantLogsDefaultDevicesLog defaultDevicesLog) {
    this.defaultDevicesLog = defaultDevicesLog;
    return this;
  }

  /**
   * Temporaray field for debugging ANDROID_AUTO multi_target_devices punt. This will be removed
   * once we identify the root cause.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDevicesStr() {
    return devicesStr;
  }

  /**
   * Temporaray field for debugging ANDROID_AUTO multi_target_devices punt. This will be removed
   * once we identify the root cause.
   * @param devicesStr devicesStr or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setDevicesStr(java.util.List<java.lang.String> devicesStr) {
    this.devicesStr = devicesStr;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantLogsInputErrorLog> getInputErrorLog() {
    return inputErrorLog;
  }

  /**
   * @param inputErrorLog inputErrorLog or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setInputErrorLog(java.util.List<AssistantLogsInputErrorLog> inputErrorLog) {
    this.inputErrorLog = inputErrorLog;
    return this;
  }

  /**
   * Now we just log the media sessions on local device Deprecated, use
   * NearbyDevicesLog::LocalDevice instead.
   * @return value or {@code null} for none
   */
  public AssistantLogsDeviceInfoLog getLocalDevice() {
    return localDevice;
  }

  /**
   * Now we just log the media sessions on local device Deprecated, use
   * NearbyDevicesLog::LocalDevice instead.
   * @param localDevice localDevice or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setLocalDevice(AssistantLogsDeviceInfoLog localDevice) {
    this.localDevice = localDevice;
    return this;
  }

  /**
   * Indicates which library populated the device_selection_log for this query.
   * @return value or {@code null} for none
   */
  public java.lang.String getLogDataSource() {
    return logDataSource;
  }

  /**
   * Indicates which library populated the device_selection_log for this query.
   * @param logDataSource logDataSource or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setLogDataSource(java.lang.String logDataSource) {
    this.logDataSource = logDataSource;
    return this;
  }

  /**
   * The Media Focus information. This field should be populated only when there is a Media Focus.
   * Deprecated, use media_focuses below instead.
   * @return value or {@code null} for none
   */
  public AssistantLogsMediaFocusInfoLog getMediaFocus() {
    return mediaFocus;
  }

  /**
   * The Media Focus information. This field should be populated only when there is a Media Focus.
   * Deprecated, use media_focuses below instead.
   * @param mediaFocus mediaFocus or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setMediaFocus(AssistantLogsMediaFocusInfoLog mediaFocus) {
    this.mediaFocus = mediaFocus;
    return this;
  }

  /**
   * Media focuses on all devices.
   * @return value or {@code null} for none
   */
  public AssistantLogsMediaFocusesLog getMediaFocusesLog() {
    return mediaFocusesLog;
  }

  /**
   * Media focuses on all devices.
   * @param mediaFocusesLog mediaFocusesLog or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setMediaFocusesLog(AssistantLogsMediaFocusesLog mediaFocusesLog) {
    this.mediaFocusesLog = mediaFocusesLog;
    return this;
  }

  /**
   * All nearby devices and local device.
   * @return value or {@code null} for none
   */
  public AssistantLogsNearbyDevicesLog getNearbyDevicesLog() {
    return nearbyDevicesLog;
  }

  /**
   * All nearby devices and local device.
   * @param nearbyDevicesLog nearbyDevicesLog or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setNearbyDevicesLog(AssistantLogsNearbyDevicesLog nearbyDevicesLog) {
    this.nearbyDevicesLog = nearbyDevicesLog;
    return this;
  }

  /**
   * This should log the query annotation features found in the device, such as the device
   * annotation, the room annotation, and the structure annotation from the query.
   * @return value or {@code null} for none
   */
  public AssistantLogsQueryAnnotationLog getQueryAnnotation() {
    return queryAnnotation;
  }

  /**
   * This should log the query annotation features found in the device, such as the device
   * annotation, the room annotation, and the structure annotation from the query.
   * @param queryAnnotation queryAnnotation or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setQueryAnnotation(AssistantLogsQueryAnnotationLog queryAnnotation) {
    this.queryAnnotation = queryAnnotation;
    return this;
  }

  /**
   * The result of device selection.
   * @return value or {@code null} for none
   */
  public AssistantLogsDeviceSelectionResultLog getSelectionResult() {
    return selectionResult;
  }

  /**
   * The result of device selection.
   * @param selectionResult selectionResult or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setSelectionResult(AssistantLogsDeviceSelectionResultLog selectionResult) {
    this.selectionResult = selectionResult;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantLogsDeviceTargetingTestCode> getTestCodes() {
    return testCodes;
  }

  /**
   * @param testCodes testCodes or {@code null} for none
   */
  public AssistantLogsDeviceSelectionLog setTestCodes(java.util.List<AssistantLogsDeviceTargetingTestCode> testCodes) {
    this.testCodes = testCodes;
    return this;
  }

  @Override
  public AssistantLogsDeviceSelectionLog set(String fieldName, Object value) {
    return (AssistantLogsDeviceSelectionLog) super.set(fieldName, value);
  }

  @Override
  public AssistantLogsDeviceSelectionLog clone() {
    return (AssistantLogsDeviceSelectionLog) super.clone();
  }

}
