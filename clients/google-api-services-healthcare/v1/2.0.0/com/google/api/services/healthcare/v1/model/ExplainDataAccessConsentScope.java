/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.healthcare.v1.model;

/**
 * A single consent scope that provides info on who has access to the requested resource scope for a
 * particular purpose and environment, enforced by which consent.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Healthcare API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ExplainDataAccessConsentScope extends com.google.api.client.json.GenericJson {

  /**
   * The accessor scope that describes who can access, for what purpose, and in which environment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ConsentAccessorScope accessorScope;

  /**
   * Whether the current consent scope is permitted or denied access on the requested resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String decision;

  /**
   * Metadata of the consent resources that enforce the consent scope's access.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ExplainDataAccessConsentInfo> enforcingConsents;

  static {
    // hack to force ProGuard to consider ExplainDataAccessConsentInfo used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ExplainDataAccessConsentInfo.class);
  }

  /**
   * Other consent scopes that created exceptions within this scope.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ExplainDataAccessConsentScope> exceptions;

  /**
   * The accessor scope that describes who can access, for what purpose, and in which environment.
   * @return value or {@code null} for none
   */
  public ConsentAccessorScope getAccessorScope() {
    return accessorScope;
  }

  /**
   * The accessor scope that describes who can access, for what purpose, and in which environment.
   * @param accessorScope accessorScope or {@code null} for none
   */
  public ExplainDataAccessConsentScope setAccessorScope(ConsentAccessorScope accessorScope) {
    this.accessorScope = accessorScope;
    return this;
  }

  /**
   * Whether the current consent scope is permitted or denied access on the requested resource.
   * @return value or {@code null} for none
   */
  public java.lang.String getDecision() {
    return decision;
  }

  /**
   * Whether the current consent scope is permitted or denied access on the requested resource.
   * @param decision decision or {@code null} for none
   */
  public ExplainDataAccessConsentScope setDecision(java.lang.String decision) {
    this.decision = decision;
    return this;
  }

  /**
   * Metadata of the consent resources that enforce the consent scope's access.
   * @return value or {@code null} for none
   */
  public java.util.List<ExplainDataAccessConsentInfo> getEnforcingConsents() {
    return enforcingConsents;
  }

  /**
   * Metadata of the consent resources that enforce the consent scope's access.
   * @param enforcingConsents enforcingConsents or {@code null} for none
   */
  public ExplainDataAccessConsentScope setEnforcingConsents(java.util.List<ExplainDataAccessConsentInfo> enforcingConsents) {
    this.enforcingConsents = enforcingConsents;
    return this;
  }

  /**
   * Other consent scopes that created exceptions within this scope.
   * @return value or {@code null} for none
   */
  public java.util.List<ExplainDataAccessConsentScope> getExceptions() {
    return exceptions;
  }

  /**
   * Other consent scopes that created exceptions within this scope.
   * @param exceptions exceptions or {@code null} for none
   */
  public ExplainDataAccessConsentScope setExceptions(java.util.List<ExplainDataAccessConsentScope> exceptions) {
    this.exceptions = exceptions;
    return this;
  }

  @Override
  public ExplainDataAccessConsentScope set(String fieldName, Object value) {
    return (ExplainDataAccessConsentScope) super.set(fieldName, value);
  }

  @Override
  public ExplainDataAccessConsentScope clone() {
    return (ExplainDataAccessConsentScope) super.clone();
  }

}
