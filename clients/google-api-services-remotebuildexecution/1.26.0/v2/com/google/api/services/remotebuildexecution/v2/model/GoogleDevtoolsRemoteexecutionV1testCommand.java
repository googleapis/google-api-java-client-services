/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.remotebuildexecution.v2.model;

/**
 * A `Command` is the actual command executed by a worker running an Action.
 *
 * Except as otherwise required, the environment (such as which system libraries or binaries are
 * available, and what filesystems are mounted where) is defined by and specific to the
 * implementation of the remote execution API.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Remote Build Execution API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleDevtoolsRemoteexecutionV1testCommand extends com.google.api.client.json.GenericJson {

  /**
   * The arguments to the command. The first argument must be the path to the executable, which must
   * be either a relative path, in which case it is evaluated with respect to the input root, or an
   * absolute path.
   *
   * The working directory will always be the input root.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> arguments;

  /**
   * The environment variables to set when running the program. The worker may provide its own
   * default environment variables; these defaults can be overridden using this field. Additional
   * variables can also be specified.
   *
   * In order to ensure that equivalent `Command`s always hash to the same value, the environment
   * variables MUST be lexicographically sorted by name. Sorting of strings is done by code point,
   * equivalently, by the UTF-8 bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleDevtoolsRemoteexecutionV1testCommandEnvironmentVariable> environmentVariables;

  /**
   * The arguments to the command. The first argument must be the path to the executable, which must
   * be either a relative path, in which case it is evaluated with respect to the input root, or an
   * absolute path.
   *
   * The working directory will always be the input root.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getArguments() {
    return arguments;
  }

  /**
   * The arguments to the command. The first argument must be the path to the executable, which must
   * be either a relative path, in which case it is evaluated with respect to the input root, or an
   * absolute path.
   *
   * The working directory will always be the input root.
   * @param arguments arguments or {@code null} for none
   */
  public GoogleDevtoolsRemoteexecutionV1testCommand setArguments(java.util.List<java.lang.String> arguments) {
    this.arguments = arguments;
    return this;
  }

  /**
   * The environment variables to set when running the program. The worker may provide its own
   * default environment variables; these defaults can be overridden using this field. Additional
   * variables can also be specified.
   *
   * In order to ensure that equivalent `Command`s always hash to the same value, the environment
   * variables MUST be lexicographically sorted by name. Sorting of strings is done by code point,
   * equivalently, by the UTF-8 bytes.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleDevtoolsRemoteexecutionV1testCommandEnvironmentVariable> getEnvironmentVariables() {
    return environmentVariables;
  }

  /**
   * The environment variables to set when running the program. The worker may provide its own
   * default environment variables; these defaults can be overridden using this field. Additional
   * variables can also be specified.
   *
   * In order to ensure that equivalent `Command`s always hash to the same value, the environment
   * variables MUST be lexicographically sorted by name. Sorting of strings is done by code point,
   * equivalently, by the UTF-8 bytes.
   * @param environmentVariables environmentVariables or {@code null} for none
   */
  public GoogleDevtoolsRemoteexecutionV1testCommand setEnvironmentVariables(java.util.List<GoogleDevtoolsRemoteexecutionV1testCommandEnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  @Override
  public GoogleDevtoolsRemoteexecutionV1testCommand set(String fieldName, Object value) {
    return (GoogleDevtoolsRemoteexecutionV1testCommand) super.set(fieldName, value);
  }

  @Override
  public GoogleDevtoolsRemoteexecutionV1testCommand clone() {
    return (GoogleDevtoolsRemoteexecutionV1testCommand) super.clone();
  }

}
