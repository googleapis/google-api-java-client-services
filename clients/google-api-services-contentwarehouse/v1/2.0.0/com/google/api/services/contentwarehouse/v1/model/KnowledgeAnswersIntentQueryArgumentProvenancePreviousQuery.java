/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The value is carried over from either the previous winning IntentQuery or an entity annotated by
 * QRef in a previous query. For example: U: How old is Obama. [Age(person=/m/obama)] G: Barack
 * Obama is 56 years old. U: Who is his wife. [Spouse(person=/m/obama)] The "person" argument would
 * have a provenance of PREVIOUS_QUERY. However, if a dialog publishes an attentional entity for
 * "Obama", the "person" argument can have a provenance of ATTENTIONAL_ENTITY instead. This includes
 * arguments with provenance that spans both the current and previous query.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery extends com.google.api.client.json.GenericJson {

  /**
   * The span(s) in the current query where the value comes from. This is used when the argument
   * spans both the current and previous query. Eg jfk death -> [death, when] spans both queries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingAnnotationEvalData> currentQueryEvalData;

  /**
   * The span(s) in the query where the value comes from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingAnnotationEvalData> evalData;

  /**
   * The event ID of the query where this value was pulled from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EventIdMessage eventId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotator neuralLocationAnnotator;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRole role;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String source;

  /**
   * The span(s) in the current query where the value comes from. This is used when the argument
   * spans both the current and previous query. Eg jfk death -> [death, when] spans both queries.
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingAnnotationEvalData> getCurrentQueryEvalData() {
    return currentQueryEvalData;
  }

  /**
   * The span(s) in the current query where the value comes from. This is used when the argument
   * spans both the current and previous query. Eg jfk death -> [death, when] spans both queries.
   * @param currentQueryEvalData currentQueryEvalData or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery setCurrentQueryEvalData(java.util.List<NlpSemanticParsingAnnotationEvalData> currentQueryEvalData) {
    this.currentQueryEvalData = currentQueryEvalData;
    return this;
  }

  /**
   * The span(s) in the query where the value comes from.
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingAnnotationEvalData> getEvalData() {
    return evalData;
  }

  /**
   * The span(s) in the query where the value comes from.
   * @param evalData evalData or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery setEvalData(java.util.List<NlpSemanticParsingAnnotationEvalData> evalData) {
    this.evalData = evalData;
    return this;
  }

  /**
   * The event ID of the query where this value was pulled from.
   * @return value or {@code null} for none
   */
  public EventIdMessage getEventId() {
    return eventId;
  }

  /**
   * The event ID of the query where this value was pulled from.
   * @param eventId eventId or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery setEventId(EventIdMessage eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotator getNeuralLocationAnnotator() {
    return neuralLocationAnnotator;
  }

  /**
   * @param neuralLocationAnnotator neuralLocationAnnotator or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery setNeuralLocationAnnotator(KnowledgeAnswersIntentQueryArgumentProvenanceNeuralLocationAnnotator neuralLocationAnnotator) {
    this.neuralLocationAnnotator = neuralLocationAnnotator;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRole getRole() {
    return role;
  }

  /**
   * @param role role or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery setRole(KnowledgeAnswersIntentQueryArgumentProvenancePreviousQueryRole role) {
    this.role = role;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * @param source source or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery setSource(java.lang.String source) {
    this.source = source;
    return this;
  }

  @Override
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery set(String fieldName, Object value) {
    return (KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery) super.set(fieldName, value);
  }

  @Override
  public KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery clone() {
    return (KnowledgeAnswersIntentQueryArgumentProvenancePreviousQuery) super.clone();
  }

}
