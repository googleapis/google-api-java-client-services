/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.doubleclickbidmanager;

/**
 * Service definition for DoubleClickBidManager (v1).
 *
 * <p>
 * API for viewing and managing your reports in DoubleClick Bid Manager.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/bid-manager/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link DoubleClickBidManagerRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class DoubleClickBidManager extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.29.2 of the DoubleClick Bid Manager API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "doubleclickbidmanager/v1/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch/doubleclickbidmanager/v1";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public DoubleClickBidManager(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  DoubleClickBidManager(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Lineitems collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code DoubleClickBidManager doubleclickbidmanager = new DoubleClickBidManager(...);}
   *   {@code DoubleClickBidManager.Lineitems.List request = doubleclickbidmanager.lineitems().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Lineitems lineitems() {
    return new Lineitems();
  }

  /**
   * The "lineitems" collection of methods.
   */
  public class Lineitems {

    /**
     * Retrieves line items in CSV format. TrueView line items are not supported.
     *
     * Create a request for the method "lineitems.downloadlineitems".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link Downloadlineitems#execute()} method to invoke the remote
     * operation.
     *
     * @param content the {@link com.google.api.services.doubleclickbidmanager.model.DownloadLineItemsRequest}
     * @return the request
     */
    public Downloadlineitems downloadlineitems(com.google.api.services.doubleclickbidmanager.model.DownloadLineItemsRequest content) throws java.io.IOException {
      Downloadlineitems result = new Downloadlineitems(content);
      initialize(result);
      return result;
    }

    public class Downloadlineitems extends DoubleClickBidManagerRequest<com.google.api.services.doubleclickbidmanager.model.DownloadLineItemsResponse> {

      private static final String REST_PATH = "lineitems/downloadlineitems";

      /**
       * Retrieves line items in CSV format. TrueView line items are not supported.
       *
       * Create a request for the method "lineitems.downloadlineitems".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link Downloadlineitems#execute()} method to invoke
       * the remote operation. <p> {@link Downloadlineitems#initialize(com.google.api.client.googleapis.
       * services.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
       * after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.doubleclickbidmanager.model.DownloadLineItemsRequest}
       * @since 1.13
       */
      protected Downloadlineitems(com.google.api.services.doubleclickbidmanager.model.DownloadLineItemsRequest content) {
        super(DoubleClickBidManager.this, "POST", REST_PATH, content, com.google.api.services.doubleclickbidmanager.model.DownloadLineItemsResponse.class);
      }

      @Override
      public Downloadlineitems setAlt(java.lang.String alt) {
        return (Downloadlineitems) super.setAlt(alt);
      }

      @Override
      public Downloadlineitems setFields(java.lang.String fields) {
        return (Downloadlineitems) super.setFields(fields);
      }

      @Override
      public Downloadlineitems setKey(java.lang.String key) {
        return (Downloadlineitems) super.setKey(key);
      }

      @Override
      public Downloadlineitems setOauthToken(java.lang.String oauthToken) {
        return (Downloadlineitems) super.setOauthToken(oauthToken);
      }

      @Override
      public Downloadlineitems setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Downloadlineitems) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Downloadlineitems setQuotaUser(java.lang.String quotaUser) {
        return (Downloadlineitems) super.setQuotaUser(quotaUser);
      }

      @Override
      public Downloadlineitems setUserIp(java.lang.String userIp) {
        return (Downloadlineitems) super.setUserIp(userIp);
      }

      @Override
      public Downloadlineitems set(String parameterName, Object value) {
        return (Downloadlineitems) super.set(parameterName, value);
      }
    }
    /**
     * Uploads line items in CSV format. TrueView line items are not supported.
     *
     * Create a request for the method "lineitems.uploadlineitems".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link Uploadlineitems#execute()} method to invoke the remote
     * operation.
     *
     * @param content the {@link com.google.api.services.doubleclickbidmanager.model.UploadLineItemsRequest}
     * @return the request
     */
    public Uploadlineitems uploadlineitems(com.google.api.services.doubleclickbidmanager.model.UploadLineItemsRequest content) throws java.io.IOException {
      Uploadlineitems result = new Uploadlineitems(content);
      initialize(result);
      return result;
    }

    public class Uploadlineitems extends DoubleClickBidManagerRequest<com.google.api.services.doubleclickbidmanager.model.UploadLineItemsResponse> {

      private static final String REST_PATH = "lineitems/uploadlineitems";

      /**
       * Uploads line items in CSV format. TrueView line items are not supported.
       *
       * Create a request for the method "lineitems.uploadlineitems".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link Uploadlineitems#execute()} method to invoke
       * the remote operation. <p> {@link Uploadlineitems#initialize(com.google.api.client.googleapis.se
       * rvices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
       * after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.doubleclickbidmanager.model.UploadLineItemsRequest}
       * @since 1.13
       */
      protected Uploadlineitems(com.google.api.services.doubleclickbidmanager.model.UploadLineItemsRequest content) {
        super(DoubleClickBidManager.this, "POST", REST_PATH, content, com.google.api.services.doubleclickbidmanager.model.UploadLineItemsResponse.class);
      }

      @Override
      public Uploadlineitems setAlt(java.lang.String alt) {
        return (Uploadlineitems) super.setAlt(alt);
      }

      @Override
      public Uploadlineitems setFields(java.lang.String fields) {
        return (Uploadlineitems) super.setFields(fields);
      }

      @Override
      public Uploadlineitems setKey(java.lang.String key) {
        return (Uploadlineitems) super.setKey(key);
      }

      @Override
      public Uploadlineitems setOauthToken(java.lang.String oauthToken) {
        return (Uploadlineitems) super.setOauthToken(oauthToken);
      }

      @Override
      public Uploadlineitems setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Uploadlineitems) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Uploadlineitems setQuotaUser(java.lang.String quotaUser) {
        return (Uploadlineitems) super.setQuotaUser(quotaUser);
      }

      @Override
      public Uploadlineitems setUserIp(java.lang.String userIp) {
        return (Uploadlineitems) super.setUserIp(userIp);
      }

      @Override
      public Uploadlineitems set(String parameterName, Object value) {
        return (Uploadlineitems) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Queries collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code DoubleClickBidManager doubleclickbidmanager = new DoubleClickBidManager(...);}
   *   {@code DoubleClickBidManager.Queries.List request = doubleclickbidmanager.queries().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Queries queries() {
    return new Queries();
  }

  /**
   * The "queries" collection of methods.
   */
  public class Queries {

    /**
     * Creates a query.
     *
     * Create a request for the method "queries.createquery".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link Createquery#execute()} method to invoke the remote
     * operation.
     *
     * @param content the {@link com.google.api.services.doubleclickbidmanager.model.Query}
     * @return the request
     */
    public Createquery createquery(com.google.api.services.doubleclickbidmanager.model.Query content) throws java.io.IOException {
      Createquery result = new Createquery(content);
      initialize(result);
      return result;
    }

    public class Createquery extends DoubleClickBidManagerRequest<com.google.api.services.doubleclickbidmanager.model.Query> {

      private static final String REST_PATH = "query";

      /**
       * Creates a query.
       *
       * Create a request for the method "queries.createquery".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link Createquery#execute()} method to invoke the
       * remote operation. <p> {@link
       * Createquery#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.doubleclickbidmanager.model.Query}
       * @since 1.13
       */
      protected Createquery(com.google.api.services.doubleclickbidmanager.model.Query content) {
        super(DoubleClickBidManager.this, "POST", REST_PATH, content, com.google.api.services.doubleclickbidmanager.model.Query.class);
      }

      @Override
      public Createquery setAlt(java.lang.String alt) {
        return (Createquery) super.setAlt(alt);
      }

      @Override
      public Createquery setFields(java.lang.String fields) {
        return (Createquery) super.setFields(fields);
      }

      @Override
      public Createquery setKey(java.lang.String key) {
        return (Createquery) super.setKey(key);
      }

      @Override
      public Createquery setOauthToken(java.lang.String oauthToken) {
        return (Createquery) super.setOauthToken(oauthToken);
      }

      @Override
      public Createquery setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Createquery) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Createquery setQuotaUser(java.lang.String quotaUser) {
        return (Createquery) super.setQuotaUser(quotaUser);
      }

      @Override
      public Createquery setUserIp(java.lang.String userIp) {
        return (Createquery) super.setUserIp(userIp);
      }

      @Override
      public Createquery set(String parameterName, Object value) {
        return (Createquery) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a stored query as well as the associated stored reports.
     *
     * Create a request for the method "queries.deletequery".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link Deletequery#execute()} method to invoke the remote
     * operation.
     *
     * @param queryId Query ID to delete.
     * @return the request
     */
    public Deletequery deletequery(java.lang.Long queryId) throws java.io.IOException {
      Deletequery result = new Deletequery(queryId);
      initialize(result);
      return result;
    }

    public class Deletequery extends DoubleClickBidManagerRequest<Void> {

      private static final String REST_PATH = "query/{queryId}";

      /**
       * Deletes a stored query as well as the associated stored reports.
       *
       * Create a request for the method "queries.deletequery".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link Deletequery#execute()} method to invoke the
       * remote operation. <p> {@link
       * Deletequery#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param queryId Query ID to delete.
       * @since 1.13
       */
      protected Deletequery(java.lang.Long queryId) {
        super(DoubleClickBidManager.this, "DELETE", REST_PATH, null, Void.class);
        this.queryId = com.google.api.client.util.Preconditions.checkNotNull(queryId, "Required parameter queryId must be specified.");
      }

      @Override
      public Deletequery setAlt(java.lang.String alt) {
        return (Deletequery) super.setAlt(alt);
      }

      @Override
      public Deletequery setFields(java.lang.String fields) {
        return (Deletequery) super.setFields(fields);
      }

      @Override
      public Deletequery setKey(java.lang.String key) {
        return (Deletequery) super.setKey(key);
      }

      @Override
      public Deletequery setOauthToken(java.lang.String oauthToken) {
        return (Deletequery) super.setOauthToken(oauthToken);
      }

      @Override
      public Deletequery setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Deletequery) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Deletequery setQuotaUser(java.lang.String quotaUser) {
        return (Deletequery) super.setQuotaUser(quotaUser);
      }

      @Override
      public Deletequery setUserIp(java.lang.String userIp) {
        return (Deletequery) super.setUserIp(userIp);
      }

      /** Query ID to delete. */
      @com.google.api.client.util.Key
      private java.lang.Long queryId;

      /** Query ID to delete.
       */
      public java.lang.Long getQueryId() {
        return queryId;
      }

      /** Query ID to delete. */
      public Deletequery setQueryId(java.lang.Long queryId) {
        this.queryId = queryId;
        return this;
      }

      @Override
      public Deletequery set(String parameterName, Object value) {
        return (Deletequery) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a stored query.
     *
     * Create a request for the method "queries.getquery".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link Getquery#execute()} method to invoke the remote operation.
     *
     * @param queryId Query ID to retrieve.
     * @return the request
     */
    public Getquery getquery(java.lang.Long queryId) throws java.io.IOException {
      Getquery result = new Getquery(queryId);
      initialize(result);
      return result;
    }

    public class Getquery extends DoubleClickBidManagerRequest<com.google.api.services.doubleclickbidmanager.model.Query> {

      private static final String REST_PATH = "query/{queryId}";

      /**
       * Retrieves a stored query.
       *
       * Create a request for the method "queries.getquery".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link Getquery#execute()} method to invoke the
       * remote operation. <p> {@link
       * Getquery#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param queryId Query ID to retrieve.
       * @since 1.13
       */
      protected Getquery(java.lang.Long queryId) {
        super(DoubleClickBidManager.this, "GET", REST_PATH, null, com.google.api.services.doubleclickbidmanager.model.Query.class);
        this.queryId = com.google.api.client.util.Preconditions.checkNotNull(queryId, "Required parameter queryId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Getquery setAlt(java.lang.String alt) {
        return (Getquery) super.setAlt(alt);
      }

      @Override
      public Getquery setFields(java.lang.String fields) {
        return (Getquery) super.setFields(fields);
      }

      @Override
      public Getquery setKey(java.lang.String key) {
        return (Getquery) super.setKey(key);
      }

      @Override
      public Getquery setOauthToken(java.lang.String oauthToken) {
        return (Getquery) super.setOauthToken(oauthToken);
      }

      @Override
      public Getquery setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Getquery) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Getquery setQuotaUser(java.lang.String quotaUser) {
        return (Getquery) super.setQuotaUser(quotaUser);
      }

      @Override
      public Getquery setUserIp(java.lang.String userIp) {
        return (Getquery) super.setUserIp(userIp);
      }

      /** Query ID to retrieve. */
      @com.google.api.client.util.Key
      private java.lang.Long queryId;

      /** Query ID to retrieve.
       */
      public java.lang.Long getQueryId() {
        return queryId;
      }

      /** Query ID to retrieve. */
      public Getquery setQueryId(java.lang.Long queryId) {
        this.queryId = queryId;
        return this;
      }

      @Override
      public Getquery set(String parameterName, Object value) {
        return (Getquery) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves stored queries.
     *
     * Create a request for the method "queries.listqueries".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link Listqueries#execute()} method to invoke the remote
     * operation.
     *
     * @return the request
     */
    public Listqueries listqueries() throws java.io.IOException {
      Listqueries result = new Listqueries();
      initialize(result);
      return result;
    }

    public class Listqueries extends DoubleClickBidManagerRequest<com.google.api.services.doubleclickbidmanager.model.ListQueriesResponse> {

      private static final String REST_PATH = "queries";

      /**
       * Retrieves stored queries.
       *
       * Create a request for the method "queries.listqueries".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link Listqueries#execute()} method to invoke the
       * remote operation. <p> {@link
       * Listqueries#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Listqueries() {
        super(DoubleClickBidManager.this, "GET", REST_PATH, null, com.google.api.services.doubleclickbidmanager.model.ListQueriesResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Listqueries setAlt(java.lang.String alt) {
        return (Listqueries) super.setAlt(alt);
      }

      @Override
      public Listqueries setFields(java.lang.String fields) {
        return (Listqueries) super.setFields(fields);
      }

      @Override
      public Listqueries setKey(java.lang.String key) {
        return (Listqueries) super.setKey(key);
      }

      @Override
      public Listqueries setOauthToken(java.lang.String oauthToken) {
        return (Listqueries) super.setOauthToken(oauthToken);
      }

      @Override
      public Listqueries setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Listqueries) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Listqueries setQuotaUser(java.lang.String quotaUser) {
        return (Listqueries) super.setQuotaUser(quotaUser);
      }

      @Override
      public Listqueries setUserIp(java.lang.String userIp) {
        return (Listqueries) super.setUserIp(userIp);
      }

      @Override
      public Listqueries set(String parameterName, Object value) {
        return (Listqueries) super.set(parameterName, value);
      }
    }
    /**
     * Runs a stored query to generate a report.
     *
     * Create a request for the method "queries.runquery".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link Runquery#execute()} method to invoke the remote operation.
     *
     * @param queryId Query ID to run.
     * @param content the {@link com.google.api.services.doubleclickbidmanager.model.RunQueryRequest}
     * @return the request
     */
    public Runquery runquery(java.lang.Long queryId, com.google.api.services.doubleclickbidmanager.model.RunQueryRequest content) throws java.io.IOException {
      Runquery result = new Runquery(queryId, content);
      initialize(result);
      return result;
    }

    public class Runquery extends DoubleClickBidManagerRequest<Void> {

      private static final String REST_PATH = "query/{queryId}";

      /**
       * Runs a stored query to generate a report.
       *
       * Create a request for the method "queries.runquery".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link Runquery#execute()} method to invoke the
       * remote operation. <p> {@link
       * Runquery#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param queryId Query ID to run.
       * @param content the {@link com.google.api.services.doubleclickbidmanager.model.RunQueryRequest}
       * @since 1.13
       */
      protected Runquery(java.lang.Long queryId, com.google.api.services.doubleclickbidmanager.model.RunQueryRequest content) {
        super(DoubleClickBidManager.this, "POST", REST_PATH, content, Void.class);
        this.queryId = com.google.api.client.util.Preconditions.checkNotNull(queryId, "Required parameter queryId must be specified.");
      }

      @Override
      public Runquery setAlt(java.lang.String alt) {
        return (Runquery) super.setAlt(alt);
      }

      @Override
      public Runquery setFields(java.lang.String fields) {
        return (Runquery) super.setFields(fields);
      }

      @Override
      public Runquery setKey(java.lang.String key) {
        return (Runquery) super.setKey(key);
      }

      @Override
      public Runquery setOauthToken(java.lang.String oauthToken) {
        return (Runquery) super.setOauthToken(oauthToken);
      }

      @Override
      public Runquery setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Runquery) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Runquery setQuotaUser(java.lang.String quotaUser) {
        return (Runquery) super.setQuotaUser(quotaUser);
      }

      @Override
      public Runquery setUserIp(java.lang.String userIp) {
        return (Runquery) super.setUserIp(userIp);
      }

      /** Query ID to run. */
      @com.google.api.client.util.Key
      private java.lang.Long queryId;

      /** Query ID to run.
       */
      public java.lang.Long getQueryId() {
        return queryId;
      }

      /** Query ID to run. */
      public Runquery setQueryId(java.lang.Long queryId) {
        this.queryId = queryId;
        return this;
      }

      @Override
      public Runquery set(String parameterName, Object value) {
        return (Runquery) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Reports collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code DoubleClickBidManager doubleclickbidmanager = new DoubleClickBidManager(...);}
   *   {@code DoubleClickBidManager.Reports.List request = doubleclickbidmanager.reports().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Reports reports() {
    return new Reports();
  }

  /**
   * The "reports" collection of methods.
   */
  public class Reports {

    /**
     * Retrieves stored reports.
     *
     * Create a request for the method "reports.listreports".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link Listreports#execute()} method to invoke the remote
     * operation.
     *
     * @param queryId Query ID with which the reports are associated.
     * @return the request
     */
    public Listreports listreports(java.lang.Long queryId) throws java.io.IOException {
      Listreports result = new Listreports(queryId);
      initialize(result);
      return result;
    }

    public class Listreports extends DoubleClickBidManagerRequest<com.google.api.services.doubleclickbidmanager.model.ListReportsResponse> {

      private static final String REST_PATH = "queries/{queryId}/reports";

      /**
       * Retrieves stored reports.
       *
       * Create a request for the method "reports.listreports".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link Listreports#execute()} method to invoke the
       * remote operation. <p> {@link
       * Listreports#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param queryId Query ID with which the reports are associated.
       * @since 1.13
       */
      protected Listreports(java.lang.Long queryId) {
        super(DoubleClickBidManager.this, "GET", REST_PATH, null, com.google.api.services.doubleclickbidmanager.model.ListReportsResponse.class);
        this.queryId = com.google.api.client.util.Preconditions.checkNotNull(queryId, "Required parameter queryId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Listreports setAlt(java.lang.String alt) {
        return (Listreports) super.setAlt(alt);
      }

      @Override
      public Listreports setFields(java.lang.String fields) {
        return (Listreports) super.setFields(fields);
      }

      @Override
      public Listreports setKey(java.lang.String key) {
        return (Listreports) super.setKey(key);
      }

      @Override
      public Listreports setOauthToken(java.lang.String oauthToken) {
        return (Listreports) super.setOauthToken(oauthToken);
      }

      @Override
      public Listreports setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Listreports) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Listreports setQuotaUser(java.lang.String quotaUser) {
        return (Listreports) super.setQuotaUser(quotaUser);
      }

      @Override
      public Listreports setUserIp(java.lang.String userIp) {
        return (Listreports) super.setUserIp(userIp);
      }

      /** Query ID with which the reports are associated. */
      @com.google.api.client.util.Key
      private java.lang.Long queryId;

      /** Query ID with which the reports are associated.
       */
      public java.lang.Long getQueryId() {
        return queryId;
      }

      /** Query ID with which the reports are associated. */
      public Listreports setQueryId(java.lang.Long queryId) {
        this.queryId = queryId;
        return this;
      }

      @Override
      public Listreports set(String parameterName, Object value) {
        return (Listreports) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Sdf collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code DoubleClickBidManager doubleclickbidmanager = new DoubleClickBidManager(...);}
   *   {@code DoubleClickBidManager.Sdf.List request = doubleclickbidmanager.sdf().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Sdf sdf() {
    return new Sdf();
  }

  /**
   * The "sdf" collection of methods.
   */
  public class Sdf {

    /**
     * Retrieves entities in SDF format.
     *
     * Create a request for the method "sdf.download".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link Download#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.doubleclickbidmanager.model.DownloadRequest}
     * @return the request
     */
    public Download download(com.google.api.services.doubleclickbidmanager.model.DownloadRequest content) throws java.io.IOException {
      Download result = new Download(content);
      initialize(result);
      return result;
    }

    public class Download extends DoubleClickBidManagerRequest<com.google.api.services.doubleclickbidmanager.model.DownloadResponse> {

      private static final String REST_PATH = "sdf/download";

      /**
       * Retrieves entities in SDF format.
       *
       * Create a request for the method "sdf.download".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link Download#execute()} method to invoke the
       * remote operation. <p> {@link
       * Download#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.doubleclickbidmanager.model.DownloadRequest}
       * @since 1.13
       */
      protected Download(com.google.api.services.doubleclickbidmanager.model.DownloadRequest content) {
        super(DoubleClickBidManager.this, "POST", REST_PATH, content, com.google.api.services.doubleclickbidmanager.model.DownloadResponse.class);
      }

      @Override
      public Download setAlt(java.lang.String alt) {
        return (Download) super.setAlt(alt);
      }

      @Override
      public Download setFields(java.lang.String fields) {
        return (Download) super.setFields(fields);
      }

      @Override
      public Download setKey(java.lang.String key) {
        return (Download) super.setKey(key);
      }

      @Override
      public Download setOauthToken(java.lang.String oauthToken) {
        return (Download) super.setOauthToken(oauthToken);
      }

      @Override
      public Download setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Download) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Download setQuotaUser(java.lang.String quotaUser) {
        return (Download) super.setQuotaUser(quotaUser);
      }

      @Override
      public Download setUserIp(java.lang.String userIp) {
        return (Download) super.setUserIp(userIp);
      }

      @Override
      public Download set(String parameterName, Object value) {
        return (Download) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link DoubleClickBidManager}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link DoubleClickBidManager}. */
    @Override
    public DoubleClickBidManager build() {
      return new DoubleClickBidManager(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link DoubleClickBidManagerRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setDoubleClickBidManagerRequestInitializer(
        DoubleClickBidManagerRequestInitializer doubleclickbidmanagerRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(doubleclickbidmanagerRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
