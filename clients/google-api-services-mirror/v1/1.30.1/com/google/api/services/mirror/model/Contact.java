/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.mirror.model;

/**
 * A person or group that can be used as a creator or a contact.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Mirror API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Contact extends com.google.api.client.json.GenericJson {

  /**
   * A list of voice menu commands that a contact can handle. Glass shows up to three contacts for
   * each voice menu command. If there are more than that, the three contacts with the highest
   * priority are shown for that particular command.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Command> acceptCommands;

  static {
    // hack to force ProGuard to consider Command used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Command.class);
  }

  /**
   * A list of MIME types that a contact supports. The contact will be shown to the user if any of
   * its acceptTypes matches any of the types of the attachments on the item. If no acceptTypes are
   * given, the contact will be shown for all items.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> acceptTypes;

  /**
   * The name to display for this contact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * An ID for this contact. This is generated by the application and is treated as an opaque token.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * Set of image URLs to display for a contact. Most contacts will have a single image, but a
   * "group" contact may include up to 8 image URLs and they will be resized and cropped into a
   * mosaic on the client.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> imageUrls;

  /**
   * The type of resource. This is always mirror#contact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * Primary phone number for the contact. This can be a fully-qualified number, with country
   * calling code and area code, or a local number.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String phoneNumber;

  /**
   * Priority for the contact to determine ordering in a list of contacts. Contacts with higher
   * priorities will be shown before ones with lower priorities.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long priority;

  /**
   * A list of sharing features that a contact can handle. Allowed values are: - ADD_CAPTION
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> sharingFeatures;

  /**
   * The ID of the application that created this contact. This is populated by the API
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String source;

  /**
   * Name of this contact as it should be pronounced. If this contact's name must be spoken as part
   * of a voice disambiguation menu, this name is used as the expected pronunciation. This is useful
   * for contact names with unpronounceable characters or whose display spelling is otherwise not
   * phonetic.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String speakableName;

  /**
   * The type for this contact. This is used for sorting in UIs. Allowed values are: - INDIVIDUAL -
   * Represents a single person. This is the default.  - GROUP - Represents more than a single
   * person.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * A list of voice menu commands that a contact can handle. Glass shows up to three contacts for
   * each voice menu command. If there are more than that, the three contacts with the highest
   * priority are shown for that particular command.
   * @return value or {@code null} for none
   */
  public java.util.List<Command> getAcceptCommands() {
    return acceptCommands;
  }

  /**
   * A list of voice menu commands that a contact can handle. Glass shows up to three contacts for
   * each voice menu command. If there are more than that, the three contacts with the highest
   * priority are shown for that particular command.
   * @param acceptCommands acceptCommands or {@code null} for none
   */
  public Contact setAcceptCommands(java.util.List<Command> acceptCommands) {
    this.acceptCommands = acceptCommands;
    return this;
  }

  /**
   * A list of MIME types that a contact supports. The contact will be shown to the user if any of
   * its acceptTypes matches any of the types of the attachments on the item. If no acceptTypes are
   * given, the contact will be shown for all items.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAcceptTypes() {
    return acceptTypes;
  }

  /**
   * A list of MIME types that a contact supports. The contact will be shown to the user if any of
   * its acceptTypes matches any of the types of the attachments on the item. If no acceptTypes are
   * given, the contact will be shown for all items.
   * @param acceptTypes acceptTypes or {@code null} for none
   */
  public Contact setAcceptTypes(java.util.List<java.lang.String> acceptTypes) {
    this.acceptTypes = acceptTypes;
    return this;
  }

  /**
   * The name to display for this contact.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * The name to display for this contact.
   * @param displayName displayName or {@code null} for none
   */
  public Contact setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * An ID for this contact. This is generated by the application and is treated as an opaque token.
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * An ID for this contact. This is generated by the application and is treated as an opaque token.
   * @param id id or {@code null} for none
   */
  public Contact setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * Set of image URLs to display for a contact. Most contacts will have a single image, but a
   * "group" contact may include up to 8 image URLs and they will be resized and cropped into a
   * mosaic on the client.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getImageUrls() {
    return imageUrls;
  }

  /**
   * Set of image URLs to display for a contact. Most contacts will have a single image, but a
   * "group" contact may include up to 8 image URLs and they will be resized and cropped into a
   * mosaic on the client.
   * @param imageUrls imageUrls or {@code null} for none
   */
  public Contact setImageUrls(java.util.List<java.lang.String> imageUrls) {
    this.imageUrls = imageUrls;
    return this;
  }

  /**
   * The type of resource. This is always mirror#contact.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * The type of resource. This is always mirror#contact.
   * @param kind kind or {@code null} for none
   */
  public Contact setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Primary phone number for the contact. This can be a fully-qualified number, with country
   * calling code and area code, or a local number.
   * @return value or {@code null} for none
   */
  public java.lang.String getPhoneNumber() {
    return phoneNumber;
  }

  /**
   * Primary phone number for the contact. This can be a fully-qualified number, with country
   * calling code and area code, or a local number.
   * @param phoneNumber phoneNumber or {@code null} for none
   */
  public Contact setPhoneNumber(java.lang.String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Priority for the contact to determine ordering in a list of contacts. Contacts with higher
   * priorities will be shown before ones with lower priorities.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPriority() {
    return priority;
  }

  /**
   * Priority for the contact to determine ordering in a list of contacts. Contacts with higher
   * priorities will be shown before ones with lower priorities.
   * @param priority priority or {@code null} for none
   */
  public Contact setPriority(java.lang.Long priority) {
    this.priority = priority;
    return this;
  }

  /**
   * A list of sharing features that a contact can handle. Allowed values are: - ADD_CAPTION
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSharingFeatures() {
    return sharingFeatures;
  }

  /**
   * A list of sharing features that a contact can handle. Allowed values are: - ADD_CAPTION
   * @param sharingFeatures sharingFeatures or {@code null} for none
   */
  public Contact setSharingFeatures(java.util.List<java.lang.String> sharingFeatures) {
    this.sharingFeatures = sharingFeatures;
    return this;
  }

  /**
   * The ID of the application that created this contact. This is populated by the API
   * @return value or {@code null} for none
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * The ID of the application that created this contact. This is populated by the API
   * @param source source or {@code null} for none
   */
  public Contact setSource(java.lang.String source) {
    this.source = source;
    return this;
  }

  /**
   * Name of this contact as it should be pronounced. If this contact's name must be spoken as part
   * of a voice disambiguation menu, this name is used as the expected pronunciation. This is useful
   * for contact names with unpronounceable characters or whose display spelling is otherwise not
   * phonetic.
   * @return value or {@code null} for none
   */
  public java.lang.String getSpeakableName() {
    return speakableName;
  }

  /**
   * Name of this contact as it should be pronounced. If this contact's name must be spoken as part
   * of a voice disambiguation menu, this name is used as the expected pronunciation. This is useful
   * for contact names with unpronounceable characters or whose display spelling is otherwise not
   * phonetic.
   * @param speakableName speakableName or {@code null} for none
   */
  public Contact setSpeakableName(java.lang.String speakableName) {
    this.speakableName = speakableName;
    return this;
  }

  /**
   * The type for this contact. This is used for sorting in UIs. Allowed values are: - INDIVIDUAL -
   * Represents a single person. This is the default.  - GROUP - Represents more than a single
   * person.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The type for this contact. This is used for sorting in UIs. Allowed values are: - INDIVIDUAL -
   * Represents a single person. This is the default.  - GROUP - Represents more than a single
   * person.
   * @param type type or {@code null} for none
   */
  public Contact setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public Contact set(String fieldName, Object value) {
    return (Contact) super.set(fieldName, value);
  }

  @Override
  public Contact clone() {
    return (Contact) super.clone();
  }

}
