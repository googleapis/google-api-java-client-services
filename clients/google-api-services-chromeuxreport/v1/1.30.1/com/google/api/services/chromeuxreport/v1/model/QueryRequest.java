/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.chromeuxreport.v1.model;

/**
 * Request payload sent by a physical web client. This request includes all necessary context to
 * load a particular user experience record.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Chrome UX Report API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class QueryRequest extends com.google.api.client.json.GenericJson {

  /**
   * The effective connection type is a query dimension that specifies the effective network class
   * that the record's data should belong to. This field uses the values ["offline", "slow-2G",
   * "2G", "3G", "4G"] as specified in: https://wicg.github.io/netinfo/#effective-connection-types
   * Note: If no effective connection type is specified, then a special record with aggregated data
   * over all effective connection types will be returned.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String effectiveConnectionType;

  /**
   * The form factor is a query dimension that specifies the device class that the record's data
   * should belong to. Note: If no form factor is specified, then a special record with aggregated
   * data over all form factors will be returned.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String formFactor;

  /**
   * The metrics that should be included in the response. If none are specified then any metrics
   * found will be returned. Allowed values: ["first_contentful_paint", "first_input_delay",
   * "largest_contentful_paint", "cumulative_layout_shift"]
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> metrics;

  /**
   * The url pattern "origin" refers to a url pattern that is the origin of a website. Examples:
   * "https://example.com", "https://cloud.google.com"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String origin;

  /**
   * The url pattern "url" refers to a url pattern that is any arbitrary url. Examples:
   * "https://example.com/", "https://cloud.google.com/why-google-cloud/"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * The effective connection type is a query dimension that specifies the effective network class
   * that the record's data should belong to. This field uses the values ["offline", "slow-2G",
   * "2G", "3G", "4G"] as specified in: https://wicg.github.io/netinfo/#effective-connection-types
   * Note: If no effective connection type is specified, then a special record with aggregated data
   * over all effective connection types will be returned.
   * @return value or {@code null} for none
   */
  public java.lang.String getEffectiveConnectionType() {
    return effectiveConnectionType;
  }

  /**
   * The effective connection type is a query dimension that specifies the effective network class
   * that the record's data should belong to. This field uses the values ["offline", "slow-2G",
   * "2G", "3G", "4G"] as specified in: https://wicg.github.io/netinfo/#effective-connection-types
   * Note: If no effective connection type is specified, then a special record with aggregated data
   * over all effective connection types will be returned.
   * @param effectiveConnectionType effectiveConnectionType or {@code null} for none
   */
  public QueryRequest setEffectiveConnectionType(java.lang.String effectiveConnectionType) {
    this.effectiveConnectionType = effectiveConnectionType;
    return this;
  }

  /**
   * The form factor is a query dimension that specifies the device class that the record's data
   * should belong to. Note: If no form factor is specified, then a special record with aggregated
   * data over all form factors will be returned.
   * @return value or {@code null} for none
   */
  public java.lang.String getFormFactor() {
    return formFactor;
  }

  /**
   * The form factor is a query dimension that specifies the device class that the record's data
   * should belong to. Note: If no form factor is specified, then a special record with aggregated
   * data over all form factors will be returned.
   * @param formFactor formFactor or {@code null} for none
   */
  public QueryRequest setFormFactor(java.lang.String formFactor) {
    this.formFactor = formFactor;
    return this;
  }

  /**
   * The metrics that should be included in the response. If none are specified then any metrics
   * found will be returned. Allowed values: ["first_contentful_paint", "first_input_delay",
   * "largest_contentful_paint", "cumulative_layout_shift"]
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMetrics() {
    return metrics;
  }

  /**
   * The metrics that should be included in the response. If none are specified then any metrics
   * found will be returned. Allowed values: ["first_contentful_paint", "first_input_delay",
   * "largest_contentful_paint", "cumulative_layout_shift"]
   * @param metrics metrics or {@code null} for none
   */
  public QueryRequest setMetrics(java.util.List<java.lang.String> metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * The url pattern "origin" refers to a url pattern that is the origin of a website. Examples:
   * "https://example.com", "https://cloud.google.com"
   * @return value or {@code null} for none
   */
  public java.lang.String getOrigin() {
    return origin;
  }

  /**
   * The url pattern "origin" refers to a url pattern that is the origin of a website. Examples:
   * "https://example.com", "https://cloud.google.com"
   * @param origin origin or {@code null} for none
   */
  public QueryRequest setOrigin(java.lang.String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * The url pattern "url" refers to a url pattern that is any arbitrary url. Examples:
   * "https://example.com/", "https://cloud.google.com/why-google-cloud/"
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * The url pattern "url" refers to a url pattern that is any arbitrary url. Examples:
   * "https://example.com/", "https://cloud.google.com/why-google-cloud/"
   * @param url url or {@code null} for none
   */
  public QueryRequest setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  @Override
  public QueryRequest set(String fieldName, Object value) {
    return (QueryRequest) super.set(fieldName, value);
  }

  @Override
  public QueryRequest clone() {
    return (QueryRequest) super.clone();
  }

}
