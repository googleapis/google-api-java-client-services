/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vectortile.v1.model;

/**
 * A packed representation of a 2D grid of uniformly spaced points containing elevation data. Each
 * point within the grid represents the altitude in meters above average sea level at that location
 * within the tile. Elevations provided are (generally) relative to the EGM96 geoid, however some
 * areas will be relative to NAVD88. EGM96 and NAVD88 are off by no more than 2 meters. The grid is
 * oriented north-west to south-east, as illustrated: rows[0].a[0] rows[0].a[m] +-----------------+
 * | | | N | | ^ | | | | | W <-----> E | | | | | v | | S | | | +-----------------+ rows[n].a[0]
 * rows[n].a[m] Rather than storing the altitudes directly, we store the diffs of the diffs between
 * them as integers at some requested level of precision to take advantage of integer packing. Note
 * that the data is packed in such a way that is fast to decode in Unity and that further optimizes
 * wire size.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Semantic Tile API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SecondDerivativeElevationGrid extends com.google.api.client.json.GenericJson {

  /**
   * A multiplier applied to the elements in the encoded data to extract the actual altitudes in
   * meters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float altitudeMultiplier;

  /**
   * The number of columns included in the encoded elevation data (i.e. the horizontal resolution of
   * the grid).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer columnCount;

  /**
   * A stream of elements each representing a point on the tile running across each row from left to
   * right, top to bottom. There will be precisely horizontal_resolution * vertical_resolution
   * elements in the stream. The elements are not the heights, rather the second order derivative of
   * the values one would expect in a stream of height data. Each element is a varint with the
   * following encoding: ------------------------------------------------------------------------| |
   * Head Nibble | ------------------------------------------------------------------------| | Bit 0
   * | Bit 1 | Bits 2-3 | | Terminator| Sign (1=neg) | Least significant 2 bits of absolute error |
   * ------------------------------------------------------------------------| | Tail Nibble #1 |
   * ------------------------------------------------------------------------| | Bit 0 | Bit 1-3 | |
   * Terminator| Least significant 3 bits of absolute error |
   * ------------------------------------------------------------------------| | ... | Tail Nibble
   * #n | ------------------------------------------------------------------------| | Bit 0 | Bit
   * 1-3 | | Terminator| Least significant 3 bits of absolute error |
   * ------------------------------------------------------------------------|
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String encodedData;

  /**
   * The number of rows included in the encoded elevation data (i.e. the vertical resolution of the
   * grid).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rowCount;

  /**
   * A multiplier applied to the elements in the encoded data to extract the actual altitudes in
   * meters.
   * @return value or {@code null} for none
   */
  public java.lang.Float getAltitudeMultiplier() {
    return altitudeMultiplier;
  }

  /**
   * A multiplier applied to the elements in the encoded data to extract the actual altitudes in
   * meters.
   * @param altitudeMultiplier altitudeMultiplier or {@code null} for none
   */
  public SecondDerivativeElevationGrid setAltitudeMultiplier(java.lang.Float altitudeMultiplier) {
    this.altitudeMultiplier = altitudeMultiplier;
    return this;
  }

  /**
   * The number of columns included in the encoded elevation data (i.e. the horizontal resolution of
   * the grid).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getColumnCount() {
    return columnCount;
  }

  /**
   * The number of columns included in the encoded elevation data (i.e. the horizontal resolution of
   * the grid).
   * @param columnCount columnCount or {@code null} for none
   */
  public SecondDerivativeElevationGrid setColumnCount(java.lang.Integer columnCount) {
    this.columnCount = columnCount;
    return this;
  }

  /**
   * A stream of elements each representing a point on the tile running across each row from left to
   * right, top to bottom. There will be precisely horizontal_resolution * vertical_resolution
   * elements in the stream. The elements are not the heights, rather the second order derivative of
   * the values one would expect in a stream of height data. Each element is a varint with the
   * following encoding: ------------------------------------------------------------------------| |
   * Head Nibble | ------------------------------------------------------------------------| | Bit 0
   * | Bit 1 | Bits 2-3 | | Terminator| Sign (1=neg) | Least significant 2 bits of absolute error |
   * ------------------------------------------------------------------------| | Tail Nibble #1 |
   * ------------------------------------------------------------------------| | Bit 0 | Bit 1-3 | |
   * Terminator| Least significant 3 bits of absolute error |
   * ------------------------------------------------------------------------| | ... | Tail Nibble
   * #n | ------------------------------------------------------------------------| | Bit 0 | Bit
   * 1-3 | | Terminator| Least significant 3 bits of absolute error |
   * ------------------------------------------------------------------------|
   * @see #decodeEncodedData()
   * @return value or {@code null} for none
   */
  public java.lang.String getEncodedData() {
    return encodedData;
  }

  /**
   * A stream of elements each representing a point on the tile running across each row from left to
   * right, top to bottom. There will be precisely horizontal_resolution * vertical_resolution
   * elements in the stream. The elements are not the heights, rather the second order derivative of
   * the values one would expect in a stream of height data. Each element is a varint with the
   * following encoding: ------------------------------------------------------------------------| |
   * Head Nibble | ------------------------------------------------------------------------| | Bit 0
   * | Bit 1 | Bits 2-3 | | Terminator| Sign (1=neg) | Least significant 2 bits of absolute error |
   * ------------------------------------------------------------------------| | Tail Nibble #1 |
   * ------------------------------------------------------------------------| | Bit 0 | Bit 1-3 | |
   * Terminator| Least significant 3 bits of absolute error |
   * ------------------------------------------------------------------------| | ... | Tail Nibble
   * #n | ------------------------------------------------------------------------| | Bit 0 | Bit
   * 1-3 | | Terminator| Least significant 3 bits of absolute error |
   * ------------------------------------------------------------------------|
   * @see #getEncodedData()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeEncodedData() {
    return com.google.api.client.util.Base64.decodeBase64(encodedData);
  }

  /**
   * A stream of elements each representing a point on the tile running across each row from left to
   * right, top to bottom. There will be precisely horizontal_resolution * vertical_resolution
   * elements in the stream. The elements are not the heights, rather the second order derivative of
   * the values one would expect in a stream of height data. Each element is a varint with the
   * following encoding: ------------------------------------------------------------------------| |
   * Head Nibble | ------------------------------------------------------------------------| | Bit 0
   * | Bit 1 | Bits 2-3 | | Terminator| Sign (1=neg) | Least significant 2 bits of absolute error |
   * ------------------------------------------------------------------------| | Tail Nibble #1 |
   * ------------------------------------------------------------------------| | Bit 0 | Bit 1-3 | |
   * Terminator| Least significant 3 bits of absolute error |
   * ------------------------------------------------------------------------| | ... | Tail Nibble
   * #n | ------------------------------------------------------------------------| | Bit 0 | Bit
   * 1-3 | | Terminator| Least significant 3 bits of absolute error |
   * ------------------------------------------------------------------------|
   * @see #encodeEncodedData()
   * @param encodedData encodedData or {@code null} for none
   */
  public SecondDerivativeElevationGrid setEncodedData(java.lang.String encodedData) {
    this.encodedData = encodedData;
    return this;
  }

  /**
   * A stream of elements each representing a point on the tile running across each row from left to
   * right, top to bottom. There will be precisely horizontal_resolution * vertical_resolution
   * elements in the stream. The elements are not the heights, rather the second order derivative of
   * the values one would expect in a stream of height data. Each element is a varint with the
   * following encoding: ------------------------------------------------------------------------| |
   * Head Nibble | ------------------------------------------------------------------------| | Bit 0
   * | Bit 1 | Bits 2-3 | | Terminator| Sign (1=neg) | Least significant 2 bits of absolute error |
   * ------------------------------------------------------------------------| | Tail Nibble #1 |
   * ------------------------------------------------------------------------| | Bit 0 | Bit 1-3 | |
   * Terminator| Least significant 3 bits of absolute error |
   * ------------------------------------------------------------------------| | ... | Tail Nibble
   * #n | ------------------------------------------------------------------------| | Bit 0 | Bit
   * 1-3 | | Terminator| Least significant 3 bits of absolute error |
   * ------------------------------------------------------------------------|
   * @see #setEncodedData()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public SecondDerivativeElevationGrid encodeEncodedData(byte[] encodedData) {
    this.encodedData = com.google.api.client.util.Base64.encodeBase64URLSafeString(encodedData);
    return this;
  }

  /**
   * The number of rows included in the encoded elevation data (i.e. the vertical resolution of the
   * grid).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRowCount() {
    return rowCount;
  }

  /**
   * The number of rows included in the encoded elevation data (i.e. the vertical resolution of the
   * grid).
   * @param rowCount rowCount or {@code null} for none
   */
  public SecondDerivativeElevationGrid setRowCount(java.lang.Integer rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  @Override
  public SecondDerivativeElevationGrid set(String fieldName, Object value) {
    return (SecondDerivativeElevationGrid) super.set(fieldName, value);
  }

  @Override
  public SecondDerivativeElevationGrid clone() {
    return (SecondDerivativeElevationGrid) super.clone();
  }

}
