/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.retail.v2.model;

/**
 * Boost applies to products which match a condition.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Retail API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudRetailV2SearchRequestBoostSpecConditionBoostSpec extends com.google.api.client.json.GenericJson {

  /**
   * Strength of the condition boost, which should be in [-1, 1]. Negative boost means demotion.
   * Default is 0.0. Setting to 1.0 gives the item a big promotion. However, it does not necessarily
   * mean that the boosted item will be the top result at all times, nor that other items will be
   * excluded. Results could still be shown even when none of them matches the condition. And
   * results that are significantly more relevant to the search query can still trump your heavily
   * favored but irrelevant items. Setting to -1.0 gives the item a big demotion. However, results
   * that are deeply relevant might still be shown. The item will have an upstream battle to get a
   * fairly high ranking, but it is not blocked out completely. Setting to 0.0 means no boost
   * applied. The boosting condition is ignored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float boost;

  /**
   * An expression which specifies a boost condition. The syntax and supported fields are the same
   * as a filter expression. See SearchRequest.filter for detail syntax and limitations. Examples: *
   * To boost products with product ID "product_1" or "product_2", and color "Red" or "Blue": * (id:
   * ANY("product_1", "product_2")) AND (colorFamilies: ANY("Red","Blue"))
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String condition;

  /**
   * Strength of the condition boost, which should be in [-1, 1]. Negative boost means demotion.
   * Default is 0.0. Setting to 1.0 gives the item a big promotion. However, it does not necessarily
   * mean that the boosted item will be the top result at all times, nor that other items will be
   * excluded. Results could still be shown even when none of them matches the condition. And
   * results that are significantly more relevant to the search query can still trump your heavily
   * favored but irrelevant items. Setting to -1.0 gives the item a big demotion. However, results
   * that are deeply relevant might still be shown. The item will have an upstream battle to get a
   * fairly high ranking, but it is not blocked out completely. Setting to 0.0 means no boost
   * applied. The boosting condition is ignored.
   * @return value or {@code null} for none
   */
  public java.lang.Float getBoost() {
    return boost;
  }

  /**
   * Strength of the condition boost, which should be in [-1, 1]. Negative boost means demotion.
   * Default is 0.0. Setting to 1.0 gives the item a big promotion. However, it does not necessarily
   * mean that the boosted item will be the top result at all times, nor that other items will be
   * excluded. Results could still be shown even when none of them matches the condition. And
   * results that are significantly more relevant to the search query can still trump your heavily
   * favored but irrelevant items. Setting to -1.0 gives the item a big demotion. However, results
   * that are deeply relevant might still be shown. The item will have an upstream battle to get a
   * fairly high ranking, but it is not blocked out completely. Setting to 0.0 means no boost
   * applied. The boosting condition is ignored.
   * @param boost boost or {@code null} for none
   */
  public GoogleCloudRetailV2SearchRequestBoostSpecConditionBoostSpec setBoost(java.lang.Float boost) {
    this.boost = boost;
    return this;
  }

  /**
   * An expression which specifies a boost condition. The syntax and supported fields are the same
   * as a filter expression. See SearchRequest.filter for detail syntax and limitations. Examples: *
   * To boost products with product ID "product_1" or "product_2", and color "Red" or "Blue": * (id:
   * ANY("product_1", "product_2")) AND (colorFamilies: ANY("Red","Blue"))
   * @return value or {@code null} for none
   */
  public java.lang.String getCondition() {
    return condition;
  }

  /**
   * An expression which specifies a boost condition. The syntax and supported fields are the same
   * as a filter expression. See SearchRequest.filter for detail syntax and limitations. Examples: *
   * To boost products with product ID "product_1" or "product_2", and color "Red" or "Blue": * (id:
   * ANY("product_1", "product_2")) AND (colorFamilies: ANY("Red","Blue"))
   * @param condition condition or {@code null} for none
   */
  public GoogleCloudRetailV2SearchRequestBoostSpecConditionBoostSpec setCondition(java.lang.String condition) {
    this.condition = condition;
    return this;
  }

  @Override
  public GoogleCloudRetailV2SearchRequestBoostSpecConditionBoostSpec set(String fieldName, Object value) {
    return (GoogleCloudRetailV2SearchRequestBoostSpecConditionBoostSpec) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudRetailV2SearchRequestBoostSpecConditionBoostSpec clone() {
    return (GoogleCloudRetailV2SearchRequestBoostSpecConditionBoostSpec) super.clone();
  }

}
