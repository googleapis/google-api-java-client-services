/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.saasservicemgmt.v1beta1.model;

/**
 * UnitOperation encapsulates the intent of changing/interacting with the service component
 * represented by the specific Unit. Multiple UnitOperations can be created (requested) and
 * scheduled in the future, however only one will be allowed to execute at a time (that can change
 * in the future for non-mutating operations). UnitOperations allow different actors interacting
 * with the same unit to focus only on the change they have requested. This is a base object that
 * contains the common fields in all unit operations. Next: 19
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the SaaS Runtime API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class UnitOperation extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Annotations is an unstructured key-value map stored with a resource that may be set
   * by external tools to store and retrieve arbitrary metadata. They are not queryable and should
   * be preserved when modifying objects. More info: https://kubernetes.io/docs/user-
   * guide/annotations
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> annotations;

  /**
   * Optional. When true, attempt to cancel the operation. Cancellation may fail if the operation is
   * already executing. (Optional)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean cancel;

  /**
   * Optional. Output only. A set of conditions which indicate the various conditions this resource
   * can have.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<UnitOperationCondition> conditions;

  /**
   * Output only. The timestamp when the resource was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Deprovision deprovision;

  /**
   * Optional. Output only. The engine state for on-going deployment engine operation(s). This field
   * is opaque for external usage.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String engineState;

  /**
   * Optional. Output only. UnitOperationErrorCategory describe the error category.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String errorCategory;

  /**
   * Output only. An opaque value that uniquely identifies a version or generation of a resource. It
   * can be used to confirm that the client and server agree on the ordering of a resource being
   * written.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Optional. The labels on the resource, which can be used for categorization. similar to
   * Kubernetes resource labels.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Identifier. The resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/unitOperations/{unitOperation}"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. Reference to parent resource: UnitOperation. If an operation needs to create other
   * operations as part of its workflow, each of the child operations should have this field set to
   * the parent. This can be used for tracing. (Optional)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String parentUnitOperation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Provision provision;

  /**
   * Optional. Specifies which rollout created this Unit Operation. This cannot be modified and is
   * used for filtering purposes only. If a dependent unit and unit operation are created as part of
   * another unit operation, they will use the same rolloutId.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rollout;

  /**
   * Optional. When to schedule this operation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Schedule schedule;

  /**
   * Optional. Output only. UnitOperationState describes the current state of the unit operation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. The unique identifier of the resource. UID is unique in the time and space for
   * this resource within the scope of the service. It is typically generated by the server on
   * successful creation of a resource and must not be changed. UID is used to uniquely identify
   * resources with resource name reuses. This should be a UUID4.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Required. Immutable. The Unit a given UnitOperation will act upon.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String unit;

  /**
   * Output only. The timestamp when the resource was last updated. Any change to the resource made
   * by users must refresh this value. Changes to a resource made by the service should refresh this
   * value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Upgrade upgrade;

  /**
   * Optional. Annotations is an unstructured key-value map stored with a resource that may be set
   * by external tools to store and retrieve arbitrary metadata. They are not queryable and should
   * be preserved when modifying objects. More info: https://kubernetes.io/docs/user-
   * guide/annotations
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAnnotations() {
    return annotations;
  }

  /**
   * Optional. Annotations is an unstructured key-value map stored with a resource that may be set
   * by external tools to store and retrieve arbitrary metadata. They are not queryable and should
   * be preserved when modifying objects. More info: https://kubernetes.io/docs/user-
   * guide/annotations
   * @param annotations annotations or {@code null} for none
   */
  public UnitOperation setAnnotations(java.util.Map<String, java.lang.String> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Optional. When true, attempt to cancel the operation. Cancellation may fail if the operation is
   * already executing. (Optional)
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCancel() {
    return cancel;
  }

  /**
   * Optional. When true, attempt to cancel the operation. Cancellation may fail if the operation is
   * already executing. (Optional)
   * @param cancel cancel or {@code null} for none
   */
  public UnitOperation setCancel(java.lang.Boolean cancel) {
    this.cancel = cancel;
    return this;
  }

  /**
   * Optional. Output only. A set of conditions which indicate the various conditions this resource
   * can have.
   * @return value or {@code null} for none
   */
  public java.util.List<UnitOperationCondition> getConditions() {
    return conditions;
  }

  /**
   * Optional. Output only. A set of conditions which indicate the various conditions this resource
   * can have.
   * @param conditions conditions or {@code null} for none
   */
  public UnitOperation setConditions(java.util.List<UnitOperationCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * Output only. The timestamp when the resource was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The timestamp when the resource was created.
   * @param createTime createTime or {@code null} for none
   */
  public UnitOperation setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public Deprovision getDeprovision() {
    return deprovision;
  }

  /**
   * @param deprovision deprovision or {@code null} for none
   */
  public UnitOperation setDeprovision(Deprovision deprovision) {
    this.deprovision = deprovision;
    return this;
  }

  /**
   * Optional. Output only. The engine state for on-going deployment engine operation(s). This field
   * is opaque for external usage.
   * @return value or {@code null} for none
   */
  public java.lang.String getEngineState() {
    return engineState;
  }

  /**
   * Optional. Output only. The engine state for on-going deployment engine operation(s). This field
   * is opaque for external usage.
   * @param engineState engineState or {@code null} for none
   */
  public UnitOperation setEngineState(java.lang.String engineState) {
    this.engineState = engineState;
    return this;
  }

  /**
   * Optional. Output only. UnitOperationErrorCategory describe the error category.
   * @return value or {@code null} for none
   */
  public java.lang.String getErrorCategory() {
    return errorCategory;
  }

  /**
   * Optional. Output only. UnitOperationErrorCategory describe the error category.
   * @param errorCategory errorCategory or {@code null} for none
   */
  public UnitOperation setErrorCategory(java.lang.String errorCategory) {
    this.errorCategory = errorCategory;
    return this;
  }

  /**
   * Output only. An opaque value that uniquely identifies a version or generation of a resource. It
   * can be used to confirm that the client and server agree on the ordering of a resource being
   * written.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Output only. An opaque value that uniquely identifies a version or generation of a resource. It
   * can be used to confirm that the client and server agree on the ordering of a resource being
   * written.
   * @param etag etag or {@code null} for none
   */
  public UnitOperation setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. The labels on the resource, which can be used for categorization. similar to
   * Kubernetes resource labels.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. The labels on the resource, which can be used for categorization. similar to
   * Kubernetes resource labels.
   * @param labels labels or {@code null} for none
   */
  public UnitOperation setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Identifier. The resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/unitOperations/{unitOperation}"
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/unitOperations/{unitOperation}"
   * @param name name or {@code null} for none
   */
  public UnitOperation setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Reference to parent resource: UnitOperation. If an operation needs to create other
   * operations as part of its workflow, each of the child operations should have this field set to
   * the parent. This can be used for tracing. (Optional)
   * @return value or {@code null} for none
   */
  public java.lang.String getParentUnitOperation() {
    return parentUnitOperation;
  }

  /**
   * Optional. Reference to parent resource: UnitOperation. If an operation needs to create other
   * operations as part of its workflow, each of the child operations should have this field set to
   * the parent. This can be used for tracing. (Optional)
   * @param parentUnitOperation parentUnitOperation or {@code null} for none
   */
  public UnitOperation setParentUnitOperation(java.lang.String parentUnitOperation) {
    this.parentUnitOperation = parentUnitOperation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public Provision getProvision() {
    return provision;
  }

  /**
   * @param provision provision or {@code null} for none
   */
  public UnitOperation setProvision(Provision provision) {
    this.provision = provision;
    return this;
  }

  /**
   * Optional. Specifies which rollout created this Unit Operation. This cannot be modified and is
   * used for filtering purposes only. If a dependent unit and unit operation are created as part of
   * another unit operation, they will use the same rolloutId.
   * @return value or {@code null} for none
   */
  public java.lang.String getRollout() {
    return rollout;
  }

  /**
   * Optional. Specifies which rollout created this Unit Operation. This cannot be modified and is
   * used for filtering purposes only. If a dependent unit and unit operation are created as part of
   * another unit operation, they will use the same rolloutId.
   * @param rollout rollout or {@code null} for none
   */
  public UnitOperation setRollout(java.lang.String rollout) {
    this.rollout = rollout;
    return this;
  }

  /**
   * Optional. When to schedule this operation.
   * @return value or {@code null} for none
   */
  public Schedule getSchedule() {
    return schedule;
  }

  /**
   * Optional. When to schedule this operation.
   * @param schedule schedule or {@code null} for none
   */
  public UnitOperation setSchedule(Schedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Optional. Output only. UnitOperationState describes the current state of the unit operation.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Optional. Output only. UnitOperationState describes the current state of the unit operation.
   * @param state state or {@code null} for none
   */
  public UnitOperation setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. The unique identifier of the resource. UID is unique in the time and space for
   * this resource within the scope of the service. It is typically generated by the server on
   * successful creation of a resource and must not be changed. UID is used to uniquely identify
   * resources with resource name reuses. This should be a UUID4.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. The unique identifier of the resource. UID is unique in the time and space for
   * this resource within the scope of the service. It is typically generated by the server on
   * successful creation of a resource and must not be changed. UID is used to uniquely identify
   * resources with resource name reuses. This should be a UUID4.
   * @param uid uid or {@code null} for none
   */
  public UnitOperation setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Required. Immutable. The Unit a given UnitOperation will act upon.
   * @return value or {@code null} for none
   */
  public java.lang.String getUnit() {
    return unit;
  }

  /**
   * Required. Immutable. The Unit a given UnitOperation will act upon.
   * @param unit unit or {@code null} for none
   */
  public UnitOperation setUnit(java.lang.String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Output only. The timestamp when the resource was last updated. Any change to the resource made
   * by users must refresh this value. Changes to a resource made by the service should refresh this
   * value.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The timestamp when the resource was last updated. Any change to the resource made
   * by users must refresh this value. Changes to a resource made by the service should refresh this
   * value.
   * @param updateTime updateTime or {@code null} for none
   */
  public UnitOperation setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public Upgrade getUpgrade() {
    return upgrade;
  }

  /**
   * @param upgrade upgrade or {@code null} for none
   */
  public UnitOperation setUpgrade(Upgrade upgrade) {
    this.upgrade = upgrade;
    return this;
  }

  @Override
  public UnitOperation set(String fieldName, Object value) {
    return (UnitOperation) super.set(fieldName, value);
  }

  @Override
  public UnitOperation clone() {
    return (UnitOperation) super.clone();
  }

}
