/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.aiplatform.v1.model;

/**
 * Configuration for ConvexAutomatedStoppingSpec. When there are enough completed trials (configured
 * by min_measurement_count), for pending trials with enough measurements and steps, the policy
 * first computes an overestimate of the objective value at max_num_steps according to the slope of
 * the incomplete objective value curve. No prediction can be made if the curve is completely flat.
 * If the overestimation is worse than the best objective value of the completed trials, this
 * pending trial will be early-stopped, but a last measurement will be added to the pending trial
 * with max_num_steps and predicted objective value from the autoregression model.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Vertex AI API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec extends com.google.api.client.json.GenericJson {

  /**
   * The hyper-parameter name used in the tuning job that stands for learning rate. Leave it blank
   * if learning rate is not in a parameter in tuning. The learning_rate is used to estimate the
   * objective value of the ongoing trial.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String learningRateParameterName;

  /**
   * Steps used in predicting the final objective for early stopped trials. In general, it's set to
   * be the same as the defined steps in training / tuning. If not defined, it will learn it from
   * the completed trials. When use_steps is false, this field is set to the maximum elapsed
   * seconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long maxStepCount;

  /**
   * The minimal number of measurements in a Trial. Early-stopping checks will not trigger if less
   * than min_measurement_count+1 completed trials or pending trials with less than
   * min_measurement_count measurements. If not defined, the default value is 5.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long minMeasurementCount;

  /**
   * Minimum number of steps for a trial to complete. Trials which do not have a measurement with
   * step_count > min_step_count won't be considered for early stopping. It's ok to set it to 0, and
   * a trial can be early stopped at any stage. By default, min_step_count is set to be one-tenth of
   * the max_step_count. When use_elapsed_duration is true, this field is set to the minimum elapsed
   * seconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long minStepCount;

  /**
   * ConvexAutomatedStoppingSpec by default only updates the trials that needs to be early stopped
   * using a newly trained auto-regressive model. When this flag is set to True, all stopped trials
   * from the beginning are potentially updated in terms of their `final_measurement`. Also, note
   * that the training logic of autoregressive models is different in this case. Enabling this
   * option has shown better results and this may be the default option in the future.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean updateAllStoppedTrials;

  /**
   * This bool determines whether or not the rule is applied based on elapsed_secs or steps. If
   * use_elapsed_duration==false, the early stopping decision is made according to the predicted
   * objective values according to the target steps. If use_elapsed_duration==true, elapsed_secs is
   * used instead of steps. Also, in this case, the parameters max_num_steps and min_num_steps are
   * overloaded to contain max_elapsed_seconds and min_elapsed_seconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useElapsedDuration;

  /**
   * The hyper-parameter name used in the tuning job that stands for learning rate. Leave it blank
   * if learning rate is not in a parameter in tuning. The learning_rate is used to estimate the
   * objective value of the ongoing trial.
   * @return value or {@code null} for none
   */
  public java.lang.String getLearningRateParameterName() {
    return learningRateParameterName;
  }

  /**
   * The hyper-parameter name used in the tuning job that stands for learning rate. Leave it blank
   * if learning rate is not in a parameter in tuning. The learning_rate is used to estimate the
   * objective value of the ongoing trial.
   * @param learningRateParameterName learningRateParameterName or {@code null} for none
   */
  public GoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec setLearningRateParameterName(java.lang.String learningRateParameterName) {
    this.learningRateParameterName = learningRateParameterName;
    return this;
  }

  /**
   * Steps used in predicting the final objective for early stopped trials. In general, it's set to
   * be the same as the defined steps in training / tuning. If not defined, it will learn it from
   * the completed trials. When use_steps is false, this field is set to the maximum elapsed
   * seconds.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMaxStepCount() {
    return maxStepCount;
  }

  /**
   * Steps used in predicting the final objective for early stopped trials. In general, it's set to
   * be the same as the defined steps in training / tuning. If not defined, it will learn it from
   * the completed trials. When use_steps is false, this field is set to the maximum elapsed
   * seconds.
   * @param maxStepCount maxStepCount or {@code null} for none
   */
  public GoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec setMaxStepCount(java.lang.Long maxStepCount) {
    this.maxStepCount = maxStepCount;
    return this;
  }

  /**
   * The minimal number of measurements in a Trial. Early-stopping checks will not trigger if less
   * than min_measurement_count+1 completed trials or pending trials with less than
   * min_measurement_count measurements. If not defined, the default value is 5.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMinMeasurementCount() {
    return minMeasurementCount;
  }

  /**
   * The minimal number of measurements in a Trial. Early-stopping checks will not trigger if less
   * than min_measurement_count+1 completed trials or pending trials with less than
   * min_measurement_count measurements. If not defined, the default value is 5.
   * @param minMeasurementCount minMeasurementCount or {@code null} for none
   */
  public GoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec setMinMeasurementCount(java.lang.Long minMeasurementCount) {
    this.minMeasurementCount = minMeasurementCount;
    return this;
  }

  /**
   * Minimum number of steps for a trial to complete. Trials which do not have a measurement with
   * step_count > min_step_count won't be considered for early stopping. It's ok to set it to 0, and
   * a trial can be early stopped at any stage. By default, min_step_count is set to be one-tenth of
   * the max_step_count. When use_elapsed_duration is true, this field is set to the minimum elapsed
   * seconds.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMinStepCount() {
    return minStepCount;
  }

  /**
   * Minimum number of steps for a trial to complete. Trials which do not have a measurement with
   * step_count > min_step_count won't be considered for early stopping. It's ok to set it to 0, and
   * a trial can be early stopped at any stage. By default, min_step_count is set to be one-tenth of
   * the max_step_count. When use_elapsed_duration is true, this field is set to the minimum elapsed
   * seconds.
   * @param minStepCount minStepCount or {@code null} for none
   */
  public GoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec setMinStepCount(java.lang.Long minStepCount) {
    this.minStepCount = minStepCount;
    return this;
  }

  /**
   * ConvexAutomatedStoppingSpec by default only updates the trials that needs to be early stopped
   * using a newly trained auto-regressive model. When this flag is set to True, all stopped trials
   * from the beginning are potentially updated in terms of their `final_measurement`. Also, note
   * that the training logic of autoregressive models is different in this case. Enabling this
   * option has shown better results and this may be the default option in the future.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUpdateAllStoppedTrials() {
    return updateAllStoppedTrials;
  }

  /**
   * ConvexAutomatedStoppingSpec by default only updates the trials that needs to be early stopped
   * using a newly trained auto-regressive model. When this flag is set to True, all stopped trials
   * from the beginning are potentially updated in terms of their `final_measurement`. Also, note
   * that the training logic of autoregressive models is different in this case. Enabling this
   * option has shown better results and this may be the default option in the future.
   * @param updateAllStoppedTrials updateAllStoppedTrials or {@code null} for none
   */
  public GoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec setUpdateAllStoppedTrials(java.lang.Boolean updateAllStoppedTrials) {
    this.updateAllStoppedTrials = updateAllStoppedTrials;
    return this;
  }

  /**
   * This bool determines whether or not the rule is applied based on elapsed_secs or steps. If
   * use_elapsed_duration==false, the early stopping decision is made according to the predicted
   * objective values according to the target steps. If use_elapsed_duration==true, elapsed_secs is
   * used instead of steps. Also, in this case, the parameters max_num_steps and min_num_steps are
   * overloaded to contain max_elapsed_seconds and min_elapsed_seconds.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseElapsedDuration() {
    return useElapsedDuration;
  }

  /**
   * This bool determines whether or not the rule is applied based on elapsed_secs or steps. If
   * use_elapsed_duration==false, the early stopping decision is made according to the predicted
   * objective values according to the target steps. If use_elapsed_duration==true, elapsed_secs is
   * used instead of steps. Also, in this case, the parameters max_num_steps and min_num_steps are
   * overloaded to contain max_elapsed_seconds and min_elapsed_seconds.
   * @param useElapsedDuration useElapsedDuration or {@code null} for none
   */
  public GoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec setUseElapsedDuration(java.lang.Boolean useElapsedDuration) {
    this.useElapsedDuration = useElapsedDuration;
    return this;
  }

  @Override
  public GoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec set(String fieldName, Object value) {
    return (GoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec clone() {
    return (GoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec) super.clone();
  }

}
