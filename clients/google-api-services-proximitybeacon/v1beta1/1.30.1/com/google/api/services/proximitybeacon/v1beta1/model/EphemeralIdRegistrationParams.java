/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.proximitybeacon.v1beta1.model;

/**
 * Information a client needs to provision and register beacons that broadcast Eddystone-EID format
 * beacon IDs, using Elliptic curve Diffie-Hellman key exchange. See [the Eddystone
 * specification](https://github.com/google/eddystone/tree/master/eddystone-eid) at GitHub.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Proximity Beacon API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class EphemeralIdRegistrationParams extends com.google.api.client.json.GenericJson {

  /**
   * Indicates the maximum rotation period supported by the service. See
   * EddystoneEidRegistration.rotation_period_exponent
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long maxRotationPeriodExponent;

  /**
   * Indicates the minimum rotation period supported by the service. See
   * EddystoneEidRegistration.rotation_period_exponent
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long minRotationPeriodExponent;

  /**
   * The beacon service's public key for use by a beacon to derive its Identity Key using Elliptic
   * Curve Diffie-Hellman key exchange.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceEcdhPublicKey;

  /**
   * Indicates the maximum rotation period supported by the service. See
   * EddystoneEidRegistration.rotation_period_exponent
   * @return value or {@code null} for none
   */
  public java.lang.Long getMaxRotationPeriodExponent() {
    return maxRotationPeriodExponent;
  }

  /**
   * Indicates the maximum rotation period supported by the service. See
   * EddystoneEidRegistration.rotation_period_exponent
   * @param maxRotationPeriodExponent maxRotationPeriodExponent or {@code null} for none
   */
  public EphemeralIdRegistrationParams setMaxRotationPeriodExponent(java.lang.Long maxRotationPeriodExponent) {
    this.maxRotationPeriodExponent = maxRotationPeriodExponent;
    return this;
  }

  /**
   * Indicates the minimum rotation period supported by the service. See
   * EddystoneEidRegistration.rotation_period_exponent
   * @return value or {@code null} for none
   */
  public java.lang.Long getMinRotationPeriodExponent() {
    return minRotationPeriodExponent;
  }

  /**
   * Indicates the minimum rotation period supported by the service. See
   * EddystoneEidRegistration.rotation_period_exponent
   * @param minRotationPeriodExponent minRotationPeriodExponent or {@code null} for none
   */
  public EphemeralIdRegistrationParams setMinRotationPeriodExponent(java.lang.Long minRotationPeriodExponent) {
    this.minRotationPeriodExponent = minRotationPeriodExponent;
    return this;
  }

  /**
   * The beacon service's public key for use by a beacon to derive its Identity Key using Elliptic
   * Curve Diffie-Hellman key exchange.
   * @see #decodeServiceEcdhPublicKey()
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceEcdhPublicKey() {
    return serviceEcdhPublicKey;
  }

  /**
   * The beacon service's public key for use by a beacon to derive its Identity Key using Elliptic
   * Curve Diffie-Hellman key exchange.
   * @see #getServiceEcdhPublicKey()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeServiceEcdhPublicKey() {
    return com.google.api.client.util.Base64.decodeBase64(serviceEcdhPublicKey);
  }

  /**
   * The beacon service's public key for use by a beacon to derive its Identity Key using Elliptic
   * Curve Diffie-Hellman key exchange.
   * @see #encodeServiceEcdhPublicKey()
   * @param serviceEcdhPublicKey serviceEcdhPublicKey or {@code null} for none
   */
  public EphemeralIdRegistrationParams setServiceEcdhPublicKey(java.lang.String serviceEcdhPublicKey) {
    this.serviceEcdhPublicKey = serviceEcdhPublicKey;
    return this;
  }

  /**
   * The beacon service's public key for use by a beacon to derive its Identity Key using Elliptic
   * Curve Diffie-Hellman key exchange.
   * @see #setServiceEcdhPublicKey()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public EphemeralIdRegistrationParams encodeServiceEcdhPublicKey(byte[] serviceEcdhPublicKey) {
    this.serviceEcdhPublicKey = com.google.api.client.util.Base64.encodeBase64URLSafeString(serviceEcdhPublicKey);
    return this;
  }

  @Override
  public EphemeralIdRegistrationParams set(String fieldName, Object value) {
    return (EphemeralIdRegistrationParams) super.set(fieldName, value);
  }

  @Override
  public EphemeralIdRegistrationParams clone() {
    return (EphemeralIdRegistrationParams) super.clone();
  }

}
