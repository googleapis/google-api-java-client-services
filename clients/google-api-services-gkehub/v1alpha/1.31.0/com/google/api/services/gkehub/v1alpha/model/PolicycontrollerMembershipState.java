/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.gkehub.v1alpha.model;

/**
 * **Policy Controller**: State for a single cluster.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the GKE Hub API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PolicycontrollerMembershipState extends com.google.api.client.json.GenericJson {

  /**
   * The user-defined name for the cluster used by ClusterSelectors to group clusters together. This
   * should match Membership's membership_name, unless the user installed PC on the cluster manually
   * prior to enabling the PC hub feature. Unique within a Policy Controller installation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clusterName;

  /**
   * Membership configuration in the cluster. This represents the actual state in the cluster, while
   * the MembershipSpec in the FeatureSpec represents the intended state
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PolicycontrollerMembershipSpec membershipSpec;

  /**
   * Policy Controller state observed by the Policy Controller Hub
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PolicycontrollerPolicyControllerHubState policyControllerHubState;

  /**
   * The lifecycle state Policy Controller is in.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * The user-defined name for the cluster used by ClusterSelectors to group clusters together. This
   * should match Membership's membership_name, unless the user installed PC on the cluster manually
   * prior to enabling the PC hub feature. Unique within a Policy Controller installation.
   * @return value or {@code null} for none
   */
  public java.lang.String getClusterName() {
    return clusterName;
  }

  /**
   * The user-defined name for the cluster used by ClusterSelectors to group clusters together. This
   * should match Membership's membership_name, unless the user installed PC on the cluster manually
   * prior to enabling the PC hub feature. Unique within a Policy Controller installation.
   * @param clusterName clusterName or {@code null} for none
   */
  public PolicycontrollerMembershipState setClusterName(java.lang.String clusterName) {
    this.clusterName = clusterName;
    return this;
  }

  /**
   * Membership configuration in the cluster. This represents the actual state in the cluster, while
   * the MembershipSpec in the FeatureSpec represents the intended state
   * @return value or {@code null} for none
   */
  public PolicycontrollerMembershipSpec getMembershipSpec() {
    return membershipSpec;
  }

  /**
   * Membership configuration in the cluster. This represents the actual state in the cluster, while
   * the MembershipSpec in the FeatureSpec represents the intended state
   * @param membershipSpec membershipSpec or {@code null} for none
   */
  public PolicycontrollerMembershipState setMembershipSpec(PolicycontrollerMembershipSpec membershipSpec) {
    this.membershipSpec = membershipSpec;
    return this;
  }

  /**
   * Policy Controller state observed by the Policy Controller Hub
   * @return value or {@code null} for none
   */
  public PolicycontrollerPolicyControllerHubState getPolicyControllerHubState() {
    return policyControllerHubState;
  }

  /**
   * Policy Controller state observed by the Policy Controller Hub
   * @param policyControllerHubState policyControllerHubState or {@code null} for none
   */
  public PolicycontrollerMembershipState setPolicyControllerHubState(PolicycontrollerPolicyControllerHubState policyControllerHubState) {
    this.policyControllerHubState = policyControllerHubState;
    return this;
  }

  /**
   * The lifecycle state Policy Controller is in.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * The lifecycle state Policy Controller is in.
   * @param state state or {@code null} for none
   */
  public PolicycontrollerMembershipState setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  @Override
  public PolicycontrollerMembershipState set(String fieldName, Object value) {
    return (PolicycontrollerMembershipState) super.set(fieldName, value);
  }

  @Override
  public PolicycontrollerMembershipState clone() {
    return (PolicycontrollerMembershipState) super.clone();
  }

}
