/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.reports;

/**
 * Service definition for Reports (reports_v1).
 *
 * <p>
 * Fetches reports for the administrators of G Suite customers about the usage, collaboration, security, and risk for their users.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/admin-sdk/reports/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ReportsRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Reports extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.29.2 of the Admin Reports API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "admin/reports/v1/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch/admin/reports_v1";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Reports(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Reports(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Activities collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Reports admin = new Reports(...);}
   *   {@code Reports.Activities.List request = admin.activities().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Activities activities() {
    return new Activities();
  }

  /**
   * The "activities" collection of methods.
   */
  public class Activities {

    /**
     * Retrieves a list of activities for a specific customer and application.
     *
     * Create a request for the method "activities.list".
     *
     * This request holds the parameters needed by the admin server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param userKey Represents the profile id or the user email for which the data should be filtered. When 'all' is
     *        specified as the userKey, it returns usageReports for all users.
     * @param applicationName Application name for which the events are to be retrieved.
     * @return the request
     */
    public List list(java.lang.String userKey, java.lang.String applicationName) throws java.io.IOException {
      List result = new List(userKey, applicationName);
      initialize(result);
      return result;
    }

    public class List extends ReportsRequest<com.google.api.services.reports.model.Activities> {

      private static final String REST_PATH = "activity/users/{userKey}/applications/{applicationName}";

      private final java.util.regex.Pattern APPLICATION_NAME_PATTERN =
          java.util.regex.Pattern.compile("(admin)|(calendar)|(drive)|(login)|(mobile)|(token)|(groups)|(saml)|(chat)|(gplus)|(rules)|(jamboard)|(meet)|(user_accounts)|(access_transparency)|(groups_enterprise)");

      private final java.util.regex.Pattern CUSTOMER_ID_PATTERN =
          java.util.regex.Pattern.compile("C.+");

      private final java.util.regex.Pattern END_TIME_PATTERN =
          java.util.regex.Pattern.compile("(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)(?:\\.(\\d+))?(?:(Z)|([-+])(\\d\\d):(\\d\\d))");

      private final java.util.regex.Pattern FILTERS_PATTERN =
          java.util.regex.Pattern.compile("(.+[<,<=,==,>=,>,<>].+,)*(.+[<,<=,==,>=,>,<>].+)");

      private final java.util.regex.Pattern ORG_UNIT_ID_PATTERN =
          java.util.regex.Pattern.compile("(id:[a-z0-9]+)");

      private final java.util.regex.Pattern START_TIME_PATTERN =
          java.util.regex.Pattern.compile("(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)(?:\\.(\\d+))?(?:(Z)|([-+])(\\d\\d):(\\d\\d))");

      /**
       * Retrieves a list of activities for a specific customer and application.
       *
       * Create a request for the method "activities.list".
       *
       * This request holds the parameters needed by the the admin server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userKey Represents the profile id or the user email for which the data should be filtered. When 'all' is
     *        specified as the userKey, it returns usageReports for all users.
       * @param applicationName Application name for which the events are to be retrieved.
       * @since 1.13
       */
      protected List(java.lang.String userKey, java.lang.String applicationName) {
        super(Reports.this, "GET", REST_PATH, null, com.google.api.services.reports.model.Activities.class);
        this.userKey = com.google.api.client.util.Preconditions.checkNotNull(userKey, "Required parameter userKey must be specified.");
        this.applicationName = com.google.api.client.util.Preconditions.checkNotNull(applicationName, "Required parameter applicationName must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(APPLICATION_NAME_PATTERN.matcher(applicationName).matches(),
              "Parameter applicationName must conform to the pattern " +
              "(admin)|(calendar)|(drive)|(login)|(mobile)|(token)|(groups)|(saml)|(chat)|(gplus)|(rules)|(jamboard)|(meet)|(user_accounts)|(access_transparency)|(groups_enterprise)");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /**
       * Represents the profile id or the user email for which the data should be filtered. When
       * 'all' is specified as the userKey, it returns usageReports for all users.
       */
      @com.google.api.client.util.Key
      private java.lang.String userKey;

      /** Represents the profile id or the user email for which the data should be filtered. When 'all' is
     specified as the userKey, it returns usageReports for all users.
       */
      public java.lang.String getUserKey() {
        return userKey;
      }

      /**
       * Represents the profile id or the user email for which the data should be filtered. When
       * 'all' is specified as the userKey, it returns usageReports for all users.
       */
      public List setUserKey(java.lang.String userKey) {
        this.userKey = userKey;
        return this;
      }

      /** Application name for which the events are to be retrieved. */
      @com.google.api.client.util.Key
      private java.lang.String applicationName;

      /** Application name for which the events are to be retrieved.
       */
      public java.lang.String getApplicationName() {
        return applicationName;
      }

      /** Application name for which the events are to be retrieved. */
      public List setApplicationName(java.lang.String applicationName) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(APPLICATION_NAME_PATTERN.matcher(applicationName).matches(),
              "Parameter applicationName must conform to the pattern " +
              "(admin)|(calendar)|(drive)|(login)|(mobile)|(token)|(groups)|(saml)|(chat)|(gplus)|(rules)|(jamboard)|(meet)|(user_accounts)|(access_transparency)|(groups_enterprise)");
        }
        this.applicationName = applicationName;
        return this;
      }

      /**
       * IP Address of host where the event was performed. Supports both IPv4 and IPv6 addresses.
       */
      @com.google.api.client.util.Key
      private java.lang.String actorIpAddress;

      /** IP Address of host where the event was performed. Supports both IPv4 and IPv6 addresses.
       */
      public java.lang.String getActorIpAddress() {
        return actorIpAddress;
      }

      /**
       * IP Address of host where the event was performed. Supports both IPv4 and IPv6 addresses.
       */
      public List setActorIpAddress(java.lang.String actorIpAddress) {
        this.actorIpAddress = actorIpAddress;
        return this;
      }

      /** Represents the customer for which the data is to be fetched. */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Represents the customer for which the data is to be fetched.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /** Represents the customer for which the data is to be fetched. */
      public List setCustomerId(java.lang.String customerId) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(CUSTOMER_ID_PATTERN.matcher(customerId).matches(),
              "Parameter customerId must conform to the pattern " +
              "C.+");
        }
        this.customerId = customerId;
        return this;
      }

      /** Return events which occurred at or before this time. */
      @com.google.api.client.util.Key
      private java.lang.String endTime;

      /** Return events which occurred at or before this time.
       */
      public java.lang.String getEndTime() {
        return endTime;
      }

      /** Return events which occurred at or before this time. */
      public List setEndTime(java.lang.String endTime) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(END_TIME_PATTERN.matcher(endTime).matches(),
              "Parameter endTime must conform to the pattern " +
              "(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)(?:\\.(\\d+))?(?:(Z)|([-+])(\\d\\d):(\\d\\d))");
        }
        this.endTime = endTime;
        return this;
      }

      /** Name of the event being queried. */
      @com.google.api.client.util.Key
      private java.lang.String eventName;

      /** Name of the event being queried.
       */
      public java.lang.String getEventName() {
        return eventName;
      }

      /** Name of the event being queried. */
      public List setEventName(java.lang.String eventName) {
        this.eventName = eventName;
        return this;
      }

      /**
       * Event parameters in the form [parameter1 name][operator][parameter1 value],[parameter2
       * name][operator][parameter2 value],...
       */
      @com.google.api.client.util.Key
      private java.lang.String filters;

      /** Event parameters in the form [parameter1 name][operator][parameter1 value],[parameter2
     name][operator][parameter2 value],...
       */
      public java.lang.String getFilters() {
        return filters;
      }

      /**
       * Event parameters in the form [parameter1 name][operator][parameter1 value],[parameter2
       * name][operator][parameter2 value],...
       */
      public List setFilters(java.lang.String filters) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(FILTERS_PATTERN.matcher(filters).matches(),
              "Parameter filters must conform to the pattern " +
              "(.+[<,<=,==,>=,>,<>].+,)*(.+[<,<=,==,>=,>,<>].+)");
        }
        this.filters = filters;
        return this;
      }

      /** Number of activity records to be shown in each page. */
      @com.google.api.client.util.Key
      private java.lang.Integer maxResults;

      /** Number of activity records to be shown in each page.

     [minimum: 1] [maximum: 1000]
       */
      public java.lang.Integer getMaxResults() {
        return maxResults;
      }

      /** Number of activity records to be shown in each page. */
      public List setMaxResults(java.lang.Integer maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * the organizational unit's(OU) ID to filter activities from users belonging to a specific OU
       * or one of its sub-OU(s)
       */
      @com.google.api.client.util.Key
      private java.lang.String orgUnitID;

      /** the organizational unit's(OU) ID to filter activities from users belonging to a specific OU or one
     of its sub-OU(s)
       */
      public java.lang.String getOrgUnitID() {
        return orgUnitID;
      }

      /**
       * the organizational unit's(OU) ID to filter activities from users belonging to a specific OU
       * or one of its sub-OU(s)
       */
      public List setOrgUnitID(java.lang.String orgUnitID) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(ORG_UNIT_ID_PATTERN.matcher(orgUnitID).matches(),
              "Parameter orgUnitID must conform to the pattern " +
              "(id:[a-z0-9]+)");
        }
        this.orgUnitID = orgUnitID;
        return this;
      }

      /** Token to specify next page. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Token to specify next page.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Token to specify next page. */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /** Return events which occurred at or after this time. */
      @com.google.api.client.util.Key
      private java.lang.String startTime;

      /** Return events which occurred at or after this time.
       */
      public java.lang.String getStartTime() {
        return startTime;
      }

      /** Return events which occurred at or after this time. */
      public List setStartTime(java.lang.String startTime) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(START_TIME_PATTERN.matcher(startTime).matches(),
              "Parameter startTime must conform to the pattern " +
              "(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)(?:\\.(\\d+))?(?:(Z)|([-+])(\\d\\d):(\\d\\d))");
        }
        this.startTime = startTime;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Push changes to activities
     *
     * Create a request for the method "activities.watch".
     *
     * This request holds the parameters needed by the admin server.  After setting any optional
     * parameters, call the {@link Watch#execute()} method to invoke the remote operation.
     *
     * @param userKey Represents the profile id or the user email for which the data should be filtered. When 'all' is
     *        specified as the userKey, it returns usageReports for all users.
     * @param applicationName Application name for which the events are to be retrieved.
     * @param content the {@link com.google.api.services.reports.model.Channel}
     * @return the request
     */
    public Watch watch(java.lang.String userKey, java.lang.String applicationName, com.google.api.services.reports.model.Channel content) throws java.io.IOException {
      Watch result = new Watch(userKey, applicationName, content);
      initialize(result);
      return result;
    }

    public class Watch extends ReportsRequest<com.google.api.services.reports.model.Channel> {

      private static final String REST_PATH = "activity/users/{userKey}/applications/{applicationName}/watch";

      private final java.util.regex.Pattern APPLICATION_NAME_PATTERN =
          java.util.regex.Pattern.compile("(admin)|(calendar)|(drive)|(login)|(mobile)|(token)|(groups)|(saml)|(chat)|(gplus)|(rules)|(jamboard)|(meet)|(user_accounts)|(access_transparency)|(groups_enterprise)");

      private final java.util.regex.Pattern CUSTOMER_ID_PATTERN =
          java.util.regex.Pattern.compile("C.+");

      private final java.util.regex.Pattern END_TIME_PATTERN =
          java.util.regex.Pattern.compile("(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)(?:\\.(\\d+))?(?:(Z)|([-+])(\\d\\d):(\\d\\d))");

      private final java.util.regex.Pattern FILTERS_PATTERN =
          java.util.regex.Pattern.compile("(.+[<,<=,==,>=,>,<>].+,)*(.+[<,<=,==,>=,>,<>].+)");

      private final java.util.regex.Pattern ORG_UNIT_ID_PATTERN =
          java.util.regex.Pattern.compile("(id:[a-z0-9]+)");

      private final java.util.regex.Pattern START_TIME_PATTERN =
          java.util.regex.Pattern.compile("(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)(?:\\.(\\d+))?(?:(Z)|([-+])(\\d\\d):(\\d\\d))");

      /**
       * Push changes to activities
       *
       * Create a request for the method "activities.watch".
       *
       * This request holds the parameters needed by the the admin server.  After setting any optional
       * parameters, call the {@link Watch#execute()} method to invoke the remote operation. <p> {@link
       * Watch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userKey Represents the profile id or the user email for which the data should be filtered. When 'all' is
     *        specified as the userKey, it returns usageReports for all users.
       * @param applicationName Application name for which the events are to be retrieved.
       * @param content the {@link com.google.api.services.reports.model.Channel}
       * @since 1.13
       */
      protected Watch(java.lang.String userKey, java.lang.String applicationName, com.google.api.services.reports.model.Channel content) {
        super(Reports.this, "POST", REST_PATH, content, com.google.api.services.reports.model.Channel.class);
        this.userKey = com.google.api.client.util.Preconditions.checkNotNull(userKey, "Required parameter userKey must be specified.");
        this.applicationName = com.google.api.client.util.Preconditions.checkNotNull(applicationName, "Required parameter applicationName must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(APPLICATION_NAME_PATTERN.matcher(applicationName).matches(),
              "Parameter applicationName must conform to the pattern " +
              "(admin)|(calendar)|(drive)|(login)|(mobile)|(token)|(groups)|(saml)|(chat)|(gplus)|(rules)|(jamboard)|(meet)|(user_accounts)|(access_transparency)|(groups_enterprise)");
        }
      }

      @Override
      public Watch setAlt(java.lang.String alt) {
        return (Watch) super.setAlt(alt);
      }

      @Override
      public Watch setFields(java.lang.String fields) {
        return (Watch) super.setFields(fields);
      }

      @Override
      public Watch setKey(java.lang.String key) {
        return (Watch) super.setKey(key);
      }

      @Override
      public Watch setOauthToken(java.lang.String oauthToken) {
        return (Watch) super.setOauthToken(oauthToken);
      }

      @Override
      public Watch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Watch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Watch setQuotaUser(java.lang.String quotaUser) {
        return (Watch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Watch setUserIp(java.lang.String userIp) {
        return (Watch) super.setUserIp(userIp);
      }

      /**
       * Represents the profile id or the user email for which the data should be filtered. When
       * 'all' is specified as the userKey, it returns usageReports for all users.
       */
      @com.google.api.client.util.Key
      private java.lang.String userKey;

      /** Represents the profile id or the user email for which the data should be filtered. When 'all' is
     specified as the userKey, it returns usageReports for all users.
       */
      public java.lang.String getUserKey() {
        return userKey;
      }

      /**
       * Represents the profile id or the user email for which the data should be filtered. When
       * 'all' is specified as the userKey, it returns usageReports for all users.
       */
      public Watch setUserKey(java.lang.String userKey) {
        this.userKey = userKey;
        return this;
      }

      /** Application name for which the events are to be retrieved. */
      @com.google.api.client.util.Key
      private java.lang.String applicationName;

      /** Application name for which the events are to be retrieved.
       */
      public java.lang.String getApplicationName() {
        return applicationName;
      }

      /** Application name for which the events are to be retrieved. */
      public Watch setApplicationName(java.lang.String applicationName) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(APPLICATION_NAME_PATTERN.matcher(applicationName).matches(),
              "Parameter applicationName must conform to the pattern " +
              "(admin)|(calendar)|(drive)|(login)|(mobile)|(token)|(groups)|(saml)|(chat)|(gplus)|(rules)|(jamboard)|(meet)|(user_accounts)|(access_transparency)|(groups_enterprise)");
        }
        this.applicationName = applicationName;
        return this;
      }

      /**
       * IP Address of host where the event was performed. Supports both IPv4 and IPv6 addresses.
       */
      @com.google.api.client.util.Key
      private java.lang.String actorIpAddress;

      /** IP Address of host where the event was performed. Supports both IPv4 and IPv6 addresses.
       */
      public java.lang.String getActorIpAddress() {
        return actorIpAddress;
      }

      /**
       * IP Address of host where the event was performed. Supports both IPv4 and IPv6 addresses.
       */
      public Watch setActorIpAddress(java.lang.String actorIpAddress) {
        this.actorIpAddress = actorIpAddress;
        return this;
      }

      /** Represents the customer for which the data is to be fetched. */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Represents the customer for which the data is to be fetched.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /** Represents the customer for which the data is to be fetched. */
      public Watch setCustomerId(java.lang.String customerId) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(CUSTOMER_ID_PATTERN.matcher(customerId).matches(),
              "Parameter customerId must conform to the pattern " +
              "C.+");
        }
        this.customerId = customerId;
        return this;
      }

      /** Return events which occurred at or before this time. */
      @com.google.api.client.util.Key
      private java.lang.String endTime;

      /** Return events which occurred at or before this time.
       */
      public java.lang.String getEndTime() {
        return endTime;
      }

      /** Return events which occurred at or before this time. */
      public Watch setEndTime(java.lang.String endTime) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(END_TIME_PATTERN.matcher(endTime).matches(),
              "Parameter endTime must conform to the pattern " +
              "(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)(?:\\.(\\d+))?(?:(Z)|([-+])(\\d\\d):(\\d\\d))");
        }
        this.endTime = endTime;
        return this;
      }

      /** Name of the event being queried. */
      @com.google.api.client.util.Key
      private java.lang.String eventName;

      /** Name of the event being queried.
       */
      public java.lang.String getEventName() {
        return eventName;
      }

      /** Name of the event being queried. */
      public Watch setEventName(java.lang.String eventName) {
        this.eventName = eventName;
        return this;
      }

      /**
       * Event parameters in the form [parameter1 name][operator][parameter1 value],[parameter2
       * name][operator][parameter2 value],...
       */
      @com.google.api.client.util.Key
      private java.lang.String filters;

      /** Event parameters in the form [parameter1 name][operator][parameter1 value],[parameter2
     name][operator][parameter2 value],...
       */
      public java.lang.String getFilters() {
        return filters;
      }

      /**
       * Event parameters in the form [parameter1 name][operator][parameter1 value],[parameter2
       * name][operator][parameter2 value],...
       */
      public Watch setFilters(java.lang.String filters) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(FILTERS_PATTERN.matcher(filters).matches(),
              "Parameter filters must conform to the pattern " +
              "(.+[<,<=,==,>=,>,<>].+,)*(.+[<,<=,==,>=,>,<>].+)");
        }
        this.filters = filters;
        return this;
      }

      /** Number of activity records to be shown in each page. */
      @com.google.api.client.util.Key
      private java.lang.Integer maxResults;

      /** Number of activity records to be shown in each page.

     [minimum: 1] [maximum: 1000]
       */
      public java.lang.Integer getMaxResults() {
        return maxResults;
      }

      /** Number of activity records to be shown in each page. */
      public Watch setMaxResults(java.lang.Integer maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * the organizational unit's(OU) ID to filter activities from users belonging to a specific OU
       * or one of its sub-OU(s)
       */
      @com.google.api.client.util.Key
      private java.lang.String orgUnitID;

      /** the organizational unit's(OU) ID to filter activities from users belonging to a specific OU or one
     of its sub-OU(s)
       */
      public java.lang.String getOrgUnitID() {
        return orgUnitID;
      }

      /**
       * the organizational unit's(OU) ID to filter activities from users belonging to a specific OU
       * or one of its sub-OU(s)
       */
      public Watch setOrgUnitID(java.lang.String orgUnitID) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(ORG_UNIT_ID_PATTERN.matcher(orgUnitID).matches(),
              "Parameter orgUnitID must conform to the pattern " +
              "(id:[a-z0-9]+)");
        }
        this.orgUnitID = orgUnitID;
        return this;
      }

      /** Token to specify next page. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Token to specify next page.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Token to specify next page. */
      public Watch setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /** Return events which occurred at or after this time. */
      @com.google.api.client.util.Key
      private java.lang.String startTime;

      /** Return events which occurred at or after this time.
       */
      public java.lang.String getStartTime() {
        return startTime;
      }

      /** Return events which occurred at or after this time. */
      public Watch setStartTime(java.lang.String startTime) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(START_TIME_PATTERN.matcher(startTime).matches(),
              "Parameter startTime must conform to the pattern " +
              "(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d):(\\d\\d)(?:\\.(\\d+))?(?:(Z)|([-+])(\\d\\d):(\\d\\d))");
        }
        this.startTime = startTime;
        return this;
      }

      @Override
      public Watch set(String parameterName, Object value) {
        return (Watch) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Channels collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Reports admin = new Reports(...);}
   *   {@code Reports.Channels.List request = admin.channels().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Channels channels() {
    return new Channels();
  }

  /**
   * The "channels" collection of methods.
   */
  public class Channels {

    /**
     * Stop watching resources through this channel
     *
     * Create a request for the method "channels.stop".
     *
     * This request holds the parameters needed by the admin server.  After setting any optional
     * parameters, call the {@link Stop#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.reports.model.Channel}
     * @return the request
     */
    public Stop stop(com.google.api.services.reports.model.Channel content) throws java.io.IOException {
      Stop result = new Stop(content);
      initialize(result);
      return result;
    }

    public class Stop extends ReportsRequest<Void> {

      private static final String REST_PATH = "/admin/reports_v1/channels/stop";

      /**
       * Stop watching resources through this channel
       *
       * Create a request for the method "channels.stop".
       *
       * This request holds the parameters needed by the the admin server.  After setting any optional
       * parameters, call the {@link Stop#execute()} method to invoke the remote operation. <p> {@link
       * Stop#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.reports.model.Channel}
       * @since 1.13
       */
      protected Stop(com.google.api.services.reports.model.Channel content) {
        super(Reports.this, "POST", REST_PATH, content, Void.class);
      }

      @Override
      public Stop setAlt(java.lang.String alt) {
        return (Stop) super.setAlt(alt);
      }

      @Override
      public Stop setFields(java.lang.String fields) {
        return (Stop) super.setFields(fields);
      }

      @Override
      public Stop setKey(java.lang.String key) {
        return (Stop) super.setKey(key);
      }

      @Override
      public Stop setOauthToken(java.lang.String oauthToken) {
        return (Stop) super.setOauthToken(oauthToken);
      }

      @Override
      public Stop setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Stop) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Stop setQuotaUser(java.lang.String quotaUser) {
        return (Stop) super.setQuotaUser(quotaUser);
      }

      @Override
      public Stop setUserIp(java.lang.String userIp) {
        return (Stop) super.setUserIp(userIp);
      }

      @Override
      public Stop set(String parameterName, Object value) {
        return (Stop) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the CustomerUsageReports collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Reports admin = new Reports(...);}
   *   {@code Reports.CustomerUsageReports.List request = admin.customerUsageReports().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public CustomerUsageReports customerUsageReports() {
    return new CustomerUsageReports();
  }

  /**
   * The "customerUsageReports" collection of methods.
   */
  public class CustomerUsageReports {

    /**
     * Retrieves a report which is a collection of properties / statistics for a specific customer.
     *
     * Create a request for the method "customerUsageReports.get".
     *
     * This request holds the parameters needed by the admin server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param date Represents the date in yyyy-mm-dd format for which the data is to be fetched.
     * @return the request
     */
    public Get get(java.lang.String date) throws java.io.IOException {
      Get result = new Get(date);
      initialize(result);
      return result;
    }

    public class Get extends ReportsRequest<com.google.api.services.reports.model.UsageReports> {

      private static final String REST_PATH = "usage/dates/{date}";

      private final java.util.regex.Pattern DATE_PATTERN =
          java.util.regex.Pattern.compile("(\\d){4}-(\\d){2}-(\\d){2}");

      private final java.util.regex.Pattern CUSTOMER_ID_PATTERN =
          java.util.regex.Pattern.compile("C.+");

      private final java.util.regex.Pattern PARAMETERS_PATTERN =
          java.util.regex.Pattern.compile("(((accounts)|(app_maker)|(apps_scripts)|(classroom)|(cros)|(gmail)|(calendar)|(docs)|(gplus)|(sites)|(device_management)|(drive)|(meet)):[^,]+,)*(((accounts)|(app_maker)|(apps_scripts)|(classroom)|(cros)|(gmail)|(calendar)|(docs)|(gplus)|(sites)|(device_management)|(drive)|(meet)):[^,]+)");

      /**
       * Retrieves a report which is a collection of properties / statistics for a specific customer.
       *
       * Create a request for the method "customerUsageReports.get".
       *
       * This request holds the parameters needed by the the admin server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param date Represents the date in yyyy-mm-dd format for which the data is to be fetched.
       * @since 1.13
       */
      protected Get(java.lang.String date) {
        super(Reports.this, "GET", REST_PATH, null, com.google.api.services.reports.model.UsageReports.class);
        this.date = com.google.api.client.util.Preconditions.checkNotNull(date, "Required parameter date must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(DATE_PATTERN.matcher(date).matches(),
              "Parameter date must conform to the pattern " +
              "(\\d){4}-(\\d){2}-(\\d){2}");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Represents the date in yyyy-mm-dd format for which the data is to be fetched. */
      @com.google.api.client.util.Key
      private java.lang.String date;

      /** Represents the date in yyyy-mm-dd format for which the data is to be fetched.
       */
      public java.lang.String getDate() {
        return date;
      }

      /** Represents the date in yyyy-mm-dd format for which the data is to be fetched. */
      public Get setDate(java.lang.String date) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(DATE_PATTERN.matcher(date).matches(),
              "Parameter date must conform to the pattern " +
              "(\\d){4}-(\\d){2}-(\\d){2}");
        }
        this.date = date;
        return this;
      }

      /** Represents the customer for which the data is to be fetched. */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Represents the customer for which the data is to be fetched.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /** Represents the customer for which the data is to be fetched. */
      public Get setCustomerId(java.lang.String customerId) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(CUSTOMER_ID_PATTERN.matcher(customerId).matches(),
              "Parameter customerId must conform to the pattern " +
              "C.+");
        }
        this.customerId = customerId;
        return this;
      }

      /** Token to specify next page. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Token to specify next page.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Token to specify next page. */
      public Get setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /**
       * Represents the application name, parameter name pairs to fetch in csv as
       * app_name1:param_name1, app_name2:param_name2.
       */
      @com.google.api.client.util.Key
      private java.lang.String parameters;

      /** Represents the application name, parameter name pairs to fetch in csv as app_name1:param_name1,
     app_name2:param_name2.
       */
      public java.lang.String getParameters() {
        return parameters;
      }

      /**
       * Represents the application name, parameter name pairs to fetch in csv as
       * app_name1:param_name1, app_name2:param_name2.
       */
      public Get setParameters(java.lang.String parameters) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(PARAMETERS_PATTERN.matcher(parameters).matches(),
              "Parameter parameters must conform to the pattern " +
              "(((accounts)|(app_maker)|(apps_scripts)|(classroom)|(cros)|(gmail)|(calendar)|(docs)|(gplus)|(sites)|(device_management)|(drive)|(meet)):[^,]+,)*(((accounts)|(app_maker)|(apps_scripts)|(classroom)|(cros)|(gmail)|(calendar)|(docs)|(gplus)|(sites)|(device_management)|(drive)|(meet)):[^,]+)");
        }
        this.parameters = parameters;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the EntityUsageReports collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Reports admin = new Reports(...);}
   *   {@code Reports.EntityUsageReports.List request = admin.entityUsageReports().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public EntityUsageReports entityUsageReports() {
    return new EntityUsageReports();
  }

  /**
   * The "entityUsageReports" collection of methods.
   */
  public class EntityUsageReports {

    /**
     * Retrieves a report which is a collection of properties / statistics for a set of objects.
     *
     * Create a request for the method "entityUsageReports.get".
     *
     * This request holds the parameters needed by the admin server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param entityType Type of object. Should be one of - gplus_communities.
     * @param entityKey Represents the key of object for which the data should be filtered.
     * @param date Represents the date in yyyy-mm-dd format for which the data is to be fetched.
     * @return the request
     */
    public Get get(java.lang.String entityType, java.lang.String entityKey, java.lang.String date) throws java.io.IOException {
      Get result = new Get(entityType, entityKey, date);
      initialize(result);
      return result;
    }

    public class Get extends ReportsRequest<com.google.api.services.reports.model.UsageReports> {

      private static final String REST_PATH = "usage/{entityType}/{entityKey}/dates/{date}";

      private final java.util.regex.Pattern ENTITY_TYPE_PATTERN =
          java.util.regex.Pattern.compile("(gplus_communities)");

      private final java.util.regex.Pattern DATE_PATTERN =
          java.util.regex.Pattern.compile("(\\d){4}-(\\d){2}-(\\d){2}");

      private final java.util.regex.Pattern CUSTOMER_ID_PATTERN =
          java.util.regex.Pattern.compile("C.+");

      private final java.util.regex.Pattern FILTERS_PATTERN =
          java.util.regex.Pattern.compile("(((gplus)):[a-z0-9_]+[<,<=,==,>=,>,!=][^,]+,)*(((gplus)):[a-z0-9_]+[<,<=,==,>=,>,!=][^,]+)");

      private final java.util.regex.Pattern PARAMETERS_PATTERN =
          java.util.regex.Pattern.compile("(((gplus)):[^,]+,)*(((gplus)):[^,]+)");

      /**
       * Retrieves a report which is a collection of properties / statistics for a set of objects.
       *
       * Create a request for the method "entityUsageReports.get".
       *
       * This request holds the parameters needed by the the admin server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param entityType Type of object. Should be one of - gplus_communities.
       * @param entityKey Represents the key of object for which the data should be filtered.
       * @param date Represents the date in yyyy-mm-dd format for which the data is to be fetched.
       * @since 1.13
       */
      protected Get(java.lang.String entityType, java.lang.String entityKey, java.lang.String date) {
        super(Reports.this, "GET", REST_PATH, null, com.google.api.services.reports.model.UsageReports.class);
        this.entityType = com.google.api.client.util.Preconditions.checkNotNull(entityType, "Required parameter entityType must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(ENTITY_TYPE_PATTERN.matcher(entityType).matches(),
              "Parameter entityType must conform to the pattern " +
              "(gplus_communities)");
        }
        this.entityKey = com.google.api.client.util.Preconditions.checkNotNull(entityKey, "Required parameter entityKey must be specified.");
        this.date = com.google.api.client.util.Preconditions.checkNotNull(date, "Required parameter date must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(DATE_PATTERN.matcher(date).matches(),
              "Parameter date must conform to the pattern " +
              "(\\d){4}-(\\d){2}-(\\d){2}");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Type of object. Should be one of - gplus_communities. */
      @com.google.api.client.util.Key
      private java.lang.String entityType;

      /** Type of object. Should be one of - gplus_communities.
       */
      public java.lang.String getEntityType() {
        return entityType;
      }

      /** Type of object. Should be one of - gplus_communities. */
      public Get setEntityType(java.lang.String entityType) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(ENTITY_TYPE_PATTERN.matcher(entityType).matches(),
              "Parameter entityType must conform to the pattern " +
              "(gplus_communities)");
        }
        this.entityType = entityType;
        return this;
      }

      /** Represents the key of object for which the data should be filtered. */
      @com.google.api.client.util.Key
      private java.lang.String entityKey;

      /** Represents the key of object for which the data should be filtered.
       */
      public java.lang.String getEntityKey() {
        return entityKey;
      }

      /** Represents the key of object for which the data should be filtered. */
      public Get setEntityKey(java.lang.String entityKey) {
        this.entityKey = entityKey;
        return this;
      }

      /** Represents the date in yyyy-mm-dd format for which the data is to be fetched. */
      @com.google.api.client.util.Key
      private java.lang.String date;

      /** Represents the date in yyyy-mm-dd format for which the data is to be fetched.
       */
      public java.lang.String getDate() {
        return date;
      }

      /** Represents the date in yyyy-mm-dd format for which the data is to be fetched. */
      public Get setDate(java.lang.String date) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(DATE_PATTERN.matcher(date).matches(),
              "Parameter date must conform to the pattern " +
              "(\\d){4}-(\\d){2}-(\\d){2}");
        }
        this.date = date;
        return this;
      }

      /** Represents the customer for which the data is to be fetched. */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Represents the customer for which the data is to be fetched.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /** Represents the customer for which the data is to be fetched. */
      public Get setCustomerId(java.lang.String customerId) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(CUSTOMER_ID_PATTERN.matcher(customerId).matches(),
              "Parameter customerId must conform to the pattern " +
              "C.+");
        }
        this.customerId = customerId;
        return this;
      }

      /** Represents the set of filters including parameter operator value. */
      @com.google.api.client.util.Key
      private java.lang.String filters;

      /** Represents the set of filters including parameter operator value.
       */
      public java.lang.String getFilters() {
        return filters;
      }

      /** Represents the set of filters including parameter operator value. */
      public Get setFilters(java.lang.String filters) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(FILTERS_PATTERN.matcher(filters).matches(),
              "Parameter filters must conform to the pattern " +
              "(((gplus)):[a-z0-9_]+[<,<=,==,>=,>,!=][^,]+,)*(((gplus)):[a-z0-9_]+[<,<=,==,>=,>,!=][^,]+)");
        }
        this.filters = filters;
        return this;
      }

      /** Maximum number of results to return. Maximum allowed is 1000 */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of results to return. Maximum allowed is 1000

     [maximum: 1000]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of results to return. Maximum allowed is 1000 */
      public Get setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Token to specify next page. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Token to specify next page.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Token to specify next page. */
      public Get setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /**
       * Represents the application name, parameter name pairs to fetch in csv as
       * app_name1:param_name1, app_name2:param_name2.
       */
      @com.google.api.client.util.Key
      private java.lang.String parameters;

      /** Represents the application name, parameter name pairs to fetch in csv as app_name1:param_name1,
     app_name2:param_name2.
       */
      public java.lang.String getParameters() {
        return parameters;
      }

      /**
       * Represents the application name, parameter name pairs to fetch in csv as
       * app_name1:param_name1, app_name2:param_name2.
       */
      public Get setParameters(java.lang.String parameters) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(PARAMETERS_PATTERN.matcher(parameters).matches(),
              "Parameter parameters must conform to the pattern " +
              "(((gplus)):[^,]+,)*(((gplus)):[^,]+)");
        }
        this.parameters = parameters;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the UserUsageReport collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Reports admin = new Reports(...);}
   *   {@code Reports.UserUsageReport.List request = admin.userUsageReport().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public UserUsageReport userUsageReport() {
    return new UserUsageReport();
  }

  /**
   * The "userUsageReport" collection of methods.
   */
  public class UserUsageReport {

    /**
     * Retrieves a report which is a collection of properties / statistics for a set of users.
     *
     * Create a request for the method "userUsageReport.get".
     *
     * This request holds the parameters needed by the admin server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param userKey Represents the profile id or the user email for which the data should be filtered.
     * @param date Represents the date in yyyy-mm-dd format for which the data is to be fetched.
     * @return the request
     */
    public Get get(java.lang.String userKey, java.lang.String date) throws java.io.IOException {
      Get result = new Get(userKey, date);
      initialize(result);
      return result;
    }

    public class Get extends ReportsRequest<com.google.api.services.reports.model.UsageReports> {

      private static final String REST_PATH = "usage/users/{userKey}/dates/{date}";

      private final java.util.regex.Pattern DATE_PATTERN =
          java.util.regex.Pattern.compile("(\\d){4}-(\\d){2}-(\\d){2}");

      private final java.util.regex.Pattern CUSTOMER_ID_PATTERN =
          java.util.regex.Pattern.compile("C.+");

      private final java.util.regex.Pattern FILTERS_PATTERN =
          java.util.regex.Pattern.compile("(((accounts)|(classroom)|(cros)|(gmail)|(calendar)|(docs)|(gplus)|(sites)|(device_management)|(drive)):[a-z0-9_]+[<,<=,==,>=,>,!=][^,]+,)*(((accounts)|(classroom)|(cros)|(gmail)|(calendar)|(docs)|(gplus)|(sites)|(device_management)|(drive)):[a-z0-9_]+[<,<=,==,>=,>,!=][^,]+)");

      private final java.util.regex.Pattern ORG_UNIT_ID_PATTERN =
          java.util.regex.Pattern.compile("(id:[a-z0-9]+)");

      private final java.util.regex.Pattern PARAMETERS_PATTERN =
          java.util.regex.Pattern.compile("(((accounts)|(classroom)|(cros)|(gmail)|(calendar)|(docs)|(gplus)|(sites)|(device_management)|(drive)):[^,]+,)*(((accounts)|(classroom)|(cros)|(gmail)|(calendar)|(docs)|(gplus)|(sites)|(device_management)|(drive)):[^,]+)");

      /**
       * Retrieves a report which is a collection of properties / statistics for a set of users.
       *
       * Create a request for the method "userUsageReport.get".
       *
       * This request holds the parameters needed by the the admin server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userKey Represents the profile id or the user email for which the data should be filtered.
       * @param date Represents the date in yyyy-mm-dd format for which the data is to be fetched.
       * @since 1.13
       */
      protected Get(java.lang.String userKey, java.lang.String date) {
        super(Reports.this, "GET", REST_PATH, null, com.google.api.services.reports.model.UsageReports.class);
        this.userKey = com.google.api.client.util.Preconditions.checkNotNull(userKey, "Required parameter userKey must be specified.");
        this.date = com.google.api.client.util.Preconditions.checkNotNull(date, "Required parameter date must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(DATE_PATTERN.matcher(date).matches(),
              "Parameter date must conform to the pattern " +
              "(\\d){4}-(\\d){2}-(\\d){2}");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Represents the profile id or the user email for which the data should be filtered. */
      @com.google.api.client.util.Key
      private java.lang.String userKey;

      /** Represents the profile id or the user email for which the data should be filtered.
       */
      public java.lang.String getUserKey() {
        return userKey;
      }

      /** Represents the profile id or the user email for which the data should be filtered. */
      public Get setUserKey(java.lang.String userKey) {
        this.userKey = userKey;
        return this;
      }

      /** Represents the date in yyyy-mm-dd format for which the data is to be fetched. */
      @com.google.api.client.util.Key
      private java.lang.String date;

      /** Represents the date in yyyy-mm-dd format for which the data is to be fetched.
       */
      public java.lang.String getDate() {
        return date;
      }

      /** Represents the date in yyyy-mm-dd format for which the data is to be fetched. */
      public Get setDate(java.lang.String date) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(DATE_PATTERN.matcher(date).matches(),
              "Parameter date must conform to the pattern " +
              "(\\d){4}-(\\d){2}-(\\d){2}");
        }
        this.date = date;
        return this;
      }

      /** Represents the customer for which the data is to be fetched. */
      @com.google.api.client.util.Key
      private java.lang.String customerId;

      /** Represents the customer for which the data is to be fetched.
       */
      public java.lang.String getCustomerId() {
        return customerId;
      }

      /** Represents the customer for which the data is to be fetched. */
      public Get setCustomerId(java.lang.String customerId) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(CUSTOMER_ID_PATTERN.matcher(customerId).matches(),
              "Parameter customerId must conform to the pattern " +
              "C.+");
        }
        this.customerId = customerId;
        return this;
      }

      /** Represents the set of filters including parameter operator value. */
      @com.google.api.client.util.Key
      private java.lang.String filters;

      /** Represents the set of filters including parameter operator value.
       */
      public java.lang.String getFilters() {
        return filters;
      }

      /** Represents the set of filters including parameter operator value. */
      public Get setFilters(java.lang.String filters) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(FILTERS_PATTERN.matcher(filters).matches(),
              "Parameter filters must conform to the pattern " +
              "(((accounts)|(classroom)|(cros)|(gmail)|(calendar)|(docs)|(gplus)|(sites)|(device_management)|(drive)):[a-z0-9_]+[<,<=,==,>=,>,!=][^,]+,)*(((accounts)|(classroom)|(cros)|(gmail)|(calendar)|(docs)|(gplus)|(sites)|(device_management)|(drive)):[a-z0-9_]+[<,<=,==,>=,>,!=][^,]+)");
        }
        this.filters = filters;
        return this;
      }

      /** Maximum number of results to return. Maximum allowed is 1000 */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** Maximum number of results to return. Maximum allowed is 1000

     [maximum: 1000]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** Maximum number of results to return. Maximum allowed is 1000 */
      public Get setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * the organizational unit's ID to filter usage parameters from users belonging to a specific
       * OU or one of its sub-OU(s).
       */
      @com.google.api.client.util.Key
      private java.lang.String orgUnitID;

      /** the organizational unit's ID to filter usage parameters from users belonging to a specific OU or
     one of its sub-OU(s).
       */
      public java.lang.String getOrgUnitID() {
        return orgUnitID;
      }

      /**
       * the organizational unit's ID to filter usage parameters from users belonging to a specific
       * OU or one of its sub-OU(s).
       */
      public Get setOrgUnitID(java.lang.String orgUnitID) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(ORG_UNIT_ID_PATTERN.matcher(orgUnitID).matches(),
              "Parameter orgUnitID must conform to the pattern " +
              "(id:[a-z0-9]+)");
        }
        this.orgUnitID = orgUnitID;
        return this;
      }

      /** Token to specify next page. */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Token to specify next page.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /** Token to specify next page. */
      public Get setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      /**
       * Represents the application name, parameter name pairs to fetch in csv as
       * app_name1:param_name1, app_name2:param_name2.
       */
      @com.google.api.client.util.Key
      private java.lang.String parameters;

      /** Represents the application name, parameter name pairs to fetch in csv as app_name1:param_name1,
     app_name2:param_name2.
       */
      public java.lang.String getParameters() {
        return parameters;
      }

      /**
       * Represents the application name, parameter name pairs to fetch in csv as
       * app_name1:param_name1, app_name2:param_name2.
       */
      public Get setParameters(java.lang.String parameters) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(PARAMETERS_PATTERN.matcher(parameters).matches(),
              "Parameter parameters must conform to the pattern " +
              "(((accounts)|(classroom)|(cros)|(gmail)|(calendar)|(docs)|(gplus)|(sites)|(device_management)|(drive)):[^,]+,)*(((accounts)|(classroom)|(cros)|(gmail)|(calendar)|(docs)|(gplus)|(sites)|(device_management)|(drive)):[^,]+)");
        }
        this.parameters = parameters;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Reports}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Reports}. */
    @Override
    public Reports build() {
      return new Reports(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ReportsRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setReportsRequestInitializer(
        ReportsRequestInitializer reportsRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(reportsRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
