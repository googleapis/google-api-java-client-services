/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A video can have a list of text anchors, which have different anchor types. Next ID: 15
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoContentSearchVideoAnchors extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String anchorType;

  /**
   * The list of entity groups derived from the caption entities.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchEntityGroupInfo entityGroupInfo;

  /**
   * Same as above, but used for experimenting with new models.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float experimentalPredictedQuerylessTocUsefulness;

  /**
   * If is_filtered is true, this field illustrates the reasons.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> filterReason;

  /**
   * If true, the anchor set is filtered and not served online.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isFiltered;

  /**
   * The anchor sources being used to generate this merged anchors. This field is filled only when
   * this is a merged anchor.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> mergedAnchorsSources;

  /**
   * The score that predicts the usefulness of this anchor set on the Huh table of contents eval
   * without considering the query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float predictedQuerylessTocUsefulness;

  /**
   * The quality of the anchor set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float score;

  /**
   * Additional scoring info used for debugging.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchVideoAnchorsScoreInfo scoreInfo;

  /**
   * Whether or not thumbnails should be displayed when serving anchors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean shouldServeThumbnails;

  /**
   * This field indicates that the thumbnail should be hidden but is forced to show.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean thumbnailForced;

  /**
   * Information about the set of thumbnails.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchAnchorsThumbnailInfo thumbnailSetInfo;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<VideoContentSearchVideoAnchor> videoAnchor;

  static {
    // hack to force ProGuard to consider VideoContentSearchVideoAnchor used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(VideoContentSearchVideoAnchor.class);
  }

  /**
   * Information about the video's introduction segment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VideoContentSearchVideoIntroduction videoIntroduction;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAnchorType() {
    return anchorType;
  }

  /**
   * @param anchorType anchorType or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setAnchorType(java.lang.String anchorType) {
    this.anchorType = anchorType;
    return this;
  }

  /**
   * The list of entity groups derived from the caption entities.
   * @return value or {@code null} for none
   */
  public VideoContentSearchEntityGroupInfo getEntityGroupInfo() {
    return entityGroupInfo;
  }

  /**
   * The list of entity groups derived from the caption entities.
   * @param entityGroupInfo entityGroupInfo or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setEntityGroupInfo(VideoContentSearchEntityGroupInfo entityGroupInfo) {
    this.entityGroupInfo = entityGroupInfo;
    return this;
  }

  /**
   * Same as above, but used for experimenting with new models.
   * @return value or {@code null} for none
   */
  public java.lang.Float getExperimentalPredictedQuerylessTocUsefulness() {
    return experimentalPredictedQuerylessTocUsefulness;
  }

  /**
   * Same as above, but used for experimenting with new models.
   * @param experimentalPredictedQuerylessTocUsefulness experimentalPredictedQuerylessTocUsefulness or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setExperimentalPredictedQuerylessTocUsefulness(java.lang.Float experimentalPredictedQuerylessTocUsefulness) {
    this.experimentalPredictedQuerylessTocUsefulness = experimentalPredictedQuerylessTocUsefulness;
    return this;
  }

  /**
   * If is_filtered is true, this field illustrates the reasons.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getFilterReason() {
    return filterReason;
  }

  /**
   * If is_filtered is true, this field illustrates the reasons.
   * @param filterReason filterReason or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setFilterReason(java.util.List<java.lang.String> filterReason) {
    this.filterReason = filterReason;
    return this;
  }

  /**
   * If true, the anchor set is filtered and not served online.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsFiltered() {
    return isFiltered;
  }

  /**
   * If true, the anchor set is filtered and not served online.
   * @param isFiltered isFiltered or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setIsFiltered(java.lang.Boolean isFiltered) {
    this.isFiltered = isFiltered;
    return this;
  }

  /**
   * The anchor sources being used to generate this merged anchors. This field is filled only when
   * this is a merged anchor.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMergedAnchorsSources() {
    return mergedAnchorsSources;
  }

  /**
   * The anchor sources being used to generate this merged anchors. This field is filled only when
   * this is a merged anchor.
   * @param mergedAnchorsSources mergedAnchorsSources or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setMergedAnchorsSources(java.util.List<java.lang.String> mergedAnchorsSources) {
    this.mergedAnchorsSources = mergedAnchorsSources;
    return this;
  }

  /**
   * The score that predicts the usefulness of this anchor set on the Huh table of contents eval
   * without considering the query.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPredictedQuerylessTocUsefulness() {
    return predictedQuerylessTocUsefulness;
  }

  /**
   * The score that predicts the usefulness of this anchor set on the Huh table of contents eval
   * without considering the query.
   * @param predictedQuerylessTocUsefulness predictedQuerylessTocUsefulness or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setPredictedQuerylessTocUsefulness(java.lang.Float predictedQuerylessTocUsefulness) {
    this.predictedQuerylessTocUsefulness = predictedQuerylessTocUsefulness;
    return this;
  }

  /**
   * The quality of the anchor set.
   * @return value or {@code null} for none
   */
  public java.lang.Float getScore() {
    return score;
  }

  /**
   * The quality of the anchor set.
   * @param score score or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setScore(java.lang.Float score) {
    this.score = score;
    return this;
  }

  /**
   * Additional scoring info used for debugging.
   * @return value or {@code null} for none
   */
  public VideoContentSearchVideoAnchorsScoreInfo getScoreInfo() {
    return scoreInfo;
  }

  /**
   * Additional scoring info used for debugging.
   * @param scoreInfo scoreInfo or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setScoreInfo(VideoContentSearchVideoAnchorsScoreInfo scoreInfo) {
    this.scoreInfo = scoreInfo;
    return this;
  }

  /**
   * Whether or not thumbnails should be displayed when serving anchors.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getShouldServeThumbnails() {
    return shouldServeThumbnails;
  }

  /**
   * Whether or not thumbnails should be displayed when serving anchors.
   * @param shouldServeThumbnails shouldServeThumbnails or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setShouldServeThumbnails(java.lang.Boolean shouldServeThumbnails) {
    this.shouldServeThumbnails = shouldServeThumbnails;
    return this;
  }

  /**
   * This field indicates that the thumbnail should be hidden but is forced to show.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getThumbnailForced() {
    return thumbnailForced;
  }

  /**
   * This field indicates that the thumbnail should be hidden but is forced to show.
   * @param thumbnailForced thumbnailForced or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setThumbnailForced(java.lang.Boolean thumbnailForced) {
    this.thumbnailForced = thumbnailForced;
    return this;
  }

  /**
   * Information about the set of thumbnails.
   * @return value or {@code null} for none
   */
  public VideoContentSearchAnchorsThumbnailInfo getThumbnailSetInfo() {
    return thumbnailSetInfo;
  }

  /**
   * Information about the set of thumbnails.
   * @param thumbnailSetInfo thumbnailSetInfo or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setThumbnailSetInfo(VideoContentSearchAnchorsThumbnailInfo thumbnailSetInfo) {
    this.thumbnailSetInfo = thumbnailSetInfo;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<VideoContentSearchVideoAnchor> getVideoAnchor() {
    return videoAnchor;
  }

  /**
   * @param videoAnchor videoAnchor or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setVideoAnchor(java.util.List<VideoContentSearchVideoAnchor> videoAnchor) {
    this.videoAnchor = videoAnchor;
    return this;
  }

  /**
   * Information about the video's introduction segment.
   * @return value or {@code null} for none
   */
  public VideoContentSearchVideoIntroduction getVideoIntroduction() {
    return videoIntroduction;
  }

  /**
   * Information about the video's introduction segment.
   * @param videoIntroduction videoIntroduction or {@code null} for none
   */
  public VideoContentSearchVideoAnchors setVideoIntroduction(VideoContentSearchVideoIntroduction videoIntroduction) {
    this.videoIntroduction = videoIntroduction;
    return this;
  }

  @Override
  public VideoContentSearchVideoAnchors set(String fieldName, Object value) {
    return (VideoContentSearchVideoAnchors) super.set(fieldName, value);
  }

  @Override
  public VideoContentSearchVideoAnchors clone() {
    return (VideoContentSearchVideoAnchors) super.clone();
  }

}
