/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * OrientationLabel groups the details about orientation and reading order.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoodocOrientationLabel extends com.google.api.client.json.GenericJson {

  /**
   * After rotating so that the text orientation is upright, how many radians does one have to
   * rotate the block anti-clockwise for it to be level? We guarantee: -Pi/4 <= deskew_angle <= Pi/4
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float deskewAngle;

  /**
   * Whether a text line is mirrored (e.g. reflected in a shiny surface or seen through the opposite
   * side of a storefront window). The intent is that this is a quality of the text line image. It
   * needs to be reflected according to a vertical axis along the direction of upright characters to
   * make it readable. This does not affect the shape of the bounding box. A mirrored line with top
   * to bottom writing remains top to bottom. A mirrored horizontal line will flip left to right.
   * However any child entities (symbols) will remain in the same order, and the writing direction
   * imposed by the language (ltr or rtl) will remain the same.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean mirrored;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String orientation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String textlineOrder;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String writingDirection;

  /**
   * After rotating so that the text orientation is upright, how many radians does one have to
   * rotate the block anti-clockwise for it to be level? We guarantee: -Pi/4 <= deskew_angle <= Pi/4
   * @return value or {@code null} for none
   */
  public java.lang.Float getDeskewAngle() {
    return deskewAngle;
  }

  /**
   * After rotating so that the text orientation is upright, how many radians does one have to
   * rotate the block anti-clockwise for it to be level? We guarantee: -Pi/4 <= deskew_angle <= Pi/4
   * @param deskewAngle deskewAngle or {@code null} for none
   */
  public GoodocOrientationLabel setDeskewAngle(java.lang.Float deskewAngle) {
    this.deskewAngle = deskewAngle;
    return this;
  }

  /**
   * Whether a text line is mirrored (e.g. reflected in a shiny surface or seen through the opposite
   * side of a storefront window). The intent is that this is a quality of the text line image. It
   * needs to be reflected according to a vertical axis along the direction of upright characters to
   * make it readable. This does not affect the shape of the bounding box. A mirrored line with top
   * to bottom writing remains top to bottom. A mirrored horizontal line will flip left to right.
   * However any child entities (symbols) will remain in the same order, and the writing direction
   * imposed by the language (ltr or rtl) will remain the same.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getMirrored() {
    return mirrored;
  }

  /**
   * Whether a text line is mirrored (e.g. reflected in a shiny surface or seen through the opposite
   * side of a storefront window). The intent is that this is a quality of the text line image. It
   * needs to be reflected according to a vertical axis along the direction of upright characters to
   * make it readable. This does not affect the shape of the bounding box. A mirrored line with top
   * to bottom writing remains top to bottom. A mirrored horizontal line will flip left to right.
   * However any child entities (symbols) will remain in the same order, and the writing direction
   * imposed by the language (ltr or rtl) will remain the same.
   * @param mirrored mirrored or {@code null} for none
   */
  public GoodocOrientationLabel setMirrored(java.lang.Boolean mirrored) {
    this.mirrored = mirrored;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getOrientation() {
    return orientation;
  }

  /**
   * @param orientation orientation or {@code null} for none
   */
  public GoodocOrientationLabel setOrientation(java.lang.String orientation) {
    this.orientation = orientation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getTextlineOrder() {
    return textlineOrder;
  }

  /**
   * @param textlineOrder textlineOrder or {@code null} for none
   */
  public GoodocOrientationLabel setTextlineOrder(java.lang.String textlineOrder) {
    this.textlineOrder = textlineOrder;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getWritingDirection() {
    return writingDirection;
  }

  /**
   * @param writingDirection writingDirection or {@code null} for none
   */
  public GoodocOrientationLabel setWritingDirection(java.lang.String writingDirection) {
    this.writingDirection = writingDirection;
    return this;
  }

  @Override
  public GoodocOrientationLabel set(String fieldName, Object value) {
    return (GoodocOrientationLabel) super.set(fieldName, value);
  }

  @Override
  public GoodocOrientationLabel clone() {
    return (GoodocOrientationLabel) super.clone();
  }

}
