/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.displayvideo.v3.model;

/**
 * A single comparison. The comparison compares the `signal` to the `comparisonValue`. The
 * comparison of `siteId==123` is represented with the following field values: * `signal` has an
 * `impressionSignal` of `SITE_ID`. * `comparisonOperator` is set to `EQUAL`. * `comparisonValue` is
 * set to 123.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Display & Video 360 API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AlgorithmRulesSignalComparison extends com.google.api.client.json.GenericJson {

  /**
   * Operator used to compare the two values. In the resulting experession, the `signal` will be the
   * first value and the `comparisonValue will be the second.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String comparisonOperator;

  /**
   * Value to compare signal to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AlgorithmRulesComparisonValue comparisonValue;

  /**
   * Signal to compare.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AlgorithmRulesSignal signal;

  /**
   * Operator used to compare the two values. In the resulting experession, the `signal` will be the
   * first value and the `comparisonValue will be the second.
   * @return value or {@code null} for none
   */
  public java.lang.String getComparisonOperator() {
    return comparisonOperator;
  }

  /**
   * Operator used to compare the two values. In the resulting experession, the `signal` will be the
   * first value and the `comparisonValue will be the second.
   * @param comparisonOperator comparisonOperator or {@code null} for none
   */
  public AlgorithmRulesSignalComparison setComparisonOperator(java.lang.String comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
    return this;
  }

  /**
   * Value to compare signal to.
   * @return value or {@code null} for none
   */
  public AlgorithmRulesComparisonValue getComparisonValue() {
    return comparisonValue;
  }

  /**
   * Value to compare signal to.
   * @param comparisonValue comparisonValue or {@code null} for none
   */
  public AlgorithmRulesSignalComparison setComparisonValue(AlgorithmRulesComparisonValue comparisonValue) {
    this.comparisonValue = comparisonValue;
    return this;
  }

  /**
   * Signal to compare.
   * @return value or {@code null} for none
   */
  public AlgorithmRulesSignal getSignal() {
    return signal;
  }

  /**
   * Signal to compare.
   * @param signal signal or {@code null} for none
   */
  public AlgorithmRulesSignalComparison setSignal(AlgorithmRulesSignal signal) {
    this.signal = signal;
    return this;
  }

  @Override
  public AlgorithmRulesSignalComparison set(String fieldName, Object value) {
    return (AlgorithmRulesSignalComparison) super.set(fieldName, value);
  }

  @Override
  public AlgorithmRulesSignalComparison clone() {
    return (AlgorithmRulesSignalComparison) super.clone();
  }

}
