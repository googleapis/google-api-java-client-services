/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.securityposture.v1.model;

/**
 * Details for a Posture deployment on an organization, folder, or project. You can deploy at most
 * one posture to each organization, folder, or project. The parent resource for a posture
 * deployment is always the organization, even if the deployment applies to a folder or project.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Security Posture API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PostureDeployment extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The user-specified annotations for the posture deployment. For details about the
   * values you can use in an annotation, see [AIP-148: Standard
   * fields](https://google.aip.dev/148#annotations).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> annotations;

  /**
   * Output only. The categories that the posture deployment belongs to, as determined by the
   * Security Posture API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> categories;

  /**
   * Output only. The time at which the posture deployment was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. A description of the posture deployment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Output only. The posture ID that was specified for the deployment. Present only if the posture
   * deployment is in a failed state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String desiredPostureId;

  /**
   * Output only. The revision ID of the posture that was specified for the deployment. Present only
   * if the deployment is in a failed state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String desiredPostureRevisionId;

  /**
   * Optional. An opaque identifier for the current version of the posture deployment. To prevent
   * concurrent updates from overwriting each other, always provide the `etag` when you update a
   * posture deployment. You can also provide the `etag` when you delete a posture deployment, to
   * help ensure that you're deleting the intended posture deployment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Output only. A description of why the posture deployment failed. Present only if the deployment
   * is in a failed state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String failureMessage;

  /**
   * Required. Identifier. The name of the posture deployment, in the format
   * `organizations/{organization}/locations/global/postureDeployments/{deployment_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Required. The posture used in the deployment, in the format
   * `organizations/{organization}/locations/global/postures/{posture_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postureId;

  /**
   * Required. The revision ID of the posture used in the deployment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String postureRevisionId;

  /**
   * Output only. Whether the posture deployment is in the process of being updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean reconciling;

  /**
   * Output only. The state of the posture deployment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Required. The organization, folder, or project where the posture is deployed. Uses one of the
   * following formats: * `organizations/{organization_number}` * `folders/{folder_number}` *
   * `projects/{project_number}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetResource;

  /**
   * Output only. The time at which the posture deployment was last updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Optional. The user-specified annotations for the posture deployment. For details about the
   * values you can use in an annotation, see [AIP-148: Standard
   * fields](https://google.aip.dev/148#annotations).
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAnnotations() {
    return annotations;
  }

  /**
   * Optional. The user-specified annotations for the posture deployment. For details about the
   * values you can use in an annotation, see [AIP-148: Standard
   * fields](https://google.aip.dev/148#annotations).
   * @param annotations annotations or {@code null} for none
   */
  public PostureDeployment setAnnotations(java.util.Map<String, java.lang.String> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Output only. The categories that the posture deployment belongs to, as determined by the
   * Security Posture API.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCategories() {
    return categories;
  }

  /**
   * Output only. The categories that the posture deployment belongs to, as determined by the
   * Security Posture API.
   * @param categories categories or {@code null} for none
   */
  public PostureDeployment setCategories(java.util.List<java.lang.String> categories) {
    this.categories = categories;
    return this;
  }

  /**
   * Output only. The time at which the posture deployment was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time at which the posture deployment was created.
   * @param createTime createTime or {@code null} for none
   */
  public PostureDeployment setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. A description of the posture deployment.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Optional. A description of the posture deployment.
   * @param description description or {@code null} for none
   */
  public PostureDeployment setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Output only. The posture ID that was specified for the deployment. Present only if the posture
   * deployment is in a failed state.
   * @return value or {@code null} for none
   */
  public java.lang.String getDesiredPostureId() {
    return desiredPostureId;
  }

  /**
   * Output only. The posture ID that was specified for the deployment. Present only if the posture
   * deployment is in a failed state.
   * @param desiredPostureId desiredPostureId or {@code null} for none
   */
  public PostureDeployment setDesiredPostureId(java.lang.String desiredPostureId) {
    this.desiredPostureId = desiredPostureId;
    return this;
  }

  /**
   * Output only. The revision ID of the posture that was specified for the deployment. Present only
   * if the deployment is in a failed state.
   * @return value or {@code null} for none
   */
  public java.lang.String getDesiredPostureRevisionId() {
    return desiredPostureRevisionId;
  }

  /**
   * Output only. The revision ID of the posture that was specified for the deployment. Present only
   * if the deployment is in a failed state.
   * @param desiredPostureRevisionId desiredPostureRevisionId or {@code null} for none
   */
  public PostureDeployment setDesiredPostureRevisionId(java.lang.String desiredPostureRevisionId) {
    this.desiredPostureRevisionId = desiredPostureRevisionId;
    return this;
  }

  /**
   * Optional. An opaque identifier for the current version of the posture deployment. To prevent
   * concurrent updates from overwriting each other, always provide the `etag` when you update a
   * posture deployment. You can also provide the `etag` when you delete a posture deployment, to
   * help ensure that you're deleting the intended posture deployment.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Optional. An opaque identifier for the current version of the posture deployment. To prevent
   * concurrent updates from overwriting each other, always provide the `etag` when you update a
   * posture deployment. You can also provide the `etag` when you delete a posture deployment, to
   * help ensure that you're deleting the intended posture deployment.
   * @param etag etag or {@code null} for none
   */
  public PostureDeployment setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Output only. A description of why the posture deployment failed. Present only if the deployment
   * is in a failed state.
   * @return value or {@code null} for none
   */
  public java.lang.String getFailureMessage() {
    return failureMessage;
  }

  /**
   * Output only. A description of why the posture deployment failed. Present only if the deployment
   * is in a failed state.
   * @param failureMessage failureMessage or {@code null} for none
   */
  public PostureDeployment setFailureMessage(java.lang.String failureMessage) {
    this.failureMessage = failureMessage;
    return this;
  }

  /**
   * Required. Identifier. The name of the posture deployment, in the format
   * `organizations/{organization}/locations/global/postureDeployments/{deployment_id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required. Identifier. The name of the posture deployment, in the format
   * `organizations/{organization}/locations/global/postureDeployments/{deployment_id}`.
   * @param name name or {@code null} for none
   */
  public PostureDeployment setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The posture used in the deployment, in the format
   * `organizations/{organization}/locations/global/postures/{posture_id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getPostureId() {
    return postureId;
  }

  /**
   * Required. The posture used in the deployment, in the format
   * `organizations/{organization}/locations/global/postures/{posture_id}`.
   * @param postureId postureId or {@code null} for none
   */
  public PostureDeployment setPostureId(java.lang.String postureId) {
    this.postureId = postureId;
    return this;
  }

  /**
   * Required. The revision ID of the posture used in the deployment.
   * @return value or {@code null} for none
   */
  public java.lang.String getPostureRevisionId() {
    return postureRevisionId;
  }

  /**
   * Required. The revision ID of the posture used in the deployment.
   * @param postureRevisionId postureRevisionId or {@code null} for none
   */
  public PostureDeployment setPostureRevisionId(java.lang.String postureRevisionId) {
    this.postureRevisionId = postureRevisionId;
    return this;
  }

  /**
   * Output only. Whether the posture deployment is in the process of being updated.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReconciling() {
    return reconciling;
  }

  /**
   * Output only. Whether the posture deployment is in the process of being updated.
   * @param reconciling reconciling or {@code null} for none
   */
  public PostureDeployment setReconciling(java.lang.Boolean reconciling) {
    this.reconciling = reconciling;
    return this;
  }

  /**
   * Output only. The state of the posture deployment.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The state of the posture deployment.
   * @param state state or {@code null} for none
   */
  public PostureDeployment setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Required. The organization, folder, or project where the posture is deployed. Uses one of the
   * following formats: * `organizations/{organization_number}` * `folders/{folder_number}` *
   * `projects/{project_number}`
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetResource() {
    return targetResource;
  }

  /**
   * Required. The organization, folder, or project where the posture is deployed. Uses one of the
   * following formats: * `organizations/{organization_number}` * `folders/{folder_number}` *
   * `projects/{project_number}`
   * @param targetResource targetResource or {@code null} for none
   */
  public PostureDeployment setTargetResource(java.lang.String targetResource) {
    this.targetResource = targetResource;
    return this;
  }

  /**
   * Output only. The time at which the posture deployment was last updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The time at which the posture deployment was last updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public PostureDeployment setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public PostureDeployment set(String fieldName, Object value) {
    return (PostureDeployment) super.set(fieldName, value);
  }

  @Override
  public PostureDeployment clone() {
    return (PostureDeployment) super.clone();
  }

}
