/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.netapp.v1.model;

/**
 * Replication is a nested resource under Volume, that describes a cross-region replication
 * relationship between 2 volumes in different regions.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the NetApp API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Replication extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Location of the user cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String clusterLocation;

  /**
   * Output only. Replication create time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * A description about this replication relationship.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Output only. Full name of destination volume resource. Example :
   * "projects/{project}/locations/{location}/volumes/{volume_id}"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String destinationVolume;

  /**
   * Required. Input only. Destination volume parameters
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DestinationVolumeParameters destinationVolumeParameters;

  /**
   * Output only. Condition of the relationship. Can be one of the following: - true: The
   * replication relationship is healthy. It has not missed the most recent scheduled transfer. -
   * false: The replication relationship is not healthy. It has missed the most recent scheduled
   * transfer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean healthy;

  /**
   * Output only. Hybrid peering details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private HybridPeeringDetails hybridPeeringDetails;

  /**
   * Output only. Type of the hybrid replication.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hybridReplicationType;

  /**
   * Resource labels to represent user provided metadata.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Output only. Indicates the state of mirroring.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mirrorState;

  /**
   * Identifier. The resource name of the Replication. Format:
   * `projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Required. Indicates the schedule for replication.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String replicationSchedule;

  /**
   * Output only. Indicates whether this points to source or destination.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String role;

  /**
   * Output only. Full name of source volume resource. Example :
   * "projects/{project}/locations/{location}/volumes/{volume_id}"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sourceVolume;

  /**
   * Output only. State of the replication.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. State details of the replication.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String stateDetails;

  /**
   * Output only. Replication transfer statistics.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TransferStats transferStats;

  /**
   * Optional. Location of the user cluster.
   * @return value or {@code null} for none
   */
  public java.lang.String getClusterLocation() {
    return clusterLocation;
  }

  /**
   * Optional. Location of the user cluster.
   * @param clusterLocation clusterLocation or {@code null} for none
   */
  public Replication setClusterLocation(java.lang.String clusterLocation) {
    this.clusterLocation = clusterLocation;
    return this;
  }

  /**
   * Output only. Replication create time.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Replication create time.
   * @param createTime createTime or {@code null} for none
   */
  public Replication setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * A description about this replication relationship.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * A description about this replication relationship.
   * @param description description or {@code null} for none
   */
  public Replication setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Output only. Full name of destination volume resource. Example :
   * "projects/{project}/locations/{location}/volumes/{volume_id}"
   * @return value or {@code null} for none
   */
  public java.lang.String getDestinationVolume() {
    return destinationVolume;
  }

  /**
   * Output only. Full name of destination volume resource. Example :
   * "projects/{project}/locations/{location}/volumes/{volume_id}"
   * @param destinationVolume destinationVolume or {@code null} for none
   */
  public Replication setDestinationVolume(java.lang.String destinationVolume) {
    this.destinationVolume = destinationVolume;
    return this;
  }

  /**
   * Required. Input only. Destination volume parameters
   * @return value or {@code null} for none
   */
  public DestinationVolumeParameters getDestinationVolumeParameters() {
    return destinationVolumeParameters;
  }

  /**
   * Required. Input only. Destination volume parameters
   * @param destinationVolumeParameters destinationVolumeParameters or {@code null} for none
   */
  public Replication setDestinationVolumeParameters(DestinationVolumeParameters destinationVolumeParameters) {
    this.destinationVolumeParameters = destinationVolumeParameters;
    return this;
  }

  /**
   * Output only. Condition of the relationship. Can be one of the following: - true: The
   * replication relationship is healthy. It has not missed the most recent scheduled transfer. -
   * false: The replication relationship is not healthy. It has missed the most recent scheduled
   * transfer.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHealthy() {
    return healthy;
  }

  /**
   * Output only. Condition of the relationship. Can be one of the following: - true: The
   * replication relationship is healthy. It has not missed the most recent scheduled transfer. -
   * false: The replication relationship is not healthy. It has missed the most recent scheduled
   * transfer.
   * @param healthy healthy or {@code null} for none
   */
  public Replication setHealthy(java.lang.Boolean healthy) {
    this.healthy = healthy;
    return this;
  }

  /**
   * Output only. Hybrid peering details.
   * @return value or {@code null} for none
   */
  public HybridPeeringDetails getHybridPeeringDetails() {
    return hybridPeeringDetails;
  }

  /**
   * Output only. Hybrid peering details.
   * @param hybridPeeringDetails hybridPeeringDetails or {@code null} for none
   */
  public Replication setHybridPeeringDetails(HybridPeeringDetails hybridPeeringDetails) {
    this.hybridPeeringDetails = hybridPeeringDetails;
    return this;
  }

  /**
   * Output only. Type of the hybrid replication.
   * @return value or {@code null} for none
   */
  public java.lang.String getHybridReplicationType() {
    return hybridReplicationType;
  }

  /**
   * Output only. Type of the hybrid replication.
   * @param hybridReplicationType hybridReplicationType or {@code null} for none
   */
  public Replication setHybridReplicationType(java.lang.String hybridReplicationType) {
    this.hybridReplicationType = hybridReplicationType;
    return this;
  }

  /**
   * Resource labels to represent user provided metadata.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Resource labels to represent user provided metadata.
   * @param labels labels or {@code null} for none
   */
  public Replication setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Output only. Indicates the state of mirroring.
   * @return value or {@code null} for none
   */
  public java.lang.String getMirrorState() {
    return mirrorState;
  }

  /**
   * Output only. Indicates the state of mirroring.
   * @param mirrorState mirrorState or {@code null} for none
   */
  public Replication setMirrorState(java.lang.String mirrorState) {
    this.mirrorState = mirrorState;
    return this;
  }

  /**
   * Identifier. The resource name of the Replication. Format:
   * `projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The resource name of the Replication. Format:
   * `projects/{project_id}/locations/{location}/volumes/{volume_id}/replications/{replication_id}`.
   * @param name name or {@code null} for none
   */
  public Replication setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Indicates the schedule for replication.
   * @return value or {@code null} for none
   */
  public java.lang.String getReplicationSchedule() {
    return replicationSchedule;
  }

  /**
   * Required. Indicates the schedule for replication.
   * @param replicationSchedule replicationSchedule or {@code null} for none
   */
  public Replication setReplicationSchedule(java.lang.String replicationSchedule) {
    this.replicationSchedule = replicationSchedule;
    return this;
  }

  /**
   * Output only. Indicates whether this points to source or destination.
   * @return value or {@code null} for none
   */
  public java.lang.String getRole() {
    return role;
  }

  /**
   * Output only. Indicates whether this points to source or destination.
   * @param role role or {@code null} for none
   */
  public Replication setRole(java.lang.String role) {
    this.role = role;
    return this;
  }

  /**
   * Output only. Full name of source volume resource. Example :
   * "projects/{project}/locations/{location}/volumes/{volume_id}"
   * @return value or {@code null} for none
   */
  public java.lang.String getSourceVolume() {
    return sourceVolume;
  }

  /**
   * Output only. Full name of source volume resource. Example :
   * "projects/{project}/locations/{location}/volumes/{volume_id}"
   * @param sourceVolume sourceVolume or {@code null} for none
   */
  public Replication setSourceVolume(java.lang.String sourceVolume) {
    this.sourceVolume = sourceVolume;
    return this;
  }

  /**
   * Output only. State of the replication.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. State of the replication.
   * @param state state or {@code null} for none
   */
  public Replication setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. State details of the replication.
   * @return value or {@code null} for none
   */
  public java.lang.String getStateDetails() {
    return stateDetails;
  }

  /**
   * Output only. State details of the replication.
   * @param stateDetails stateDetails or {@code null} for none
   */
  public Replication setStateDetails(java.lang.String stateDetails) {
    this.stateDetails = stateDetails;
    return this;
  }

  /**
   * Output only. Replication transfer statistics.
   * @return value or {@code null} for none
   */
  public TransferStats getTransferStats() {
    return transferStats;
  }

  /**
   * Output only. Replication transfer statistics.
   * @param transferStats transferStats or {@code null} for none
   */
  public Replication setTransferStats(TransferStats transferStats) {
    this.transferStats = transferStats;
    return this;
  }

  @Override
  public Replication set(String fieldName, Object value) {
    return (Replication) super.set(fieldName, value);
  }

  @Override
  public Replication clone() {
    return (Replication) super.clone();
  }

}
