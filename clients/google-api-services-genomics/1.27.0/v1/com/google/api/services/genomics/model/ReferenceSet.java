/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.genomics.model;

/**
 * A reference set is a set of references which typically comprise a reference assembly for a
 * species, such as `GRCh38` which is representative of the human genome. A reference set defines a
 * common coordinate space for comparing reference-aligned experimental data. A reference set
 * contains 1 or more references.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Genomics API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ReferenceSet extends com.google.api.client.json.GenericJson {

  /**
   * Public id of this reference set, such as `GRCh37`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String assemblyId;

  /**
   * Free text description of this reference set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * The server-generated reference set ID, unique across all reference sets.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * Order-independent MD5 checksum which identifies this reference set. The checksum is computed by
   * sorting all lower case hexidecimal string `reference.md5checksum` (for all reference in this
   * set) in ascending lexicographic order, concatenating, and taking the MD5 of that value. The
   * resulting value is represented in lower case hexadecimal format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String md5checksum;

  /**
   * ID from http://www.ncbi.nlm.nih.gov/taxonomy (for example, 9606 for human) indicating the
   * species which this reference set is intended to model. Note that contained references may
   * specify a different `ncbiTaxonId`, as assemblies may contain reference sequences which do not
   * belong to the modeled species, for example EBV in a human reference genome.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer ncbiTaxonId;

  /**
   * The IDs of the reference objects that are part of this set. `Reference.md5checksum` must be
   * unique within this set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> referenceIds;

  /**
   * All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version
   * number, for example `NC_000001.11`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> sourceAccessions;

  /**
   * The URI from which the references were obtained.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sourceUri;

  /**
   * Public id of this reference set, such as `GRCh37`.
   * @return value or {@code null} for none
   */
  public java.lang.String getAssemblyId() {
    return assemblyId;
  }

  /**
   * Public id of this reference set, such as `GRCh37`.
   * @param assemblyId assemblyId or {@code null} for none
   */
  public ReferenceSet setAssemblyId(java.lang.String assemblyId) {
    this.assemblyId = assemblyId;
    return this;
  }

  /**
   * Free text description of this reference set.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Free text description of this reference set.
   * @param description description or {@code null} for none
   */
  public ReferenceSet setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * The server-generated reference set ID, unique across all reference sets.
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * The server-generated reference set ID, unique across all reference sets.
   * @param id id or {@code null} for none
   */
  public ReferenceSet setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * Order-independent MD5 checksum which identifies this reference set. The checksum is computed by
   * sorting all lower case hexidecimal string `reference.md5checksum` (for all reference in this
   * set) in ascending lexicographic order, concatenating, and taking the MD5 of that value. The
   * resulting value is represented in lower case hexadecimal format.
   * @return value or {@code null} for none
   */
  public java.lang.String getMd5checksum() {
    return md5checksum;
  }

  /**
   * Order-independent MD5 checksum which identifies this reference set. The checksum is computed by
   * sorting all lower case hexidecimal string `reference.md5checksum` (for all reference in this
   * set) in ascending lexicographic order, concatenating, and taking the MD5 of that value. The
   * resulting value is represented in lower case hexadecimal format.
   * @param md5checksum md5checksum or {@code null} for none
   */
  public ReferenceSet setMd5checksum(java.lang.String md5checksum) {
    this.md5checksum = md5checksum;
    return this;
  }

  /**
   * ID from http://www.ncbi.nlm.nih.gov/taxonomy (for example, 9606 for human) indicating the
   * species which this reference set is intended to model. Note that contained references may
   * specify a different `ncbiTaxonId`, as assemblies may contain reference sequences which do not
   * belong to the modeled species, for example EBV in a human reference genome.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNcbiTaxonId() {
    return ncbiTaxonId;
  }

  /**
   * ID from http://www.ncbi.nlm.nih.gov/taxonomy (for example, 9606 for human) indicating the
   * species which this reference set is intended to model. Note that contained references may
   * specify a different `ncbiTaxonId`, as assemblies may contain reference sequences which do not
   * belong to the modeled species, for example EBV in a human reference genome.
   * @param ncbiTaxonId ncbiTaxonId or {@code null} for none
   */
  public ReferenceSet setNcbiTaxonId(java.lang.Integer ncbiTaxonId) {
    this.ncbiTaxonId = ncbiTaxonId;
    return this;
  }

  /**
   * The IDs of the reference objects that are part of this set. `Reference.md5checksum` must be
   * unique within this set.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getReferenceIds() {
    return referenceIds;
  }

  /**
   * The IDs of the reference objects that are part of this set. `Reference.md5checksum` must be
   * unique within this set.
   * @param referenceIds referenceIds or {@code null} for none
   */
  public ReferenceSet setReferenceIds(java.util.List<java.lang.String> referenceIds) {
    this.referenceIds = referenceIds;
    return this;
  }

  /**
   * All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version
   * number, for example `NC_000001.11`.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSourceAccessions() {
    return sourceAccessions;
  }

  /**
   * All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version
   * number, for example `NC_000001.11`.
   * @param sourceAccessions sourceAccessions or {@code null} for none
   */
  public ReferenceSet setSourceAccessions(java.util.List<java.lang.String> sourceAccessions) {
    this.sourceAccessions = sourceAccessions;
    return this;
  }

  /**
   * The URI from which the references were obtained.
   * @return value or {@code null} for none
   */
  public java.lang.String getSourceUri() {
    return sourceUri;
  }

  /**
   * The URI from which the references were obtained.
   * @param sourceUri sourceUri or {@code null} for none
   */
  public ReferenceSet setSourceUri(java.lang.String sourceUri) {
    this.sourceUri = sourceUri;
    return this;
  }

  @Override
  public ReferenceSet set(String fieldName, Object value) {
    return (ReferenceSet) super.set(fieldName, value);
  }

  @Override
  public ReferenceSet clone() {
    return (ReferenceSet) super.clone();
  }

}
