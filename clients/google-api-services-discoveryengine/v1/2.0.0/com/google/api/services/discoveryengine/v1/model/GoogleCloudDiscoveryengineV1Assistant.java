/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.discoveryengine.v1.model;

/**
 * Discovery Engine Assistant resource.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Discovery Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDiscoveryengineV1Assistant extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Customer policy for the assistant.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1AssistantCustomerPolicy customerPolicy;

  /**
   * Optional. Note: not implemented yet. Use enabled_actions instead. The enabled tools on this
   * assistant. The keys are connector name, for example
   * "projects/{projectId}/locations/{locationId}/collections/{collectionId}/dataconnector The
   * values consist of admin enabled tools towards the connector instance. Admin can selectively
   * enable multiple tools on any of the connector instances that they created in the project. For
   * example {"jira1ConnectorName": [(toolId1, "createTicket"), (toolId2, "transferTicket")],
   * "gmail1ConnectorName": [(toolId3, "sendEmail"),..] }
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, GoogleCloudDiscoveryengineV1AssistantToolList> enabledTools;

  /**
   * Optional. Configuration for the generation of the assistant response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1AssistantGenerationConfig generationConfig;

  /**
   * Immutable. Resource name of the assistant. Format: `projects/{project}/locations/{location}/col
   * lections/{collection}/engines/{engine}/assistants/{assistant}` It must be a UTF-8 encoded
   * string with a length limit of 1024 characters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. The type of web grounding to use.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String webGroundingType;

  /**
   * Optional. Customer policy for the assistant.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1AssistantCustomerPolicy getCustomerPolicy() {
    return customerPolicy;
  }

  /**
   * Optional. Customer policy for the assistant.
   * @param customerPolicy customerPolicy or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1Assistant setCustomerPolicy(GoogleCloudDiscoveryengineV1AssistantCustomerPolicy customerPolicy) {
    this.customerPolicy = customerPolicy;
    return this;
  }

  /**
   * Optional. Note: not implemented yet. Use enabled_actions instead. The enabled tools on this
   * assistant. The keys are connector name, for example
   * "projects/{projectId}/locations/{locationId}/collections/{collectionId}/dataconnector The
   * values consist of admin enabled tools towards the connector instance. Admin can selectively
   * enable multiple tools on any of the connector instances that they created in the project. For
   * example {"jira1ConnectorName": [(toolId1, "createTicket"), (toolId2, "transferTicket")],
   * "gmail1ConnectorName": [(toolId3, "sendEmail"),..] }
   * @return value or {@code null} for none
   */
  public java.util.Map<String, GoogleCloudDiscoveryengineV1AssistantToolList> getEnabledTools() {
    return enabledTools;
  }

  /**
   * Optional. Note: not implemented yet. Use enabled_actions instead. The enabled tools on this
   * assistant. The keys are connector name, for example
   * "projects/{projectId}/locations/{locationId}/collections/{collectionId}/dataconnector The
   * values consist of admin enabled tools towards the connector instance. Admin can selectively
   * enable multiple tools on any of the connector instances that they created in the project. For
   * example {"jira1ConnectorName": [(toolId1, "createTicket"), (toolId2, "transferTicket")],
   * "gmail1ConnectorName": [(toolId3, "sendEmail"),..] }
   * @param enabledTools enabledTools or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1Assistant setEnabledTools(java.util.Map<String, GoogleCloudDiscoveryengineV1AssistantToolList> enabledTools) {
    this.enabledTools = enabledTools;
    return this;
  }

  /**
   * Optional. Configuration for the generation of the assistant response.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1AssistantGenerationConfig getGenerationConfig() {
    return generationConfig;
  }

  /**
   * Optional. Configuration for the generation of the assistant response.
   * @param generationConfig generationConfig or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1Assistant setGenerationConfig(GoogleCloudDiscoveryengineV1AssistantGenerationConfig generationConfig) {
    this.generationConfig = generationConfig;
    return this;
  }

  /**
   * Immutable. Resource name of the assistant. Format: `projects/{project}/locations/{location}/col
   * lections/{collection}/engines/{engine}/assistants/{assistant}` It must be a UTF-8 encoded
   * string with a length limit of 1024 characters.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Immutable. Resource name of the assistant. Format: `projects/{project}/locations/{location}/col
   * lections/{collection}/engines/{engine}/assistants/{assistant}` It must be a UTF-8 encoded
   * string with a length limit of 1024 characters.
   * @param name name or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1Assistant setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. The type of web grounding to use.
   * @return value or {@code null} for none
   */
  public java.lang.String getWebGroundingType() {
    return webGroundingType;
  }

  /**
   * Optional. The type of web grounding to use.
   * @param webGroundingType webGroundingType or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1Assistant setWebGroundingType(java.lang.String webGroundingType) {
    this.webGroundingType = webGroundingType;
    return this;
  }

  @Override
  public GoogleCloudDiscoveryengineV1Assistant set(String fieldName, Object value) {
    return (GoogleCloudDiscoveryengineV1Assistant) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDiscoveryengineV1Assistant clone() {
    return (GoogleCloudDiscoveryengineV1Assistant) super.clone();
  }

}
