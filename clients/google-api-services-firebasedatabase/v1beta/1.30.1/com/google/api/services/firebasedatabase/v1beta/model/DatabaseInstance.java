/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebasedatabase.v1beta.model;

/**
 * Representation of a Realtime Database instance. Details on interacting with contents of a
 * DatabaseInstance can be found at: https://firebase.google.com/docs/database/rest/start.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase Realtime Database Management API. For a
 * detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DatabaseInstance extends com.google.api.client.json.GenericJson {

  /**
   * Immutable. The globally unique hostname of the database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String databaseUrl;

  /**
   * The fully qualified resource name of the database instance, in the form: `projects/{project-
   * number}/locations/{location-id}/instances/{database-id}`. Currently the only supported location
   * is 'us-central1'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The resource name of the project this instance belongs to. For example: `projects/{project-
   * number}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String project;

  /**
   * The database's lifecycle state. Read-only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * The database instance type. On creation only USER_DATABASE is allowed, which is also the
   * default when omitted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Immutable. The globally unique hostname of the database.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabaseUrl() {
    return databaseUrl;
  }

  /**
   * Immutable. The globally unique hostname of the database.
   * @param databaseUrl databaseUrl or {@code null} for none
   */
  public DatabaseInstance setDatabaseUrl(java.lang.String databaseUrl) {
    this.databaseUrl = databaseUrl;
    return this;
  }

  /**
   * The fully qualified resource name of the database instance, in the form: `projects/{project-
   * number}/locations/{location-id}/instances/{database-id}`. Currently the only supported location
   * is 'us-central1'.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The fully qualified resource name of the database instance, in the form: `projects/{project-
   * number}/locations/{location-id}/instances/{database-id}`. Currently the only supported location
   * is 'us-central1'.
   * @param name name or {@code null} for none
   */
  public DatabaseInstance setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the project this instance belongs to. For example: `projects/{project-
   * number}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getProject() {
    return project;
  }

  /**
   * The resource name of the project this instance belongs to. For example: `projects/{project-
   * number}`.
   * @param project project or {@code null} for none
   */
  public DatabaseInstance setProject(java.lang.String project) {
    this.project = project;
    return this;
  }

  /**
   * The database's lifecycle state. Read-only.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * The database's lifecycle state. Read-only.
   * @param state state or {@code null} for none
   */
  public DatabaseInstance setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * The database instance type. On creation only USER_DATABASE is allowed, which is also the
   * default when omitted.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The database instance type. On creation only USER_DATABASE is allowed, which is also the
   * default when omitted.
   * @param type type or {@code null} for none
   */
  public DatabaseInstance setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public DatabaseInstance set(String fieldName, Object value) {
    return (DatabaseInstance) super.set(fieldName, value);
  }

  @Override
  public DatabaseInstance clone() {
    return (DatabaseInstance) super.clone();
  }

}
