/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudtrace.v2.model;

/**
 * An event describing a message sent/received between Spans.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Stackdriver Trace API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MessageEvent extends com.google.api.client.json.GenericJson {

  /**
   * The number of compressed bytes sent or received. If missing assumed to be the same size as
   * uncompressed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long compressedSizeBytes;

  /**
   * An identifier for the MessageEvent's message that can be used to match SENT and RECEIVED
   * MessageEvents. It is recommended to be unique within a Span.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long id;

  /**
   * Type of MessageEvent. Indicates whether the message was sent or received.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * The number of uncompressed bytes sent or received.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long uncompressedSizeBytes;

  /**
   * The number of compressed bytes sent or received. If missing assumed to be the same size as
   * uncompressed.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCompressedSizeBytes() {
    return compressedSizeBytes;
  }

  /**
   * The number of compressed bytes sent or received. If missing assumed to be the same size as
   * uncompressed.
   * @param compressedSizeBytes compressedSizeBytes or {@code null} for none
   */
  public MessageEvent setCompressedSizeBytes(java.lang.Long compressedSizeBytes) {
    this.compressedSizeBytes = compressedSizeBytes;
    return this;
  }

  /**
   * An identifier for the MessageEvent's message that can be used to match SENT and RECEIVED
   * MessageEvents. It is recommended to be unique within a Span.
   * @return value or {@code null} for none
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * An identifier for the MessageEvent's message that can be used to match SENT and RECEIVED
   * MessageEvents. It is recommended to be unique within a Span.
   * @param id id or {@code null} for none
   */
  public MessageEvent setId(java.lang.Long id) {
    this.id = id;
    return this;
  }

  /**
   * Type of MessageEvent. Indicates whether the message was sent or received.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Type of MessageEvent. Indicates whether the message was sent or received.
   * @param type type or {@code null} for none
   */
  public MessageEvent setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * The number of uncompressed bytes sent or received.
   * @return value or {@code null} for none
   */
  public java.lang.Long getUncompressedSizeBytes() {
    return uncompressedSizeBytes;
  }

  /**
   * The number of uncompressed bytes sent or received.
   * @param uncompressedSizeBytes uncompressedSizeBytes or {@code null} for none
   */
  public MessageEvent setUncompressedSizeBytes(java.lang.Long uncompressedSizeBytes) {
    this.uncompressedSizeBytes = uncompressedSizeBytes;
    return this;
  }

  @Override
  public MessageEvent set(String fieldName, Object value) {
    return (MessageEvent) super.set(fieldName, value);
  }

  @Override
  public MessageEvent clone() {
    return (MessageEvent) super.clone();
  }

}
