/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataproc.model;

/**
 * A representation of a session template in the service. Next ID: 12
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Dataproc API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SessionTemplate extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The time when the template was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Output only. The email address of the user who created the template.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String creator;

  /**
   * Optional. Brief description of the template.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Optional. Environment configuration for session execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EnvironmentConfig environmentConfig;

  /**
   * Optional. Jupyter session config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private JupyterConfig jupyterSession;

  /**
   * Optional. The labels to associate with sessions created using this template. Label keys must
   * contain 1 to 63 characters, and must conform to RFC 1035
   * (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must
   * contain 1 to 63 characters, and must conform to RFC 1035
   * (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a
   * session.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Required. The resource name of the session template.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. Runtime configuration for session execution.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RuntimeConfig runtimeConfig;

  /**
   * Output only. The time template was last updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. The time when the template was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time when the template was created.
   * @param createTime createTime or {@code null} for none
   */
  public SessionTemplate setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. The email address of the user who created the template.
   * @return value or {@code null} for none
   */
  public java.lang.String getCreator() {
    return creator;
  }

  /**
   * Output only. The email address of the user who created the template.
   * @param creator creator or {@code null} for none
   */
  public SessionTemplate setCreator(java.lang.String creator) {
    this.creator = creator;
    return this;
  }

  /**
   * Optional. Brief description of the template.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Optional. Brief description of the template.
   * @param description description or {@code null} for none
   */
  public SessionTemplate setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Environment configuration for session execution.
   * @return value or {@code null} for none
   */
  public EnvironmentConfig getEnvironmentConfig() {
    return environmentConfig;
  }

  /**
   * Optional. Environment configuration for session execution.
   * @param environmentConfig environmentConfig or {@code null} for none
   */
  public SessionTemplate setEnvironmentConfig(EnvironmentConfig environmentConfig) {
    this.environmentConfig = environmentConfig;
    return this;
  }

  /**
   * Optional. Jupyter session config.
   * @return value or {@code null} for none
   */
  public JupyterConfig getJupyterSession() {
    return jupyterSession;
  }

  /**
   * Optional. Jupyter session config.
   * @param jupyterSession jupyterSession or {@code null} for none
   */
  public SessionTemplate setJupyterSession(JupyterConfig jupyterSession) {
    this.jupyterSession = jupyterSession;
    return this;
  }

  /**
   * Optional. The labels to associate with sessions created using this template. Label keys must
   * contain 1 to 63 characters, and must conform to RFC 1035
   * (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must
   * contain 1 to 63 characters, and must conform to RFC 1035
   * (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a
   * session.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. The labels to associate with sessions created using this template. Label keys must
   * contain 1 to 63 characters, and must conform to RFC 1035
   * (https://www.ietf.org/rfc/rfc1035.txt). Label values may be empty, but, if present, must
   * contain 1 to 63 characters, and must conform to RFC 1035
   * (https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a
   * session.
   * @param labels labels or {@code null} for none
   */
  public SessionTemplate setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Required. The resource name of the session template.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required. The resource name of the session template.
   * @param name name or {@code null} for none
   */
  public SessionTemplate setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Runtime configuration for session execution.
   * @return value or {@code null} for none
   */
  public RuntimeConfig getRuntimeConfig() {
    return runtimeConfig;
  }

  /**
   * Optional. Runtime configuration for session execution.
   * @param runtimeConfig runtimeConfig or {@code null} for none
   */
  public SessionTemplate setRuntimeConfig(RuntimeConfig runtimeConfig) {
    this.runtimeConfig = runtimeConfig;
    return this;
  }

  /**
   * Output only. The time template was last updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The time template was last updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public SessionTemplate setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public SessionTemplate set(String fieldName, Object value) {
    return (SessionTemplate) super.set(fieldName, value);
  }

  @Override
  public SessionTemplate clone() {
    return (SessionTemplate) super.clone();
  }

}
