/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.netapp.v1beta1.model;

/**
 * Backup Policy.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the NetApp API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BackupPolicy extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The total number of volumes assigned by this backup policy.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer assignedVolumeCount;

  /**
   * Output only. The time when the backup policy was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Number of daily backups to keep. Note that the minimum daily backup limit is 2.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer dailyBackupLimit;

  /**
   * Description of the backup policy.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * If enabled, make backups automatically according to the schedules. This will be applied to all
   * volumes that have this policy attached and enforced on volume level. If not specified, default
   * is true.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean enabled;

  /**
   * Resource labels to represent user provided metadata.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups
   * should be greater than 1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer monthlyBackupLimit;

  /**
   * Identifier. The resource name of the backup policy. Format:
   * `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The backup policy state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should
   * be greater than 1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer weeklyBackupLimit;

  /**
   * Output only. The total number of volumes assigned by this backup policy.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAssignedVolumeCount() {
    return assignedVolumeCount;
  }

  /**
   * Output only. The total number of volumes assigned by this backup policy.
   * @param assignedVolumeCount assignedVolumeCount or {@code null} for none
   */
  public BackupPolicy setAssignedVolumeCount(java.lang.Integer assignedVolumeCount) {
    this.assignedVolumeCount = assignedVolumeCount;
    return this;
  }

  /**
   * Output only. The time when the backup policy was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time when the backup policy was created.
   * @param createTime createTime or {@code null} for none
   */
  public BackupPolicy setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Number of daily backups to keep. Note that the minimum daily backup limit is 2.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDailyBackupLimit() {
    return dailyBackupLimit;
  }

  /**
   * Number of daily backups to keep. Note that the minimum daily backup limit is 2.
   * @param dailyBackupLimit dailyBackupLimit or {@code null} for none
   */
  public BackupPolicy setDailyBackupLimit(java.lang.Integer dailyBackupLimit) {
    this.dailyBackupLimit = dailyBackupLimit;
    return this;
  }

  /**
   * Description of the backup policy.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Description of the backup policy.
   * @param description description or {@code null} for none
   */
  public BackupPolicy setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * If enabled, make backups automatically according to the schedules. This will be applied to all
   * volumes that have this policy attached and enforced on volume level. If not specified, default
   * is true.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEnabled() {
    return enabled;
  }

  /**
   * If enabled, make backups automatically according to the schedules. This will be applied to all
   * volumes that have this policy attached and enforced on volume level. If not specified, default
   * is true.
   * @param enabled enabled or {@code null} for none
   */
  public BackupPolicy setEnabled(java.lang.Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Resource labels to represent user provided metadata.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Resource labels to represent user provided metadata.
   * @param labels labels or {@code null} for none
   */
  public BackupPolicy setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups
   * should be greater than 1.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMonthlyBackupLimit() {
    return monthlyBackupLimit;
  }

  /**
   * Number of monthly backups to keep. Note that the sum of daily, weekly and monthly backups
   * should be greater than 1.
   * @param monthlyBackupLimit monthlyBackupLimit or {@code null} for none
   */
  public BackupPolicy setMonthlyBackupLimit(java.lang.Integer monthlyBackupLimit) {
    this.monthlyBackupLimit = monthlyBackupLimit;
    return this;
  }

  /**
   * Identifier. The resource name of the backup policy. Format:
   * `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The resource name of the backup policy. Format:
   * `projects/{project_id}/locations/{location}/backupPolicies/{backup_policy_id}`.
   * @param name name or {@code null} for none
   */
  public BackupPolicy setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The backup policy state.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The backup policy state.
   * @param state state or {@code null} for none
   */
  public BackupPolicy setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should
   * be greater than 1.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWeeklyBackupLimit() {
    return weeklyBackupLimit;
  }

  /**
   * Number of weekly backups to keep. Note that the sum of daily, weekly and monthly backups should
   * be greater than 1.
   * @param weeklyBackupLimit weeklyBackupLimit or {@code null} for none
   */
  public BackupPolicy setWeeklyBackupLimit(java.lang.Integer weeklyBackupLimit) {
    this.weeklyBackupLimit = weeklyBackupLimit;
    return this;
  }

  @Override
  public BackupPolicy set(String fieldName, Object value) {
    return (BackupPolicy) super.set(fieldName, value);
  }

  @Override
  public BackupPolicy clone() {
    return (BackupPolicy) super.clone();
  }

}
