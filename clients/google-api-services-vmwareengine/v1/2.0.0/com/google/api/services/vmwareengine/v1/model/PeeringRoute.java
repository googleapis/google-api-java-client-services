/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vmwareengine.v1.model;

/**
 * Exchanged network peering route.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the VMware Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PeeringRoute extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Destination range of the peering route in CIDR notation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String destRange;

  /**
   * Output only. Direction of the routes exchanged with the peer network, from the VMware Engine
   * network perspective: * Routes of direction `INCOMING` are imported from the peer network. *
   * Routes of direction `OUTGOING` are exported from the intranet VPC network of the VMware Engine
   * network.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String direction;

  /**
   * Output only. True if the peering route has been imported from a peered VPC network; false
   * otherwise. The import happens if the field `NetworkPeering.importCustomRoutes` is true for this
   * network, `NetworkPeering.exportCustomRoutes` is true for the peer VPC network, and the import
   * does not result in a route conflict.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean imported;

  /**
   * Output only. Region containing the next hop of the peering route. This field only applies to
   * dynamic routes in the peer VPC network.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nextHopRegion;

  /**
   * Output only. The priority of the peering route.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long priority;

  /**
   * Output only. Type of the route in the peer VPC network.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Output only. Destination range of the peering route in CIDR notation.
   * @return value or {@code null} for none
   */
  public java.lang.String getDestRange() {
    return destRange;
  }

  /**
   * Output only. Destination range of the peering route in CIDR notation.
   * @param destRange destRange or {@code null} for none
   */
  public PeeringRoute setDestRange(java.lang.String destRange) {
    this.destRange = destRange;
    return this;
  }

  /**
   * Output only. Direction of the routes exchanged with the peer network, from the VMware Engine
   * network perspective: * Routes of direction `INCOMING` are imported from the peer network. *
   * Routes of direction `OUTGOING` are exported from the intranet VPC network of the VMware Engine
   * network.
   * @return value or {@code null} for none
   */
  public java.lang.String getDirection() {
    return direction;
  }

  /**
   * Output only. Direction of the routes exchanged with the peer network, from the VMware Engine
   * network perspective: * Routes of direction `INCOMING` are imported from the peer network. *
   * Routes of direction `OUTGOING` are exported from the intranet VPC network of the VMware Engine
   * network.
   * @param direction direction or {@code null} for none
   */
  public PeeringRoute setDirection(java.lang.String direction) {
    this.direction = direction;
    return this;
  }

  /**
   * Output only. True if the peering route has been imported from a peered VPC network; false
   * otherwise. The import happens if the field `NetworkPeering.importCustomRoutes` is true for this
   * network, `NetworkPeering.exportCustomRoutes` is true for the peer VPC network, and the import
   * does not result in a route conflict.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getImported() {
    return imported;
  }

  /**
   * Output only. True if the peering route has been imported from a peered VPC network; false
   * otherwise. The import happens if the field `NetworkPeering.importCustomRoutes` is true for this
   * network, `NetworkPeering.exportCustomRoutes` is true for the peer VPC network, and the import
   * does not result in a route conflict.
   * @param imported imported or {@code null} for none
   */
  public PeeringRoute setImported(java.lang.Boolean imported) {
    this.imported = imported;
    return this;
  }

  /**
   * Output only. Region containing the next hop of the peering route. This field only applies to
   * dynamic routes in the peer VPC network.
   * @return value or {@code null} for none
   */
  public java.lang.String getNextHopRegion() {
    return nextHopRegion;
  }

  /**
   * Output only. Region containing the next hop of the peering route. This field only applies to
   * dynamic routes in the peer VPC network.
   * @param nextHopRegion nextHopRegion or {@code null} for none
   */
  public PeeringRoute setNextHopRegion(java.lang.String nextHopRegion) {
    this.nextHopRegion = nextHopRegion;
    return this;
  }

  /**
   * Output only. The priority of the peering route.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPriority() {
    return priority;
  }

  /**
   * Output only. The priority of the peering route.
   * @param priority priority or {@code null} for none
   */
  public PeeringRoute setPriority(java.lang.Long priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Output only. Type of the route in the peer VPC network.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Output only. Type of the route in the peer VPC network.
   * @param type type or {@code null} for none
   */
  public PeeringRoute setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public PeeringRoute set(String fieldName, Object value) {
    return (PeeringRoute) super.set(fieldName, value);
  }

  @Override
  public PeeringRoute clone() {
    return (PeeringRoute) super.clone();
  }

}
