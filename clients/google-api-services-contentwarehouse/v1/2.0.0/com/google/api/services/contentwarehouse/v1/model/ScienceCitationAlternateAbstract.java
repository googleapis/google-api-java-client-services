/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * There are templated functions that fill the abstract fields designed to take either
 * ScienceCitation or ScienceCitation::AlternateAbstract, so these field names must match those used
 * for the primary abstract.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ScienceCitationAlternateAbstract extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("AbstractDisplay")
  private java.lang.String abstractDisplay;

  /**
   * Version of abstract field for display. This may contain XML/HTML tags.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("AbstractHtml")
  private java.lang.String abstractHtml;

  /**
   * Leftovers from AbstractHtml. These are usually unrecognized xml/html entities or xml/html tags
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("AbstractHtmlLeftOver")
  private java.lang.String abstractHtmlLeftOver;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("AbstractLanguage")
  private java.lang.String abstractLanguage;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("AbstractText")
  private java.lang.String abstractText;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAbstractDisplay() {
    return abstractDisplay;
  }

  /**
   * @param abstractDisplay abstractDisplay or {@code null} for none
   */
  public ScienceCitationAlternateAbstract setAbstractDisplay(java.lang.String abstractDisplay) {
    this.abstractDisplay = abstractDisplay;
    return this;
  }

  /**
   * Version of abstract field for display. This may contain XML/HTML tags.
   * @return value or {@code null} for none
   */
  public java.lang.String getAbstractHtml() {
    return abstractHtml;
  }

  /**
   * Version of abstract field for display. This may contain XML/HTML tags.
   * @param abstractHtml abstractHtml or {@code null} for none
   */
  public ScienceCitationAlternateAbstract setAbstractHtml(java.lang.String abstractHtml) {
    this.abstractHtml = abstractHtml;
    return this;
  }

  /**
   * Leftovers from AbstractHtml. These are usually unrecognized xml/html entities or xml/html tags
   * @return value or {@code null} for none
   */
  public java.lang.String getAbstractHtmlLeftOver() {
    return abstractHtmlLeftOver;
  }

  /**
   * Leftovers from AbstractHtml. These are usually unrecognized xml/html entities or xml/html tags
   * @param abstractHtmlLeftOver abstractHtmlLeftOver or {@code null} for none
   */
  public ScienceCitationAlternateAbstract setAbstractHtmlLeftOver(java.lang.String abstractHtmlLeftOver) {
    this.abstractHtmlLeftOver = abstractHtmlLeftOver;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAbstractLanguage() {
    return abstractLanguage;
  }

  /**
   * @param abstractLanguage abstractLanguage or {@code null} for none
   */
  public ScienceCitationAlternateAbstract setAbstractLanguage(java.lang.String abstractLanguage) {
    this.abstractLanguage = abstractLanguage;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getAbstractText() {
    return abstractText;
  }

  /**
   * @param abstractText abstractText or {@code null} for none
   */
  public ScienceCitationAlternateAbstract setAbstractText(java.lang.String abstractText) {
    this.abstractText = abstractText;
    return this;
  }

  @Override
  public ScienceCitationAlternateAbstract set(String fieldName, Object value) {
    return (ScienceCitationAlternateAbstract) super.set(fieldName, value);
  }

  @Override
  public ScienceCitationAlternateAbstract clone() {
    return (ScienceCitationAlternateAbstract) super.clone();
  }

}
