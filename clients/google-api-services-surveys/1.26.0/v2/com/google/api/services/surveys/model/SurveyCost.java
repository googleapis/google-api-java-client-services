/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.surveys.model;

/**
 * Message defining the cost to run a given survey through API.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Surveys API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SurveyCost extends com.google.api.client.json.GenericJson {

  /**
   * Cost per survey response in nano units of the given currency. To get the total cost for a
   * survey, multiply this value by wanted_response_count.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long costPerResponseNanos;

  /**
   * Currency code that the cost is given in.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String currencyCode;

  /**
   * *Deprecated* Threshold to start a survey automatically if the quoted price is at most this
   * value. When a survey has a Screener (threshold) question, it must go through an incidence
   * pricing test to determine the final cost per response. Typically you will have to make a
   * followup call to start the survey giving the final computed cost per response. If the survey
   * has no threshold_answers, setting this property will return an error. By specifying this
   * property, you indicate the max price per response you are willing to pay in advance of the
   * incidence test. If the price turns out to be lower than the specified value, the survey will
   * begin immediately and you will be charged at the rate determined by the incidence pricing test.
   * If the price turns out to be greater than the specified value the survey will not be started
   * and you will instead be notified what price was determined by the incidence test. At that
   * point, you must raise the value of this property to be greater than or equal to that cost
   * before attempting to start the survey again. This will immediately start the survey as long the
   * incidence test was run within the last 21 days. This will no longer be available after June
   * 2018.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long maxCostPerResponseNanos;

  /**
   * Cost of survey in nano units of the given currency. DEPRECATED in favor of
   * cost_per_response_nanos
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long nanos;

  /**
   * Cost per survey response in nano units of the given currency. To get the total cost for a
   * survey, multiply this value by wanted_response_count.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCostPerResponseNanos() {
    return costPerResponseNanos;
  }

  /**
   * Cost per survey response in nano units of the given currency. To get the total cost for a
   * survey, multiply this value by wanted_response_count.
   * @param costPerResponseNanos costPerResponseNanos or {@code null} for none
   */
  public SurveyCost setCostPerResponseNanos(java.lang.Long costPerResponseNanos) {
    this.costPerResponseNanos = costPerResponseNanos;
    return this;
  }

  /**
   * Currency code that the cost is given in.
   * @return value or {@code null} for none
   */
  public java.lang.String getCurrencyCode() {
    return currencyCode;
  }

  /**
   * Currency code that the cost is given in.
   * @param currencyCode currencyCode or {@code null} for none
   */
  public SurveyCost setCurrencyCode(java.lang.String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * *Deprecated* Threshold to start a survey automatically if the quoted price is at most this
   * value. When a survey has a Screener (threshold) question, it must go through an incidence
   * pricing test to determine the final cost per response. Typically you will have to make a
   * followup call to start the survey giving the final computed cost per response. If the survey
   * has no threshold_answers, setting this property will return an error. By specifying this
   * property, you indicate the max price per response you are willing to pay in advance of the
   * incidence test. If the price turns out to be lower than the specified value, the survey will
   * begin immediately and you will be charged at the rate determined by the incidence pricing test.
   * If the price turns out to be greater than the specified value the survey will not be started
   * and you will instead be notified what price was determined by the incidence test. At that
   * point, you must raise the value of this property to be greater than or equal to that cost
   * before attempting to start the survey again. This will immediately start the survey as long the
   * incidence test was run within the last 21 days. This will no longer be available after June
   * 2018.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMaxCostPerResponseNanos() {
    return maxCostPerResponseNanos;
  }

  /**
   * *Deprecated* Threshold to start a survey automatically if the quoted price is at most this
   * value. When a survey has a Screener (threshold) question, it must go through an incidence
   * pricing test to determine the final cost per response. Typically you will have to make a
   * followup call to start the survey giving the final computed cost per response. If the survey
   * has no threshold_answers, setting this property will return an error. By specifying this
   * property, you indicate the max price per response you are willing to pay in advance of the
   * incidence test. If the price turns out to be lower than the specified value, the survey will
   * begin immediately and you will be charged at the rate determined by the incidence pricing test.
   * If the price turns out to be greater than the specified value the survey will not be started
   * and you will instead be notified what price was determined by the incidence test. At that
   * point, you must raise the value of this property to be greater than or equal to that cost
   * before attempting to start the survey again. This will immediately start the survey as long the
   * incidence test was run within the last 21 days. This will no longer be available after June
   * 2018.
   * @param maxCostPerResponseNanos maxCostPerResponseNanos or {@code null} for none
   */
  public SurveyCost setMaxCostPerResponseNanos(java.lang.Long maxCostPerResponseNanos) {
    this.maxCostPerResponseNanos = maxCostPerResponseNanos;
    return this;
  }

  /**
   * Cost of survey in nano units of the given currency. DEPRECATED in favor of
   * cost_per_response_nanos
   * @return value or {@code null} for none
   */
  public java.lang.Long getNanos() {
    return nanos;
  }

  /**
   * Cost of survey in nano units of the given currency. DEPRECATED in favor of
   * cost_per_response_nanos
   * @param nanos nanos or {@code null} for none
   */
  public SurveyCost setNanos(java.lang.Long nanos) {
    this.nanos = nanos;
    return this;
  }

  @Override
  public SurveyCost set(String fieldName, Object value) {
    return (SurveyCost) super.set(fieldName, value);
  }

  @Override
  public SurveyCost clone() {
    return (SurveyCost) super.clone();
  }

}
