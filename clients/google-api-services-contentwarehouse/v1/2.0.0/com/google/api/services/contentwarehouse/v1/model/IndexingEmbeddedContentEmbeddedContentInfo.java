/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This protobuf is used (1) To pass data between EmbeddedExporter and the publisher, and (2) As a
 * member of CompositeDoc, to stick embedded content output into the docjoins. Next tag available:
 * 21
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingEmbeddedContentEmbeddedContentInfo extends com.google.api.client.json.GenericJson {

  /**
   * The document's DOM and render tree produced by WebKit as a side effect of rendering the page.
   * It might be compressed or not. Thus, use indexing::embedded_content::UncompressWebkitDocument
   * to decode it.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String compressedDocumentTrees;

  /**
   * The converted contents, as produced by the same DocumentUpdater transaction that generated the
   * render tree. Useful whenever one of our users wants to experiment with deriving an annotation
   * from the render tree.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String convertedContents;

  /**
   * Information about all external resources needed to render this page, a.k.a. embedded links.
   * This includes .css files, images embedded in a page, external javascripts, iframes etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingEmbeddedContentEmbeddedLinksInfo embeddedLinksInfo;

  /**
   * The headless response for rendering the document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private HtmlrenderWebkitHeadlessProtoRenderResponse headlessResponse;

  /**
   * Indicate if the snapshot is generated from alternate snapshot. If true, the snapshot will be
   * exported even if the snapshot quality score is low.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isAlternateSnapshot;

  /**
   * The original encoding of the content crawled from trawler. It's the value of enum
   * i18n::encodings::encoding. We put a int32 here instead of encoding proto to maintain the
   * compatibility of "py_api_version = 1"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer originalEncoding;

  /**
   * *** DEPRECATED *** This field is only populated in fresh_doc which is shutting down.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingConverterRawRedirectInfo rawRedirectInfo;

  /**
   * Information about all external resources used to render this page, a.k.a. embedded links. This
   * includes .css files, images embedded in a page, external javascripts, iframes etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoReferencedResource> referencedResource;

  static {
    // hack to force ProGuard to consider HtmlrenderWebkitHeadlessProtoReferencedResource used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(HtmlrenderWebkitHeadlessProtoReferencedResource.class);
  }

  /**
   * Only exist in dry run mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private HtmlrenderWebkitHeadlessProtoImage renderedSnapshot;

  /**
   * Snapshot image of a rendered html document (possibly encoded as png, jpeg, or webp).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String renderedSnapshotImage;

  /**
   * A collection of values which are needed by the users of the Kodachrome bigtable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SnapshotSnapshotMetadata renderedSnapshotMetadata;

  /**
   * The quality of the image, 0.0 is the worst, 1.0 is the best. If all dependencies are
   * successfully crawled, the quality should be 1.0. If one or more of the dependencies are
   * unknown, the quality will be lower.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double renderedSnapshotQualityScore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingEmbeddedContentRenderingOutputMetadata renderingOutputMetadata;

  /**
   * The rich content data to recover the original contents from the converted_contents. Useful for
   * offline content analysis.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingConverterRichContentData richcontentData;

  /**
   * The document's DOM and render tree produced by WebKit as a side effect of rendering the page.
   * It might be compressed or not. Thus, use indexing::embedded_content::UncompressWebkitDocument
   * to decode it.
   * @see #decodeCompressedDocumentTrees()
   * @return value or {@code null} for none
   */
  public java.lang.String getCompressedDocumentTrees() {
    return compressedDocumentTrees;
  }

  /**
   * The document's DOM and render tree produced by WebKit as a side effect of rendering the page.
   * It might be compressed or not. Thus, use indexing::embedded_content::UncompressWebkitDocument
   * to decode it.
   * @see #getCompressedDocumentTrees()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeCompressedDocumentTrees() {
    return com.google.api.client.util.Base64.decodeBase64(compressedDocumentTrees);
  }

  /**
   * The document's DOM and render tree produced by WebKit as a side effect of rendering the page.
   * It might be compressed or not. Thus, use indexing::embedded_content::UncompressWebkitDocument
   * to decode it.
   * @see #encodeCompressedDocumentTrees()
   * @param compressedDocumentTrees compressedDocumentTrees or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setCompressedDocumentTrees(java.lang.String compressedDocumentTrees) {
    this.compressedDocumentTrees = compressedDocumentTrees;
    return this;
  }

  /**
   * The document's DOM and render tree produced by WebKit as a side effect of rendering the page.
   * It might be compressed or not. Thus, use indexing::embedded_content::UncompressWebkitDocument
   * to decode it.
   * @see #setCompressedDocumentTrees()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public IndexingEmbeddedContentEmbeddedContentInfo encodeCompressedDocumentTrees(byte[] compressedDocumentTrees) {
    this.compressedDocumentTrees = com.google.api.client.util.Base64.encodeBase64URLSafeString(compressedDocumentTrees);
    return this;
  }

  /**
   * The converted contents, as produced by the same DocumentUpdater transaction that generated the
   * render tree. Useful whenever one of our users wants to experiment with deriving an annotation
   * from the render tree.
   * @return value or {@code null} for none
   */
  public java.lang.String getConvertedContents() {
    return convertedContents;
  }

  /**
   * The converted contents, as produced by the same DocumentUpdater transaction that generated the
   * render tree. Useful whenever one of our users wants to experiment with deriving an annotation
   * from the render tree.
   * @param convertedContents convertedContents or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setConvertedContents(java.lang.String convertedContents) {
    this.convertedContents = convertedContents;
    return this;
  }

  /**
   * Information about all external resources needed to render this page, a.k.a. embedded links.
   * This includes .css files, images embedded in a page, external javascripts, iframes etc.
   * @return value or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedLinksInfo getEmbeddedLinksInfo() {
    return embeddedLinksInfo;
  }

  /**
   * Information about all external resources needed to render this page, a.k.a. embedded links.
   * This includes .css files, images embedded in a page, external javascripts, iframes etc.
   * @param embeddedLinksInfo embeddedLinksInfo or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setEmbeddedLinksInfo(IndexingEmbeddedContentEmbeddedLinksInfo embeddedLinksInfo) {
    this.embeddedLinksInfo = embeddedLinksInfo;
    return this;
  }

  /**
   * The headless response for rendering the document.
   * @return value or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoRenderResponse getHeadlessResponse() {
    return headlessResponse;
  }

  /**
   * The headless response for rendering the document.
   * @param headlessResponse headlessResponse or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setHeadlessResponse(HtmlrenderWebkitHeadlessProtoRenderResponse headlessResponse) {
    this.headlessResponse = headlessResponse;
    return this;
  }

  /**
   * Indicate if the snapshot is generated from alternate snapshot. If true, the snapshot will be
   * exported even if the snapshot quality score is low.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsAlternateSnapshot() {
    return isAlternateSnapshot;
  }

  /**
   * Indicate if the snapshot is generated from alternate snapshot. If true, the snapshot will be
   * exported even if the snapshot quality score is low.
   * @param isAlternateSnapshot isAlternateSnapshot or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setIsAlternateSnapshot(java.lang.Boolean isAlternateSnapshot) {
    this.isAlternateSnapshot = isAlternateSnapshot;
    return this;
  }

  /**
   * The original encoding of the content crawled from trawler. It's the value of enum
   * i18n::encodings::encoding. We put a int32 here instead of encoding proto to maintain the
   * compatibility of "py_api_version = 1"
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOriginalEncoding() {
    return originalEncoding;
  }

  /**
   * The original encoding of the content crawled from trawler. It's the value of enum
   * i18n::encodings::encoding. We put a int32 here instead of encoding proto to maintain the
   * compatibility of "py_api_version = 1"
   * @param originalEncoding originalEncoding or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setOriginalEncoding(java.lang.Integer originalEncoding) {
    this.originalEncoding = originalEncoding;
    return this;
  }

  /**
   * *** DEPRECATED *** This field is only populated in fresh_doc which is shutting down.
   * @return value or {@code null} for none
   */
  public IndexingConverterRawRedirectInfo getRawRedirectInfo() {
    return rawRedirectInfo;
  }

  /**
   * *** DEPRECATED *** This field is only populated in fresh_doc which is shutting down.
   * @param rawRedirectInfo rawRedirectInfo or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setRawRedirectInfo(IndexingConverterRawRedirectInfo rawRedirectInfo) {
    this.rawRedirectInfo = rawRedirectInfo;
    return this;
  }

  /**
   * Information about all external resources used to render this page, a.k.a. embedded links. This
   * includes .css files, images embedded in a page, external javascripts, iframes etc.
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoReferencedResource> getReferencedResource() {
    return referencedResource;
  }

  /**
   * Information about all external resources used to render this page, a.k.a. embedded links. This
   * includes .css files, images embedded in a page, external javascripts, iframes etc.
   * @param referencedResource referencedResource or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setReferencedResource(java.util.List<HtmlrenderWebkitHeadlessProtoReferencedResource> referencedResource) {
    this.referencedResource = referencedResource;
    return this;
  }

  /**
   * Only exist in dry run mode.
   * @return value or {@code null} for none
   */
  public HtmlrenderWebkitHeadlessProtoImage getRenderedSnapshot() {
    return renderedSnapshot;
  }

  /**
   * Only exist in dry run mode.
   * @param renderedSnapshot renderedSnapshot or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setRenderedSnapshot(HtmlrenderWebkitHeadlessProtoImage renderedSnapshot) {
    this.renderedSnapshot = renderedSnapshot;
    return this;
  }

  /**
   * Snapshot image of a rendered html document (possibly encoded as png, jpeg, or webp).
   * @return value or {@code null} for none
   */
  public java.lang.String getRenderedSnapshotImage() {
    return renderedSnapshotImage;
  }

  /**
   * Snapshot image of a rendered html document (possibly encoded as png, jpeg, or webp).
   * @param renderedSnapshotImage renderedSnapshotImage or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setRenderedSnapshotImage(java.lang.String renderedSnapshotImage) {
    this.renderedSnapshotImage = renderedSnapshotImage;
    return this;
  }

  /**
   * A collection of values which are needed by the users of the Kodachrome bigtable.
   * @return value or {@code null} for none
   */
  public SnapshotSnapshotMetadata getRenderedSnapshotMetadata() {
    return renderedSnapshotMetadata;
  }

  /**
   * A collection of values which are needed by the users of the Kodachrome bigtable.
   * @param renderedSnapshotMetadata renderedSnapshotMetadata or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setRenderedSnapshotMetadata(SnapshotSnapshotMetadata renderedSnapshotMetadata) {
    this.renderedSnapshotMetadata = renderedSnapshotMetadata;
    return this;
  }

  /**
   * The quality of the image, 0.0 is the worst, 1.0 is the best. If all dependencies are
   * successfully crawled, the quality should be 1.0. If one or more of the dependencies are
   * unknown, the quality will be lower.
   * @return value or {@code null} for none
   */
  public java.lang.Double getRenderedSnapshotQualityScore() {
    return renderedSnapshotQualityScore;
  }

  /**
   * The quality of the image, 0.0 is the worst, 1.0 is the best. If all dependencies are
   * successfully crawled, the quality should be 1.0. If one or more of the dependencies are
   * unknown, the quality will be lower.
   * @param renderedSnapshotQualityScore renderedSnapshotQualityScore or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setRenderedSnapshotQualityScore(java.lang.Double renderedSnapshotQualityScore) {
    this.renderedSnapshotQualityScore = renderedSnapshotQualityScore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata getRenderingOutputMetadata() {
    return renderingOutputMetadata;
  }

  /**
   * @param renderingOutputMetadata renderingOutputMetadata or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setRenderingOutputMetadata(IndexingEmbeddedContentRenderingOutputMetadata renderingOutputMetadata) {
    this.renderingOutputMetadata = renderingOutputMetadata;
    return this;
  }

  /**
   * The rich content data to recover the original contents from the converted_contents. Useful for
   * offline content analysis.
   * @return value or {@code null} for none
   */
  public IndexingConverterRichContentData getRichcontentData() {
    return richcontentData;
  }

  /**
   * The rich content data to recover the original contents from the converted_contents. Useful for
   * offline content analysis.
   * @param richcontentData richcontentData or {@code null} for none
   */
  public IndexingEmbeddedContentEmbeddedContentInfo setRichcontentData(IndexingConverterRichContentData richcontentData) {
    this.richcontentData = richcontentData;
    return this;
  }

  @Override
  public IndexingEmbeddedContentEmbeddedContentInfo set(String fieldName, Object value) {
    return (IndexingEmbeddedContentEmbeddedContentInfo) super.set(fieldName, value);
  }

  @Override
  public IndexingEmbeddedContentEmbeddedContentInfo clone() {
    return (IndexingEmbeddedContentEmbeddedContentInfo) super.clone();
  }

}
