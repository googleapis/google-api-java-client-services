/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.gkehub.v1.model;

/**
 * Contains the properties for locating and authenticating groups in the directory.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the GKE Hub API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IdentityServiceGroupConfig extends com.google.api.client.json.GenericJson {

  /**
   * Required. The location of the subtree in the LDAP directory to search for group entries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String baseDn;

  /**
   * Optional. Optional filter to be used when searching for groups a user belongs to. This can be
   * used to explicitly match only certain groups in order to reduce the amount of groups returned
   * for each user. This defaults to "(objectClass=Group)".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String filter;

  /**
   * Optional. The identifying name of each group a user belongs to. For example, if this is set to
   * "distinguishedName" then RBACs and other group expectations should be written as full DNs. This
   * defaults to "distinguishedName".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String idAttribute;

  /**
   * Required. The location of the subtree in the LDAP directory to search for group entries.
   * @return value or {@code null} for none
   */
  public java.lang.String getBaseDn() {
    return baseDn;
  }

  /**
   * Required. The location of the subtree in the LDAP directory to search for group entries.
   * @param baseDn baseDn or {@code null} for none
   */
  public IdentityServiceGroupConfig setBaseDn(java.lang.String baseDn) {
    this.baseDn = baseDn;
    return this;
  }

  /**
   * Optional. Optional filter to be used when searching for groups a user belongs to. This can be
   * used to explicitly match only certain groups in order to reduce the amount of groups returned
   * for each user. This defaults to "(objectClass=Group)".
   * @return value or {@code null} for none
   */
  public java.lang.String getFilter() {
    return filter;
  }

  /**
   * Optional. Optional filter to be used when searching for groups a user belongs to. This can be
   * used to explicitly match only certain groups in order to reduce the amount of groups returned
   * for each user. This defaults to "(objectClass=Group)".
   * @param filter filter or {@code null} for none
   */
  public IdentityServiceGroupConfig setFilter(java.lang.String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Optional. The identifying name of each group a user belongs to. For example, if this is set to
   * "distinguishedName" then RBACs and other group expectations should be written as full DNs. This
   * defaults to "distinguishedName".
   * @return value or {@code null} for none
   */
  public java.lang.String getIdAttribute() {
    return idAttribute;
  }

  /**
   * Optional. The identifying name of each group a user belongs to. For example, if this is set to
   * "distinguishedName" then RBACs and other group expectations should be written as full DNs. This
   * defaults to "distinguishedName".
   * @param idAttribute idAttribute or {@code null} for none
   */
  public IdentityServiceGroupConfig setIdAttribute(java.lang.String idAttribute) {
    this.idAttribute = idAttribute;
    return this;
  }

  @Override
  public IdentityServiceGroupConfig set(String fieldName, Object value) {
    return (IdentityServiceGroupConfig) super.set(fieldName, value);
  }

  @Override
  public IdentityServiceGroupConfig clone() {
    return (IdentityServiceGroupConfig) super.clone();
  }

}
