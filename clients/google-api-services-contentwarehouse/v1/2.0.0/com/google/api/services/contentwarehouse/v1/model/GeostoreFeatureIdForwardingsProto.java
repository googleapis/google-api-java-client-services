/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Feature ID forwardings. There are many different types of ID forwardings, some of which are
 * attached to live features, others to removed features. This information is available in multiple
 * forms (with different completeness guarantees): (1) in RPC responses to read requests to the live
 * Geo repository; (2) on disk, as part of the metadata section of features found in the (inactive)
 * features snapshots; (3) on disk, as part of a separate feature_id_forwardings side table.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreFeatureIdForwardingsProto extends com.google.api.client.json.GenericJson {

  /**
   * If the feature has been marked as a DUPLICATE of another feature, this is the feature ID of
   * that other feature. Note that the other feature may itself be removed. This field is NOT set in
   * (1).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto duplicateOf;

  /**
   * The feature ID of the forwarded feature. This field is only set in case (3).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto forwardedId;

  /**
   * If other features have been marked as DUPLICATE of this feature, this is the set of all such
   * feature IDs. All feature IDs in this set should be for removed (aka inactive) features. Note
   * that in the context of historical read requests against MapFacts (when
   * ReadRequest.version_selection.timestamp is set), this field won't be set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreFeatureIdProto> inactiveDuplicate;

  /**
   * DEPRECATED - Use feature.metadata.feature_replacement_info instead. This field was never
   * populated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdListProto replacedBy;

  /**
   * If the feature has been transitively marked as a DUPLICATE of another feature (via a chain of
   * size >= 1), this is the feature ID of that other feature which is the end of the chain. The
   * field is always set even if the chain is of size 1. Note that the other feature may itself be
   * removed. This field is only set in case (3).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto transitivelyDuplicateOf;

  /**
   * If the feature has been marked as a DUPLICATE of another feature, this is the feature ID of
   * that other feature. Note that the other feature may itself be removed. This field is NOT set in
   * (1).
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getDuplicateOf() {
    return duplicateOf;
  }

  /**
   * If the feature has been marked as a DUPLICATE of another feature, this is the feature ID of
   * that other feature. Note that the other feature may itself be removed. This field is NOT set in
   * (1).
   * @param duplicateOf duplicateOf or {@code null} for none
   */
  public GeostoreFeatureIdForwardingsProto setDuplicateOf(GeostoreFeatureIdProto duplicateOf) {
    this.duplicateOf = duplicateOf;
    return this;
  }

  /**
   * The feature ID of the forwarded feature. This field is only set in case (3).
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getForwardedId() {
    return forwardedId;
  }

  /**
   * The feature ID of the forwarded feature. This field is only set in case (3).
   * @param forwardedId forwardedId or {@code null} for none
   */
  public GeostoreFeatureIdForwardingsProto setForwardedId(GeostoreFeatureIdProto forwardedId) {
    this.forwardedId = forwardedId;
    return this;
  }

  /**
   * If other features have been marked as DUPLICATE of this feature, this is the set of all such
   * feature IDs. All feature IDs in this set should be for removed (aka inactive) features. Note
   * that in the context of historical read requests against MapFacts (when
   * ReadRequest.version_selection.timestamp is set), this field won't be set.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreFeatureIdProto> getInactiveDuplicate() {
    return inactiveDuplicate;
  }

  /**
   * If other features have been marked as DUPLICATE of this feature, this is the set of all such
   * feature IDs. All feature IDs in this set should be for removed (aka inactive) features. Note
   * that in the context of historical read requests against MapFacts (when
   * ReadRequest.version_selection.timestamp is set), this field won't be set.
   * @param inactiveDuplicate inactiveDuplicate or {@code null} for none
   */
  public GeostoreFeatureIdForwardingsProto setInactiveDuplicate(java.util.List<GeostoreFeatureIdProto> inactiveDuplicate) {
    this.inactiveDuplicate = inactiveDuplicate;
    return this;
  }

  /**
   * DEPRECATED - Use feature.metadata.feature_replacement_info instead. This field was never
   * populated.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdListProto getReplacedBy() {
    return replacedBy;
  }

  /**
   * DEPRECATED - Use feature.metadata.feature_replacement_info instead. This field was never
   * populated.
   * @param replacedBy replacedBy or {@code null} for none
   */
  public GeostoreFeatureIdForwardingsProto setReplacedBy(GeostoreFeatureIdListProto replacedBy) {
    this.replacedBy = replacedBy;
    return this;
  }

  /**
   * If the feature has been transitively marked as a DUPLICATE of another feature (via a chain of
   * size >= 1), this is the feature ID of that other feature which is the end of the chain. The
   * field is always set even if the chain is of size 1. Note that the other feature may itself be
   * removed. This field is only set in case (3).
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getTransitivelyDuplicateOf() {
    return transitivelyDuplicateOf;
  }

  /**
   * If the feature has been transitively marked as a DUPLICATE of another feature (via a chain of
   * size >= 1), this is the feature ID of that other feature which is the end of the chain. The
   * field is always set even if the chain is of size 1. Note that the other feature may itself be
   * removed. This field is only set in case (3).
   * @param transitivelyDuplicateOf transitivelyDuplicateOf or {@code null} for none
   */
  public GeostoreFeatureIdForwardingsProto setTransitivelyDuplicateOf(GeostoreFeatureIdProto transitivelyDuplicateOf) {
    this.transitivelyDuplicateOf = transitivelyDuplicateOf;
    return this;
  }

  @Override
  public GeostoreFeatureIdForwardingsProto set(String fieldName, Object value) {
    return (GeostoreFeatureIdForwardingsProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreFeatureIdForwardingsProto clone() {
    return (GeostoreFeatureIdForwardingsProto) super.clone();
  }

}
