/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.alloydb.v1alpha.model;

/**
 * SupportedDatabaseFlag gives general information about a database flag, like type and allowed
 * values. This is a static value that is defined on the server side, and it cannot be modified by
 * callers. To set the Database flags on a particular Instance, a caller should modify the
 * Instance.database_flags field.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the AlloyDB API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SupportedDatabaseFlag extends com.google.api.client.json.GenericJson {

  /**
   * Whether the database flag accepts multiple values. If true, a comma-separated list of
   * stringified values may be specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean acceptsMultipleValues;

  /**
   * The name of the database flag, e.g. "max_allowed_packets". The is a possibly key for the
   * Instance.database_flags map field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String flagName;

  /**
   * Restriction on INTEGER type value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IntegerRestrictions integerRestrictions;

  /**
   * The name of the flag resource, following Google Cloud conventions, e.g.: *
   * projects/{project}/locations/{location}/flags/{flag} This field currently has no semantic
   * meaning.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Whether setting or updating this flag on an Instance requires a database restart. If a flag
   * that requires database restart is set, the backend will automatically restart the database
   * (making sure to satisfy any availability SLO's).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean requiresDbRestart;

  /**
   * Restriction on STRING type value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private StringRestrictions stringRestrictions;

  /**
   * Major database engine versions for which this flag is supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> supportedDbVersions;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String valueType;

  /**
   * Whether the database flag accepts multiple values. If true, a comma-separated list of
   * stringified values may be specified.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAcceptsMultipleValues() {
    return acceptsMultipleValues;
  }

  /**
   * Whether the database flag accepts multiple values. If true, a comma-separated list of
   * stringified values may be specified.
   * @param acceptsMultipleValues acceptsMultipleValues or {@code null} for none
   */
  public SupportedDatabaseFlag setAcceptsMultipleValues(java.lang.Boolean acceptsMultipleValues) {
    this.acceptsMultipleValues = acceptsMultipleValues;
    return this;
  }

  /**
   * The name of the database flag, e.g. "max_allowed_packets". The is a possibly key for the
   * Instance.database_flags map field.
   * @return value or {@code null} for none
   */
  public java.lang.String getFlagName() {
    return flagName;
  }

  /**
   * The name of the database flag, e.g. "max_allowed_packets". The is a possibly key for the
   * Instance.database_flags map field.
   * @param flagName flagName or {@code null} for none
   */
  public SupportedDatabaseFlag setFlagName(java.lang.String flagName) {
    this.flagName = flagName;
    return this;
  }

  /**
   * Restriction on INTEGER type value.
   * @return value or {@code null} for none
   */
  public IntegerRestrictions getIntegerRestrictions() {
    return integerRestrictions;
  }

  /**
   * Restriction on INTEGER type value.
   * @param integerRestrictions integerRestrictions or {@code null} for none
   */
  public SupportedDatabaseFlag setIntegerRestrictions(IntegerRestrictions integerRestrictions) {
    this.integerRestrictions = integerRestrictions;
    return this;
  }

  /**
   * The name of the flag resource, following Google Cloud conventions, e.g.: *
   * projects/{project}/locations/{location}/flags/{flag} This field currently has no semantic
   * meaning.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name of the flag resource, following Google Cloud conventions, e.g.: *
   * projects/{project}/locations/{location}/flags/{flag} This field currently has no semantic
   * meaning.
   * @param name name or {@code null} for none
   */
  public SupportedDatabaseFlag setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Whether setting or updating this flag on an Instance requires a database restart. If a flag
   * that requires database restart is set, the backend will automatically restart the database
   * (making sure to satisfy any availability SLO's).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRequiresDbRestart() {
    return requiresDbRestart;
  }

  /**
   * Whether setting or updating this flag on an Instance requires a database restart. If a flag
   * that requires database restart is set, the backend will automatically restart the database
   * (making sure to satisfy any availability SLO's).
   * @param requiresDbRestart requiresDbRestart or {@code null} for none
   */
  public SupportedDatabaseFlag setRequiresDbRestart(java.lang.Boolean requiresDbRestart) {
    this.requiresDbRestart = requiresDbRestart;
    return this;
  }

  /**
   * Restriction on STRING type value.
   * @return value or {@code null} for none
   */
  public StringRestrictions getStringRestrictions() {
    return stringRestrictions;
  }

  /**
   * Restriction on STRING type value.
   * @param stringRestrictions stringRestrictions or {@code null} for none
   */
  public SupportedDatabaseFlag setStringRestrictions(StringRestrictions stringRestrictions) {
    this.stringRestrictions = stringRestrictions;
    return this;
  }

  /**
   * Major database engine versions for which this flag is supported.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSupportedDbVersions() {
    return supportedDbVersions;
  }

  /**
   * Major database engine versions for which this flag is supported.
   * @param supportedDbVersions supportedDbVersions or {@code null} for none
   */
  public SupportedDatabaseFlag setSupportedDbVersions(java.util.List<java.lang.String> supportedDbVersions) {
    this.supportedDbVersions = supportedDbVersions;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getValueType() {
    return valueType;
  }

  /**
   * @param valueType valueType or {@code null} for none
   */
  public SupportedDatabaseFlag setValueType(java.lang.String valueType) {
    this.valueType = valueType;
    return this;
  }

  @Override
  public SupportedDatabaseFlag set(String fieldName, Object value) {
    return (SupportedDatabaseFlag) super.set(fieldName, value);
  }

  @Override
  public SupportedDatabaseFlag clone() {
    return (SupportedDatabaseFlag) super.clone();
  }

}
