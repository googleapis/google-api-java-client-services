/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.iam.v1.model;

/**
 * Represents configuration for generating mutual TLS (mTLS) certificates for the identities within
 * this pool.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Identity and Access Management (IAM) API. For a
 * detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class InlineCertificateIssuanceConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. A required mapping of a Google Cloud region to the CA pool resource located in that
   * region. The CA pool is used for certificate issuance, adhering to the following constraints: *
   * Key format: A supported cloud region name equivalent to the location identifier in the
   * corresponding map entry's value. * Value format: A valid CA pool resource path format like:
   * "projects/{project}/locations/{location}/caPools/{ca_pool}" * Region Matching: Workloads are
   * ONLY issued certificates from CA pools within the same region. Also the CA pool region (in
   * value) must match the workload's region (key).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> caPools;

  /**
   * Optional. Key algorithm to use when generating the key pair. This key pair will be used to
   * create the certificate. If not specified, this will default to ECDSA_P256.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String keyAlgorithm;

  /**
   * Optional. Lifetime of the workload certificates issued by the CA pool. Must be between 10 hours
   * and 30 days. If not specified, this will be defaulted to 24 hours.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lifetime;

  /**
   * Optional. Rotation window percentage indicating when certificate rotation should be initiated
   * based on remaining lifetime. Must be between 10 and 80. If not specified, this will be
   * defaulted to 50.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rotationWindowPercentage;

  /**
   * Optional. A required mapping of a Google Cloud region to the CA pool resource located in that
   * region. The CA pool is used for certificate issuance, adhering to the following constraints: *
   * Key format: A supported cloud region name equivalent to the location identifier in the
   * corresponding map entry's value. * Value format: A valid CA pool resource path format like:
   * "projects/{project}/locations/{location}/caPools/{ca_pool}" * Region Matching: Workloads are
   * ONLY issued certificates from CA pools within the same region. Also the CA pool region (in
   * value) must match the workload's region (key).
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getCaPools() {
    return caPools;
  }

  /**
   * Optional. A required mapping of a Google Cloud region to the CA pool resource located in that
   * region. The CA pool is used for certificate issuance, adhering to the following constraints: *
   * Key format: A supported cloud region name equivalent to the location identifier in the
   * corresponding map entry's value. * Value format: A valid CA pool resource path format like:
   * "projects/{project}/locations/{location}/caPools/{ca_pool}" * Region Matching: Workloads are
   * ONLY issued certificates from CA pools within the same region. Also the CA pool region (in
   * value) must match the workload's region (key).
   * @param caPools caPools or {@code null} for none
   */
  public InlineCertificateIssuanceConfig setCaPools(java.util.Map<String, java.lang.String> caPools) {
    this.caPools = caPools;
    return this;
  }

  /**
   * Optional. Key algorithm to use when generating the key pair. This key pair will be used to
   * create the certificate. If not specified, this will default to ECDSA_P256.
   * @return value or {@code null} for none
   */
  public java.lang.String getKeyAlgorithm() {
    return keyAlgorithm;
  }

  /**
   * Optional. Key algorithm to use when generating the key pair. This key pair will be used to
   * create the certificate. If not specified, this will default to ECDSA_P256.
   * @param keyAlgorithm keyAlgorithm or {@code null} for none
   */
  public InlineCertificateIssuanceConfig setKeyAlgorithm(java.lang.String keyAlgorithm) {
    this.keyAlgorithm = keyAlgorithm;
    return this;
  }

  /**
   * Optional. Lifetime of the workload certificates issued by the CA pool. Must be between 10 hours
   * and 30 days. If not specified, this will be defaulted to 24 hours.
   * @return value or {@code null} for none
   */
  public String getLifetime() {
    return lifetime;
  }

  /**
   * Optional. Lifetime of the workload certificates issued by the CA pool. Must be between 10 hours
   * and 30 days. If not specified, this will be defaulted to 24 hours.
   * @param lifetime lifetime or {@code null} for none
   */
  public InlineCertificateIssuanceConfig setLifetime(String lifetime) {
    this.lifetime = lifetime;
    return this;
  }

  /**
   * Optional. Rotation window percentage indicating when certificate rotation should be initiated
   * based on remaining lifetime. Must be between 10 and 80. If not specified, this will be
   * defaulted to 50.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRotationWindowPercentage() {
    return rotationWindowPercentage;
  }

  /**
   * Optional. Rotation window percentage indicating when certificate rotation should be initiated
   * based on remaining lifetime. Must be between 10 and 80. If not specified, this will be
   * defaulted to 50.
   * @param rotationWindowPercentage rotationWindowPercentage or {@code null} for none
   */
  public InlineCertificateIssuanceConfig setRotationWindowPercentage(java.lang.Integer rotationWindowPercentage) {
    this.rotationWindowPercentage = rotationWindowPercentage;
    return this;
  }

  @Override
  public InlineCertificateIssuanceConfig set(String fieldName, Object value) {
    return (InlineCertificateIssuanceConfig) super.set(fieldName, value);
  }

  @Override
  public InlineCertificateIssuanceConfig clone() {
    return (InlineCertificateIssuanceConfig) super.clone();
  }

}
