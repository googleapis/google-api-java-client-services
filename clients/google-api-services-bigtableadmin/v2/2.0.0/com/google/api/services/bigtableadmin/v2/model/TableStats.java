/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.bigtableadmin.v2.model;

/**
 * Approximate statistics related to a table. These statistics are calculated infrequently, while
 * simultaneously, data in the table can change rapidly. Thus the values reported here (e.g. row
 * count) are very likely out-of date, even the instant they are received in this API. Thus, only
 * treat these values as approximate. IMPORTANT: Everything below is approximate, unless otherwise
 * specified.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Bigtable Admin API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TableStats extends com.google.api.client.json.GenericJson {

  /**
   * How many cells are present per column (column family, column qualifier) combinations, averaged
   * over all columns in all rows in the table. e.g. A table with 2 rows: * A row with 3 cells in
   * "family:col" and 1 cell in "other:col" (4 cells / 2 columns) * A row with 1 cell in
   * "family:col", 7 cells in "family:other_col", and 7 cells in "other:data" (15 cells / 3 columns)
   * would report (4 + 15)/(2 + 3) = 3.8 in this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double averageCellsPerColumn;

  /**
   * How many (column family, column qualifier) combinations are present per row in the table,
   * averaged over all rows in the table. e.g. A table with 2 rows: * A row with cells in
   * "family:col" and "other:col" (2 distinct columns) * A row with cells in "family:col",
   * "family:other_col", and "other:data" (3 distinct columns) would report (2 + 3)/2 = 2.5 in this
   * field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double averageColumnsPerRow;

  /**
   * This is roughly how many bytes would be needed to read the entire table (e.g. by streaming all
   * contents out).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long logicalDataBytes;

  /**
   * How many rows are in the table.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long rowCount;

  /**
   * How many cells are present per column (column family, column qualifier) combinations, averaged
   * over all columns in all rows in the table. e.g. A table with 2 rows: * A row with 3 cells in
   * "family:col" and 1 cell in "other:col" (4 cells / 2 columns) * A row with 1 cell in
   * "family:col", 7 cells in "family:other_col", and 7 cells in "other:data" (15 cells / 3 columns)
   * would report (4 + 15)/(2 + 3) = 3.8 in this field.
   * @return value or {@code null} for none
   */
  public java.lang.Double getAverageCellsPerColumn() {
    return averageCellsPerColumn;
  }

  /**
   * How many cells are present per column (column family, column qualifier) combinations, averaged
   * over all columns in all rows in the table. e.g. A table with 2 rows: * A row with 3 cells in
   * "family:col" and 1 cell in "other:col" (4 cells / 2 columns) * A row with 1 cell in
   * "family:col", 7 cells in "family:other_col", and 7 cells in "other:data" (15 cells / 3 columns)
   * would report (4 + 15)/(2 + 3) = 3.8 in this field.
   * @param averageCellsPerColumn averageCellsPerColumn or {@code null} for none
   */
  public TableStats setAverageCellsPerColumn(java.lang.Double averageCellsPerColumn) {
    this.averageCellsPerColumn = averageCellsPerColumn;
    return this;
  }

  /**
   * How many (column family, column qualifier) combinations are present per row in the table,
   * averaged over all rows in the table. e.g. A table with 2 rows: * A row with cells in
   * "family:col" and "other:col" (2 distinct columns) * A row with cells in "family:col",
   * "family:other_col", and "other:data" (3 distinct columns) would report (2 + 3)/2 = 2.5 in this
   * field.
   * @return value or {@code null} for none
   */
  public java.lang.Double getAverageColumnsPerRow() {
    return averageColumnsPerRow;
  }

  /**
   * How many (column family, column qualifier) combinations are present per row in the table,
   * averaged over all rows in the table. e.g. A table with 2 rows: * A row with cells in
   * "family:col" and "other:col" (2 distinct columns) * A row with cells in "family:col",
   * "family:other_col", and "other:data" (3 distinct columns) would report (2 + 3)/2 = 2.5 in this
   * field.
   * @param averageColumnsPerRow averageColumnsPerRow or {@code null} for none
   */
  public TableStats setAverageColumnsPerRow(java.lang.Double averageColumnsPerRow) {
    this.averageColumnsPerRow = averageColumnsPerRow;
    return this;
  }

  /**
   * This is roughly how many bytes would be needed to read the entire table (e.g. by streaming all
   * contents out).
   * @return value or {@code null} for none
   */
  public java.lang.Long getLogicalDataBytes() {
    return logicalDataBytes;
  }

  /**
   * This is roughly how many bytes would be needed to read the entire table (e.g. by streaming all
   * contents out).
   * @param logicalDataBytes logicalDataBytes or {@code null} for none
   */
  public TableStats setLogicalDataBytes(java.lang.Long logicalDataBytes) {
    this.logicalDataBytes = logicalDataBytes;
    return this;
  }

  /**
   * How many rows are in the table.
   * @return value or {@code null} for none
   */
  public java.lang.Long getRowCount() {
    return rowCount;
  }

  /**
   * How many rows are in the table.
   * @param rowCount rowCount or {@code null} for none
   */
  public TableStats setRowCount(java.lang.Long rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  @Override
  public TableStats set(String fieldName, Object value) {
    return (TableStats) super.set(fieldName, value);
  }

  @Override
  public TableStats clone() {
    return (TableStats) super.clone();
  }

}
