/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * LocalDescriptor holds interest point data and an optional local descriptor vector.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PhotosVisionObjectrecLocalDescriptor extends com.google.api.client.json.GenericJson {

  /**
   * Optional affine matrix. Supersedes scale and orientation if present. r' = affine_matrix.r +
   * (x,y) defines an affine transform from the normalized image patch (in which the interest point
   * is centered at the origin with scale 1) to the image. If the affine matrix is set, the
   * following approximations are recommended: scale = sqrt(0.5 * (xx*xx + xy*xy + yx*yx + yy*yy));
   * orientation = atan2(yx - xy, xx + yy); If not present, the affine matrix can be computed from
   * scale and orientation as: xx = scale * cos(orientation); xy = scale * -sin(orientation); yx =
   * scale * sin(orientation); yy = scale * cos(orientation);
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosVisionObjectrecMatrix2D affineMatrix;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String data;

  /**
   * data_factor and data represent the local descriptor vector in a compressed format, using only 8
   * bit per value. Each byte of the data string yields one component of the local descriptor by
   * bit-casting it to an int8 and multiplying it by data_factor. Protocol buffers do not support
   * int8 directly.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float dataFactor;

  /**
   * Unquantized feature vector (float).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosVisionObjectrecFeatureVector featureVector;

  /**
   * Opaque descriptor data. May be used to pass through descriptor data from descriptor sources to
   * processing modules, that is not already covered by data/data_factor and/or cannot be expressed
   * as a vector of numbers. It is the responsibility of processing modules to verify that the data
   * is in a compatible format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String opaqueData;

  /**
   * Orientation is optional, as some interest point detectors don't compute it. The range of
   * orientation is [-pi,pi).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float orientation;

  /**
   * Each interest point must have a characteristic scale > 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float scale;

  /**
   * The strength or weight, indicating the relative significance of this point.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float strength;

  /**
   * The position in the image with sub-pixel accuracy. The center of the upper left pixel has
   * coordinates (0.0, 0.0). Thus the range for x and y is (-0.5, width - 0.5) x (-0.5, height -
   * 0.5).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float x;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float y;

  /**
   * Optional affine matrix. Supersedes scale and orientation if present. r' = affine_matrix.r +
   * (x,y) defines an affine transform from the normalized image patch (in which the interest point
   * is centered at the origin with scale 1) to the image. If the affine matrix is set, the
   * following approximations are recommended: scale = sqrt(0.5 * (xx*xx + xy*xy + yx*yx + yy*yy));
   * orientation = atan2(yx - xy, xx + yy); If not present, the affine matrix can be computed from
   * scale and orientation as: xx = scale * cos(orientation); xy = scale * -sin(orientation); yx =
   * scale * sin(orientation); yy = scale * cos(orientation);
   * @return value or {@code null} for none
   */
  public PhotosVisionObjectrecMatrix2D getAffineMatrix() {
    return affineMatrix;
  }

  /**
   * Optional affine matrix. Supersedes scale and orientation if present. r' = affine_matrix.r +
   * (x,y) defines an affine transform from the normalized image patch (in which the interest point
   * is centered at the origin with scale 1) to the image. If the affine matrix is set, the
   * following approximations are recommended: scale = sqrt(0.5 * (xx*xx + xy*xy + yx*yx + yy*yy));
   * orientation = atan2(yx - xy, xx + yy); If not present, the affine matrix can be computed from
   * scale and orientation as: xx = scale * cos(orientation); xy = scale * -sin(orientation); yx =
   * scale * sin(orientation); yy = scale * cos(orientation);
   * @param affineMatrix affineMatrix or {@code null} for none
   */
  public PhotosVisionObjectrecLocalDescriptor setAffineMatrix(PhotosVisionObjectrecMatrix2D affineMatrix) {
    this.affineMatrix = affineMatrix;
    return this;
  }

  /**
   * @see #decodeData()
   * @return value or {@code null} for none
   */
  public java.lang.String getData() {
    return data;
  }

  /**

   * @see #getData()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeData() {
    return com.google.api.client.util.Base64.decodeBase64(data);
  }

  /**
   * @see #encodeData()
   * @param data data or {@code null} for none
   */
  public PhotosVisionObjectrecLocalDescriptor setData(java.lang.String data) {
    this.data = data;
    return this;
  }

  /**

   * @see #setData()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public PhotosVisionObjectrecLocalDescriptor encodeData(byte[] data) {
    this.data = com.google.api.client.util.Base64.encodeBase64URLSafeString(data);
    return this;
  }

  /**
   * data_factor and data represent the local descriptor vector in a compressed format, using only 8
   * bit per value. Each byte of the data string yields one component of the local descriptor by
   * bit-casting it to an int8 and multiplying it by data_factor. Protocol buffers do not support
   * int8 directly.
   * @return value or {@code null} for none
   */
  public java.lang.Float getDataFactor() {
    return dataFactor;
  }

  /**
   * data_factor and data represent the local descriptor vector in a compressed format, using only 8
   * bit per value. Each byte of the data string yields one component of the local descriptor by
   * bit-casting it to an int8 and multiplying it by data_factor. Protocol buffers do not support
   * int8 directly.
   * @param dataFactor dataFactor or {@code null} for none
   */
  public PhotosVisionObjectrecLocalDescriptor setDataFactor(java.lang.Float dataFactor) {
    this.dataFactor = dataFactor;
    return this;
  }

  /**
   * Unquantized feature vector (float).
   * @return value or {@code null} for none
   */
  public PhotosVisionObjectrecFeatureVector getFeatureVector() {
    return featureVector;
  }

  /**
   * Unquantized feature vector (float).
   * @param featureVector featureVector or {@code null} for none
   */
  public PhotosVisionObjectrecLocalDescriptor setFeatureVector(PhotosVisionObjectrecFeatureVector featureVector) {
    this.featureVector = featureVector;
    return this;
  }

  /**
   * Opaque descriptor data. May be used to pass through descriptor data from descriptor sources to
   * processing modules, that is not already covered by data/data_factor and/or cannot be expressed
   * as a vector of numbers. It is the responsibility of processing modules to verify that the data
   * is in a compatible format.
   * @see #decodeOpaqueData()
   * @return value or {@code null} for none
   */
  public java.lang.String getOpaqueData() {
    return opaqueData;
  }

  /**
   * Opaque descriptor data. May be used to pass through descriptor data from descriptor sources to
   * processing modules, that is not already covered by data/data_factor and/or cannot be expressed
   * as a vector of numbers. It is the responsibility of processing modules to verify that the data
   * is in a compatible format.
   * @see #getOpaqueData()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeOpaqueData() {
    return com.google.api.client.util.Base64.decodeBase64(opaqueData);
  }

  /**
   * Opaque descriptor data. May be used to pass through descriptor data from descriptor sources to
   * processing modules, that is not already covered by data/data_factor and/or cannot be expressed
   * as a vector of numbers. It is the responsibility of processing modules to verify that the data
   * is in a compatible format.
   * @see #encodeOpaqueData()
   * @param opaqueData opaqueData or {@code null} for none
   */
  public PhotosVisionObjectrecLocalDescriptor setOpaqueData(java.lang.String opaqueData) {
    this.opaqueData = opaqueData;
    return this;
  }

  /**
   * Opaque descriptor data. May be used to pass through descriptor data from descriptor sources to
   * processing modules, that is not already covered by data/data_factor and/or cannot be expressed
   * as a vector of numbers. It is the responsibility of processing modules to verify that the data
   * is in a compatible format.
   * @see #setOpaqueData()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public PhotosVisionObjectrecLocalDescriptor encodeOpaqueData(byte[] opaqueData) {
    this.opaqueData = com.google.api.client.util.Base64.encodeBase64URLSafeString(opaqueData);
    return this;
  }

  /**
   * Orientation is optional, as some interest point detectors don't compute it. The range of
   * orientation is [-pi,pi).
   * @return value or {@code null} for none
   */
  public java.lang.Float getOrientation() {
    return orientation;
  }

  /**
   * Orientation is optional, as some interest point detectors don't compute it. The range of
   * orientation is [-pi,pi).
   * @param orientation orientation or {@code null} for none
   */
  public PhotosVisionObjectrecLocalDescriptor setOrientation(java.lang.Float orientation) {
    this.orientation = orientation;
    return this;
  }

  /**
   * Each interest point must have a characteristic scale > 0.
   * @return value or {@code null} for none
   */
  public java.lang.Float getScale() {
    return scale;
  }

  /**
   * Each interest point must have a characteristic scale > 0.
   * @param scale scale or {@code null} for none
   */
  public PhotosVisionObjectrecLocalDescriptor setScale(java.lang.Float scale) {
    this.scale = scale;
    return this;
  }

  /**
   * The strength or weight, indicating the relative significance of this point.
   * @return value or {@code null} for none
   */
  public java.lang.Float getStrength() {
    return strength;
  }

  /**
   * The strength or weight, indicating the relative significance of this point.
   * @param strength strength or {@code null} for none
   */
  public PhotosVisionObjectrecLocalDescriptor setStrength(java.lang.Float strength) {
    this.strength = strength;
    return this;
  }

  /**
   * The position in the image with sub-pixel accuracy. The center of the upper left pixel has
   * coordinates (0.0, 0.0). Thus the range for x and y is (-0.5, width - 0.5) x (-0.5, height -
   * 0.5).
   * @return value or {@code null} for none
   */
  public java.lang.Float getX() {
    return x;
  }

  /**
   * The position in the image with sub-pixel accuracy. The center of the upper left pixel has
   * coordinates (0.0, 0.0). Thus the range for x and y is (-0.5, width - 0.5) x (-0.5, height -
   * 0.5).
   * @param x x or {@code null} for none
   */
  public PhotosVisionObjectrecLocalDescriptor setX(java.lang.Float x) {
    this.x = x;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getY() {
    return y;
  }

  /**
   * @param y y or {@code null} for none
   */
  public PhotosVisionObjectrecLocalDescriptor setY(java.lang.Float y) {
    this.y = y;
    return this;
  }

  @Override
  public PhotosVisionObjectrecLocalDescriptor set(String fieldName, Object value) {
    return (PhotosVisionObjectrecLocalDescriptor) super.set(fieldName, value);
  }

  @Override
  public PhotosVisionObjectrecLocalDescriptor clone() {
    return (PhotosVisionObjectrecLocalDescriptor) super.clone();
  }

}
