/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.poly.v1.model;

/**
 * Represents and describes an asset in the Poly library. An asset is a 3D model or scene created
 * using [Tilt Brush](//www.tiltbrush.com), [Blocks](//vr.google.com/blocks/), or any 3D program
 * that produces a file that can be upload to Poly.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Poly API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Asset extends com.google.api.client.json.GenericJson {

  /**
   * The author's publicly visible name. Use this name when giving credit to the author. For more
   * information, see [Licensing](/poly/discover/licensing).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String authorName;

  /**
   * For published assets, the time when the asset was published. For unpublished assets, the time
   * when the asset was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * The human-readable description, set by the asset's author.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * The human-readable name, set by the asset's author.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * A list of Formats where each format describes one representation of the asset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Format> formats;

  /**
   * Whether this asset has been curated by the Poly team.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isCurated;

  /**
   * The license under which the author has made the asset available for use, if any.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String license;

  /**
   * Application-defined opaque metadata for this asset. This field is only returned when querying
   * for the signed-in user's own assets, not for public assets. This string is limited to 1K chars.
   * It is up to the creator of the asset to define the format for this string (for example, JSON).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String metadata;

  /**
   * The unique identifier for the asset in the form: `assets/{ASSET_ID}`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Hints for displaying the asset. Note that these parameters are not immutable; the author of an
   * asset may change them post-publication.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PresentationParams presentationParams;

  /**
   * The remix info for the asset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RemixInfo remixInfo;

  /**
   * The thumbnail image for the asset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private File thumbnail;

  /**
   * The time when the asset was last modified. For published assets, whose contents are immutable,
   * the update time changes only when metadata properties, such as visibility, are updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * The visibility of the asset and who can access it.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String visibility;

  /**
   * The author's publicly visible name. Use this name when giving credit to the author. For more
   * information, see [Licensing](/poly/discover/licensing).
   * @return value or {@code null} for none
   */
  public java.lang.String getAuthorName() {
    return authorName;
  }

  /**
   * The author's publicly visible name. Use this name when giving credit to the author. For more
   * information, see [Licensing](/poly/discover/licensing).
   * @param authorName authorName or {@code null} for none
   */
  public Asset setAuthorName(java.lang.String authorName) {
    this.authorName = authorName;
    return this;
  }

  /**
   * For published assets, the time when the asset was published. For unpublished assets, the time
   * when the asset was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * For published assets, the time when the asset was published. For unpublished assets, the time
   * when the asset was created.
   * @param createTime createTime or {@code null} for none
   */
  public Asset setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * The human-readable description, set by the asset's author.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * The human-readable description, set by the asset's author.
   * @param description description or {@code null} for none
   */
  public Asset setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * The human-readable name, set by the asset's author.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * The human-readable name, set by the asset's author.
   * @param displayName displayName or {@code null} for none
   */
  public Asset setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * A list of Formats where each format describes one representation of the asset.
   * @return value or {@code null} for none
   */
  public java.util.List<Format> getFormats() {
    return formats;
  }

  /**
   * A list of Formats where each format describes one representation of the asset.
   * @param formats formats or {@code null} for none
   */
  public Asset setFormats(java.util.List<Format> formats) {
    this.formats = formats;
    return this;
  }

  /**
   * Whether this asset has been curated by the Poly team.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsCurated() {
    return isCurated;
  }

  /**
   * Whether this asset has been curated by the Poly team.
   * @param isCurated isCurated or {@code null} for none
   */
  public Asset setIsCurated(java.lang.Boolean isCurated) {
    this.isCurated = isCurated;
    return this;
  }

  /**
   * The license under which the author has made the asset available for use, if any.
   * @return value or {@code null} for none
   */
  public java.lang.String getLicense() {
    return license;
  }

  /**
   * The license under which the author has made the asset available for use, if any.
   * @param license license or {@code null} for none
   */
  public Asset setLicense(java.lang.String license) {
    this.license = license;
    return this;
  }

  /**
   * Application-defined opaque metadata for this asset. This field is only returned when querying
   * for the signed-in user's own assets, not for public assets. This string is limited to 1K chars.
   * It is up to the creator of the asset to define the format for this string (for example, JSON).
   * @return value or {@code null} for none
   */
  public java.lang.String getMetadata() {
    return metadata;
  }

  /**
   * Application-defined opaque metadata for this asset. This field is only returned when querying
   * for the signed-in user's own assets, not for public assets. This string is limited to 1K chars.
   * It is up to the creator of the asset to define the format for this string (for example, JSON).
   * @param metadata metadata or {@code null} for none
   */
  public Asset setMetadata(java.lang.String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The unique identifier for the asset in the form: `assets/{ASSET_ID}`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The unique identifier for the asset in the form: `assets/{ASSET_ID}`.
   * @param name name or {@code null} for none
   */
  public Asset setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Hints for displaying the asset. Note that these parameters are not immutable; the author of an
   * asset may change them post-publication.
   * @return value or {@code null} for none
   */
  public PresentationParams getPresentationParams() {
    return presentationParams;
  }

  /**
   * Hints for displaying the asset. Note that these parameters are not immutable; the author of an
   * asset may change them post-publication.
   * @param presentationParams presentationParams or {@code null} for none
   */
  public Asset setPresentationParams(PresentationParams presentationParams) {
    this.presentationParams = presentationParams;
    return this;
  }

  /**
   * The remix info for the asset.
   * @return value or {@code null} for none
   */
  public RemixInfo getRemixInfo() {
    return remixInfo;
  }

  /**
   * The remix info for the asset.
   * @param remixInfo remixInfo or {@code null} for none
   */
  public Asset setRemixInfo(RemixInfo remixInfo) {
    this.remixInfo = remixInfo;
    return this;
  }

  /**
   * The thumbnail image for the asset.
   * @return value or {@code null} for none
   */
  public File getThumbnail() {
    return thumbnail;
  }

  /**
   * The thumbnail image for the asset.
   * @param thumbnail thumbnail or {@code null} for none
   */
  public Asset setThumbnail(File thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * The time when the asset was last modified. For published assets, whose contents are immutable,
   * the update time changes only when metadata properties, such as visibility, are updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * The time when the asset was last modified. For published assets, whose contents are immutable,
   * the update time changes only when metadata properties, such as visibility, are updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public Asset setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * The visibility of the asset and who can access it.
   * @return value or {@code null} for none
   */
  public java.lang.String getVisibility() {
    return visibility;
  }

  /**
   * The visibility of the asset and who can access it.
   * @param visibility visibility or {@code null} for none
   */
  public Asset setVisibility(java.lang.String visibility) {
    this.visibility = visibility;
    return this;
  }

  @Override
  public Asset set(String fieldName, Object value) {
    return (Asset) super.set(fieldName, value);
  }

  @Override
  public Asset clone() {
    return (Asset) super.clone();
  }

}
