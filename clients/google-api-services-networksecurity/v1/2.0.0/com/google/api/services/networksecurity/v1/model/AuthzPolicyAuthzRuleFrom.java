/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networksecurity.v1.model;

/**
 * Describes properties of one or more sources of a request.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Security API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AuthzPolicyAuthzRuleFrom extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Describes the negated properties of request sources. Matches requests from sources
   * that do not match the criteria specified in this field. At least one of sources or notSources
   * must be specified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AuthzPolicyAuthzRuleFromRequestSource> notSources;

  /**
   * Optional. Describes the properties of a request's sources. At least one of sources or
   * notSources must be specified. Limited to 1 source. A match occurs when ANY source (in sources
   * or notSources) matches the request. Within a single source, the match follows AND semantics
   * across fields and OR semantics within a single field, i.e. a match occurs when ANY principal
   * matches AND ANY ipBlocks match.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AuthzPolicyAuthzRuleFromRequestSource> sources;

  /**
   * Optional. Describes the negated properties of request sources. Matches requests from sources
   * that do not match the criteria specified in this field. At least one of sources or notSources
   * must be specified.
   * @return value or {@code null} for none
   */
  public java.util.List<AuthzPolicyAuthzRuleFromRequestSource> getNotSources() {
    return notSources;
  }

  /**
   * Optional. Describes the negated properties of request sources. Matches requests from sources
   * that do not match the criteria specified in this field. At least one of sources or notSources
   * must be specified.
   * @param notSources notSources or {@code null} for none
   */
  public AuthzPolicyAuthzRuleFrom setNotSources(java.util.List<AuthzPolicyAuthzRuleFromRequestSource> notSources) {
    this.notSources = notSources;
    return this;
  }

  /**
   * Optional. Describes the properties of a request's sources. At least one of sources or
   * notSources must be specified. Limited to 1 source. A match occurs when ANY source (in sources
   * or notSources) matches the request. Within a single source, the match follows AND semantics
   * across fields and OR semantics within a single field, i.e. a match occurs when ANY principal
   * matches AND ANY ipBlocks match.
   * @return value or {@code null} for none
   */
  public java.util.List<AuthzPolicyAuthzRuleFromRequestSource> getSources() {
    return sources;
  }

  /**
   * Optional. Describes the properties of a request's sources. At least one of sources or
   * notSources must be specified. Limited to 1 source. A match occurs when ANY source (in sources
   * or notSources) matches the request. Within a single source, the match follows AND semantics
   * across fields and OR semantics within a single field, i.e. a match occurs when ANY principal
   * matches AND ANY ipBlocks match.
   * @param sources sources or {@code null} for none
   */
  public AuthzPolicyAuthzRuleFrom setSources(java.util.List<AuthzPolicyAuthzRuleFromRequestSource> sources) {
    this.sources = sources;
    return this;
  }

  @Override
  public AuthzPolicyAuthzRuleFrom set(String fieldName, Object value) {
    return (AuthzPolicyAuthzRuleFrom) super.set(fieldName, value);
  }

  @Override
  public AuthzPolicyAuthzRuleFrom clone() {
    return (AuthzPolicyAuthzRuleFrom) super.clone();
  }

}
