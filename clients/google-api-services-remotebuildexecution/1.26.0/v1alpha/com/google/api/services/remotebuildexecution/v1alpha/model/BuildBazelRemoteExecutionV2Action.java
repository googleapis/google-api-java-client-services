/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.remotebuildexecution.v1alpha.model;

/**
 * An `Action` captures all the information about an execution which is required to reproduce it.
 *
 * `Action`s are the core component of the [Execution] service. A single `Action` represents a
 * repeatable action that can be performed by the execution service. `Action`s can be succinctly
 * identified by the digest of their wire format encoding and, once an `Action` has been executed,
 * will be cached in the action cache. Future requests can then use the cached result rather than
 * needing to run afresh.
 *
 * When a server completes execution of an Action, it MAY choose to cache the result in the
 * ActionCache unless `do_not_cache` is `true`. Clients SHOULD expect the server to do so. By
 * default, future calls to Execute the same `Action` will also serve their results from the cache.
 * Clients must take care to understand the caching behaviour. Ideally, all `Action`s will be
 * reproducible so that serving a result from cache is always desirable and correct.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Remote Build Execution API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BuildBazelRemoteExecutionV2Action extends com.google.api.client.json.GenericJson {

  /**
   * The digest of the Command to run, which MUST be present in the ContentAddressableStorage.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BuildBazelRemoteExecutionV2Digest commandDigest;

  /**
   * If true, then the `Action`'s result cannot be cached.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean doNotCache;

  /**
   * The digest of the root Directory for the input files. The files in the directory tree are
   * available in the correct location on the build machine before the command is executed. The root
   * directory, as well as every subdirectory and content blob referred to, MUST be in the
   * ContentAddressableStorage.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BuildBazelRemoteExecutionV2Digest inputRootDigest;

  /**
   * A timeout after which the execution should be killed. If the timeout is absent, then the client
   * is specifying that the execution should continue as long as the server will let it. The server
   * SHOULD impose a timeout if the client does not specify one, however, if the client does specify
   * a timeout that is longer than the server's maximum timeout, the server MUST reject the request.
   *
   * The timeout is a part of the Action message, and therefore two `Actions` with different
   * timeouts are different, even if they are otherwise identical. This is because, if they were
   * not, running an `Action` with a lower timeout than is required might result in a cache hit from
   * an execution run with a longer timeout, hiding the fact that the timeout is too short. By
   * encoding it directly in the `Action`, a lower timeout will result in a cache miss and the
   * execution timeout will fail immediately, rather than whenever the cache entry gets evicted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String timeout;

  /**
   * The digest of the Command to run, which MUST be present in the ContentAddressableStorage.
   * @return value or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Digest getCommandDigest() {
    return commandDigest;
  }

  /**
   * The digest of the Command to run, which MUST be present in the ContentAddressableStorage.
   * @param commandDigest commandDigest or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Action setCommandDigest(BuildBazelRemoteExecutionV2Digest commandDigest) {
    this.commandDigest = commandDigest;
    return this;
  }

  /**
   * If true, then the `Action`'s result cannot be cached.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDoNotCache() {
    return doNotCache;
  }

  /**
   * If true, then the `Action`'s result cannot be cached.
   * @param doNotCache doNotCache or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Action setDoNotCache(java.lang.Boolean doNotCache) {
    this.doNotCache = doNotCache;
    return this;
  }

  /**
   * The digest of the root Directory for the input files. The files in the directory tree are
   * available in the correct location on the build machine before the command is executed. The root
   * directory, as well as every subdirectory and content blob referred to, MUST be in the
   * ContentAddressableStorage.
   * @return value or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Digest getInputRootDigest() {
    return inputRootDigest;
  }

  /**
   * The digest of the root Directory for the input files. The files in the directory tree are
   * available in the correct location on the build machine before the command is executed. The root
   * directory, as well as every subdirectory and content blob referred to, MUST be in the
   * ContentAddressableStorage.
   * @param inputRootDigest inputRootDigest or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Action setInputRootDigest(BuildBazelRemoteExecutionV2Digest inputRootDigest) {
    this.inputRootDigest = inputRootDigest;
    return this;
  }

  /**
   * A timeout after which the execution should be killed. If the timeout is absent, then the client
   * is specifying that the execution should continue as long as the server will let it. The server
   * SHOULD impose a timeout if the client does not specify one, however, if the client does specify
   * a timeout that is longer than the server's maximum timeout, the server MUST reject the request.
   *
   * The timeout is a part of the Action message, and therefore two `Actions` with different
   * timeouts are different, even if they are otherwise identical. This is because, if they were
   * not, running an `Action` with a lower timeout than is required might result in a cache hit from
   * an execution run with a longer timeout, hiding the fact that the timeout is too short. By
   * encoding it directly in the `Action`, a lower timeout will result in a cache miss and the
   * execution timeout will fail immediately, rather than whenever the cache entry gets evicted.
   * @return value or {@code null} for none
   */
  public String getTimeout() {
    return timeout;
  }

  /**
   * A timeout after which the execution should be killed. If the timeout is absent, then the client
   * is specifying that the execution should continue as long as the server will let it. The server
   * SHOULD impose a timeout if the client does not specify one, however, if the client does specify
   * a timeout that is longer than the server's maximum timeout, the server MUST reject the request.
   *
   * The timeout is a part of the Action message, and therefore two `Actions` with different
   * timeouts are different, even if they are otherwise identical. This is because, if they were
   * not, running an `Action` with a lower timeout than is required might result in a cache hit from
   * an execution run with a longer timeout, hiding the fact that the timeout is too short. By
   * encoding it directly in the `Action`, a lower timeout will result in a cache miss and the
   * execution timeout will fail immediately, rather than whenever the cache entry gets evicted.
   * @param timeout timeout or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Action setTimeout(String timeout) {
    this.timeout = timeout;
    return this;
  }

  @Override
  public BuildBazelRemoteExecutionV2Action set(String fieldName, Object value) {
    return (BuildBazelRemoteExecutionV2Action) super.set(fieldName, value);
  }

  @Override
  public BuildBazelRemoteExecutionV2Action clone() {
    return (BuildBazelRemoteExecutionV2Action) super.clone();
  }

}
