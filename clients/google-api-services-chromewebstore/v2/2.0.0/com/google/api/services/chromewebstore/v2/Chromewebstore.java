/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.chromewebstore.v2;

/**
 * Service definition for Chromewebstore (v2).
 *
 * <p>
 * The Chrome Web Store API provides access to data about apps and extensions, as well as developer tools for managing them.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developer.chrome.com/docs/webstore/api" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ChromewebstoreRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Chromewebstore extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Chrome Web Store API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://chromewebstore.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://chromewebstore.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Chromewebstore(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Chromewebstore(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Media collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Chromewebstore chromewebstore = new Chromewebstore(...);}
   *   {@code Chromewebstore.Media.List request = chromewebstore.media().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Media media() {
    return new Media();
  }

  /**
   * The "media" collection of methods.
   */
  public class Media {

    /**
     * Upload a new package to an existing item.
     *
     * Create a request for the method "media.upload".
     *
     * This request holds the parameters needed by the chromewebstore server.  After setting any
     * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
     *
     * @param name Required. Name of the item to upload the new package to in the form
     *        `publishers/{publisherId}/items/{itemId}`
     * @param content the {@link com.google.api.services.chromewebstore.v2.model.UploadItemPackageRequest}
     * @return the request
     */
    public Upload upload(java.lang.String name, com.google.api.services.chromewebstore.v2.model.UploadItemPackageRequest content) throws java.io.IOException {
      Upload result = new Upload(name, content);
      initialize(result);
      return result;
    }

    /**
     * Upload a new package to an existing item.
     *
     * Create a request for the method "media.upload".
     *
     * This request holds the parameters needed by the the chromewebstore server.  After setting any
     * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
     *
     * <p>
     * This method should be used for uploading media content.
     * </p>
     *
     * @param name Required. Name of the item to upload the new package to in the form
     *        `publishers/{publisherId}/items/{itemId}`
     * @param content the {@link com.google.api.services.chromewebstore.v2.model.UploadItemPackageRequest} media metadata or {@code null} if none
     * @param mediaContent The media HTTP content.
     * @return the request
     * @throws java.io.IOException if the initialization of the request fails
     */
    public Upload upload(java.lang.String name, com.google.api.services.chromewebstore.v2.model.UploadItemPackageRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) throws java.io.IOException {
      Upload result = new Upload(name, content, mediaContent);
      initialize(result);
      return result;
    }

    public class Upload extends ChromewebstoreRequest<com.google.api.services.chromewebstore.v2.model.UploadItemPackageResponse> {

      private static final String REST_PATH = "v2/{+name}:upload";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^publishers/[^/]+/items/[^/]+$");

      /**
       * Upload a new package to an existing item.
       *
       * Create a request for the method "media.upload".
       *
       * This request holds the parameters needed by the the chromewebstore server.  After setting any
       * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
       * <p> {@link
       * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name Required. Name of the item to upload the new package to in the form
     *        `publishers/{publisherId}/items/{itemId}`
       * @param content the {@link com.google.api.services.chromewebstore.v2.model.UploadItemPackageRequest}
       * @since 1.13
       */
      protected Upload(java.lang.String name, com.google.api.services.chromewebstore.v2.model.UploadItemPackageRequest content) {
        super(Chromewebstore.this, "POST", REST_PATH, content, com.google.api.services.chromewebstore.v2.model.UploadItemPackageResponse.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^publishers/[^/]+/items/[^/]+$");
        }
      }

      /**
       * Upload a new package to an existing item.
       *
       * Create a request for the method "media.upload".
       *
       * This request holds the parameters needed by the the chromewebstore server.  After setting any
       * optional parameters, call the {@link Upload#execute()} method to invoke the remote operation.
       * <p> {@link
       * Upload#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * <p>
       * This constructor should be used for uploading media content.
       * </p>
       *
       * @param name Required. Name of the item to upload the new package to in the form
     *        `publishers/{publisherId}/items/{itemId}`
       * @param content the {@link com.google.api.services.chromewebstore.v2.model.UploadItemPackageRequest} media metadata or {@code null} if none
       * @param mediaContent The media HTTP content.
       * @since 1.13
       */
      protected Upload(java.lang.String name, com.google.api.services.chromewebstore.v2.model.UploadItemPackageRequest content, com.google.api.client.http.AbstractInputStreamContent mediaContent) {
        super(Chromewebstore.this, "POST", "/upload/" + getServicePath() + REST_PATH, content, com.google.api.services.chromewebstore.v2.model.UploadItemPackageResponse.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        com.google.api.client.util.Preconditions.checkNotNull(mediaContent, "Required parameter mediaContent must be specified.");
        initializeMediaUpload(mediaContent);
      }

      @Override
      public Upload set$Xgafv(java.lang.String $Xgafv) {
        return (Upload) super.set$Xgafv($Xgafv);
      }

      @Override
      public Upload setAccessToken(java.lang.String accessToken) {
        return (Upload) super.setAccessToken(accessToken);
      }

      @Override
      public Upload setAlt(java.lang.String alt) {
        return (Upload) super.setAlt(alt);
      }

      @Override
      public Upload setCallback(java.lang.String callback) {
        return (Upload) super.setCallback(callback);
      }

      @Override
      public Upload setFields(java.lang.String fields) {
        return (Upload) super.setFields(fields);
      }

      @Override
      public Upload setKey(java.lang.String key) {
        return (Upload) super.setKey(key);
      }

      @Override
      public Upload setOauthToken(java.lang.String oauthToken) {
        return (Upload) super.setOauthToken(oauthToken);
      }

      @Override
      public Upload setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Upload) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Upload setQuotaUser(java.lang.String quotaUser) {
        return (Upload) super.setQuotaUser(quotaUser);
      }

      @Override
      public Upload setUploadType(java.lang.String uploadType) {
        return (Upload) super.setUploadType(uploadType);
      }

      @Override
      public Upload setUploadProtocol(java.lang.String uploadProtocol) {
        return (Upload) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Required. Name of the item to upload the new package to in the form
       * `publishers/{publisherId}/items/{itemId}`
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Required. Name of the item to upload the new package to in the form
     `publishers/{publisherId}/items/{itemId}`
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * Required. Name of the item to upload the new package to in the form
       * `publishers/{publisherId}/items/{itemId}`
       */
      public Upload setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^publishers/[^/]+/items/[^/]+$");
        }
        this.name = name;
        return this;
      }

      @Override
      public Upload set(String parameterName, Object value) {
        return (Upload) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Publishers collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Chromewebstore chromewebstore = new Chromewebstore(...);}
   *   {@code Chromewebstore.Publishers.List request = chromewebstore.publishers().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Publishers publishers() {
    return new Publishers();
  }

  /**
   * The "publishers" collection of methods.
   */
  public class Publishers {

    /**
     * An accessor for creating requests from the Items collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Chromewebstore chromewebstore = new Chromewebstore(...);}
     *   {@code Chromewebstore.Items.List request = chromewebstore.items().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Items items() {
      return new Items();
    }

    /**
     * The "items" collection of methods.
     */
    public class Items {

      /**
       * Cancel the current active submission of an item if present. This can be used to cancel the review
       * of a pending submission.
       *
       * Create a request for the method "items.cancelSubmission".
       *
       * This request holds the parameters needed by the chromewebstore server.  After setting any
       * optional parameters, call the {@link CancelSubmission#execute()} method to invoke the remote
       * operation.
       *
       * @param name Required. Name of the item to cancel the submission of in the form
       *        `publishers/{publisherId}/items/{itemId}`
       * @param content the {@link com.google.api.services.chromewebstore.v2.model.CancelSubmissionRequest}
       * @return the request
       */
      public CancelSubmission cancelSubmission(java.lang.String name, com.google.api.services.chromewebstore.v2.model.CancelSubmissionRequest content) throws java.io.IOException {
        CancelSubmission result = new CancelSubmission(name, content);
        initialize(result);
        return result;
      }

      public class CancelSubmission extends ChromewebstoreRequest<com.google.api.services.chromewebstore.v2.model.CancelSubmissionResponse> {

        private static final String REST_PATH = "v2/{+name}:cancelSubmission";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^publishers/[^/]+/items/[^/]+$");

        /**
         * Cancel the current active submission of an item if present. This can be used to cancel the
         * review of a pending submission.
         *
         * Create a request for the method "items.cancelSubmission".
         *
         * This request holds the parameters needed by the the chromewebstore server.  After setting any
         * optional parameters, call the {@link CancelSubmission#execute()} method to invoke the remote
         * operation. <p> {@link CancelSubmission#initialize(com.google.api.client.googleapis.services.Abs
         * tractGoogleClientRequest)} must be called to initialize this instance immediately after
         * invoking the constructor. </p>
         *
         * @param name Required. Name of the item to cancel the submission of in the form
       *        `publishers/{publisherId}/items/{itemId}`
         * @param content the {@link com.google.api.services.chromewebstore.v2.model.CancelSubmissionRequest}
         * @since 1.13
         */
        protected CancelSubmission(java.lang.String name, com.google.api.services.chromewebstore.v2.model.CancelSubmissionRequest content) {
          super(Chromewebstore.this, "POST", REST_PATH, content, com.google.api.services.chromewebstore.v2.model.CancelSubmissionResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publishers/[^/]+/items/[^/]+$");
          }
        }

        @Override
        public CancelSubmission set$Xgafv(java.lang.String $Xgafv) {
          return (CancelSubmission) super.set$Xgafv($Xgafv);
        }

        @Override
        public CancelSubmission setAccessToken(java.lang.String accessToken) {
          return (CancelSubmission) super.setAccessToken(accessToken);
        }

        @Override
        public CancelSubmission setAlt(java.lang.String alt) {
          return (CancelSubmission) super.setAlt(alt);
        }

        @Override
        public CancelSubmission setCallback(java.lang.String callback) {
          return (CancelSubmission) super.setCallback(callback);
        }

        @Override
        public CancelSubmission setFields(java.lang.String fields) {
          return (CancelSubmission) super.setFields(fields);
        }

        @Override
        public CancelSubmission setKey(java.lang.String key) {
          return (CancelSubmission) super.setKey(key);
        }

        @Override
        public CancelSubmission setOauthToken(java.lang.String oauthToken) {
          return (CancelSubmission) super.setOauthToken(oauthToken);
        }

        @Override
        public CancelSubmission setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (CancelSubmission) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public CancelSubmission setQuotaUser(java.lang.String quotaUser) {
          return (CancelSubmission) super.setQuotaUser(quotaUser);
        }

        @Override
        public CancelSubmission setUploadType(java.lang.String uploadType) {
          return (CancelSubmission) super.setUploadType(uploadType);
        }

        @Override
        public CancelSubmission setUploadProtocol(java.lang.String uploadProtocol) {
          return (CancelSubmission) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. Name of the item to cancel the submission of in the form
         * `publishers/{publisherId}/items/{itemId}`
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. Name of the item to cancel the submission of in the form
       `publishers/{publisherId}/items/{itemId}`
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. Name of the item to cancel the submission of in the form
         * `publishers/{publisherId}/items/{itemId}`
         */
        public CancelSubmission setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publishers/[^/]+/items/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public CancelSubmission set(String parameterName, Object value) {
          return (CancelSubmission) super.set(parameterName, value);
        }
      }
      /**
       * Fetch the status of an item.
       *
       * Create a request for the method "items.fetchStatus".
       *
       * This request holds the parameters needed by the chromewebstore server.  After setting any
       * optional parameters, call the {@link FetchStatus#execute()} method to invoke the remote
       * operation.
       *
       * @param name Required. Name of the item to retrieve the status of in the form
       *        `publishers/{publisherId}/items/{itemId}`
       * @return the request
       */
      public FetchStatus fetchStatus(java.lang.String name) throws java.io.IOException {
        FetchStatus result = new FetchStatus(name);
        initialize(result);
        return result;
      }

      public class FetchStatus extends ChromewebstoreRequest<com.google.api.services.chromewebstore.v2.model.FetchItemStatusResponse> {

        private static final String REST_PATH = "v2/{+name}:fetchStatus";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^publishers/[^/]+/items/[^/]+$");

        /**
         * Fetch the status of an item.
         *
         * Create a request for the method "items.fetchStatus".
         *
         * This request holds the parameters needed by the the chromewebstore server.  After setting any
         * optional parameters, call the {@link FetchStatus#execute()} method to invoke the remote
         * operation. <p> {@link
         * FetchStatus#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. Name of the item to retrieve the status of in the form
       *        `publishers/{publisherId}/items/{itemId}`
         * @since 1.13
         */
        protected FetchStatus(java.lang.String name) {
          super(Chromewebstore.this, "GET", REST_PATH, null, com.google.api.services.chromewebstore.v2.model.FetchItemStatusResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publishers/[^/]+/items/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public FetchStatus set$Xgafv(java.lang.String $Xgafv) {
          return (FetchStatus) super.set$Xgafv($Xgafv);
        }

        @Override
        public FetchStatus setAccessToken(java.lang.String accessToken) {
          return (FetchStatus) super.setAccessToken(accessToken);
        }

        @Override
        public FetchStatus setAlt(java.lang.String alt) {
          return (FetchStatus) super.setAlt(alt);
        }

        @Override
        public FetchStatus setCallback(java.lang.String callback) {
          return (FetchStatus) super.setCallback(callback);
        }

        @Override
        public FetchStatus setFields(java.lang.String fields) {
          return (FetchStatus) super.setFields(fields);
        }

        @Override
        public FetchStatus setKey(java.lang.String key) {
          return (FetchStatus) super.setKey(key);
        }

        @Override
        public FetchStatus setOauthToken(java.lang.String oauthToken) {
          return (FetchStatus) super.setOauthToken(oauthToken);
        }

        @Override
        public FetchStatus setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (FetchStatus) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public FetchStatus setQuotaUser(java.lang.String quotaUser) {
          return (FetchStatus) super.setQuotaUser(quotaUser);
        }

        @Override
        public FetchStatus setUploadType(java.lang.String uploadType) {
          return (FetchStatus) super.setUploadType(uploadType);
        }

        @Override
        public FetchStatus setUploadProtocol(java.lang.String uploadProtocol) {
          return (FetchStatus) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. Name of the item to retrieve the status of in the form
         * `publishers/{publisherId}/items/{itemId}`
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. Name of the item to retrieve the status of in the form
       `publishers/{publisherId}/items/{itemId}`
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. Name of the item to retrieve the status of in the form
         * `publishers/{publisherId}/items/{itemId}`
         */
        public FetchStatus setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publishers/[^/]+/items/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public FetchStatus set(String parameterName, Object value) {
          return (FetchStatus) super.set(parameterName, value);
        }
      }
      /**
       * Submit the item to be published in the store. The item will be submitted for review unless
       * `skip_review` is set to true, or the item is staged from a previous submission with
       * `publish_type` set to `STAGED_PUBLISH`.
       *
       * Create a request for the method "items.publish".
       *
       * This request holds the parameters needed by the chromewebstore server.  After setting any
       * optional parameters, call the {@link Publish#execute()} method to invoke the remote operation.
       *
       * @param name Required. Name of the item in the form `publishers/{publisherId}/items/{itemId}`
       * @param content the {@link com.google.api.services.chromewebstore.v2.model.PublishItemRequest}
       * @return the request
       */
      public Publish publish(java.lang.String name, com.google.api.services.chromewebstore.v2.model.PublishItemRequest content) throws java.io.IOException {
        Publish result = new Publish(name, content);
        initialize(result);
        return result;
      }

      public class Publish extends ChromewebstoreRequest<com.google.api.services.chromewebstore.v2.model.PublishItemResponse> {

        private static final String REST_PATH = "v2/{+name}:publish";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^publishers/[^/]+/items/[^/]+$");

        /**
         * Submit the item to be published in the store. The item will be submitted for review unless
         * `skip_review` is set to true, or the item is staged from a previous submission with
         * `publish_type` set to `STAGED_PUBLISH`.
         *
         * Create a request for the method "items.publish".
         *
         * This request holds the parameters needed by the the chromewebstore server.  After setting any
         * optional parameters, call the {@link Publish#execute()} method to invoke the remote operation.
         * <p> {@link
         * Publish#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. Name of the item in the form `publishers/{publisherId}/items/{itemId}`
         * @param content the {@link com.google.api.services.chromewebstore.v2.model.PublishItemRequest}
         * @since 1.13
         */
        protected Publish(java.lang.String name, com.google.api.services.chromewebstore.v2.model.PublishItemRequest content) {
          super(Chromewebstore.this, "POST", REST_PATH, content, com.google.api.services.chromewebstore.v2.model.PublishItemResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publishers/[^/]+/items/[^/]+$");
          }
        }

        @Override
        public Publish set$Xgafv(java.lang.String $Xgafv) {
          return (Publish) super.set$Xgafv($Xgafv);
        }

        @Override
        public Publish setAccessToken(java.lang.String accessToken) {
          return (Publish) super.setAccessToken(accessToken);
        }

        @Override
        public Publish setAlt(java.lang.String alt) {
          return (Publish) super.setAlt(alt);
        }

        @Override
        public Publish setCallback(java.lang.String callback) {
          return (Publish) super.setCallback(callback);
        }

        @Override
        public Publish setFields(java.lang.String fields) {
          return (Publish) super.setFields(fields);
        }

        @Override
        public Publish setKey(java.lang.String key) {
          return (Publish) super.setKey(key);
        }

        @Override
        public Publish setOauthToken(java.lang.String oauthToken) {
          return (Publish) super.setOauthToken(oauthToken);
        }

        @Override
        public Publish setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Publish) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Publish setQuotaUser(java.lang.String quotaUser) {
          return (Publish) super.setQuotaUser(quotaUser);
        }

        @Override
        public Publish setUploadType(java.lang.String uploadType) {
          return (Publish) super.setUploadType(uploadType);
        }

        @Override
        public Publish setUploadProtocol(java.lang.String uploadProtocol) {
          return (Publish) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. Name of the item in the form `publishers/{publisherId}/items/{itemId}` */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. Name of the item in the form `publishers/{publisherId}/items/{itemId}`
         */
        public java.lang.String getName() {
          return name;
        }

        /** Required. Name of the item in the form `publishers/{publisherId}/items/{itemId}` */
        public Publish setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publishers/[^/]+/items/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Publish set(String parameterName, Object value) {
          return (Publish) super.set(parameterName, value);
        }
      }
      /**
       * Set a higher target deploy percentage for the item's published revision. This will be updated
       * without the item being submitted for review. This is only available to items with over 10,000
       * seven-day active users.
       *
       * Create a request for the method "items.setPublishedDeployPercentage".
       *
       * This request holds the parameters needed by the chromewebstore server.  After setting any
       * optional parameters, call the {@link SetPublishedDeployPercentage#execute()} method to invoke the
       * remote operation.
       *
       * @param name Required. Name of the item to update the published revision of in the form
       *        `publishers/{publisherId}/items/{itemId}`
       * @param content the {@link com.google.api.services.chromewebstore.v2.model.SetPublishedDeployPercentageRequest}
       * @return the request
       */
      public SetPublishedDeployPercentage setPublishedDeployPercentage(java.lang.String name, com.google.api.services.chromewebstore.v2.model.SetPublishedDeployPercentageRequest content) throws java.io.IOException {
        SetPublishedDeployPercentage result = new SetPublishedDeployPercentage(name, content);
        initialize(result);
        return result;
      }

      public class SetPublishedDeployPercentage extends ChromewebstoreRequest<com.google.api.services.chromewebstore.v2.model.SetPublishedDeployPercentageResponse> {

        private static final String REST_PATH = "v2/{+name}:setPublishedDeployPercentage";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^publishers/[^/]+/items/[^/]+$");

        /**
         * Set a higher target deploy percentage for the item's published revision. This will be updated
         * without the item being submitted for review. This is only available to items with over 10,000
         * seven-day active users.
         *
         * Create a request for the method "items.setPublishedDeployPercentage".
         *
         * This request holds the parameters needed by the the chromewebstore server.  After setting any
         * optional parameters, call the {@link SetPublishedDeployPercentage#execute()} method to invoke
         * the remote operation. <p> {@link SetPublishedDeployPercentage#initialize(com.google.api.client.
         * googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
         * immediately after invoking the constructor. </p>
         *
         * @param name Required. Name of the item to update the published revision of in the form
       *        `publishers/{publisherId}/items/{itemId}`
         * @param content the {@link com.google.api.services.chromewebstore.v2.model.SetPublishedDeployPercentageRequest}
         * @since 1.13
         */
        protected SetPublishedDeployPercentage(java.lang.String name, com.google.api.services.chromewebstore.v2.model.SetPublishedDeployPercentageRequest content) {
          super(Chromewebstore.this, "POST", REST_PATH, content, com.google.api.services.chromewebstore.v2.model.SetPublishedDeployPercentageResponse.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publishers/[^/]+/items/[^/]+$");
          }
        }

        @Override
        public SetPublishedDeployPercentage set$Xgafv(java.lang.String $Xgafv) {
          return (SetPublishedDeployPercentage) super.set$Xgafv($Xgafv);
        }

        @Override
        public SetPublishedDeployPercentage setAccessToken(java.lang.String accessToken) {
          return (SetPublishedDeployPercentage) super.setAccessToken(accessToken);
        }

        @Override
        public SetPublishedDeployPercentage setAlt(java.lang.String alt) {
          return (SetPublishedDeployPercentage) super.setAlt(alt);
        }

        @Override
        public SetPublishedDeployPercentage setCallback(java.lang.String callback) {
          return (SetPublishedDeployPercentage) super.setCallback(callback);
        }

        @Override
        public SetPublishedDeployPercentage setFields(java.lang.String fields) {
          return (SetPublishedDeployPercentage) super.setFields(fields);
        }

        @Override
        public SetPublishedDeployPercentage setKey(java.lang.String key) {
          return (SetPublishedDeployPercentage) super.setKey(key);
        }

        @Override
        public SetPublishedDeployPercentage setOauthToken(java.lang.String oauthToken) {
          return (SetPublishedDeployPercentage) super.setOauthToken(oauthToken);
        }

        @Override
        public SetPublishedDeployPercentage setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (SetPublishedDeployPercentage) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public SetPublishedDeployPercentage setQuotaUser(java.lang.String quotaUser) {
          return (SetPublishedDeployPercentage) super.setQuotaUser(quotaUser);
        }

        @Override
        public SetPublishedDeployPercentage setUploadType(java.lang.String uploadType) {
          return (SetPublishedDeployPercentage) super.setUploadType(uploadType);
        }

        @Override
        public SetPublishedDeployPercentage setUploadProtocol(java.lang.String uploadProtocol) {
          return (SetPublishedDeployPercentage) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. Name of the item to update the published revision of in the form
         * `publishers/{publisherId}/items/{itemId}`
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. Name of the item to update the published revision of in the form
       `publishers/{publisherId}/items/{itemId}`
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. Name of the item to update the published revision of in the form
         * `publishers/{publisherId}/items/{itemId}`
         */
        public SetPublishedDeployPercentage setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^publishers/[^/]+/items/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public SetPublishedDeployPercentage set(String parameterName, Object value) {
          return (SetPublishedDeployPercentage) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link Chromewebstore}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Chromewebstore}. */
    @Override
    public Chromewebstore build() {
      return new Chromewebstore(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ChromewebstoreRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setChromewebstoreRequestInitializer(
        ChromewebstoreRequestInitializer chromewebstoreRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(chromewebstoreRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
