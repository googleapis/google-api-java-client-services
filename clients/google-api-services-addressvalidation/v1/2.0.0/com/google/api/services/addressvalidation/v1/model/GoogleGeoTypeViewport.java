/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.addressvalidation.v1.model;

/**
 * A latitude-longitude viewport, represented as two diagonally opposite `low` and `high` points. A
 * viewport is considered a closed region, i.e. it includes its boundary. The latitude bounds must
 * range between -90 to 90 degrees inclusive, and the longitude bounds must range between -180 to
 * 180 degrees inclusive. Various cases include: - If `low` = `high`, the viewport consists of that
 * single point. - If `low.longitude` > `high.longitude`, the longitude range is inverted (the
 * viewport crosses the 180 degree longitude line). - If `low.longitude` = -180 degrees and
 * `high.longitude` = 180 degrees, the viewport includes all longitudes. - If `low.longitude` = 180
 * degrees and `high.longitude` = -180 degrees, the longitude range is empty. - If `low.latitude` >
 * `high.latitude`, the latitude range is empty. Both `low` and `high` must be populated, and the
 * represented box cannot be empty (as specified by the definitions above). An empty viewport will
 * result in an error. For example, this viewport fully encloses New York City: { "low": {
 * "latitude": 40.477398, "longitude": -74.259087 }, "high": { "latitude": 40.91618, "longitude":
 * -73.70018 } }
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Address Validation API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleGeoTypeViewport extends com.google.api.client.json.GenericJson {

  /**
   * Required. The high point of the viewport.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeLatLng high;

  /**
   * Required. The low point of the viewport.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeLatLng low;

  /**
   * Required. The high point of the viewport.
   * @return value or {@code null} for none
   */
  public GoogleTypeLatLng getHigh() {
    return high;
  }

  /**
   * Required. The high point of the viewport.
   * @param high high or {@code null} for none
   */
  public GoogleGeoTypeViewport setHigh(GoogleTypeLatLng high) {
    this.high = high;
    return this;
  }

  /**
   * Required. The low point of the viewport.
   * @return value or {@code null} for none
   */
  public GoogleTypeLatLng getLow() {
    return low;
  }

  /**
   * Required. The low point of the viewport.
   * @param low low or {@code null} for none
   */
  public GoogleGeoTypeViewport setLow(GoogleTypeLatLng low) {
    this.low = low;
    return this;
  }

  @Override
  public GoogleGeoTypeViewport set(String fieldName, Object value) {
    return (GoogleGeoTypeViewport) super.set(fieldName, value);
  }

  @Override
  public GoogleGeoTypeViewport clone() {
    return (GoogleGeoTypeViewport) super.clone();
  }

}
