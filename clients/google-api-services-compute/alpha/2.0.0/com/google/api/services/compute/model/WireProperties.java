/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.compute.model;

/**
 * The properties of a wire.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Compute Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class WireProperties extends com.google.api.client.json.GenericJson {

  /**
   * The configuration of the bandwidth allocation, one of the following: - ALLOCATE_PER_WIRE:
   * configures a separate unmetered bandwidth allocation (and associated charges) for each wire in
   * the group. - SHARED_WITH_WIRE_GROUP: configures one unmetered bandwidth allocation for the wire
   * group. The unmetered bandwidth is divided equally across each wire in the group, but dynamic
   * throttling reallocates unused unmetered bandwidth from unused or underused wires to other wires
   * in the group. For example, with a four-wire box-and-cross group, when one Interconnect
   * connection is down, the unmetered bandwidth of the two down wires is reallocated to the
   * remaining up wires.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bandwidthAllocation;

  /**
   * The metered bandwidth in Gigabits per second, using decimal units. `10` is 10 Gbps, `100` is
   * 100 Gbps. The default value is `0`. You can specify unlimited bandwidth by entering `-1`.
   * However, actual data transfer is limited by the port speed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long bandwidthMetered;

  /**
   * The unmetered bandwidth in Gigabits per second, using decimal units. `10` is 10 Gbps, `100` is
   * 100 Gbps. Must be a multiple of 10.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long bandwidthUnmetered;

  /**
   * Response when a fault is detected in a pseudowire: - NONE: default. - DISABLE_PORT: set the
   * port line protocol down when inline probes detect a fault. This setting is only permitted on
   * port mode pseudowires.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String faultResponse;

  /**
   * The network service class.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String networkServiceClass;

  /**
   * The configuration of the bandwidth allocation, one of the following: - ALLOCATE_PER_WIRE:
   * configures a separate unmetered bandwidth allocation (and associated charges) for each wire in
   * the group. - SHARED_WITH_WIRE_GROUP: configures one unmetered bandwidth allocation for the wire
   * group. The unmetered bandwidth is divided equally across each wire in the group, but dynamic
   * throttling reallocates unused unmetered bandwidth from unused or underused wires to other wires
   * in the group. For example, with a four-wire box-and-cross group, when one Interconnect
   * connection is down, the unmetered bandwidth of the two down wires is reallocated to the
   * remaining up wires.
   * @return value or {@code null} for none
   */
  public java.lang.String getBandwidthAllocation() {
    return bandwidthAllocation;
  }

  /**
   * The configuration of the bandwidth allocation, one of the following: - ALLOCATE_PER_WIRE:
   * configures a separate unmetered bandwidth allocation (and associated charges) for each wire in
   * the group. - SHARED_WITH_WIRE_GROUP: configures one unmetered bandwidth allocation for the wire
   * group. The unmetered bandwidth is divided equally across each wire in the group, but dynamic
   * throttling reallocates unused unmetered bandwidth from unused or underused wires to other wires
   * in the group. For example, with a four-wire box-and-cross group, when one Interconnect
   * connection is down, the unmetered bandwidth of the two down wires is reallocated to the
   * remaining up wires.
   * @param bandwidthAllocation bandwidthAllocation or {@code null} for none
   */
  public WireProperties setBandwidthAllocation(java.lang.String bandwidthAllocation) {
    this.bandwidthAllocation = bandwidthAllocation;
    return this;
  }

  /**
   * The metered bandwidth in Gigabits per second, using decimal units. `10` is 10 Gbps, `100` is
   * 100 Gbps. The default value is `0`. You can specify unlimited bandwidth by entering `-1`.
   * However, actual data transfer is limited by the port speed.
   * @return value or {@code null} for none
   */
  public java.lang.Long getBandwidthMetered() {
    return bandwidthMetered;
  }

  /**
   * The metered bandwidth in Gigabits per second, using decimal units. `10` is 10 Gbps, `100` is
   * 100 Gbps. The default value is `0`. You can specify unlimited bandwidth by entering `-1`.
   * However, actual data transfer is limited by the port speed.
   * @param bandwidthMetered bandwidthMetered or {@code null} for none
   */
  public WireProperties setBandwidthMetered(java.lang.Long bandwidthMetered) {
    this.bandwidthMetered = bandwidthMetered;
    return this;
  }

  /**
   * The unmetered bandwidth in Gigabits per second, using decimal units. `10` is 10 Gbps, `100` is
   * 100 Gbps. Must be a multiple of 10.
   * @return value or {@code null} for none
   */
  public java.lang.Long getBandwidthUnmetered() {
    return bandwidthUnmetered;
  }

  /**
   * The unmetered bandwidth in Gigabits per second, using decimal units. `10` is 10 Gbps, `100` is
   * 100 Gbps. Must be a multiple of 10.
   * @param bandwidthUnmetered bandwidthUnmetered or {@code null} for none
   */
  public WireProperties setBandwidthUnmetered(java.lang.Long bandwidthUnmetered) {
    this.bandwidthUnmetered = bandwidthUnmetered;
    return this;
  }

  /**
   * Response when a fault is detected in a pseudowire: - NONE: default. - DISABLE_PORT: set the
   * port line protocol down when inline probes detect a fault. This setting is only permitted on
   * port mode pseudowires.
   * @return value or {@code null} for none
   */
  public java.lang.String getFaultResponse() {
    return faultResponse;
  }

  /**
   * Response when a fault is detected in a pseudowire: - NONE: default. - DISABLE_PORT: set the
   * port line protocol down when inline probes detect a fault. This setting is only permitted on
   * port mode pseudowires.
   * @param faultResponse faultResponse or {@code null} for none
   */
  public WireProperties setFaultResponse(java.lang.String faultResponse) {
    this.faultResponse = faultResponse;
    return this;
  }

  /**
   * The network service class.
   * @return value or {@code null} for none
   */
  public java.lang.String getNetworkServiceClass() {
    return networkServiceClass;
  }

  /**
   * The network service class.
   * @param networkServiceClass networkServiceClass or {@code null} for none
   */
  public WireProperties setNetworkServiceClass(java.lang.String networkServiceClass) {
    this.networkServiceClass = networkServiceClass;
    return this;
  }

  @Override
  public WireProperties set(String fieldName, Object value) {
    return (WireProperties) super.set(fieldName, value);
  }

  @Override
  public WireProperties clone() {
    return (WireProperties) super.clone();
  }

}
