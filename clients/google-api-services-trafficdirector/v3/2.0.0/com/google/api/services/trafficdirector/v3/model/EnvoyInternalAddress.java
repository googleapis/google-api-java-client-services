/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.trafficdirector.v3.model;

/**
 * The address represents an envoy internal listener. [#comment:
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Traffic Director API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class EnvoyInternalAddress extends com.google.api.client.json.GenericJson {

  /**
   * Specifies an endpoint identifier to distinguish between multiple endpoints for the same
   * internal listener in a single upstream pool. Only used in the upstream addresses for tracking
   * changes to individual endpoints. This, for example, may be set to the final destination IP for
   * the target internal listener.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String endpointId;

  /**
   * Specifies the :ref:`name ` of the internal listener.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serverListenerName;

  /**
   * Specifies an endpoint identifier to distinguish between multiple endpoints for the same
   * internal listener in a single upstream pool. Only used in the upstream addresses for tracking
   * changes to individual endpoints. This, for example, may be set to the final destination IP for
   * the target internal listener.
   * @return value or {@code null} for none
   */
  public java.lang.String getEndpointId() {
    return endpointId;
  }

  /**
   * Specifies an endpoint identifier to distinguish between multiple endpoints for the same
   * internal listener in a single upstream pool. Only used in the upstream addresses for tracking
   * changes to individual endpoints. This, for example, may be set to the final destination IP for
   * the target internal listener.
   * @param endpointId endpointId or {@code null} for none
   */
  public EnvoyInternalAddress setEndpointId(java.lang.String endpointId) {
    this.endpointId = endpointId;
    return this;
  }

  /**
   * Specifies the :ref:`name ` of the internal listener.
   * @return value or {@code null} for none
   */
  public java.lang.String getServerListenerName() {
    return serverListenerName;
  }

  /**
   * Specifies the :ref:`name ` of the internal listener.
   * @param serverListenerName serverListenerName or {@code null} for none
   */
  public EnvoyInternalAddress setServerListenerName(java.lang.String serverListenerName) {
    this.serverListenerName = serverListenerName;
    return this;
  }

  @Override
  public EnvoyInternalAddress set(String fieldName, Object value) {
    return (EnvoyInternalAddress) super.set(fieldName, value);
  }

  @Override
  public EnvoyInternalAddress clone() {
    return (EnvoyInternalAddress) super.clone();
  }

}
