/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.mybusinesslodging.v1.model;

/**
 * Features in the living area.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the My Business Lodging API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LivingAreaFeatures extends com.google.api.client.json.GenericJson {

  /**
   * Air conditioning. An electrical machine used to cool the temperature of the guestroom.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean airConditioning;

  /**
   * Air conditioning exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String airConditioningException;

  /**
   * Bathtub. A fixed plumbing feature set on the floor and consisting of a large container that
   * accommodates the body of an adult for the purpose of seated bathing. Includes knobs or fixtures
   * to control the temperature of the water, a faucet through which the water flows, and a drain
   * that can be closed for filling and opened for draining.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean bathtub;

  /**
   * Bathtub exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bathtubException;

  /**
   * Bidet. A plumbing fixture attached to a toilet or a low, fixed sink designed for the purpose of
   * washing after toilet use.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean bidet;

  /**
   * Bidet exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bidetException;

  /**
   * Dryer. An electrical machine designed to dry clothing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean dryer;

  /**
   * Dryer exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dryerException;

  /**
   * Electronic room key. A card coded by the check-in computer that is read by the lock on the
   * hotel guestroom door to allow for entry.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean electronicRoomKey;

  /**
   * Electronic room key exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String electronicRoomKeyException;

  /**
   * Fireplace. A framed opening (aka hearth) at the base of a chimney in which logs or an
   * electrical fire feature are burned to provide a relaxing ambiance or to heat the room. Often
   * made of bricks or stone.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean fireplace;

  /**
   * Fireplace exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fireplaceException;

  /**
   * Hairdryer. A handheld electric appliance that blows temperature-controlled air for the purpose
   * of drying wet hair. Can be mounted to a bathroom wall or a freestanding device stored in the
   * guestroom's bathroom or closet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hairdryer;

  /**
   * Hairdryer exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hairdryerException;

  /**
   * Heating. An electrical machine used to warm the temperature of the guestroom.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean heating;

  /**
   * Heating exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String heatingException;

  /**
   * In-unit safe. A strong fireproof cabinet with a programmable lock, used for the protected
   * storage of valuables in a guestroom. Often built into a closet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean inunitSafe;

  /**
   * In-unit safe exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String inunitSafeException;

  /**
   * In-unit Wifi available. Guests can wirelessly connect to the Internet in the guestroom. Can be
   * free or for a fee.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean inunitWifiAvailable;

  /**
   * In-unit Wifi available exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String inunitWifiAvailableException;

  /**
   * Ironing equipment. A device, usually with a flat metal base, that is heated to smooth, finish,
   * or press clothes and a flat, padded, cloth-covered surface on which the clothes are worked.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean ironingEquipment;

  /**
   * Ironing equipment exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ironingEquipmentException;

  /**
   * Pay per view movies. Televisions with channels that offer films that can be viewed for a fee,
   * and have an interface to allow the viewer to accept the terms and approve payment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean payPerViewMovies;

  /**
   * Pay per view movies exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String payPerViewMoviesException;

  /**
   * Private bathroom. A bathroom designated for the express use of the guests staying in a specific
   * guestroom.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean privateBathroom;

  /**
   * Private bathroom exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String privateBathroomException;

  /**
   * Shower. A fixed plumbing fixture for standing bathing that features a tall spray spout or
   * faucet through which water flows, a knob or knobs that control the water's temperature, and a
   * drain in the floor.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean shower;

  /**
   * Shower exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String showerException;

  /**
   * Toilet. A fixed bathroom feature connected to a sewer or septic system and consisting of a
   * water-flushed bowl with a seat, as well as a device that elicites the water-flushing action.
   * Used for the process and disposal of human waste.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean toilet;

  /**
   * Toilet exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String toiletException;

  /**
   * TV. A television is available in the guestroom.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean tv;

  /**
   * TV casting. A television equipped with a device through which the video entertainment accessed
   * on a personal computer, phone or tablet can be wirelessly delivered to and viewed on the
   * guestroom's television.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean tvCasting;

  /**
   * TV exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tvCastingException;

  /**
   * TV exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tvException;

  /**
   * TV streaming. Televisions that embed a range of web-based apps to allow for watching media from
   * those apps.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean tvStreaming;

  /**
   * TV streaming exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tvStreamingException;

  /**
   * Universal power adapters. A power supply for electronic devices which plugs into a wall for the
   * purpose of converting AC to a single DC voltage. Also know as AC adapter or charger.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean universalPowerAdapters;

  /**
   * Universal power adapters exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String universalPowerAdaptersException;

  /**
   * Washer. An electrical machine connected to a running water source designed to launder clothing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean washer;

  /**
   * Washer exception.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String washerException;

  /**
   * Air conditioning. An electrical machine used to cool the temperature of the guestroom.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAirConditioning() {
    return airConditioning;
  }

  /**
   * Air conditioning. An electrical machine used to cool the temperature of the guestroom.
   * @param airConditioning airConditioning or {@code null} for none
   */
  public LivingAreaFeatures setAirConditioning(java.lang.Boolean airConditioning) {
    this.airConditioning = airConditioning;
    return this;
  }

  /**
   * Air conditioning exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getAirConditioningException() {
    return airConditioningException;
  }

  /**
   * Air conditioning exception.
   * @param airConditioningException airConditioningException or {@code null} for none
   */
  public LivingAreaFeatures setAirConditioningException(java.lang.String airConditioningException) {
    this.airConditioningException = airConditioningException;
    return this;
  }

  /**
   * Bathtub. A fixed plumbing feature set on the floor and consisting of a large container that
   * accommodates the body of an adult for the purpose of seated bathing. Includes knobs or fixtures
   * to control the temperature of the water, a faucet through which the water flows, and a drain
   * that can be closed for filling and opened for draining.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getBathtub() {
    return bathtub;
  }

  /**
   * Bathtub. A fixed plumbing feature set on the floor and consisting of a large container that
   * accommodates the body of an adult for the purpose of seated bathing. Includes knobs or fixtures
   * to control the temperature of the water, a faucet through which the water flows, and a drain
   * that can be closed for filling and opened for draining.
   * @param bathtub bathtub or {@code null} for none
   */
  public LivingAreaFeatures setBathtub(java.lang.Boolean bathtub) {
    this.bathtub = bathtub;
    return this;
  }

  /**
   * Bathtub exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getBathtubException() {
    return bathtubException;
  }

  /**
   * Bathtub exception.
   * @param bathtubException bathtubException or {@code null} for none
   */
  public LivingAreaFeatures setBathtubException(java.lang.String bathtubException) {
    this.bathtubException = bathtubException;
    return this;
  }

  /**
   * Bidet. A plumbing fixture attached to a toilet or a low, fixed sink designed for the purpose of
   * washing after toilet use.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getBidet() {
    return bidet;
  }

  /**
   * Bidet. A plumbing fixture attached to a toilet or a low, fixed sink designed for the purpose of
   * washing after toilet use.
   * @param bidet bidet or {@code null} for none
   */
  public LivingAreaFeatures setBidet(java.lang.Boolean bidet) {
    this.bidet = bidet;
    return this;
  }

  /**
   * Bidet exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getBidetException() {
    return bidetException;
  }

  /**
   * Bidet exception.
   * @param bidetException bidetException or {@code null} for none
   */
  public LivingAreaFeatures setBidetException(java.lang.String bidetException) {
    this.bidetException = bidetException;
    return this;
  }

  /**
   * Dryer. An electrical machine designed to dry clothing.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDryer() {
    return dryer;
  }

  /**
   * Dryer. An electrical machine designed to dry clothing.
   * @param dryer dryer or {@code null} for none
   */
  public LivingAreaFeatures setDryer(java.lang.Boolean dryer) {
    this.dryer = dryer;
    return this;
  }

  /**
   * Dryer exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getDryerException() {
    return dryerException;
  }

  /**
   * Dryer exception.
   * @param dryerException dryerException or {@code null} for none
   */
  public LivingAreaFeatures setDryerException(java.lang.String dryerException) {
    this.dryerException = dryerException;
    return this;
  }

  /**
   * Electronic room key. A card coded by the check-in computer that is read by the lock on the
   * hotel guestroom door to allow for entry.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getElectronicRoomKey() {
    return electronicRoomKey;
  }

  /**
   * Electronic room key. A card coded by the check-in computer that is read by the lock on the
   * hotel guestroom door to allow for entry.
   * @param electronicRoomKey electronicRoomKey or {@code null} for none
   */
  public LivingAreaFeatures setElectronicRoomKey(java.lang.Boolean electronicRoomKey) {
    this.electronicRoomKey = electronicRoomKey;
    return this;
  }

  /**
   * Electronic room key exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getElectronicRoomKeyException() {
    return electronicRoomKeyException;
  }

  /**
   * Electronic room key exception.
   * @param electronicRoomKeyException electronicRoomKeyException or {@code null} for none
   */
  public LivingAreaFeatures setElectronicRoomKeyException(java.lang.String electronicRoomKeyException) {
    this.electronicRoomKeyException = electronicRoomKeyException;
    return this;
  }

  /**
   * Fireplace. A framed opening (aka hearth) at the base of a chimney in which logs or an
   * electrical fire feature are burned to provide a relaxing ambiance or to heat the room. Often
   * made of bricks or stone.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getFireplace() {
    return fireplace;
  }

  /**
   * Fireplace. A framed opening (aka hearth) at the base of a chimney in which logs or an
   * electrical fire feature are burned to provide a relaxing ambiance or to heat the room. Often
   * made of bricks or stone.
   * @param fireplace fireplace or {@code null} for none
   */
  public LivingAreaFeatures setFireplace(java.lang.Boolean fireplace) {
    this.fireplace = fireplace;
    return this;
  }

  /**
   * Fireplace exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getFireplaceException() {
    return fireplaceException;
  }

  /**
   * Fireplace exception.
   * @param fireplaceException fireplaceException or {@code null} for none
   */
  public LivingAreaFeatures setFireplaceException(java.lang.String fireplaceException) {
    this.fireplaceException = fireplaceException;
    return this;
  }

  /**
   * Hairdryer. A handheld electric appliance that blows temperature-controlled air for the purpose
   * of drying wet hair. Can be mounted to a bathroom wall or a freestanding device stored in the
   * guestroom's bathroom or closet.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHairdryer() {
    return hairdryer;
  }

  /**
   * Hairdryer. A handheld electric appliance that blows temperature-controlled air for the purpose
   * of drying wet hair. Can be mounted to a bathroom wall or a freestanding device stored in the
   * guestroom's bathroom or closet.
   * @param hairdryer hairdryer or {@code null} for none
   */
  public LivingAreaFeatures setHairdryer(java.lang.Boolean hairdryer) {
    this.hairdryer = hairdryer;
    return this;
  }

  /**
   * Hairdryer exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getHairdryerException() {
    return hairdryerException;
  }

  /**
   * Hairdryer exception.
   * @param hairdryerException hairdryerException or {@code null} for none
   */
  public LivingAreaFeatures setHairdryerException(java.lang.String hairdryerException) {
    this.hairdryerException = hairdryerException;
    return this;
  }

  /**
   * Heating. An electrical machine used to warm the temperature of the guestroom.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHeating() {
    return heating;
  }

  /**
   * Heating. An electrical machine used to warm the temperature of the guestroom.
   * @param heating heating or {@code null} for none
   */
  public LivingAreaFeatures setHeating(java.lang.Boolean heating) {
    this.heating = heating;
    return this;
  }

  /**
   * Heating exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getHeatingException() {
    return heatingException;
  }

  /**
   * Heating exception.
   * @param heatingException heatingException or {@code null} for none
   */
  public LivingAreaFeatures setHeatingException(java.lang.String heatingException) {
    this.heatingException = heatingException;
    return this;
  }

  /**
   * In-unit safe. A strong fireproof cabinet with a programmable lock, used for the protected
   * storage of valuables in a guestroom. Often built into a closet.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getInunitSafe() {
    return inunitSafe;
  }

  /**
   * In-unit safe. A strong fireproof cabinet with a programmable lock, used for the protected
   * storage of valuables in a guestroom. Often built into a closet.
   * @param inunitSafe inunitSafe or {@code null} for none
   */
  public LivingAreaFeatures setInunitSafe(java.lang.Boolean inunitSafe) {
    this.inunitSafe = inunitSafe;
    return this;
  }

  /**
   * In-unit safe exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getInunitSafeException() {
    return inunitSafeException;
  }

  /**
   * In-unit safe exception.
   * @param inunitSafeException inunitSafeException or {@code null} for none
   */
  public LivingAreaFeatures setInunitSafeException(java.lang.String inunitSafeException) {
    this.inunitSafeException = inunitSafeException;
    return this;
  }

  /**
   * In-unit Wifi available. Guests can wirelessly connect to the Internet in the guestroom. Can be
   * free or for a fee.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getInunitWifiAvailable() {
    return inunitWifiAvailable;
  }

  /**
   * In-unit Wifi available. Guests can wirelessly connect to the Internet in the guestroom. Can be
   * free or for a fee.
   * @param inunitWifiAvailable inunitWifiAvailable or {@code null} for none
   */
  public LivingAreaFeatures setInunitWifiAvailable(java.lang.Boolean inunitWifiAvailable) {
    this.inunitWifiAvailable = inunitWifiAvailable;
    return this;
  }

  /**
   * In-unit Wifi available exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getInunitWifiAvailableException() {
    return inunitWifiAvailableException;
  }

  /**
   * In-unit Wifi available exception.
   * @param inunitWifiAvailableException inunitWifiAvailableException or {@code null} for none
   */
  public LivingAreaFeatures setInunitWifiAvailableException(java.lang.String inunitWifiAvailableException) {
    this.inunitWifiAvailableException = inunitWifiAvailableException;
    return this;
  }

  /**
   * Ironing equipment. A device, usually with a flat metal base, that is heated to smooth, finish,
   * or press clothes and a flat, padded, cloth-covered surface on which the clothes are worked.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIroningEquipment() {
    return ironingEquipment;
  }

  /**
   * Ironing equipment. A device, usually with a flat metal base, that is heated to smooth, finish,
   * or press clothes and a flat, padded, cloth-covered surface on which the clothes are worked.
   * @param ironingEquipment ironingEquipment or {@code null} for none
   */
  public LivingAreaFeatures setIroningEquipment(java.lang.Boolean ironingEquipment) {
    this.ironingEquipment = ironingEquipment;
    return this;
  }

  /**
   * Ironing equipment exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getIroningEquipmentException() {
    return ironingEquipmentException;
  }

  /**
   * Ironing equipment exception.
   * @param ironingEquipmentException ironingEquipmentException or {@code null} for none
   */
  public LivingAreaFeatures setIroningEquipmentException(java.lang.String ironingEquipmentException) {
    this.ironingEquipmentException = ironingEquipmentException;
    return this;
  }

  /**
   * Pay per view movies. Televisions with channels that offer films that can be viewed for a fee,
   * and have an interface to allow the viewer to accept the terms and approve payment.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPayPerViewMovies() {
    return payPerViewMovies;
  }

  /**
   * Pay per view movies. Televisions with channels that offer films that can be viewed for a fee,
   * and have an interface to allow the viewer to accept the terms and approve payment.
   * @param payPerViewMovies payPerViewMovies or {@code null} for none
   */
  public LivingAreaFeatures setPayPerViewMovies(java.lang.Boolean payPerViewMovies) {
    this.payPerViewMovies = payPerViewMovies;
    return this;
  }

  /**
   * Pay per view movies exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getPayPerViewMoviesException() {
    return payPerViewMoviesException;
  }

  /**
   * Pay per view movies exception.
   * @param payPerViewMoviesException payPerViewMoviesException or {@code null} for none
   */
  public LivingAreaFeatures setPayPerViewMoviesException(java.lang.String payPerViewMoviesException) {
    this.payPerViewMoviesException = payPerViewMoviesException;
    return this;
  }

  /**
   * Private bathroom. A bathroom designated for the express use of the guests staying in a specific
   * guestroom.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPrivateBathroom() {
    return privateBathroom;
  }

  /**
   * Private bathroom. A bathroom designated for the express use of the guests staying in a specific
   * guestroom.
   * @param privateBathroom privateBathroom or {@code null} for none
   */
  public LivingAreaFeatures setPrivateBathroom(java.lang.Boolean privateBathroom) {
    this.privateBathroom = privateBathroom;
    return this;
  }

  /**
   * Private bathroom exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getPrivateBathroomException() {
    return privateBathroomException;
  }

  /**
   * Private bathroom exception.
   * @param privateBathroomException privateBathroomException or {@code null} for none
   */
  public LivingAreaFeatures setPrivateBathroomException(java.lang.String privateBathroomException) {
    this.privateBathroomException = privateBathroomException;
    return this;
  }

  /**
   * Shower. A fixed plumbing fixture for standing bathing that features a tall spray spout or
   * faucet through which water flows, a knob or knobs that control the water's temperature, and a
   * drain in the floor.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getShower() {
    return shower;
  }

  /**
   * Shower. A fixed plumbing fixture for standing bathing that features a tall spray spout or
   * faucet through which water flows, a knob or knobs that control the water's temperature, and a
   * drain in the floor.
   * @param shower shower or {@code null} for none
   */
  public LivingAreaFeatures setShower(java.lang.Boolean shower) {
    this.shower = shower;
    return this;
  }

  /**
   * Shower exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getShowerException() {
    return showerException;
  }

  /**
   * Shower exception.
   * @param showerException showerException or {@code null} for none
   */
  public LivingAreaFeatures setShowerException(java.lang.String showerException) {
    this.showerException = showerException;
    return this;
  }

  /**
   * Toilet. A fixed bathroom feature connected to a sewer or septic system and consisting of a
   * water-flushed bowl with a seat, as well as a device that elicites the water-flushing action.
   * Used for the process and disposal of human waste.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getToilet() {
    return toilet;
  }

  /**
   * Toilet. A fixed bathroom feature connected to a sewer or septic system and consisting of a
   * water-flushed bowl with a seat, as well as a device that elicites the water-flushing action.
   * Used for the process and disposal of human waste.
   * @param toilet toilet or {@code null} for none
   */
  public LivingAreaFeatures setToilet(java.lang.Boolean toilet) {
    this.toilet = toilet;
    return this;
  }

  /**
   * Toilet exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getToiletException() {
    return toiletException;
  }

  /**
   * Toilet exception.
   * @param toiletException toiletException or {@code null} for none
   */
  public LivingAreaFeatures setToiletException(java.lang.String toiletException) {
    this.toiletException = toiletException;
    return this;
  }

  /**
   * TV. A television is available in the guestroom.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getTv() {
    return tv;
  }

  /**
   * TV. A television is available in the guestroom.
   * @param tv tv or {@code null} for none
   */
  public LivingAreaFeatures setTv(java.lang.Boolean tv) {
    this.tv = tv;
    return this;
  }

  /**
   * TV casting. A television equipped with a device through which the video entertainment accessed
   * on a personal computer, phone or tablet can be wirelessly delivered to and viewed on the
   * guestroom's television.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getTvCasting() {
    return tvCasting;
  }

  /**
   * TV casting. A television equipped with a device through which the video entertainment accessed
   * on a personal computer, phone or tablet can be wirelessly delivered to and viewed on the
   * guestroom's television.
   * @param tvCasting tvCasting or {@code null} for none
   */
  public LivingAreaFeatures setTvCasting(java.lang.Boolean tvCasting) {
    this.tvCasting = tvCasting;
    return this;
  }

  /**
   * TV exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getTvCastingException() {
    return tvCastingException;
  }

  /**
   * TV exception.
   * @param tvCastingException tvCastingException or {@code null} for none
   */
  public LivingAreaFeatures setTvCastingException(java.lang.String tvCastingException) {
    this.tvCastingException = tvCastingException;
    return this;
  }

  /**
   * TV exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getTvException() {
    return tvException;
  }

  /**
   * TV exception.
   * @param tvException tvException or {@code null} for none
   */
  public LivingAreaFeatures setTvException(java.lang.String tvException) {
    this.tvException = tvException;
    return this;
  }

  /**
   * TV streaming. Televisions that embed a range of web-based apps to allow for watching media from
   * those apps.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getTvStreaming() {
    return tvStreaming;
  }

  /**
   * TV streaming. Televisions that embed a range of web-based apps to allow for watching media from
   * those apps.
   * @param tvStreaming tvStreaming or {@code null} for none
   */
  public LivingAreaFeatures setTvStreaming(java.lang.Boolean tvStreaming) {
    this.tvStreaming = tvStreaming;
    return this;
  }

  /**
   * TV streaming exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getTvStreamingException() {
    return tvStreamingException;
  }

  /**
   * TV streaming exception.
   * @param tvStreamingException tvStreamingException or {@code null} for none
   */
  public LivingAreaFeatures setTvStreamingException(java.lang.String tvStreamingException) {
    this.tvStreamingException = tvStreamingException;
    return this;
  }

  /**
   * Universal power adapters. A power supply for electronic devices which plugs into a wall for the
   * purpose of converting AC to a single DC voltage. Also know as AC adapter or charger.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUniversalPowerAdapters() {
    return universalPowerAdapters;
  }

  /**
   * Universal power adapters. A power supply for electronic devices which plugs into a wall for the
   * purpose of converting AC to a single DC voltage. Also know as AC adapter or charger.
   * @param universalPowerAdapters universalPowerAdapters or {@code null} for none
   */
  public LivingAreaFeatures setUniversalPowerAdapters(java.lang.Boolean universalPowerAdapters) {
    this.universalPowerAdapters = universalPowerAdapters;
    return this;
  }

  /**
   * Universal power adapters exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getUniversalPowerAdaptersException() {
    return universalPowerAdaptersException;
  }

  /**
   * Universal power adapters exception.
   * @param universalPowerAdaptersException universalPowerAdaptersException or {@code null} for none
   */
  public LivingAreaFeatures setUniversalPowerAdaptersException(java.lang.String universalPowerAdaptersException) {
    this.universalPowerAdaptersException = universalPowerAdaptersException;
    return this;
  }

  /**
   * Washer. An electrical machine connected to a running water source designed to launder clothing.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getWasher() {
    return washer;
  }

  /**
   * Washer. An electrical machine connected to a running water source designed to launder clothing.
   * @param washer washer or {@code null} for none
   */
  public LivingAreaFeatures setWasher(java.lang.Boolean washer) {
    this.washer = washer;
    return this;
  }

  /**
   * Washer exception.
   * @return value or {@code null} for none
   */
  public java.lang.String getWasherException() {
    return washerException;
  }

  /**
   * Washer exception.
   * @param washerException washerException or {@code null} for none
   */
  public LivingAreaFeatures setWasherException(java.lang.String washerException) {
    this.washerException = washerException;
    return this;
  }

  @Override
  public LivingAreaFeatures set(String fieldName, Object value) {
    return (LivingAreaFeatures) super.set(fieldName, value);
  }

  @Override
  public LivingAreaFeatures clone() {
    return (LivingAreaFeatures) super.clone();
  }

}
