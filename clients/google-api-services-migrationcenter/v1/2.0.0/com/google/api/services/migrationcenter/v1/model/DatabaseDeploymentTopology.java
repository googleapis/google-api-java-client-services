/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.migrationcenter.v1.model;

/**
 * Details of database deployment's topology.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Migration Center API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DatabaseDeploymentTopology extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Number of total logical cores.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer coreCount;

  /**
   * Optional. Number of total logical cores limited by db deployment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer coreLimit;

  /**
   * Optional. Disk allocated in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long diskAllocatedBytes;

  /**
   * Optional. Disk used in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long diskUsedBytes;

  /**
   * Optional. List of database instances.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DatabaseInstance> instances;

  /**
   * Optional. Total memory in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long memoryBytes;

  /**
   * Optional. Total memory in bytes limited by db deployment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long memoryLimitBytes;

  /**
   * Optional. Number of total physical cores.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer physicalCoreCount;

  /**
   * Optional. Number of total physical cores limited by db deployment.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer physicalCoreLimit;

  /**
   * Optional. Number of total logical cores.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCoreCount() {
    return coreCount;
  }

  /**
   * Optional. Number of total logical cores.
   * @param coreCount coreCount or {@code null} for none
   */
  public DatabaseDeploymentTopology setCoreCount(java.lang.Integer coreCount) {
    this.coreCount = coreCount;
    return this;
  }

  /**
   * Optional. Number of total logical cores limited by db deployment.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCoreLimit() {
    return coreLimit;
  }

  /**
   * Optional. Number of total logical cores limited by db deployment.
   * @param coreLimit coreLimit or {@code null} for none
   */
  public DatabaseDeploymentTopology setCoreLimit(java.lang.Integer coreLimit) {
    this.coreLimit = coreLimit;
    return this;
  }

  /**
   * Optional. Disk allocated in bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Long getDiskAllocatedBytes() {
    return diskAllocatedBytes;
  }

  /**
   * Optional. Disk allocated in bytes.
   * @param diskAllocatedBytes diskAllocatedBytes or {@code null} for none
   */
  public DatabaseDeploymentTopology setDiskAllocatedBytes(java.lang.Long diskAllocatedBytes) {
    this.diskAllocatedBytes = diskAllocatedBytes;
    return this;
  }

  /**
   * Optional. Disk used in bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Long getDiskUsedBytes() {
    return diskUsedBytes;
  }

  /**
   * Optional. Disk used in bytes.
   * @param diskUsedBytes diskUsedBytes or {@code null} for none
   */
  public DatabaseDeploymentTopology setDiskUsedBytes(java.lang.Long diskUsedBytes) {
    this.diskUsedBytes = diskUsedBytes;
    return this;
  }

  /**
   * Optional. List of database instances.
   * @return value or {@code null} for none
   */
  public java.util.List<DatabaseInstance> getInstances() {
    return instances;
  }

  /**
   * Optional. List of database instances.
   * @param instances instances or {@code null} for none
   */
  public DatabaseDeploymentTopology setInstances(java.util.List<DatabaseInstance> instances) {
    this.instances = instances;
    return this;
  }

  /**
   * Optional. Total memory in bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMemoryBytes() {
    return memoryBytes;
  }

  /**
   * Optional. Total memory in bytes.
   * @param memoryBytes memoryBytes or {@code null} for none
   */
  public DatabaseDeploymentTopology setMemoryBytes(java.lang.Long memoryBytes) {
    this.memoryBytes = memoryBytes;
    return this;
  }

  /**
   * Optional. Total memory in bytes limited by db deployment.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMemoryLimitBytes() {
    return memoryLimitBytes;
  }

  /**
   * Optional. Total memory in bytes limited by db deployment.
   * @param memoryLimitBytes memoryLimitBytes or {@code null} for none
   */
  public DatabaseDeploymentTopology setMemoryLimitBytes(java.lang.Long memoryLimitBytes) {
    this.memoryLimitBytes = memoryLimitBytes;
    return this;
  }

  /**
   * Optional. Number of total physical cores.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPhysicalCoreCount() {
    return physicalCoreCount;
  }

  /**
   * Optional. Number of total physical cores.
   * @param physicalCoreCount physicalCoreCount or {@code null} for none
   */
  public DatabaseDeploymentTopology setPhysicalCoreCount(java.lang.Integer physicalCoreCount) {
    this.physicalCoreCount = physicalCoreCount;
    return this;
  }

  /**
   * Optional. Number of total physical cores limited by db deployment.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPhysicalCoreLimit() {
    return physicalCoreLimit;
  }

  /**
   * Optional. Number of total physical cores limited by db deployment.
   * @param physicalCoreLimit physicalCoreLimit or {@code null} for none
   */
  public DatabaseDeploymentTopology setPhysicalCoreLimit(java.lang.Integer physicalCoreLimit) {
    this.physicalCoreLimit = physicalCoreLimit;
    return this;
  }

  @Override
  public DatabaseDeploymentTopology set(String fieldName, Object value) {
    return (DatabaseDeploymentTopology) super.set(fieldName, value);
  }

  @Override
  public DatabaseDeploymentTopology clone() {
    return (DatabaseDeploymentTopology) super.clone();
  }

}
