/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.securesourcemanager.v1.model;

/**
 * The request to unresolve multiple pull request comments.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Secure Source Manager API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class UnresolvePullRequestCommentsRequest extends com.google.api.client.json.GenericJson {

  /**
   * Optional. If set, at least one comment in a thread is required, rest of the comments in the
   * same thread will be automatically updated to unresolved. If unset, all comments in the same
   * thread need be present.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean autoFill;

  /**
   * Required. The names of the pull request comments to unresolve. Format: `projects/{project_numbe
   * r}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullRequ
   * estComments/{comment_id}` Only comments from the same threads are allowed in the same request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> names;

  /**
   * Optional. If set, at least one comment in a thread is required, rest of the comments in the
   * same thread will be automatically updated to unresolved. If unset, all comments in the same
   * thread need be present.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAutoFill() {
    return autoFill;
  }

  /**
   * Optional. If set, at least one comment in a thread is required, rest of the comments in the
   * same thread will be automatically updated to unresolved. If unset, all comments in the same
   * thread need be present.
   * @param autoFill autoFill or {@code null} for none
   */
  public UnresolvePullRequestCommentsRequest setAutoFill(java.lang.Boolean autoFill) {
    this.autoFill = autoFill;
    return this;
  }

  /**
   * Required. The names of the pull request comments to unresolve. Format: `projects/{project_numbe
   * r}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullRequ
   * estComments/{comment_id}` Only comments from the same threads are allowed in the same request.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getNames() {
    return names;
  }

  /**
   * Required. The names of the pull request comments to unresolve. Format: `projects/{project_numbe
   * r}/locations/{location_id}/repositories/{repository_id}/pullRequests/{pull_request_id}/pullRequ
   * estComments/{comment_id}` Only comments from the same threads are allowed in the same request.
   * @param names names or {@code null} for none
   */
  public UnresolvePullRequestCommentsRequest setNames(java.util.List<java.lang.String> names) {
    this.names = names;
    return this;
  }

  @Override
  public UnresolvePullRequestCommentsRequest set(String fieldName, Object value) {
    return (UnresolvePullRequestCommentsRequest) super.set(fieldName, value);
  }

  @Override
  public UnresolvePullRequestCommentsRequest clone() {
    return (UnresolvePullRequestCommentsRequest) super.clone();
  }

}
