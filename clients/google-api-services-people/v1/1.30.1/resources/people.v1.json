{
  "version": "v1",
  "revision": "20200513",
  "rootUrl": "https://people.googleapis.com/",
  "id": "people:v1",
  "protocol": "rest",
  "resources": {
    "people": {
      "resources": {
        "connections": {
          "methods": {
            "list": {
              "flatPath": "v1/people/{peopleId}/connections",
              "parameterOrder": [
                "resourceName"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/contacts",
                "https://www.googleapis.com/auth/contacts.readonly"
              ],
              "parameters": {
                "requestMask.includeField": {
                  "location": "query",
                  "type": "string",
                  "description": "Required. Comma-separated list of person fields to be included in the response. Each\npath should start with `person.`: for example, `person.names` or\n`person.photos`.",
                  "format": "google-fieldmask"
                },
                "sortOrder": {
                  "enum": [
                    "LAST_MODIFIED_ASCENDING",
                    "LAST_MODIFIED_DESCENDING",
                    "FIRST_NAME_ASCENDING",
                    "LAST_NAME_ASCENDING"
                  ],
                  "location": "query",
                  "type": "string",
                  "description": "Optional. The order in which the connections should be sorted. Defaults to\n`LAST_MODIFIED_ASCENDING`."
                },
                "pageToken": {
                  "description": "Optional. A page token, received from a previous `ListConnections` call.\nProvide this to retrieve the subsequent page.\n\nWhen paginating, all other parameters provided to `ListConnections`\nmust match the call that provided the page token.",
                  "location": "query",
                  "type": "string"
                },
                "syncToken": {
                  "location": "query",
                  "type": "string",
                  "description": "Optional. A sync token, received from a previous `ListConnections` call.\nProvide this to retrieve only the resources changed since the last request.\nSync requests that specify `sync_token` have an additional rate limit.\n\nWhen syncing, all other parameters provided to `ListConnections`\nmust match the call that provided the sync token."
                },
                "pageSize": {
                  "location": "query",
                  "type": "integer",
                  "description": "Optional. The number of connections to include in the response. Valid values are\nbetween 1 and 1000, inclusive. Defaults to 100 if not set or set to 0.",
                  "format": "int32"
                },
                "personFields": {
                  "format": "google-fieldmask",
                  "location": "query",
                  "type": "string",
                  "description": "Required. A field mask to restrict which fields on each person are returned. Multiple\nfields can be specified by separating them with commas. Valid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* residences\n* sipAddresses\n* skills\n* urls\n* userDefined"
                },
                "requestSyncToken": {
                  "location": "query",
                  "type": "boolean",
                  "description": "Optional. Whether the response should include `next_sync_token`, which can be used to\nget all changes since the last request. For subsequent sync requests use\nthe `sync_token` param instead. Initial sync requests that specify\n`request_sync_token` have an additional rate limit."
                },
                "resourceName": {
                  "required": true,
                  "pattern": "^people/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "Required. The resource name to return connections for. Only `people/me` is valid."
                }
              },
              "response": {
                "$ref": "ListConnectionsResponse"
              },
              "description": "Provides a list of the authenticated user's contacts merged with any\nconnected profiles.\n\nThe request throws a 400 error if 'personFields' is not specified.",
              "path": "v1/{+resourceName}/connections",
              "id": "people.people.connections.list",
              "httpMethod": "GET"
            }
          }
        }
      },
      "methods": {
        "deleteContact": {
          "httpMethod": "DELETE",
          "flatPath": "v1/people/{peopleId}:deleteContact",
          "parameterOrder": [
            "resourceName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameters": {
            "resourceName": {
              "required": true,
              "pattern": "^people/[^/]+$",
              "location": "path",
              "type": "string",
              "description": "Required. The resource name of the contact to delete."
            }
          },
          "response": {
            "$ref": "Empty"
          },
          "description": "Delete a contact person. Any non-contact data will not be deleted.",
          "path": "v1/{+resourceName}:deleteContact",
          "id": "people.people.deleteContact"
        },
        "createContact": {
          "request": {
            "$ref": "Person"
          },
          "path": "v1/people:createContact",
          "id": "people.people.createContact",
          "httpMethod": "POST",
          "flatPath": "v1/people:createContact",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameters": {},
          "response": {
            "$ref": "Person"
          },
          "description": "Create a new contact and return the person resource for that contact."
        },
        "get": {
          "path": "v1/{+resourceName}",
          "id": "people.people.get",
          "httpMethod": "GET",
          "flatPath": "v1/people/{peopleId}",
          "parameterOrder": [
            "resourceName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly",
            "https://www.googleapis.com/auth/directory.readonly",
            "https://www.googleapis.com/auth/user.addresses.read",
            "https://www.googleapis.com/auth/user.birthday.read",
            "https://www.googleapis.com/auth/user.emails.read",
            "https://www.googleapis.com/auth/user.gender.read",
            "https://www.googleapis.com/auth/user.organization.read",
            "https://www.googleapis.com/auth/user.phonenumbers.read",
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile"
          ],
          "parameters": {
            "resourceName": {
              "description": "Required. The resource name of the person to provide information about.\n\n- To get information about the authenticated user, specify `people/me`.\n- To get information about a google account, specify\n `people/{account_id}`.\n- To get information about a contact, specify the resource name that\n  identifies the contact as returned by\n[`people.connections.list`](/people/api/rest/v1/people.connections/list).",
              "required": true,
              "pattern": "^people/[^/]+$",
              "location": "path",
              "type": "string"
            },
            "requestMask.includeField": {
              "description": "Required. Comma-separated list of person fields to be included in the response. Each\npath should start with `person.`: for example, `person.names` or\n`person.photos`.",
              "format": "google-fieldmask",
              "location": "query",
              "type": "string"
            },
            "personFields": {
              "location": "query",
              "type": "string",
              "description": "Required. A field mask to restrict which fields on the person are returned. Multiple\nfields can be specified by separating them with commas. Valid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* residences\n* sipAddresses\n* skills\n* urls\n* userDefined",
              "format": "google-fieldmask"
            }
          },
          "response": {
            "$ref": "Person"
          },
          "description": "Provides information about a person by specifying a resource name. Use\n`people/me` to indicate the authenticated user.\n\nThe request throws a 400 error if 'personFields' is not specified."
        },
        "updateContact": {
          "flatPath": "v1/people/{peopleId}:updateContact",
          "parameterOrder": [
            "resourceName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameters": {
            "resourceName": {
              "description": "The resource name for the person, assigned by the server. An ASCII string\nwith a max length of 27 characters, in the form of\n`people/{person_id}`.",
              "required": true,
              "pattern": "^people/[^/]+$",
              "location": "path",
              "type": "string"
            },
            "updatePersonFields": {
              "location": "query",
              "type": "string",
              "description": "Required. A field mask to restrict which fields on the person are updated. Multiple\nfields can be specified by separating them with commas.\nAll updated fields will be replaced. Valid values are:\n\n* addresses\n* biographies\n* birthdays\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* relations\n* residences\n* sipAddresses\n* urls\n* userDefined",
              "format": "google-fieldmask"
            }
          },
          "response": {
            "$ref": "Person"
          },
          "description": "Update contact data for an existing contact person. Any non-contact data\nwill not be modified.\n\nThe request throws a 400 error if `updatePersonFields` is not specified.\n\nThe request throws a 400 error if `person.metadata.sources` is not\nspecified for the contact to be updated.\n\nThe request throws a 400 error with an error with reason\n`\"failedPrecondition\"` if `person.metadata.sources.etag` is different than\nthe contact's etag, which indicates the contact has changed since its data\nwas read. Clients should get the latest person and re-apply their updates\nto the latest person.",
          "request": {
            "$ref": "Person"
          },
          "path": "v1/{+resourceName}:updateContact",
          "id": "people.people.updateContact",
          "httpMethod": "PATCH"
        },
        "deleteContactPhoto": {
          "path": "v1/{+resourceName}:deleteContactPhoto",
          "id": "people.people.deleteContactPhoto",
          "httpMethod": "DELETE",
          "flatPath": "v1/people/{peopleId}:deleteContactPhoto",
          "parameterOrder": [
            "resourceName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameters": {
            "personFields": {
              "location": "query",
              "type": "string",
              "description": "Optional. A field mask to restrict which fields on the person are returned. Multiple\nfields can be specified by separating them with commas. Defaults to empty\nif not set, which will skip the post mutate get. Valid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* residences\n* sipAddresses\n* skills\n* urls\n* userDefined",
              "format": "google-fieldmask"
            },
            "resourceName": {
              "required": true,
              "pattern": "^people/[^/]+$",
              "location": "path",
              "type": "string",
              "description": "Required. The resource name of the contact whose photo will be deleted."
            }
          },
          "response": {
            "$ref": "DeleteContactPhotoResponse"
          },
          "description": "Delete a contact's photo."
        },
        "updateContactPhoto": {
          "path": "v1/{+resourceName}:updateContactPhoto",
          "id": "people.people.updateContactPhoto",
          "httpMethod": "PATCH",
          "flatPath": "v1/people/{peopleId}:updateContactPhoto",
          "parameterOrder": [
            "resourceName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameters": {
            "resourceName": {
              "description": "Required. Person resource name",
              "required": true,
              "pattern": "^people/[^/]+$",
              "location": "path",
              "type": "string"
            }
          },
          "description": "Update a contact's photo.",
          "response": {
            "$ref": "UpdateContactPhotoResponse"
          },
          "request": {
            "$ref": "UpdateContactPhotoRequest"
          }
        },
        "getBatchGet": {
          "parameters": {
            "resourceNames": {
              "location": "query",
              "type": "string",
              "description": "Required. The resource names of the people to provide information about.\n\n- To get information about the authenticated user, specify `people/me`.\n- To get information about a google account, specify\n  `people/{account_id}`.\n- To get information about a contact, specify the resource name that\n  identifies the contact as returned by\n[`people.connections.list`](/people/api/rest/v1/people.connections/list).\n\nYou can include up to 50 resource names in one request.",
              "repeated": true
            },
            "requestMask.includeField": {
              "format": "google-fieldmask",
              "location": "query",
              "type": "string",
              "description": "Required. Comma-separated list of person fields to be included in the response. Each\npath should start with `person.`: for example, `person.names` or\n`person.photos`."
            },
            "personFields": {
              "location": "query",
              "type": "string",
              "description": "Required. A field mask to restrict which fields on each person are returned. Multiple\nfields can be specified by separating them with commas. Valid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* residences\n* sipAddresses\n* skills\n* urls\n* userDefined",
              "format": "google-fieldmask"
            }
          },
          "description": "Provides information about a list of specific people by specifying a list\nof requested resource names. Use `people/me` to indicate the authenticated\nuser.\n\nThe request throws a 400 error if 'personFields' is not specified.",
          "response": {
            "$ref": "GetPeopleResponse"
          },
          "path": "v1/people:batchGet",
          "id": "people.people.getBatchGet",
          "httpMethod": "GET",
          "flatPath": "v1/people:batchGet",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly",
            "https://www.googleapis.com/auth/directory.readonly",
            "https://www.googleapis.com/auth/user.addresses.read",
            "https://www.googleapis.com/auth/user.birthday.read",
            "https://www.googleapis.com/auth/user.emails.read",
            "https://www.googleapis.com/auth/user.gender.read",
            "https://www.googleapis.com/auth/user.organization.read",
            "https://www.googleapis.com/auth/user.phonenumbers.read",
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile"
          ]
        }
      }
    },
    "contactGroups": {
      "methods": {
        "get": {
          "flatPath": "v1/contactGroups/{contactGroupsId}",
          "parameterOrder": [
            "resourceName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly"
          ],
          "parameters": {
            "resourceName": {
              "required": true,
              "pattern": "^contactGroups/[^/]+$",
              "location": "path",
              "type": "string",
              "description": "Required. The resource name of the contact group to get."
            },
            "maxMembers": {
              "location": "query",
              "type": "integer",
              "description": "Optional. Specifies the maximum number of members to return. Defaults to 0 if not\nset, which will return zero members.",
              "format": "int32"
            }
          },
          "description": "Get a specific contact group owned by the authenticated user by specifying\na contact group resource name.",
          "response": {
            "$ref": "ContactGroup"
          },
          "path": "v1/{+resourceName}",
          "id": "people.contactGroups.get",
          "httpMethod": "GET"
        },
        "list": {
          "httpMethod": "GET",
          "flatPath": "v1/contactGroups",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly"
          ],
          "parameters": {
            "pageSize": {
              "location": "query",
              "type": "integer",
              "description": "Optional. The maximum number of resources to return. Valid values are between 1 and\n1000, inclusive. Defaults to 30 if not set or set to 0.",
              "format": "int32"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Optional. The next_page_token value returned from a previous call to\n[ListContactGroups](/people/api/rest/v1/contactgroups/list).\nRequests the next page of resources."
            },
            "syncToken": {
              "location": "query",
              "type": "string",
              "description": "Optional. A sync token, returned by a previous call to `contactgroups.list`.\nOnly resources changed since the sync token was created will be returned."
            }
          },
          "response": {
            "$ref": "ListContactGroupsResponse"
          },
          "description": "List all contact groups owned by the authenticated user. Members of the\ncontact groups are not populated.",
          "path": "v1/contactGroups",
          "id": "people.contactGroups.list"
        },
        "update": {
          "flatPath": "v1/contactGroups/{contactGroupsId}",
          "parameterOrder": [
            "resourceName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameters": {
            "resourceName": {
              "required": true,
              "pattern": "^contactGroups/[^/]+$",
              "location": "path",
              "type": "string",
              "description": "The resource name for the contact group, assigned by the server. An ASCII\nstring, in the form of `contactGroups/{contact_group_id}`."
            }
          },
          "response": {
            "$ref": "ContactGroup"
          },
          "description": "Update the name of an existing contact group owned by the authenticated\nuser.",
          "request": {
            "$ref": "UpdateContactGroupRequest"
          },
          "path": "v1/{+resourceName}",
          "id": "people.contactGroups.update",
          "httpMethod": "PUT"
        },
        "create": {
          "request": {
            "$ref": "CreateContactGroupRequest"
          },
          "path": "v1/contactGroups",
          "id": "people.contactGroups.create",
          "httpMethod": "POST",
          "flatPath": "v1/contactGroups",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameters": {},
          "response": {
            "$ref": "ContactGroup"
          },
          "description": "Create a new contact group owned by the authenticated user."
        },
        "delete": {
          "response": {
            "$ref": "Empty"
          },
          "description": "Delete an existing contact group owned by the authenticated user by\nspecifying a contact group resource name.",
          "path": "v1/{+resourceName}",
          "id": "people.contactGroups.delete",
          "httpMethod": "DELETE",
          "flatPath": "v1/contactGroups/{contactGroupsId}",
          "parameterOrder": [
            "resourceName"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameters": {
            "deleteContacts": {
              "description": "Optional. Set to true to also delete the contacts in the specified group.",
              "location": "query",
              "type": "boolean"
            },
            "resourceName": {
              "required": true,
              "pattern": "^contactGroups/[^/]+$",
              "location": "path",
              "type": "string",
              "description": "Required. The resource name of the contact group to delete."
            }
          }
        },
        "batchGet": {
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly"
          ],
          "parameters": {
            "resourceNames": {
              "location": "query",
              "type": "string",
              "description": "Required. The resource names of the contact groups to get.",
              "repeated": true
            },
            "maxMembers": {
              "location": "query",
              "type": "integer",
              "description": "Optional. Specifies the maximum number of members to return for each group. Defaults\nto 0 if not set, which will return zero members.",
              "format": "int32"
            }
          },
          "response": {
            "$ref": "BatchGetContactGroupsResponse"
          },
          "description": "Get a list of contact groups owned by the authenticated user by specifying\na list of contact group resource names.",
          "path": "v1/contactGroups:batchGet",
          "id": "people.contactGroups.batchGet",
          "httpMethod": "GET",
          "flatPath": "v1/contactGroups:batchGet"
        }
      },
      "resources": {
        "members": {
          "methods": {
            "modify": {
              "flatPath": "v1/contactGroups/{contactGroupsId}/members:modify",
              "parameterOrder": [
                "resourceName"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/contacts"
              ],
              "parameters": {
                "resourceName": {
                  "required": true,
                  "pattern": "^contactGroups/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "description": "Required. The resource name of the contact group to modify."
                }
              },
              "response": {
                "$ref": "ModifyContactGroupMembersResponse"
              },
              "description": "Modify the members of a contact group owned by the authenticated user.\n\nThe only system contact groups that can have members added are\n`contactGroups/myContacts` and `contactGroups/starred`. Other system\ncontact groups are deprecated and can only have contacts removed.",
              "request": {
                "$ref": "ModifyContactGroupMembersRequest"
              },
              "path": "v1/{+resourceName}/members:modify",
              "id": "people.contactGroups.members.modify",
              "httpMethod": "POST"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "location": "query",
      "type": "string",
      "default": "json",
      "description": "Data format for response."
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "location": "query",
      "description": "V1 error format."
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "location": "query",
      "description": "Returns response with indentations and line breaks."
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    }
  },
  "kind": "discovery#restDescription",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/user.addresses.read": {
          "description": "View your street addresses"
        },
        "https://www.googleapis.com/auth/user.organization.read": {
          "description": "See your education, work history and org info"
        },
        "https://www.googleapis.com/auth/user.phonenumbers.read": {
          "description": "View your phone numbers"
        },
        "https://www.googleapis.com/auth/userinfo.email": {
          "description": "View your email address"
        },
        "https://www.googleapis.com/auth/contacts.readonly": {
          "description": "See and download your contacts"
        },
        "https://www.googleapis.com/auth/directory.readonly": {
          "description": "See and download your organization's GSuite directory"
        },
        "https://www.googleapis.com/auth/contacts": {
          "description": "See, edit, download, and permanently delete your contacts"
        },
        "https://www.googleapis.com/auth/user.birthday.read": {
          "description": "View your complete date of birth"
        },
        "https://www.googleapis.com/auth/user.gender.read": {
          "description": "See your gender"
        },
        "https://www.googleapis.com/auth/userinfo.profile": {
          "description": "See your personal info, including any personal info you've made publicly available"
        },
        "https://www.googleapis.com/auth/user.emails.read": {
          "description": "View your email addresses"
        }
      }
    }
  },
  "description": "Provides access to information about profiles and contacts.",
  "version_module": true,
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "baseUrl": "https://people.googleapis.com/",
  "schemas": {
    "Gender": {
      "description": "A person's gender.",
      "properties": {
        "formattedValue": {
          "type": "string",
          "description": "Output only. The value of the gender translated and formatted in the viewer's account\nlocale or the `Accept-Language` HTTP header locale. Unspecified or custom\nvalue are not localized."
        },
        "addressMeAs": {
          "type": "string",
          "description": "The type of pronouns that should be used to address the person. The value\ncan be custom or one of these predefined values:\n\n* `male`\n* `female`\n* `other`"
        },
        "value": {
          "description": "The gender for the person. The gender can be custom or one of these\npredefined values:\n\n* `male`\n* `female`\n* `unspecified`",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the gender.",
          "$ref": "FieldMetadata"
        }
      },
      "id": "Gender",
      "type": "object"
    },
    "Status": {
      "id": "Status",
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client."
        },
        "details": {
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array",
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      }
    },
    "CoverPhoto": {
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the cover photo."
        },
        "metadata": {
          "description": "Metadata about the cover photo.",
          "$ref": "FieldMetadata"
        },
        "default": {
          "type": "boolean",
          "description": "True if the cover photo is the default cover photo;\nfalse if the cover photo is a user-provided cover photo."
        }
      },
      "id": "CoverPhoto",
      "type": "object",
      "description": "A person's cover photo. A large image shown on the person's\nprofile page that represents who they are or what they care about."
    },
    "ContactGroupMetadata": {
      "properties": {
        "deleted": {
          "type": "boolean",
          "description": "Output only. True if the contact group resource has been deleted. Populated only for\n[`ListContactGroups`](/people/api/rest/v1/contactgroups/list) requests\nthat include a sync token."
        },
        "updateTime": {
          "description": "Output only. The time the group was last updated.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "ContactGroupMetadata",
      "type": "object",
      "description": "The metadata about a contact group."
    },
    "UpdateContactPhotoResponse": {
      "id": "UpdateContactPhotoResponse",
      "type": "object",
      "description": "The response for updating a contact's photo.",
      "properties": {
        "person": {
          "description": "The updated person, if person_fields is set in the\nUpdateContactPhotoRequest; otherwise this will be unset.",
          "$ref": "Person"
        }
      }
    },
    "Organization": {
      "properties": {
        "department": {
          "description": "The person's department at the organization.",
          "type": "string"
        },
        "jobDescription": {
          "type": "string",
          "description": "The person's job description at the organization."
        },
        "endDate": {
          "description": "The end date when the person left the organization.",
          "$ref": "Date"
        },
        "startDate": {
          "description": "The start date when the person joined the organization.",
          "$ref": "Date"
        },
        "phoneticName": {
          "type": "string",
          "description": "The phonetic name of the organization."
        },
        "current": {
          "type": "boolean",
          "description": "True if the organization is the person's current organization;\nfalse if the organization is a past organization."
        },
        "name": {
          "description": "The name of the organization.",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "The location of the organization office the person works at."
        },
        "type": {
          "type": "string",
          "description": "The type of the organization. The type can be custom or  one of these\npredefined values:\n\n* `work`\n* `school`"
        },
        "title": {
          "type": "string",
          "description": "The person's job title at the organization."
        },
        "symbol": {
          "type": "string",
          "description": "The symbol associated with the organization; for example, a stock ticker\nsymbol, abbreviation, or acronym."
        },
        "metadata": {
          "description": "Metadata about the organization.",
          "$ref": "FieldMetadata"
        },
        "domain": {
          "type": "string",
          "description": "The domain name associated with the organization; for example,\n`google.com`."
        },
        "formattedType": {
          "type": "string",
          "description": "Output only. The type of the organization translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale."
        }
      },
      "id": "Organization",
      "type": "object",
      "description": "A person's past or current organization. Overlapping date ranges are\npermitted."
    },
    "ModifyContactGroupMembersResponse": {
      "description": "The response to a modify contact group members request.",
      "properties": {
        "canNotRemoveLastContactGroupResourceNames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The contact people resource names that cannot be removed from their\nlast contact group."
        },
        "notFoundResourceNames": {
          "description": "The contact people resource names that were not found.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "ModifyContactGroupMembersResponse",
      "type": "object"
    },
    "ImClient": {
      "id": "ImClient",
      "type": "object",
      "description": "A person's instant messaging client.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the IM client. The type can be custom or one of these\npredefined values:\n\n* `home`\n* `work`\n* `other`"
        },
        "formattedProtocol": {
          "description": "Output only. The protocol of the IM client formatted in the viewer's account\nlocale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the IM client.",
          "$ref": "FieldMetadata"
        },
        "username": {
          "type": "string",
          "description": "The user name used in the IM client."
        },
        "formattedType": {
          "type": "string",
          "description": "Output only. The type of the IM client translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale."
        },
        "protocol": {
          "type": "string",
          "description": "The protocol of the IM client. The protocol can be custom or one of these\npredefined values:\n\n* `aim`\n* `msn`\n* `yahoo`\n* `skype`\n* `qq`\n* `googleTalk`\n* `icq`\n* `jabber`\n* `netMeeting`"
        }
      }
    },
    "GetPeopleResponse": {
      "id": "GetPeopleResponse",
      "type": "object",
      "description": "The response to a get request for a list of people by resource name.",
      "properties": {
        "responses": {
          "items": {
            "$ref": "PersonResponse"
          },
          "type": "array",
          "description": "The response for each requested resource name."
        }
      }
    },
    "PersonMetadata": {
      "description": "The metadata about a person.",
      "properties": {
        "linkedPeopleResourceNames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output only. Resource names of people linked to this resource."
        },
        "sources": {
          "items": {
            "$ref": "Source"
          },
          "type": "array",
          "description": "The sources of data for the person."
        },
        "previousResourceNames": {
          "description": "Output only. Any former resource names this person has had. Populated only for\n[`connections.list`](/people/api/rest/v1/people.connections/list) requests\nthat include a sync token.\n\nThe resource name may change when adding or removing fields that link a\ncontact and profile such as a verified email, verified phone number, or\nprofile URL.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "deleted": {
          "type": "boolean",
          "description": "Output only. True if the person resource has been deleted. Populated only for\n[`connections.list`](/people/api/rest/v1/people.connections/list) requests\nthat include a sync token."
        },
        "objectType": {
          "enumDescriptions": [
            "Unspecified.",
            "Person.",
            "[Google+ Page.](http://www.google.com/+/brands/)"
          ],
          "enum": [
            "OBJECT_TYPE_UNSPECIFIED",
            "PERSON",
            "PAGE"
          ],
          "type": "string",
          "description": "Output only. **DEPRECATED** (Please use\n`person.metadata.sources.profileMetadata.objectType` instead)\n\nThe type of the person object."
        }
      },
      "id": "PersonMetadata",
      "type": "object"
    },
    "UserDefined": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The end user specified value of the user defined data."
        },
        "metadata": {
          "description": "Metadata about the user defined data.",
          "$ref": "FieldMetadata"
        },
        "key": {
          "type": "string",
          "description": "The end user specified key of the user defined data."
        }
      },
      "id": "UserDefined",
      "type": "object",
      "description": "Arbitrary user data that is populated by the end users."
    },
    "Interest": {
      "properties": {
        "metadata": {
          "description": "Metadata about the interest.",
          "$ref": "FieldMetadata"
        },
        "value": {
          "type": "string",
          "description": "The interest; for example, `stargazing`."
        }
      },
      "id": "Interest",
      "type": "object",
      "description": "One of the person's interests."
    },
    "Photo": {
      "description": "A person's photo. A picture shown next to the person's name to\nhelp others recognize the person.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the photo. You can change the desired size by appending a query\nparameter `sz={size}` at the end of the url, where {size} is the size in\npixels. Example:\nhttps://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50"
        },
        "metadata": {
          "description": "Metadata about the photo.",
          "$ref": "FieldMetadata"
        },
        "default": {
          "type": "boolean",
          "description": "True if the photo is a default photo;\nfalse if the photo is a user-provided photo."
        }
      },
      "id": "Photo",
      "type": "object"
    },
    "Nickname": {
      "id": "Nickname",
      "type": "object",
      "description": "A person's nickname.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The nickname."
        },
        "metadata": {
          "description": "Metadata about the nickname.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "description": "The type of the nickname.",
          "enumDescriptions": [
            "Generic nickname.",
            "Maiden name or birth family name. Used when the person's family name has\nchanged as a result of marriage.",
            "Initials.",
            "Google+ profile nickname.",
            "A professional affiliation or other name; for example, `Dr. Smith.`",
            "Alternate name person is known by.",
            "A shorter version of the person's name."
          ],
          "enum": [
            "DEFAULT",
            "MAIDEN_NAME",
            "INITIALS",
            "GPLUS",
            "OTHER_NAME",
            "ALTERNATE_NAME",
            "SHORT_NAME"
          ],
          "type": "string"
        }
      }
    },
    "Locale": {
      "description": "A person's locale preference.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47)\nlanguage tag representing the locale."
        },
        "metadata": {
          "description": "Metadata about the locale.",
          "$ref": "FieldMetadata"
        }
      },
      "id": "Locale",
      "type": "object"
    },
    "Url": {
      "id": "Url",
      "type": "object",
      "description": "A person's associated URLs.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The URL."
        },
        "metadata": {
          "description": "Metadata about the URL.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "type": "string",
          "description": "The type of the URL. The type can be custom or one of these predefined\nvalues:\n\n* `home`\n* `work`\n* `blog`\n* `profile`\n* `homePage`\n* `ftp`\n* `reservations`\n* `appInstallPage`: website for a Google+ application.\n* `other`"
        },
        "formattedType": {
          "type": "string",
          "description": "Output only. The type of the URL translated and formatted in the viewer's\naccount locale or the `Accept-Language` HTTP header locale."
        }
      }
    },
    "BatchGetContactGroupsResponse": {
      "id": "BatchGetContactGroupsResponse",
      "type": "object",
      "description": "The response to a batch get contact groups request.",
      "properties": {
        "responses": {
          "items": {
            "$ref": "ContactGroupResponse"
          },
          "type": "array",
          "description": "The list of responses for each requested contact group resource."
        }
      }
    },
    "ProfileMetadata": {
      "description": "The metadata about a profile.",
      "properties": {
        "objectType": {
          "description": "Output only. The profile object type.",
          "enumDescriptions": [
            "Unspecified.",
            "Person.",
            "[Google+ Page.](http://www.google.com/+/brands/)"
          ],
          "enum": [
            "OBJECT_TYPE_UNSPECIFIED",
            "PERSON",
            "PAGE"
          ],
          "type": "string"
        },
        "userTypes": {
          "description": "Output only. The user types.",
          "enumDescriptions": [
            "The user type is not known.",
            "The user is a Google user.",
            "The user is a Google+ user.",
            "The user is a G Suite user."
          ],
          "items": {
            "enum": [
              "USER_TYPE_UNKNOWN",
              "GOOGLE_USER",
              "GPLUS_USER",
              "GOOGLE_APPS_USER"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "id": "ProfileMetadata",
      "type": "object"
    },
    "Date": {
      "description": "Represents a whole or partial calendar date, e.g. a birthday. The time of day\nand time zone are either specified elsewhere or are not significant. The date\nis relative to the Proleptic Gregorian Calendar. This can represent:\n\n* A full date, with non-zero year, month and day values\n* A month and day value, with a zero year, e.g. an anniversary\n* A year on its own, with zero month and day values\n* A year and month value, with a zero day, e.g. a credit card expiration date\n\nRelated types are google.type.TimeOfDay and `google.protobuf.Timestamp`.",
      "properties": {
        "day": {
          "format": "int32",
          "type": "integer",
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0\nif specifying a year by itself or a year and month where the day is not\nsignificant."
        },
        "year": {
          "format": "int32",
          "type": "integer",
          "description": "Year of date. Must be from 1 to 9999, or 0 if specifying a date without\na year."
        },
        "month": {
          "format": "int32",
          "type": "integer",
          "description": "Month of year. Must be from 1 to 12, or 0 if specifying a year without a\nmonth and day."
        }
      },
      "id": "Date",
      "type": "object"
    },
    "ContactGroupMembership": {
      "id": "ContactGroupMembership",
      "type": "object",
      "description": "A Google contact group membership.",
      "properties": {
        "contactGroupId": {
          "type": "string",
          "description": "Output only. The contact group ID for the contact group membership."
        },
        "contactGroupResourceName": {
          "description": "The resource name for the contact group, assigned by the server. An ASCII\nstring, in the form of `contactGroups/{contact_group_id}`.\nOnly contact_group_resource_name can be used for modifying memberships.\nAny contact group membership can be removed, but only user group or\n\"myContacts\" or \"starred\" system groups memberships can be added. A\ncontact must always have at least one contact group membership.",
          "type": "string"
        }
      }
    },
    "PhoneNumber": {
      "id": "PhoneNumber",
      "type": "object",
      "description": "A person's phone number.",
      "properties": {
        "formattedType": {
          "description": "Output only. The type of the phone number translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        },
        "canonicalForm": {
          "type": "string",
          "description": "Output only. The canonicalized [ITU-T\nE.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf)\nform of the phone number."
        },
        "value": {
          "type": "string",
          "description": "The phone number."
        },
        "metadata": {
          "description": "Metadata about the phone number.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "type": "string",
          "description": "The type of the phone number. The type can be custom or one of these\npredefined values:\n\n* `home`\n* `work`\n* `mobile`\n* `homeFax`\n* `workFax`\n* `otherFax`\n* `pager`\n* `workMobile`\n* `workPager`\n* `main`\n* `googleVoice`\n* `other`"
        }
      }
    },
    "SipAddress": {
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the SIP address. The type can be custom or or one of these\npredefined values:\n\n* `home`\n* `work`\n* `mobile`\n* `other`"
        },
        "formattedType": {
          "type": "string",
          "description": "Output only. The type of the SIP address translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale."
        },
        "value": {
          "type": "string",
          "description": "The SIP address in the\n[RFC 3261 19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI\nformat."
        },
        "metadata": {
          "description": "Metadata about the SIP address.",
          "$ref": "FieldMetadata"
        }
      },
      "id": "SipAddress",
      "type": "object",
      "description": "A person's SIP address. Session Initial Protocol addresses are used for VoIP\ncommunications to make voice or video calls over the internet."
    },
    "RelationshipStatus": {
      "description": "**DEPRECATED**: No data will be returned\nA person's relationship status.",
      "properties": {
        "formattedValue": {
          "type": "string",
          "description": "Output only. The value of the relationship status translated and formatted in\nthe viewer's account locale or the `Accept-Language` HTTP header locale."
        },
        "value": {
          "description": "The relationship status. The value can be custom or one of these\npredefined values:\n\n* `single`\n* `inARelationship`\n* `engaged`\n* `married`\n* `itsComplicated`\n* `openRelationship`\n* `widowed`\n* `inDomesticPartnership`\n* `inCivilUnion`",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the relationship status.",
          "$ref": "FieldMetadata"
        }
      },
      "id": "RelationshipStatus",
      "type": "object"
    },
    "Skill": {
      "description": "A skill that the person has.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The skill; for example, `underwater basket weaving`."
        },
        "metadata": {
          "description": "Metadata about the skill.",
          "$ref": "FieldMetadata"
        }
      },
      "id": "Skill",
      "type": "object"
    },
    "Birthday": {
      "id": "Birthday",
      "type": "object",
      "description": "A person's birthday. At least one of the `date` and `text` fields are\nspecified. The `date` and `text` fields typically represent the same\ndate, but are not guaranteed to.",
      "properties": {
        "metadata": {
          "description": "Metadata about the birthday.",
          "$ref": "FieldMetadata"
        },
        "text": {
          "type": "string",
          "description": "A free-form string representing the user's birthday."
        },
        "date": {
          "description": "The date of the birthday.",
          "$ref": "Date"
        }
      }
    },
    "RelationshipInterest": {
      "description": "**DEPRECATED**: No data will be returned\nA person's relationship interest .",
      "properties": {
        "metadata": {
          "description": "Metadata about the relationship interest.",
          "$ref": "FieldMetadata"
        },
        "formattedValue": {
          "description": "Output only. The value of the relationship interest translated and formatted\nin the viewer's account locale or the locale specified in the\nAccept-Language HTTP header.",
          "type": "string"
        },
        "value": {
          "description": "The kind of relationship the person is looking for. The value can be custom\nor one of these predefined values:\n\n* `friend`\n* `date`\n* `relationship`\n* `networking`",
          "type": "string"
        }
      },
      "id": "RelationshipInterest",
      "type": "object"
    },
    "Name": {
      "id": "Name",
      "type": "object",
      "description": "A person's name. If the name is a mononym, the family name is empty.",
      "properties": {
        "phoneticMiddleName": {
          "type": "string",
          "description": "The middle name(s) spelled as they sound."
        },
        "metadata": {
          "description": "Metadata about the name.",
          "$ref": "FieldMetadata"
        },
        "givenName": {
          "type": "string",
          "description": "The given name."
        },
        "phoneticGivenName": {
          "type": "string",
          "description": "The given name spelled as it sounds."
        },
        "phoneticHonorificSuffix": {
          "type": "string",
          "description": "The honorific suffixes spelled as they sound."
        },
        "familyName": {
          "type": "string",
          "description": "The family name."
        },
        "honorificPrefix": {
          "description": "The honorific prefixes, such as `Mrs.` or `Dr.`",
          "type": "string"
        },
        "phoneticFamilyName": {
          "description": "The family name spelled as it sounds.",
          "type": "string"
        },
        "displayName": {
          "description": "Output only. The display name formatted according to the locale specified by\nthe viewer's account or the `Accept-Language` HTTP header.",
          "type": "string"
        },
        "displayNameLastFirst": {
          "type": "string",
          "description": "Output only. The display name with the last name first formatted according to\nthe locale specified by the viewer's account or the\n`Accept-Language` HTTP header."
        },
        "middleName": {
          "description": "The middle name(s).",
          "type": "string"
        },
        "phoneticFullName": {
          "description": "The full name spelled as it sounds.",
          "type": "string"
        },
        "phoneticHonorificPrefix": {
          "type": "string",
          "description": "The honorific prefixes spelled as they sound."
        },
        "honorificSuffix": {
          "description": "The honorific suffixes, such as `Jr.`",
          "type": "string"
        }
      }
    },
    "ContactGroup": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The contact group name set by the group owner or a system provided name\nfor system groups."
        },
        "resourceName": {
          "type": "string",
          "description": "The resource name for the contact group, assigned by the server. An ASCII\nstring, in the form of `contactGroups/{contact_group_id}`."
        },
        "groupType": {
          "description": "Output only. The contact group type.",
          "enumDescriptions": [
            "Unspecified.",
            "User defined contact group.",
            "System defined contact group."
          ],
          "enum": [
            "GROUP_TYPE_UNSPECIFIED",
            "USER_CONTACT_GROUP",
            "SYSTEM_CONTACT_GROUP"
          ],
          "type": "string"
        },
        "memberCount": {
          "description": "Output only. The total number of contacts in the group irrespective of max members in\nspecified in the request.",
          "format": "int32",
          "type": "integer"
        },
        "metadata": {
          "description": "Output only. Metadata about the contact group.",
          "$ref": "ContactGroupMetadata"
        },
        "formattedName": {
          "type": "string",
          "description": "Output only. The name translated and formatted in the viewer's account locale\nor the `Accept-Language` HTTP header locale for system groups names.\nGroup names set by the owner are the same as name."
        },
        "memberResourceNames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Output only. The list of contact person resource names that are members of the contact\ngroup. The field is not populated for LIST requests and can only be updated\nthrough the\n[ModifyContactGroupMembers](/people/api/rest/v1/contactgroups/members/modify)."
        },
        "etag": {
          "type": "string",
          "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the\nresource. Used for web cache validation."
        }
      },
      "id": "ContactGroup",
      "type": "object",
      "description": "A contact group."
    },
    "Membership": {
      "id": "Membership",
      "type": "object",
      "description": "A person's membership in a group. Only contact group memberships can be\nmodified.",
      "properties": {
        "domainMembership": {
          "description": "Output only. The domain membership.",
          "$ref": "DomainMembership"
        },
        "contactGroupMembership": {
          "description": "The contact group membership.",
          "$ref": "ContactGroupMembership"
        },
        "metadata": {
          "description": "Metadata about the membership.",
          "$ref": "FieldMetadata"
        }
      }
    },
    "UpdateContactGroupRequest": {
      "properties": {
        "contactGroup": {
          "description": "Required. The contact group to update.",
          "$ref": "ContactGroup"
        }
      },
      "id": "UpdateContactGroupRequest",
      "type": "object",
      "description": "A request to update an existing user contact group. All updated fields will\nbe replaced."
    },
    "Source": {
      "properties": {
        "updateTime": {
          "description": "Output only. **Only populated in `person.metadata.sources`.**\n\nLast update timestamp of this source.",
          "format": "google-datetime",
          "type": "string"
        },
        "type": {
          "enumDescriptions": [
            "Unspecified.",
            "[Google Account](https://accounts.google.com).",
            "[Google profile](https://profiles.google.com). You can view the\nprofile at\n[https://profiles.google.com/](https://profiles.google.com/){id}, where\n{id} is the source id.",
            "[G Suite domain profile](https://support.google.com/a/answer/1628008).",
            "[Google contact](https://contacts.google.com). You can view the\ncontact at\n[https://contact.google.com/](https://contact.google.com/){id}, where\n{id} is the source id."
          ],
          "enum": [
            "SOURCE_TYPE_UNSPECIFIED",
            "ACCOUNT",
            "PROFILE",
            "DOMAIN_PROFILE",
            "CONTACT"
          ],
          "type": "string",
          "description": "The source type."
        },
        "id": {
          "type": "string",
          "description": "The unique identifier within the source type generated by the server."
        },
        "profileMetadata": {
          "description": "Output only. **Only populated in `person.metadata.sources`.**\n\nMetadata about a source of type PROFILE.",
          "$ref": "ProfileMetadata"
        },
        "etag": {
          "type": "string",
          "description": "**Only populated in `person.metadata.sources`.**\n\nThe [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the\nsource. Used for web cache validation."
        }
      },
      "id": "Source",
      "type": "object",
      "description": "The source of a field."
    },
    "DomainMembership": {
      "id": "DomainMembership",
      "type": "object",
      "description": "A G Suite Domain membership.",
      "properties": {
        "inViewerDomain": {
          "type": "boolean",
          "description": "True if the person is in the viewer's G Suite domain."
        }
      }
    },
    "CreateContactGroupRequest": {
      "properties": {
        "contactGroup": {
          "description": "Required. The contact group to create.",
          "$ref": "ContactGroup"
        }
      },
      "id": "CreateContactGroupRequest",
      "type": "object",
      "description": "A request to create a new contact group."
    },
    "BraggingRights": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The bragging rights; for example, `climbed mount everest`."
        },
        "metadata": {
          "description": "Metadata about the bragging rights.",
          "$ref": "FieldMetadata"
        }
      },
      "id": "BraggingRights",
      "type": "object",
      "description": "**DEPRECATED**: No data will be returned\nA person's bragging rights."
    },
    "ListContactGroupsResponse": {
      "properties": {
        "contactGroups": {
          "items": {
            "$ref": "ContactGroup"
          },
          "type": "array",
          "description": "The list of contact groups. Members of the contact groups are not\npopulated."
        },
        "totalItems": {
          "type": "integer",
          "description": "The total number of items in the list without pagination.",
          "format": "int32"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token that can be used to retrieve the next page of results."
        },
        "nextSyncToken": {
          "type": "string",
          "description": "The token that can be used to retrieve changes since the last request."
        }
      },
      "id": "ListContactGroupsResponse",
      "type": "object",
      "description": "The response to a list contact groups request."
    },
    "Relation": {
      "description": "A person's relation to another person.",
      "properties": {
        "person": {
          "type": "string",
          "description": "The name of the other person this relation refers to."
        },
        "metadata": {
          "description": "Metadata about the relation.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "type": "string",
          "description": "The person's relation to the other person. The type can be custom or one of\nthese predefined values:\n\n* `spouse`\n* `child`\n* `mother`\n* `father`\n* `parent`\n* `brother`\n* `sister`\n* `friend`\n* `relative`\n* `domesticPartner`\n* `manager`\n* `assistant`\n* `referredBy`\n* `partner`"
        },
        "formattedType": {
          "type": "string",
          "description": "Output only. The type of the relation translated and formatted in the viewer's\naccount locale or the locale specified in the Accept-Language HTTP header."
        }
      },
      "id": "Relation",
      "type": "object"
    },
    "Biography": {
      "id": "Biography",
      "type": "object",
      "description": "A person's short biography.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The short biography."
        },
        "contentType": {
          "enumDescriptions": [
            "Unspecified.",
            "Plain text.",
            "HTML text."
          ],
          "enum": [
            "CONTENT_TYPE_UNSPECIFIED",
            "TEXT_PLAIN",
            "TEXT_HTML"
          ],
          "type": "string",
          "description": "The content type of the biography."
        },
        "metadata": {
          "description": "Metadata about the biography.",
          "$ref": "FieldMetadata"
        }
      }
    },
    "Event": {
      "description": "An event related to the person.",
      "properties": {
        "metadata": {
          "description": "Metadata about the event.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "description": "The type of the event. The type can be custom or one of these predefined\nvalues:\n\n* `anniversary`\n* `other`",
          "type": "string"
        },
        "date": {
          "description": "The date of the event.",
          "$ref": "Date"
        },
        "formattedType": {
          "type": "string",
          "description": "Output only. The type of the event translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale."
        }
      },
      "id": "Event",
      "type": "object"
    },
    "ContactGroupResponse": {
      "description": "The response for a specific contact group.",
      "properties": {
        "status": {
          "description": "The status of the response.",
          "$ref": "Status"
        },
        "contactGroup": {
          "description": "The contact group.",
          "$ref": "ContactGroup"
        },
        "requestedResourceName": {
          "description": "The original requested resource name.",
          "type": "string"
        }
      },
      "id": "ContactGroupResponse",
      "type": "object"
    },
    "ListConnectionsResponse": {
      "id": "ListConnectionsResponse",
      "type": "object",
      "description": "The response to a request for the authenticated user's connections.",
      "properties": {
        "totalItems": {
          "type": "integer",
          "description": "The total number of items in the list without pagination.",
          "format": "int32"
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page.\nIf this field is omitted, there are no subsequent pages."
        },
        "totalPeople": {
          "type": "integer",
          "description": "**DEPRECATED** (Please use totalItems)\nThe total number of people in the list without pagination.",
          "format": "int32"
        },
        "nextSyncToken": {
          "type": "string",
          "description": "A token, which can be sent as `sync_token` to retrieve changes since the\nlast request. Request must set `request_sync_token` to return the sync\ntoken."
        },
        "connections": {
          "items": {
            "$ref": "Person"
          },
          "type": "array",
          "description": "The list of people that the requestor is connected to."
        }
      }
    },
    "Tagline": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The tagline."
        },
        "metadata": {
          "description": "Metadata about the tagline.",
          "$ref": "FieldMetadata"
        }
      },
      "id": "Tagline",
      "type": "object",
      "description": "**DEPRECATED**: No data will be returned\nA brief one-line description of the person."
    },
    "AgeRangeType": {
      "id": "AgeRangeType",
      "type": "object",
      "description": "A person's age range.",
      "properties": {
        "ageRange": {
          "enumDescriptions": [
            "Unspecified.",
            "Younger than eighteen.",
            "Between eighteen and twenty.",
            "Twenty-one and older."
          ],
          "enum": [
            "AGE_RANGE_UNSPECIFIED",
            "LESS_THAN_EIGHTEEN",
            "EIGHTEEN_TO_TWENTY",
            "TWENTY_ONE_OR_OLDER"
          ],
          "type": "string",
          "description": "The age range."
        },
        "metadata": {
          "description": "Metadata about the age range.",
          "$ref": "FieldMetadata"
        }
      }
    },
    "DeleteContactPhotoResponse": {
      "id": "DeleteContactPhotoResponse",
      "type": "object",
      "description": "The response for deleteing a contact's photo.",
      "properties": {
        "person": {
          "description": "The updated person, if person_fields is set in the\nDeleteContactPhotoRequest; otherwise this will be unset.",
          "$ref": "Person"
        }
      }
    },
    "Occupation": {
      "id": "Occupation",
      "type": "object",
      "description": "A person's occupation.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The occupation; for example, `carpenter`."
        },
        "metadata": {
          "description": "Metadata about the occupation.",
          "$ref": "FieldMetadata"
        }
      }
    },
    "Person": {
      "properties": {
        "skills": {
          "items": {
            "$ref": "Skill"
          },
          "type": "array",
          "description": "The person's skills."
        },
        "names": {
          "description": "The person's names.",
          "items": {
            "$ref": "Name"
          },
          "type": "array"
        },
        "urls": {
          "items": {
            "$ref": "Url"
          },
          "type": "array",
          "description": "The person's associated URLs."
        },
        "taglines": {
          "items": {
            "$ref": "Tagline"
          },
          "type": "array",
          "description": "Output only. **DEPRECATED**: No data will be returned\nThe person's taglines."
        },
        "occupations": {
          "items": {
            "$ref": "Occupation"
          },
          "type": "array",
          "description": "The person's occupations."
        },
        "resourceName": {
          "type": "string",
          "description": "The resource name for the person, assigned by the server. An ASCII string\nwith a max length of 27 characters, in the form of\n`people/{person_id}`."
        },
        "imClients": {
          "items": {
            "$ref": "ImClient"
          },
          "type": "array",
          "description": "The person's instant messaging clients."
        },
        "organizations": {
          "items": {
            "$ref": "Organization"
          },
          "type": "array",
          "description": "The person's past or current organizations."
        },
        "sipAddresses": {
          "items": {
            "$ref": "SipAddress"
          },
          "type": "array",
          "description": "The person's SIP addresses."
        },
        "ageRanges": {
          "items": {
            "$ref": "AgeRangeType"
          },
          "type": "array",
          "description": "Output only. The person's age ranges."
        },
        "memberships": {
          "items": {
            "$ref": "Membership"
          },
          "type": "array",
          "description": "The person's group memberships."
        },
        "locales": {
          "items": {
            "$ref": "Locale"
          },
          "type": "array",
          "description": "The person's locale preferences."
        },
        "braggingRights": {
          "items": {
            "$ref": "BraggingRights"
          },
          "type": "array",
          "description": "**DEPRECATED**: No data will be returned\nThe person's bragging rights."
        },
        "emailAddresses": {
          "description": "The person's email addresses.",
          "items": {
            "$ref": "EmailAddress"
          },
          "type": "array"
        },
        "biographies": {
          "description": "The person's biographies.",
          "items": {
            "$ref": "Biography"
          },
          "type": "array"
        },
        "residences": {
          "description": "The person's residences.",
          "items": {
            "$ref": "Residence"
          },
          "type": "array"
        },
        "genders": {
          "items": {
            "$ref": "Gender"
          },
          "type": "array",
          "description": "The person's genders."
        },
        "metadata": {
          "description": "Output only. Metadata about the person.",
          "$ref": "PersonMetadata"
        },
        "userDefined": {
          "items": {
            "$ref": "UserDefined"
          },
          "type": "array",
          "description": "The person's user defined data."
        },
        "photos": {
          "description": "Output only. The person's photos.",
          "items": {
            "$ref": "Photo"
          },
          "type": "array"
        },
        "relationshipInterests": {
          "items": {
            "$ref": "RelationshipInterest"
          },
          "type": "array",
          "description": "Output only. **DEPRECATED**: No data will be returned\nThe person's relationship interests."
        },
        "ageRange": {
          "description": "Output only. **DEPRECATED** (Please use `person.ageRanges` instead)\n\nThe person's age range.",
          "enumDescriptions": [
            "Unspecified.",
            "Younger than eighteen.",
            "Between eighteen and twenty.",
            "Twenty-one and older."
          ],
          "enum": [
            "AGE_RANGE_UNSPECIFIED",
            "LESS_THAN_EIGHTEEN",
            "EIGHTEEN_TO_TWENTY",
            "TWENTY_ONE_OR_OLDER"
          ],
          "type": "string"
        },
        "etag": {
          "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the\nresource. Used for web cache validation.",
          "type": "string"
        },
        "relationshipStatuses": {
          "items": {
            "$ref": "RelationshipStatus"
          },
          "type": "array",
          "description": "Output only. **DEPRECATED**: No data will be returned\nThe person's relationship statuses."
        },
        "coverPhotos": {
          "items": {
            "$ref": "CoverPhoto"
          },
          "type": "array",
          "description": "Output only. The person's cover photos."
        },
        "phoneNumbers": {
          "items": {
            "$ref": "PhoneNumber"
          },
          "type": "array",
          "description": "The person's phone numbers."
        },
        "birthdays": {
          "items": {
            "$ref": "Birthday"
          },
          "type": "array",
          "description": "The person's birthdays."
        },
        "relations": {
          "items": {
            "$ref": "Relation"
          },
          "type": "array",
          "description": "The person's relations."
        },
        "addresses": {
          "items": {
            "$ref": "Address"
          },
          "type": "array",
          "description": "The person's street addresses."
        },
        "interests": {
          "items": {
            "$ref": "Interest"
          },
          "type": "array",
          "description": "The person's interests."
        },
        "nicknames": {
          "items": {
            "$ref": "Nickname"
          },
          "type": "array",
          "description": "The person's nicknames."
        },
        "events": {
          "items": {
            "$ref": "Event"
          },
          "type": "array",
          "description": "The person's events."
        }
      },
      "id": "Person",
      "type": "object",
      "description": "Information about a person merged from various data sources such as the\nauthenticated user's contacts and profile data.\n\nMost fields can have multiple items. The items in a field have no guaranteed\norder, but each non-empty field is guaranteed to have exactly one field with\n`metadata.primary` set to true."
    },
    "FieldMetadata": {
      "properties": {
        "source": {
          "description": "The source of the field.",
          "$ref": "Source"
        },
        "verified": {
          "type": "boolean",
          "description": "Output only. True if the field is verified; false if the field is unverified. A\nverified field is typically a name, email address, phone number, or\nwebsite that has been confirmed to be owned by the person."
        },
        "primary": {
          "description": "True if the field is the primary field; false if the field is a secondary\nfield.",
          "type": "boolean"
        }
      },
      "id": "FieldMetadata",
      "type": "object",
      "description": "Metadata about a field."
    },
    "UpdateContactPhotoRequest": {
      "id": "UpdateContactPhotoRequest",
      "type": "object",
      "description": "A request to update an existing contact's photo.\nAll requests must have a valid photo format: JPEG or PNG.",
      "properties": {
        "personFields": {
          "format": "google-fieldmask",
          "type": "string",
          "description": "Optional. A field mask to restrict which fields on the person are returned. Multiple\nfields can be specified by separating them with commas. Defaults to empty\nif not set, which will skip the post mutate get. Valid values are:\n\n* addresses\n* ageRanges\n* biographies\n* birthdays\n* coverPhotos\n* emailAddresses\n* events\n* genders\n* imClients\n* interests\n* locales\n* memberships\n* metadata\n* names\n* nicknames\n* occupations\n* organizations\n* phoneNumbers\n* photos\n* relations\n* residences\n* sipAddresses\n* skills\n* urls\n* userDefined"
        },
        "photoBytes": {
          "description": "Required. Raw photo bytes",
          "format": "byte",
          "type": "string"
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "properties": {}
    },
    "PersonResponse": {
      "description": "The response for a single person",
      "properties": {
        "httpStatusCode": {
          "type": "integer",
          "description": "**DEPRECATED** (Please use status instead)\n\n[HTTP 1.1 status code]\n(http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).",
          "format": "int32"
        },
        "person": {
          "description": "The person.",
          "$ref": "Person"
        },
        "requestedResourceName": {
          "type": "string",
          "description": "The original requested resource name. May be different than the resource\nname on the returned person.\n\nThe resource name can change when adding or removing fields that link a\ncontact and profile such as a verified email, verified phone number, or a\nprofile URL."
        },
        "status": {
          "description": "The status of the response.",
          "$ref": "Status"
        }
      },
      "id": "PersonResponse",
      "type": "object"
    },
    "ModifyContactGroupMembersRequest": {
      "id": "ModifyContactGroupMembersRequest",
      "type": "object",
      "description": "A request to modify an existing contact group's members. Contacts can be\nremoved from any group but they can only be added to a user group or\n\"myContacts\" or \"starred\" system groups.",
      "properties": {
        "resourceNamesToRemove": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional. The resource names of the contact people to remove in the form of\n`people/{person_id}`."
        },
        "resourceNamesToAdd": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional. The resource names of the contact people to add in the form of\n`people/{person_id}`."
        }
      }
    },
    "Address": {
      "id": "Address",
      "type": "object",
      "description": "A person's physical address. May be a P.O. box or street address. All fields\nare optional.",
      "properties": {
        "streetAddress": {
          "type": "string",
          "description": "The street address."
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code of the address."
        },
        "poBox": {
          "type": "string",
          "description": "The P.O. box of the address."
        },
        "type": {
          "description": "The type of the address. The type can be custom or one of these predefined\nvalues:\n\n* `home`\n* `work`\n* `other`",
          "type": "string"
        },
        "formattedValue": {
          "description": "The unstructured value of the address. If this is not set by the user it\nwill be automatically constructed from structured values.",
          "type": "string"
        },
        "city": {
          "type": "string",
          "description": "The city of the address."
        },
        "metadata": {
          "description": "Metadata about the address.",
          "$ref": "FieldMetadata"
        },
        "countryCode": {
          "type": "string",
          "description": "The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country\ncode of the address."
        },
        "country": {
          "type": "string",
          "description": "The country of the address."
        },
        "formattedType": {
          "type": "string",
          "description": "Output only. The type of the address translated and formatted in the viewer's\naccount locale or the `Accept-Language` HTTP header locale."
        },
        "region": {
          "type": "string",
          "description": "The region of the address; for example, the state or province."
        },
        "extendedAddress": {
          "description": "The extended address of the address; for example, the apartment number.",
          "type": "string"
        }
      }
    },
    "Residence": {
      "id": "Residence",
      "type": "object",
      "description": "A person's past or current residence.",
      "properties": {
        "current": {
          "type": "boolean",
          "description": "True if the residence is the person's current residence;\nfalse if the residence is a past residence."
        },
        "value": {
          "description": "The address of the residence.",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the residence.",
          "$ref": "FieldMetadata"
        }
      }
    },
    "EmailAddress": {
      "id": "EmailAddress",
      "type": "object",
      "description": "A person's email address.",
      "properties": {
        "formattedType": {
          "description": "Output only. The type of the email address translated and formatted in the\nviewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The email address."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the email."
        },
        "metadata": {
          "description": "Metadata about the email address.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "type": "string",
          "description": "The type of the email address. The type can be custom or one of these\npredefined values:\n\n* `home`\n* `work`\n* `other`"
        }
      }
    }
  },
  "canonicalName": "People Service",
  "discoveryVersion": "v1",
  "batchPath": "batch",
  "servicePath": "",
  "basePath": "",
  "documentationLink": "https://developers.google.com/people/",
  "name": "people",
  "title": "People API",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "mtlsRootUrl": "https://people.mtls.googleapis.com/"
}
