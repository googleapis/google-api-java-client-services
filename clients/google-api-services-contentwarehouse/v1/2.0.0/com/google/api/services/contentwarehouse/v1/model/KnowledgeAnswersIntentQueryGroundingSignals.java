/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Grounding-related signals to be propagated down stream. Next ID: 12
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KnowledgeAnswersIntentQueryGroundingSignals extends com.google.api.client.json.GenericJson {

  /**
   * True if the argument was added during grounding. This signal is intended to be used with
   * ArgumentSignals. Note that the added argument's value must be a FunctionCall that only contains
   * resolutions, i.e. grounding cannot add/modify/delete any ungrounded values.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean addedByGrounding;

  /**
   * Score indicating how grounded the intent is, populated by the Grounding Box, used by the pre-
   * fulfillment ranker, see http://go/prefulfillment-ranker.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double groundabilityScore;

  /**
   * Sum of the number of constraints used by the Grounding Box to ground each variable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double numConstraints;

  /**
   * Sum of the number of constraints satisfied for each variable. Depending on the match score for
   * a constraint, this number can be fractional and is in the range [0, num_constraints].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double numConstraintsSatisfied;

  /**
   * Number of groundable arguments in the parsed intent.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double numGroundableArgs;

  /**
   * Number of arguments that got actually grounded.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double numGroundedArgs;

  /**
   * Number of arguments, possibly nested, that the Grounding Box tried to ground.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double numVariables;

  /**
   * Number of arguments, possibly nested, that the Grounding Box was able to ground. This includes
   * ambiguously grounded arguments.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double numVariablesGrounded;

  /**
   * PGRP outputs PROD_INTENT_FACTORY intent format by default. See go/intent-conversion-locations-
   * in-sage. Experimental flags can change or make PGRP output additional intents formatted for
   * PORTMON_FULFILLMENT (e.g. with RDs). This is used by the PortMon/ARM dark launch (go/arm-dark-
   * launch-infra). Longer term, this will be replaced by DGS system-internal transformations (go
   * /if-dgs).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pgrpOutputFormat;

  /**
   * If true, then GroundingBox and PGRP are used in AnswersRewriter to process the intent. Other
   * post-processing steps, including IGDP, are adjusted accordingly. Note this will be removed once
   * GroundingBox is fully launched and all prod traffic goes through it. Before that happens, each
   * IG that needs to go through GB and PGRP (post GB ranking pruning) will need to explicitly set
   * this field to true. See http://go/gb-impl and http://go/gb-post-ranker-pruner for details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean usesGroundingBox;

  /**
   * True if the argument was added during grounding. This signal is intended to be used with
   * ArgumentSignals. Note that the added argument's value must be a FunctionCall that only contains
   * resolutions, i.e. grounding cannot add/modify/delete any ungrounded values.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAddedByGrounding() {
    return addedByGrounding;
  }

  /**
   * True if the argument was added during grounding. This signal is intended to be used with
   * ArgumentSignals. Note that the added argument's value must be a FunctionCall that only contains
   * resolutions, i.e. grounding cannot add/modify/delete any ungrounded values.
   * @param addedByGrounding addedByGrounding or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryGroundingSignals setAddedByGrounding(java.lang.Boolean addedByGrounding) {
    this.addedByGrounding = addedByGrounding;
    return this;
  }

  /**
   * Score indicating how grounded the intent is, populated by the Grounding Box, used by the pre-
   * fulfillment ranker, see http://go/prefulfillment-ranker.
   * @return value or {@code null} for none
   */
  public java.lang.Double getGroundabilityScore() {
    return groundabilityScore;
  }

  /**
   * Score indicating how grounded the intent is, populated by the Grounding Box, used by the pre-
   * fulfillment ranker, see http://go/prefulfillment-ranker.
   * @param groundabilityScore groundabilityScore or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryGroundingSignals setGroundabilityScore(java.lang.Double groundabilityScore) {
    this.groundabilityScore = groundabilityScore;
    return this;
  }

  /**
   * Sum of the number of constraints used by the Grounding Box to ground each variable.
   * @return value or {@code null} for none
   */
  public java.lang.Double getNumConstraints() {
    return numConstraints;
  }

  /**
   * Sum of the number of constraints used by the Grounding Box to ground each variable.
   * @param numConstraints numConstraints or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryGroundingSignals setNumConstraints(java.lang.Double numConstraints) {
    this.numConstraints = numConstraints;
    return this;
  }

  /**
   * Sum of the number of constraints satisfied for each variable. Depending on the match score for
   * a constraint, this number can be fractional and is in the range [0, num_constraints].
   * @return value or {@code null} for none
   */
  public java.lang.Double getNumConstraintsSatisfied() {
    return numConstraintsSatisfied;
  }

  /**
   * Sum of the number of constraints satisfied for each variable. Depending on the match score for
   * a constraint, this number can be fractional and is in the range [0, num_constraints].
   * @param numConstraintsSatisfied numConstraintsSatisfied or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryGroundingSignals setNumConstraintsSatisfied(java.lang.Double numConstraintsSatisfied) {
    this.numConstraintsSatisfied = numConstraintsSatisfied;
    return this;
  }

  /**
   * Number of groundable arguments in the parsed intent.
   * @return value or {@code null} for none
   */
  public java.lang.Double getNumGroundableArgs() {
    return numGroundableArgs;
  }

  /**
   * Number of groundable arguments in the parsed intent.
   * @param numGroundableArgs numGroundableArgs or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryGroundingSignals setNumGroundableArgs(java.lang.Double numGroundableArgs) {
    this.numGroundableArgs = numGroundableArgs;
    return this;
  }

  /**
   * Number of arguments that got actually grounded.
   * @return value or {@code null} for none
   */
  public java.lang.Double getNumGroundedArgs() {
    return numGroundedArgs;
  }

  /**
   * Number of arguments that got actually grounded.
   * @param numGroundedArgs numGroundedArgs or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryGroundingSignals setNumGroundedArgs(java.lang.Double numGroundedArgs) {
    this.numGroundedArgs = numGroundedArgs;
    return this;
  }

  /**
   * Number of arguments, possibly nested, that the Grounding Box tried to ground.
   * @return value or {@code null} for none
   */
  public java.lang.Double getNumVariables() {
    return numVariables;
  }

  /**
   * Number of arguments, possibly nested, that the Grounding Box tried to ground.
   * @param numVariables numVariables or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryGroundingSignals setNumVariables(java.lang.Double numVariables) {
    this.numVariables = numVariables;
    return this;
  }

  /**
   * Number of arguments, possibly nested, that the Grounding Box was able to ground. This includes
   * ambiguously grounded arguments.
   * @return value or {@code null} for none
   */
  public java.lang.Double getNumVariablesGrounded() {
    return numVariablesGrounded;
  }

  /**
   * Number of arguments, possibly nested, that the Grounding Box was able to ground. This includes
   * ambiguously grounded arguments.
   * @param numVariablesGrounded numVariablesGrounded or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryGroundingSignals setNumVariablesGrounded(java.lang.Double numVariablesGrounded) {
    this.numVariablesGrounded = numVariablesGrounded;
    return this;
  }

  /**
   * PGRP outputs PROD_INTENT_FACTORY intent format by default. See go/intent-conversion-locations-
   * in-sage. Experimental flags can change or make PGRP output additional intents formatted for
   * PORTMON_FULFILLMENT (e.g. with RDs). This is used by the PortMon/ARM dark launch (go/arm-dark-
   * launch-infra). Longer term, this will be replaced by DGS system-internal transformations (go
   * /if-dgs).
   * @return value or {@code null} for none
   */
  public java.lang.String getPgrpOutputFormat() {
    return pgrpOutputFormat;
  }

  /**
   * PGRP outputs PROD_INTENT_FACTORY intent format by default. See go/intent-conversion-locations-
   * in-sage. Experimental flags can change or make PGRP output additional intents formatted for
   * PORTMON_FULFILLMENT (e.g. with RDs). This is used by the PortMon/ARM dark launch (go/arm-dark-
   * launch-infra). Longer term, this will be replaced by DGS system-internal transformations (go
   * /if-dgs).
   * @param pgrpOutputFormat pgrpOutputFormat or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryGroundingSignals setPgrpOutputFormat(java.lang.String pgrpOutputFormat) {
    this.pgrpOutputFormat = pgrpOutputFormat;
    return this;
  }

  /**
   * If true, then GroundingBox and PGRP are used in AnswersRewriter to process the intent. Other
   * post-processing steps, including IGDP, are adjusted accordingly. Note this will be removed once
   * GroundingBox is fully launched and all prod traffic goes through it. Before that happens, each
   * IG that needs to go through GB and PGRP (post GB ranking pruning) will need to explicitly set
   * this field to true. See http://go/gb-impl and http://go/gb-post-ranker-pruner for details.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUsesGroundingBox() {
    return usesGroundingBox;
  }

  /**
   * If true, then GroundingBox and PGRP are used in AnswersRewriter to process the intent. Other
   * post-processing steps, including IGDP, are adjusted accordingly. Note this will be removed once
   * GroundingBox is fully launched and all prod traffic goes through it. Before that happens, each
   * IG that needs to go through GB and PGRP (post GB ranking pruning) will need to explicitly set
   * this field to true. See http://go/gb-impl and http://go/gb-post-ranker-pruner for details.
   * @param usesGroundingBox usesGroundingBox or {@code null} for none
   */
  public KnowledgeAnswersIntentQueryGroundingSignals setUsesGroundingBox(java.lang.Boolean usesGroundingBox) {
    this.usesGroundingBox = usesGroundingBox;
    return this;
  }

  @Override
  public KnowledgeAnswersIntentQueryGroundingSignals set(String fieldName, Object value) {
    return (KnowledgeAnswersIntentQueryGroundingSignals) super.set(fieldName, value);
  }

  @Override
  public KnowledgeAnswersIntentQueryGroundingSignals clone() {
    return (KnowledgeAnswersIntentQueryGroundingSignals) super.clone();
  }

}
