/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.chat.v1.model;

/**
 * A widget that displays text with optional decorations such as a label above or below the text, an
 * icon in front of the text, a selection widget, or a button after the text. For an example in
 * Google Chat apps, see [Display text with decorative
 * text](https://developers.google.com/workspace/chat/add-text-image-card-
 * dialog#display_text_with_decorative_elements). [Google Workspace add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Chat API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleAppsCardV1DecoratedText extends com.google.api.client.json.GenericJson {

  /**
   * The text that appears below `text`. Always wraps.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bottomLabel;

  /**
   * `TextParagraph` equivalent of `bottom_label`. Always wraps. Allows for more complex formatting
   * than `bottom_label`. [Google Chat apps](https://developers.google.com/workspace/chat):
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAppsCardV1TextParagraph bottomLabelText;

  /**
   * A button that a user can click to trigger an action.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAppsCardV1Button button;

  /**
   * `TextParagraph` equivalent of `text`. Allows for more complex formatting than `text`. [Google
   * Chat apps](https://developers.google.com/workspace/chat):
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAppsCardV1TextParagraph contentText;

  /**
   * An icon displayed after the text. Supports [built-
   * in](https://developers.google.com/workspace/chat/format-messages#builtinicons) and
   * [custom](https://developers.google.com/workspace/chat/format-messages#customicons) icons.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAppsCardV1Icon endIcon;

  /**
   * Deprecated in favor of `startIcon`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAppsCardV1Icon icon;

  /**
   * This action is triggered when users click `topLabel` or `bottomLabel`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAppsCardV1OnClick onClick;

  /**
   * The icon displayed in front of the text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAppsCardV1Icon startIcon;

  /**
   * Optional. Vertical alignment of the start icon. If not set, the icon will be vertically
   * centered. [Google Chat apps](https://developers.google.com/workspace/chat):
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String startIconVerticalAlignment;

  /**
   * A switch widget that a user can click to change its state and trigger an action.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAppsCardV1SwitchControl switchControl;

  /**
   * Required. The primary text. Supports simple formatting. For more information about formatting
   * text, see [Formatting text in Google Chat
   * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting) and
   * [Formatting text in Google Workspace add-ons](https://developers.google.com/apps-script/add-
   * ons/concepts/widgets#text_formatting).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String text;

  /**
   * The text that appears above `text`. Always truncates.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String topLabel;

  /**
   * `TextParagraph` equivalent of `top_label`. Always truncates. Allows for more complex formatting
   * than `top_label`. [Google Chat apps](https://developers.google.com/workspace/chat):
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleAppsCardV1TextParagraph topLabelText;

  /**
   * The wrap text setting. If `true`, the text wraps and displays on multiple lines. Otherwise, the
   * text is truncated. Only applies to `text`, not `topLabel` and `bottomLabel`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean wrapText;

  /**
   * The text that appears below `text`. Always wraps.
   * @return value or {@code null} for none
   */
  public java.lang.String getBottomLabel() {
    return bottomLabel;
  }

  /**
   * The text that appears below `text`. Always wraps.
   * @param bottomLabel bottomLabel or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setBottomLabel(java.lang.String bottomLabel) {
    this.bottomLabel = bottomLabel;
    return this;
  }

  /**
   * `TextParagraph` equivalent of `bottom_label`. Always wraps. Allows for more complex formatting
   * than `bottom_label`. [Google Chat apps](https://developers.google.com/workspace/chat):
   * @return value or {@code null} for none
   */
  public GoogleAppsCardV1TextParagraph getBottomLabelText() {
    return bottomLabelText;
  }

  /**
   * `TextParagraph` equivalent of `bottom_label`. Always wraps. Allows for more complex formatting
   * than `bottom_label`. [Google Chat apps](https://developers.google.com/workspace/chat):
   * @param bottomLabelText bottomLabelText or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setBottomLabelText(GoogleAppsCardV1TextParagraph bottomLabelText) {
    this.bottomLabelText = bottomLabelText;
    return this;
  }

  /**
   * A button that a user can click to trigger an action.
   * @return value or {@code null} for none
   */
  public GoogleAppsCardV1Button getButton() {
    return button;
  }

  /**
   * A button that a user can click to trigger an action.
   * @param button button or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setButton(GoogleAppsCardV1Button button) {
    this.button = button;
    return this;
  }

  /**
   * `TextParagraph` equivalent of `text`. Allows for more complex formatting than `text`. [Google
   * Chat apps](https://developers.google.com/workspace/chat):
   * @return value or {@code null} for none
   */
  public GoogleAppsCardV1TextParagraph getContentText() {
    return contentText;
  }

  /**
   * `TextParagraph` equivalent of `text`. Allows for more complex formatting than `text`. [Google
   * Chat apps](https://developers.google.com/workspace/chat):
   * @param contentText contentText or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setContentText(GoogleAppsCardV1TextParagraph contentText) {
    this.contentText = contentText;
    return this;
  }

  /**
   * An icon displayed after the text. Supports [built-
   * in](https://developers.google.com/workspace/chat/format-messages#builtinicons) and
   * [custom](https://developers.google.com/workspace/chat/format-messages#customicons) icons.
   * @return value or {@code null} for none
   */
  public GoogleAppsCardV1Icon getEndIcon() {
    return endIcon;
  }

  /**
   * An icon displayed after the text. Supports [built-
   * in](https://developers.google.com/workspace/chat/format-messages#builtinicons) and
   * [custom](https://developers.google.com/workspace/chat/format-messages#customicons) icons.
   * @param endIcon endIcon or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setEndIcon(GoogleAppsCardV1Icon endIcon) {
    this.endIcon = endIcon;
    return this;
  }

  /**
   * Deprecated in favor of `startIcon`.
   * @return value or {@code null} for none
   */
  public GoogleAppsCardV1Icon getIcon() {
    return icon;
  }

  /**
   * Deprecated in favor of `startIcon`.
   * @param icon icon or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setIcon(GoogleAppsCardV1Icon icon) {
    this.icon = icon;
    return this;
  }

  /**
   * This action is triggered when users click `topLabel` or `bottomLabel`.
   * @return value or {@code null} for none
   */
  public GoogleAppsCardV1OnClick getOnClick() {
    return onClick;
  }

  /**
   * This action is triggered when users click `topLabel` or `bottomLabel`.
   * @param onClick onClick or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setOnClick(GoogleAppsCardV1OnClick onClick) {
    this.onClick = onClick;
    return this;
  }

  /**
   * The icon displayed in front of the text.
   * @return value or {@code null} for none
   */
  public GoogleAppsCardV1Icon getStartIcon() {
    return startIcon;
  }

  /**
   * The icon displayed in front of the text.
   * @param startIcon startIcon or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setStartIcon(GoogleAppsCardV1Icon startIcon) {
    this.startIcon = startIcon;
    return this;
  }

  /**
   * Optional. Vertical alignment of the start icon. If not set, the icon will be vertically
   * centered. [Google Chat apps](https://developers.google.com/workspace/chat):
   * @return value or {@code null} for none
   */
  public java.lang.String getStartIconVerticalAlignment() {
    return startIconVerticalAlignment;
  }

  /**
   * Optional. Vertical alignment of the start icon. If not set, the icon will be vertically
   * centered. [Google Chat apps](https://developers.google.com/workspace/chat):
   * @param startIconVerticalAlignment startIconVerticalAlignment or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setStartIconVerticalAlignment(java.lang.String startIconVerticalAlignment) {
    this.startIconVerticalAlignment = startIconVerticalAlignment;
    return this;
  }

  /**
   * A switch widget that a user can click to change its state and trigger an action.
   * @return value or {@code null} for none
   */
  public GoogleAppsCardV1SwitchControl getSwitchControl() {
    return switchControl;
  }

  /**
   * A switch widget that a user can click to change its state and trigger an action.
   * @param switchControl switchControl or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setSwitchControl(GoogleAppsCardV1SwitchControl switchControl) {
    this.switchControl = switchControl;
    return this;
  }

  /**
   * Required. The primary text. Supports simple formatting. For more information about formatting
   * text, see [Formatting text in Google Chat
   * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting) and
   * [Formatting text in Google Workspace add-ons](https://developers.google.com/apps-script/add-
   * ons/concepts/widgets#text_formatting).
   * @return value or {@code null} for none
   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * Required. The primary text. Supports simple formatting. For more information about formatting
   * text, see [Formatting text in Google Chat
   * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting) and
   * [Formatting text in Google Workspace add-ons](https://developers.google.com/apps-script/add-
   * ons/concepts/widgets#text_formatting).
   * @param text text or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setText(java.lang.String text) {
    this.text = text;
    return this;
  }

  /**
   * The text that appears above `text`. Always truncates.
   * @return value or {@code null} for none
   */
  public java.lang.String getTopLabel() {
    return topLabel;
  }

  /**
   * The text that appears above `text`. Always truncates.
   * @param topLabel topLabel or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setTopLabel(java.lang.String topLabel) {
    this.topLabel = topLabel;
    return this;
  }

  /**
   * `TextParagraph` equivalent of `top_label`. Always truncates. Allows for more complex formatting
   * than `top_label`. [Google Chat apps](https://developers.google.com/workspace/chat):
   * @return value or {@code null} for none
   */
  public GoogleAppsCardV1TextParagraph getTopLabelText() {
    return topLabelText;
  }

  /**
   * `TextParagraph` equivalent of `top_label`. Always truncates. Allows for more complex formatting
   * than `top_label`. [Google Chat apps](https://developers.google.com/workspace/chat):
   * @param topLabelText topLabelText or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setTopLabelText(GoogleAppsCardV1TextParagraph topLabelText) {
    this.topLabelText = topLabelText;
    return this;
  }

  /**
   * The wrap text setting. If `true`, the text wraps and displays on multiple lines. Otherwise, the
   * text is truncated. Only applies to `text`, not `topLabel` and `bottomLabel`.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getWrapText() {
    return wrapText;
  }

  /**
   * The wrap text setting. If `true`, the text wraps and displays on multiple lines. Otherwise, the
   * text is truncated. Only applies to `text`, not `topLabel` and `bottomLabel`.
   * @param wrapText wrapText or {@code null} for none
   */
  public GoogleAppsCardV1DecoratedText setWrapText(java.lang.Boolean wrapText) {
    this.wrapText = wrapText;
    return this;
  }

  @Override
  public GoogleAppsCardV1DecoratedText set(String fieldName, Object value) {
    return (GoogleAppsCardV1DecoratedText) super.set(fieldName, value);
  }

  @Override
  public GoogleAppsCardV1DecoratedText clone() {
    return (GoogleAppsCardV1DecoratedText) super.clone();
  }

}
