/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.apikeys.v2.model;

/**
 * Describes the restrictions on the key.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the API Keys API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class V2Restrictions extends com.google.api.client.json.GenericJson {

  /**
   * The Android apps that are allowed to use the key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private V2AndroidKeyRestrictions androidKeyRestrictions;

  /**
   * A restriction for a specific service and optionally one or more specific methods. Requests are
   * allowed if they match any of these restrictions. If no restrictions are specified, all targets
   * are allowed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<V2ApiTarget> apiTargets;

  static {
    // hack to force ProGuard to consider V2ApiTarget used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(V2ApiTarget.class);
  }

  /**
   * The HTTP referrers (websites) that are allowed to use the key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private V2BrowserKeyRestrictions browserKeyRestrictions;

  /**
   * The iOS apps that are allowed to use the key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private V2IosKeyRestrictions iosKeyRestrictions;

  /**
   * The IP addresses of callers that are allowed to use the key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private V2ServerKeyRestrictions serverKeyRestrictions;

  /**
   * The Android apps that are allowed to use the key.
   * @return value or {@code null} for none
   */
  public V2AndroidKeyRestrictions getAndroidKeyRestrictions() {
    return androidKeyRestrictions;
  }

  /**
   * The Android apps that are allowed to use the key.
   * @param androidKeyRestrictions androidKeyRestrictions or {@code null} for none
   */
  public V2Restrictions setAndroidKeyRestrictions(V2AndroidKeyRestrictions androidKeyRestrictions) {
    this.androidKeyRestrictions = androidKeyRestrictions;
    return this;
  }

  /**
   * A restriction for a specific service and optionally one or more specific methods. Requests are
   * allowed if they match any of these restrictions. If no restrictions are specified, all targets
   * are allowed.
   * @return value or {@code null} for none
   */
  public java.util.List<V2ApiTarget> getApiTargets() {
    return apiTargets;
  }

  /**
   * A restriction for a specific service and optionally one or more specific methods. Requests are
   * allowed if they match any of these restrictions. If no restrictions are specified, all targets
   * are allowed.
   * @param apiTargets apiTargets or {@code null} for none
   */
  public V2Restrictions setApiTargets(java.util.List<V2ApiTarget> apiTargets) {
    this.apiTargets = apiTargets;
    return this;
  }

  /**
   * The HTTP referrers (websites) that are allowed to use the key.
   * @return value or {@code null} for none
   */
  public V2BrowserKeyRestrictions getBrowserKeyRestrictions() {
    return browserKeyRestrictions;
  }

  /**
   * The HTTP referrers (websites) that are allowed to use the key.
   * @param browserKeyRestrictions browserKeyRestrictions or {@code null} for none
   */
  public V2Restrictions setBrowserKeyRestrictions(V2BrowserKeyRestrictions browserKeyRestrictions) {
    this.browserKeyRestrictions = browserKeyRestrictions;
    return this;
  }

  /**
   * The iOS apps that are allowed to use the key.
   * @return value or {@code null} for none
   */
  public V2IosKeyRestrictions getIosKeyRestrictions() {
    return iosKeyRestrictions;
  }

  /**
   * The iOS apps that are allowed to use the key.
   * @param iosKeyRestrictions iosKeyRestrictions or {@code null} for none
   */
  public V2Restrictions setIosKeyRestrictions(V2IosKeyRestrictions iosKeyRestrictions) {
    this.iosKeyRestrictions = iosKeyRestrictions;
    return this;
  }

  /**
   * The IP addresses of callers that are allowed to use the key.
   * @return value or {@code null} for none
   */
  public V2ServerKeyRestrictions getServerKeyRestrictions() {
    return serverKeyRestrictions;
  }

  /**
   * The IP addresses of callers that are allowed to use the key.
   * @param serverKeyRestrictions serverKeyRestrictions or {@code null} for none
   */
  public V2Restrictions setServerKeyRestrictions(V2ServerKeyRestrictions serverKeyRestrictions) {
    this.serverKeyRestrictions = serverKeyRestrictions;
    return this;
  }

  @Override
  public V2Restrictions set(String fieldName, Object value) {
    return (V2Restrictions) super.set(fieldName, value);
  }

  @Override
  public V2Restrictions clone() {
    return (V2Restrictions) super.clone();
  }

}
