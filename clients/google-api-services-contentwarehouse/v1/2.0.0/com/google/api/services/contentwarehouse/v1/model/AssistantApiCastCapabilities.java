/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * These capabilities represent capabilities that have to do with casting that pertain to this
 * device. Next ID: 9
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiCastCapabilities extends com.google.api.client.json.GenericJson {

  /**
   * Whether the device has limited camera stream capability and if yes, which receivers are
   * supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiCameraReceiverCapabilities cameraReceiverCapabilities;

  /**
   * The supported protocols for camera streaming. The value is used as string in go/smarthome-
   * internal-api#camera-stream, so using a string for this field instead of an enum. Supported
   * protocols: (align the definition in go/smarthome-camerastream-trait) - "hls": HTTP Live
   * Streaming - "dash": Dynamic Adaptive Streaming over HTTP - "smooth_stream": Smooth Streaming -
   * "progressive_mp4": Progressive MP4 (will likely only be used for Clips) - "webrtc": WebRTC
   * (currently, only H.264 is supported) - "nexustalk": Internal-only protocol used for Nest
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> cameraStreamSupportedProtocols;

  /**
   * True if we can cast things to this device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean canReceiveCast;

  /**
   * Optional for primarily cast devices (e.g., Chirp, Chromecast). For devices that are NOT
   * primarily cast devices, but having a cast receiver as secondary functionality, this field
   * SHOULD store the cast-device-id to be used to send remote casting commands to the device.
   * Example: Android TV, which supports both Android-native actions as well as remote casting using
   * its built-in cast receiver. Android TV device id contains a DUSI id, which is not a cast-
   * device-id. When executing a cast command on the Android TV, this field is used to route the
   * cast command (through CloudCastService) to the cast receiver on the device.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiCoreTypesDeviceId deviceId;

  /**
   * Whether this device supports dynamic groups or not. It implies if a Stream Control operation
   * (transfer, expansion, and contraction) could be applied on this device since Stream Control is
   * implemented as part of dynamic groups (ie, adding/removing devices from playback)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean dynamicGroupsSupported;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String groupType;

  /**
   * Whether UI overlay applications are supported on this device. It's used by Chromecast only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean overlayApplicationsSupported;

  /**
   * Whether the device supports playing games through Yeti. This is set by the cast device when the
   * device is updated: Chromecast updates -> Chromecast registers its capabilities with CCS -> CCS
   * passes the capabilities to the AssistantSettingsService -> AssistantSettingsService stores the
   * device's capabilities. go/yeti-gaming-supported-cast-capability
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean yetiGamingSupported;

  /**
   * Whether the device has limited camera stream capability and if yes, which receivers are
   * supported.
   * @return value or {@code null} for none
   */
  public AssistantApiCameraReceiverCapabilities getCameraReceiverCapabilities() {
    return cameraReceiverCapabilities;
  }

  /**
   * Whether the device has limited camera stream capability and if yes, which receivers are
   * supported.
   * @param cameraReceiverCapabilities cameraReceiverCapabilities or {@code null} for none
   */
  public AssistantApiCastCapabilities setCameraReceiverCapabilities(AssistantApiCameraReceiverCapabilities cameraReceiverCapabilities) {
    this.cameraReceiverCapabilities = cameraReceiverCapabilities;
    return this;
  }

  /**
   * The supported protocols for camera streaming. The value is used as string in go/smarthome-
   * internal-api#camera-stream, so using a string for this field instead of an enum. Supported
   * protocols: (align the definition in go/smarthome-camerastream-trait) - "hls": HTTP Live
   * Streaming - "dash": Dynamic Adaptive Streaming over HTTP - "smooth_stream": Smooth Streaming -
   * "progressive_mp4": Progressive MP4 (will likely only be used for Clips) - "webrtc": WebRTC
   * (currently, only H.264 is supported) - "nexustalk": Internal-only protocol used for Nest
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCameraStreamSupportedProtocols() {
    return cameraStreamSupportedProtocols;
  }

  /**
   * The supported protocols for camera streaming. The value is used as string in go/smarthome-
   * internal-api#camera-stream, so using a string for this field instead of an enum. Supported
   * protocols: (align the definition in go/smarthome-camerastream-trait) - "hls": HTTP Live
   * Streaming - "dash": Dynamic Adaptive Streaming over HTTP - "smooth_stream": Smooth Streaming -
   * "progressive_mp4": Progressive MP4 (will likely only be used for Clips) - "webrtc": WebRTC
   * (currently, only H.264 is supported) - "nexustalk": Internal-only protocol used for Nest
   * @param cameraStreamSupportedProtocols cameraStreamSupportedProtocols or {@code null} for none
   */
  public AssistantApiCastCapabilities setCameraStreamSupportedProtocols(java.util.List<java.lang.String> cameraStreamSupportedProtocols) {
    this.cameraStreamSupportedProtocols = cameraStreamSupportedProtocols;
    return this;
  }

  /**
   * True if we can cast things to this device.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCanReceiveCast() {
    return canReceiveCast;
  }

  /**
   * True if we can cast things to this device.
   * @param canReceiveCast canReceiveCast or {@code null} for none
   */
  public AssistantApiCastCapabilities setCanReceiveCast(java.lang.Boolean canReceiveCast) {
    this.canReceiveCast = canReceiveCast;
    return this;
  }

  /**
   * Optional for primarily cast devices (e.g., Chirp, Chromecast). For devices that are NOT
   * primarily cast devices, but having a cast receiver as secondary functionality, this field
   * SHOULD store the cast-device-id to be used to send remote casting commands to the device.
   * Example: Android TV, which supports both Android-native actions as well as remote casting using
   * its built-in cast receiver. Android TV device id contains a DUSI id, which is not a cast-
   * device-id. When executing a cast command on the Android TV, this field is used to route the
   * cast command (through CloudCastService) to the cast receiver on the device.
   * @return value or {@code null} for none
   */
  public AssistantApiCoreTypesDeviceId getDeviceId() {
    return deviceId;
  }

  /**
   * Optional for primarily cast devices (e.g., Chirp, Chromecast). For devices that are NOT
   * primarily cast devices, but having a cast receiver as secondary functionality, this field
   * SHOULD store the cast-device-id to be used to send remote casting commands to the device.
   * Example: Android TV, which supports both Android-native actions as well as remote casting using
   * its built-in cast receiver. Android TV device id contains a DUSI id, which is not a cast-
   * device-id. When executing a cast command on the Android TV, this field is used to route the
   * cast command (through CloudCastService) to the cast receiver on the device.
   * @param deviceId deviceId or {@code null} for none
   */
  public AssistantApiCastCapabilities setDeviceId(AssistantApiCoreTypesDeviceId deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Whether this device supports dynamic groups or not. It implies if a Stream Control operation
   * (transfer, expansion, and contraction) could be applied on this device since Stream Control is
   * implemented as part of dynamic groups (ie, adding/removing devices from playback)
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDynamicGroupsSupported() {
    return dynamicGroupsSupported;
  }

  /**
   * Whether this device supports dynamic groups or not. It implies if a Stream Control operation
   * (transfer, expansion, and contraction) could be applied on this device since Stream Control is
   * implemented as part of dynamic groups (ie, adding/removing devices from playback)
   * @param dynamicGroupsSupported dynamicGroupsSupported or {@code null} for none
   */
  public AssistantApiCastCapabilities setDynamicGroupsSupported(java.lang.Boolean dynamicGroupsSupported) {
    this.dynamicGroupsSupported = dynamicGroupsSupported;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getGroupType() {
    return groupType;
  }

  /**
   * @param groupType groupType or {@code null} for none
   */
  public AssistantApiCastCapabilities setGroupType(java.lang.String groupType) {
    this.groupType = groupType;
    return this;
  }

  /**
   * Whether UI overlay applications are supported on this device. It's used by Chromecast only.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getOverlayApplicationsSupported() {
    return overlayApplicationsSupported;
  }

  /**
   * Whether UI overlay applications are supported on this device. It's used by Chromecast only.
   * @param overlayApplicationsSupported overlayApplicationsSupported or {@code null} for none
   */
  public AssistantApiCastCapabilities setOverlayApplicationsSupported(java.lang.Boolean overlayApplicationsSupported) {
    this.overlayApplicationsSupported = overlayApplicationsSupported;
    return this;
  }

  /**
   * Whether the device supports playing games through Yeti. This is set by the cast device when the
   * device is updated: Chromecast updates -> Chromecast registers its capabilities with CCS -> CCS
   * passes the capabilities to the AssistantSettingsService -> AssistantSettingsService stores the
   * device's capabilities. go/yeti-gaming-supported-cast-capability
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getYetiGamingSupported() {
    return yetiGamingSupported;
  }

  /**
   * Whether the device supports playing games through Yeti. This is set by the cast device when the
   * device is updated: Chromecast updates -> Chromecast registers its capabilities with CCS -> CCS
   * passes the capabilities to the AssistantSettingsService -> AssistantSettingsService stores the
   * device's capabilities. go/yeti-gaming-supported-cast-capability
   * @param yetiGamingSupported yetiGamingSupported or {@code null} for none
   */
  public AssistantApiCastCapabilities setYetiGamingSupported(java.lang.Boolean yetiGamingSupported) {
    this.yetiGamingSupported = yetiGamingSupported;
    return this;
  }

  @Override
  public AssistantApiCastCapabilities set(String fieldName, Object value) {
    return (AssistantApiCastCapabilities) super.set(fieldName, value);
  }

  @Override
  public AssistantApiCastCapabilities clone() {
    return (AssistantApiCastCapabilities) super.clone();
  }

}
