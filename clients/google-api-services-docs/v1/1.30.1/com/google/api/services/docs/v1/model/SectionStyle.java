/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.docs.v1.model;

/**
 * The styling that applies to a section.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Docs API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SectionStyle extends com.google.api.client.json.GenericJson {

  /**
   * The section's columns properties.
   *
   * If empty, the section contains one column with the default properties in the Docs editor.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SectionColumnProperties> columnProperties;

  static {
    // hack to force ProGuard to consider SectionColumnProperties used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(SectionColumnProperties.class);
  }

  /**
   * The style of column separators.
   *
   * This style can be set even when there is one column in the section.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String columnSeparatorStyle;

  /**
   * The content direction of this section. If unset, the value defaults to LEFT_TO_RIGHT.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String contentDirection;

  /**
   * The bottom page margin of the section. If unset, uses margin_bottom from DocumentStyle.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Dimension marginBottom;

  /**
   * The footer margin of the section. If unset, uses margin_footer from DocumentStyle. If updated,
   * use_custom_header_footer_margins is set to true on DocumentStyle. The value of
   * use_custom_header_footer_margins on DocumentStyle indicates if a footer margin is being
   * respected for this section
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Dimension marginFooter;

  /**
   * The header margin of the section. If unset, uses margin_header from DocumentStyle. If updated,
   * use_custom_header_footer_margins is set to true on DocumentStyle. The value of
   * use_custom_header_footer_margins on DocumentStyle indicates if a header margin is being
   * respected for this section.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Dimension marginHeader;

  /**
   * The left page margin of the section. If unset, uses margin_left from DocumentStyle. Updating
   * left margin causes columns in this section to resize. Since the margin affects column width, it
   * is applied before column properties.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Dimension marginLeft;

  /**
   * The right page margin of the section. If unset, uses margin_right from DocumentStyle. Updating
   * right margin causes columns in this section to resize. Since the margin affects column width,
   * it is applied before column properties.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Dimension marginRight;

  /**
   * The top page margin of the section. If unset, uses margin_top from DocumentStyle.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Dimension marginTop;

  /**
   * Output only. The type of section.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sectionType;

  /**
   * The section's columns properties.
   *
   * If empty, the section contains one column with the default properties in the Docs editor.
   * @return value or {@code null} for none
   */
  public java.util.List<SectionColumnProperties> getColumnProperties() {
    return columnProperties;
  }

  /**
   * The section's columns properties.
   *
   * If empty, the section contains one column with the default properties in the Docs editor.
   * @param columnProperties columnProperties or {@code null} for none
   */
  public SectionStyle setColumnProperties(java.util.List<SectionColumnProperties> columnProperties) {
    this.columnProperties = columnProperties;
    return this;
  }

  /**
   * The style of column separators.
   *
   * This style can be set even when there is one column in the section.
   * @return value or {@code null} for none
   */
  public java.lang.String getColumnSeparatorStyle() {
    return columnSeparatorStyle;
  }

  /**
   * The style of column separators.
   *
   * This style can be set even when there is one column in the section.
   * @param columnSeparatorStyle columnSeparatorStyle or {@code null} for none
   */
  public SectionStyle setColumnSeparatorStyle(java.lang.String columnSeparatorStyle) {
    this.columnSeparatorStyle = columnSeparatorStyle;
    return this;
  }

  /**
   * The content direction of this section. If unset, the value defaults to LEFT_TO_RIGHT.
   * @return value or {@code null} for none
   */
  public java.lang.String getContentDirection() {
    return contentDirection;
  }

  /**
   * The content direction of this section. If unset, the value defaults to LEFT_TO_RIGHT.
   * @param contentDirection contentDirection or {@code null} for none
   */
  public SectionStyle setContentDirection(java.lang.String contentDirection) {
    this.contentDirection = contentDirection;
    return this;
  }

  /**
   * The bottom page margin of the section. If unset, uses margin_bottom from DocumentStyle.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * @return value or {@code null} for none
   */
  public Dimension getMarginBottom() {
    return marginBottom;
  }

  /**
   * The bottom page margin of the section. If unset, uses margin_bottom from DocumentStyle.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * @param marginBottom marginBottom or {@code null} for none
   */
  public SectionStyle setMarginBottom(Dimension marginBottom) {
    this.marginBottom = marginBottom;
    return this;
  }

  /**
   * The footer margin of the section. If unset, uses margin_footer from DocumentStyle. If updated,
   * use_custom_header_footer_margins is set to true on DocumentStyle. The value of
   * use_custom_header_footer_margins on DocumentStyle indicates if a footer margin is being
   * respected for this section
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * @return value or {@code null} for none
   */
  public Dimension getMarginFooter() {
    return marginFooter;
  }

  /**
   * The footer margin of the section. If unset, uses margin_footer from DocumentStyle. If updated,
   * use_custom_header_footer_margins is set to true on DocumentStyle. The value of
   * use_custom_header_footer_margins on DocumentStyle indicates if a footer margin is being
   * respected for this section
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * @param marginFooter marginFooter or {@code null} for none
   */
  public SectionStyle setMarginFooter(Dimension marginFooter) {
    this.marginFooter = marginFooter;
    return this;
  }

  /**
   * The header margin of the section. If unset, uses margin_header from DocumentStyle. If updated,
   * use_custom_header_footer_margins is set to true on DocumentStyle. The value of
   * use_custom_header_footer_margins on DocumentStyle indicates if a header margin is being
   * respected for this section.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * @return value or {@code null} for none
   */
  public Dimension getMarginHeader() {
    return marginHeader;
  }

  /**
   * The header margin of the section. If unset, uses margin_header from DocumentStyle. If updated,
   * use_custom_header_footer_margins is set to true on DocumentStyle. The value of
   * use_custom_header_footer_margins on DocumentStyle indicates if a header margin is being
   * respected for this section.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * @param marginHeader marginHeader or {@code null} for none
   */
  public SectionStyle setMarginHeader(Dimension marginHeader) {
    this.marginHeader = marginHeader;
    return this;
  }

  /**
   * The left page margin of the section. If unset, uses margin_left from DocumentStyle. Updating
   * left margin causes columns in this section to resize. Since the margin affects column width, it
   * is applied before column properties.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * @return value or {@code null} for none
   */
  public Dimension getMarginLeft() {
    return marginLeft;
  }

  /**
   * The left page margin of the section. If unset, uses margin_left from DocumentStyle. Updating
   * left margin causes columns in this section to resize. Since the margin affects column width, it
   * is applied before column properties.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * @param marginLeft marginLeft or {@code null} for none
   */
  public SectionStyle setMarginLeft(Dimension marginLeft) {
    this.marginLeft = marginLeft;
    return this;
  }

  /**
   * The right page margin of the section. If unset, uses margin_right from DocumentStyle. Updating
   * right margin causes columns in this section to resize. Since the margin affects column width,
   * it is applied before column properties.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * @return value or {@code null} for none
   */
  public Dimension getMarginRight() {
    return marginRight;
  }

  /**
   * The right page margin of the section. If unset, uses margin_right from DocumentStyle. Updating
   * right margin causes columns in this section to resize. Since the margin affects column width,
   * it is applied before column properties.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * @param marginRight marginRight or {@code null} for none
   */
  public SectionStyle setMarginRight(Dimension marginRight) {
    this.marginRight = marginRight;
    return this;
  }

  /**
   * The top page margin of the section. If unset, uses margin_top from DocumentStyle.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * @return value or {@code null} for none
   */
  public Dimension getMarginTop() {
    return marginTop;
  }

  /**
   * The top page margin of the section. If unset, uses margin_top from DocumentStyle.
   *
   * When updating this property, setting a concrete value is required. Unsetting this property
   * results in a 400 bad request error.
   * @param marginTop marginTop or {@code null} for none
   */
  public SectionStyle setMarginTop(Dimension marginTop) {
    this.marginTop = marginTop;
    return this;
  }

  /**
   * Output only. The type of section.
   * @return value or {@code null} for none
   */
  public java.lang.String getSectionType() {
    return sectionType;
  }

  /**
   * Output only. The type of section.
   * @param sectionType sectionType or {@code null} for none
   */
  public SectionStyle setSectionType(java.lang.String sectionType) {
    this.sectionType = sectionType;
    return this;
  }

  @Override
  public SectionStyle set(String fieldName, Object value) {
    return (SectionStyle) super.set(fieldName, value);
  }

  @Override
  public SectionStyle clone() {
    return (SectionStyle) super.clone();
  }

}
