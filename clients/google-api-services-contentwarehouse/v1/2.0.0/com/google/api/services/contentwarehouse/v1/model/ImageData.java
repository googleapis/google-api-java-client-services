/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This defines the per-doc data which is extracted from thumbnails and propagated over to indexing.
 * It contains all information that can be used for restricts. Next tag id: 128
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImageData extends com.google.api.client.json.GenericJson {

  /**
   * Warning: adaboost_image_feature_porn* and imageFeaturePorn fields are DEPRECATED in favor of
   * brain_porn_scores. Please do not use them. Contact safesearch@ for transition advice.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float adaboostImageFeaturePorn;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer adaboostImageFeaturePornMinorVersion;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer adaboostImageFeaturePornVersion;

  /**
   * Present for animated images only: additional animatated image perdoc data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageRepositoryAnimatedImagePerdocData animatedImageData;

  /**
   * A [0..1] SafeSearch scores based on image pixels, using Google Brain: porn, csai, violence,
   * medical, and spoof. For porn only, if available prefer final_porn_score as it should be more
   * precise than brain_porn_scores.porn_score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageSafesearchContentBrainPornAnnotation brainPornScores;

  /**
   * A string that indicates the version of SafeSearch classifier used to compute brain_porn_scores.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String brainPornScoresVersion;

  /**
   * This is the image docid used in image search. For ImageData protos coming from
   * Alexandria/Freshdocs, this is a 'required' field that MUST be populated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger canonicalDocid;

  /**
   * A score in (0, 1] to indicate how likely this image is considered as a click magnet based on
   * clicks received from bad queries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float clickMagnetScore;

  /**
   * Image content based classifier scores.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float clipartDetectorScore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer clipartDetectorVersion;

  /**
   * Like is_visible, this is a property of the (web-doc, img_url) pair not just the image. A high
   * codomain_strength indicates high confidence based on collected stats that the image is hosted
   * on a companion domain. If not enough stats are available for codomain strength, this field may
   * be absent in ImageData, and hence the CompositeDoc. Do not place negative values here.
   * Permitted values range between 0 and image_quality_codomain::kMaxCodomainStrength defined in
   * //image/quality/codomain/codomain-stats-utils.h.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer codomainStrength;

  /**
   * Colorness scores for the image. Each score represents the amount of a particular color in the
   * image. At the current time, there are 12 colors, so there should always be 0 or 12 values in
   * this array. The 12 colors are black, blue, brown, gray, green, orange, pink, purple, red, teal,
   * white, yellow. The convention is that the scores are stored in alphabetical order, so the first
   * score is black, and the last score is yellow.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> colorScore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer colorScoreVersion;

  /**
   * Fraction of the image that contains pixels over a certain saturation threshold: can be used to
   * determine if the image is grayscale or not.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float coloredPixelsFrac;

  /**
   * Earliest known crawl time among all neardups of this image (go/imagecontentage).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer contentFirstCrawlTime;

  /**
   * Corpus scoring info for images indexed through Amarna.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CorpusSelectionInfo> corpusSelectionInfo;

  static {
    // hack to force ProGuard to consider CorpusSelectionInfo used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CorpusSelectionInfo.class);
  }

  /**
   * The content-aware cropping information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ContentAwareCropsIndexing crops;

  /**
   * DeepCrop based cropping information. See go/creatism/deepcrop for details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DeepCropIndexing deepCrop;

  /**
   * Productionized Deep Image Engagingness score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageRepositoryDeepImageEngagingnessOutput deepImageEngagingness;

  /**
   * VSS generated deep tags for shopping images.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CommerceDatastoreImageDeepTags deepTags;

  /**
   * fingerprint(non-canonicalized absolute image url) This is *not* the image docid. Use
   * canonical_docid instead. For ImageData protos coming from Alexandria/Freshdocs, this is a
   * 'required' field that MUST be populated. But once again, this is very likely NOT something you
   * need. Use canonical_docid instead.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger docid;

  /**
   * the EXIF/IPTC metadata
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageExifImageEmbeddedMetadata embeddedMetadata;

  /**
   * The thumbnail is guaranteed to be kept in the serving system until the expiration timestamp has
   * passed, in microseconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long expirationTimestamp;

  /**
   * The EXIF generated by photos backend team's (more specifically FIFE's) thumbnailer library.
   * This exif model is more comprehensive since a dedicated team is constantly improving it and
   * adding new fields over time. This is currently populated by moonshine for selected corpora.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PhotosImageMetadata extendedExif;

  /**
   * Properties used in featured imagesearch project. inspiration_score indicates how well an image
   * is related to products, or how inspirational it is.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageMonetizationFeaturedImageProperties featuredImageProp;

  /**
   * True file format (not extension).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fileFormat;

  /**
   * A [0..1] porn score based on some image-level features (like content score, referrer
   * statistics, navboost queries, etc.). See class RiflePornScorer for more details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float finalPornScore;

  /**
   * A string that indicates the version of SafeSearch classifier used to compute final_porn_score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String finalPornScoreVersion;

  /**
   * Earliest known timestamp about this image. Today, this is the timestamp when the content key
   * was generated for this image. The time is in seconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer firstCrawlTime;

  /**
   * The first time this image URL was seen on the containing web page. Only set during web
   * indexing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer firstTimeSeenOnDocSec;

  /**
   * Use image_perdoc.h to read/write 'flags'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer flags;

  /**
   * The output of various features generated by the Flow framework, most importantly data from
   * Starburst (go/starburst). Do NOT interact with the internals of this proto since they may
   * change over time. Instead, use the existing interfaces that consume FlowProtoProd's directly,
   * e.g., image/mustang/content/image_content_distance.h For more info, please contact image-
   * content-core@.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageContentFlowProtoProd flowOutput;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float h2c;

  /**
   * 'Hovers to Impressions' and 'Hovers to Clicks' ratios for an image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float h2i;

  /**
   * Hate logo detections from the VSS logo_recognition module.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageUnderstandingIndexingAnnotationGroup hateLogoDetection;

  /**
   * Height
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer height;

  /**
   * Image Content Scored per query boosts. Currently this is filled by the pamir algorithm and
   * populates the pamir_section.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageContentQueryBoost imageContentQueryBoost;

  /**
   * A set of query fingerprints and confidence scores. There queries are supposed to be relevant to
   * the image with high confidence.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageExactBoost imageExactBoost;

  /**
   * Indicates license info of this image, which will tell image search users how to use this image
   * legally.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageSearchImageLicenseInfo imageLicenseInfo;

  /**
   * Regions detected within the image (go/images-region-search-edd). Regions contain bounding boxes
   * circumscribing objects of interest in the image, along with object labels. Regions may overlap.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageRegionsImageRegions imageRegions;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer imagerank;

  /**
   * IIP in scope signal (go/iip). Set to true if the image is annotated with any iip_in_scope
   * entities (go/iukp-trust-v2).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isIipInScope;

  /**
   * If this image was not selected for indexing by imagesearch, these fields say so and explain
   * why.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isIndexedByImagesearch;

  /**
   * True if the original image contains multiple frames (e.g., for animated or stereoscopic
   * images).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isMultiframe;

  /**
   * Field to indicate the image is unwanted for search index. The data is propagated from amarna to
   * alexandria to be annotated in the cdoc. Refer to image/repository/proto/unwanted_content.proto
   * for more info.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isUnwantedContent;

  /**
   * True if the image is inlined on the page (typicially via ) or false if the image is linked to
   * (via an href).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isVisible;

  /**
   * Fraction of image covered by the largest face (should match largestFaceFraction, but without
   * scaling). In perdocs, is set only if numberFaces > 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float largestFaceFrac;

  /**
   * Fraction of image covered by the largest face, scaled by 1000. Warning: Is DEPRECATED in favor
   * of largest_face_frac. Do not use.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer largestFaceFraction;

  /**
   * Most recent timestamp in seconds when this URL was crawled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer lastCrawlTime;

  /**
   * Indicates the web-master opt-in state of this image, and will be used for Google products to
   * decide usage rights like showing large previews.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String licensedWebImagesOptInState;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float lineartDetectorScore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer lineartDetectorVersion;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageDataMultibangEntities multibangKgEntities;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nearDupFeatures;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> nearDupFeaturesSmall;

  /**
   * The following fields contain information about a smaller and less powerful version of the hash,
   * needed for neardup retrieval. A compressed and an encoded version of the small hash are stored
   * below. The smaller hash may have a few variants to increase recall. NOTE: This hash is
   * generated by V2 hash computation. A compressed version of the small hash. Currently, a 4-byte
   * fingerprint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer nearDupFeaturesSmallVersion;

  /**
   * Image content derived data used for finding image near dups. NOTE: This hash is generated by V1
   * hash computation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer nearDupFeaturesVersion;

  /**
   * Productionized Nima AVA score. Both this field and nima_vq were added on the top of
   * nima_ava_score and nima_vq_score because the signals are already integrated with Batch Amarna
   * in image/repository/schema/global_output_tags.h using NimaOutput.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageRepositoryNimaOutput nimaAva;

  /**
   * Productionized Nima VQ score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageRepositoryNimaOutput nimaVq;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> noIndexReason;

  /**
   * Number of faces detected in the image
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numberFaces;

  /**
   * Pruned OCR Goodoc see vss_aksara_ocr_util.h for the fields copied.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoodocDocument ocrGoodoc;

  /**
   * Ocr detected by ocr_taser module.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoodocDocument ocrTaser;

  /**
   * Text lines detected by OCR engine.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<OcrPhotoTextBox> ocrTextboxes;

  /**
   * For an image not explicitly visible on this page, the following url is the one which most
   * closely matches it.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String onPageAlternateUrl;

  /**
   * Encodes face number and largest face frac into a small package for storage in mustang. This is
   * calculated directly from FaceDetectionResult.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private FaceIndexing packedFullFaceInfo;

  /**
   * Contains person attributes from the LookNet-Person model and the Style AI Iconic Person Scorer
   * for the most iconic person in a style image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LensDiscoveryStylePersonAttributes personAttributes;

  /**
   * Contains person detection result.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LensDiscoveryStylePersonDetectionSignals personDetectionSignals;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float photoDetectorScore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer photoDetectorVersion;

  /**
   * Used by the segindexer for combined www+image indices.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PornFlagData pornFlagData;

  /**
   * Restricts computed before building a Mustang index.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PrecomputedRestricts precomputedRestricts;

  /**
   * Rank in near-dup cluster (go/image-rank-in-neardup-cluster). The rank is 1-indexed: rank 1 is
   * the best.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rankInNeardupCluster;

  /**
   * A string representation of all the restricts associated with this image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> restrictStrings;

  /**
   * CSV list of user agents for which this image should be considered roboted. Note: All images are
   * crawled using googlebot-images, this exists for clients that require additional restrictions
   * beyond googlebot-images such as news.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String robotedAgents;

  /**
   * The Shoppable Images product information to be annotated in the Cdoc. All fields will be
   * populated except the product location bounding box.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImageRepositoryShoppingProductInformation shoppingProductInformation;

  /**
   * Size in bytes of original (non-thumbnail)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer size;

  /**
   * Web docids that correspond to high ranked smeared landing pages for this image. Used for
   * conditional retrieval of actionable landing pages for image search.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.util.List<java.math.BigInteger> smearedTopWebLandingPageDocids;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<SmearedWebLandingPageEntry> smearedTopWebLandingPages;

  /**
   * Aesthetics score of a style image.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LensDiscoveryStyleAestheticsScoreSignals styleAestheticsScore;

  /**
   * Prediction of a style image type: Stage, Stock, Street or Outfits.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LensDiscoveryStyleStyleImageTypeSignals styleImageType;

  /**
   * This field is for testing purposes, more information in go/media-dirt-2022.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer testingScore;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer thumbHeight;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer thumbSize;

  /**
   * Thumbnail width.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer thumbWidth;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ImageDataThumbnail> thumbnail;

  /**
   * Time in seconds since epoch after which this image should be considered unavailable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long unavailableAfterSecs;

  /**
   * Canonicalized absolute image url.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String url;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float whiteBackgroundScore;

  /**
   * Image is likely an object on a white background (value on [0,1]).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer whiteBackgroundScoreVersion;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer width;

  /**
   * Warning: adaboost_image_feature_porn* and imageFeaturePorn fields are DEPRECATED in favor of
   * brain_porn_scores. Please do not use them. Contact safesearch@ for transition advice.
   * @return value or {@code null} for none
   */
  public java.lang.Float getAdaboostImageFeaturePorn() {
    return adaboostImageFeaturePorn;
  }

  /**
   * Warning: adaboost_image_feature_porn* and imageFeaturePorn fields are DEPRECATED in favor of
   * brain_porn_scores. Please do not use them. Contact safesearch@ for transition advice.
   * @param adaboostImageFeaturePorn adaboostImageFeaturePorn or {@code null} for none
   */
  public ImageData setAdaboostImageFeaturePorn(java.lang.Float adaboostImageFeaturePorn) {
    this.adaboostImageFeaturePorn = adaboostImageFeaturePorn;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAdaboostImageFeaturePornMinorVersion() {
    return adaboostImageFeaturePornMinorVersion;
  }

  /**
   * @param adaboostImageFeaturePornMinorVersion adaboostImageFeaturePornMinorVersion or {@code null} for none
   */
  public ImageData setAdaboostImageFeaturePornMinorVersion(java.lang.Integer adaboostImageFeaturePornMinorVersion) {
    this.adaboostImageFeaturePornMinorVersion = adaboostImageFeaturePornMinorVersion;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAdaboostImageFeaturePornVersion() {
    return adaboostImageFeaturePornVersion;
  }

  /**
   * @param adaboostImageFeaturePornVersion adaboostImageFeaturePornVersion or {@code null} for none
   */
  public ImageData setAdaboostImageFeaturePornVersion(java.lang.Integer adaboostImageFeaturePornVersion) {
    this.adaboostImageFeaturePornVersion = adaboostImageFeaturePornVersion;
    return this;
  }

  /**
   * Present for animated images only: additional animatated image perdoc data.
   * @return value or {@code null} for none
   */
  public ImageRepositoryAnimatedImagePerdocData getAnimatedImageData() {
    return animatedImageData;
  }

  /**
   * Present for animated images only: additional animatated image perdoc data.
   * @param animatedImageData animatedImageData or {@code null} for none
   */
  public ImageData setAnimatedImageData(ImageRepositoryAnimatedImagePerdocData animatedImageData) {
    this.animatedImageData = animatedImageData;
    return this;
  }

  /**
   * A [0..1] SafeSearch scores based on image pixels, using Google Brain: porn, csai, violence,
   * medical, and spoof. For porn only, if available prefer final_porn_score as it should be more
   * precise than brain_porn_scores.porn_score.
   * @return value or {@code null} for none
   */
  public ImageSafesearchContentBrainPornAnnotation getBrainPornScores() {
    return brainPornScores;
  }

  /**
   * A [0..1] SafeSearch scores based on image pixels, using Google Brain: porn, csai, violence,
   * medical, and spoof. For porn only, if available prefer final_porn_score as it should be more
   * precise than brain_porn_scores.porn_score.
   * @param brainPornScores brainPornScores or {@code null} for none
   */
  public ImageData setBrainPornScores(ImageSafesearchContentBrainPornAnnotation brainPornScores) {
    this.brainPornScores = brainPornScores;
    return this;
  }

  /**
   * A string that indicates the version of SafeSearch classifier used to compute brain_porn_scores.
   * @return value or {@code null} for none
   */
  public java.lang.String getBrainPornScoresVersion() {
    return brainPornScoresVersion;
  }

  /**
   * A string that indicates the version of SafeSearch classifier used to compute brain_porn_scores.
   * @param brainPornScoresVersion brainPornScoresVersion or {@code null} for none
   */
  public ImageData setBrainPornScoresVersion(java.lang.String brainPornScoresVersion) {
    this.brainPornScoresVersion = brainPornScoresVersion;
    return this;
  }

  /**
   * This is the image docid used in image search. For ImageData protos coming from
   * Alexandria/Freshdocs, this is a 'required' field that MUST be populated.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getCanonicalDocid() {
    return canonicalDocid;
  }

  /**
   * This is the image docid used in image search. For ImageData protos coming from
   * Alexandria/Freshdocs, this is a 'required' field that MUST be populated.
   * @param canonicalDocid canonicalDocid or {@code null} for none
   */
  public ImageData setCanonicalDocid(java.math.BigInteger canonicalDocid) {
    this.canonicalDocid = canonicalDocid;
    return this;
  }

  /**
   * A score in (0, 1] to indicate how likely this image is considered as a click magnet based on
   * clicks received from bad queries.
   * @return value or {@code null} for none
   */
  public java.lang.Float getClickMagnetScore() {
    return clickMagnetScore;
  }

  /**
   * A score in (0, 1] to indicate how likely this image is considered as a click magnet based on
   * clicks received from bad queries.
   * @param clickMagnetScore clickMagnetScore or {@code null} for none
   */
  public ImageData setClickMagnetScore(java.lang.Float clickMagnetScore) {
    this.clickMagnetScore = clickMagnetScore;
    return this;
  }

  /**
   * Image content based classifier scores.
   * @return value or {@code null} for none
   */
  public java.lang.Float getClipartDetectorScore() {
    return clipartDetectorScore;
  }

  /**
   * Image content based classifier scores.
   * @param clipartDetectorScore clipartDetectorScore or {@code null} for none
   */
  public ImageData setClipartDetectorScore(java.lang.Float clipartDetectorScore) {
    this.clipartDetectorScore = clipartDetectorScore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getClipartDetectorVersion() {
    return clipartDetectorVersion;
  }

  /**
   * @param clipartDetectorVersion clipartDetectorVersion or {@code null} for none
   */
  public ImageData setClipartDetectorVersion(java.lang.Integer clipartDetectorVersion) {
    this.clipartDetectorVersion = clipartDetectorVersion;
    return this;
  }

  /**
   * Like is_visible, this is a property of the (web-doc, img_url) pair not just the image. A high
   * codomain_strength indicates high confidence based on collected stats that the image is hosted
   * on a companion domain. If not enough stats are available for codomain strength, this field may
   * be absent in ImageData, and hence the CompositeDoc. Do not place negative values here.
   * Permitted values range between 0 and image_quality_codomain::kMaxCodomainStrength defined in
   * //image/quality/codomain/codomain-stats-utils.h.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCodomainStrength() {
    return codomainStrength;
  }

  /**
   * Like is_visible, this is a property of the (web-doc, img_url) pair not just the image. A high
   * codomain_strength indicates high confidence based on collected stats that the image is hosted
   * on a companion domain. If not enough stats are available for codomain strength, this field may
   * be absent in ImageData, and hence the CompositeDoc. Do not place negative values here.
   * Permitted values range between 0 and image_quality_codomain::kMaxCodomainStrength defined in
   * //image/quality/codomain/codomain-stats-utils.h.
   * @param codomainStrength codomainStrength or {@code null} for none
   */
  public ImageData setCodomainStrength(java.lang.Integer codomainStrength) {
    this.codomainStrength = codomainStrength;
    return this;
  }

  /**
   * Colorness scores for the image. Each score represents the amount of a particular color in the
   * image. At the current time, there are 12 colors, so there should always be 0 or 12 values in
   * this array. The 12 colors are black, blue, brown, gray, green, orange, pink, purple, red, teal,
   * white, yellow. The convention is that the scores are stored in alphabetical order, so the first
   * score is black, and the last score is yellow.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getColorScore() {
    return colorScore;
  }

  /**
   * Colorness scores for the image. Each score represents the amount of a particular color in the
   * image. At the current time, there are 12 colors, so there should always be 0 or 12 values in
   * this array. The 12 colors are black, blue, brown, gray, green, orange, pink, purple, red, teal,
   * white, yellow. The convention is that the scores are stored in alphabetical order, so the first
   * score is black, and the last score is yellow.
   * @param colorScore colorScore or {@code null} for none
   */
  public ImageData setColorScore(java.util.List<java.lang.Float> colorScore) {
    this.colorScore = colorScore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getColorScoreVersion() {
    return colorScoreVersion;
  }

  /**
   * @param colorScoreVersion colorScoreVersion or {@code null} for none
   */
  public ImageData setColorScoreVersion(java.lang.Integer colorScoreVersion) {
    this.colorScoreVersion = colorScoreVersion;
    return this;
  }

  /**
   * Fraction of the image that contains pixels over a certain saturation threshold: can be used to
   * determine if the image is grayscale or not.
   * @return value or {@code null} for none
   */
  public java.lang.Float getColoredPixelsFrac() {
    return coloredPixelsFrac;
  }

  /**
   * Fraction of the image that contains pixels over a certain saturation threshold: can be used to
   * determine if the image is grayscale or not.
   * @param coloredPixelsFrac coloredPixelsFrac or {@code null} for none
   */
  public ImageData setColoredPixelsFrac(java.lang.Float coloredPixelsFrac) {
    this.coloredPixelsFrac = coloredPixelsFrac;
    return this;
  }

  /**
   * Earliest known crawl time among all neardups of this image (go/imagecontentage).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getContentFirstCrawlTime() {
    return contentFirstCrawlTime;
  }

  /**
   * Earliest known crawl time among all neardups of this image (go/imagecontentage).
   * @param contentFirstCrawlTime contentFirstCrawlTime or {@code null} for none
   */
  public ImageData setContentFirstCrawlTime(java.lang.Integer contentFirstCrawlTime) {
    this.contentFirstCrawlTime = contentFirstCrawlTime;
    return this;
  }

  /**
   * Corpus scoring info for images indexed through Amarna.
   * @return value or {@code null} for none
   */
  public java.util.List<CorpusSelectionInfo> getCorpusSelectionInfo() {
    return corpusSelectionInfo;
  }

  /**
   * Corpus scoring info for images indexed through Amarna.
   * @param corpusSelectionInfo corpusSelectionInfo or {@code null} for none
   */
  public ImageData setCorpusSelectionInfo(java.util.List<CorpusSelectionInfo> corpusSelectionInfo) {
    this.corpusSelectionInfo = corpusSelectionInfo;
    return this;
  }

  /**
   * The content-aware cropping information.
   * @return value or {@code null} for none
   */
  public ContentAwareCropsIndexing getCrops() {
    return crops;
  }

  /**
   * The content-aware cropping information.
   * @param crops crops or {@code null} for none
   */
  public ImageData setCrops(ContentAwareCropsIndexing crops) {
    this.crops = crops;
    return this;
  }

  /**
   * DeepCrop based cropping information. See go/creatism/deepcrop for details.
   * @return value or {@code null} for none
   */
  public DeepCropIndexing getDeepCrop() {
    return deepCrop;
  }

  /**
   * DeepCrop based cropping information. See go/creatism/deepcrop for details.
   * @param deepCrop deepCrop or {@code null} for none
   */
  public ImageData setDeepCrop(DeepCropIndexing deepCrop) {
    this.deepCrop = deepCrop;
    return this;
  }

  /**
   * Productionized Deep Image Engagingness score.
   * @return value or {@code null} for none
   */
  public ImageRepositoryDeepImageEngagingnessOutput getDeepImageEngagingness() {
    return deepImageEngagingness;
  }

  /**
   * Productionized Deep Image Engagingness score.
   * @param deepImageEngagingness deepImageEngagingness or {@code null} for none
   */
  public ImageData setDeepImageEngagingness(ImageRepositoryDeepImageEngagingnessOutput deepImageEngagingness) {
    this.deepImageEngagingness = deepImageEngagingness;
    return this;
  }

  /**
   * VSS generated deep tags for shopping images.
   * @return value or {@code null} for none
   */
  public CommerceDatastoreImageDeepTags getDeepTags() {
    return deepTags;
  }

  /**
   * VSS generated deep tags for shopping images.
   * @param deepTags deepTags or {@code null} for none
   */
  public ImageData setDeepTags(CommerceDatastoreImageDeepTags deepTags) {
    this.deepTags = deepTags;
    return this;
  }

  /**
   * fingerprint(non-canonicalized absolute image url) This is *not* the image docid. Use
   * canonical_docid instead. For ImageData protos coming from Alexandria/Freshdocs, this is a
   * 'required' field that MUST be populated. But once again, this is very likely NOT something you
   * need. Use canonical_docid instead.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getDocid() {
    return docid;
  }

  /**
   * fingerprint(non-canonicalized absolute image url) This is *not* the image docid. Use
   * canonical_docid instead. For ImageData protos coming from Alexandria/Freshdocs, this is a
   * 'required' field that MUST be populated. But once again, this is very likely NOT something you
   * need. Use canonical_docid instead.
   * @param docid docid or {@code null} for none
   */
  public ImageData setDocid(java.math.BigInteger docid) {
    this.docid = docid;
    return this;
  }

  /**
   * the EXIF/IPTC metadata
   * @return value or {@code null} for none
   */
  public ImageExifImageEmbeddedMetadata getEmbeddedMetadata() {
    return embeddedMetadata;
  }

  /**
   * the EXIF/IPTC metadata
   * @param embeddedMetadata embeddedMetadata or {@code null} for none
   */
  public ImageData setEmbeddedMetadata(ImageExifImageEmbeddedMetadata embeddedMetadata) {
    this.embeddedMetadata = embeddedMetadata;
    return this;
  }

  /**
   * The thumbnail is guaranteed to be kept in the serving system until the expiration timestamp has
   * passed, in microseconds.
   * @return value or {@code null} for none
   */
  public java.lang.Long getExpirationTimestamp() {
    return expirationTimestamp;
  }

  /**
   * The thumbnail is guaranteed to be kept in the serving system until the expiration timestamp has
   * passed, in microseconds.
   * @param expirationTimestamp expirationTimestamp or {@code null} for none
   */
  public ImageData setExpirationTimestamp(java.lang.Long expirationTimestamp) {
    this.expirationTimestamp = expirationTimestamp;
    return this;
  }

  /**
   * The EXIF generated by photos backend team's (more specifically FIFE's) thumbnailer library.
   * This exif model is more comprehensive since a dedicated team is constantly improving it and
   * adding new fields over time. This is currently populated by moonshine for selected corpora.
   * @return value or {@code null} for none
   */
  public PhotosImageMetadata getExtendedExif() {
    return extendedExif;
  }

  /**
   * The EXIF generated by photos backend team's (more specifically FIFE's) thumbnailer library.
   * This exif model is more comprehensive since a dedicated team is constantly improving it and
   * adding new fields over time. This is currently populated by moonshine for selected corpora.
   * @param extendedExif extendedExif or {@code null} for none
   */
  public ImageData setExtendedExif(PhotosImageMetadata extendedExif) {
    this.extendedExif = extendedExif;
    return this;
  }

  /**
   * Properties used in featured imagesearch project. inspiration_score indicates how well an image
   * is related to products, or how inspirational it is.
   * @return value or {@code null} for none
   */
  public ImageMonetizationFeaturedImageProperties getFeaturedImageProp() {
    return featuredImageProp;
  }

  /**
   * Properties used in featured imagesearch project. inspiration_score indicates how well an image
   * is related to products, or how inspirational it is.
   * @param featuredImageProp featuredImageProp or {@code null} for none
   */
  public ImageData setFeaturedImageProp(ImageMonetizationFeaturedImageProperties featuredImageProp) {
    this.featuredImageProp = featuredImageProp;
    return this;
  }

  /**
   * True file format (not extension).
   * @return value or {@code null} for none
   */
  public java.lang.String getFileFormat() {
    return fileFormat;
  }

  /**
   * True file format (not extension).
   * @param fileFormat fileFormat or {@code null} for none
   */
  public ImageData setFileFormat(java.lang.String fileFormat) {
    this.fileFormat = fileFormat;
    return this;
  }

  /**
   * A [0..1] porn score based on some image-level features (like content score, referrer
   * statistics, navboost queries, etc.). See class RiflePornScorer for more details.
   * @return value or {@code null} for none
   */
  public java.lang.Float getFinalPornScore() {
    return finalPornScore;
  }

  /**
   * A [0..1] porn score based on some image-level features (like content score, referrer
   * statistics, navboost queries, etc.). See class RiflePornScorer for more details.
   * @param finalPornScore finalPornScore or {@code null} for none
   */
  public ImageData setFinalPornScore(java.lang.Float finalPornScore) {
    this.finalPornScore = finalPornScore;
    return this;
  }

  /**
   * A string that indicates the version of SafeSearch classifier used to compute final_porn_score.
   * @return value or {@code null} for none
   */
  public java.lang.String getFinalPornScoreVersion() {
    return finalPornScoreVersion;
  }

  /**
   * A string that indicates the version of SafeSearch classifier used to compute final_porn_score.
   * @param finalPornScoreVersion finalPornScoreVersion or {@code null} for none
   */
  public ImageData setFinalPornScoreVersion(java.lang.String finalPornScoreVersion) {
    this.finalPornScoreVersion = finalPornScoreVersion;
    return this;
  }

  /**
   * Earliest known timestamp about this image. Today, this is the timestamp when the content key
   * was generated for this image. The time is in seconds.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFirstCrawlTime() {
    return firstCrawlTime;
  }

  /**
   * Earliest known timestamp about this image. Today, this is the timestamp when the content key
   * was generated for this image. The time is in seconds.
   * @param firstCrawlTime firstCrawlTime or {@code null} for none
   */
  public ImageData setFirstCrawlTime(java.lang.Integer firstCrawlTime) {
    this.firstCrawlTime = firstCrawlTime;
    return this;
  }

  /**
   * The first time this image URL was seen on the containing web page. Only set during web
   * indexing.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFirstTimeSeenOnDocSec() {
    return firstTimeSeenOnDocSec;
  }

  /**
   * The first time this image URL was seen on the containing web page. Only set during web
   * indexing.
   * @param firstTimeSeenOnDocSec firstTimeSeenOnDocSec or {@code null} for none
   */
  public ImageData setFirstTimeSeenOnDocSec(java.lang.Integer firstTimeSeenOnDocSec) {
    this.firstTimeSeenOnDocSec = firstTimeSeenOnDocSec;
    return this;
  }

  /**
   * Use image_perdoc.h to read/write 'flags'.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFlags() {
    return flags;
  }

  /**
   * Use image_perdoc.h to read/write 'flags'.
   * @param flags flags or {@code null} for none
   */
  public ImageData setFlags(java.lang.Integer flags) {
    this.flags = flags;
    return this;
  }

  /**
   * The output of various features generated by the Flow framework, most importantly data from
   * Starburst (go/starburst). Do NOT interact with the internals of this proto since they may
   * change over time. Instead, use the existing interfaces that consume FlowProtoProd's directly,
   * e.g., image/mustang/content/image_content_distance.h For more info, please contact image-
   * content-core@.
   * @return value or {@code null} for none
   */
  public ImageContentFlowProtoProd getFlowOutput() {
    return flowOutput;
  }

  /**
   * The output of various features generated by the Flow framework, most importantly data from
   * Starburst (go/starburst). Do NOT interact with the internals of this proto since they may
   * change over time. Instead, use the existing interfaces that consume FlowProtoProd's directly,
   * e.g., image/mustang/content/image_content_distance.h For more info, please contact image-
   * content-core@.
   * @param flowOutput flowOutput or {@code null} for none
   */
  public ImageData setFlowOutput(ImageContentFlowProtoProd flowOutput) {
    this.flowOutput = flowOutput;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getH2c() {
    return h2c;
  }

  /**
   * @param h2c h2c or {@code null} for none
   */
  public ImageData setH2c(java.lang.Float h2c) {
    this.h2c = h2c;
    return this;
  }

  /**
   * 'Hovers to Impressions' and 'Hovers to Clicks' ratios for an image.
   * @return value or {@code null} for none
   */
  public java.lang.Float getH2i() {
    return h2i;
  }

  /**
   * 'Hovers to Impressions' and 'Hovers to Clicks' ratios for an image.
   * @param h2i h2i or {@code null} for none
   */
  public ImageData setH2i(java.lang.Float h2i) {
    this.h2i = h2i;
    return this;
  }

  /**
   * Hate logo detections from the VSS logo_recognition module.
   * @return value or {@code null} for none
   */
  public ImageUnderstandingIndexingAnnotationGroup getHateLogoDetection() {
    return hateLogoDetection;
  }

  /**
   * Hate logo detections from the VSS logo_recognition module.
   * @param hateLogoDetection hateLogoDetection or {@code null} for none
   */
  public ImageData setHateLogoDetection(ImageUnderstandingIndexingAnnotationGroup hateLogoDetection) {
    this.hateLogoDetection = hateLogoDetection;
    return this;
  }

  /**
   * Height
   * @return value or {@code null} for none
   */
  public java.lang.Integer getHeight() {
    return height;
  }

  /**
   * Height
   * @param height height or {@code null} for none
   */
  public ImageData setHeight(java.lang.Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Image Content Scored per query boosts. Currently this is filled by the pamir algorithm and
   * populates the pamir_section.
   * @return value or {@code null} for none
   */
  public ImageContentQueryBoost getImageContentQueryBoost() {
    return imageContentQueryBoost;
  }

  /**
   * Image Content Scored per query boosts. Currently this is filled by the pamir algorithm and
   * populates the pamir_section.
   * @param imageContentQueryBoost imageContentQueryBoost or {@code null} for none
   */
  public ImageData setImageContentQueryBoost(ImageContentQueryBoost imageContentQueryBoost) {
    this.imageContentQueryBoost = imageContentQueryBoost;
    return this;
  }

  /**
   * A set of query fingerprints and confidence scores. There queries are supposed to be relevant to
   * the image with high confidence.
   * @return value or {@code null} for none
   */
  public ImageExactBoost getImageExactBoost() {
    return imageExactBoost;
  }

  /**
   * A set of query fingerprints and confidence scores. There queries are supposed to be relevant to
   * the image with high confidence.
   * @param imageExactBoost imageExactBoost or {@code null} for none
   */
  public ImageData setImageExactBoost(ImageExactBoost imageExactBoost) {
    this.imageExactBoost = imageExactBoost;
    return this;
  }

  /**
   * Indicates license info of this image, which will tell image search users how to use this image
   * legally.
   * @return value or {@code null} for none
   */
  public ImageSearchImageLicenseInfo getImageLicenseInfo() {
    return imageLicenseInfo;
  }

  /**
   * Indicates license info of this image, which will tell image search users how to use this image
   * legally.
   * @param imageLicenseInfo imageLicenseInfo or {@code null} for none
   */
  public ImageData setImageLicenseInfo(ImageSearchImageLicenseInfo imageLicenseInfo) {
    this.imageLicenseInfo = imageLicenseInfo;
    return this;
  }

  /**
   * Regions detected within the image (go/images-region-search-edd). Regions contain bounding boxes
   * circumscribing objects of interest in the image, along with object labels. Regions may overlap.
   * @return value or {@code null} for none
   */
  public ImageRegionsImageRegions getImageRegions() {
    return imageRegions;
  }

  /**
   * Regions detected within the image (go/images-region-search-edd). Regions contain bounding boxes
   * circumscribing objects of interest in the image, along with object labels. Regions may overlap.
   * @param imageRegions imageRegions or {@code null} for none
   */
  public ImageData setImageRegions(ImageRegionsImageRegions imageRegions) {
    this.imageRegions = imageRegions;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getImagerank() {
    return imagerank;
  }

  /**
   * @param imagerank imagerank or {@code null} for none
   */
  public ImageData setImagerank(java.lang.Integer imagerank) {
    this.imagerank = imagerank;
    return this;
  }

  /**
   * IIP in scope signal (go/iip). Set to true if the image is annotated with any iip_in_scope
   * entities (go/iukp-trust-v2).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsIipInScope() {
    return isIipInScope;
  }

  /**
   * IIP in scope signal (go/iip). Set to true if the image is annotated with any iip_in_scope
   * entities (go/iukp-trust-v2).
   * @param isIipInScope isIipInScope or {@code null} for none
   */
  public ImageData setIsIipInScope(java.lang.Boolean isIipInScope) {
    this.isIipInScope = isIipInScope;
    return this;
  }

  /**
   * If this image was not selected for indexing by imagesearch, these fields say so and explain
   * why.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsIndexedByImagesearch() {
    return isIndexedByImagesearch;
  }

  /**
   * If this image was not selected for indexing by imagesearch, these fields say so and explain
   * why.
   * @param isIndexedByImagesearch isIndexedByImagesearch or {@code null} for none
   */
  public ImageData setIsIndexedByImagesearch(java.lang.Boolean isIndexedByImagesearch) {
    this.isIndexedByImagesearch = isIndexedByImagesearch;
    return this;
  }

  /**
   * True if the original image contains multiple frames (e.g., for animated or stereoscopic
   * images).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsMultiframe() {
    return isMultiframe;
  }

  /**
   * True if the original image contains multiple frames (e.g., for animated or stereoscopic
   * images).
   * @param isMultiframe isMultiframe or {@code null} for none
   */
  public ImageData setIsMultiframe(java.lang.Boolean isMultiframe) {
    this.isMultiframe = isMultiframe;
    return this;
  }

  /**
   * Field to indicate the image is unwanted for search index. The data is propagated from amarna to
   * alexandria to be annotated in the cdoc. Refer to image/repository/proto/unwanted_content.proto
   * for more info.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsUnwantedContent() {
    return isUnwantedContent;
  }

  /**
   * Field to indicate the image is unwanted for search index. The data is propagated from amarna to
   * alexandria to be annotated in the cdoc. Refer to image/repository/proto/unwanted_content.proto
   * for more info.
   * @param isUnwantedContent isUnwantedContent or {@code null} for none
   */
  public ImageData setIsUnwantedContent(java.lang.Boolean isUnwantedContent) {
    this.isUnwantedContent = isUnwantedContent;
    return this;
  }

  /**
   * True if the image is inlined on the page (typicially via ) or false if the image is linked to
   * (via an href).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsVisible() {
    return isVisible;
  }

  /**
   * True if the image is inlined on the page (typicially via ) or false if the image is linked to
   * (via an href).
   * @param isVisible isVisible or {@code null} for none
   */
  public ImageData setIsVisible(java.lang.Boolean isVisible) {
    this.isVisible = isVisible;
    return this;
  }

  /**
   * Fraction of image covered by the largest face (should match largestFaceFraction, but without
   * scaling). In perdocs, is set only if numberFaces > 0.
   * @return value or {@code null} for none
   */
  public java.lang.Float getLargestFaceFrac() {
    return largestFaceFrac;
  }

  /**
   * Fraction of image covered by the largest face (should match largestFaceFraction, but without
   * scaling). In perdocs, is set only if numberFaces > 0.
   * @param largestFaceFrac largestFaceFrac or {@code null} for none
   */
  public ImageData setLargestFaceFrac(java.lang.Float largestFaceFrac) {
    this.largestFaceFrac = largestFaceFrac;
    return this;
  }

  /**
   * Fraction of image covered by the largest face, scaled by 1000. Warning: Is DEPRECATED in favor
   * of largest_face_frac. Do not use.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLargestFaceFraction() {
    return largestFaceFraction;
  }

  /**
   * Fraction of image covered by the largest face, scaled by 1000. Warning: Is DEPRECATED in favor
   * of largest_face_frac. Do not use.
   * @param largestFaceFraction largestFaceFraction or {@code null} for none
   */
  public ImageData setLargestFaceFraction(java.lang.Integer largestFaceFraction) {
    this.largestFaceFraction = largestFaceFraction;
    return this;
  }

  /**
   * Most recent timestamp in seconds when this URL was crawled.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLastCrawlTime() {
    return lastCrawlTime;
  }

  /**
   * Most recent timestamp in seconds when this URL was crawled.
   * @param lastCrawlTime lastCrawlTime or {@code null} for none
   */
  public ImageData setLastCrawlTime(java.lang.Integer lastCrawlTime) {
    this.lastCrawlTime = lastCrawlTime;
    return this;
  }

  /**
   * Indicates the web-master opt-in state of this image, and will be used for Google products to
   * decide usage rights like showing large previews.
   * @return value or {@code null} for none
   */
  public java.lang.String getLicensedWebImagesOptInState() {
    return licensedWebImagesOptInState;
  }

  /**
   * Indicates the web-master opt-in state of this image, and will be used for Google products to
   * decide usage rights like showing large previews.
   * @param licensedWebImagesOptInState licensedWebImagesOptInState or {@code null} for none
   */
  public ImageData setLicensedWebImagesOptInState(java.lang.String licensedWebImagesOptInState) {
    this.licensedWebImagesOptInState = licensedWebImagesOptInState;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getLineartDetectorScore() {
    return lineartDetectorScore;
  }

  /**
   * @param lineartDetectorScore lineartDetectorScore or {@code null} for none
   */
  public ImageData setLineartDetectorScore(java.lang.Float lineartDetectorScore) {
    this.lineartDetectorScore = lineartDetectorScore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLineartDetectorVersion() {
    return lineartDetectorVersion;
  }

  /**
   * @param lineartDetectorVersion lineartDetectorVersion or {@code null} for none
   */
  public ImageData setLineartDetectorVersion(java.lang.Integer lineartDetectorVersion) {
    this.lineartDetectorVersion = lineartDetectorVersion;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public ImageDataMultibangEntities getMultibangKgEntities() {
    return multibangKgEntities;
  }

  /**
   * @param multibangKgEntities multibangKgEntities or {@code null} for none
   */
  public ImageData setMultibangKgEntities(ImageDataMultibangEntities multibangKgEntities) {
    this.multibangKgEntities = multibangKgEntities;
    return this;
  }

  /**
   * @see #decodeNearDupFeatures()
   * @return value or {@code null} for none
   */
  public java.lang.String getNearDupFeatures() {
    return nearDupFeatures;
  }

  /**

   * @see #getNearDupFeatures()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeNearDupFeatures() {
    return com.google.api.client.util.Base64.decodeBase64(nearDupFeatures);
  }

  /**
   * @see #encodeNearDupFeatures()
   * @param nearDupFeatures nearDupFeatures or {@code null} for none
   */
  public ImageData setNearDupFeatures(java.lang.String nearDupFeatures) {
    this.nearDupFeatures = nearDupFeatures;
    return this;
  }

  /**

   * @see #setNearDupFeatures()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public ImageData encodeNearDupFeatures(byte[] nearDupFeatures) {
    this.nearDupFeatures = com.google.api.client.util.Base64.encodeBase64URLSafeString(nearDupFeatures);
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getNearDupFeaturesSmall() {
    return nearDupFeaturesSmall;
  }

  /**
   * @param nearDupFeaturesSmall nearDupFeaturesSmall or {@code null} for none
   */
  public ImageData setNearDupFeaturesSmall(java.util.List<java.lang.String> nearDupFeaturesSmall) {
    this.nearDupFeaturesSmall = nearDupFeaturesSmall;
    return this;
  }

  /**
   * The following fields contain information about a smaller and less powerful version of the hash,
   * needed for neardup retrieval. A compressed and an encoded version of the small hash are stored
   * below. The smaller hash may have a few variants to increase recall. NOTE: This hash is
   * generated by V2 hash computation. A compressed version of the small hash. Currently, a 4-byte
   * fingerprint.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNearDupFeaturesSmallVersion() {
    return nearDupFeaturesSmallVersion;
  }

  /**
   * The following fields contain information about a smaller and less powerful version of the hash,
   * needed for neardup retrieval. A compressed and an encoded version of the small hash are stored
   * below. The smaller hash may have a few variants to increase recall. NOTE: This hash is
   * generated by V2 hash computation. A compressed version of the small hash. Currently, a 4-byte
   * fingerprint.
   * @param nearDupFeaturesSmallVersion nearDupFeaturesSmallVersion or {@code null} for none
   */
  public ImageData setNearDupFeaturesSmallVersion(java.lang.Integer nearDupFeaturesSmallVersion) {
    this.nearDupFeaturesSmallVersion = nearDupFeaturesSmallVersion;
    return this;
  }

  /**
   * Image content derived data used for finding image near dups. NOTE: This hash is generated by V1
   * hash computation.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNearDupFeaturesVersion() {
    return nearDupFeaturesVersion;
  }

  /**
   * Image content derived data used for finding image near dups. NOTE: This hash is generated by V1
   * hash computation.
   * @param nearDupFeaturesVersion nearDupFeaturesVersion or {@code null} for none
   */
  public ImageData setNearDupFeaturesVersion(java.lang.Integer nearDupFeaturesVersion) {
    this.nearDupFeaturesVersion = nearDupFeaturesVersion;
    return this;
  }

  /**
   * Productionized Nima AVA score. Both this field and nima_vq were added on the top of
   * nima_ava_score and nima_vq_score because the signals are already integrated with Batch Amarna
   * in image/repository/schema/global_output_tags.h using NimaOutput.
   * @return value or {@code null} for none
   */
  public ImageRepositoryNimaOutput getNimaAva() {
    return nimaAva;
  }

  /**
   * Productionized Nima AVA score. Both this field and nima_vq were added on the top of
   * nima_ava_score and nima_vq_score because the signals are already integrated with Batch Amarna
   * in image/repository/schema/global_output_tags.h using NimaOutput.
   * @param nimaAva nimaAva or {@code null} for none
   */
  public ImageData setNimaAva(ImageRepositoryNimaOutput nimaAva) {
    this.nimaAva = nimaAva;
    return this;
  }

  /**
   * Productionized Nima VQ score.
   * @return value or {@code null} for none
   */
  public ImageRepositoryNimaOutput getNimaVq() {
    return nimaVq;
  }

  /**
   * Productionized Nima VQ score.
   * @param nimaVq nimaVq or {@code null} for none
   */
  public ImageData setNimaVq(ImageRepositoryNimaOutput nimaVq) {
    this.nimaVq = nimaVq;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getNoIndexReason() {
    return noIndexReason;
  }

  /**
   * @param noIndexReason noIndexReason or {@code null} for none
   */
  public ImageData setNoIndexReason(java.util.List<java.lang.String> noIndexReason) {
    this.noIndexReason = noIndexReason;
    return this;
  }

  /**
   * Number of faces detected in the image
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumberFaces() {
    return numberFaces;
  }

  /**
   * Number of faces detected in the image
   * @param numberFaces numberFaces or {@code null} for none
   */
  public ImageData setNumberFaces(java.lang.Integer numberFaces) {
    this.numberFaces = numberFaces;
    return this;
  }

  /**
   * Pruned OCR Goodoc see vss_aksara_ocr_util.h for the fields copied.
   * @return value or {@code null} for none
   */
  public GoodocDocument getOcrGoodoc() {
    return ocrGoodoc;
  }

  /**
   * Pruned OCR Goodoc see vss_aksara_ocr_util.h for the fields copied.
   * @param ocrGoodoc ocrGoodoc or {@code null} for none
   */
  public ImageData setOcrGoodoc(GoodocDocument ocrGoodoc) {
    this.ocrGoodoc = ocrGoodoc;
    return this;
  }

  /**
   * Ocr detected by ocr_taser module.
   * @return value or {@code null} for none
   */
  public GoodocDocument getOcrTaser() {
    return ocrTaser;
  }

  /**
   * Ocr detected by ocr_taser module.
   * @param ocrTaser ocrTaser or {@code null} for none
   */
  public ImageData setOcrTaser(GoodocDocument ocrTaser) {
    this.ocrTaser = ocrTaser;
    return this;
  }

  /**
   * Text lines detected by OCR engine.
   * @return value or {@code null} for none
   */
  public java.util.List<OcrPhotoTextBox> getOcrTextboxes() {
    return ocrTextboxes;
  }

  /**
   * Text lines detected by OCR engine.
   * @param ocrTextboxes ocrTextboxes or {@code null} for none
   */
  public ImageData setOcrTextboxes(java.util.List<OcrPhotoTextBox> ocrTextboxes) {
    this.ocrTextboxes = ocrTextboxes;
    return this;
  }

  /**
   * For an image not explicitly visible on this page, the following url is the one which most
   * closely matches it.
   * @return value or {@code null} for none
   */
  public java.lang.String getOnPageAlternateUrl() {
    return onPageAlternateUrl;
  }

  /**
   * For an image not explicitly visible on this page, the following url is the one which most
   * closely matches it.
   * @param onPageAlternateUrl onPageAlternateUrl or {@code null} for none
   */
  public ImageData setOnPageAlternateUrl(java.lang.String onPageAlternateUrl) {
    this.onPageAlternateUrl = onPageAlternateUrl;
    return this;
  }

  /**
   * Encodes face number and largest face frac into a small package for storage in mustang. This is
   * calculated directly from FaceDetectionResult.
   * @return value or {@code null} for none
   */
  public FaceIndexing getPackedFullFaceInfo() {
    return packedFullFaceInfo;
  }

  /**
   * Encodes face number and largest face frac into a small package for storage in mustang. This is
   * calculated directly from FaceDetectionResult.
   * @param packedFullFaceInfo packedFullFaceInfo or {@code null} for none
   */
  public ImageData setPackedFullFaceInfo(FaceIndexing packedFullFaceInfo) {
    this.packedFullFaceInfo = packedFullFaceInfo;
    return this;
  }

  /**
   * Contains person attributes from the LookNet-Person model and the Style AI Iconic Person Scorer
   * for the most iconic person in a style image.
   * @return value or {@code null} for none
   */
  public LensDiscoveryStylePersonAttributes getPersonAttributes() {
    return personAttributes;
  }

  /**
   * Contains person attributes from the LookNet-Person model and the Style AI Iconic Person Scorer
   * for the most iconic person in a style image.
   * @param personAttributes personAttributes or {@code null} for none
   */
  public ImageData setPersonAttributes(LensDiscoveryStylePersonAttributes personAttributes) {
    this.personAttributes = personAttributes;
    return this;
  }

  /**
   * Contains person detection result.
   * @return value or {@code null} for none
   */
  public LensDiscoveryStylePersonDetectionSignals getPersonDetectionSignals() {
    return personDetectionSignals;
  }

  /**
   * Contains person detection result.
   * @param personDetectionSignals personDetectionSignals or {@code null} for none
   */
  public ImageData setPersonDetectionSignals(LensDiscoveryStylePersonDetectionSignals personDetectionSignals) {
    this.personDetectionSignals = personDetectionSignals;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getPhotoDetectorScore() {
    return photoDetectorScore;
  }

  /**
   * @param photoDetectorScore photoDetectorScore or {@code null} for none
   */
  public ImageData setPhotoDetectorScore(java.lang.Float photoDetectorScore) {
    this.photoDetectorScore = photoDetectorScore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPhotoDetectorVersion() {
    return photoDetectorVersion;
  }

  /**
   * @param photoDetectorVersion photoDetectorVersion or {@code null} for none
   */
  public ImageData setPhotoDetectorVersion(java.lang.Integer photoDetectorVersion) {
    this.photoDetectorVersion = photoDetectorVersion;
    return this;
  }

  /**
   * Used by the segindexer for combined www+image indices.
   * @return value or {@code null} for none
   */
  public PornFlagData getPornFlagData() {
    return pornFlagData;
  }

  /**
   * Used by the segindexer for combined www+image indices.
   * @param pornFlagData pornFlagData or {@code null} for none
   */
  public ImageData setPornFlagData(PornFlagData pornFlagData) {
    this.pornFlagData = pornFlagData;
    return this;
  }

  /**
   * Restricts computed before building a Mustang index.
   * @return value or {@code null} for none
   */
  public PrecomputedRestricts getPrecomputedRestricts() {
    return precomputedRestricts;
  }

  /**
   * Restricts computed before building a Mustang index.
   * @param precomputedRestricts precomputedRestricts or {@code null} for none
   */
  public ImageData setPrecomputedRestricts(PrecomputedRestricts precomputedRestricts) {
    this.precomputedRestricts = precomputedRestricts;
    return this;
  }

  /**
   * Rank in near-dup cluster (go/image-rank-in-neardup-cluster). The rank is 1-indexed: rank 1 is
   * the best.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRankInNeardupCluster() {
    return rankInNeardupCluster;
  }

  /**
   * Rank in near-dup cluster (go/image-rank-in-neardup-cluster). The rank is 1-indexed: rank 1 is
   * the best.
   * @param rankInNeardupCluster rankInNeardupCluster or {@code null} for none
   */
  public ImageData setRankInNeardupCluster(java.lang.Integer rankInNeardupCluster) {
    this.rankInNeardupCluster = rankInNeardupCluster;
    return this;
  }

  /**
   * A string representation of all the restricts associated with this image.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getRestrictStrings() {
    return restrictStrings;
  }

  /**
   * A string representation of all the restricts associated with this image.
   * @param restrictStrings restrictStrings or {@code null} for none
   */
  public ImageData setRestrictStrings(java.util.List<java.lang.String> restrictStrings) {
    this.restrictStrings = restrictStrings;
    return this;
  }

  /**
   * CSV list of user agents for which this image should be considered roboted. Note: All images are
   * crawled using googlebot-images, this exists for clients that require additional restrictions
   * beyond googlebot-images such as news.
   * @return value or {@code null} for none
   */
  public java.lang.String getRobotedAgents() {
    return robotedAgents;
  }

  /**
   * CSV list of user agents for which this image should be considered roboted. Note: All images are
   * crawled using googlebot-images, this exists for clients that require additional restrictions
   * beyond googlebot-images such as news.
   * @param robotedAgents robotedAgents or {@code null} for none
   */
  public ImageData setRobotedAgents(java.lang.String robotedAgents) {
    this.robotedAgents = robotedAgents;
    return this;
  }

  /**
   * The Shoppable Images product information to be annotated in the Cdoc. All fields will be
   * populated except the product location bounding box.
   * @return value or {@code null} for none
   */
  public ImageRepositoryShoppingProductInformation getShoppingProductInformation() {
    return shoppingProductInformation;
  }

  /**
   * The Shoppable Images product information to be annotated in the Cdoc. All fields will be
   * populated except the product location bounding box.
   * @param shoppingProductInformation shoppingProductInformation or {@code null} for none
   */
  public ImageData setShoppingProductInformation(ImageRepositoryShoppingProductInformation shoppingProductInformation) {
    this.shoppingProductInformation = shoppingProductInformation;
    return this;
  }

  /**
   * Size in bytes of original (non-thumbnail)
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSize() {
    return size;
  }

  /**
   * Size in bytes of original (non-thumbnail)
   * @param size size or {@code null} for none
   */
  public ImageData setSize(java.lang.Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Web docids that correspond to high ranked smeared landing pages for this image. Used for
   * conditional retrieval of actionable landing pages for image search.
   * @return value or {@code null} for none
   */
  public java.util.List<java.math.BigInteger> getSmearedTopWebLandingPageDocids() {
    return smearedTopWebLandingPageDocids;
  }

  /**
   * Web docids that correspond to high ranked smeared landing pages for this image. Used for
   * conditional retrieval of actionable landing pages for image search.
   * @param smearedTopWebLandingPageDocids smearedTopWebLandingPageDocids or {@code null} for none
   */
  public ImageData setSmearedTopWebLandingPageDocids(java.util.List<java.math.BigInteger> smearedTopWebLandingPageDocids) {
    this.smearedTopWebLandingPageDocids = smearedTopWebLandingPageDocids;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<SmearedWebLandingPageEntry> getSmearedTopWebLandingPages() {
    return smearedTopWebLandingPages;
  }

  /**
   * @param smearedTopWebLandingPages smearedTopWebLandingPages or {@code null} for none
   */
  public ImageData setSmearedTopWebLandingPages(java.util.List<SmearedWebLandingPageEntry> smearedTopWebLandingPages) {
    this.smearedTopWebLandingPages = smearedTopWebLandingPages;
    return this;
  }

  /**
   * Aesthetics score of a style image.
   * @return value or {@code null} for none
   */
  public LensDiscoveryStyleAestheticsScoreSignals getStyleAestheticsScore() {
    return styleAestheticsScore;
  }

  /**
   * Aesthetics score of a style image.
   * @param styleAestheticsScore styleAestheticsScore or {@code null} for none
   */
  public ImageData setStyleAestheticsScore(LensDiscoveryStyleAestheticsScoreSignals styleAestheticsScore) {
    this.styleAestheticsScore = styleAestheticsScore;
    return this;
  }

  /**
   * Prediction of a style image type: Stage, Stock, Street or Outfits.
   * @return value or {@code null} for none
   */
  public LensDiscoveryStyleStyleImageTypeSignals getStyleImageType() {
    return styleImageType;
  }

  /**
   * Prediction of a style image type: Stage, Stock, Street or Outfits.
   * @param styleImageType styleImageType or {@code null} for none
   */
  public ImageData setStyleImageType(LensDiscoveryStyleStyleImageTypeSignals styleImageType) {
    this.styleImageType = styleImageType;
    return this;
  }

  /**
   * This field is for testing purposes, more information in go/media-dirt-2022.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTestingScore() {
    return testingScore;
  }

  /**
   * This field is for testing purposes, more information in go/media-dirt-2022.
   * @param testingScore testingScore or {@code null} for none
   */
  public ImageData setTestingScore(java.lang.Integer testingScore) {
    this.testingScore = testingScore;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getThumbHeight() {
    return thumbHeight;
  }

  /**
   * @param thumbHeight thumbHeight or {@code null} for none
   */
  public ImageData setThumbHeight(java.lang.Integer thumbHeight) {
    this.thumbHeight = thumbHeight;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getThumbSize() {
    return thumbSize;
  }

  /**
   * @param thumbSize thumbSize or {@code null} for none
   */
  public ImageData setThumbSize(java.lang.Integer thumbSize) {
    this.thumbSize = thumbSize;
    return this;
  }

  /**
   * Thumbnail width.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getThumbWidth() {
    return thumbWidth;
  }

  /**
   * Thumbnail width.
   * @param thumbWidth thumbWidth or {@code null} for none
   */
  public ImageData setThumbWidth(java.lang.Integer thumbWidth) {
    this.thumbWidth = thumbWidth;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<ImageDataThumbnail> getThumbnail() {
    return thumbnail;
  }

  /**
   * @param thumbnail thumbnail or {@code null} for none
   */
  public ImageData setThumbnail(java.util.List<ImageDataThumbnail> thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Time in seconds since epoch after which this image should be considered unavailable.
   * @return value or {@code null} for none
   */
  public java.lang.Long getUnavailableAfterSecs() {
    return unavailableAfterSecs;
  }

  /**
   * Time in seconds since epoch after which this image should be considered unavailable.
   * @param unavailableAfterSecs unavailableAfterSecs or {@code null} for none
   */
  public ImageData setUnavailableAfterSecs(java.lang.Long unavailableAfterSecs) {
    this.unavailableAfterSecs = unavailableAfterSecs;
    return this;
  }

  /**
   * Canonicalized absolute image url.
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * Canonicalized absolute image url.
   * @param url url or {@code null} for none
   */
  public ImageData setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getWhiteBackgroundScore() {
    return whiteBackgroundScore;
  }

  /**
   * @param whiteBackgroundScore whiteBackgroundScore or {@code null} for none
   */
  public ImageData setWhiteBackgroundScore(java.lang.Float whiteBackgroundScore) {
    this.whiteBackgroundScore = whiteBackgroundScore;
    return this;
  }

  /**
   * Image is likely an object on a white background (value on [0,1]).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWhiteBackgroundScoreVersion() {
    return whiteBackgroundScoreVersion;
  }

  /**
   * Image is likely an object on a white background (value on [0,1]).
   * @param whiteBackgroundScoreVersion whiteBackgroundScoreVersion or {@code null} for none
   */
  public ImageData setWhiteBackgroundScoreVersion(java.lang.Integer whiteBackgroundScoreVersion) {
    this.whiteBackgroundScoreVersion = whiteBackgroundScoreVersion;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getWidth() {
    return width;
  }

  /**
   * @param width width or {@code null} for none
   */
  public ImageData setWidth(java.lang.Integer width) {
    this.width = width;
    return this;
  }

  @Override
  public ImageData set(String fieldName, Object value) {
    return (ImageData) super.set(fieldName, value);
  }

  @Override
  public ImageData clone() {
    return (ImageData) super.clone();
  }

}
