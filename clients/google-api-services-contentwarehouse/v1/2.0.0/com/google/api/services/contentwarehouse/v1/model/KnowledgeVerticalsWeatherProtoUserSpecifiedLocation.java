/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A user specified location to trigger weather for a specific location. Also it can be generalized
 * for other verticals.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class KnowledgeVerticalsWeatherProtoUserSpecifiedLocation extends com.google.api.client.json.GenericJson {

  /**
   * (Mandatory) Oyster ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreFeatureIdProto featureId;

  /**
   * (Mandatory) Coordinates of the location for which weather is requested.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeLatLng latLng;

  /**
   * The name to display. If specified it will override the formatted address of "feature_id".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String locationName;

  /**
   * MID corresponding to the location from feature_id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mid;

  /**
   * The timezone to display the current conditions observation time. Optional and will override the
   * timezone of "feature_id".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String timezone;

  /**
   * (Mandatory) Oyster ID.
   * @return value or {@code null} for none
   */
  public GeostoreFeatureIdProto getFeatureId() {
    return featureId;
  }

  /**
   * (Mandatory) Oyster ID.
   * @param featureId featureId or {@code null} for none
   */
  public KnowledgeVerticalsWeatherProtoUserSpecifiedLocation setFeatureId(GeostoreFeatureIdProto featureId) {
    this.featureId = featureId;
    return this;
  }

  /**
   * (Mandatory) Coordinates of the location for which weather is requested.
   * @return value or {@code null} for none
   */
  public GoogleTypeLatLng getLatLng() {
    return latLng;
  }

  /**
   * (Mandatory) Coordinates of the location for which weather is requested.
   * @param latLng latLng or {@code null} for none
   */
  public KnowledgeVerticalsWeatherProtoUserSpecifiedLocation setLatLng(GoogleTypeLatLng latLng) {
    this.latLng = latLng;
    return this;
  }

  /**
   * The name to display. If specified it will override the formatted address of "feature_id".
   * @return value or {@code null} for none
   */
  public java.lang.String getLocationName() {
    return locationName;
  }

  /**
   * The name to display. If specified it will override the formatted address of "feature_id".
   * @param locationName locationName or {@code null} for none
   */
  public KnowledgeVerticalsWeatherProtoUserSpecifiedLocation setLocationName(java.lang.String locationName) {
    this.locationName = locationName;
    return this;
  }

  /**
   * MID corresponding to the location from feature_id.
   * @return value or {@code null} for none
   */
  public java.lang.String getMid() {
    return mid;
  }

  /**
   * MID corresponding to the location from feature_id.
   * @param mid mid or {@code null} for none
   */
  public KnowledgeVerticalsWeatherProtoUserSpecifiedLocation setMid(java.lang.String mid) {
    this.mid = mid;
    return this;
  }

  /**
   * The timezone to display the current conditions observation time. Optional and will override the
   * timezone of "feature_id".
   * @return value or {@code null} for none
   */
  public java.lang.String getTimezone() {
    return timezone;
  }

  /**
   * The timezone to display the current conditions observation time. Optional and will override the
   * timezone of "feature_id".
   * @param timezone timezone or {@code null} for none
   */
  public KnowledgeVerticalsWeatherProtoUserSpecifiedLocation setTimezone(java.lang.String timezone) {
    this.timezone = timezone;
    return this;
  }

  @Override
  public KnowledgeVerticalsWeatherProtoUserSpecifiedLocation set(String fieldName, Object value) {
    return (KnowledgeVerticalsWeatherProtoUserSpecifiedLocation) super.set(fieldName, value);
  }

  @Override
  public KnowledgeVerticalsWeatherProtoUserSpecifiedLocation clone() {
    return (KnowledgeVerticalsWeatherProtoUserSpecifiedLocation) super.clone();
  }

}
