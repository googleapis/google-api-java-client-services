{
  "schemas": {
    "RejectConsentRequest": {
      "properties": {
        "consentArtifact": {
          "description": "Optional. The resource name of the Consent artifact that contains documentation of the user's rejection of the draft Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. If the draft Consent had a Consent artifact, this Consent artifact overwrites it.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "RejectConsentRequest",
      "description": "Rejects the latest revision of the specified Consent by committing a new revision with `state` updated to `REJECTED`. If the latest revision of the given Consent is in the `REJECTED` state, no new revision is committed."
    },
    "ImportDicomDataResponse": {
      "properties": {},
      "description": "Returns additional information in regards to a completed DICOM store import.",
      "id": "ImportDicomDataResponse",
      "type": "object"
    },
    "GroupOrSegment": {
      "id": "GroupOrSegment",
      "properties": {
        "group": {
          "$ref": "SchemaGroup"
        },
        "segment": {
          "$ref": "SchemaSegment"
        }
      },
      "description": "Construct representing a logical group or a segment.",
      "type": "object"
    },
    "ImageConfig": {
      "properties": {
        "textRedactionMode": {
          "description": "Determines how to redact text from image.",
          "enumDescriptions": [
            "No text redaction specified. Same as REDACT_NO_TEXT.",
            "Redact all text.",
            "Redact sensitive text.",
            "Do not redact text."
          ],
          "enum": [
            "TEXT_REDACTION_MODE_UNSPECIFIED",
            "REDACT_ALL_TEXT",
            "REDACT_SENSITIVE_TEXT",
            "REDACT_NO_TEXT"
          ],
          "type": "string"
        }
      },
      "description": "Specifies how to handle de-identification of image pixels.",
      "id": "ImageConfig",
      "type": "object"
    },
    "Binding": {
      "properties": {
        "condition": {
          "$ref": "Expr",
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        },
        "role": {
          "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
        }
      },
      "type": "object",
      "id": "Binding",
      "description": "Associates `members` with a `role`."
    },
    "AuditConfig": {
      "description": "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.",
      "properties": {
        "service": {
          "type": "string",
          "description": "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services."
        },
        "auditLogConfigs": {
          "description": "The configuration for logging of each type of permission.",
          "items": {
            "$ref": "AuditLogConfig"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "AuditConfig"
    },
    "ListFhirStoresResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list."
        },
        "fhirStores": {
          "description": "The returned FHIR stores. Won't be more FHIR stores than the value of page_size in the request.",
          "items": {
            "$ref": "FhirStore"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "ListFhirStoresResponse",
      "description": "Lists the FHIR stores in the given dataset."
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "properties": {},
      "type": "object",
      "id": "Empty"
    },
    "DicomConfig": {
      "type": "object",
      "properties": {
        "filterProfile": {
          "type": "string",
          "enum": [
            "TAG_FILTER_PROFILE_UNSPECIFIED",
            "MINIMAL_KEEP_LIST_PROFILE",
            "ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE",
            "KEEP_ALL_PROFILE",
            "DEIDENTIFY_TAG_CONTENTS"
          ],
          "enumDescriptions": [
            "No tag filtration profile provided. Same as KEEP_ALL_PROFILE.",
            "Keep only tags required to produce valid DICOM.",
            "Remove tags based on DICOM Standard's Attribute Confidentiality Basic Profile (DICOM Standard Edition 2018e) http://dicom.nema.org/medical/dicom/2018e/output/chtml/part15/chapter_E.html.",
            "Keep all tags.",
            "Inspects within tag contents and replaces sensitive text. The process can be configured using the TextConfig. Applies to all tags with the following Value Representation names: AE, LO, LT, PN, SH, ST, UC, UT, DA, DT, AS"
          ],
          "description": "Tag filtering profile that determines which tags to keep/remove."
        },
        "skipIdRedaction": {
          "type": "boolean",
          "description": "If true, skip replacing StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched. The Cloud Healthcare API regenerates these UIDs by default based on the DICOM Standard's reasoning: \"Whilst these UIDs cannot be mapped directly to an individual out of context, given access to the original images, or to a database of the original images containing the UIDs, it would be possible to recover the individual's identity.\" http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html"
        },
        "keepList": {
          "description": "List of tags to keep. Remove all other tags.",
          "$ref": "TagFilterList"
        },
        "removeList": {
          "$ref": "TagFilterList",
          "description": "List of tags to remove. Keep all other tags."
        }
      },
      "id": "DicomConfig",
      "description": "Specifies the parameters needed for de-identification of DICOM stores."
    },
    "ListConsentRevisionsResponse": {
      "type": "object",
      "id": "ListConsentRevisionsResponse",
      "properties": {
        "consents": {
          "type": "array",
          "description": "The returned Consent revisions. The maximum number of revisions returned is determined by the value of `page_size` in the ListConsentRevisionsRequest.",
          "items": {
            "$ref": "Consent"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "ExportDicomDataRequest": {
      "properties": {
        "gcsDestination": {
          "$ref": "GoogleCloudHealthcareV1DicomGcsDestination",
          "description": "The Cloud Storage output destination. The Cloud Healthcare Service Agent requires the `roles/storage.objectAdmin` Cloud IAM roles on the Cloud Storage location."
        },
        "bigqueryDestination": {
          "$ref": "GoogleCloudHealthcareV1DicomBigQueryDestination",
          "description": "The BigQuery output destination. You can only export to a BigQuery dataset that's in the same project as the DICOM store you're exporting from. The Cloud Healthcare Service Agent requires two IAM roles on the BigQuery location: `roles/bigquery.dataEditor` and `roles/bigquery.jobUser`."
        }
      },
      "description": "Exports data from the specified DICOM store. If a given resource, such as a DICOM object with the same SOPInstance UID, already exists in the output, it is overwritten with the version in the source dataset. Exported DICOM data persists when the DICOM store from which it was exported is deleted.",
      "type": "object",
      "id": "ExportDicomDataRequest"
    },
    "EvaluateUserConsentsRequest": {
      "type": "object",
      "id": "EvaluateUserConsentsRequest",
      "description": "Evaluate a user's Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, causing slight delays between the time mappings are created or updated and when they are included in EvaluateUserConsents results.",
      "properties": {
        "userId": {
          "description": "Required. User ID to evaluate consents for.",
          "type": "string"
        },
        "resourceAttributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional. The values of resource attributes associated with the resources being requested. If no values are specified, then all resources are queried."
        },
        "responseView": {
          "description": "Optional. The view for EvaluateUserConsentsResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.",
          "type": "string",
          "enum": [
            "RESPONSE_VIEW_UNSPECIFIED",
            "BASIC",
            "FULL"
          ],
          "enumDescriptions": [
            "No response view specified. The API will default to the BASIC view.",
            "Only the `data_id` and `consented` fields are populated in the response.",
            "All fields within the response are populated. When set to `FULL`, all `ACTIVE` Consents are evaluated even if a matching policy is found during evaluation."
          ]
        },
        "pageSize": {
          "format": "int32",
          "description": "Optional. Limit on the number of User data mappings to return in a single response. If not specified, 100 is used. May not be larger than 1000.",
          "type": "integer"
        },
        "consentList": {
          "$ref": "ConsentList",
          "description": "Optional. Specific Consents to evaluate the access request against. These Consents must have the same `user_id` as the User data mappings being evalauted, must exist in the current `consent_store`, and must have a `state` of either `ACTIVE` or `DRAFT`. A maximum of 100 Consents can be provided here. If unspecified, all `ACTIVE` unexpired Consents in the current `consent_store` will be evaluated."
        },
        "pageToken": {
          "type": "string",
          "description": "Optional. Token to retrieve the next page of results, or empty to get the first page."
        },
        "requestAttributes": {
          "description": "Required. The values of request attributes associated with this access request.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "PatientId": {
      "id": "PatientId",
      "properties": {
        "type": {
          "type": "string",
          "description": "ID type. For example, MRN or NHS."
        },
        "value": {
          "description": "The patient's unique identifier.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A patient identifier and associated type."
    },
    "AttributeDefinition": {
      "properties": {
        "category": {
          "type": "string",
          "enumDescriptions": [
            "No category specified. This option is invalid.",
            "Specify this category when this attribute describes the properties of resources. For example, data anonymity or data type.",
            "Specify this category when this attribute describes the properties of requests. For example, requester's role or requester's organization."
          ],
          "description": "Required. The category of the attribute. The value of this field cannot be changed after creation.",
          "enum": [
            "CATEGORY_UNSPECIFIED",
            "RESOURCE",
            "REQUEST"
          ]
        },
        "dataMappingDefaultValue": {
          "description": "Optional. Default value of the attribute in User data mappings. If no default value is specified, it defaults to an empty value. This field is only applicable to attributes of the category `RESOURCE`.",
          "type": "string"
        },
        "name": {
          "description": "Resource name of the Attribute definition, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`. Cannot be changed after creation.",
          "type": "string"
        },
        "allowedValues": {
          "type": "array",
          "description": "Required. Possible values for the attribute. The number of allowed values must not exceed 100. An empty list is invalid. The list can only be expanded after creation.",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "description": "Optional. A description of the attribute.",
          "type": "string"
        },
        "consentDefaultValues": {
          "description": "Optional. Default values of the attribute in Consents. If no default values are specified, it defaults to an empty value.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object",
      "id": "AttributeDefinition",
      "description": "A client-defined consent attribute."
    },
    "GoogleCloudHealthcareV1ConsentGcsDestination": {
      "description": "The Cloud Storage location for export.",
      "type": "object",
      "properties": {
        "uriPrefix": {
          "description": "URI for a Cloud Storage directory where the server writes result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`. If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket and directory referenced in `uri_prefix`.",
          "type": "string"
        }
      },
      "id": "GoogleCloudHealthcareV1ConsentGcsDestination"
    },
    "ListDatasetsResponse": {
      "description": "Lists the available datasets.",
      "properties": {
        "datasets": {
          "items": {
            "$ref": "Dataset"
          },
          "type": "array",
          "description": "The first page of datasets."
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ListDatasetsResponse"
    },
    "ListLocationsResponse": {
      "id": "ListLocationsResponse",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "$ref": "Location"
          },
          "description": "A list of locations that matches the specified filter in the request."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        }
      },
      "type": "object",
      "description": "The response message for Locations.ListLocations."
    },
    "DeidentifyDicomStoreRequest": {
      "id": "DeidentifyDicomStoreRequest",
      "type": "object",
      "properties": {
        "config": {
          "$ref": "DeidentifyConfig",
          "description": "De-identify configuration."
        },
        "filterConfig": {
          "$ref": "DicomFilterConfig",
          "description": "Filter configuration."
        },
        "destinationStore": {
          "description": "The name of the DICOM store to create and write the redacted data to. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`. * The destination dataset must exist. * The source dataset and destination dataset must both reside in the same project. De-identifying data across multiple projects is not supported. * The destination DICOM store must not exist. * The caller must have the necessary permissions to create the destination DICOM store.",
          "type": "string"
        }
      },
      "description": "Creates a new DICOM store with sensitive information de-identified."
    },
    "GoogleCloudHealthcareV1FhirGcsSource": {
      "id": "GoogleCloudHealthcareV1FhirGcsSource",
      "properties": {
        "uri": {
          "description": "Points to a Cloud Storage URI containing file(s) to import. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: * `*` to match 0 or more non-separator characters * `**` to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .ndjson), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs://my-bucket/my-directory/**.ndjson` imports all files with `.ndjson` extensions in `my-directory/` and its sub-directories. * `?` to match 1 character Files matching the wildcard are expected to contain content only, no metadata.",
          "type": "string"
        }
      },
      "description": "Specifies the configuration for importing data from Cloud Storage.",
      "type": "object"
    },
    "Operation": {
      "properties": {
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        }
      },
      "id": "Operation",
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "NotificationConfig": {
      "id": "NotificationConfig",
      "description": "Specifies where to send notifications upon changes to a data store.",
      "type": "object",
      "properties": {
        "pubsubTopic": {
          "type": "string",
          "description": "The [Cloud Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Cloud Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Cloud Pub/Sub, errors are logged to Cloud Logging (see [Viewing logs](/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details."
        }
      }
    },
    "GoogleCloudHealthcareV1FhirBigQueryDestination": {
      "type": "object",
      "description": "The configuration for exporting to BigQuery.",
      "properties": {
        "writeDisposition": {
          "type": "string",
          "enumDescriptions": [
            "Default behavior is the same as WRITE_EMPTY.",
            "Only export data if the destination tables are empty.",
            "Erase all existing data in the tables before writing the instances.",
            "Append data to the existing tables."
          ],
          "description": "Determines whether existing tables in the destination dataset are overwritten or appended to. If a write_disposition is specified, the `force` parameter is ignored.",
          "enum": [
            "WRITE_DISPOSITION_UNSPECIFIED",
            "WRITE_EMPTY",
            "WRITE_TRUNCATE",
            "WRITE_APPEND"
          ]
        },
        "datasetUri": {
          "description": "BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.",
          "type": "string"
        },
        "force": {
          "description": "If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.",
          "type": "boolean"
        },
        "schemaConfig": {
          "description": "The configuration for the exported BigQuery schema.",
          "$ref": "SchemaConfig"
        }
      },
      "id": "GoogleCloudHealthcareV1FhirBigQueryDestination"
    },
    "UserDataMapping": {
      "id": "UserDataMapping",
      "properties": {
        "dataId": {
          "description": "Required. A unique identifier for the mapped resource.",
          "type": "string"
        },
        "archiveTime": {
          "format": "google-datetime",
          "readOnly": true,
          "description": "Output only. Indicates the time when this mapping was archived.",
          "type": "string"
        },
        "resourceAttributes": {
          "type": "array",
          "items": {
            "$ref": "Attribute"
          },
          "description": "Attributes of the resource. Only explicitly set attributes are displayed here. Attribute definitions with defaults set implicitly apply to these User data mappings. Attributes listed here must be single valued, that is, exactly one value is specified for the field \"values\" in each Attribute."
        },
        "name": {
          "type": "string",
          "description": "Resource name of the User data mapping, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`."
        },
        "userId": {
          "type": "string",
          "description": "Required. User's UUID provided by the client."
        },
        "archived": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Indicates whether this mapping is archived."
        }
      },
      "type": "object",
      "description": "Maps a resource to the associated user and Attributes."
    },
    "ParsedData": {
      "properties": {
        "segments": {
          "type": "array",
          "items": {
            "$ref": "Segment"
          }
        }
      },
      "description": "The content of a HL7v2 message in a structured format.",
      "type": "object",
      "id": "ParsedData"
    },
    "RedactConfig": {
      "description": "Define how to redact sensitive values. Default behaviour is erase. For example, \"My name is Jane.\" becomes \"My name is .\"",
      "properties": {},
      "id": "RedactConfig",
      "type": "object"
    },
    "ImportDicomDataRequest": {
      "id": "ImportDicomDataRequest",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "Cloud Storage source data location and import configuration. The Cloud Healthcare Service Agent requires the `roles/storage.objectViewer` Cloud IAM roles on the Cloud Storage location.",
          "$ref": "GoogleCloudHealthcareV1DicomGcsSource"
        }
      },
      "description": "Imports data into the specified DICOM store. Returns an error if any of the files to import are not DICOM files. This API accepts duplicate DICOM instances by ignoring the newly-pushed instance. It does not overwrite."
    },
    "Hl7V2NotificationConfig": {
      "properties": {
        "filter": {
          "description": "Restricts notifications sent for messages matching a filter. If this is empty, all messages are matched. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `\"query text\"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `\"Comment = great\"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The following fields and functions are available for filtering: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = \"ADT\"`. * `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date \u003c \"2017-01-02\"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time \u003c \"2017-01-02T00:00:00-05:00\"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time \u003c \"2017-01-02T00:00:00-05:00\"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = \"ABC\"`. * `PatientId(value, type)`, which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, `PatientId(\"123456\", \"MRN\")`. * `labels.x`, a string value of the label with key `x` as set using the Message.labels map. For example, `labels.\"priority\"=\"high\"`. The operator `:*` can be used to assert the existence of a label. For example, `labels.\"priority\":*`.",
          "type": "string"
        },
        "pubsubTopic": {
          "type": "string",
          "description": "The [Cloud Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It's guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification cannot be published to Cloud Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](/healthcare/docs/how-tos/logging))."
        }
      },
      "id": "Hl7V2NotificationConfig",
      "type": "object",
      "description": "Specifies where and whether to send notifications upon changes to a data store."
    },
    "ListAttributeDefinitionsResponse": {
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "attributeDefinitions": {
          "description": "The returned Attribute definitions. The maximum number of attributes returned is determined by the value of page_size in the ListAttributeDefinitionsRequest.",
          "type": "array",
          "items": {
            "$ref": "AttributeDefinition"
          }
        }
      },
      "id": "ListAttributeDefinitionsResponse",
      "type": "object"
    },
    "ImportResourcesRequest": {
      "id": "ImportResourcesRequest",
      "description": "Request to import resources.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "$ref": "GoogleCloudHealthcareV1FhirGcsSource",
          "description": "Cloud Storage source data location and import configuration. The Healthcare Service Agent account requires the `roles/storage.objectAdmin` role on the Cloud Storage location. Each Cloud Storage object should be a text file that contains the format specified in ContentStructure."
        },
        "contentStructure": {
          "type": "string",
          "description": "The content structure in the source location. If not specified, the server treats the input source files as BUNDLE.",
          "enumDescriptions": [
            "If the content structure is not specified, the default value `BUNDLE` is used.",
            "The source file contains one or more lines of newline-delimited JSON (ndjson). Each line is a bundle that contains one or more resources.",
            "The source file contains one or more lines of newline-delimited JSON (ndjson). Each line is a single resource.",
            "The entire file is one JSON bundle. The JSON can span multiple lines.",
            "The entire file is one JSON resource. The JSON can span multiple lines."
          ],
          "enum": [
            "CONTENT_STRUCTURE_UNSPECIFIED",
            "BUNDLE",
            "RESOURCE",
            "BUNDLE_PRETTY",
            "RESOURCE_PRETTY"
          ]
        }
      }
    },
    "CreateMessageRequest": {
      "properties": {
        "message": {
          "$ref": "Message",
          "description": "HL7v2 message."
        }
      },
      "type": "object",
      "description": "Creates a new message.",
      "id": "CreateMessageRequest"
    },
    "GoogleCloudHealthcareV1DicomGcsSource": {
      "id": "GoogleCloudHealthcareV1DicomGcsSource",
      "properties": {
        "uri": {
          "description": "Points to a Cloud Storage URI containing file(s) with content only. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The URI can include wildcards in `object_id` and thus identify multiple files. Supported wildcards: '*' to match 0 or more non-separator characters '**' to match 0 or more characters (including separators). Must be used at the end of a path and with no other wildcards in the path. Can also be used with a file extension (such as .dcm), which imports all files with the extension in the specified directory and its sub-directories. For example, `gs://my-bucket/my-directory/**.dcm` imports all files with .dcm extensions in `my-directory/` and its sub-directories. '?' to match 1 character All other URI formats are invalid. Files matching the wildcard are expected to contain content only, no metadata.",
          "type": "string"
        }
      },
      "description": "Specifies the configuration for importing data from Cloud Storage.",
      "type": "object"
    },
    "DicomFilterConfig": {
      "id": "DicomFilterConfig",
      "description": "Specifies the filter configuration for DICOM resources.",
      "type": "object",
      "properties": {
        "resourcePathsGcsUri": {
          "type": "string",
          "description": "The Cloud Storage location of the filter configuration file. The `gcs_uri` must be in the format `gs://bucket/path/to/object`. The filter configuration file must contain a list of resource paths separated by newline characters (\\n or \\r\\n). Each resource path must be in the format \"/studies/{studyUID}[/series/{seriesUID}[/instances/{instanceUID}]]\" The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location."
        }
      }
    },
    "ExportResourcesResponse": {
      "id": "ExportResourcesResponse",
      "properties": {},
      "description": "Response when all resources export successfully. This structure is included in the response to describe the detailed outcome after the operation finishes successfully.",
      "type": "object"
    },
    "Type": {
      "properties": {
        "primitive": {
          "enumDescriptions": [
            "Not a primitive.",
            "String primitive.",
            "Element that can have unschematized children.",
            "Like STRING, but all delimiters below this element are ignored."
          ],
          "enum": [
            "PRIMITIVE_UNSPECIFIED",
            "STRING",
            "VARIES",
            "UNESCAPED_STRING"
          ],
          "type": "string",
          "description": "If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types."
        },
        "name": {
          "description": "The name of this type. This would be the segment or datatype name. For example, \"PID\" or \"XPN\".",
          "type": "string"
        },
        "fields": {
          "items": {
            "$ref": "Field"
          },
          "type": "array",
          "description": "The (sub) fields this type has (if not primitive)."
        }
      },
      "type": "object",
      "description": "A type definition for some HL7v2 type (incl. Segments and Datatypes).",
      "id": "Type"
    },
    "FhirConfig": {
      "id": "FhirConfig",
      "description": "Specifies how to handle de-identification of a FHIR store.",
      "properties": {
        "fieldMetadataList": {
          "items": {
            "$ref": "FieldMetadata"
          },
          "type": "array",
          "description": "Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions are removed in the output."
        }
      },
      "type": "object"
    },
    "CancelOperationRequest": {
      "properties": {},
      "id": "CancelOperationRequest",
      "type": "object",
      "description": "The request message for Operations.CancelOperation."
    },
    "GoogleCloudHealthcareV1DicomBigQueryDestination": {
      "description": "The BigQuery table where the server writes the output.",
      "properties": {
        "tableUri": {
          "description": "BigQuery URI to a table, up to 2000 characters long, in the format `bq://projectId.bqDatasetId.tableId`",
          "type": "string"
        },
        "force": {
          "type": "boolean",
          "description": "If the destination table already exists and this flag is `TRUE`, the table is overwritten by the contents of the DICOM store. If the flag is not set and the destination table already exists, the export call returns an error."
        }
      },
      "type": "object",
      "id": "GoogleCloudHealthcareV1DicomBigQueryDestination"
    },
    "Location": {
      "description": "A resource that represents Google Cloud Platform location.",
      "id": "Location",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata. For example the available capacity at the given location."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "type": "object"
        },
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        },
        "locationId": {
          "type": "string",
          "description": "The canonical id for this location. For example: `\"us-east1\"`."
        }
      }
    },
    "DeidentifyDatasetRequest": {
      "id": "DeidentifyDatasetRequest",
      "type": "object",
      "properties": {
        "destinationDataset": {
          "type": "string",
          "description": "The name of the dataset resource to create and write the redacted data to. * The destination dataset must not exist. * The destination dataset must be in the same project and location as the source dataset. De-identifying data across multiple projects or locations is not supported."
        },
        "config": {
          "description": "Deidentify configuration.",
          "$ref": "DeidentifyConfig"
        }
      },
      "description": "Redacts identifying information from the specified dataset."
    },
    "ListUserDataMappingsResponse": {
      "id": "ListUserDataMappingsResponse",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        },
        "userDataMappings": {
          "items": {
            "$ref": "UserDataMapping"
          },
          "description": "The returned User data mappings. The maximum number of User data mappings returned is determined by the value of page_size in the ListUserDataMappingsRequest.",
          "type": "array"
        }
      }
    },
    "OperationMetadata": {
      "description": "OperationMetadata provides information about the operation execution. Returned in the long-running operation's metadata field.",
      "properties": {
        "endTime": {
          "type": "string",
          "description": "The time at which execution was completed.",
          "format": "google-datetime"
        },
        "apiMethodName": {
          "description": "The name of the API method that initiated the operation.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "The time at which the operation was created by the API."
        },
        "cancelRequested": {
          "type": "boolean",
          "description": "Specifies if cancellation was requested for the operation."
        },
        "counter": {
          "$ref": "ProgressCounter"
        },
        "logsUrl": {
          "type": "string",
          "description": "A link to audit and error logs in the log viewer. Error logs are generated only by some operations, listed at [Viewing logs](/healthcare/docs/how-tos/logging)."
        }
      },
      "type": "object",
      "id": "OperationMetadata"
    },
    "CryptoHashConfig": {
      "id": "CryptoHashConfig",
      "properties": {
        "cryptoKey": {
          "type": "string",
          "format": "byte",
          "description": "An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used wherever crypto_key is not specified."
        }
      },
      "type": "object",
      "description": "Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output (for example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`)."
    },
    "VersionSource": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The value to match with the field. For example, \"My Application Name\" or \"2.3\"."
        },
        "mshField": {
          "type": "string",
          "description": "The field to extract from the MSH segment. For example, \"3.1\" or \"18[1].1\"."
        }
      },
      "type": "object",
      "id": "VersionSource",
      "description": "Describes a selector for extracting and matching an MSH field to a value."
    },
    "HttpBody": {
      "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
      "id": "HttpBody",
      "properties": {
        "data": {
          "description": "The HTTP request/response body as raw binary.",
          "type": "string",
          "format": "byte"
        },
        "extensions": {
          "description": "Application specific response metadata. Must be set in the first response for streaming APIs.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array"
        },
        "contentType": {
          "type": "string",
          "description": "The HTTP Content-Type header value specifying the content type of the body."
        }
      },
      "type": "object"
    },
    "Hl7V2Store": {
      "description": "Represents an HL7v2 store.",
      "id": "Hl7V2Store",
      "properties": {
        "parserConfig": {
          "description": "The configuration for the parser. It determines how the server parses the messages.",
          "$ref": "ParserConfig"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store."
        },
        "name": {
          "type": "string",
          "description": "Resource name of the HL7v2 store, of the form `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`."
        },
        "rejectDuplicateMessage": {
          "type": "boolean",
          "description": "Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection."
        },
        "notificationConfigs": {
          "type": "array",
          "description": "A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.",
          "items": {
            "$ref": "Hl7V2NotificationConfig"
          }
        }
      },
      "type": "object"
    },
    "SchemaGroup": {
      "description": "An HL7v2 logical group construct.",
      "id": "SchemaGroup",
      "type": "object",
      "properties": {
        "maxOccurs": {
          "type": "integer",
          "description": "The maximum number of times this group can be repeated. 0 or -1 means unbounded.",
          "format": "int32"
        },
        "members": {
          "items": {
            "$ref": "GroupOrSegment"
          },
          "description": "Nested groups and/or segments.",
          "type": "array"
        },
        "name": {
          "type": "string",
          "description": "The name of this group. For example, \"ORDER_DETAIL\"."
        },
        "choice": {
          "description": "True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.",
          "type": "boolean"
        },
        "minOccurs": {
          "description": "The minimum number of times this group must be present/repeated.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ConsentStore": {
      "id": "ConsentStore",
      "type": "object",
      "description": "Represents a consent store.",
      "properties": {
        "enableConsentCreateOnUpdate": {
          "description": "Optional. If `true`, UpdateConsent creates the Consent if it does not already exist. If unspecified, defaults to `false`.",
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "description": "Resource name of the consent store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. Cannot be changed after creation."
        },
        "labels": {
          "type": "object",
          "description": "Optional. User-supplied key-value pairs used to organize consent stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62}. Label values must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}. No more than 64 labels can be associated with a given store. For more information: https://cloud.google.com/healthcare/docs/how-tos/labeling-resources",
          "additionalProperties": {
            "type": "string"
          }
        },
        "defaultConsentTtl": {
          "format": "google-duration",
          "type": "string",
          "description": "Optional. Default time to live for Consents created in this store. Must be at least 24 hours. Updating this field will not affect the expiration time of existing consents."
        }
      }
    },
    "Consent": {
      "id": "Consent",
      "properties": {
        "policies": {
          "description": "Optional. Represents a user's consent in terms of the resources that can be accessed and under what conditions.",
          "items": {
            "$ref": "GoogleCloudHealthcareV1ConsentPolicy"
          },
          "type": "array"
        },
        "revisionId": {
          "description": "Output only. The revision ID of the Consent. The format is an 8-character hexadecimal string. Refer to a specific revision of a Consent by appending `@{revision_id}` to the Consent's resource name.",
          "readOnly": true,
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "description": "Optional. User-supplied key-value pairs used to organize Consent resources. Metadata keys must: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - begin with a letter - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes Metadata values must be: - be between 1 and 63 characters long - have a UTF-8 encoding of maximum 128 bytes - consist of up to 63 characters including lowercase letters, numeric characters, underscores, and dashes No more than 64 metadata entries can be associated with a given consent.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "No state specified.",
            "The Consent is active and is considered when evaluating a user's consent on resources.",
            "When a Consent is updated, the current version is archived and a new one is created with its state set to the updated Consent's previous state.",
            "A revoked Consent is not considered when evaluating a user's consent on resources.",
            "A draft Consent is not considered when evaluating a user's consent on resources unless explicitly specified.",
            "When a draft Consent is rejected by a user, it is set to a rejected state. A rejected Consent is not considered when evaluating a user's consent on resources."
          ],
          "description": "Required. Indicates the current state of this Consent.",
          "enum": [
            "STATE_UNSPECIFIED",
            "ACTIVE",
            "ARCHIVED",
            "REVOKED",
            "DRAFT",
            "REJECTED"
          ]
        },
        "expireTime": {
          "description": "Timestamp in UTC of when this Consent is considered expired.",
          "type": "string",
          "format": "google-datetime"
        },
        "name": {
          "description": "Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation.",
          "type": "string"
        },
        "consentArtifact": {
          "type": "string",
          "description": "Required. The resource name of the Consent artifact that contains proof of the end user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`."
        },
        "ttl": {
          "format": "google-duration",
          "type": "string",
          "description": "Input only. The time to live for this Consent from when it is created."
        },
        "userId": {
          "description": "Required. User's UUID provided by the client.",
          "type": "string"
        },
        "revisionCreateTime": {
          "format": "google-datetime",
          "description": "Output only. The timestamp that the revision was created.",
          "type": "string",
          "readOnly": true
        }
      },
      "type": "object",
      "description": "Represents a user's consent."
    },
    "Attribute": {
      "type": "object",
      "id": "Attribute",
      "description": "An attribute value for a Consent or User data mapping. Each Attribute must have a corresponding AttributeDefinition in the consent store that defines the default and allowed values.",
      "properties": {
        "attributeDefinitionId": {
          "description": "Indicates the name of an attribute defined in the consent store.",
          "type": "string"
        },
        "values": {
          "description": "Required. The value of the attribute. Must be an acceptable value as defined in the consent store. For example, if the consent store defines \"data type\" with acceptable values \"questionnaire\" and \"step-count\", when the attribute name is data type, this field must contain one of those values.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "Hl7TypesConfig": {
      "properties": {
        "version": {
          "type": "array",
          "description": "The version selectors that this config applies to. A message must match ALL version sources to apply.",
          "items": {
            "$ref": "VersionSource"
          }
        },
        "type": {
          "items": {
            "$ref": "Type"
          },
          "description": "The HL7v2 type definitions.",
          "type": "array"
        }
      },
      "type": "object",
      "description": "Root config for HL7v2 datatype definitions for a specific HL7v2 version.",
      "id": "Hl7TypesConfig"
    },
    "RevokeConsentRequest": {
      "type": "object",
      "properties": {
        "consentArtifact": {
          "type": "string",
          "description": "Optional. The resource name of the Consent artifact that contains proof of the user's revocation of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`."
        }
      },
      "id": "RevokeConsentRequest",
      "description": "Revokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the given Consent is in the `REVOKED` state, no new revision is committed."
    },
    "Field": {
      "properties": {
        "name": {
          "description": "The name of the field. For example, \"PID-1\" or just \"1\".",
          "type": "string"
        },
        "table": {
          "description": "The HL7v2 table this field refers to. For example, PID-15 (Patient's Primary Language) usually refers to table \"0296\".",
          "type": "string"
        },
        "type": {
          "description": "The type of this field. A Type with this name must be defined in an Hl7TypesConfig.",
          "type": "string"
        },
        "maxOccurs": {
          "format": "int32",
          "description": "The maximum number of times this field can be repeated. 0 or -1 means unbounded.",
          "type": "integer"
        },
        "minOccurs": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number of times this field must be present/repeated."
        }
      },
      "description": "A (sub) field of a type.",
      "type": "object",
      "id": "Field"
    },
    "ListOperationsResponse": {
      "id": "ListOperationsResponse",
      "type": "object",
      "description": "The response message for Operations.ListOperations.",
      "properties": {
        "operations": {
          "items": {
            "$ref": "Operation"
          },
          "type": "array",
          "description": "A list of operations that matches the specified filter in the request."
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      }
    },
    "ListDicomStoresResponse": {
      "id": "ListDicomStoresResponse",
      "description": "Lists the DICOM stores in the given dataset.",
      "type": "object",
      "properties": {
        "dicomStores": {
          "description": "The returned DICOM stores. Won't be more DICOM stores than the value of page_size in the request.",
          "items": {
            "$ref": "DicomStore"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list.",
          "type": "string"
        }
      }
    },
    "ConsentList": {
      "id": "ConsentList",
      "properties": {
        "consents": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The resource names of the Consents to evaluate against, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`."
        }
      },
      "description": "List of resource names of Consent resources.",
      "type": "object"
    },
    "SchemaConfig": {
      "id": "SchemaConfig",
      "properties": {
        "recursiveStructureDepth": {
          "type": "string",
          "format": "int64",
          "description": "The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5."
        },
        "schemaType": {
          "enum": [
            "SCHEMA_TYPE_UNSPECIFIED",
            "ANALYTICS"
          ],
          "description": "Specifies the output schema type. Schema type is required.",
          "enumDescriptions": [
            "No schema type specified. This type is unsupported.",
            "Analytics schema defined by the FHIR community. See https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md. BigQuery only allows a maximum of 10,000 columns per table. Due to this limitation, the server will not generate schemas for fields of type `Resource`, which can hold any resource type. The affected fields are `Parameters.parameter.resource`, `Bundle.entry.resource`, and `Bundle.entry.response.outcome`."
          ],
          "type": "string"
        }
      },
      "type": "object",
      "description": "Configuration for the FHIR BigQuery schema. Determines how the server generates the schema."
    },
    "ListConsentsResponse": {
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        },
        "consents": {
          "type": "array",
          "description": "The returned Consents. The maximum number of Consents returned is determined by the value of page_size in the ListConsentsRequest.",
          "items": {
            "$ref": "Consent"
          }
        }
      },
      "type": "object",
      "id": "ListConsentsResponse"
    },
    "GoogleCloudHealthcareV1DicomGcsDestination": {
      "properties": {
        "uriPrefix": {
          "type": "string",
          "description": "The Cloud Storage destination to export to. URI for a Cloud Storage directory where the server writes the result files, in the format `gs://{bucket-id}/{path/to/destination/dir}`). If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`."
        },
        "mimeType": {
          "type": "string",
          "description": "MIME types supported by DICOM spec. Each file is written in the following format: `.../{study_id}/{series_id}/{instance_id}[/{frame_number}].{extension}` The frame_number component exists only for multi-frame instances. Supported MIME types are consistent with supported formats in DICOMweb: https://cloud.google.com/healthcare/docs/dicom#retrieve_transaction. Specifically, the following are supported: - application/dicom; transfer-syntax=1.2.840.10008.1.2.1 (uncompressed DICOM) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.50 (DICOM with embedded JPEG Baseline) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.90 (DICOM with embedded JPEG 2000 Lossless Only) - application/dicom; transfer-syntax=1.2.840.10008.1.2.4.91 (DICOM with embedded JPEG 2000) - application/dicom; transfer-syntax=* (DICOM with no transcoding) - application/octet-stream; transfer-syntax=1.2.840.10008.1.2.1 (raw uncompressed PixelData) - application/octet-stream; transfer-syntax=* (raw PixelData in whatever format it was uploaded in) - image/jpeg; transfer-syntax=1.2.840.10008.1.2.4.50 (Consumer JPEG) - image/png The following extensions are used for output files: - application/dicom -\u003e .dcm - image/jpeg -\u003e .jpg - image/png -\u003e .png - application/octet-stream -\u003e no extension If unspecified, the instances are exported in the original DICOM format they were uploaded in."
        }
      },
      "type": "object",
      "description": "The Cloud Storage location where the server writes the output and the export configuration.",
      "id": "GoogleCloudHealthcareV1DicomGcsDestination"
    },
    "Message": {
      "id": "Message",
      "type": "object",
      "description": "A complete HL7v2 message. See [Introduction to HL7 Standards] (https://www.hl7.org/implement/standards/index.cfm?ref=common) for details on the standard.",
      "properties": {
        "createTime": {
          "type": "string",
          "description": "Output only. The datetime when the message was created. Set by the server.",
          "format": "google-datetime",
          "readOnly": true
        },
        "data": {
          "type": "string",
          "description": "Raw message bytes.",
          "format": "byte"
        },
        "parsedData": {
          "readOnly": true,
          "$ref": "ParsedData",
          "description": "Output only. The parsed version of the raw message data."
        },
        "name": {
          "type": "string",
          "description": "Resource name of the Message, of the form `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server."
        },
        "messageType": {
          "description": "The message type for this message. MSH-9.1.",
          "type": "string"
        },
        "schematizedData": {
          "$ref": "SchematizedData",
          "description": "The parsed version of the raw message data schematized according to this store's schemas and type definitions."
        },
        "sendFacility": {
          "type": "string",
          "description": "The hospital that this message came from. MSH-4."
        },
        "sendTime": {
          "format": "google-datetime",
          "description": "The datetime the sending application sent this message. MSH-7.",
          "type": "string"
        },
        "labels": {
          "description": "User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "patientIds": {
          "items": {
            "$ref": "PatientId"
          },
          "description": "All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this message.",
          "type": "array"
        }
      }
    },
    "ConsentEvaluation": {
      "properties": {
        "evaluationResult": {
          "enumDescriptions": [
            "No evaluation result specified. This option is invalid.",
            "The Consent is not applicable to the requested access determination. For example, the Consent does not apply to the user for which the access determination is requested, or it has a `state` of `REVOKED`.",
            "The Consent does not have a policy that matches the `resource_attributes` of the evaluated resource.",
            "The Consent has at least one policy that matches the `resource_attributes` of the evaluated resource, but no `authorization_rule` was satisfied.",
            "The Consent has at least one policy that matches the `resource_attributes` of the evaluated resource, and at least one `authorization_rule` was satisfied."
          ],
          "description": "The evaluation result.",
          "type": "string",
          "enum": [
            "EVALUATION_RESULT_UNSPECIFIED",
            "NOT_APPLICABLE",
            "NO_MATCHING_POLICY",
            "NO_SATISFIED_POLICY",
            "HAS_SATISFIED_POLICY"
          ]
        }
      },
      "type": "object",
      "description": "The detailed evaluation of a particular Consent.",
      "id": "ConsentEvaluation"
    },
    "ListConsentArtifactsResponse": {
      "id": "ListConsentArtifactsResponse",
      "properties": {
        "consentArtifacts": {
          "description": "The returned Consent artifacts. The maximum number of artifacts returned is determined by the value of page_size in the ListConsentArtifactsRequest.",
          "items": {
            "$ref": "ConsentArtifact"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DateShiftConfig": {
      "id": "DateShiftConfig",
      "properties": {
        "cryptoKey": {
          "description": "An AES 128/192/256 bit key. Causes the shift to be computed based on this key and the patient ID. A default key is generated for each Deidentify operation and is used wherever crypto_key is not specified.",
          "type": "string",
          "format": "byte"
        }
      },
      "type": "object",
      "description": "Shift a date forward or backward in time by a random amount which is consistent for a given patient and crypto key combination."
    },
    "InfoTypeTransformation": {
      "type": "object",
      "properties": {
        "cryptoHashConfig": {
          "$ref": "CryptoHashConfig",
          "description": "Config for crypto hash."
        },
        "redactConfig": {
          "$ref": "RedactConfig",
          "description": "Config for text redaction."
        },
        "replaceWithInfoTypeConfig": {
          "$ref": "ReplaceWithInfoTypeConfig",
          "description": "Config for replace with InfoType."
        },
        "dateShiftConfig": {
          "description": "Config for date shift.",
          "$ref": "DateShiftConfig"
        },
        "infoTypes": {
          "type": "array",
          "description": "InfoTypes to apply this transformation to. If this is not specified, the transformation applies to any info_type.",
          "items": {
            "type": "string"
          }
        },
        "characterMaskConfig": {
          "$ref": "CharacterMaskConfig",
          "description": "Config for character mask."
        }
      },
      "description": "A transformation to apply to text that is identified as a specific info_type.",
      "id": "InfoTypeTransformation"
    },
    "DeidentifyConfig": {
      "properties": {
        "text": {
          "description": "Configures de-identification of text wherever it is found in the source_dataset.",
          "$ref": "TextConfig"
        },
        "fhir": {
          "description": "Configures de-id of application/FHIR content.",
          "$ref": "FhirConfig"
        },
        "image": {
          "$ref": "ImageConfig",
          "description": "Configures de-identification of image pixels wherever they are found in the source_dataset."
        },
        "dicom": {
          "description": "Configures de-id of application/DICOM content.",
          "$ref": "DicomConfig"
        }
      },
      "id": "DeidentifyConfig",
      "type": "object",
      "description": "Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime."
    },
    "TestIamPermissionsRequest": {
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "type": "array"
        }
      },
      "id": "TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object"
    },
    "DeidentifySummary": {
      "id": "DeidentifySummary",
      "properties": {},
      "type": "object",
      "description": "Contains a summary of the Deidentify operation."
    },
    "Expr": {
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "properties": {
        "expression": {
          "type": "string",
          "description": "Textual representation of an expression in Common Expression Language syntax."
        },
        "title": {
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
        },
        "location": {
          "type": "string",
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
        }
      },
      "id": "Expr",
      "type": "object"
    },
    "Status": {
      "id": "Status",
      "type": "object",
      "properties": {
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          }
        },
        "code": {
          "format": "int32",
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "EvaluateUserConsentsResponse": {
      "type": "object",
      "properties": {
        "results": {
          "description": "The consent evaluation result for each `data_id`.",
          "type": "array",
          "items": {
            "$ref": "Result"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list. This token is valid for 72 hours after it is created.",
          "type": "string"
        }
      },
      "id": "EvaluateUserConsentsResponse"
    },
    "ArchiveUserDataMappingResponse": {
      "type": "object",
      "id": "ArchiveUserDataMappingResponse",
      "description": "Archives the specified User data mapping.",
      "properties": {}
    },
    "GoogleCloudHealthcareV1ConsentPolicy": {
      "description": "Represents a user's consent in terms of the resources that can be accessed and under what conditions.",
      "id": "GoogleCloudHealthcareV1ConsentPolicy",
      "type": "object",
      "properties": {
        "authorizationRule": {
          "description": "Required. The request conditions to meet to grant access. In addition to any supported comparison operators, authorization rules may have `IN` operator as well as at most 10 logical operators that are limited to `AND` (`&&`), `OR` (`||`).",
          "$ref": "Expr"
        },
        "resourceAttributes": {
          "type": "array",
          "description": "The resources that this policy applies to. A resource is a match if it matches all the attributes listed here. If empty, this policy applies to all User data mappings for the given user.",
          "items": {
            "$ref": "Attribute"
          }
        }
      }
    },
    "ReplaceWithInfoTypeConfig": {
      "id": "ReplaceWithInfoTypeConfig",
      "description": "When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, \"My name is Jane\" becomes \"My name is [PERSON_NAME].\" The TRANSFORM action is equivalent to redacting.",
      "properties": {},
      "type": "object"
    },
    "DeidentifyFhirStoreRequest": {
      "description": "Creates a new FHIR store with sensitive information de-identified.",
      "properties": {
        "config": {
          "$ref": "DeidentifyConfig",
          "description": "Deidentify configuration."
        },
        "destinationStore": {
          "type": "string",
          "description": "The name of the FHIR store to create and write the redacted data to. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`. * The destination dataset must exist. * The source dataset and destination dataset must both reside in the same project. De-identifying data across multiple projects is not supported. * The destination FHIR store must exist. * The caller must have the healthcare.fhirResources.update permission to write to the destination FHIR store."
        },
        "resourceFilter": {
          "$ref": "FhirFilter",
          "description": "A filter specifying the resources to include in the output. If not specified, all resources are included in the output."
        }
      },
      "type": "object",
      "id": "DeidentifyFhirStoreRequest"
    },
    "ListConsentStoresResponse": {
      "type": "object",
      "properties": {
        "consentStores": {
          "type": "array",
          "description": "The returned consent stores. The maximum number of stores returned is determined by the value of page_size in the ListConsentStoresRequest.",
          "items": {
            "$ref": "ConsentStore"
          }
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list.",
          "type": "string"
        }
      },
      "id": "ListConsentStoresResponse"
    },
    "IngestMessageResponse": {
      "description": "Acknowledges that a message has been ingested into the specified HL7v2 store.",
      "properties": {
        "message": {
          "description": "Created message resource.",
          "$ref": "Message"
        },
        "hl7Ack": {
          "format": "byte",
          "description": "HL7v2 ACK message.",
          "type": "string"
        }
      },
      "id": "IngestMessageResponse",
      "type": "object"
    },
    "ExportDicomDataResponse": {
      "description": "Returns additional information in regards to a completed DICOM store export.",
      "id": "ExportDicomDataResponse",
      "type": "object",
      "properties": {}
    },
    "SearchResourcesRequest": {
      "type": "object",
      "id": "SearchResourcesRequest",
      "properties": {
        "resourceType": {
          "description": "The FHIR resource type to search, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)).",
          "type": "string"
        }
      },
      "description": "Request to search the resources in the specified FHIR store."
    },
    "IngestMessageRequest": {
      "properties": {
        "message": {
          "description": "HL7v2 message to ingest.",
          "$ref": "Message"
        }
      },
      "type": "object",
      "id": "IngestMessageRequest",
      "description": "Ingests a message into the specified HL7v2 store."
    },
    "ListHl7V2StoresResponse": {
      "properties": {
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list.",
          "type": "string"
        },
        "hl7V2Stores": {
          "description": "The returned HL7v2 stores. Won't be more HL7v2 stores than the value of page_size in the request.",
          "type": "array",
          "items": {
            "$ref": "Hl7V2Store"
          }
        }
      },
      "type": "object",
      "id": "ListHl7V2StoresResponse",
      "description": "Lists the HL7v2 stores in the given dataset."
    },
    "TestIamPermissionsResponse": {
      "id": "TestIamPermissionsResponse",
      "type": "object",
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
        }
      },
      "description": "Response message for `TestIamPermissions` method."
    },
    "ExportResourcesRequest": {
      "type": "object",
      "id": "ExportResourcesRequest",
      "description": "Request to export resources.",
      "properties": {
        "bigqueryDestination": {
          "description": "The BigQuery output destination. The Cloud Healthcare Service Agent requires two IAM roles on the BigQuery location: `roles/bigquery.dataEditor` and `roles/bigquery.jobUser`. The output is one BigQuery table per resource type.",
          "$ref": "GoogleCloudHealthcareV1FhirBigQueryDestination"
        },
        "gcsDestination": {
          "$ref": "GoogleCloudHealthcareV1FhirGcsDestination",
          "description": "The Cloud Storage output destination. The Healthcare Service Agent account requires the `roles/storage.objectAdmin` role on the Cloud Storage location. The exported outputs are organized by FHIR resource types. The server creates one object per resource type. Each object contains newline delimited JSON, and each line is a FHIR resource."
        }
      }
    },
    "FieldMetadata": {
      "id": "FieldMetadata",
      "type": "object",
      "description": "Specifies FHIR paths to match, and how to handle de-identification of matching fields.",
      "properties": {
        "paths": {
          "type": "array",
          "description": "List of paths to FHIR fields to be redacted. Each path is a period-separated list where each component is either a field name or FHIR type name, for example: Patient, HumanName. For \"choice\" types (those defined in the FHIR spec with the form: field[x]) we use two separate components. For example, \"deceasedAge.unit\" is matched by \"Deceased.Age.unit\". Supported types are: AdministrativeGenderCode, Code, Date, DateTime, Decimal, HumanName, Id, LanguageCode, Markdown, Oid, String, Uri, Uuid, Xhtml. Base64Binary is also supported, but may only be kept as-is or have all the content removed.",
          "items": {
            "type": "string"
          }
        },
        "action": {
          "enum": [
            "ACTION_UNSPECIFIED",
            "TRANSFORM",
            "INSPECT_AND_TRANSFORM",
            "DO_NOT_TRANSFORM"
          ],
          "type": "string",
          "enumDescriptions": [
            "No action specified.",
            "Transform the entire field.",
            "Inspect and transform any found PHI.",
            "Do not transform."
          ],
          "description": "Deidentify action for one field."
        }
      }
    },
    "StreamConfig": {
      "description": "Contains configuration for streaming FHIR export.",
      "properties": {
        "resourceTypes": {
          "description": "Supply a FHIR resource type (such as \"Patient\" or \"Observation\"). See https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats an empty list as an intent to stream all the supported resource types in this FHIR store.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "bigqueryDestination": {
          "$ref": "GoogleCloudHealthcareV1FhirBigQueryDestination",
          "description": "The destination BigQuery structure that contains both the dataset location and corresponding schema config. The output is organized in one table per resource type. The server reuses the existing tables (if any) that are named after the resource types. For example, \"Patient\", \"Observation\". When there is no existing table for a given resource type, the server attempts to create one. When a table schema doesn't align with the schema config, either because of existing incompatible schema or out of band incompatible modification, the server does not stream in new data. BigQuery imposes a 1 MB limit on streaming insert row size, therefore any resource mutation that generates more than 1 MB of BigQuery data is not streamed. One resolution in this case is to delete the incompatible table and let the server recreate one, though the newly created table only contains data after the table recreation. Results are appended to the corresponding BigQuery tables. Different versions of the same resource are distinguishable by the meta.versionId and meta.lastUpdated columns. The operation (CREATE/UPDATE/DELETE) that results in the new version is recorded in the meta.tag. The tables contain all historical resource versions since streaming was enabled. For query convenience, the server also creates one view per table of the same name containing only the current resource version. The streamed data in the BigQuery dataset is not guaranteed to be completely unique. The combination of the id and meta.versionId columns should ideally identify a single unique row. But in rare cases, duplicates may exist. At query time, users may use the SQL select statement to keep only one of the duplicate rows given an id and meta.versionId pair. Alternatively, the server created view mentioned above also filters out duplicates. If a resource mutation cannot be streamed to BigQuery, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](/healthcare/docs/how-tos/logging))."
        }
      },
      "type": "object",
      "id": "StreamConfig"
    },
    "FhirStore": {
      "description": "Represents a FHIR store.",
      "properties": {
        "disableReferentialIntegrity": {
          "type": "boolean",
          "description": "Immutable. Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The default value is false, meaning that the API enforces referential integrity and fails the requests that result in inconsistent state in the FHIR store. When this field is set to true, the API skips referential integrity checks. Consequently, operations that rely on references, such as GetPatientEverything, do not return all the results if broken references exist."
        },
        "streamConfigs": {
          "description": "A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server stops streaming to that location. Before adding a new config, you must add the required [`bigquery.dataEditor`](https://cloud.google.com/bigquery/docs/access-control#bigquery.dataEditor) role to your project's **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/iam/docs/service-accounts). Some lag (typically on the order of dozens of seconds) is expected before the results show up in the streaming destination.",
          "items": {
            "$ref": "StreamConfig"
          },
          "type": "array"
        },
        "name": {
          "description": "Output only. Resource name of the FHIR store, of the form `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
          "type": "string"
        },
        "enableUpdateCreate": {
          "description": "Whether this FHIR store has the [updateCreate capability](https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate). This determines if the client can use an Update operation to create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and attempts to update a non-existent resource return errors. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud audit logs and Cloud Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources.",
          "type": "boolean"
        },
        "notificationConfig": {
          "$ref": "NotificationConfig",
          "description": "If non-empty, publish all resource modifications of this FHIR store to this destination. The Cloud Pub/Sub message attributes contain a map with a string describing the action that has triggered the notification. For example, \"action\":\"CreateResource\"."
        },
        "labels": {
          "description": "User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "disableResourceVersioning": {
          "description": "Immutable. Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR store. If set to false, which is the default behavior, all write operations cause historical versions to be recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set to true, no historical versions are kept. The server sends errors for attempts to read the historical versions.",
          "type": "boolean"
        },
        "version": {
          "type": "string",
          "enum": [
            "VERSION_UNSPECIFIED",
            "DSTU2",
            "STU3",
            "R4"
          ],
          "description": "Immutable. The FHIR specification version that this FHIR store supports natively. This field is immutable after store creation. Requests are rejected if they contain FHIR resources of a different version. Version is required for every FHIR store.",
          "enumDescriptions": [
            "Users must specify a version on store creation or an error is returned.",
            "Draft Standard for Trial Use, [Release 2](https://www.hl7.org/fhir/DSTU2)",
            "Standard for Trial Use, [Release 3](https://www.hl7.org/fhir/STU3)",
            "[Release 4](https://www.hl7.org/fhir/R4)"
          ]
        }
      },
      "id": "FhirStore",
      "type": "object"
    },
    "AuditLogConfig": {
      "description": "Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.",
      "id": "AuditLogConfig",
      "properties": {
        "logType": {
          "type": "string",
          "enumDescriptions": [
            "Default case. Should never be this.",
            "Admin reads. Example: CloudIAM getIamPolicy",
            "Data writes. Example: CloudSQL Users create",
            "Data reads. Example: CloudSQL Users list"
          ],
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ],
          "description": "The log type that this config enables."
        },
        "exemptedMembers": {
          "description": "Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object"
    },
    "ImportResourcesResponse": {
      "properties": {},
      "id": "ImportResourcesResponse",
      "type": "object",
      "description": "Final response of importing resources. This structure is included in the response to describe the detailed outcome after the operation finishes successfully."
    },
    "SchemaSegment": {
      "id": "SchemaSegment",
      "description": "An HL7v2 Segment.",
      "type": "object",
      "properties": {
        "maxOccurs": {
          "format": "int32",
          "description": "The maximum number of times this segment can be present in this group. 0 or -1 means unbounded.",
          "type": "integer"
        },
        "minOccurs": {
          "format": "int32",
          "type": "integer",
          "description": "The minimum number of times this segment can be present in this group."
        },
        "type": {
          "type": "string",
          "description": "The Segment type. For example, \"PID\"."
        }
      }
    },
    "GoogleCloudHealthcareV1FhirGcsDestination": {
      "description": "The configuration for exporting to Cloud Storage.",
      "properties": {
        "uriPrefix": {
          "type": "string",
          "description": "URI for a Cloud Storage directory where result files should be written, in the format of `gs://{bucket-id}/{path/to/destination/dir}`. If there is no trailing slash, the service appends one when composing the object path. The user is responsible for creating the Cloud Storage bucket referenced in `uri_prefix`."
        }
      },
      "type": "object",
      "id": "GoogleCloudHealthcareV1FhirGcsDestination"
    },
    "Signature": {
      "properties": {
        "signatureTime": {
          "type": "string",
          "description": "Optional. Timestamp of the signature.",
          "format": "google-datetime"
        },
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Optional. Metadata associated with the user's signature. For example, the user's name or the user's title."
        },
        "userId": {
          "description": "Required. User's UUID provided by the client.",
          "type": "string"
        },
        "image": {
          "description": "Optional. An image of the user's signature.",
          "$ref": "Image"
        }
      },
      "description": "User signature.",
      "id": "Signature",
      "type": "object"
    },
    "Image": {
      "properties": {
        "rawBytes": {
          "type": "string",
          "format": "byte",
          "description": "Consent artifact content represented as a stream of bytes. This field is populated when returned in GetConsentArtifact response, but not included in CreateConsentArtifact and ListConsentArtifact response."
        },
        "gcsUri": {
          "type": "string",
          "description": "Input only. Points to a Cloud Storage URI containing the consent artifact content. The URI must be in the following format: `gs://{bucket_id}/{object_id}`. The Cloud Healthcare API service account must have the `roles/storage.objectViewer` Cloud IAM role for this Cloud Storage location. The consent artifact content at this URI is copied to a Cloud Storage location managed by the Cloud Healthcare API. Responses to fetching requests return the consent artifact content in raw_bytes."
        }
      },
      "type": "object",
      "id": "Image",
      "description": "Raw bytes representing consent artifact content."
    },
    "SchematizedData": {
      "properties": {
        "error": {
          "description": "The error output of the parser.",
          "type": "string"
        },
        "data": {
          "description": "JSON output of the parser.",
          "type": "string"
        }
      },
      "description": "The content of an HL7v2 message in a structured format as specified by a schema.",
      "id": "SchematizedData",
      "type": "object"
    },
    "SchemaPackage": {
      "id": "SchemaPackage",
      "properties": {
        "types": {
          "items": {
            "$ref": "Hl7TypesConfig"
          },
          "type": "array",
          "description": "Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message."
        },
        "schemas": {
          "items": {
            "$ref": "Hl7SchemaConfig"
          },
          "type": "array",
          "description": "Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message."
        },
        "schematizedParsingType": {
          "description": "Determines how messages that fail to parse are handled.",
          "enum": [
            "SCHEMATIZED_PARSING_TYPE_UNSPECIFIED",
            "SOFT_FAIL",
            "HARD_FAIL"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unspecified schematized parsing type, equivalent to `SOFT_FAIL`.",
            "Messages that fail to parse are still stored and ACKed but a parser error is stored in place of the schematized data.",
            "Messages that fail to parse are rejected from ingestion/insertion and return an error code."
          ]
        },
        "ignoreMinOccurs": {
          "description": "Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "A schema package contains a set of schemas and type definitions."
    },
    "SetIamPolicyRequest": {
      "type": "object",
      "description": "Request message for `SetIamPolicy` method.",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.",
          "$ref": "Policy"
        },
        "updateMask": {
          "type": "string",
          "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: \"bindings, etag\"`",
          "format": "google-fieldmask"
        }
      },
      "id": "SetIamPolicyRequest"
    },
    "FhirFilter": {
      "description": "Filter configuration.",
      "id": "FhirFilter",
      "properties": {
        "resources": {
          "description": "List of resources to include in the output. If this list is empty or not specified, all resources are included in the output.",
          "$ref": "Resources"
        }
      },
      "type": "object"
    },
    "Result": {
      "type": "object",
      "id": "Result",
      "description": "The consent evaluation result for a single `data_id`.",
      "properties": {
        "consented": {
          "type": "boolean",
          "description": "Whether the resource is consented for the given use."
        },
        "consentDetails": {
          "type": "object",
          "additionalProperties": {
            "$ref": "ConsentEvaluation"
          },
          "description": "The resource names of all evaluated Consents mapped to their evaluation."
        },
        "dataId": {
          "description": "The unique identifier of the evaluated resource.",
          "type": "string"
        }
      }
    },
    "GoogleCloudHealthcareV1DeidentifyDeidentifyDicomStoreSummary": {
      "description": "Contains a summary of the DeidentifyDicomStore operation.",
      "type": "object",
      "properties": {},
      "id": "GoogleCloudHealthcareV1DeidentifyDeidentifyDicomStoreSummary"
    },
    "Policy": {
      "type": "object",
      "properties": {
        "bindings": {
          "type": "array",
          "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.",
          "items": {
            "$ref": "Binding"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "type": "string",
          "format": "byte"
        },
        "version": {
          "format": "int32",
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
          "type": "integer"
        },
        "auditConfigs": {
          "type": "array",
          "items": {
            "$ref": "AuditConfig"
          },
          "description": "Specifies cloud audit logging configuration for this policy."
        }
      },
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "id": "Policy"
    },
    "DicomStore": {
      "properties": {
        "notificationConfig": {
          "$ref": "NotificationConfig",
          "description": "Notification destination for new DICOM instances. Supplied by the client."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "User-supplied key-value pairs used to organize DICOM stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.",
          "type": "object"
        },
        "name": {
          "type": "string",
          "description": "Resource name of the DICOM store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`."
        }
      },
      "id": "DicomStore",
      "description": "Represents a DICOM store.",
      "type": "object"
    },
    "ParserConfig": {
      "properties": {
        "schema": {
          "description": "Schemas used to parse messages in this store, if schematized parsing is desired.",
          "$ref": "SchemaPackage"
        },
        "segmentTerminator": {
          "format": "byte",
          "type": "string",
          "description": "Byte(s) to use as the segment terminator. If this is unset, '\\r' is used as segment terminator, matching the HL7 version 2 specification."
        },
        "allowNullHeader": {
          "type": "boolean",
          "description": "Determines whether messages with no header are allowed."
        }
      },
      "id": "ParserConfig",
      "description": "The configuration for the parser. It determines how the server parses the messages.",
      "type": "object"
    },
    "ConsentArtifact": {
      "type": "object",
      "properties": {
        "consentContentScreenshots": {
          "description": "Optional. Screenshots, PDFs, or other binary information documenting the user's consent.",
          "items": {
            "$ref": "Image"
          },
          "type": "array"
        },
        "consentContentVersion": {
          "type": "string",
          "description": "Optional. An string indicating the version of the consent information shown to the user."
        },
        "name": {
          "description": "Resource name of the Consent artifact, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. Cannot be changed after creation.",
          "type": "string"
        },
        "userId": {
          "type": "string",
          "description": "Required. User's UUID provided by the client."
        },
        "metadata": {
          "type": "object",
          "description": "Optional. Metadata associated with the Consent artifact. For example, the consent locale or user agent version.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "guardianSignature": {
          "description": "Optional. A signature from a guardian.",
          "$ref": "Signature"
        },
        "userSignature": {
          "description": "Optional. User's signature.",
          "$ref": "Signature"
        },
        "witnessSignature": {
          "description": "Optional. A signature from a witness.",
          "$ref": "Signature"
        }
      },
      "description": "Documentation of a user's consent.",
      "id": "ConsentArtifact"
    },
    "Segment": {
      "properties": {
        "setId": {
          "description": "Set ID for segments that can be in a set. This can be empty if it's missing or isn't applicable.",
          "type": "string"
        },
        "fields": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "A mapping from the positional location to the value. The key string uses zero-based indexes separated by dots to identify Fields, components and sub-components. A bracket notation is also used to identify different instances of a repeated field. Regex for key: (\\d+)(\\[\\d+\\])?(.\\d+)?(.\\d+)? Examples of (key, value) pairs: * (0.1, \"hemoglobin\") denotes that the first component of Field 0 has the value \"hemoglobin\". * (1.1.2, \"CBC\") denotes that the second sub-component of the first component of Field 1 has the value \"CBC\". * (1[0].1, \"HbA1c\") denotes that the first component of the first Instance of Field 1, which is repeated, has the value \"HbA1c\"."
        },
        "segmentId": {
          "type": "string",
          "description": "A string that indicates the type of segment. For example, EVN or PID."
        }
      },
      "id": "Segment",
      "type": "object",
      "description": "A segment in a structured format."
    },
    "QueryAccessibleDataRequest": {
      "description": "Queries all data_ids that are consented for a given use in the given consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. Errors are logged to Cloud Logging (see [Viewing logs] (/healthcare/docs/how-tos/logging) and [QueryAccessibleData] for a sample log entry).",
      "type": "object",
      "properties": {
        "requestAttributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The values of request attributes associated with this access request."
        },
        "gcsDestination": {
          "$ref": "GoogleCloudHealthcareV1ConsentGcsDestination",
          "description": "The Cloud Storage destination. The Cloud Healthcare API service account must have the `roles/storage.objectAdmin` Cloud IAM role for this Cloud Storage location."
        },
        "resourceAttributes": {
          "description": "Optional. The values of resource attributes associated with the type of resources being requested. If no values are specified, then all resource types are included in the output.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "id": "QueryAccessibleDataRequest"
    },
    "Resources": {
      "id": "Resources",
      "properties": {
        "resources": {
          "items": {
            "type": "string"
          },
          "description": "List of resources IDs. For example, \"Patient/1234\".",
          "type": "array"
        }
      },
      "description": "A list of FHIR resources.",
      "type": "object"
    },
    "TextConfig": {
      "properties": {
        "transformations": {
          "items": {
            "$ref": "InfoTypeTransformation"
          },
          "type": "array",
          "description": "The transformations to apply to the detected data."
        }
      },
      "id": "TextConfig",
      "type": "object"
    },
    "ListMessagesResponse": {
      "description": "Lists the messages in the specified HL7v2 store.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results or empty if there are no more results in the list."
        },
        "hl7V2Messages": {
          "type": "array",
          "items": {
            "$ref": "Message"
          },
          "description": "The returned Messages. Won't be more Messages than the value of page_size in the request. See view for populated fields."
        }
      },
      "type": "object",
      "id": "ListMessagesResponse"
    },
    "Dataset": {
      "id": "Dataset",
      "properties": {
        "timeZone": {
          "description": "The default timezone used by this dataset. Must be a either a valid IANA time zone name such as \"America/New_York\" or empty, which defaults to UTC. This is used for parsing times in resources, such as HL7 messages, where no explicit timezone is specified.",
          "type": "string"
        },
        "name": {
          "description": "Resource name of the dataset, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.",
          "type": "string"
        }
      },
      "description": "A message representing a health dataset. A health dataset represents a collection of healthcare data pertaining to one or more patients. This may include multiple modalities of healthcare data, such as electronic medical records or medical imaging data.",
      "type": "object"
    },
    "ArchiveUserDataMappingRequest": {
      "description": "Archives the specified User data mapping.",
      "id": "ArchiveUserDataMappingRequest",
      "properties": {},
      "type": "object"
    },
    "CharacterMaskConfig": {
      "properties": {
        "maskingCharacter": {
          "type": "string",
          "description": "Character to mask the sensitive values. If not supplied, defaults to \"*\"."
        }
      },
      "type": "object",
      "description": "Mask a string by replacing its characters with a fixed character.",
      "id": "CharacterMaskConfig"
    },
    "GoogleCloudHealthcareV1DeidentifyDeidentifyFhirStoreSummary": {
      "properties": {},
      "id": "GoogleCloudHealthcareV1DeidentifyDeidentifyFhirStoreSummary",
      "type": "object",
      "description": "Contains a summary of the DeidentifyFhirStore operation."
    },
    "ProgressCounter": {
      "properties": {
        "pending": {
          "description": "The number of units that are pending in the operation.",
          "type": "string",
          "format": "int64"
        },
        "success": {
          "format": "int64",
          "type": "string",
          "description": "The number of units that succeeded in the operation."
        },
        "failure": {
          "description": "The number of units that failed in the operation.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "ProgressCounter",
      "type": "object",
      "description": "ProgressCounter provides counters to describe an operation's progress."
    },
    "CheckDataAccessRequest": {
      "id": "CheckDataAccessRequest",
      "type": "object",
      "description": "Checks if a particular data_id of a User data mapping in the given consent store is consented for a given use.",
      "properties": {
        "consentList": {
          "$ref": "ConsentList",
          "description": "Optional. Specific Consents to evaluate the access request against. These Consents must have the same `user_id` as the evaluated User data mapping, must exist in the current `consent_store`, and have a `state` of either `ACTIVE` or `DRAFT`. A maximum of 100 Consents can be provided here. If no selection is specified, the access request is evaluated against all `ACTIVE` unexpired Consents with the same `user_id` as the evaluated User data mapping."
        },
        "dataId": {
          "type": "string",
          "description": "Required. The unique identifier of the resource to check access for. This identifier must correspond to a User data mapping in the given consent store."
        },
        "requestAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "The values of request attributes associated with this access request."
        },
        "responseView": {
          "type": "string",
          "description": "Optional. The view for CheckDataAccessResponse. If unspecified, defaults to `BASIC` and returns `consented` as `TRUE` or `FALSE`.",
          "enum": [
            "RESPONSE_VIEW_UNSPECIFIED",
            "BASIC",
            "FULL"
          ],
          "enumDescriptions": [
            "No response view specified. The API will default to the BASIC view.",
            "Only the `consented` field is populated in CheckDataAccessResponse.",
            "All fields within CheckDataAccessResponse are populated. When set to `FULL`, all `ACTIVE` Consents are evaluated even if a matching policy is found during evaluation."
          ]
        }
      }
    },
    "TagFilterList": {
      "type": "object",
      "id": "TagFilterList",
      "description": "List of tags to be filtered.",
      "properties": {
        "tags": {
          "type": "array",
          "description": "Tags to be filtered. Tags must be DICOM Data Elements, File Meta Elements, or Directory Structuring Elements, as defined at: http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,. They may be provided by \"Keyword\" or \"Tag\". For example \"PatientID\", \"00100010\".",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CheckDataAccessResponse": {
      "id": "CheckDataAccessResponse",
      "type": "object",
      "description": "Checks if a particular data_id of a User data mapping in the given consent store is consented for a given use.",
      "properties": {
        "consentDetails": {
          "description": "The resource names of all evaluated Consents mapped to their evaluation.",
          "additionalProperties": {
            "$ref": "ConsentEvaluation"
          },
          "type": "object"
        },
        "consented": {
          "type": "boolean",
          "description": "Whether the requested resource is consented for the given use."
        }
      }
    },
    "Hl7SchemaConfig": {
      "type": "object",
      "description": "Root config message for HL7v2 schema. This contains a schema structure of groups and segments, and filters that determine which messages to apply the schema structure to.",
      "properties": {
        "messageSchemaConfigs": {
          "additionalProperties": {
            "$ref": "SchemaGroup"
          },
          "type": "object",
          "description": "Map from each HL7v2 message type and trigger event pair, such as ADT_A04, to its schema configuration root group."
        },
        "version": {
          "items": {
            "$ref": "VersionSource"
          },
          "description": "Each VersionSource is tested and only if they all match is the schema used for the message.",
          "type": "array"
        }
      },
      "id": "Hl7SchemaConfig"
    },
    "ActivateConsentRequest": {
      "description": "Activates the latest revision of the specified Consent by committing a new revision with `state` updated to `ACTIVE`. If the latest revision of the given Consent is in the `ACTIVE` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in the `REJECTED` or `REVOKED` state.",
      "id": "ActivateConsentRequest",
      "type": "object",
      "properties": {
        "expireTime": {
          "description": "Timestamp in UTC of when this Consent is considered expired.",
          "type": "string",
          "format": "google-datetime"
        },
        "ttl": {
          "description": "The time to live for this Consent from when it is marked as active.",
          "type": "string",
          "format": "google-duration"
        },
        "consentArtifact": {
          "type": "string",
          "description": "Required. The resource name of the Consent artifact that contains documentation of the user's consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consentArtifacts/{consent_artifact_id}`. If the draft Consent had a Consent artifact, this Consent artifact overwrites it."
        }
      }
    }
  },
  "revision": "20210301",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "basePath": "",
  "kind": "discovery#restDescription",
  "documentationLink": "https://cloud.google.com/healthcare",
  "batchPath": "batch",
  "ownerName": "Google",
  "ownerDomain": "google.com",
  "rootUrl": "https://healthcare.googleapis.com/",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "parameters": {
    "$.xgafv": {
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ]
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "default": "true",
      "type": "boolean",
      "location": "query",
      "description": "Returns response with indentations and line breaks."
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "alt": {
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json"
    }
  },
  "protocol": "rest",
  "fullyEncodeReservedExpansion": true,
  "name": "healthcare",
  "id": "healthcare:v1",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "methods": {
            "get": {
              "parameters": {
                "name": {
                  "location": "path",
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "required": true,
                  "type": "string",
                  "description": "Resource name for the location."
                }
              },
              "id": "healthcare.projects.locations.get",
              "response": {
                "$ref": "Location"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
              "path": "v1/{+name}",
              "description": "Gets information about a location.",
              "parameterOrder": [
                "name"
              ]
            },
            "list": {
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "pageSize": {
                  "format": "int32",
                  "type": "integer",
                  "location": "query",
                  "description": "The standard list page size."
                },
                "name": {
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The resource that owns the locations collection, if applicable."
                },
                "pageToken": {
                  "location": "query",
                  "type": "string",
                  "description": "The standard list page token."
                },
                "filter": {
                  "description": "The standard list filter.",
                  "type": "string",
                  "location": "query"
                }
              },
              "flatPath": "v1/projects/{projectsId}/locations",
              "description": "Lists information about the supported locations for this service.",
              "id": "healthcare.projects.locations.list",
              "path": "v1/{+name}/locations"
            }
          },
          "resources": {
            "datasets": {
              "resources": {
                "hl7V2Stores": {
                  "methods": {
                    "delete": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.delete",
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "path": "v1/{+name}",
                      "description": "Deletes the specified HL7v2 store and removes all messages that it contains.",
                      "parameters": {
                        "name": {
                          "description": "The resource name of the HL7v2 store to delete.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                          "type": "string",
                          "location": "path"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "DELETE"
                    },
                    "testIamPermissions": {
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:testIamPermissions",
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.testIamPermissions",
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1/{+resource}:testIamPermissions",
                      "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "parameters": {
                        "resource": {
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "required": true
                        }
                      }
                    },
                    "list": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.list",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "pageSize": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Limit on the number of HL7v2 stores to return in a single response. If not specified, 100 is used. May not be larger than 1000.",
                          "location": "query"
                        },
                        "pageToken": {
                          "description": "The next_page_token value returned from the previous List request, if any.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "required": true,
                          "location": "path",
                          "description": "Name of the dataset.",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$"
                        },
                        "filter": {
                          "type": "string",
                          "location": "query",
                          "description": "Restricts stores returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `\"query text\"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `\"Comment = great\"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. Only filtering on labels is supported. For example, `labels.key=value`."
                        }
                      },
                      "path": "v1/{+parent}/hl7V2Stores",
                      "httpMethod": "GET",
                      "description": "Lists the HL7v2 stores in the given dataset.",
                      "parameterOrder": [
                        "parent"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores",
                      "response": {
                        "$ref": "ListHl7V2StoresResponse"
                      }
                    },
                    "setIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.setIamPolicy",
                      "path": "v1/{+resource}:setIamPolicy",
                      "httpMethod": "POST",
                      "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
                      "parameters": {
                        "resource": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                          "required": true,
                          "type": "string",
                          "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                          "location": "path"
                        }
                      },
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:setIamPolicy",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "patch": {
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.patch",
                      "httpMethod": "PATCH",
                      "path": "v1/{+name}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "request": {
                        "$ref": "Hl7V2Store"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}",
                      "parameters": {
                        "updateMask": {
                          "format": "google-fieldmask",
                          "type": "string",
                          "description": "The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                          "location": "query"
                        },
                        "name": {
                          "type": "string",
                          "required": true,
                          "description": "Resource name of the HL7v2 store, of the form `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                          "location": "path"
                        }
                      },
                      "description": "Updates the HL7v2 store.",
                      "response": {
                        "$ref": "Hl7V2Store"
                      }
                    },
                    "create": {
                      "path": "v1/{+parent}/hl7V2Stores",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "Hl7V2Store"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores",
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Creates a new HL7v2 store within the parent dataset.",
                      "parameters": {
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "description": "The name of the dataset this HL7v2 store belongs to.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        },
                        "hl7V2StoreId": {
                          "description": "The ID of the HL7v2 store that is being created. The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.",
                          "type": "string",
                          "location": "query"
                        }
                      },
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.create",
                      "request": {
                        "$ref": "Hl7V2Store"
                      }
                    },
                    "get": {
                      "path": "v1/{+name}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}",
                      "parameters": {
                        "name": {
                          "description": "The resource name of the HL7v2 store to get.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "httpMethod": "GET",
                      "description": "Gets the specified HL7v2 store.",
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.get",
                      "response": {
                        "$ref": "Hl7V2Store"
                      }
                    },
                    "getIamPolicy": {
                      "response": {
                        "$ref": "Policy"
                      },
                      "path": "v1/{+resource}:getIamPolicy",
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.getIamPolicy",
                      "parameterOrder": [
                        "resource"
                      ],
                      "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "options.requestedPolicyVersion": {
                          "location": "query",
                          "type": "integer",
                          "format": "int32",
                          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                        },
                        "resource": {
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                          "required": true,
                          "location": "path",
                          "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field."
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:getIamPolicy"
                    }
                  },
                  "resources": {
                    "messages": {
                      "methods": {
                        "patch": {
                          "id": "healthcare.projects.locations.datasets.hl7V2Stores.messages.patch",
                          "response": {
                            "$ref": "Message"
                          },
                          "description": "Update the message. The contents of the message in Message.data and data extracted from the contents such as Message.create_time cannot be altered. Only the Message.labels field is allowed to be updated. The labels in the request are merged with the existing set of labels. Existing labels with the same keys are updated.",
                          "parameterOrder": [
                            "name"
                          ],
                          "path": "v1/{+name}",
                          "parameters": {
                            "name": {
                              "required": true,
                              "type": "string",
                              "description": "Resource name of the Message, of the form `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`. Assigned by the server.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+/messages/[^/]+$",
                              "location": "path"
                            },
                            "updateMask": {
                              "description": "The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                              "type": "string",
                              "location": "query",
                              "format": "google-fieldmask"
                            }
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "request": {
                            "$ref": "Message"
                          },
                          "httpMethod": "PATCH",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages/{messagesId}"
                        },
                        "list": {
                          "response": {
                            "$ref": "ListMessagesResponse"
                          },
                          "parameters": {
                            "pageToken": {
                              "description": "The next_page_token value returned from the previous List request, if any.",
                              "location": "query",
                              "type": "string"
                            },
                            "parent": {
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                              "description": "Name of the HL7v2 store to retrieve messages from.",
                              "type": "string",
                              "location": "path"
                            },
                            "filter": {
                              "type": "string",
                              "location": "query",
                              "description": "Restricts messages returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `\"query text\"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `\"Comment = great\"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. Fields/functions available for filtering are: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = \"ADT\"`. * `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date \u003c \"2017-01-02\"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time \u003c \"2017-01-02T00:00:00-05:00\"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time \u003c \"2017-01-02T00:00:00-05:00\"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = \"ABC\"`. * `PatientId(value, type)`, which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, `PatientId(\"123456\", \"MRN\")`. * `labels.x`, a string value of the label with key `x` as set using the Message.labels map. For example, `labels.\"priority\"=\"high\"`. The operator `:*` can be used to assert the existence of a label. For example, `labels.\"priority\":*`."
                            },
                            "view": {
                              "type": "string",
                              "description": "Specifies the parts of the Message to return in the response. When unspecified, equivalent to BASIC. Setting this to anything other than BASIC with a `page_size` larger than the default can generate a large response, which impacts the performance of this method.",
                              "location": "query",
                              "enumDescriptions": [
                                "Not specified, equivalent to FULL.",
                                "Server responses include all the message fields except parsed_data field.",
                                "Server responses include all the message fields except data field.",
                                "Server responses include all the message fields.",
                                "Server responses include only the name field."
                              ],
                              "enum": [
                                "MESSAGE_VIEW_UNSPECIFIED",
                                "RAW_ONLY",
                                "PARSED_ONLY",
                                "FULL",
                                "BASIC"
                              ]
                            },
                            "orderBy": {
                              "type": "string",
                              "location": "query",
                              "description": "Orders messages returned by the specified order_by clause. Syntax: https://cloud.google.com/apis/design/design_patterns#sorting_order Fields available for ordering are: * `send_time`"
                            },
                            "pageSize": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Limit on the number of messages to return in a single response. If not specified, 100 is used. May not be larger than 1000.",
                              "location": "query"
                            }
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages",
                          "parameterOrder": [
                            "parent"
                          ],
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "httpMethod": "GET",
                          "path": "v1/{+parent}/messages",
                          "id": "healthcare.projects.locations.datasets.hl7V2Stores.messages.list",
                          "description": "Lists all the messages in the given HL7v2 store with support for filtering. Note: HL7v2 messages are indexed asynchronously, so there might be a slight delay between the time a message is created and when it can be found through a filter."
                        },
                        "create": {
                          "response": {
                            "$ref": "Message"
                          },
                          "path": "v1/{+parent}/messages",
                          "id": "healthcare.projects.locations.datasets.hl7V2Stores.messages.create",
                          "parameterOrder": [
                            "parent"
                          ],
                          "request": {
                            "$ref": "CreateMessageRequest"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "httpMethod": "POST",
                          "description": "Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Cloud Pub/Sub topic configured in projects.locations.datasets.hl7V2Stores.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Cloud Pub/Sub topic, the adapter transmits the message when a notification is received.",
                          "parameters": {
                            "parent": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                              "required": true,
                              "location": "path",
                              "description": "The name of the dataset this message belongs to.",
                              "type": "string"
                            }
                          }
                        },
                        "get": {
                          "path": "v1/{+name}",
                          "id": "healthcare.projects.locations.datasets.hl7V2Stores.messages.get",
                          "description": "Gets an HL7v2 message.",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages/{messagesId}",
                          "httpMethod": "GET",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "response": {
                            "$ref": "Message"
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "view": {
                              "description": "Specifies which parts of the Message resource to return in the response. When unspecified, equivalent to FULL.",
                              "location": "query",
                              "enumDescriptions": [
                                "Not specified, equivalent to FULL.",
                                "Server responses include all the message fields except parsed_data field.",
                                "Server responses include all the message fields except data field.",
                                "Server responses include all the message fields.",
                                "Server responses include only the name field."
                              ],
                              "type": "string",
                              "enum": [
                                "MESSAGE_VIEW_UNSPECIFIED",
                                "RAW_ONLY",
                                "PARSED_ONLY",
                                "FULL",
                                "BASIC"
                              ]
                            },
                            "name": {
                              "required": true,
                              "type": "string",
                              "description": "The resource name of the HL7v2 message to retrieve.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+/messages/[^/]+$",
                              "location": "path"
                            }
                          }
                        },
                        "delete": {
                          "parameters": {
                            "name": {
                              "location": "path",
                              "type": "string",
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+/messages/[^/]+$",
                              "description": "The resource name of the HL7v2 message to delete."
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Deletes an HL7v2 message.",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages/{messagesId}",
                          "response": {
                            "$ref": "Empty"
                          },
                          "id": "healthcare.projects.locations.datasets.hl7V2Stores.messages.delete",
                          "path": "v1/{+name}",
                          "httpMethod": "DELETE"
                        },
                        "ingest": {
                          "path": "v1/{+parent}/messages:ingest",
                          "parameters": {
                            "parent": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                              "location": "path",
                              "description": "The name of the HL7v2 store this message belongs to.",
                              "type": "string",
                              "required": true
                            }
                          },
                          "request": {
                            "$ref": "IngestMessageRequest"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages:ingest",
                          "parameterOrder": [
                            "parent"
                          ],
                          "description": "Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Cloud Pub/Sub topic configured in projects.locations.datasets.hl7V2Stores.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Cloud Pub/Sub topic, the adapter transmits the message when a notification is received. This method also generates a response containing an HL7v2 acknowledgement (`ACK`) message when successful or a negative acknowledgement (`NACK`) message in case of error, suitable for replying to HL7v2 interface systems that expect these acknowledgements.",
                          "httpMethod": "POST",
                          "id": "healthcare.projects.locations.datasets.hl7V2Stores.messages.ingest",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "response": {
                            "$ref": "IngestMessageResponse"
                          }
                        }
                      }
                    }
                  }
                },
                "fhirStores": {
                  "methods": {
                    "deidentify": {
                      "description": "De-identifies data from the source store and writes it to the destination store. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifyFhirStoreSummary. If errors occur, error is set. Error details are also logged to Cloud Logging (see [Viewing logs](/healthcare/docs/how-tos/logging)).",
                      "parameters": {
                        "sourceStore": {
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "description": "Source FHIR store resource name. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`."
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:deidentify",
                      "path": "v1/{+sourceStore}:deidentify",
                      "httpMethod": "POST",
                      "response": {
                        "$ref": "Operation"
                      },
                      "id": "healthcare.projects.locations.datasets.fhirStores.deidentify",
                      "parameterOrder": [
                        "sourceStore"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "request": {
                        "$ref": "DeidentifyFhirStoreRequest"
                      }
                    },
                    "get": {
                      "id": "healthcare.projects.locations.datasets.fhirStores.get",
                      "description": "Gets the configuration of the specified FHIR store.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1/{+name}",
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}",
                      "parameters": {
                        "name": {
                          "required": true,
                          "location": "path",
                          "description": "The resource name of the FHIR store to get.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "type": "string"
                        }
                      },
                      "response": {
                        "$ref": "FhirStore"
                      },
                      "httpMethod": "GET"
                    },
                    "getIamPolicy": {
                      "httpMethod": "GET",
                      "parameters": {
                        "resource": {
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field."
                        },
                        "options.requestedPolicyVersion": {
                          "type": "integer",
                          "location": "query",
                          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                          "format": "int32"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:getIamPolicy",
                      "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
                      "id": "healthcare.projects.locations.datasets.fhirStores.getIamPolicy",
                      "parameterOrder": [
                        "resource"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "path": "v1/{+resource}:getIamPolicy"
                    },
                    "create": {
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Creates a new FHIR store within the parent dataset.",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores",
                      "path": "v1/{+parent}/fhirStores",
                      "parameters": {
                        "fhirStoreId": {
                          "description": "The ID of the FHIR store that is being created. The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.",
                          "type": "string",
                          "location": "query"
                        },
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "description": "The name of the dataset this FHIR store belongs to.",
                          "type": "string",
                          "required": true,
                          "location": "path"
                        }
                      },
                      "response": {
                        "$ref": "FhirStore"
                      },
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.fhirStores.create",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "request": {
                        "$ref": "FhirStore"
                      }
                    },
                    "patch": {
                      "path": "v1/{+name}",
                      "parameters": {
                        "updateMask": {
                          "format": "google-fieldmask",
                          "type": "string",
                          "location": "query",
                          "description": "The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask"
                        },
                        "name": {
                          "description": "Output only. Resource name of the FHIR store, of the form `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "location": "path",
                          "type": "string",
                          "required": true
                        }
                      },
                      "request": {
                        "$ref": "FhirStore"
                      },
                      "description": "Updates the configuration of the specified FHIR store.",
                      "httpMethod": "PATCH",
                      "parameterOrder": [
                        "name"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "healthcare.projects.locations.datasets.fhirStores.patch",
                      "response": {
                        "$ref": "FhirStore"
                      }
                    },
                    "testIamPermissions": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:testIamPermissions",
                      "id": "healthcare.projects.locations.datasets.fhirStores.testIamPermissions",
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "location": "path",
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$"
                        }
                      },
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
                      "path": "v1/{+resource}:testIamPermissions",
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      }
                    },
                    "list": {
                      "parameters": {
                        "pageToken": {
                          "type": "string",
                          "description": "The next_page_token value returned from the previous List request, if any.",
                          "location": "query"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Limit on the number of FHIR stores to return in a single response. If not specified, 100 is used. May not be larger than 1000.",
                          "location": "query",
                          "format": "int32"
                        },
                        "parent": {
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "description": "Name of the dataset."
                        },
                        "filter": {
                          "type": "string",
                          "location": "query",
                          "description": "Restricts stores returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `\"query text\"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `\"Comment = great\"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. Only filtering on labels is supported, for example `labels.key=value`."
                        }
                      },
                      "id": "healthcare.projects.locations.datasets.fhirStores.list",
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores",
                      "response": {
                        "$ref": "ListFhirStoresResponse"
                      },
                      "path": "v1/{+parent}/fhirStores",
                      "parameterOrder": [
                        "parent"
                      ],
                      "description": "Lists the FHIR stores in the given dataset."
                    },
                    "export": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "POST",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:export",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "description": "The name of the FHIR store to export resource from, in the format of `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
                          "type": "string",
                          "required": true
                        }
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "Operation"
                      },
                      "description": "Export resources from the FHIR store to the specified destination. This method returns an Operation that can be used to track the status of the export by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing logs](/healthcare/docs/how-tos/logging)). Otherwise, when the operation finishes, a detailed response of type ExportResourcesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.",
                      "path": "v1/{+name}:export",
                      "request": {
                        "$ref": "ExportResourcesRequest"
                      },
                      "id": "healthcare.projects.locations.datasets.fhirStores.export"
                    },
                    "import": {
                      "response": {
                        "$ref": "Operation"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:import",
                      "parameters": {
                        "name": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "location": "path",
                          "description": "The name of the FHIR store to import FHIR resources to, in the format of `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
                          "type": "string"
                        }
                      },
                      "request": {
                        "$ref": "ImportResourcesRequest"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "path": "v1/{+name}:import",
                      "id": "healthcare.projects.locations.datasets.fhirStores.import",
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Imports resources to the FHIR store by loading data from the specified sources. This method is optimized to load large quantities of data using import semantics that ignore some FHIR store configuration options and are not suitable for all use cases. It is primarily intended to load data into an empty FHIR store that is not being used by other clients. In cases where this method is not appropriate, consider using ExecuteBundle to load data. Every resource in the input must contain a client-supplied ID. Each resource is stored using the supplied ID regardless of the enable_update_create setting on the FHIR store. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud audit logs and Cloud Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. The import process does not enforce referential integrity, regardless of the disable_referential_integrity setting on the FHIR store. This allows the import of resources with arbitrary interdependencies without considering grouping or ordering, but if the input data contains invalid references or if some resources fail to be imported, the FHIR store might be left in a state that violates referential integrity. The import process does not trigger Pub/Sub notification or BigQuery streaming update, regardless of how those are configured on the FHIR store. If a resource with the specified ID already exists, the most recent version of the resource is overwritten without creating a new historical version, regardless of the disable_resource_versioning setting on the FHIR store. If transient failures occur during the import, it's possible that successfully imported resources will be overwritten more than once. The import operation is idempotent unless the input data contains multiple valid resources with the same ID but different contents. In that case, after the import completes, the store contains exactly one resource with that ID but there is no ordering guarantee on which version of the contents it will have. The operation result counters do not count duplicate IDs as an error and count one success for each resource in the input, which might result in a success count larger than the number of resources in the FHIR store. This often occurs when importing data organized in bundles produced by Patient-everything where each bundle contains its own copy of a resource such as Practitioner that might be referred to by many patients. If some resources fail to import, for example due to parsing errors, successfully imported resources are not rolled back. The location and format of the input data is specified by the parameters in ImportResourcesRequest. Note that if no format is specified, this method assumes the `BUNDLE` format. When using the `BUNDLE` format this method ignores the `Bundle.type` field, except that `history` bundles are rejected, and does not apply any of the bundle processing semantics for batch or transaction bundles. Unlike in ExecuteBundle, transaction bundles are not executed as a single transaction and bundle-internal references are not rewritten. The bundle is treated as a collection of resources to be written as provided in `Bundle.entry.resource`, ignoring `Bundle.entry.request`. As an example, this allows the import of `searchset` bundles produced by a FHIR search or Patient-everything operation. This method returns an Operation that can be used to track the status of the import by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing logs](/healthcare/docs/how-tos/logging)). Otherwise, when the operation finishes, a detailed response of type ImportResourcesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata."
                    },
                    "setIamPolicy": {
                      "parameterOrder": [
                        "resource"
                      ],
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.fhirStores.setIamPolicy",
                      "response": {
                        "$ref": "Policy"
                      },
                      "parameters": {
                        "resource": {
                          "type": "string",
                          "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "location": "path"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:setIamPolicy",
                      "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
                      "path": "v1/{+resource}:setIamPolicy"
                    },
                    "delete": {
                      "httpMethod": "DELETE",
                      "description": "Deletes the specified FHIR store and removes all resources within it.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameterOrder": [
                        "name"
                      ],
                      "id": "healthcare.projects.locations.datasets.fhirStores.delete",
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameters": {
                        "name": {
                          "type": "string",
                          "description": "The resource name of the FHIR store to delete.",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}",
                      "path": "v1/{+name}"
                    }
                  },
                  "resources": {
                    "fhir": {
                      "methods": {
                        "read": {
                          "parameterOrder": [
                            "name"
                          ],
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.read",
                          "parameters": {
                            "name": {
                              "required": true,
                              "location": "path",
                              "description": "The name of the resource to retrieve.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+$",
                              "type": "string"
                            }
                          },
                          "httpMethod": "GET",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}",
                          "description": "Gets the contents of a FHIR resource. Implements the FHIR standard read interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#read), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#read), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#read)). Also supports the FHIR standard conditional read interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#cread), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#cread), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#cread)) specified by supplying an `If-Modified-Since` header with a date/time value or an `If-None-Match` header with an ETag value. On success, the response body will contain a JSON-encoded representation of the resource. Errors generated by the FHIR store will contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `read`, see [Getting a FHIR resource](/healthcare/docs/how-tos/fhir-resources#getting_a_fhir_resource).",
                          "path": "v1/{+name}"
                        },
                        "Resource-purge": {
                          "parameters": {
                            "name": {
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+$",
                              "type": "string",
                              "description": "The name of the resource to purge.",
                              "location": "path"
                            }
                          },
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "httpMethod": "DELETE",
                          "parameterOrder": [
                            "name"
                          ],
                          "path": "v1/{+name}/$purge",
                          "description": "Deletes all the historical versions of a resource (excluding the current version) from the FHIR store. To remove all versions of a resource, first delete the current version and then call this method. This is not a FHIR standard operation. For samples that show how to call `Resource-purge`, see [Deleting historical versions of a FHIR resource](/healthcare/docs/how-tos/fhir-resources#deleting_historical_versions_of_a_fhir_resource).",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.Resource-purge",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/$purge"
                        },
                        "update": {
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "path": "v1/{+name}",
                          "parameters": {
                            "name": {
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+$",
                              "required": true,
                              "type": "string",
                              "description": "The name of the resource to update."
                            }
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}",
                          "description": "Updates the entire contents of a resource. Implements the FHIR standard update interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#update), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#update), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#update)). If the specified resource does not exist and the FHIR store has enable_update_create set, creates the resource with the client-specified ID. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud audit logs and Cloud Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. The resource must contain an `id` element having an identical value to the ID in the REST path of the request. On success, the response body will contain a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store will contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `update`, see [Updating a FHIR resource](/healthcare/docs/how-tos/fhir-resources#updating_a_fhir_resource).",
                          "request": {
                            "$ref": "HttpBody"
                          },
                          "httpMethod": "PUT",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.update",
                          "parameterOrder": [
                            "name"
                          ]
                        },
                        "delete": {
                          "path": "v1/{+name}",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.delete",
                          "httpMethod": "DELETE",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}",
                          "description": "Deletes a FHIR resource. Implements the FHIR standard delete interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#delete), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#delete), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#delete)). Note: Unless resource versioning is disabled by setting the disable_resource_versioning flag on the FHIR store, the deleted resources will be moved to a history repository that can still be retrieved through vread and related methods, unless they are removed by the purge method. For samples that show how to call `delete`, see [Deleting a FHIR resource](/healthcare/docs/how-tos/fhir-resources#deleting_a_fhir_resource).",
                          "parameterOrder": [
                            "name"
                          ],
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+$",
                              "required": true,
                              "type": "string",
                              "location": "path",
                              "description": "The name of the resource to delete."
                            }
                          }
                        },
                        "vread": {
                          "description": "Gets the contents of a version (current or historical) of a FHIR resource by version ID. Implements the FHIR standard vread interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#vread), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#vread), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#vread)). On success, the response body will contain a JSON-encoded representation of the resource. Errors generated by the FHIR store will contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `vread`, see [Retrieving a FHIR resource version](/healthcare/docs/how-tos/fhir-resources#retrieving_a_fhir_resource_version).",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/_history/{_historyId}",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.vread",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+/_history/[^/]+$",
                              "location": "path",
                              "required": true,
                              "description": "The name of the resource version to retrieve.",
                              "type": "string"
                            }
                          },
                          "path": "v1/{+name}",
                          "httpMethod": "GET"
                        },
                        "capabilities": {
                          "parameterOrder": [
                            "name"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/metadata",
                          "httpMethod": "GET",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.capabilities",
                          "path": "v1/{+name}/fhir/metadata",
                          "parameters": {
                            "name": {
                              "required": true,
                              "description": "Name of the FHIR store to retrieve the capabilities for.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                              "location": "path",
                              "type": "string"
                            }
                          },
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "description": "Gets the FHIR capability statement ([STU3](http://hl7.org/implement/standards/fhir/STU3/capabilitystatement.html), [R4](http://hl7.org/implement/standards/fhir/R4/capabilitystatement.html)), or the [conformance statement](http://hl7.org/implement/standards/fhir/DSTU2/conformance.html) in the DSTU2 case for the store, which contains a description of functionality supported by the server. Implements the FHIR standard capabilities interaction ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#capabilities), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#capabilities)), or the [conformance interaction](http://hl7.org/implement/standards/fhir/DSTU2/http.html#conformance) in the DSTU2 case. On success, the response body will contain a JSON-encoded representation of a `CapabilityStatement` resource."
                        },
                        "search": {
                          "path": "v1/{+parent}/fhir/_search",
                          "request": {
                            "$ref": "SearchResourcesRequest"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.search",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "description": "Searches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the search semantics described in the FHIR Search specification ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html), [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources. * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body will contain a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store will contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server's capability statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be found in the FHIR Search Parameter Registry ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html), [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)). FHIR search parameters for DSTU2 can be found on each resource's definition page. Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `:recurse`. Supported search result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which can be overridden by the `_count` parameter up to a maximum limit of 1000. If there are additional results, the returned `Bundle` will contain pagination links. Resources with a total size larger than 5MB or a field count larger than 50,000 might not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the time a resource is created or changes and when the change is reflected in search results. For samples and detailed information, see [Searching for FHIR resources](/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search features](/healthcare/docs/how-tos/fhir-advanced-search).",
                          "parameterOrder": [
                            "parent"
                          ],
                          "httpMethod": "POST",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/_search",
                          "parameters": {
                            "parent": {
                              "description": "Name of the FHIR store to retrieve resources from.",
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                              "location": "path",
                              "required": true
                            }
                          }
                        },
                        "Patient-everything": {
                          "description": "Retrieves a Patient resource and resources related to that patient. Implements the FHIR extended operation Patient-everything ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/patient-operations.html#everything), [STU3](http://hl7.org/implement/standards/fhir/STU3/patient-operations.html#everything), [R4](http://hl7.org/implement/standards/fhir/R4/patient-operations.html#everything)). On success, the response body will contain a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the operation. Errors generated by the FHIR store will contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The resources in scope for the response are: * The patient resource itself. * All the resources directly referenced by the patient resource. * Resources directly referencing the patient resource that meet the inclusion criteria. The inclusion criteria are based on the membership rules in the patient compartment definition ([DSTU2](http://hl7.org/fhir/DSTU2/compartment-patient.html), [STU3](http://www.hl7.org/fhir/stu3/compartmentdefinition-patient.html), [R4](http://hl7.org/fhir/R4/compartmentdefinition-patient.html)), which details the eligible resource types and referencing search parameters. For samples that show how to call `Patient-everything`, see [Getting all patient compartment resources](/healthcare/docs/how-tos/fhir-resources#getting_all_patient_compartment_resources).",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameterOrder": [
                            "name"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Patient/{PatientId}/$everything",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "httpMethod": "GET",
                          "path": "v1/{+name}/$everything",
                          "parameters": {
                            "_since": {
                              "location": "query",
                              "description": "If provided, only resources updated after this time are returned. The time uses the format YYYY-MM-DDThh:mm:ss.sss+zz:zz. For example, `2015-02-07T13:28:17.239+02:00` or `2017-01-01T00:00:00Z`. The time must be specified to the second and include a time zone.",
                              "type": "string"
                            },
                            "_type": {
                              "type": "string",
                              "description": "String of comma-delimited FHIR resource types. If provided, only resources of the specified resource type(s) are returned.",
                              "location": "query"
                            },
                            "name": {
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/Patient/[^/]+$",
                              "description": "Name of the `Patient` resource for which the information is required.",
                              "location": "path",
                              "type": "string"
                            },
                            "_count": {
                              "type": "integer",
                              "description": "Maximum number of resources in a page. If not specified, 100 is used. May not be larger than 1000.",
                              "location": "query",
                              "format": "int32"
                            },
                            "_page_token": {
                              "location": "query",
                              "description": "Used to retrieve the next or previous page of results when using pagination. Set `_page_token` to the value of _page_token set in next or previous page links' url. Next and previous page are returned in the response bundle's links field, where `link.relation` is \"previous\" or \"next\". Omit `_page_token` if no previous request has been made.",
                              "type": "string"
                            },
                            "end": {
                              "type": "string",
                              "location": "query",
                              "description": "The response includes records prior to the end date. If no end date is provided, all records subsequent to the start date are in scope."
                            },
                            "start": {
                              "type": "string",
                              "description": "The response includes records subsequent to the start date. If no start date is provided, all records prior to the end date are in scope.",
                              "location": "query"
                            }
                          },
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.Patient-everything"
                        },
                        "patch": {
                          "description": "Updates part of an existing resource by applying the operations specified in a [JSON Patch](http://jsonpatch.com/) document. Implements the FHIR standard patch interaction ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#patch), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#patch)). DSTU2 doesn't define a patch method, but the server supports it in the same way it supports STU3. The request body must contain a JSON Patch document, and the request headers must contain `Content-Type: application/json-patch+json`. On success, the response body will contain a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store will contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `patch`, see [Patching a FHIR resource](/healthcare/docs/how-tos/fhir-resources#patching_a_fhir_resource).",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "request": {
                            "$ref": "HttpBody"
                          },
                          "path": "v1/{+name}",
                          "parameterOrder": [
                            "name"
                          ],
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameters": {
                            "name": {
                              "description": "The name of the resource to update.",
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+$",
                              "required": true,
                              "location": "path"
                            }
                          },
                          "httpMethod": "PATCH",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.patch",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}"
                        },
                        "create": {
                          "path": "v1/{+parent}/fhir/{+type}",
                          "request": {
                            "$ref": "HttpBody"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}",
                          "parameterOrder": [
                            "parent",
                            "type"
                          ],
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.create",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "description": "Creates a FHIR resource. Implements the FHIR standard create interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#create), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#create), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#create)), which creates a new resource with a server-assigned resource ID. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. On success, the response body will contain a JSON-encoded representation of the resource as it was created on the server, including the server-assigned resource ID and version ID. Errors generated by the FHIR store will contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `create`, see [Creating a FHIR resource](/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).",
                          "parameters": {
                            "type": {
                              "description": "The FHIR resource type to create, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html)). Must match the resource type in the provided content.",
                              "pattern": "^[^/]+$",
                              "location": "path",
                              "required": true,
                              "type": "string"
                            },
                            "parent": {
                              "location": "path",
                              "description": "The name of the FHIR store this resource belongs to.",
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                              "type": "string"
                            }
                          },
                          "httpMethod": "POST",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "history": {
                          "parameterOrder": [
                            "name"
                          ],
                          "httpMethod": "GET",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.history",
                          "parameters": {
                            "_page_token": {
                              "description": "Used to retrieve the first, previous, next, or last page of resource versions when using pagination. Value should be set to the value of `_page_token` set in next or previous page links' URLs. Next and previous page are returned in the response bundle's links field, where `link.relation` is \"previous\" or \"next\". Omit `_page_token` if no previous request has been made.",
                              "type": "string",
                              "location": "query"
                            },
                            "name": {
                              "description": "The name of the resource to retrieve.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+$",
                              "type": "string",
                              "required": true
                            },
                            "_since": {
                              "type": "string",
                              "location": "query",
                              "description": "Only include resource versions that were created at or after the given instant in time. The instant in time uses the format YYYY-MM-DDThh:mm:ss.sss+zz:zz (for example 2015-02-07T13:28:17.239+02:00 or 2017-01-01T00:00:00Z). The time must be specified to the second and include a time zone."
                            },
                            "_at": {
                              "type": "string",
                              "location": "query",
                              "description": "Only include resource versions that were current at some point during the time period specified in the date time value. The date parameter format is yyyy-mm-ddThh:mm:ss[Z|(+|-)hh:mm] Clients may specify any of the following: * An entire year: `_at=2019` * An entire month: `_at=2019-01` * A specific day: `_at=2019-01-20` * A specific second: `_at=2018-12-31T23:59:58Z`"
                            },
                            "_count": {
                              "format": "int32",
                              "location": "query",
                              "type": "integer",
                              "description": "The maximum number of search results on a page. If not specified, 100 is used. May not be larger than 1000."
                            }
                          },
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "path": "v1/{+name}/_history",
                          "description": "Lists all the versions of a resource (including the current version and deleted versions) from the FHIR store. Implements the per-resource form of the FHIR standard history interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#history), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#history), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#history)). On success, the response body will contain a JSON-encoded representation of a `Bundle` resource of type `history`, containing the version history sorted from most recent to oldest versions. Errors generated by the FHIR store will contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `history`, see [Listing FHIR resource versions](/healthcare/docs/how-tos/fhir-resources#listing_fhir_resource_versions).",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/_history"
                        },
                        "search-type": {
                          "description": "Searches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the search semantics described in the FHIR Search specification ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html), [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources. * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body will contain a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store will contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server's capability statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be found in the FHIR Search Parameter Registry ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html), [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)). FHIR search parameters for DSTU2 can be found on each resource's definition page. Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `:recurse`. Supported search result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which can be overridden by the `_count` parameter up to a maximum limit of 1000. If there are additional results, the returned `Bundle` will contain pagination links. Resources with a total size larger than 5MB or a field count larger than 50,000 might not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the time a resource is created or changes and when the change is reflected in search results. For samples and detailed information, see [Searching for FHIR resources](/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search features](/healthcare/docs/how-tos/fhir-advanced-search).",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "path": "v1/{+parent}/fhir/{resourceType}/_search",
                          "parameterOrder": [
                            "parent",
                            "resourceType"
                          ],
                          "parameters": {
                            "parent": {
                              "type": "string",
                              "description": "Name of the FHIR store to retrieve resources from.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$"
                            },
                            "resourceType": {
                              "location": "path",
                              "required": true,
                              "type": "string",
                              "description": "The FHIR resource type to search, such as Patient or Observation. For a complete list, see the FHIR Resource Index ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resourcelist.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/resourcelist.html), [R4](http://hl7.org/implement/standards/fhir/R4/resourcelist.html))."
                            }
                          },
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.search-type",
                          "request": {
                            "$ref": "SearchResourcesRequest"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{resourceType}/_search",
                          "httpMethod": "POST",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "executeBundle": {
                          "parameters": {
                            "parent": {
                              "required": true,
                              "location": "path",
                              "type": "string",
                              "description": "Name of the FHIR store in which this bundle will be executed.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$"
                            }
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "httpMethod": "POST",
                          "description": "Executes all the requests in the given Bundle. Implements the FHIR standard batch/transaction interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#transaction), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#transaction), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#transaction)). Supports all interactions within a bundle, except search. This method accepts Bundles of type `batch` and `transaction`, processing them according to the batch processing rules ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.1), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.1), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#brules)) and transaction processing rules ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.2), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.2), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#trules)). The request body must contain a JSON-encoded FHIR `Bundle` resource, and the request headers must contain `Content-Type: application/fhir+json`. For a batch bundle or a successful transaction the response body will contain a JSON-encoded representation of a `Bundle` resource of type `batch-response` or `transaction-response` containing one entry for each entry in the request, with the outcome of processing the entry. In the case of an error for a transaction bundle, the response body will contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `executeBundle`, see [Managing FHIR resources using FHIR bundles](/healthcare/docs/how-tos/fhir-bundles).",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.executeBundle",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "path": "v1/{+parent}/fhir",
                          "request": {
                            "$ref": "HttpBody"
                          }
                        }
                      }
                    }
                  }
                },
                "consentStores": {
                  "methods": {
                    "checkDataAccess": {
                      "description": "Checks if a particular data_id of a User data mapping in the specified consent store is consented for the specified use.",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:checkDataAccess",
                      "id": "healthcare.projects.locations.datasets.consentStores.checkDataAccess",
                      "path": "v1/{+consentStore}:checkDataAccess",
                      "httpMethod": "POST",
                      "parameters": {
                        "consentStore": {
                          "location": "path",
                          "type": "string",
                          "required": true,
                          "description": "Required. Name of the consent store where the requested data_id is stored, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$"
                        }
                      },
                      "parameterOrder": [
                        "consentStore"
                      ],
                      "request": {
                        "$ref": "CheckDataAccessRequest"
                      },
                      "response": {
                        "$ref": "CheckDataAccessResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "setIamPolicy": {
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "parameters": {
                        "resource": {
                          "required": true,
                          "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                          "location": "path",
                          "type": "string"
                        }
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
                      "id": "healthcare.projects.locations.datasets.consentStores.setIamPolicy",
                      "parameterOrder": [
                        "resource"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:setIamPolicy",
                      "path": "v1/{+resource}:setIamPolicy",
                      "httpMethod": "POST"
                    },
                    "delete": {
                      "description": "Deletes the specified consent store and removes all the consent store's data.",
                      "id": "healthcare.projects.locations.datasets.consentStores.delete",
                      "httpMethod": "DELETE",
                      "path": "v1/{+name}",
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}",
                      "parameters": {
                        "name": {
                          "required": true,
                          "type": "string",
                          "description": "Required. The resource name of the consent store to delete.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                          "location": "path"
                        }
                      }
                    },
                    "get": {
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "required": true,
                          "type": "string",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                          "description": "Required. The resource name of the consent store to get."
                        }
                      },
                      "response": {
                        "$ref": "ConsentStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "healthcare.projects.locations.datasets.consentStores.get",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}",
                      "path": "v1/{+name}",
                      "httpMethod": "GET",
                      "description": "Gets the specified consent store."
                    },
                    "queryAccessibleData": {
                      "httpMethod": "POST",
                      "parameters": {
                        "consentStore": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                          "location": "path",
                          "type": "string",
                          "description": "Required. Name of the consent store to retrieve User data mappings from."
                        }
                      },
                      "parameterOrder": [
                        "consentStore"
                      ],
                      "request": {
                        "$ref": "QueryAccessibleDataRequest"
                      },
                      "path": "v1/{+consentStore}:queryAccessibleData",
                      "description": "Queries all data_ids that are consented for a specified use in the given consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. Errors are logged to Cloud Logging (see [Viewing logs] (cloud.google.com/healthcare/docs/how-tos/logging)). For example, the following sample log entry shows a `failed to evaluate consent policy` error that occurred during a QueryAccessibleData call to consent store `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. ```json jsonPayload: { @type: \"type.googleapis.com/google.cloud.healthcare.logging.QueryAccessibleDataLogEntry\" error: { code: 9 message: \"failed to evaluate consent policy\" } resourceName: \"projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}\" } logName: \"projects/{project_id}/logs/healthcare.googleapis.com%2Fquery_accessible_data\" operation: { id: \"projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/operations/{operation_id}\" producer: \"healthcare.googleapis.com/QueryAccessibleData\" } receiveTimestamp: \"TIMESTAMP\" resource: { labels: { consent_store_id: \"{consent_store_id}\" dataset_id: \"{dataset_id}\" location: \"{location_id}\" project_id: \"{project_id}\" } type: \"healthcare_consent_store\" } severity: \"ERROR\" timestamp: \"TIMESTAMP\" ```",
                      "response": {
                        "$ref": "Operation"
                      },
                      "id": "healthcare.projects.locations.datasets.consentStores.queryAccessibleData",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:queryAccessibleData"
                    },
                    "evaluateUserConsents": {
                      "request": {
                        "$ref": "EvaluateUserConsentsRequest"
                      },
                      "parameters": {
                        "consentStore": {
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                          "description": "Required. Name of the consent store to retrieve User data mappings from."
                        }
                      },
                      "parameterOrder": [
                        "consentStore"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:evaluateUserConsents",
                      "description": "Evaluates the user's Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, which can cause a slight delay between the time mappings are created or updated and when they are included in EvaluateUserConsents results.",
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "healthcare.projects.locations.datasets.consentStores.evaluateUserConsents",
                      "path": "v1/{+consentStore}:evaluateUserConsents",
                      "response": {
                        "$ref": "EvaluateUserConsentsResponse"
                      }
                    },
                    "testIamPermissions": {
                      "parameterOrder": [
                        "resource"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:testIamPermissions",
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "parameters": {
                        "resource": {
                          "required": true,
                          "type": "string",
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                          "location": "path"
                        }
                      },
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.consentStores.testIamPermissions",
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "path": "v1/{+resource}:testIamPermissions",
                      "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "patch": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}",
                      "parameterOrder": [
                        "name"
                      ],
                      "id": "healthcare.projects.locations.datasets.consentStores.patch",
                      "description": "Updates the specified consent store.",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "name": {
                          "type": "string",
                          "location": "path",
                          "description": "Resource name of the consent store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. Cannot be changed after creation.",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                          "required": true
                        },
                        "updateMask": {
                          "format": "google-fieldmask",
                          "description": "Required. The update mask that applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask. Only the `labels`, `default_consent_ttl`, and `enable_consent_create_on_update` fields are allowed to be updated.",
                          "type": "string",
                          "location": "query"
                        }
                      },
                      "response": {
                        "$ref": "ConsentStore"
                      },
                      "httpMethod": "PATCH",
                      "path": "v1/{+name}",
                      "request": {
                        "$ref": "ConsentStore"
                      }
                    },
                    "create": {
                      "id": "healthcare.projects.locations.datasets.consentStores.create",
                      "response": {
                        "$ref": "ConsentStore"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Creates a new consent store in the parent dataset. Attempting to create a consent store with the same ID as an existing store fails with an ALREADY_EXISTS error.",
                      "path": "v1/{+parent}/consentStores",
                      "request": {
                        "$ref": "ConsentStore"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores",
                      "parameters": {
                        "consentStoreId": {
                          "location": "query",
                          "type": "string",
                          "description": "Required. The ID of the consent store to create. The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`. Cannot be changed after creation."
                        },
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "description": "Required. The name of the dataset this consent store belongs to.",
                          "location": "path",
                          "required": true,
                          "type": "string"
                        }
                      }
                    },
                    "list": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "pageSize": {
                          "format": "int32",
                          "type": "integer",
                          "description": "Optional. Limit on the number of consent stores to return in a single response. If not specified, 100 is used. May not be larger than 1000.",
                          "location": "query"
                        },
                        "filter": {
                          "type": "string",
                          "description": "Optional. Restricts the stores returned to those matching a filter. Only filtering on labels is supported. For example, `filter=labels.key=value`.",
                          "location": "query"
                        },
                        "pageToken": {
                          "type": "string",
                          "location": "query",
                          "description": "Optional. Token to retrieve the next page of results, or empty to get the first page."
                        },
                        "parent": {
                          "required": true,
                          "description": "Required. Name of the dataset.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "type": "string"
                        }
                      },
                      "response": {
                        "$ref": "ListConsentStoresResponse"
                      },
                      "httpMethod": "GET",
                      "path": "v1/{+parent}/consentStores",
                      "id": "healthcare.projects.locations.datasets.consentStores.list",
                      "description": "Lists the consent stores in the specified dataset."
                    },
                    "getIamPolicy": {
                      "id": "healthcare.projects.locations.datasets.consentStores.getIamPolicy",
                      "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "GET",
                      "path": "v1/{+resource}:getIamPolicy",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:getIamPolicy",
                      "parameters": {
                        "resource": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                          "type": "string",
                          "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                          "required": true
                        },
                        "options.requestedPolicyVersion": {
                          "format": "int32",
                          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                          "type": "integer",
                          "location": "query"
                        }
                      },
                      "parameterOrder": [
                        "resource"
                      ]
                    }
                  },
                  "resources": {
                    "attributeDefinitions": {
                      "methods": {
                        "create": {
                          "id": "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.create",
                          "parameters": {
                            "attributeDefinitionId": {
                              "description": "Required. The ID of the Attribute definition to create. The string must match the following regex: `_a-zA-Z{0,255}` and must not be a reserved keyword within the Common Expression Language as listed on https://github.com/google/cel-spec/blob/master/doc/langdef.md.",
                              "location": "query",
                              "type": "string"
                            },
                            "parent": {
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                              "description": "Required. The name of the consent store that this Attribute definition belongs to.",
                              "location": "path",
                              "required": true
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "AttributeDefinition"
                          },
                          "request": {
                            "$ref": "AttributeDefinition"
                          },
                          "description": "Creates a new Attribute definition in the parent consent store.",
                          "httpMethod": "POST",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions",
                          "path": "v1/{+parent}/attributeDefinitions"
                        },
                        "list": {
                          "path": "v1/{+parent}/attributeDefinitions",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameters": {
                            "pageSize": {
                              "location": "query",
                              "type": "integer",
                              "format": "int32",
                              "description": "Optional. Limit on the number of Attribute definitions to return in a single response. If not specified, 100 is used. May not be larger than 1000."
                            },
                            "filter": {
                              "description": "Optional. Restricts the attributes returned to those matching a filter. The only field available for filtering is `category`. For example, `filter=category=\\\"REQUEST\\\"`.",
                              "location": "query",
                              "type": "string"
                            },
                            "pageToken": {
                              "location": "query",
                              "description": "Optional. Token to retrieve the next page of results or empty to get the first page.",
                              "type": "string"
                            },
                            "parent": {
                              "description": "Required. Name of the consent store to retrieve Attribute definitions from.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "description": "Lists the Attribute definitions in the specified consent store.",
                          "response": {
                            "$ref": "ListAttributeDefinitionsResponse"
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "id": "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.list",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions",
                          "httpMethod": "GET"
                        },
                        "patch": {
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Updates the specified Attribute definition.",
                          "path": "v1/{+name}",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions/{attributeDefinitionsId}",
                          "httpMethod": "PATCH",
                          "parameterOrder": [
                            "name"
                          ],
                          "request": {
                            "$ref": "AttributeDefinition"
                          },
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/attributeDefinitions/[^/]+$",
                              "location": "path",
                              "description": "Resource name of the Attribute definition, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/attributeDefinitions/{attribute_definition_id}`. Cannot be changed after creation.",
                              "required": true,
                              "type": "string"
                            },
                            "updateMask": {
                              "description": "Required. The update mask that applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask. Only the `description`, `allowed_values`, `consent_default_values` and `data_mapping_default_value` fields can be updated. The updated `allowed_values` must contain all values from the previous `allowed_values`.",
                              "format": "google-fieldmask",
                              "type": "string",
                              "location": "query"
                            }
                          },
                          "id": "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.patch",
                          "response": {
                            "$ref": "AttributeDefinition"
                          }
                        },
                        "delete": {
                          "description": "Deletes the specified Attribute definition. Fails if the Attribute definition is referenced by any User data mapping, or the latest revision of any Consent.",
                          "response": {
                            "$ref": "Empty"
                          },
                          "httpMethod": "DELETE",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions/{attributeDefinitionsId}",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameters": {
                            "name": {
                              "required": true,
                              "location": "path",
                              "type": "string",
                              "description": "Required. The resource name of the Attribute definition to delete. To preserve referential integrity, Attribute definitions referenced by a User data mapping or the latest revision of a Consent cannot be deleted.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/attributeDefinitions/[^/]+$"
                            }
                          },
                          "path": "v1/{+name}",
                          "id": "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.delete",
                          "parameterOrder": [
                            "name"
                          ]
                        },
                        "get": {
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/attributeDefinitions/[^/]+$",
                              "location": "path",
                              "description": "Required. The resource name of the Attribute definition to get.",
                              "type": "string",
                              "required": true
                            }
                          },
                          "response": {
                            "$ref": "AttributeDefinition"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions/{attributeDefinitionsId}",
                          "id": "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.get",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "path": "v1/{+name}",
                          "httpMethod": "GET",
                          "description": "Gets the specified Attribute definition.",
                          "parameterOrder": [
                            "name"
                          ]
                        }
                      }
                    },
                    "consents": {
                      "methods": {
                        "deleteRevision": {
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:deleteRevision",
                          "parameters": {
                            "name": {
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/consents/[^/]+$",
                              "description": "Required. The resource name of the Consent revision to delete, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}@{revision_id}`. An INVALID_ARGUMENT error occurs if `revision_id` is not specified in the name.",
                              "location": "path",
                              "type": "string"
                            }
                          },
                          "httpMethod": "DELETE",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.deleteRevision",
                          "path": "v1/{+name}:deleteRevision",
                          "response": {
                            "$ref": "Empty"
                          },
                          "description": "Deletes the specified revision of a Consent. An INVALID_ARGUMENT error occurs if the specified revision is the latest revision.",
                          "parameterOrder": [
                            "name"
                          ]
                        },
                        "patch": {
                          "path": "v1/{+name}",
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Consent"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.patch",
                          "description": "Updates the latest revision of the specified Consent by committing a new revision with the changes. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `REJECTED` or `REVOKED` state.",
                          "request": {
                            "$ref": "Consent"
                          },
                          "parameters": {
                            "updateMask": {
                              "type": "string",
                              "format": "google-fieldmask",
                              "description": "Required. The update mask to apply to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask. Only the `user_id`, `policies`, `consent_artifact`, and `metadata` fields can be updated.",
                              "location": "query"
                            },
                            "name": {
                              "required": true,
                              "location": "path",
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/consents/[^/]+$",
                              "description": "Resource name of the Consent, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. Cannot be changed after creation."
                            }
                          },
                          "httpMethod": "PATCH"
                        },
                        "reject": {
                          "parameterOrder": [
                            "name"
                          ],
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.reject",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:reject",
                          "request": {
                            "$ref": "RejectConsentRequest"
                          },
                          "description": "Rejects the latest revision of the specified Consent by committing a new revision with `state` updated to `REJECTED`. If the latest revision of the specified Consent is in the `REJECTED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `ACTIVE` or `REVOKED` state.",
                          "path": "v1/{+name}:reject",
                          "parameters": {
                            "name": {
                              "required": true,
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/consents/[^/]+$",
                              "description": "Required. The resource name of the Consent to reject, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. An INVALID_ARGUMENT error occurs if `revision_id` is specified in the name.",
                              "location": "path"
                            }
                          },
                          "httpMethod": "POST",
                          "response": {
                            "$ref": "Consent"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "create": {
                          "httpMethod": "POST",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents",
                          "parameters": {
                            "parent": {
                              "description": "Required. Name of the consent store.",
                              "location": "path",
                              "required": true,
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$"
                            }
                          },
                          "path": "v1/{+parent}/consents",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.create",
                          "request": {
                            "$ref": "Consent"
                          },
                          "description": "Creates a new Consent in the parent consent store.",
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "Consent"
                          }
                        },
                        "revoke": {
                          "response": {
                            "$ref": "Consent"
                          },
                          "httpMethod": "POST",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:revoke",
                          "path": "v1/{+name}:revoke",
                          "description": "Revokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the specified Consent is in the `REVOKED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in `DRAFT` or `REJECTED` state.",
                          "parameterOrder": [
                            "name"
                          ],
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "request": {
                            "$ref": "RevokeConsentRequest"
                          },
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/consents/[^/]+$",
                              "location": "path",
                              "required": true,
                              "description": "Required. The resource name of the Consent to revoke, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. An INVALID_ARGUMENT error occurs if `revision_id` is specified in the name.",
                              "type": "string"
                            }
                          },
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.revoke"
                        },
                        "delete": {
                          "httpMethod": "DELETE",
                          "path": "v1/{+name}",
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.delete",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Deletes the Consent and its revisions. To keep a record of the Consent but mark it inactive, see [RevokeConsent]. To delete a revision of a Consent, see [DeleteConsentRevision]. This operation does not delete the related Consent artifact.",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "type": "string",
                              "location": "path",
                              "description": "Required. The resource name of the Consent to delete, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. An INVALID_ARGUMENT error occurs if `revision_id` is specified in the name.",
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/consents/[^/]+$"
                            }
                          },
                          "response": {
                            "$ref": "Empty"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}"
                        },
                        "get": {
                          "httpMethod": "GET",
                          "path": "v1/{+name}",
                          "description": "Gets the specified revision of a Consent, or the latest revision if `revision_id` is not specified in the resource name.",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.get",
                          "parameters": {
                            "name": {
                              "location": "path",
                              "description": "Required. The resource name of the Consent to retrieve, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. In order to retrieve a previous revision of the Consent, also provide the revision ID: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}@{revision_id}`",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/consents/[^/]+$",
                              "type": "string",
                              "required": true
                            }
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}",
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Consent"
                          }
                        },
                        "activate": {
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "httpMethod": "POST",
                          "description": "Activates the latest revision of the specified Consent by committing a new revision with `state` updated to `ACTIVE`. If the latest revision of the specified Consent is in the `ACTIVE` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `REJECTED` or `REVOKED` state.",
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/consents/[^/]+$",
                              "location": "path",
                              "description": "Required. The resource name of the Consent to activate, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}`. An INVALID_ARGUMENT error occurs if `revision_id` is specified in the name.",
                              "type": "string",
                              "required": true
                            }
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:activate",
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.activate",
                          "parameterOrder": [
                            "name"
                          ],
                          "request": {
                            "$ref": "ActivateConsentRequest"
                          },
                          "path": "v1/{+name}:activate",
                          "response": {
                            "$ref": "Consent"
                          }
                        },
                        "list": {
                          "parameters": {
                            "parent": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                              "required": true,
                              "location": "path",
                              "description": "Required. Name of the consent store to retrieve Consents from.",
                              "type": "string"
                            },
                            "pageToken": {
                              "description": "Optional. The next_page_token value returned from the previous List request, if any.",
                              "type": "string",
                              "location": "query"
                            },
                            "pageSize": {
                              "type": "integer",
                              "location": "query",
                              "format": "int32",
                              "description": "Optional. Limit on the number of Consents to return in a single response. If not specified, 100 is used. May not be larger than 1000."
                            },
                            "filter": {
                              "type": "string",
                              "description": "Optional. Restricts the Consents returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `\"query text\"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `\"Comment = great\"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The fields available for filtering are: - user_id. For example, `filter='user_id=\"user123\"'`. - consent_artifact - state - revision_create_time - metadata. For example, `filter=Metadata(\\\"testkey\\\")=\\\"value\\\"` or `filter=HasMetadata(\\\"testkey\\\")`.",
                              "location": "query"
                            }
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "httpMethod": "GET",
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.list",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents",
                          "path": "v1/{+parent}/consents",
                          "description": "Lists the Consent in the given consent store, returning each Consent's latest revision.",
                          "response": {
                            "$ref": "ListConsentsResponse"
                          }
                        },
                        "listRevisions": {
                          "parameterOrder": [
                            "name"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:listRevisions",
                          "response": {
                            "$ref": "ListConsentRevisionsResponse"
                          },
                          "httpMethod": "GET",
                          "parameters": {
                            "pageSize": {
                              "format": "int32",
                              "location": "query",
                              "description": "Optional. Limit on the number of revisions to return in a single response. If not specified, 100 is used. May not be larger than 1000.",
                              "type": "integer"
                            },
                            "pageToken": {
                              "description": "Optional. Token to retrieve the next page of results or empty if there are no more results in the list.",
                              "location": "query",
                              "type": "string"
                            },
                            "filter": {
                              "location": "query",
                              "description": "Optional. Restricts the revisions returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `\"query text\"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `\"Comment = great\"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. Fields available for filtering are: - user_id. For example, `filter='user_id=\"user123\"'`. - consent_artifact - state - revision_create_time - metadata. For example, `filter=Metadata(\\\"testkey\\\")=\\\"value\\\"` or `filter=HasMetadata(\\\"testkey\\\")`.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Required. The resource name of the Consent to retrieve revisions for.",
                              "type": "string",
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/consents/[^/]+$",
                              "location": "path"
                            }
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "Lists the revisions of the specified Consent in reverse chronological order.",
                          "path": "v1/{+name}:listRevisions",
                          "id": "healthcare.projects.locations.datasets.consentStores.consents.listRevisions"
                        }
                      }
                    },
                    "userDataMappings": {
                      "methods": {
                        "list": {
                          "httpMethod": "GET",
                          "parameters": {
                            "pageToken": {
                              "description": "Optional. Token to retrieve the next page of results, or empty to get the first page.",
                              "location": "query",
                              "type": "string"
                            },
                            "parent": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                              "required": true,
                              "type": "string",
                              "location": "path",
                              "description": "Required. Name of the consent store to retrieve User data mappings from."
                            },
                            "pageSize": {
                              "format": "int32",
                              "type": "integer",
                              "description": "Optional. Limit on the number of User data mappings to return in a single response. If not specified, 100 is used. May not be larger than 1000.",
                              "location": "query"
                            },
                            "filter": {
                              "description": "Optional. Restricts the User data mappings returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `\"query text\"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `\"Comment = great\"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The fields available for filtering are: - data_id - user_id. For example, `filter=user_id=\\\"user123\\\"`. - archived - archive_time",
                              "type": "string",
                              "location": "query"
                            }
                          },
                          "path": "v1/{+parent}/userDataMappings",
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "ListUserDataMappingsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "id": "healthcare.projects.locations.datasets.consentStores.userDataMappings.list",
                          "description": "Lists the User data mappings in the specified consent store.",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings"
                        },
                        "archive": {
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "request": {
                            "$ref": "ArchiveUserDataMappingRequest"
                          },
                          "description": "Archives the specified User data mapping.",
                          "httpMethod": "POST",
                          "parameters": {
                            "name": {
                              "description": "Required. The resource name of the User data mapping to archive.",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/userDataMappings/[^/]+$",
                              "type": "string",
                              "location": "path",
                              "required": true
                            }
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "path": "v1/{+name}:archive",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}:archive",
                          "response": {
                            "$ref": "ArchiveUserDataMappingResponse"
                          },
                          "id": "healthcare.projects.locations.datasets.consentStores.userDataMappings.archive"
                        },
                        "delete": {
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}",
                          "description": "Deletes the specified User data mapping.",
                          "httpMethod": "DELETE",
                          "parameters": {
                            "name": {
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/userDataMappings/[^/]+$",
                              "type": "string",
                              "location": "path",
                              "description": "Required. The resource name of the User data mapping to delete."
                            }
                          },
                          "path": "v1/{+name}",
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameterOrder": [
                            "name"
                          ],
                          "id": "healthcare.projects.locations.datasets.consentStores.userDataMappings.delete"
                        },
                        "patch": {
                          "httpMethod": "PATCH",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/userDataMappings/[^/]+$",
                              "description": "Resource name of the User data mapping, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/userDataMappings/{user_data_mapping_id}`.",
                              "location": "path",
                              "required": true
                            },
                            "updateMask": {
                              "format": "google-fieldmask",
                              "type": "string",
                              "location": "query",
                              "description": "Required. The update mask that applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask. Only the `data_id`, `user_id` and `resource_attributes` fields can be updated."
                            }
                          },
                          "response": {
                            "$ref": "UserDataMapping"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}",
                          "request": {
                            "$ref": "UserDataMapping"
                          },
                          "description": "Updates the specified User data mapping.",
                          "id": "healthcare.projects.locations.datasets.consentStores.userDataMappings.patch",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "path": "v1/{+name}"
                        },
                        "get": {
                          "path": "v1/{+name}",
                          "id": "healthcare.projects.locations.datasets.consentStores.userDataMappings.get",
                          "parameters": {
                            "name": {
                              "description": "Required. The resource name of the User data mapping to retrieve.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/userDataMappings/[^/]+$",
                              "type": "string",
                              "required": true
                            }
                          },
                          "description": "Gets the specified User data mapping.",
                          "parameterOrder": [
                            "name"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}",
                          "response": {
                            "$ref": "UserDataMapping"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "httpMethod": "GET"
                        },
                        "create": {
                          "path": "v1/{+parent}/userDataMappings",
                          "parameterOrder": [
                            "parent"
                          ],
                          "request": {
                            "$ref": "UserDataMapping"
                          },
                          "response": {
                            "$ref": "UserDataMapping"
                          },
                          "httpMethod": "POST",
                          "description": "Creates a new User data mapping in the parent consent store.",
                          "parameters": {
                            "parent": {
                              "description": "Required. Name of the consent store.",
                              "location": "path",
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                              "type": "string"
                            }
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "id": "healthcare.projects.locations.datasets.consentStores.userDataMappings.create",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings"
                        }
                      }
                    },
                    "consentArtifacts": {
                      "methods": {
                        "delete": {
                          "id": "healthcare.projects.locations.datasets.consentStores.consentArtifacts.delete",
                          "parameters": {
                            "name": {
                              "required": true,
                              "description": "Required. The resource name of the Consent artifact to delete. To preserve referential integrity, Consent artifacts referenced by the latest revision of a Consent cannot be deleted.",
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/consentArtifacts/[^/]+$",
                              "location": "path"
                            }
                          },
                          "httpMethod": "DELETE",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "path": "v1/{+name}",
                          "description": "Deletes the specified Consent artifact. Fails if the artifact is referenced by the latest revision of any Consent.",
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Empty"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts/{consentArtifactsId}"
                        },
                        "list": {
                          "path": "v1/{+parent}/consentArtifacts",
                          "id": "healthcare.projects.locations.datasets.consentStores.consentArtifacts.list",
                          "parameterOrder": [
                            "parent"
                          ],
                          "description": "Lists the Consent artifacts in the specified consent store.",
                          "httpMethod": "GET",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "response": {
                            "$ref": "ListConsentArtifactsResponse"
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts",
                          "parameters": {
                            "pageSize": {
                              "description": "Optional. Limit on the number of consent artifacts to return in a single response. If not specified, 100 is used. May not be larger than 1000.",
                              "format": "int32",
                              "type": "integer",
                              "location": "query"
                            },
                            "parent": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$",
                              "location": "path",
                              "description": "Required. Name of the consent store to retrieve consent artifacts from.",
                              "type": "string",
                              "required": true
                            },
                            "filter": {
                              "location": "query",
                              "description": "Optional. Restricts the artifacts returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `\"query text\"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `\"Comment = great\"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. The fields available for filtering are: - user_id. For example, `filter=user_id=\\\"user123\\\"`. - consent_content_version - metadata. For example, `filter=Metadata(\\\"testkey\\\")=\\\"value\\\"` or `filter=HasMetadata(\\\"testkey\\\")`.",
                              "type": "string"
                            },
                            "pageToken": {
                              "location": "query",
                              "type": "string",
                              "description": "Optional. The next_page_token value returned from the previous List request, if any."
                            }
                          }
                        },
                        "get": {
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameters": {
                            "name": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+/consentArtifacts/[^/]+$",
                              "type": "string",
                              "description": "Required. The resource name of the Consent artifact to retrieve.",
                              "location": "path",
                              "required": true
                            }
                          },
                          "id": "healthcare.projects.locations.datasets.consentStores.consentArtifacts.get",
                          "path": "v1/{+name}",
                          "description": "Gets the specified Consent artifact.",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts/{consentArtifactsId}",
                          "response": {
                            "$ref": "ConsentArtifact"
                          },
                          "httpMethod": "GET",
                          "parameterOrder": [
                            "name"
                          ]
                        },
                        "create": {
                          "path": "v1/{+parent}/consentArtifacts",
                          "description": "Creates a new Consent artifact in the parent consent store.",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameterOrder": [
                            "parent"
                          ],
                          "request": {
                            "$ref": "ConsentArtifact"
                          },
                          "httpMethod": "POST",
                          "id": "healthcare.projects.locations.datasets.consentStores.consentArtifacts.create",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts",
                          "parameters": {
                            "parent": {
                              "required": true,
                              "description": "Required. The name of the consent store this Consent artifact belongs to.",
                              "location": "path",
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/consentStores/[^/]+$"
                            }
                          },
                          "response": {
                            "$ref": "ConsentArtifact"
                          }
                        }
                      }
                    }
                  }
                },
                "operations": {
                  "methods": {
                    "cancel": {
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "location": "path",
                          "type": "string",
                          "description": "The name of the operation resource to be cancelled.",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/operations/[^/]+$"
                        }
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations/{operationsId}:cancel",
                      "request": {
                        "$ref": "CancelOperationRequest"
                      },
                      "response": {
                        "$ref": "Empty"
                      },
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.operations.cancel",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                      "path": "v1/{+name}:cancel"
                    },
                    "get": {
                      "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                      "parameterOrder": [
                        "name"
                      ],
                      "path": "v1/{+name}",
                      "id": "healthcare.projects.locations.datasets.operations.get",
                      "parameters": {
                        "name": {
                          "type": "string",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/operations/[^/]+$",
                          "required": true,
                          "description": "The name of the operation resource."
                        }
                      },
                      "httpMethod": "GET",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations/{operationsId}",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "Operation"
                      }
                    },
                    "list": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations",
                      "id": "healthcare.projects.locations.datasets.operations.list",
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "GET",
                      "parameters": {
                        "filter": {
                          "type": "string",
                          "description": "The standard list filter.",
                          "location": "query"
                        },
                        "pageSize": {
                          "description": "The standard list page size.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pageToken": {
                          "type": "string",
                          "description": "The standard list page token.",
                          "location": "query"
                        },
                        "name": {
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "location": "path",
                          "type": "string",
                          "description": "The name of the operation's parent resource."
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "ListOperationsResponse"
                      },
                      "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
                      "path": "v1/{+name}/operations"
                    }
                  }
                },
                "dicomStores": {
                  "resources": {
                    "studies": {
                      "methods": {
                        "searchForInstances": {
                          "parameterOrder": [
                            "parent",
                            "dicomWebPath"
                          ],
                          "description": "SearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "id": "healthcare.projects.locations.datasets.dicomStores.studies.searchForInstances",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "httpMethod": "GET",
                          "parameters": {
                            "dicomWebPath": {
                              "required": true,
                              "location": "path",
                              "type": "string",
                              "pattern": "^studies/[^/]+/instances$",
                              "description": "The path of the SearchForInstancesRequest DICOMweb request. For example, `instances`, `series/{series_uid}/instances`, or `studies/{study_uid}/instances`."
                            },
                            "parent": {
                              "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                              "location": "path",
                              "type": "string",
                              "required": true,
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$"
                            }
                          },
                          "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/instances"
                        },
                        "retrieveMetadata": {
                          "description": "RetrieveStudyMetadata returns instance associated with the given study presented as metadata with the bulk data removed. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveStudyMetadata, see [Metadata resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveStudyMetadata, see [Retrieving metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).",
                          "id": "healthcare.projects.locations.datasets.dicomStores.studies.retrieveMetadata",
                          "httpMethod": "GET",
                          "parameterOrder": [
                            "parent",
                            "dicomWebPath"
                          ],
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameters": {
                            "dicomWebPath": {
                              "pattern": "^studies/[^/]+/metadata$",
                              "required": true,
                              "description": "The path of the RetrieveStudyMetadata DICOMweb request. For example, `studies/{study_uid}/metadata`.",
                              "location": "path",
                              "type": "string"
                            },
                            "parent": {
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                              "location": "path",
                              "required": true,
                              "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`."
                            }
                          },
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/metadata"
                        },
                        "delete": {
                          "parameterOrder": [
                            "parent",
                            "dicomWebPath"
                          ],
                          "response": {
                            "$ref": "Operation"
                          },
                          "httpMethod": "DELETE",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameters": {
                            "parent": {
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                              "location": "path",
                              "required": true
                            },
                            "dicomWebPath": {
                              "pattern": "^studies/[^/]+$",
                              "type": "string",
                              "description": "The path of the DeleteStudy request. For example, `studies/{study_uid}`.",
                              "required": true,
                              "location": "path"
                            }
                          },
                          "description": "DeleteStudy deletes all instances within the given study. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. The method returns an Operation which will be marked successful when the deletion is complete. Warning: Inserting instances into a study while a delete operation is running for that study could result in the new instances not appearing in search results until the deletion operation finishes. For samples that show how to call DeleteStudy, see [Deleting a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).",
                          "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}",
                          "id": "healthcare.projects.locations.datasets.dicomStores.studies.delete"
                        },
                        "searchForSeries": {
                          "parameters": {
                            "parent": {
                              "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                              "location": "path",
                              "required": true,
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$"
                            },
                            "dicomWebPath": {
                              "pattern": "^studies/[^/]+/series$",
                              "description": "The path of the SearchForSeries DICOMweb request. For example, `series` or `studies/{study_uid}/series`.",
                              "required": true,
                              "type": "string",
                              "location": "path"
                            }
                          },
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameterOrder": [
                            "parent",
                            "dicomWebPath"
                          ],
                          "id": "healthcare.projects.locations.datasets.dicomStores.studies.searchForSeries",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "httpMethod": "GET",
                          "description": "SearchForSeries returns a list of matching series. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForSeries, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForSeries, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).",
                          "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}"
                        },
                        "storeInstances": {
                          "request": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "description": "StoreInstances stores DICOM instances associated with study instance unique identifiers (SUID). See [Store Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5). For details on the implementation of StoreInstances, see [Store transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call StoreInstances, see [Storing DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).",
                          "id": "healthcare.projects.locations.datasets.dicomStores.studies.storeInstances",
                          "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "httpMethod": "POST",
                          "parameterOrder": [
                            "parent",
                            "dicomWebPath"
                          ],
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}",
                          "parameters": {
                            "dicomWebPath": {
                              "pattern": "^studies/[^/]+$",
                              "type": "string",
                              "description": "The path of the StoreInstances DICOMweb request. For example, `studies/[{study_uid}]`. Note that the `study_uid` is optional.",
                              "location": "path",
                              "required": true
                            },
                            "parent": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                              "location": "path",
                              "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                              "type": "string",
                              "required": true
                            }
                          }
                        },
                        "retrieveStudy": {
                          "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}",
                          "description": "RetrieveStudy returns all instances within the given study. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveStudy, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveStudy, see [Retrieving DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "parameters": {
                            "parent": {
                              "type": "string",
                              "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                              "required": true
                            },
                            "dicomWebPath": {
                              "pattern": "^studies/[^/]+$",
                              "required": true,
                              "description": "The path of the RetrieveStudy DICOMweb request. For example, `studies/{study_uid}`.",
                              "type": "string",
                              "location": "path"
                            }
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "id": "healthcare.projects.locations.datasets.dicomStores.studies.retrieveStudy",
                          "parameterOrder": [
                            "parent",
                            "dicomWebPath"
                          ],
                          "httpMethod": "GET",
                          "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}"
                        }
                      },
                      "resources": {
                        "series": {
                          "resources": {
                            "instances": {
                              "resources": {
                                "frames": {
                                  "methods": {
                                    "retrieveRendered": {
                                      "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                                      "description": "RetrieveRenderedFrames returns instances associated with the given study, series, SOP Instance UID and frame numbers in an acceptable Rendered Media Type. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveRenderedFrames, see [Rendered resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveRenderedFrames, see [Retrieving consumer image formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).",
                                      "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                      ],
                                      "id": "healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveRendered",
                                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/frames/{framesId}/rendered",
                                      "response": {
                                        "$ref": "HttpBody"
                                      },
                                      "httpMethod": "GET",
                                      "parameterOrder": [
                                        "parent",
                                        "dicomWebPath"
                                      ],
                                      "parameters": {
                                        "dicomWebPath": {
                                          "required": true,
                                          "description": "The path of the RetrieveRenderedFrames DICOMweb request. For example, `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/frames/{frame_list}/rendered`.",
                                          "pattern": "^studies/[^/]+/series/[^/]+/instances/[^/]+/frames/[^/]+/rendered$",
                                          "location": "path",
                                          "type": "string"
                                        },
                                        "parent": {
                                          "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                                          "type": "string",
                                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                          "location": "path",
                                          "required": true
                                        }
                                      }
                                    },
                                    "retrieveFrames": {
                                      "description": "RetrieveFrames returns instances associated with the given study, series, SOP Instance UID and frame numbers. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4}. For details on the implementation of RetrieveFrames, see [DICOM frames](https://cloud.google.com/healthcare/docs/dicom#dicom_frames) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveFrames, see [Retrieving DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).",
                                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/frames/{framesId}",
                                      "response": {
                                        "$ref": "HttpBody"
                                      },
                                      "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                                      "parameters": {
                                        "parent": {
                                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                          "location": "path",
                                          "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                                          "required": true,
                                          "type": "string"
                                        },
                                        "dicomWebPath": {
                                          "description": "The path of the RetrieveFrames DICOMweb request. For example, `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/frames/{frame_list}`.",
                                          "pattern": "^studies/[^/]+/series/[^/]+/instances/[^/]+/frames/[^/]+$",
                                          "location": "path",
                                          "type": "string",
                                          "required": true
                                        }
                                      },
                                      "parameterOrder": [
                                        "parent",
                                        "dicomWebPath"
                                      ],
                                      "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                      ],
                                      "httpMethod": "GET",
                                      "id": "healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveFrames"
                                    }
                                  }
                                }
                              },
                              "methods": {
                                "delete": {
                                  "parameterOrder": [
                                    "parent",
                                    "dicomWebPath"
                                  ],
                                  "scopes": [
                                    "https://www.googleapis.com/auth/cloud-platform"
                                  ],
                                  "description": "DeleteInstance deletes an instance associated with the given study, series, and SOP Instance UID. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. Study and series search results can take a few seconds to be updated after an instance is deleted using DeleteInstance. For samples that show how to call DeleteInstance, see [Deleting a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).",
                                  "parameters": {
                                    "dicomWebPath": {
                                      "pattern": "^studies/[^/]+/series/[^/]+/instances/[^/]+$",
                                      "description": "The path of the DeleteInstance request. For example, `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}`.",
                                      "type": "string",
                                      "required": true,
                                      "location": "path"
                                    },
                                    "parent": {
                                      "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                                      "required": true,
                                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                      "type": "string",
                                      "location": "path"
                                    }
                                  },
                                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}",
                                  "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                                  "response": {
                                    "$ref": "Empty"
                                  },
                                  "id": "healthcare.projects.locations.datasets.dicomStores.studies.series.instances.delete",
                                  "httpMethod": "DELETE"
                                },
                                "retrieveMetadata": {
                                  "scopes": [
                                    "https://www.googleapis.com/auth/cloud-platform"
                                  ],
                                  "response": {
                                    "$ref": "HttpBody"
                                  },
                                  "id": "healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveMetadata",
                                  "parameters": {
                                    "dicomWebPath": {
                                      "required": true,
                                      "pattern": "^studies/[^/]+/series/[^/]+/instances/[^/]+/metadata$",
                                      "description": "The path of the RetrieveInstanceMetadata DICOMweb request. For example, `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/metadata`.",
                                      "type": "string",
                                      "location": "path"
                                    },
                                    "parent": {
                                      "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                      "required": true,
                                      "type": "string",
                                      "location": "path"
                                    }
                                  },
                                  "httpMethod": "GET",
                                  "description": "RetrieveInstanceMetadata returns instance associated with the given study, series, and SOP Instance UID presented as metadata with the bulk data removed. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveInstanceMetadata, see [Metadata resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveInstanceMetadata, see [Retrieving metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).",
                                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/metadata",
                                  "parameterOrder": [
                                    "parent",
                                    "dicomWebPath"
                                  ],
                                  "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}"
                                },
                                "retrieveInstance": {
                                  "parameters": {
                                    "dicomWebPath": {
                                      "type": "string",
                                      "required": true,
                                      "location": "path",
                                      "description": "The path of the RetrieveInstance DICOMweb request. For example, `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}`.",
                                      "pattern": "^studies/[^/]+/series/[^/]+/instances/[^/]+$"
                                    },
                                    "parent": {
                                      "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                                      "required": true,
                                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                      "type": "string",
                                      "location": "path"
                                    }
                                  },
                                  "scopes": [
                                    "https://www.googleapis.com/auth/cloud-platform"
                                  ],
                                  "description": "RetrieveInstance returns instance associated with the given study, series, and SOP Instance UID. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveInstance, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) and [DICOM instances](https://cloud.google.com/healthcare/docs/dicom#dicom_instances) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveInstance, see [Retrieving an instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_an_instance).",
                                  "httpMethod": "GET",
                                  "id": "healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveInstance",
                                  "response": {
                                    "$ref": "HttpBody"
                                  },
                                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}",
                                  "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                                  "parameterOrder": [
                                    "parent",
                                    "dicomWebPath"
                                  ]
                                },
                                "retrieveRendered": {
                                  "id": "healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveRendered",
                                  "httpMethod": "GET",
                                  "scopes": [
                                    "https://www.googleapis.com/auth/cloud-platform"
                                  ],
                                  "parameterOrder": [
                                    "parent",
                                    "dicomWebPath"
                                  ],
                                  "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                                  "parameters": {
                                    "parent": {
                                      "type": "string",
                                      "location": "path",
                                      "required": true,
                                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                      "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`."
                                    },
                                    "dicomWebPath": {
                                      "description": "The path of the RetrieveRenderedInstance DICOMweb request. For example, `studies/{study_uid}/series/{series_uid}/instances/{instance_uid}/rendered`.",
                                      "location": "path",
                                      "pattern": "^studies/[^/]+/series/[^/]+/instances/[^/]+/rendered$",
                                      "type": "string",
                                      "required": true
                                    }
                                  },
                                  "description": "RetrieveRenderedInstance returns instance associated with the given study, series, and SOP Instance UID in an acceptable Rendered Media Type. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveRenderedInstance, see [Rendered resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveRenderedInstance, see [Retrieving consumer image formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).",
                                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/rendered",
                                  "response": {
                                    "$ref": "HttpBody"
                                  }
                                }
                              }
                            }
                          },
                          "methods": {
                            "delete": {
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ],
                              "parameters": {
                                "dicomWebPath": {
                                  "type": "string",
                                  "description": "The path of the DeleteSeries request. For example, `studies/{study_uid}/series/{series_uid}`.",
                                  "pattern": "^studies/[^/]+/series/[^/]+$",
                                  "location": "path",
                                  "required": true
                                },
                                "parent": {
                                  "type": "string",
                                  "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                                  "location": "path",
                                  "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                  "required": true
                                }
                              },
                              "response": {
                                "$ref": "Operation"
                              },
                              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}",
                              "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                              "parameterOrder": [
                                "parent",
                                "dicomWebPath"
                              ],
                              "httpMethod": "DELETE",
                              "id": "healthcare.projects.locations.datasets.dicomStores.studies.series.delete",
                              "description": "DeleteSeries deletes all instances within the given study and series. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. The method returns an Operation which will be marked successful when the deletion is complete. Warning: Inserting instances into a series while a delete operation is running for that series could result in the new instances not appearing in search results until the deletion operation finishes. For samples that show how to call DeleteSeries, see [Deleting a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance)."
                            },
                            "retrieveMetadata": {
                              "parameters": {
                                "parent": {
                                  "location": "path",
                                  "required": true,
                                  "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                                  "type": "string",
                                  "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$"
                                },
                                "dicomWebPath": {
                                  "location": "path",
                                  "pattern": "^studies/[^/]+/series/[^/]+/metadata$",
                                  "required": true,
                                  "description": "The path of the RetrieveSeriesMetadata DICOMweb request. For example, `studies/{study_uid}/series/{series_uid}/metadata`.",
                                  "type": "string"
                                }
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ],
                              "response": {
                                "$ref": "HttpBody"
                              },
                              "httpMethod": "GET",
                              "id": "healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveMetadata",
                              "description": "RetrieveSeriesMetadata returns instance associated with the given study and series, presented as metadata with the bulk data removed. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveSeriesMetadata, see [Metadata resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveSeriesMetadata, see [Retrieving metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).",
                              "parameterOrder": [
                                "parent",
                                "dicomWebPath"
                              ],
                              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/metadata",
                              "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}"
                            },
                            "retrieveSeries": {
                              "description": "RetrieveSeries returns all instances within the given study and series. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveSeries, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveSeries, see [Retrieving DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).",
                              "parameterOrder": [
                                "parent",
                                "dicomWebPath"
                              ],
                              "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}",
                              "parameters": {
                                "parent": {
                                  "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                                  "required": true,
                                  "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                  "location": "path",
                                  "type": "string"
                                },
                                "dicomWebPath": {
                                  "required": true,
                                  "description": "The path of the RetrieveSeries DICOMweb request. For example, `studies/{study_uid}/series/{series_uid}`.",
                                  "location": "path",
                                  "pattern": "^studies/[^/]+/series/[^/]+$",
                                  "type": "string"
                                }
                              },
                              "id": "healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveSeries",
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ],
                              "httpMethod": "GET",
                              "response": {
                                "$ref": "HttpBody"
                              }
                            },
                            "searchForInstances": {
                              "parameters": {
                                "parent": {
                                  "type": "string",
                                  "required": true,
                                  "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                  "location": "path",
                                  "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`."
                                },
                                "dicomWebPath": {
                                  "description": "The path of the SearchForInstancesRequest DICOMweb request. For example, `instances`, `series/{series_uid}/instances`, or `studies/{study_uid}/instances`.",
                                  "location": "path",
                                  "type": "string",
                                  "required": true,
                                  "pattern": "^studies/[^/]+/series/[^/]+/instances$"
                                }
                              },
                              "description": "SearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).",
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ],
                              "parameterOrder": [
                                "parent",
                                "dicomWebPath"
                              ],
                              "id": "healthcare.projects.locations.datasets.dicomStores.studies.series.searchForInstances",
                              "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances",
                              "httpMethod": "GET",
                              "response": {
                                "$ref": "HttpBody"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "methods": {
                    "patch": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}",
                      "response": {
                        "$ref": "DicomStore"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "request": {
                        "$ref": "DicomStore"
                      },
                      "id": "healthcare.projects.locations.datasets.dicomStores.patch",
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "type": "string",
                          "required": true,
                          "location": "path",
                          "description": "Resource name of the DICOM store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`."
                        },
                        "updateMask": {
                          "location": "query",
                          "description": "The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                          "type": "string",
                          "format": "google-fieldmask"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "description": "Updates the specified DICOM store.",
                      "path": "v1/{+name}",
                      "httpMethod": "PATCH"
                    },
                    "export": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:export",
                      "id": "healthcare.projects.locations.datasets.dicomStores.export",
                      "response": {
                        "$ref": "Operation"
                      },
                      "path": "v1/{+name}:export",
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "request": {
                        "$ref": "ExportDicomDataRequest"
                      },
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "location": "path",
                          "required": true,
                          "description": "The DICOM store resource name from which to export the data. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                          "type": "string"
                        }
                      },
                      "description": "Exports data to the specified destination by copying it from the DICOM store. Errors are also logged to Cloud Logging. For more information, see [Viewing logs](/healthcare/docs/how-tos/logging). The metadata field type is OperationMetadata."
                    },
                    "list": {
                      "parameterOrder": [
                        "parent"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "path": "v1/{+parent}/dicomStores",
                      "parameters": {
                        "parent": {
                          "description": "Name of the dataset.",
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "type": "string"
                        },
                        "filter": {
                          "description": "Restricts stores returned to those matching a filter. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `\"query text\"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `\"Comment = great\"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`\u003c`, `\u003c=`, `\u003e`, `\u003e=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. Only filtering on labels is supported. For example, `labels.key=value`.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageToken": {
                          "location": "query",
                          "description": "The next_page_token value returned from the previous List request, if any.",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Limit on the number of DICOM stores to return in a single response. If not specified, 100 is used. May not be larger than 1000.",
                          "location": "query",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "httpMethod": "GET",
                      "description": "Lists the DICOM stores in the given dataset.",
                      "id": "healthcare.projects.locations.datasets.dicomStores.list",
                      "response": {
                        "$ref": "ListDicomStoresResponse"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores"
                    },
                    "get": {
                      "response": {
                        "$ref": "DicomStore"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "healthcare.projects.locations.datasets.dicomStores.get",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}",
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "description": "The resource name of the DICOM store to get."
                        }
                      },
                      "path": "v1/{+name}",
                      "httpMethod": "GET",
                      "description": "Gets the specified DICOM store."
                    },
                    "deidentify": {
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "request": {
                        "$ref": "DeidentifyDicomStoreRequest"
                      },
                      "httpMethod": "POST",
                      "path": "v1/{+sourceStore}:deidentify",
                      "id": "healthcare.projects.locations.datasets.dicomStores.deidentify",
                      "parameterOrder": [
                        "sourceStore"
                      ],
                      "response": {
                        "$ref": "Operation"
                      },
                      "parameters": {
                        "sourceStore": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "location": "path",
                          "type": "string",
                          "description": "Source DICOM store resource name. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                          "required": true
                        }
                      },
                      "description": "De-identifies data from the source store and writes it to the destination store. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifyDicomStoreSummary. If errors occur, error is set. The LRO result may still be successful if de-identification fails for some DICOM instances. The output DICOM store will not contain these failed resources. Failed resource totals are tracked in Operation.metadata. Error details are also logged to Cloud Logging (see [Viewing logs](/healthcare/docs/how-tos/logging)).",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:deidentify"
                    },
                    "import": {
                      "path": "v1/{+name}:import",
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameterOrder": [
                        "name"
                      ],
                      "id": "healthcare.projects.locations.datasets.dicomStores.import",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:import",
                      "request": {
                        "$ref": "ImportDicomDataRequest"
                      },
                      "description": "Imports data into the DICOM store by copying it from the specified source. Errors are logged to Cloud Logging. For more information, see [Viewing logs](/healthcare/docs/how-tos/logging). The metadata field type is OperationMetadata.",
                      "httpMethod": "POST",
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "description": "The name of the DICOM store resource into which the data is imported. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                          "required": true,
                          "type": "string",
                          "location": "path"
                        }
                      }
                    },
                    "getIamPolicy": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:getIamPolicy",
                      "path": "v1/{+resource}:getIamPolicy",
                      "id": "healthcare.projects.locations.datasets.dicomStores.getIamPolicy",
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "resource": {
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "required": true,
                          "type": "string",
                          "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field."
                        },
                        "options.requestedPolicyVersion": {
                          "type": "integer",
                          "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                          "location": "query",
                          "format": "int32"
                        }
                      },
                      "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
                      "httpMethod": "GET"
                    },
                    "testIamPermissions": {
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:testIamPermissions",
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "id": "healthcare.projects.locations.datasets.dicomStores.testIamPermissions",
                      "path": "v1/{+resource}:testIamPermissions",
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "type": "string"
                        }
                      },
                      "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
                      "parameterOrder": [
                        "resource"
                      ]
                    },
                    "storeInstances": {
                      "request": {
                        "$ref": "HttpBody"
                      },
                      "description": "StoreInstances stores DICOM instances associated with study instance unique identifiers (SUID). See [Store Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5). For details on the implementation of StoreInstances, see [Store transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call StoreInstances, see [Storing DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).",
                      "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                      "parameters": {
                        "parent": {
                          "type": "string",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                          "location": "path"
                        },
                        "dicomWebPath": {
                          "pattern": "^studies$",
                          "location": "path",
                          "required": true,
                          "description": "The path of the StoreInstances DICOMweb request. For example, `studies/[{study_uid}]`. Note that the `study_uid` is optional.",
                          "type": "string"
                        }
                      },
                      "response": {
                        "$ref": "HttpBody"
                      },
                      "id": "healthcare.projects.locations.datasets.dicomStores.storeInstances",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "parent",
                        "dicomWebPath"
                      ]
                    },
                    "delete": {
                      "parameters": {
                        "name": {
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "required": true,
                          "description": "The resource name of the DICOM store to delete.",
                          "location": "path"
                        }
                      },
                      "id": "healthcare.projects.locations.datasets.dicomStores.delete",
                      "response": {
                        "$ref": "Empty"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}",
                      "parameterOrder": [
                        "name"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "DELETE",
                      "description": "Deletes the specified DICOM store and removes all images that are contained within it.",
                      "path": "v1/{+name}"
                    },
                    "create": {
                      "description": "Creates a new DICOM store within the parent dataset.",
                      "request": {
                        "$ref": "DicomStore"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores",
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "DicomStore"
                      },
                      "id": "healthcare.projects.locations.datasets.dicomStores.create",
                      "parameters": {
                        "parent": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "location": "path",
                          "description": "The name of the dataset this DICOM store belongs to.",
                          "type": "string",
                          "required": true
                        },
                        "dicomStoreId": {
                          "location": "query",
                          "description": "The ID of the DICOM store that is being created. Any string value up to 256 characters in length.",
                          "type": "string"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "httpMethod": "POST",
                      "path": "v1/{+parent}/dicomStores"
                    },
                    "searchForInstances": {
                      "description": "SearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/instances",
                      "parameterOrder": [
                        "parent",
                        "dicomWebPath"
                      ],
                      "response": {
                        "$ref": "HttpBody"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "healthcare.projects.locations.datasets.dicomStores.searchForInstances",
                      "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                          "type": "string"
                        },
                        "dicomWebPath": {
                          "pattern": "^instances$",
                          "required": true,
                          "location": "path",
                          "description": "The path of the SearchForInstancesRequest DICOMweb request. For example, `instances`, `series/{series_uid}/instances`, or `studies/{study_uid}/instances`.",
                          "type": "string"
                        }
                      },
                      "httpMethod": "GET"
                    },
                    "setIamPolicy": {
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:setIamPolicy",
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "id": "healthcare.projects.locations.datasets.dicomStores.setIamPolicy",
                      "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                          "type": "string",
                          "location": "path",
                          "required": true,
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$"
                        }
                      },
                      "path": "v1/{+resource}:setIamPolicy"
                    },
                    "searchForSeries": {
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameterOrder": [
                        "parent",
                        "dicomWebPath"
                      ],
                      "id": "healthcare.projects.locations.datasets.dicomStores.searchForSeries",
                      "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/series",
                      "parameters": {
                        "dicomWebPath": {
                          "required": true,
                          "location": "path",
                          "description": "The path of the SearchForSeries DICOMweb request. For example, `series` or `studies/{study_uid}/series`.",
                          "pattern": "^series$",
                          "type": "string"
                        },
                        "parent": {
                          "required": true,
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "type": "string",
                          "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`."
                        }
                      },
                      "description": "SearchForSeries returns a list of matching series. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForSeries, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForSeries, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).",
                      "response": {
                        "$ref": "HttpBody"
                      }
                    },
                    "searchForStudies": {
                      "parameterOrder": [
                        "parent",
                        "dicomWebPath"
                      ],
                      "id": "healthcare.projects.locations.datasets.dicomStores.searchForStudies",
                      "path": "v1/{+parent}/dicomWeb/{+dicomWebPath}",
                      "httpMethod": "GET",
                      "parameters": {
                        "dicomWebPath": {
                          "type": "string",
                          "pattern": "^studies$",
                          "description": "The path of the SearchForStudies DICOMweb request. For example, `studies`.",
                          "location": "path",
                          "required": true
                        },
                        "parent": {
                          "required": true,
                          "description": "The name of the DICOM store that is being accessed. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                          "type": "string",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "response": {
                        "$ref": "HttpBody"
                      },
                      "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies",
                      "description": "SearchForStudies returns a list of matching studies. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the implementation of SearchForStudies, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForStudies, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames)."
                    }
                  }
                }
              },
              "methods": {
                "create": {
                  "id": "healthcare.projects.locations.datasets.create",
                  "description": "Creates a new health dataset. Results are returned through the Operation interface which returns either an `Operation.response` which contains a Dataset or `Operation.error`. The metadata field type is OperationMetadata.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets",
                  "response": {
                    "$ref": "Operation"
                  },
                  "request": {
                    "$ref": "Dataset"
                  },
                  "path": "v1/{+parent}/datasets",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "datasetId": {
                      "location": "query",
                      "type": "string",
                      "description": "The ID of the dataset that is being created. The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`."
                    },
                    "parent": {
                      "type": "string",
                      "description": "The name of the project where the server creates the dataset. For example, `projects/{project_id}/locations/{location_id}`.",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "parent"
                  ]
                },
                "delete": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}",
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                      "description": "The name of the dataset to delete. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "healthcare.projects.locations.datasets.delete",
                  "description": "Deletes the specified health dataset and all data contained in the dataset. Deleting a dataset does not affect the sources from which the dataset was imported (if any).",
                  "response": {
                    "$ref": "Empty"
                  }
                },
                "testIamPermissions": {
                  "parameters": {
                    "resource": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field."
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
                  "path": "v1/{+resource}:testIamPermissions",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:testIamPermissions",
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "healthcare.projects.locations.datasets.testIamPermissions",
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  }
                },
                "patch": {
                  "parameters": {
                    "name": {
                      "required": true,
                      "type": "string",
                      "location": "path",
                      "description": "Resource name of the dataset, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$"
                    },
                    "updateMask": {
                      "type": "string",
                      "format": "google-fieldmask",
                      "description": "The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                      "location": "query"
                    }
                  },
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Dataset"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates dataset metadata.",
                  "id": "healthcare.projects.locations.datasets.patch",
                  "httpMethod": "PATCH",
                  "request": {
                    "$ref": "Dataset"
                  }
                },
                "getIamPolicy": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:getIamPolicy",
                  "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
                  "path": "v1/{+resource}:getIamPolicy",
                  "parameters": {
                    "options.requestedPolicyVersion": {
                      "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
                      "type": "integer",
                      "location": "query",
                      "format": "int32"
                    },
                    "resource": {
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$"
                    }
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "id": "healthcare.projects.locations.datasets.getIamPolicy",
                  "parameterOrder": [
                    "resource"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET"
                },
                "setIamPolicy": {
                  "id": "healthcare.projects.locations.datasets.setIamPolicy",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "Policy"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:setIamPolicy",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$"
                    }
                  },
                  "path": "v1/{+resource}:setIamPolicy",
                  "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."
                },
                "get": {
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "healthcare.projects.locations.datasets.get",
                  "description": "Gets any metadata associated with a dataset.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}",
                  "path": "v1/{+name}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "The name of the dataset to read. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$"
                    }
                  },
                  "response": {
                    "$ref": "Dataset"
                  }
                },
                "list": {
                  "response": {
                    "$ref": "ListDatasetsResponse"
                  },
                  "description": "Lists the health datasets in the current project.",
                  "path": "v1/{+parent}/datasets",
                  "httpMethod": "GET",
                  "id": "healthcare.projects.locations.datasets.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "pageSize": {
                      "location": "query",
                      "type": "integer",
                      "description": "The maximum number of items to return. If not specified, 100 is used. May not be larger than 1000.",
                      "format": "int32"
                    },
                    "parent": {
                      "description": "The name of the project whose datasets should be listed. For example, `projects/{project_id}/locations/{location_id}`.",
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    },
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "The next_page_token value returned from a previous List request, if any."
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "deidentify": {
                  "id": "healthcare.projects.locations.datasets.deidentify",
                  "parameters": {
                    "sourceDataset": {
                      "required": true,
                      "description": "Source dataset resource name. For example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                      "location": "path"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new dataset containing de-identified data from the source dataset. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifySummary. If errors occur, error is set. The LRO result may still be successful if de-identification fails for some DICOM instances. The new de-identified dataset will not contain these failed resources. Failed resource totals are tracked in Operation.metadata. Error details are also logged to Cloud Logging. For more information, see [Viewing logs](/healthcare/docs/how-tos/logging).",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:deidentify",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "DeidentifyDatasetRequest"
                  },
                  "path": "v1/{+sourceDataset}:deidentify",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "sourceDataset"
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "description": "Manage, store, and access healthcare data in Google Cloud Platform.",
  "canonicalName": "Cloud Healthcare",
  "mtlsRootUrl": "https://healthcare.mtls.googleapis.com/",
  "version_module": true,
  "title": "Cloud Healthcare API",
  "baseUrl": "https://healthcare.googleapis.com/",
  "version": "v1",
  "discoveryVersion": "v1",
  "servicePath": ""
}
