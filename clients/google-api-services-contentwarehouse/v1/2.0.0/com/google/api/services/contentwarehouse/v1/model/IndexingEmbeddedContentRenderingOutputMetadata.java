/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Small values from rendering output. It's stored as a column in alexandria document table. Next
 * tag available: 30
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingEmbeddedContentRenderingOutputMetadata extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingEmbeddedContentRenderRequestConfigConfigParams configParams;

  /**
   * The exceptions observed during the rendering. In bit-field encoding of enum values of
   * RenderResponse.RenderingException.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long exceptions;

  /**
   * Total GCU time for rendering the document in millisecond. This data is from
   * render_stats.render_cost_mgcu in RenderResponse proto. Note that this is *experimental* field.
   * Please check with rendering-infra@ if you want to use.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer experimentalRenderTimeMsec;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingEmbeddedContentOutputGenerationTimestamps generationTimestamps;

  /**
   * The importance value of the rendered document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer importance;

  /**
   * The timestamp of last new content probing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer lastNewContentProbingTimestamp;

  /**
   * Percentage of new tokens in the rendered the document content.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double newTokensPercentageAfterRendering;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numNewTokensFoundInRendering;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean refresh;

  /**
   * A collection of fields to track stats on cache use in the Rendering microservice.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingEmbeddedContentRenderCacheStats renderCacheStats;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String renderEngine;

  /**
   * Different types of events which happened during rendering.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HtmlrenderWebkitHeadlessProtoRenderEvent> renderEvent;

  static {
    // hack to force ProGuard to consider HtmlrenderWebkitHeadlessProtoRenderEvent used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(HtmlrenderWebkitHeadlessProtoRenderEvent.class);
  }

  /**
   * The CL from which the render engine was built.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long renderServerCl;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double renderTreeQualityScore;

  /**
   * Short signature (usually less than 1 KB) which captures a perceptual hash on the rendered
   * image. This is used to determine whether successive renderings should be output. See the
   * library in googlen/snapshot/shared/similarity.* for more info about how this value is
   * interpreted and used.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String renderedSnapshotSignature;

  /**
   * Current time in microseconds the document is going through rendering system. This field is set
   * regardless of whether the document is being rendered or if we are skipping rendering by using a
   * cache.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long renderedTimeUsec;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingEmbeddedContentRenderingFetchStats renderingFetchStats;

  /**
   * The corpus selection result. Can be used for offline analysis.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private IndexingEmbeddedContentSelectionResult selectionResult;

  /**
   * These scores are copied from htmlrender_webkit_headless_proto.Document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double snapshotQualityScore;

  /**
   * True if there were any missing resources during the rendering.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean withMissingResources;

  /**
   * @return value or {@code null} for none
   */
  public IndexingEmbeddedContentRenderRequestConfigConfigParams getConfigParams() {
    return configParams;
  }

  /**
   * @param configParams configParams or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setConfigParams(IndexingEmbeddedContentRenderRequestConfigConfigParams configParams) {
    this.configParams = configParams;
    return this;
  }

  /**
   * The exceptions observed during the rendering. In bit-field encoding of enum values of
   * RenderResponse.RenderingException.
   * @return value or {@code null} for none
   */
  public java.lang.Long getExceptions() {
    return exceptions;
  }

  /**
   * The exceptions observed during the rendering. In bit-field encoding of enum values of
   * RenderResponse.RenderingException.
   * @param exceptions exceptions or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setExceptions(java.lang.Long exceptions) {
    this.exceptions = exceptions;
    return this;
  }

  /**
   * Total GCU time for rendering the document in millisecond. This data is from
   * render_stats.render_cost_mgcu in RenderResponse proto. Note that this is *experimental* field.
   * Please check with rendering-infra@ if you want to use.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getExperimentalRenderTimeMsec() {
    return experimentalRenderTimeMsec;
  }

  /**
   * Total GCU time for rendering the document in millisecond. This data is from
   * render_stats.render_cost_mgcu in RenderResponse proto. Note that this is *experimental* field.
   * Please check with rendering-infra@ if you want to use.
   * @param experimentalRenderTimeMsec experimentalRenderTimeMsec or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setExperimentalRenderTimeMsec(java.lang.Integer experimentalRenderTimeMsec) {
    this.experimentalRenderTimeMsec = experimentalRenderTimeMsec;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public IndexingEmbeddedContentOutputGenerationTimestamps getGenerationTimestamps() {
    return generationTimestamps;
  }

  /**
   * @param generationTimestamps generationTimestamps or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setGenerationTimestamps(IndexingEmbeddedContentOutputGenerationTimestamps generationTimestamps) {
    this.generationTimestamps = generationTimestamps;
    return this;
  }

  /**
   * The importance value of the rendered document.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getImportance() {
    return importance;
  }

  /**
   * The importance value of the rendered document.
   * @param importance importance or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setImportance(java.lang.Integer importance) {
    this.importance = importance;
    return this;
  }

  /**
   * The timestamp of last new content probing.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLastNewContentProbingTimestamp() {
    return lastNewContentProbingTimestamp;
  }

  /**
   * The timestamp of last new content probing.
   * @param lastNewContentProbingTimestamp lastNewContentProbingTimestamp or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setLastNewContentProbingTimestamp(java.lang.Integer lastNewContentProbingTimestamp) {
    this.lastNewContentProbingTimestamp = lastNewContentProbingTimestamp;
    return this;
  }

  /**
   * Percentage of new tokens in the rendered the document content.
   * @return value or {@code null} for none
   */
  public java.lang.Double getNewTokensPercentageAfterRendering() {
    return newTokensPercentageAfterRendering;
  }

  /**
   * Percentage of new tokens in the rendered the document content.
   * @param newTokensPercentageAfterRendering newTokensPercentageAfterRendering or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setNewTokensPercentageAfterRendering(java.lang.Double newTokensPercentageAfterRendering) {
    this.newTokensPercentageAfterRendering = newTokensPercentageAfterRendering;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumNewTokensFoundInRendering() {
    return numNewTokensFoundInRendering;
  }

  /**
   * @param numNewTokensFoundInRendering numNewTokensFoundInRendering or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setNumNewTokensFoundInRendering(java.lang.Integer numNewTokensFoundInRendering) {
    this.numNewTokensFoundInRendering = numNewTokensFoundInRendering;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRefresh() {
    return refresh;
  }

  /**
   * @param refresh refresh or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setRefresh(java.lang.Boolean refresh) {
    this.refresh = refresh;
    return this;
  }

  /**
   * A collection of fields to track stats on cache use in the Rendering microservice.
   * @return value or {@code null} for none
   */
  public IndexingEmbeddedContentRenderCacheStats getRenderCacheStats() {
    return renderCacheStats;
  }

  /**
   * A collection of fields to track stats on cache use in the Rendering microservice.
   * @param renderCacheStats renderCacheStats or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setRenderCacheStats(IndexingEmbeddedContentRenderCacheStats renderCacheStats) {
    this.renderCacheStats = renderCacheStats;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getRenderEngine() {
    return renderEngine;
  }

  /**
   * @param renderEngine renderEngine or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setRenderEngine(java.lang.String renderEngine) {
    this.renderEngine = renderEngine;
    return this;
  }

  /**
   * Different types of events which happened during rendering.
   * @return value or {@code null} for none
   */
  public java.util.List<HtmlrenderWebkitHeadlessProtoRenderEvent> getRenderEvent() {
    return renderEvent;
  }

  /**
   * Different types of events which happened during rendering.
   * @param renderEvent renderEvent or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setRenderEvent(java.util.List<HtmlrenderWebkitHeadlessProtoRenderEvent> renderEvent) {
    this.renderEvent = renderEvent;
    return this;
  }

  /**
   * The CL from which the render engine was built.
   * @return value or {@code null} for none
   */
  public java.lang.Long getRenderServerCl() {
    return renderServerCl;
  }

  /**
   * The CL from which the render engine was built.
   * @param renderServerCl renderServerCl or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setRenderServerCl(java.lang.Long renderServerCl) {
    this.renderServerCl = renderServerCl;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Double getRenderTreeQualityScore() {
    return renderTreeQualityScore;
  }

  /**
   * @param renderTreeQualityScore renderTreeQualityScore or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setRenderTreeQualityScore(java.lang.Double renderTreeQualityScore) {
    this.renderTreeQualityScore = renderTreeQualityScore;
    return this;
  }

  /**
   * Short signature (usually less than 1 KB) which captures a perceptual hash on the rendered
   * image. This is used to determine whether successive renderings should be output. See the
   * library in googlen/snapshot/shared/similarity.* for more info about how this value is
   * interpreted and used.
   * @see #decodeRenderedSnapshotSignature()
   * @return value or {@code null} for none
   */
  public java.lang.String getRenderedSnapshotSignature() {
    return renderedSnapshotSignature;
  }

  /**
   * Short signature (usually less than 1 KB) which captures a perceptual hash on the rendered
   * image. This is used to determine whether successive renderings should be output. See the
   * library in googlen/snapshot/shared/similarity.* for more info about how this value is
   * interpreted and used.
   * @see #getRenderedSnapshotSignature()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeRenderedSnapshotSignature() {
    return com.google.api.client.util.Base64.decodeBase64(renderedSnapshotSignature);
  }

  /**
   * Short signature (usually less than 1 KB) which captures a perceptual hash on the rendered
   * image. This is used to determine whether successive renderings should be output. See the
   * library in googlen/snapshot/shared/similarity.* for more info about how this value is
   * interpreted and used.
   * @see #encodeRenderedSnapshotSignature()
   * @param renderedSnapshotSignature renderedSnapshotSignature or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setRenderedSnapshotSignature(java.lang.String renderedSnapshotSignature) {
    this.renderedSnapshotSignature = renderedSnapshotSignature;
    return this;
  }

  /**
   * Short signature (usually less than 1 KB) which captures a perceptual hash on the rendered
   * image. This is used to determine whether successive renderings should be output. See the
   * library in googlen/snapshot/shared/similarity.* for more info about how this value is
   * interpreted and used.
   * @see #setRenderedSnapshotSignature()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public IndexingEmbeddedContentRenderingOutputMetadata encodeRenderedSnapshotSignature(byte[] renderedSnapshotSignature) {
    this.renderedSnapshotSignature = com.google.api.client.util.Base64.encodeBase64URLSafeString(renderedSnapshotSignature);
    return this;
  }

  /**
   * Current time in microseconds the document is going through rendering system. This field is set
   * regardless of whether the document is being rendered or if we are skipping rendering by using a
   * cache.
   * @return value or {@code null} for none
   */
  public java.lang.Long getRenderedTimeUsec() {
    return renderedTimeUsec;
  }

  /**
   * Current time in microseconds the document is going through rendering system. This field is set
   * regardless of whether the document is being rendered or if we are skipping rendering by using a
   * cache.
   * @param renderedTimeUsec renderedTimeUsec or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setRenderedTimeUsec(java.lang.Long renderedTimeUsec) {
    this.renderedTimeUsec = renderedTimeUsec;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingFetchStats getRenderingFetchStats() {
    return renderingFetchStats;
  }

  /**
   * @param renderingFetchStats renderingFetchStats or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setRenderingFetchStats(IndexingEmbeddedContentRenderingFetchStats renderingFetchStats) {
    this.renderingFetchStats = renderingFetchStats;
    return this;
  }

  /**
   * The corpus selection result. Can be used for offline analysis.
   * @return value or {@code null} for none
   */
  public IndexingEmbeddedContentSelectionResult getSelectionResult() {
    return selectionResult;
  }

  /**
   * The corpus selection result. Can be used for offline analysis.
   * @param selectionResult selectionResult or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setSelectionResult(IndexingEmbeddedContentSelectionResult selectionResult) {
    this.selectionResult = selectionResult;
    return this;
  }

  /**
   * These scores are copied from htmlrender_webkit_headless_proto.Document.
   * @return value or {@code null} for none
   */
  public java.lang.Double getSnapshotQualityScore() {
    return snapshotQualityScore;
  }

  /**
   * These scores are copied from htmlrender_webkit_headless_proto.Document.
   * @param snapshotQualityScore snapshotQualityScore or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setSnapshotQualityScore(java.lang.Double snapshotQualityScore) {
    this.snapshotQualityScore = snapshotQualityScore;
    return this;
  }

  /**
   * True if there were any missing resources during the rendering.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getWithMissingResources() {
    return withMissingResources;
  }

  /**
   * True if there were any missing resources during the rendering.
   * @param withMissingResources withMissingResources or {@code null} for none
   */
  public IndexingEmbeddedContentRenderingOutputMetadata setWithMissingResources(java.lang.Boolean withMissingResources) {
    this.withMissingResources = withMissingResources;
    return this;
  }

  @Override
  public IndexingEmbeddedContentRenderingOutputMetadata set(String fieldName, Object value) {
    return (IndexingEmbeddedContentRenderingOutputMetadata) super.set(fieldName, value);
  }

  @Override
  public IndexingEmbeddedContentRenderingOutputMetadata clone() {
    return (IndexingEmbeddedContentRenderingOutputMetadata) super.clone();
  }

}
