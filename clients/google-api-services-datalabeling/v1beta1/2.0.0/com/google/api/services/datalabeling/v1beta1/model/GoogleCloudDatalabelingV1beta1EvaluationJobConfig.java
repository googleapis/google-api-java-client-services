/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datalabeling.v1beta1.model;

/**
 * Configures specific details of how a continuous evaluation job works. Provide this configuration
 * when you create an EvaluationJob.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Data Labeling API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDatalabelingV1beta1EvaluationJobConfig extends com.google.api.client.json.GenericJson {

  /**
   * Required. Prediction keys that tell Data Labeling Service where to find the data for evaluation
   * in your BigQuery table. When the service samples prediction input and output from your model
   * version and saves it to BigQuery, the data gets stored as JSON strings in the BigQuery table.
   * These keys tell Data Labeling Service how to parse the JSON. You can provide the following
   * entries in this field: * `data_json_key`: the data key for prediction input. You must provide
   * either this key or `reference_json_key`. * `reference_json_key`: the data reference key for
   * prediction input. You must provide either this key or `data_json_key`. * `label_json_key`: the
   * label key for prediction output. Required. * `label_score_json_key`: the score key for
   * prediction output. Required. * `bounding_box_json_key`: the bounding box key for prediction
   * output. Required if your model version perform image object detection. Learn [how to configure
   * prediction keys](/ml-engine/docs/continuous-evaluation/create-job#prediction-keys).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> bigqueryImportKeys;

  /**
   * Specify this field if your model version performs image object detection (bounding box
   * detection). `annotationSpecSet` in this configuration must match
   * EvaluationJob.annotationSpecSet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDatalabelingV1beta1BoundingPolyConfig boundingPolyConfig;

  /**
   * Required. Details for calculating evaluation metrics and creating Evaulations. If your model
   * version performs image object detection, you must specify the `boundingBoxEvaluationOptions`
   * field within this configuration. Otherwise, provide an empty object for this configuration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDatalabelingV1beta1EvaluationConfig evaluationConfig;

  /**
   * Optional. Configuration details for evaluation job alerts. Specify this field if you want to
   * receive email alerts if the evaluation job finds that your predictions have low mean average
   * precision during a run.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig evaluationJobAlertConfig;

  /**
   * Required. The maximum number of predictions to sample and save to BigQuery during each
   * evaluation interval. This limit overrides `example_sample_percentage`: even if the service has
   * not sampled enough predictions to fulfill `example_sample_perecentage` during an interval, it
   * stops sampling predictions when it meets this limit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer exampleCount;

  /**
   * Required. Fraction of predictions to sample and save to BigQuery during each evaluation
   * interval. For example, 0.1 means 10% of predictions served by your model version get saved to
   * BigQuery.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double exampleSamplePercentage;

  /**
   * Optional. Details for human annotation of your data. If you set labelMissingGroundTruth to
   * `true` for this evaluation job, then you must specify this field. If you plan to provide your
   * own ground truth labels, then omit this field. Note that you must create an Instruction
   * resource before you can specify this field. Provide the name of the instruction resource in the
   * `instruction` field within this configuration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDatalabelingV1beta1HumanAnnotationConfig humanAnnotationConfig;

  /**
   * Specify this field if your model version performs image classification or general
   * classification. `annotationSpecSet` in this configuration must match
   * EvaluationJob.annotationSpecSet. `allowMultiLabel` in this configuration must match
   * `classificationMetadata.isMultiLabel` in input_config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDatalabelingV1beta1ImageClassificationConfig imageClassificationConfig;

  /**
   * Rquired. Details for the sampled prediction input. Within this configuration, there are
   * requirements for several fields: * `dataType` must be one of `IMAGE`, `TEXT`, or
   * `GENERAL_DATA`. * `annotationType` must be one of `IMAGE_CLASSIFICATION_ANNOTATION`,
   * `TEXT_CLASSIFICATION_ANNOTATION`, `GENERAL_CLASSIFICATION_ANNOTATION`, or
   * `IMAGE_BOUNDING_BOX_ANNOTATION` (image object detection). * If your machine learning model
   * performs classification, you must specify `classificationMetadata.isMultiLabel`. * You must
   * specify `bigquerySource` (not `gcsSource`).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDatalabelingV1beta1InputConfig inputConfig;

  /**
   * Specify this field if your model version performs text classification. `annotationSpecSet` in
   * this configuration must match EvaluationJob.annotationSpecSet. `allowMultiLabel` in this
   * configuration must match `classificationMetadata.isMultiLabel` in input_config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDatalabelingV1beta1TextClassificationConfig textClassificationConfig;

  /**
   * Required. Prediction keys that tell Data Labeling Service where to find the data for evaluation
   * in your BigQuery table. When the service samples prediction input and output from your model
   * version and saves it to BigQuery, the data gets stored as JSON strings in the BigQuery table.
   * These keys tell Data Labeling Service how to parse the JSON. You can provide the following
   * entries in this field: * `data_json_key`: the data key for prediction input. You must provide
   * either this key or `reference_json_key`. * `reference_json_key`: the data reference key for
   * prediction input. You must provide either this key or `data_json_key`. * `label_json_key`: the
   * label key for prediction output. Required. * `label_score_json_key`: the score key for
   * prediction output. Required. * `bounding_box_json_key`: the bounding box key for prediction
   * output. Required if your model version perform image object detection. Learn [how to configure
   * prediction keys](/ml-engine/docs/continuous-evaluation/create-job#prediction-keys).
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getBigqueryImportKeys() {
    return bigqueryImportKeys;
  }

  /**
   * Required. Prediction keys that tell Data Labeling Service where to find the data for evaluation
   * in your BigQuery table. When the service samples prediction input and output from your model
   * version and saves it to BigQuery, the data gets stored as JSON strings in the BigQuery table.
   * These keys tell Data Labeling Service how to parse the JSON. You can provide the following
   * entries in this field: * `data_json_key`: the data key for prediction input. You must provide
   * either this key or `reference_json_key`. * `reference_json_key`: the data reference key for
   * prediction input. You must provide either this key or `data_json_key`. * `label_json_key`: the
   * label key for prediction output. Required. * `label_score_json_key`: the score key for
   * prediction output. Required. * `bounding_box_json_key`: the bounding box key for prediction
   * output. Required if your model version perform image object detection. Learn [how to configure
   * prediction keys](/ml-engine/docs/continuous-evaluation/create-job#prediction-keys).
   * @param bigqueryImportKeys bigqueryImportKeys or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1EvaluationJobConfig setBigqueryImportKeys(java.util.Map<String, java.lang.String> bigqueryImportKeys) {
    this.bigqueryImportKeys = bigqueryImportKeys;
    return this;
  }

  /**
   * Specify this field if your model version performs image object detection (bounding box
   * detection). `annotationSpecSet` in this configuration must match
   * EvaluationJob.annotationSpecSet.
   * @return value or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1BoundingPolyConfig getBoundingPolyConfig() {
    return boundingPolyConfig;
  }

  /**
   * Specify this field if your model version performs image object detection (bounding box
   * detection). `annotationSpecSet` in this configuration must match
   * EvaluationJob.annotationSpecSet.
   * @param boundingPolyConfig boundingPolyConfig or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1EvaluationJobConfig setBoundingPolyConfig(GoogleCloudDatalabelingV1beta1BoundingPolyConfig boundingPolyConfig) {
    this.boundingPolyConfig = boundingPolyConfig;
    return this;
  }

  /**
   * Required. Details for calculating evaluation metrics and creating Evaulations. If your model
   * version performs image object detection, you must specify the `boundingBoxEvaluationOptions`
   * field within this configuration. Otherwise, provide an empty object for this configuration.
   * @return value or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1EvaluationConfig getEvaluationConfig() {
    return evaluationConfig;
  }

  /**
   * Required. Details for calculating evaluation metrics and creating Evaulations. If your model
   * version performs image object detection, you must specify the `boundingBoxEvaluationOptions`
   * field within this configuration. Otherwise, provide an empty object for this configuration.
   * @param evaluationConfig evaluationConfig or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1EvaluationJobConfig setEvaluationConfig(GoogleCloudDatalabelingV1beta1EvaluationConfig evaluationConfig) {
    this.evaluationConfig = evaluationConfig;
    return this;
  }

  /**
   * Optional. Configuration details for evaluation job alerts. Specify this field if you want to
   * receive email alerts if the evaluation job finds that your predictions have low mean average
   * precision during a run.
   * @return value or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig getEvaluationJobAlertConfig() {
    return evaluationJobAlertConfig;
  }

  /**
   * Optional. Configuration details for evaluation job alerts. Specify this field if you want to
   * receive email alerts if the evaluation job finds that your predictions have low mean average
   * precision during a run.
   * @param evaluationJobAlertConfig evaluationJobAlertConfig or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1EvaluationJobConfig setEvaluationJobAlertConfig(GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig evaluationJobAlertConfig) {
    this.evaluationJobAlertConfig = evaluationJobAlertConfig;
    return this;
  }

  /**
   * Required. The maximum number of predictions to sample and save to BigQuery during each
   * evaluation interval. This limit overrides `example_sample_percentage`: even if the service has
   * not sampled enough predictions to fulfill `example_sample_perecentage` during an interval, it
   * stops sampling predictions when it meets this limit.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getExampleCount() {
    return exampleCount;
  }

  /**
   * Required. The maximum number of predictions to sample and save to BigQuery during each
   * evaluation interval. This limit overrides `example_sample_percentage`: even if the service has
   * not sampled enough predictions to fulfill `example_sample_perecentage` during an interval, it
   * stops sampling predictions when it meets this limit.
   * @param exampleCount exampleCount or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1EvaluationJobConfig setExampleCount(java.lang.Integer exampleCount) {
    this.exampleCount = exampleCount;
    return this;
  }

  /**
   * Required. Fraction of predictions to sample and save to BigQuery during each evaluation
   * interval. For example, 0.1 means 10% of predictions served by your model version get saved to
   * BigQuery.
   * @return value or {@code null} for none
   */
  public java.lang.Double getExampleSamplePercentage() {
    return exampleSamplePercentage;
  }

  /**
   * Required. Fraction of predictions to sample and save to BigQuery during each evaluation
   * interval. For example, 0.1 means 10% of predictions served by your model version get saved to
   * BigQuery.
   * @param exampleSamplePercentage exampleSamplePercentage or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1EvaluationJobConfig setExampleSamplePercentage(java.lang.Double exampleSamplePercentage) {
    this.exampleSamplePercentage = exampleSamplePercentage;
    return this;
  }

  /**
   * Optional. Details for human annotation of your data. If you set labelMissingGroundTruth to
   * `true` for this evaluation job, then you must specify this field. If you plan to provide your
   * own ground truth labels, then omit this field. Note that you must create an Instruction
   * resource before you can specify this field. Provide the name of the instruction resource in the
   * `instruction` field within this configuration.
   * @return value or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1HumanAnnotationConfig getHumanAnnotationConfig() {
    return humanAnnotationConfig;
  }

  /**
   * Optional. Details for human annotation of your data. If you set labelMissingGroundTruth to
   * `true` for this evaluation job, then you must specify this field. If you plan to provide your
   * own ground truth labels, then omit this field. Note that you must create an Instruction
   * resource before you can specify this field. Provide the name of the instruction resource in the
   * `instruction` field within this configuration.
   * @param humanAnnotationConfig humanAnnotationConfig or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1EvaluationJobConfig setHumanAnnotationConfig(GoogleCloudDatalabelingV1beta1HumanAnnotationConfig humanAnnotationConfig) {
    this.humanAnnotationConfig = humanAnnotationConfig;
    return this;
  }

  /**
   * Specify this field if your model version performs image classification or general
   * classification. `annotationSpecSet` in this configuration must match
   * EvaluationJob.annotationSpecSet. `allowMultiLabel` in this configuration must match
   * `classificationMetadata.isMultiLabel` in input_config.
   * @return value or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1ImageClassificationConfig getImageClassificationConfig() {
    return imageClassificationConfig;
  }

  /**
   * Specify this field if your model version performs image classification or general
   * classification. `annotationSpecSet` in this configuration must match
   * EvaluationJob.annotationSpecSet. `allowMultiLabel` in this configuration must match
   * `classificationMetadata.isMultiLabel` in input_config.
   * @param imageClassificationConfig imageClassificationConfig or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1EvaluationJobConfig setImageClassificationConfig(GoogleCloudDatalabelingV1beta1ImageClassificationConfig imageClassificationConfig) {
    this.imageClassificationConfig = imageClassificationConfig;
    return this;
  }

  /**
   * Rquired. Details for the sampled prediction input. Within this configuration, there are
   * requirements for several fields: * `dataType` must be one of `IMAGE`, `TEXT`, or
   * `GENERAL_DATA`. * `annotationType` must be one of `IMAGE_CLASSIFICATION_ANNOTATION`,
   * `TEXT_CLASSIFICATION_ANNOTATION`, `GENERAL_CLASSIFICATION_ANNOTATION`, or
   * `IMAGE_BOUNDING_BOX_ANNOTATION` (image object detection). * If your machine learning model
   * performs classification, you must specify `classificationMetadata.isMultiLabel`. * You must
   * specify `bigquerySource` (not `gcsSource`).
   * @return value or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1InputConfig getInputConfig() {
    return inputConfig;
  }

  /**
   * Rquired. Details for the sampled prediction input. Within this configuration, there are
   * requirements for several fields: * `dataType` must be one of `IMAGE`, `TEXT`, or
   * `GENERAL_DATA`. * `annotationType` must be one of `IMAGE_CLASSIFICATION_ANNOTATION`,
   * `TEXT_CLASSIFICATION_ANNOTATION`, `GENERAL_CLASSIFICATION_ANNOTATION`, or
   * `IMAGE_BOUNDING_BOX_ANNOTATION` (image object detection). * If your machine learning model
   * performs classification, you must specify `classificationMetadata.isMultiLabel`. * You must
   * specify `bigquerySource` (not `gcsSource`).
   * @param inputConfig inputConfig or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1EvaluationJobConfig setInputConfig(GoogleCloudDatalabelingV1beta1InputConfig inputConfig) {
    this.inputConfig = inputConfig;
    return this;
  }

  /**
   * Specify this field if your model version performs text classification. `annotationSpecSet` in
   * this configuration must match EvaluationJob.annotationSpecSet. `allowMultiLabel` in this
   * configuration must match `classificationMetadata.isMultiLabel` in input_config.
   * @return value or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1TextClassificationConfig getTextClassificationConfig() {
    return textClassificationConfig;
  }

  /**
   * Specify this field if your model version performs text classification. `annotationSpecSet` in
   * this configuration must match EvaluationJob.annotationSpecSet. `allowMultiLabel` in this
   * configuration must match `classificationMetadata.isMultiLabel` in input_config.
   * @param textClassificationConfig textClassificationConfig or {@code null} for none
   */
  public GoogleCloudDatalabelingV1beta1EvaluationJobConfig setTextClassificationConfig(GoogleCloudDatalabelingV1beta1TextClassificationConfig textClassificationConfig) {
    this.textClassificationConfig = textClassificationConfig;
    return this;
  }

  @Override
  public GoogleCloudDatalabelingV1beta1EvaluationJobConfig set(String fieldName, Object value) {
    return (GoogleCloudDatalabelingV1beta1EvaluationJobConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDatalabelingV1beta1EvaluationJobConfig clone() {
    return (GoogleCloudDatalabelingV1beta1EvaluationJobConfig) super.clone();
  }

}
