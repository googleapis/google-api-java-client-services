/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.trafficdirector.v2.model;

/**
 * Envoy's cluster manager fills this message with all currently known clusters. Cluster
 * configuration information can be used to recreate an Envoy configuration by populating all
 * clusters as static clusters or by returning them in a CDS response.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Traffic Director API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ClustersConfigDump extends com.google.api.client.json.GenericJson {

  /**
   * The dynamically loaded active clusters. These are clusters that are available to service data
   * plane traffic.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DynamicCluster> dynamicActiveClusters;

  /**
   * The dynamically loaded warming clusters. These are clusters that are currently undergoing
   * warming in preparation to service data plane traffic. Note that if attempting to recreate an
   * Envoy configuration from a configuration dump, the warming clusters should generally be
   * discarded.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DynamicCluster> dynamicWarmingClusters;

  /**
   * The statically loaded cluster configs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<StaticCluster> staticClusters;

  /**
   * This is the :ref:`version_info ` in the last processed CDS discovery response. If there are
   * only static bootstrap clusters, this field will be "".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String versionInfo;

  /**
   * The dynamically loaded active clusters. These are clusters that are available to service data
   * plane traffic.
   * @return value or {@code null} for none
   */
  public java.util.List<DynamicCluster> getDynamicActiveClusters() {
    return dynamicActiveClusters;
  }

  /**
   * The dynamically loaded active clusters. These are clusters that are available to service data
   * plane traffic.
   * @param dynamicActiveClusters dynamicActiveClusters or {@code null} for none
   */
  public ClustersConfigDump setDynamicActiveClusters(java.util.List<DynamicCluster> dynamicActiveClusters) {
    this.dynamicActiveClusters = dynamicActiveClusters;
    return this;
  }

  /**
   * The dynamically loaded warming clusters. These are clusters that are currently undergoing
   * warming in preparation to service data plane traffic. Note that if attempting to recreate an
   * Envoy configuration from a configuration dump, the warming clusters should generally be
   * discarded.
   * @return value or {@code null} for none
   */
  public java.util.List<DynamicCluster> getDynamicWarmingClusters() {
    return dynamicWarmingClusters;
  }

  /**
   * The dynamically loaded warming clusters. These are clusters that are currently undergoing
   * warming in preparation to service data plane traffic. Note that if attempting to recreate an
   * Envoy configuration from a configuration dump, the warming clusters should generally be
   * discarded.
   * @param dynamicWarmingClusters dynamicWarmingClusters or {@code null} for none
   */
  public ClustersConfigDump setDynamicWarmingClusters(java.util.List<DynamicCluster> dynamicWarmingClusters) {
    this.dynamicWarmingClusters = dynamicWarmingClusters;
    return this;
  }

  /**
   * The statically loaded cluster configs.
   * @return value or {@code null} for none
   */
  public java.util.List<StaticCluster> getStaticClusters() {
    return staticClusters;
  }

  /**
   * The statically loaded cluster configs.
   * @param staticClusters staticClusters or {@code null} for none
   */
  public ClustersConfigDump setStaticClusters(java.util.List<StaticCluster> staticClusters) {
    this.staticClusters = staticClusters;
    return this;
  }

  /**
   * This is the :ref:`version_info ` in the last processed CDS discovery response. If there are
   * only static bootstrap clusters, this field will be "".
   * @return value or {@code null} for none
   */
  public java.lang.String getVersionInfo() {
    return versionInfo;
  }

  /**
   * This is the :ref:`version_info ` in the last processed CDS discovery response. If there are
   * only static bootstrap clusters, this field will be "".
   * @param versionInfo versionInfo or {@code null} for none
   */
  public ClustersConfigDump setVersionInfo(java.lang.String versionInfo) {
    this.versionInfo = versionInfo;
    return this;
  }

  @Override
  public ClustersConfigDump set(String fieldName, Object value) {
    return (ClustersConfigDump) super.set(fieldName, value);
  }

  @Override
  public ClustersConfigDump clone() {
    return (ClustersConfigDump) super.clone();
  }

}
