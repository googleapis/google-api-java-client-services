/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * Arguments to insert, update, insert_or_update, and replace operations.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Write extends com.google.api.client.json.GenericJson {

  /**
   * The names of the columns in table to be written.
   *
   * The list of columns must contain enough columns to allow Cloud Spanner to derive values for all
   * primary key columns in the row(s) to be modified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> columns;

  /**
   * Required. The table whose rows will be written.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String table;

  /**
   * The values to be written. `values` can contain more than one list of values. If it does, then
   * multiple rows are written, one for each entry in `values`. Each list in `values` must have
   * exactly as many entries as there are entries in columns above. Sending multiple lists is
   * equivalent to sending multiple `Mutation`s, each containing one `values` entry and repeating
   * table and columns. Individual values in each list are encoded as described here.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.util.List<java.lang.Object>> values;

  /**
   * The names of the columns in table to be written.
   *
   * The list of columns must contain enough columns to allow Cloud Spanner to derive values for all
   * primary key columns in the row(s) to be modified.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getColumns() {
    return columns;
  }

  /**
   * The names of the columns in table to be written.
   *
   * The list of columns must contain enough columns to allow Cloud Spanner to derive values for all
   * primary key columns in the row(s) to be modified.
   * @param columns columns or {@code null} for none
   */
  public Write setColumns(java.util.List<java.lang.String> columns) {
    this.columns = columns;
    return this;
  }

  /**
   * Required. The table whose rows will be written.
   * @return value or {@code null} for none
   */
  public java.lang.String getTable() {
    return table;
  }

  /**
   * Required. The table whose rows will be written.
   * @param table table or {@code null} for none
   */
  public Write setTable(java.lang.String table) {
    this.table = table;
    return this;
  }

  /**
   * The values to be written. `values` can contain more than one list of values. If it does, then
   * multiple rows are written, one for each entry in `values`. Each list in `values` must have
   * exactly as many entries as there are entries in columns above. Sending multiple lists is
   * equivalent to sending multiple `Mutation`s, each containing one `values` entry and repeating
   * table and columns. Individual values in each list are encoded as described here.
   * @return value or {@code null} for none
   */
  public java.util.List<java.util.List<java.lang.Object>> getValues() {
    return values;
  }

  /**
   * The values to be written. `values` can contain more than one list of values. If it does, then
   * multiple rows are written, one for each entry in `values`. Each list in `values` must have
   * exactly as many entries as there are entries in columns above. Sending multiple lists is
   * equivalent to sending multiple `Mutation`s, each containing one `values` entry and repeating
   * table and columns. Individual values in each list are encoded as described here.
   * @param values values or {@code null} for none
   */
  public Write setValues(java.util.List<java.util.List<java.lang.Object>> values) {
    this.values = values;
    return this;
  }

  @Override
  public Write set(String fieldName, Object value) {
    return (Write) super.set(fieldName, value);
  }

  @Override
  public Write clone() {
    return (Write) super.clone();
  }

}
