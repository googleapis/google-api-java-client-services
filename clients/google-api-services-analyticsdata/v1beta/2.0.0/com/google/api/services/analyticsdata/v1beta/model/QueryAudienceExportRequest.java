/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.analyticsdata.v1beta.model;

/**
 * A request to list users in an audience export.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Analytics Data API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class QueryAudienceExportRequest extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The number of rows to return. If unspecified, 10,000 rows are returned. The API
   * returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be
   * positive. The API can also return fewer rows than the requested `limit`, if there aren't as
   * many dimension values as the `limit`. To learn more about this pagination parameter, see [Pagin
   * ation](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long limit;

  /**
   * Optional. The row count of the start row. The first row is counted as row 0. When paging, the
   * first request does not specify offset; or equivalently, sets offset to 0; the first request
   * returns the first `limit` of rows. The second request sets offset to the `limit` of the first
   * request; the second request returns the second `limit` of rows. To learn more about this
   * pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/report
   * ing/data/v1/basics#pagination).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long offset;

  /**
   * Optional. The number of rows to return. If unspecified, 10,000 rows are returned. The API
   * returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be
   * positive. The API can also return fewer rows than the requested `limit`, if there aren't as
   * many dimension values as the `limit`. To learn more about this pagination parameter, see [Pagin
   * ation](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * @return value or {@code null} for none
   */
  public java.lang.Long getLimit() {
    return limit;
  }

  /**
   * Optional. The number of rows to return. If unspecified, 10,000 rows are returned. The API
   * returns a maximum of 250,000 rows per request, no matter how many you ask for. `limit` must be
   * positive. The API can also return fewer rows than the requested `limit`, if there aren't as
   * many dimension values as the `limit`. To learn more about this pagination parameter, see [Pagin
   * ation](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   * @param limit limit or {@code null} for none
   */
  public QueryAudienceExportRequest setLimit(java.lang.Long limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Optional. The row count of the start row. The first row is counted as row 0. When paging, the
   * first request does not specify offset; or equivalently, sets offset to 0; the first request
   * returns the first `limit` of rows. The second request sets offset to the `limit` of the first
   * request; the second request returns the second `limit` of rows. To learn more about this
   * pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/report
   * ing/data/v1/basics#pagination).
   * @return value or {@code null} for none
   */
  public java.lang.Long getOffset() {
    return offset;
  }

  /**
   * Optional. The row count of the start row. The first row is counted as row 0. When paging, the
   * first request does not specify offset; or equivalently, sets offset to 0; the first request
   * returns the first `limit` of rows. The second request sets offset to the `limit` of the first
   * request; the second request returns the second `limit` of rows. To learn more about this
   * pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/report
   * ing/data/v1/basics#pagination).
   * @param offset offset or {@code null} for none
   */
  public QueryAudienceExportRequest setOffset(java.lang.Long offset) {
    this.offset = offset;
    return this;
  }

  @Override
  public QueryAudienceExportRequest set(String fieldName, Object value) {
    return (QueryAudienceExportRequest) super.set(fieldName, value);
  }

  @Override
  public QueryAudienceExportRequest clone() {
    return (QueryAudienceExportRequest) super.clone();
  }

}
