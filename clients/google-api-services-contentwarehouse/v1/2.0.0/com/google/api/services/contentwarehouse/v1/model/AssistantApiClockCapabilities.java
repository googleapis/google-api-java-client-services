/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Used to describe clock capabilities of the device (for example, capabilities related to maximum
 * number of supported alarms and timers that can be created on the device). Fields may be populated
 * by clients or be backfilled by SAL (in case of Timon, for example).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiClockCapabilities extends com.google.api.client.json.GenericJson {

  /**
   * Maximum number of alarms that can be created on the client.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxSupportedAlarms;

  /**
   * Maximum extended timer duration supported by the client. The extended timer duration is the
   * total start-to-finish duration after an AddTimeToTimer operation. E.g. if a user sets a timer
   * for 30 minutes, and later adds 10 minutes, the extended duration is 40 minutes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiDuration maxSupportedExtendedTimerDuration;

  /**
   * Maximum duration of timers that can be created on the client.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiDuration maxSupportedTimerDuration;

  /**
   * Maximum number of timers that can be created on the client.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxSupportedTimers;

  /**
   * The preferred provider to use for stopwatch related functionality.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiCoreTypesProvider preferredStopwatchProvider;

  /**
   * Whether the client restricts alarms to ring within the next 24 hours.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean restrictAlarmsToNext24h;

  /**
   * Maximum number of alarms that can be created on the client.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxSupportedAlarms() {
    return maxSupportedAlarms;
  }

  /**
   * Maximum number of alarms that can be created on the client.
   * @param maxSupportedAlarms maxSupportedAlarms or {@code null} for none
   */
  public AssistantApiClockCapabilities setMaxSupportedAlarms(java.lang.Integer maxSupportedAlarms) {
    this.maxSupportedAlarms = maxSupportedAlarms;
    return this;
  }

  /**
   * Maximum extended timer duration supported by the client. The extended timer duration is the
   * total start-to-finish duration after an AddTimeToTimer operation. E.g. if a user sets a timer
   * for 30 minutes, and later adds 10 minutes, the extended duration is 40 minutes.
   * @return value or {@code null} for none
   */
  public AssistantApiDuration getMaxSupportedExtendedTimerDuration() {
    return maxSupportedExtendedTimerDuration;
  }

  /**
   * Maximum extended timer duration supported by the client. The extended timer duration is the
   * total start-to-finish duration after an AddTimeToTimer operation. E.g. if a user sets a timer
   * for 30 minutes, and later adds 10 minutes, the extended duration is 40 minutes.
   * @param maxSupportedExtendedTimerDuration maxSupportedExtendedTimerDuration or {@code null} for none
   */
  public AssistantApiClockCapabilities setMaxSupportedExtendedTimerDuration(AssistantApiDuration maxSupportedExtendedTimerDuration) {
    this.maxSupportedExtendedTimerDuration = maxSupportedExtendedTimerDuration;
    return this;
  }

  /**
   * Maximum duration of timers that can be created on the client.
   * @return value or {@code null} for none
   */
  public AssistantApiDuration getMaxSupportedTimerDuration() {
    return maxSupportedTimerDuration;
  }

  /**
   * Maximum duration of timers that can be created on the client.
   * @param maxSupportedTimerDuration maxSupportedTimerDuration or {@code null} for none
   */
  public AssistantApiClockCapabilities setMaxSupportedTimerDuration(AssistantApiDuration maxSupportedTimerDuration) {
    this.maxSupportedTimerDuration = maxSupportedTimerDuration;
    return this;
  }

  /**
   * Maximum number of timers that can be created on the client.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxSupportedTimers() {
    return maxSupportedTimers;
  }

  /**
   * Maximum number of timers that can be created on the client.
   * @param maxSupportedTimers maxSupportedTimers or {@code null} for none
   */
  public AssistantApiClockCapabilities setMaxSupportedTimers(java.lang.Integer maxSupportedTimers) {
    this.maxSupportedTimers = maxSupportedTimers;
    return this;
  }

  /**
   * The preferred provider to use for stopwatch related functionality.
   * @return value or {@code null} for none
   */
  public AssistantApiCoreTypesProvider getPreferredStopwatchProvider() {
    return preferredStopwatchProvider;
  }

  /**
   * The preferred provider to use for stopwatch related functionality.
   * @param preferredStopwatchProvider preferredStopwatchProvider or {@code null} for none
   */
  public AssistantApiClockCapabilities setPreferredStopwatchProvider(AssistantApiCoreTypesProvider preferredStopwatchProvider) {
    this.preferredStopwatchProvider = preferredStopwatchProvider;
    return this;
  }

  /**
   * Whether the client restricts alarms to ring within the next 24 hours.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRestrictAlarmsToNext24h() {
    return restrictAlarmsToNext24h;
  }

  /**
   * Whether the client restricts alarms to ring within the next 24 hours.
   * @param restrictAlarmsToNext24h restrictAlarmsToNext24h or {@code null} for none
   */
  public AssistantApiClockCapabilities setRestrictAlarmsToNext24h(java.lang.Boolean restrictAlarmsToNext24h) {
    this.restrictAlarmsToNext24h = restrictAlarmsToNext24h;
    return this;
  }

  @Override
  public AssistantApiClockCapabilities set(String fieldName, Object value) {
    return (AssistantApiClockCapabilities) super.set(fieldName, value);
  }

  @Override
  public AssistantApiClockCapabilities clone() {
    return (AssistantApiClockCapabilities) super.clone();
  }

}
