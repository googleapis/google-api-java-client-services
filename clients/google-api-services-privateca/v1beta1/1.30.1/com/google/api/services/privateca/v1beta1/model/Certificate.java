/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.privateca.v1beta1.model;

/**
 * A Certificate corresponds to a signed X.509 certificate issued by a CertificateAuthority.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Certificate Authority API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Certificate extends com.google.api.client.json.GenericJson {

  /**
   * Output only. A structured description of the issued X.509 certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CertificateDescription certificateDescription;

  /**
   * Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CertificateConfig config;

  /**
   * Output only. The time at which this Certificate was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. Labels with user-defined metadata.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Required. Immutable. The desired lifetime of a certificate. Used to create the
   * "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the
   * lifetime may be truncated if it would extend past the life of any certificate authority in the
   * issuing chain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lifetime;

  /**
   * Output only. The resource path for this Certificate in the format
   * `projects/locations/certificateAuthorities/certificates`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The pem-encoded, signed X.509 certificate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pemCertificate;

  /**
   * Output only. The chain that may be used to verify the X.509 certificate. Expected to be in
   * issuer-to-root order according to RFC 5246.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> pemCertificateChain;

  /**
   * Immutable. A pem-encoded X.509 certificate signing request (CSR).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pemCsr;

  /**
   * Output only. Details regarding the revocation of this Certificate. This Certificate is
   * considered revoked if and only if this field is present.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RevocationDetails revocationDetails;

  /**
   * Output only. The time at which this Certificate was updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. A structured description of the issued X.509 certificate.
   * @return value or {@code null} for none
   */
  public CertificateDescription getCertificateDescription() {
    return certificateDescription;
  }

  /**
   * Output only. A structured description of the issued X.509 certificate.
   * @param certificateDescription certificateDescription or {@code null} for none
   */
  public Certificate setCertificateDescription(CertificateDescription certificateDescription) {
    this.certificateDescription = certificateDescription;
    return this;
  }

  /**
   * Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
   * @return value or {@code null} for none
   */
  public CertificateConfig getConfig() {
    return config;
  }

  /**
   * Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
   * @param config config or {@code null} for none
   */
  public Certificate setConfig(CertificateConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Output only. The time at which this Certificate was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time at which this Certificate was created.
   * @param createTime createTime or {@code null} for none
   */
  public Certificate setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. Labels with user-defined metadata.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. Labels with user-defined metadata.
   * @param labels labels or {@code null} for none
   */
  public Certificate setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Required. Immutable. The desired lifetime of a certificate. Used to create the
   * "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the
   * lifetime may be truncated if it would extend past the life of any certificate authority in the
   * issuing chain.
   * @return value or {@code null} for none
   */
  public String getLifetime() {
    return lifetime;
  }

  /**
   * Required. Immutable. The desired lifetime of a certificate. Used to create the
   * "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the
   * lifetime may be truncated if it would extend past the life of any certificate authority in the
   * issuing chain.
   * @param lifetime lifetime or {@code null} for none
   */
  public Certificate setLifetime(String lifetime) {
    this.lifetime = lifetime;
    return this;
  }

  /**
   * Output only. The resource path for this Certificate in the format
   * `projects/locations/certificateAuthorities/certificates`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The resource path for this Certificate in the format
   * `projects/locations/certificateAuthorities/certificates`.
   * @param name name or {@code null} for none
   */
  public Certificate setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The pem-encoded, signed X.509 certificate.
   * @return value or {@code null} for none
   */
  public java.lang.String getPemCertificate() {
    return pemCertificate;
  }

  /**
   * Output only. The pem-encoded, signed X.509 certificate.
   * @param pemCertificate pemCertificate or {@code null} for none
   */
  public Certificate setPemCertificate(java.lang.String pemCertificate) {
    this.pemCertificate = pemCertificate;
    return this;
  }

  /**
   * Output only. The chain that may be used to verify the X.509 certificate. Expected to be in
   * issuer-to-root order according to RFC 5246.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPemCertificateChain() {
    return pemCertificateChain;
  }

  /**
   * Output only. The chain that may be used to verify the X.509 certificate. Expected to be in
   * issuer-to-root order according to RFC 5246.
   * @param pemCertificateChain pemCertificateChain or {@code null} for none
   */
  public Certificate setPemCertificateChain(java.util.List<java.lang.String> pemCertificateChain) {
    this.pemCertificateChain = pemCertificateChain;
    return this;
  }

  /**
   * Immutable. A pem-encoded X.509 certificate signing request (CSR).
   * @return value or {@code null} for none
   */
  public java.lang.String getPemCsr() {
    return pemCsr;
  }

  /**
   * Immutable. A pem-encoded X.509 certificate signing request (CSR).
   * @param pemCsr pemCsr or {@code null} for none
   */
  public Certificate setPemCsr(java.lang.String pemCsr) {
    this.pemCsr = pemCsr;
    return this;
  }

  /**
   * Output only. Details regarding the revocation of this Certificate. This Certificate is
   * considered revoked if and only if this field is present.
   * @return value or {@code null} for none
   */
  public RevocationDetails getRevocationDetails() {
    return revocationDetails;
  }

  /**
   * Output only. Details regarding the revocation of this Certificate. This Certificate is
   * considered revoked if and only if this field is present.
   * @param revocationDetails revocationDetails or {@code null} for none
   */
  public Certificate setRevocationDetails(RevocationDetails revocationDetails) {
    this.revocationDetails = revocationDetails;
    return this;
  }

  /**
   * Output only. The time at which this Certificate was updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The time at which this Certificate was updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public Certificate setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public Certificate set(String fieldName, Object value) {
    return (Certificate) super.set(fieldName, value);
  }

  @Override
  public Certificate clone() {
    return (Certificate) super.clone();
  }

}
