/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastore.v1beta3;

/**
 * Service definition for Datastore (v1beta3).
 *
 * <p>
 * Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application.

 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/datastore/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link DatastoreRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Datastore extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Cloud Datastore API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://datastore.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Datastore(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Datastore(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Datastore datastore = new Datastore(...);}
   *   {@code Datastore.Projects.List request = datastore.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * Allocates IDs for the given keys, which is useful for referencing an entity before it is
     * inserted.
     *
     * Create a request for the method "projects.allocateIds".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link AllocateIds#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1beta3.model.AllocateIdsRequest}
     * @return the request
     */
    public AllocateIds allocateIds(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.AllocateIdsRequest content) throws java.io.IOException {
      AllocateIds result = new AllocateIds(projectId, content);
      initialize(result);
      return result;
    }

    public class AllocateIds extends DatastoreRequest<com.google.api.services.datastore.v1beta3.model.AllocateIdsResponse> {

      private static final String REST_PATH = "v1beta3/projects/{projectId}:allocateIds";

      /**
       * Allocates IDs for the given keys, which is useful for referencing an entity before it is
       * inserted.
       *
       * Create a request for the method "projects.allocateIds".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link AllocateIds#execute()} method to invoke the remote
       * operation. <p> {@link
       * AllocateIds#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1beta3.model.AllocateIdsRequest}
       * @since 1.13
       */
      protected AllocateIds(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.AllocateIdsRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1beta3.model.AllocateIdsResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public AllocateIds set$Xgafv(java.lang.String $Xgafv) {
        return (AllocateIds) super.set$Xgafv($Xgafv);
      }

      @Override
      public AllocateIds setAccessToken(java.lang.String accessToken) {
        return (AllocateIds) super.setAccessToken(accessToken);
      }

      @Override
      public AllocateIds setAlt(java.lang.String alt) {
        return (AllocateIds) super.setAlt(alt);
      }

      @Override
      public AllocateIds setCallback(java.lang.String callback) {
        return (AllocateIds) super.setCallback(callback);
      }

      @Override
      public AllocateIds setFields(java.lang.String fields) {
        return (AllocateIds) super.setFields(fields);
      }

      @Override
      public AllocateIds setKey(java.lang.String key) {
        return (AllocateIds) super.setKey(key);
      }

      @Override
      public AllocateIds setOauthToken(java.lang.String oauthToken) {
        return (AllocateIds) super.setOauthToken(oauthToken);
      }

      @Override
      public AllocateIds setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AllocateIds) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AllocateIds setQuotaUser(java.lang.String quotaUser) {
        return (AllocateIds) super.setQuotaUser(quotaUser);
      }

      @Override
      public AllocateIds setUploadType(java.lang.String uploadType) {
        return (AllocateIds) super.setUploadType(uploadType);
      }

      @Override
      public AllocateIds setUploadProtocol(java.lang.String uploadProtocol) {
        return (AllocateIds) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public AllocateIds setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public AllocateIds set(String parameterName, Object value) {
        return (AllocateIds) super.set(parameterName, value);
      }
    }
    /**
     * Begins a new transaction.
     *
     * Create a request for the method "projects.beginTransaction".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link BeginTransaction#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1beta3.model.BeginTransactionRequest}
     * @return the request
     */
    public BeginTransaction beginTransaction(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.BeginTransactionRequest content) throws java.io.IOException {
      BeginTransaction result = new BeginTransaction(projectId, content);
      initialize(result);
      return result;
    }

    public class BeginTransaction extends DatastoreRequest<com.google.api.services.datastore.v1beta3.model.BeginTransactionResponse> {

      private static final String REST_PATH = "v1beta3/projects/{projectId}:beginTransaction";

      /**
       * Begins a new transaction.
       *
       * Create a request for the method "projects.beginTransaction".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link BeginTransaction#execute()} method to invoke the remote
       * operation. <p> {@link BeginTransaction#initialize(com.google.api.client.googleapis.services.Abs
       * tractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1beta3.model.BeginTransactionRequest}
       * @since 1.13
       */
      protected BeginTransaction(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.BeginTransactionRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1beta3.model.BeginTransactionResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public BeginTransaction set$Xgafv(java.lang.String $Xgafv) {
        return (BeginTransaction) super.set$Xgafv($Xgafv);
      }

      @Override
      public BeginTransaction setAccessToken(java.lang.String accessToken) {
        return (BeginTransaction) super.setAccessToken(accessToken);
      }

      @Override
      public BeginTransaction setAlt(java.lang.String alt) {
        return (BeginTransaction) super.setAlt(alt);
      }

      @Override
      public BeginTransaction setCallback(java.lang.String callback) {
        return (BeginTransaction) super.setCallback(callback);
      }

      @Override
      public BeginTransaction setFields(java.lang.String fields) {
        return (BeginTransaction) super.setFields(fields);
      }

      @Override
      public BeginTransaction setKey(java.lang.String key) {
        return (BeginTransaction) super.setKey(key);
      }

      @Override
      public BeginTransaction setOauthToken(java.lang.String oauthToken) {
        return (BeginTransaction) super.setOauthToken(oauthToken);
      }

      @Override
      public BeginTransaction setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (BeginTransaction) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public BeginTransaction setQuotaUser(java.lang.String quotaUser) {
        return (BeginTransaction) super.setQuotaUser(quotaUser);
      }

      @Override
      public BeginTransaction setUploadType(java.lang.String uploadType) {
        return (BeginTransaction) super.setUploadType(uploadType);
      }

      @Override
      public BeginTransaction setUploadProtocol(java.lang.String uploadProtocol) {
        return (BeginTransaction) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public BeginTransaction setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public BeginTransaction set(String parameterName, Object value) {
        return (BeginTransaction) super.set(parameterName, value);
      }
    }
    /**
     * Commits a transaction, optionally creating, deleting or modifying some entities.
     *
     * Create a request for the method "projects.commit".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link Commit#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1beta3.model.CommitRequest}
     * @return the request
     */
    public Commit commit(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.CommitRequest content) throws java.io.IOException {
      Commit result = new Commit(projectId, content);
      initialize(result);
      return result;
    }

    public class Commit extends DatastoreRequest<com.google.api.services.datastore.v1beta3.model.CommitResponse> {

      private static final String REST_PATH = "v1beta3/projects/{projectId}:commit";

      /**
       * Commits a transaction, optionally creating, deleting or modifying some entities.
       *
       * Create a request for the method "projects.commit".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link Commit#execute()} method to invoke the remote operation.
       * <p> {@link
       * Commit#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1beta3.model.CommitRequest}
       * @since 1.13
       */
      protected Commit(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.CommitRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1beta3.model.CommitResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public Commit set$Xgafv(java.lang.String $Xgafv) {
        return (Commit) super.set$Xgafv($Xgafv);
      }

      @Override
      public Commit setAccessToken(java.lang.String accessToken) {
        return (Commit) super.setAccessToken(accessToken);
      }

      @Override
      public Commit setAlt(java.lang.String alt) {
        return (Commit) super.setAlt(alt);
      }

      @Override
      public Commit setCallback(java.lang.String callback) {
        return (Commit) super.setCallback(callback);
      }

      @Override
      public Commit setFields(java.lang.String fields) {
        return (Commit) super.setFields(fields);
      }

      @Override
      public Commit setKey(java.lang.String key) {
        return (Commit) super.setKey(key);
      }

      @Override
      public Commit setOauthToken(java.lang.String oauthToken) {
        return (Commit) super.setOauthToken(oauthToken);
      }

      @Override
      public Commit setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Commit) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Commit setQuotaUser(java.lang.String quotaUser) {
        return (Commit) super.setQuotaUser(quotaUser);
      }

      @Override
      public Commit setUploadType(java.lang.String uploadType) {
        return (Commit) super.setUploadType(uploadType);
      }

      @Override
      public Commit setUploadProtocol(java.lang.String uploadProtocol) {
        return (Commit) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public Commit setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Commit set(String parameterName, Object value) {
        return (Commit) super.set(parameterName, value);
      }
    }
    /**
     * Looks up entities by key.
     *
     * Create a request for the method "projects.lookup".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link Lookup#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1beta3.model.LookupRequest}
     * @return the request
     */
    public Lookup lookup(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.LookupRequest content) throws java.io.IOException {
      Lookup result = new Lookup(projectId, content);
      initialize(result);
      return result;
    }

    public class Lookup extends DatastoreRequest<com.google.api.services.datastore.v1beta3.model.LookupResponse> {

      private static final String REST_PATH = "v1beta3/projects/{projectId}:lookup";

      /**
       * Looks up entities by key.
       *
       * Create a request for the method "projects.lookup".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link Lookup#execute()} method to invoke the remote operation.
       * <p> {@link
       * Lookup#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1beta3.model.LookupRequest}
       * @since 1.13
       */
      protected Lookup(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.LookupRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1beta3.model.LookupResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public Lookup set$Xgafv(java.lang.String $Xgafv) {
        return (Lookup) super.set$Xgafv($Xgafv);
      }

      @Override
      public Lookup setAccessToken(java.lang.String accessToken) {
        return (Lookup) super.setAccessToken(accessToken);
      }

      @Override
      public Lookup setAlt(java.lang.String alt) {
        return (Lookup) super.setAlt(alt);
      }

      @Override
      public Lookup setCallback(java.lang.String callback) {
        return (Lookup) super.setCallback(callback);
      }

      @Override
      public Lookup setFields(java.lang.String fields) {
        return (Lookup) super.setFields(fields);
      }

      @Override
      public Lookup setKey(java.lang.String key) {
        return (Lookup) super.setKey(key);
      }

      @Override
      public Lookup setOauthToken(java.lang.String oauthToken) {
        return (Lookup) super.setOauthToken(oauthToken);
      }

      @Override
      public Lookup setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Lookup) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Lookup setQuotaUser(java.lang.String quotaUser) {
        return (Lookup) super.setQuotaUser(quotaUser);
      }

      @Override
      public Lookup setUploadType(java.lang.String uploadType) {
        return (Lookup) super.setUploadType(uploadType);
      }

      @Override
      public Lookup setUploadProtocol(java.lang.String uploadProtocol) {
        return (Lookup) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public Lookup setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Lookup set(String parameterName, Object value) {
        return (Lookup) super.set(parameterName, value);
      }
    }
    /**
     * Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.
     *
     * Create a request for the method "projects.reserveIds".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link ReserveIds#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1beta3.model.ReserveIdsRequest}
     * @return the request
     */
    public ReserveIds reserveIds(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.ReserveIdsRequest content) throws java.io.IOException {
      ReserveIds result = new ReserveIds(projectId, content);
      initialize(result);
      return result;
    }

    public class ReserveIds extends DatastoreRequest<com.google.api.services.datastore.v1beta3.model.ReserveIdsResponse> {

      private static final String REST_PATH = "v1beta3/projects/{projectId}:reserveIds";

      /**
       * Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.
       *
       * Create a request for the method "projects.reserveIds".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link ReserveIds#execute()} method to invoke the remote
       * operation. <p> {@link
       * ReserveIds#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1beta3.model.ReserveIdsRequest}
       * @since 1.13
       */
      protected ReserveIds(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.ReserveIdsRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1beta3.model.ReserveIdsResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public ReserveIds set$Xgafv(java.lang.String $Xgafv) {
        return (ReserveIds) super.set$Xgafv($Xgafv);
      }

      @Override
      public ReserveIds setAccessToken(java.lang.String accessToken) {
        return (ReserveIds) super.setAccessToken(accessToken);
      }

      @Override
      public ReserveIds setAlt(java.lang.String alt) {
        return (ReserveIds) super.setAlt(alt);
      }

      @Override
      public ReserveIds setCallback(java.lang.String callback) {
        return (ReserveIds) super.setCallback(callback);
      }

      @Override
      public ReserveIds setFields(java.lang.String fields) {
        return (ReserveIds) super.setFields(fields);
      }

      @Override
      public ReserveIds setKey(java.lang.String key) {
        return (ReserveIds) super.setKey(key);
      }

      @Override
      public ReserveIds setOauthToken(java.lang.String oauthToken) {
        return (ReserveIds) super.setOauthToken(oauthToken);
      }

      @Override
      public ReserveIds setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ReserveIds) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ReserveIds setQuotaUser(java.lang.String quotaUser) {
        return (ReserveIds) super.setQuotaUser(quotaUser);
      }

      @Override
      public ReserveIds setUploadType(java.lang.String uploadType) {
        return (ReserveIds) super.setUploadType(uploadType);
      }

      @Override
      public ReserveIds setUploadProtocol(java.lang.String uploadProtocol) {
        return (ReserveIds) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public ReserveIds setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public ReserveIds set(String parameterName, Object value) {
        return (ReserveIds) super.set(parameterName, value);
      }
    }
    /**
     * Rolls back a transaction.
     *
     * Create a request for the method "projects.rollback".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link Rollback#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1beta3.model.RollbackRequest}
     * @return the request
     */
    public Rollback rollback(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.RollbackRequest content) throws java.io.IOException {
      Rollback result = new Rollback(projectId, content);
      initialize(result);
      return result;
    }

    public class Rollback extends DatastoreRequest<com.google.api.services.datastore.v1beta3.model.RollbackResponse> {

      private static final String REST_PATH = "v1beta3/projects/{projectId}:rollback";

      /**
       * Rolls back a transaction.
       *
       * Create a request for the method "projects.rollback".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link Rollback#execute()} method to invoke the remote operation.
       * <p> {@link
       * Rollback#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1beta3.model.RollbackRequest}
       * @since 1.13
       */
      protected Rollback(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.RollbackRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1beta3.model.RollbackResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public Rollback set$Xgafv(java.lang.String $Xgafv) {
        return (Rollback) super.set$Xgafv($Xgafv);
      }

      @Override
      public Rollback setAccessToken(java.lang.String accessToken) {
        return (Rollback) super.setAccessToken(accessToken);
      }

      @Override
      public Rollback setAlt(java.lang.String alt) {
        return (Rollback) super.setAlt(alt);
      }

      @Override
      public Rollback setCallback(java.lang.String callback) {
        return (Rollback) super.setCallback(callback);
      }

      @Override
      public Rollback setFields(java.lang.String fields) {
        return (Rollback) super.setFields(fields);
      }

      @Override
      public Rollback setKey(java.lang.String key) {
        return (Rollback) super.setKey(key);
      }

      @Override
      public Rollback setOauthToken(java.lang.String oauthToken) {
        return (Rollback) super.setOauthToken(oauthToken);
      }

      @Override
      public Rollback setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Rollback) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Rollback setQuotaUser(java.lang.String quotaUser) {
        return (Rollback) super.setQuotaUser(quotaUser);
      }

      @Override
      public Rollback setUploadType(java.lang.String uploadType) {
        return (Rollback) super.setUploadType(uploadType);
      }

      @Override
      public Rollback setUploadProtocol(java.lang.String uploadProtocol) {
        return (Rollback) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public Rollback setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public Rollback set(String parameterName, Object value) {
        return (Rollback) super.set(parameterName, value);
      }
    }
    /**
     * Queries for entities.
     *
     * Create a request for the method "projects.runQuery".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link RunQuery#execute()} method to invoke the remote operation.
     *
     * @param projectId The ID of the project against which to make the request.
     * @param content the {@link com.google.api.services.datastore.v1beta3.model.RunQueryRequest}
     * @return the request
     */
    public RunQuery runQuery(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.RunQueryRequest content) throws java.io.IOException {
      RunQuery result = new RunQuery(projectId, content);
      initialize(result);
      return result;
    }

    public class RunQuery extends DatastoreRequest<com.google.api.services.datastore.v1beta3.model.RunQueryResponse> {

      private static final String REST_PATH = "v1beta3/projects/{projectId}:runQuery";

      /**
       * Queries for entities.
       *
       * Create a request for the method "projects.runQuery".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link RunQuery#execute()} method to invoke the remote operation.
       * <p> {@link
       * RunQuery#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param projectId The ID of the project against which to make the request.
       * @param content the {@link com.google.api.services.datastore.v1beta3.model.RunQueryRequest}
       * @since 1.13
       */
      protected RunQuery(java.lang.String projectId, com.google.api.services.datastore.v1beta3.model.RunQueryRequest content) {
        super(Datastore.this, "POST", REST_PATH, content, com.google.api.services.datastore.v1beta3.model.RunQueryResponse.class);
        this.projectId = com.google.api.client.util.Preconditions.checkNotNull(projectId, "Required parameter projectId must be specified.");
      }

      @Override
      public RunQuery set$Xgafv(java.lang.String $Xgafv) {
        return (RunQuery) super.set$Xgafv($Xgafv);
      }

      @Override
      public RunQuery setAccessToken(java.lang.String accessToken) {
        return (RunQuery) super.setAccessToken(accessToken);
      }

      @Override
      public RunQuery setAlt(java.lang.String alt) {
        return (RunQuery) super.setAlt(alt);
      }

      @Override
      public RunQuery setCallback(java.lang.String callback) {
        return (RunQuery) super.setCallback(callback);
      }

      @Override
      public RunQuery setFields(java.lang.String fields) {
        return (RunQuery) super.setFields(fields);
      }

      @Override
      public RunQuery setKey(java.lang.String key) {
        return (RunQuery) super.setKey(key);
      }

      @Override
      public RunQuery setOauthToken(java.lang.String oauthToken) {
        return (RunQuery) super.setOauthToken(oauthToken);
      }

      @Override
      public RunQuery setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RunQuery) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RunQuery setQuotaUser(java.lang.String quotaUser) {
        return (RunQuery) super.setQuotaUser(quotaUser);
      }

      @Override
      public RunQuery setUploadType(java.lang.String uploadType) {
        return (RunQuery) super.setUploadType(uploadType);
      }

      @Override
      public RunQuery setUploadProtocol(java.lang.String uploadProtocol) {
        return (RunQuery) super.setUploadProtocol(uploadProtocol);
      }

      /** The ID of the project against which to make the request. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The ID of the project against which to make the request.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The ID of the project against which to make the request. */
      public RunQuery setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public RunQuery set(String parameterName, Object value) {
        return (RunQuery) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Datastore}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Datastore}. */
    @Override
    public Datastore build() {
      return new Datastore(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link DatastoreRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setDatastoreRequestInitializer(
        DatastoreRequestInitializer datastoreRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(datastoreRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
