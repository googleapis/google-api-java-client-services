/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.areainsights.v1.model;

/**
 * Place type filters. Only Place types from [Table
 * a](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a) are
 * supported. A place can only have a single primary type associated with it. For example, the
 * primary type might be "mexican_restaurant" or "steak_house". Use included_primary_types and
 * excluded_primary_types to filter the results on a place's primary type. A place can also have
 * multiple type values associated with it. For example a restaurant might have the following types:
 * "seafood_restaurant", "restaurant", "food", "point_of_interest", "establishment". Use
 * included_types and excluded_types to filter the results on the list of types associated with a
 * place. If a search is specified with multiple type restrictions, only places that satisfy all of
 * the restrictions are returned. For example, if you specify {"included_types": ["restaurant"],
 * "excluded_primary_types": ["steak_house"]}, the returned places provide "restaurant" related
 * services but do not operate primarily as a "steak_house". If there are any conflicting types,
 * i.e. a type appears in both included_types and excluded_types types or included_primary_types and
 * excluded_primary_types, an INVALID_ARGUMENT error is returned. One of included_types or
 * included_primary_types must be set.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Places Insights API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TypeFilter extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Excluded primary Place types.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> excludedPrimaryTypes;

  /**
   * Optional. Excluded Place types.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> excludedTypes;

  /**
   * Optional. Included primary Place types.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> includedPrimaryTypes;

  /**
   * Optional. Included Place types.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> includedTypes;

  /**
   * Optional. Excluded primary Place types.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getExcludedPrimaryTypes() {
    return excludedPrimaryTypes;
  }

  /**
   * Optional. Excluded primary Place types.
   * @param excludedPrimaryTypes excludedPrimaryTypes or {@code null} for none
   */
  public TypeFilter setExcludedPrimaryTypes(java.util.List<java.lang.String> excludedPrimaryTypes) {
    this.excludedPrimaryTypes = excludedPrimaryTypes;
    return this;
  }

  /**
   * Optional. Excluded Place types.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getExcludedTypes() {
    return excludedTypes;
  }

  /**
   * Optional. Excluded Place types.
   * @param excludedTypes excludedTypes or {@code null} for none
   */
  public TypeFilter setExcludedTypes(java.util.List<java.lang.String> excludedTypes) {
    this.excludedTypes = excludedTypes;
    return this;
  }

  /**
   * Optional. Included primary Place types.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getIncludedPrimaryTypes() {
    return includedPrimaryTypes;
  }

  /**
   * Optional. Included primary Place types.
   * @param includedPrimaryTypes includedPrimaryTypes or {@code null} for none
   */
  public TypeFilter setIncludedPrimaryTypes(java.util.List<java.lang.String> includedPrimaryTypes) {
    this.includedPrimaryTypes = includedPrimaryTypes;
    return this;
  }

  /**
   * Optional. Included Place types.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getIncludedTypes() {
    return includedTypes;
  }

  /**
   * Optional. Included Place types.
   * @param includedTypes includedTypes or {@code null} for none
   */
  public TypeFilter setIncludedTypes(java.util.List<java.lang.String> includedTypes) {
    this.includedTypes = includedTypes;
    return this;
  }

  @Override
  public TypeFilter set(String fieldName, Object value) {
    return (TypeFilter) super.set(fieldName, value);
  }

  @Override
  public TypeFilter clone() {
    return (TypeFilter) super.clone();
  }

}
