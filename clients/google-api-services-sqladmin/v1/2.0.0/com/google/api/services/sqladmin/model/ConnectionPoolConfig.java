/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.sqladmin.model;

/**
 * The managed connection pooling configuration.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud SQL Admin API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ConnectionPoolConfig extends com.google.api.client.json.GenericJson {

  /**
   * Client idle timeout.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String clientConnectionIdleTimeout;

  /**
   * Managed connection pool size.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer connPoolSize;

  /**
   * Whether managed connection pooling is enabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean connectionPoolingEnabled;

  /**
   * Optional. List of connection pool configuration flags
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ConnectionPoolFlags> flags;

  /**
   * Maximum number of client connections in connection pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxClientConnections;

  /**
   * The managed connection pool mode for the instance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String poolMode;

  /**
   * Query wait timeout.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String queryWaitTimeout;

  /**
   * Server idle timeout.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String serverConnectionIdleTimeout;

  /**
   * Client idle timeout.
   * @return value or {@code null} for none
   */
  public String getClientConnectionIdleTimeout() {
    return clientConnectionIdleTimeout;
  }

  /**
   * Client idle timeout.
   * @param clientConnectionIdleTimeout clientConnectionIdleTimeout or {@code null} for none
   */
  public ConnectionPoolConfig setClientConnectionIdleTimeout(String clientConnectionIdleTimeout) {
    this.clientConnectionIdleTimeout = clientConnectionIdleTimeout;
    return this;
  }

  /**
   * Managed connection pool size.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getConnPoolSize() {
    return connPoolSize;
  }

  /**
   * Managed connection pool size.
   * @param connPoolSize connPoolSize or {@code null} for none
   */
  public ConnectionPoolConfig setConnPoolSize(java.lang.Integer connPoolSize) {
    this.connPoolSize = connPoolSize;
    return this;
  }

  /**
   * Whether managed connection pooling is enabled.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getConnectionPoolingEnabled() {
    return connectionPoolingEnabled;
  }

  /**
   * Whether managed connection pooling is enabled.
   * @param connectionPoolingEnabled connectionPoolingEnabled or {@code null} for none
   */
  public ConnectionPoolConfig setConnectionPoolingEnabled(java.lang.Boolean connectionPoolingEnabled) {
    this.connectionPoolingEnabled = connectionPoolingEnabled;
    return this;
  }

  /**
   * Optional. List of connection pool configuration flags
   * @return value or {@code null} for none
   */
  public java.util.List<ConnectionPoolFlags> getFlags() {
    return flags;
  }

  /**
   * Optional. List of connection pool configuration flags
   * @param flags flags or {@code null} for none
   */
  public ConnectionPoolConfig setFlags(java.util.List<ConnectionPoolFlags> flags) {
    this.flags = flags;
    return this;
  }

  /**
   * Maximum number of client connections in connection pool.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxClientConnections() {
    return maxClientConnections;
  }

  /**
   * Maximum number of client connections in connection pool.
   * @param maxClientConnections maxClientConnections or {@code null} for none
   */
  public ConnectionPoolConfig setMaxClientConnections(java.lang.Integer maxClientConnections) {
    this.maxClientConnections = maxClientConnections;
    return this;
  }

  /**
   * The managed connection pool mode for the instance.
   * @return value or {@code null} for none
   */
  public java.lang.String getPoolMode() {
    return poolMode;
  }

  /**
   * The managed connection pool mode for the instance.
   * @param poolMode poolMode or {@code null} for none
   */
  public ConnectionPoolConfig setPoolMode(java.lang.String poolMode) {
    this.poolMode = poolMode;
    return this;
  }

  /**
   * Query wait timeout.
   * @return value or {@code null} for none
   */
  public String getQueryWaitTimeout() {
    return queryWaitTimeout;
  }

  /**
   * Query wait timeout.
   * @param queryWaitTimeout queryWaitTimeout or {@code null} for none
   */
  public ConnectionPoolConfig setQueryWaitTimeout(String queryWaitTimeout) {
    this.queryWaitTimeout = queryWaitTimeout;
    return this;
  }

  /**
   * Server idle timeout.
   * @return value or {@code null} for none
   */
  public String getServerConnectionIdleTimeout() {
    return serverConnectionIdleTimeout;
  }

  /**
   * Server idle timeout.
   * @param serverConnectionIdleTimeout serverConnectionIdleTimeout or {@code null} for none
   */
  public ConnectionPoolConfig setServerConnectionIdleTimeout(String serverConnectionIdleTimeout) {
    this.serverConnectionIdleTimeout = serverConnectionIdleTimeout;
    return this;
  }

  @Override
  public ConnectionPoolConfig set(String fieldName, Object value) {
    return (ConnectionPoolConfig) super.set(fieldName, value);
  }

  @Override
  public ConnectionPoolConfig clone() {
    return (ConnectionPoolConfig) super.clone();
  }

}
