/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.genomics.model;

/**
 * A variant set is a collection of call sets and variants. It contains summary statistics of those
 * contents. A variant set belongs to a dataset.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Genomics API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VariantSet extends com.google.api.client.json.GenericJson {

  /**
   * The dataset to which this variant set belongs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String datasetId;

  /**
   * A textual description of this variant set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * The server-generated variant set ID, unique across all variant sets.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * The metadata associated with this variant set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<VariantSetMetadata> metadata;

  /**
   * User-specified, mutable name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * A list of all references used by the variants in a variant set with associated coordinate upper
   * bounds for each one.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ReferenceBound> referenceBounds;

  static {
    // hack to force ProGuard to consider ReferenceBound used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ReferenceBound.class);
  }

  /**
   * The reference set to which the variant set is mapped. The reference set describes the alignment
   * provenance of the variant set, while the `referenceBounds` describe the shape of the actual
   * variant data. The reference set's reference names are a superset of those found in the
   * `referenceBounds`.
   *
   * For example, given a variant set that is mapped to the GRCh38 reference set and contains a
   * single variant on reference 'X', `referenceBounds` would contain only an entry for 'X', while
   * the associated reference set enumerates all possible references: '1', '2', 'X', 'Y', 'MT', etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String referenceSetId;

  /**
   * The dataset to which this variant set belongs.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatasetId() {
    return datasetId;
  }

  /**
   * The dataset to which this variant set belongs.
   * @param datasetId datasetId or {@code null} for none
   */
  public VariantSet setDatasetId(java.lang.String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * A textual description of this variant set.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * A textual description of this variant set.
   * @param description description or {@code null} for none
   */
  public VariantSet setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * The server-generated variant set ID, unique across all variant sets.
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * The server-generated variant set ID, unique across all variant sets.
   * @param id id or {@code null} for none
   */
  public VariantSet setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * The metadata associated with this variant set.
   * @return value or {@code null} for none
   */
  public java.util.List<VariantSetMetadata> getMetadata() {
    return metadata;
  }

  /**
   * The metadata associated with this variant set.
   * @param metadata metadata or {@code null} for none
   */
  public VariantSet setMetadata(java.util.List<VariantSetMetadata> metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * User-specified, mutable name.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * User-specified, mutable name.
   * @param name name or {@code null} for none
   */
  public VariantSet setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * A list of all references used by the variants in a variant set with associated coordinate upper
   * bounds for each one.
   * @return value or {@code null} for none
   */
  public java.util.List<ReferenceBound> getReferenceBounds() {
    return referenceBounds;
  }

  /**
   * A list of all references used by the variants in a variant set with associated coordinate upper
   * bounds for each one.
   * @param referenceBounds referenceBounds or {@code null} for none
   */
  public VariantSet setReferenceBounds(java.util.List<ReferenceBound> referenceBounds) {
    this.referenceBounds = referenceBounds;
    return this;
  }

  /**
   * The reference set to which the variant set is mapped. The reference set describes the alignment
   * provenance of the variant set, while the `referenceBounds` describe the shape of the actual
   * variant data. The reference set's reference names are a superset of those found in the
   * `referenceBounds`.
   *
   * For example, given a variant set that is mapped to the GRCh38 reference set and contains a
   * single variant on reference 'X', `referenceBounds` would contain only an entry for 'X', while
   * the associated reference set enumerates all possible references: '1', '2', 'X', 'Y', 'MT', etc.
   * @return value or {@code null} for none
   */
  public java.lang.String getReferenceSetId() {
    return referenceSetId;
  }

  /**
   * The reference set to which the variant set is mapped. The reference set describes the alignment
   * provenance of the variant set, while the `referenceBounds` describe the shape of the actual
   * variant data. The reference set's reference names are a superset of those found in the
   * `referenceBounds`.
   *
   * For example, given a variant set that is mapped to the GRCh38 reference set and contains a
   * single variant on reference 'X', `referenceBounds` would contain only an entry for 'X', while
   * the associated reference set enumerates all possible references: '1', '2', 'X', 'Y', 'MT', etc.
   * @param referenceSetId referenceSetId or {@code null} for none
   */
  public VariantSet setReferenceSetId(java.lang.String referenceSetId) {
    this.referenceSetId = referenceSetId;
    return this;
  }

  @Override
  public VariantSet set(String fieldName, Object value) {
    return (VariantSet) super.set(fieldName, value);
  }

  @Override
  public VariantSet clone() {
    return (VariantSet) super.clone();
  }

}
