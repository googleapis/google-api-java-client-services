/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.tagmanager.model;

/**
 * Represents a Google Tag Manager Parameter.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Tag Manager API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Parameter extends com.google.api.client.json.GenericJson {

  /**
   * The named key that uniquely identifies a parameter. Required for top-level parameters, as well
   * as map values. Ignored for list values.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String key;

  /**
   * This list parameter's parameters (keys will be ignored).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Parameter> list;

  /**
   * This map parameter's parameters (must have keys; keys must be unique).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Parameter> map;

  /**
   * The parameter type. Valid values are: - boolean: The value represents a boolean, represented as
   * 'true' or 'false'  - integer: The value represents a 64-bit signed integer value, in base 10  -
   * list: A list of parameters should be specified  - map: A map of parameters should be specified
   * - template: The value represents any text; this can include variable references (even variable
   * references that might return non-string types)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * A parameter's value (may contain variable references such as "{{myVariable}}") as appropriate
   * to the specified type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String value;

  /**
   * The named key that uniquely identifies a parameter. Required for top-level parameters, as well
   * as map values. Ignored for list values.
   * @return value or {@code null} for none
   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * The named key that uniquely identifies a parameter. Required for top-level parameters, as well
   * as map values. Ignored for list values.
   * @param key key or {@code null} for none
   */
  public Parameter setKey(java.lang.String key) {
    this.key = key;
    return this;
  }

  /**
   * This list parameter's parameters (keys will be ignored).
   * @return value or {@code null} for none
   */
  public java.util.List<Parameter> getList() {
    return list;
  }

  /**
   * This list parameter's parameters (keys will be ignored).
   * @param list list or {@code null} for none
   */
  public Parameter setList(java.util.List<Parameter> list) {
    this.list = list;
    return this;
  }

  /**
   * This map parameter's parameters (must have keys; keys must be unique).
   * @return value or {@code null} for none
   */
  public java.util.List<Parameter> getMap() {
    return map;
  }

  /**
   * This map parameter's parameters (must have keys; keys must be unique).
   * @param map map or {@code null} for none
   */
  public Parameter setMap(java.util.List<Parameter> map) {
    this.map = map;
    return this;
  }

  /**
   * The parameter type. Valid values are: - boolean: The value represents a boolean, represented as
   * 'true' or 'false'  - integer: The value represents a 64-bit signed integer value, in base 10  -
   * list: A list of parameters should be specified  - map: A map of parameters should be specified
   * - template: The value represents any text; this can include variable references (even variable
   * references that might return non-string types)
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * The parameter type. Valid values are: - boolean: The value represents a boolean, represented as
   * 'true' or 'false'  - integer: The value represents a 64-bit signed integer value, in base 10  -
   * list: A list of parameters should be specified  - map: A map of parameters should be specified
   * - template: The value represents any text; this can include variable references (even variable
   * references that might return non-string types)
   * @param type type or {@code null} for none
   */
  public Parameter setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * A parameter's value (may contain variable references such as "{{myVariable}}") as appropriate
   * to the specified type.
   * @return value or {@code null} for none
   */
  public java.lang.String getValue() {
    return value;
  }

  /**
   * A parameter's value (may contain variable references such as "{{myVariable}}") as appropriate
   * to the specified type.
   * @param value value or {@code null} for none
   */
  public Parameter setValue(java.lang.String value) {
    this.value = value;
    return this;
  }

  @Override
  public Parameter set(String fieldName, Object value) {
    return (Parameter) super.set(fieldName, value);
  }

  @Override
  public Parameter clone() {
    return (Parameter) super.clone();
  }

}
