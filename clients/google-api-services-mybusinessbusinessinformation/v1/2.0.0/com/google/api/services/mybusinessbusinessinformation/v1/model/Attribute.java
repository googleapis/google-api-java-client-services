/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.mybusinessbusinessinformation.v1.model;

/**
 * A location attribute. Attributes provide additional information about a location. The attributes
 * that can be set on a location may vary based on the properties of that location (for example,
 * category). Available attributes are determined by Google and may be added and removed without API
 * changes.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the My Business Business Information API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Attribute extends com.google.api.client.json.GenericJson {

  /**
   * Required. The resource name for this attribute.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * When the attribute value type is REPEATED_ENUM, this contains the attribute value, and the
   * other values fields must be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepeatedEnumAttributeValue repeatedEnumValue;

  /**
   * When the attribute value type is URL, this field contains the value(s) for this attribute, and
   * the other values fields must be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<UriAttributeValue> uriValues;

  /**
   * Output only. The type of value that this attribute contains. This should be used to determine
   * how to interpret the value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String valueType;

  /**
   * The values for this attribute. The type of the values supplied must match that expected for
   * that attribute. This is a repeated field where multiple attribute values may be provided.
   * Attribute types only support one value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Object> values;

  /**
   * Required. The resource name for this attribute.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required. The resource name for this attribute.
   * @param name name or {@code null} for none
   */
  public Attribute setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * When the attribute value type is REPEATED_ENUM, this contains the attribute value, and the
   * other values fields must be empty.
   * @return value or {@code null} for none
   */
  public RepeatedEnumAttributeValue getRepeatedEnumValue() {
    return repeatedEnumValue;
  }

  /**
   * When the attribute value type is REPEATED_ENUM, this contains the attribute value, and the
   * other values fields must be empty.
   * @param repeatedEnumValue repeatedEnumValue or {@code null} for none
   */
  public Attribute setRepeatedEnumValue(RepeatedEnumAttributeValue repeatedEnumValue) {
    this.repeatedEnumValue = repeatedEnumValue;
    return this;
  }

  /**
   * When the attribute value type is URL, this field contains the value(s) for this attribute, and
   * the other values fields must be empty.
   * @return value or {@code null} for none
   */
  public java.util.List<UriAttributeValue> getUriValues() {
    return uriValues;
  }

  /**
   * When the attribute value type is URL, this field contains the value(s) for this attribute, and
   * the other values fields must be empty.
   * @param uriValues uriValues or {@code null} for none
   */
  public Attribute setUriValues(java.util.List<UriAttributeValue> uriValues) {
    this.uriValues = uriValues;
    return this;
  }

  /**
   * Output only. The type of value that this attribute contains. This should be used to determine
   * how to interpret the value.
   * @return value or {@code null} for none
   */
  public java.lang.String getValueType() {
    return valueType;
  }

  /**
   * Output only. The type of value that this attribute contains. This should be used to determine
   * how to interpret the value.
   * @param valueType valueType or {@code null} for none
   */
  public Attribute setValueType(java.lang.String valueType) {
    this.valueType = valueType;
    return this;
  }

  /**
   * The values for this attribute. The type of the values supplied must match that expected for
   * that attribute. This is a repeated field where multiple attribute values may be provided.
   * Attribute types only support one value.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Object> getValues() {
    return values;
  }

  /**
   * The values for this attribute. The type of the values supplied must match that expected for
   * that attribute. This is a repeated field where multiple attribute values may be provided.
   * Attribute types only support one value.
   * @param values values or {@code null} for none
   */
  public Attribute setValues(java.util.List<java.lang.Object> values) {
    this.values = values;
    return this;
  }

  @Override
  public Attribute set(String fieldName, Object value) {
    return (Attribute) super.set(fieldName, value);
  }

  @Override
  public Attribute clone() {
    return (Attribute) super.clone();
  }

}
