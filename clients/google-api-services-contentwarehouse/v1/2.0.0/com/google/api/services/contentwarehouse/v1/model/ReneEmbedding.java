/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Message to represent an embedding vector with clusters.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ReneEmbedding extends com.google.api.client.json.GenericJson {

  /**
   * Token information of the embedding vector if available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ReneEmbeddingClusterList clusterList;

  /**
   * Compressed value of the embedding. For example, different versions of starburst signals use
   * different compressor to generate the value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String compressedValue;

  /**
   * Optional feature map output from the model. Note: this is not applicable to some models.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> denseFeatureFloatValues;

  /**
   * Values of the embedding vector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> floatValues;

  /**
   * Optional embedding vector prior to projection. Note: this is not applicable to some models.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> floatValuesBeforeProjection;

  /**
   * Token information of the embedding vector if available.
   * @return value or {@code null} for none
   */
  public ReneEmbeddingClusterList getClusterList() {
    return clusterList;
  }

  /**
   * Token information of the embedding vector if available.
   * @param clusterList clusterList or {@code null} for none
   */
  public ReneEmbedding setClusterList(ReneEmbeddingClusterList clusterList) {
    this.clusterList = clusterList;
    return this;
  }

  /**
   * Compressed value of the embedding. For example, different versions of starburst signals use
   * different compressor to generate the value.
   * @see #decodeCompressedValue()
   * @return value or {@code null} for none
   */
  public java.lang.String getCompressedValue() {
    return compressedValue;
  }

  /**
   * Compressed value of the embedding. For example, different versions of starburst signals use
   * different compressor to generate the value.
   * @see #getCompressedValue()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeCompressedValue() {
    return com.google.api.client.util.Base64.decodeBase64(compressedValue);
  }

  /**
   * Compressed value of the embedding. For example, different versions of starburst signals use
   * different compressor to generate the value.
   * @see #encodeCompressedValue()
   * @param compressedValue compressedValue or {@code null} for none
   */
  public ReneEmbedding setCompressedValue(java.lang.String compressedValue) {
    this.compressedValue = compressedValue;
    return this;
  }

  /**
   * Compressed value of the embedding. For example, different versions of starburst signals use
   * different compressor to generate the value.
   * @see #setCompressedValue()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public ReneEmbedding encodeCompressedValue(byte[] compressedValue) {
    this.compressedValue = com.google.api.client.util.Base64.encodeBase64URLSafeString(compressedValue);
    return this;
  }

  /**
   * Optional feature map output from the model. Note: this is not applicable to some models.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getDenseFeatureFloatValues() {
    return denseFeatureFloatValues;
  }

  /**
   * Optional feature map output from the model. Note: this is not applicable to some models.
   * @param denseFeatureFloatValues denseFeatureFloatValues or {@code null} for none
   */
  public ReneEmbedding setDenseFeatureFloatValues(java.util.List<java.lang.Float> denseFeatureFloatValues) {
    this.denseFeatureFloatValues = denseFeatureFloatValues;
    return this;
  }

  /**
   * Values of the embedding vector.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getFloatValues() {
    return floatValues;
  }

  /**
   * Values of the embedding vector.
   * @param floatValues floatValues or {@code null} for none
   */
  public ReneEmbedding setFloatValues(java.util.List<java.lang.Float> floatValues) {
    this.floatValues = floatValues;
    return this;
  }

  /**
   * Optional embedding vector prior to projection. Note: this is not applicable to some models.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getFloatValuesBeforeProjection() {
    return floatValuesBeforeProjection;
  }

  /**
   * Optional embedding vector prior to projection. Note: this is not applicable to some models.
   * @param floatValuesBeforeProjection floatValuesBeforeProjection or {@code null} for none
   */
  public ReneEmbedding setFloatValuesBeforeProjection(java.util.List<java.lang.Float> floatValuesBeforeProjection) {
    this.floatValuesBeforeProjection = floatValuesBeforeProjection;
    return this;
  }

  @Override
  public ReneEmbedding set(String fieldName, Object value) {
    return (ReneEmbedding) super.set(fieldName, value);
  }

  @Override
  public ReneEmbedding clone() {
    return (ReneEmbedding) super.clone();
  }

}
