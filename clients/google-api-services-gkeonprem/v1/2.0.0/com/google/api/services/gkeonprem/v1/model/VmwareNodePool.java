/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.gkeonprem.v1.model;

/**
 * Resource VmwareNodePool represents a VMware node pool. ##
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Anthos On-Prem API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VmwareNodePool extends com.google.api.client.json.GenericJson {

  /**
   * Annotations on the node pool. This field has the same restrictions as Kubernetes annotations.
   * The total size of all keys and values combined is limited to 256k. Key can have 2 segments:
   * prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS
   * subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes
   * (-), underscores (_), dots (.), and alphanumerics between.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> annotations;

  /**
   * Required. The node configuration of the node pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VmwareNodeConfig config;

  /**
   * Output only. The time at which this node pool was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Output only. The time at which this node pool was deleted. If the resource is not deleted, this
   * must be empty
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String deleteTime;

  /**
   * The display name for the node pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on
   * update and delete requests to ensure the client has an up-to-date value before proceeding.
   * Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Immutable. The resource name of this node pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Node pool autoscaling config for the node pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VmwareNodePoolAutoscalingConfig nodePoolAutoscaling;

  /**
   * Anthos version for the node pool. Defaults to the user cluster version.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String onPremVersion;

  /**
   * Output only. If set, there are currently changes in flight to the node pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean reconciling;

  /**
   * Output only. The current state of the node pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. ResourceStatus representing the detailed VMware node pool state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResourceStatus status;

  /**
   * Output only. The unique identifier of the node pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Output only. The time at which this node pool was last updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Annotations on the node pool. This field has the same restrictions as Kubernetes annotations.
   * The total size of all keys and values combined is limited to 256k. Key can have 2 segments:
   * prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS
   * subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes
   * (-), underscores (_), dots (.), and alphanumerics between.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAnnotations() {
    return annotations;
  }

  /**
   * Annotations on the node pool. This field has the same restrictions as Kubernetes annotations.
   * The total size of all keys and values combined is limited to 256k. Key can have 2 segments:
   * prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS
   * subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes
   * (-), underscores (_), dots (.), and alphanumerics between.
   * @param annotations annotations or {@code null} for none
   */
  public VmwareNodePool setAnnotations(java.util.Map<String, java.lang.String> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Required. The node configuration of the node pool.
   * @return value or {@code null} for none
   */
  public VmwareNodeConfig getConfig() {
    return config;
  }

  /**
   * Required. The node configuration of the node pool.
   * @param config config or {@code null} for none
   */
  public VmwareNodePool setConfig(VmwareNodeConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Output only. The time at which this node pool was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time at which this node pool was created.
   * @param createTime createTime or {@code null} for none
   */
  public VmwareNodePool setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. The time at which this node pool was deleted. If the resource is not deleted, this
   * must be empty
   * @return value or {@code null} for none
   */
  public String getDeleteTime() {
    return deleteTime;
  }

  /**
   * Output only. The time at which this node pool was deleted. If the resource is not deleted, this
   * must be empty
   * @param deleteTime deleteTime or {@code null} for none
   */
  public VmwareNodePool setDeleteTime(String deleteTime) {
    this.deleteTime = deleteTime;
    return this;
  }

  /**
   * The display name for the node pool.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * The display name for the node pool.
   * @param displayName displayName or {@code null} for none
   */
  public VmwareNodePool setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on
   * update and delete requests to ensure the client has an up-to-date value before proceeding.
   * Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * This checksum is computed by the server based on the value of other fields, and may be sent on
   * update and delete requests to ensure the client has an up-to-date value before proceeding.
   * Allows clients to perform consistent read-modify-writes through optimistic concurrency control.
   * @param etag etag or {@code null} for none
   */
  public VmwareNodePool setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Immutable. The resource name of this node pool.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Immutable. The resource name of this node pool.
   * @param name name or {@code null} for none
   */
  public VmwareNodePool setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Node pool autoscaling config for the node pool.
   * @return value or {@code null} for none
   */
  public VmwareNodePoolAutoscalingConfig getNodePoolAutoscaling() {
    return nodePoolAutoscaling;
  }

  /**
   * Node pool autoscaling config for the node pool.
   * @param nodePoolAutoscaling nodePoolAutoscaling or {@code null} for none
   */
  public VmwareNodePool setNodePoolAutoscaling(VmwareNodePoolAutoscalingConfig nodePoolAutoscaling) {
    this.nodePoolAutoscaling = nodePoolAutoscaling;
    return this;
  }

  /**
   * Anthos version for the node pool. Defaults to the user cluster version.
   * @return value or {@code null} for none
   */
  public java.lang.String getOnPremVersion() {
    return onPremVersion;
  }

  /**
   * Anthos version for the node pool. Defaults to the user cluster version.
   * @param onPremVersion onPremVersion or {@code null} for none
   */
  public VmwareNodePool setOnPremVersion(java.lang.String onPremVersion) {
    this.onPremVersion = onPremVersion;
    return this;
  }

  /**
   * Output only. If set, there are currently changes in flight to the node pool.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReconciling() {
    return reconciling;
  }

  /**
   * Output only. If set, there are currently changes in flight to the node pool.
   * @param reconciling reconciling or {@code null} for none
   */
  public VmwareNodePool setReconciling(java.lang.Boolean reconciling) {
    this.reconciling = reconciling;
    return this;
  }

  /**
   * Output only. The current state of the node pool.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. The current state of the node pool.
   * @param state state or {@code null} for none
   */
  public VmwareNodePool setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. ResourceStatus representing the detailed VMware node pool state.
   * @return value or {@code null} for none
   */
  public ResourceStatus getStatus() {
    return status;
  }

  /**
   * Output only. ResourceStatus representing the detailed VMware node pool state.
   * @param status status or {@code null} for none
   */
  public VmwareNodePool setStatus(ResourceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Output only. The unique identifier of the node pool.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. The unique identifier of the node pool.
   * @param uid uid or {@code null} for none
   */
  public VmwareNodePool setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Output only. The time at which this node pool was last updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The time at which this node pool was last updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public VmwareNodePool setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public VmwareNodePool set(String fieldName, Object value) {
    return (VmwareNodePool) super.set(fieldName, value);
  }

  @Override
  public VmwareNodePool clone() {
    return (VmwareNodePool) super.clone();
  }

}
