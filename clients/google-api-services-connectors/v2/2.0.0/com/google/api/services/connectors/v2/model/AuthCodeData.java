/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.connectors.v2.model;

/**
 * AuthCodeData contains the data the runtime plane will give the connector backend in exchange for
 * access and refresh tokens.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Connectors API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AuthCodeData extends com.google.api.client.json.GenericJson {

  /**
   * OAuth authorization code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String authCode;

  /**
   * OAuth PKCE verifier, needed if PKCE is enabled for this particular connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pkceVerifier;

  /**
   * OAuth redirect URI passed in during the auth code flow, required by some OAuth backends.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String redirectUri;

  /**
   * OAuth authorization code.
   * @return value or {@code null} for none
   */
  public java.lang.String getAuthCode() {
    return authCode;
  }

  /**
   * OAuth authorization code.
   * @param authCode authCode or {@code null} for none
   */
  public AuthCodeData setAuthCode(java.lang.String authCode) {
    this.authCode = authCode;
    return this;
  }

  /**
   * OAuth PKCE verifier, needed if PKCE is enabled for this particular connection.
   * @return value or {@code null} for none
   */
  public java.lang.String getPkceVerifier() {
    return pkceVerifier;
  }

  /**
   * OAuth PKCE verifier, needed if PKCE is enabled for this particular connection.
   * @param pkceVerifier pkceVerifier or {@code null} for none
   */
  public AuthCodeData setPkceVerifier(java.lang.String pkceVerifier) {
    this.pkceVerifier = pkceVerifier;
    return this;
  }

  /**
   * OAuth redirect URI passed in during the auth code flow, required by some OAuth backends.
   * @return value or {@code null} for none
   */
  public java.lang.String getRedirectUri() {
    return redirectUri;
  }

  /**
   * OAuth redirect URI passed in during the auth code flow, required by some OAuth backends.
   * @param redirectUri redirectUri or {@code null} for none
   */
  public AuthCodeData setRedirectUri(java.lang.String redirectUri) {
    this.redirectUri = redirectUri;
    return this;
  }

  @Override
  public AuthCodeData set(String fieldName, Object value) {
    return (AuthCodeData) super.set(fieldName, value);
  }

  @Override
  public AuthCodeData clone() {
    return (AuthCodeData) super.clone();
  }

}
