/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebase.v1beta1;

/**
 * Service definition for FirebaseManagement (v1beta1).
 *
 * <p>
 * The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://firebase.google.com" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link FirebaseManagementRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class FirebaseManagement extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1)),
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "1.31.0 of the Firebase Management API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://firebase.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://firebase.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public FirebaseManagement(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  FirebaseManagement(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the AvailableProjects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code FirebaseManagement firebase = new FirebaseManagement(...);}
   *   {@code FirebaseManagement.AvailableProjects.List request = firebase.availableProjects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public AvailableProjects availableProjects() {
    return new AvailableProjects();
  }

  /**
   * The "availableProjects" collection of methods.
   */
  public class AvailableProjects {

    /**
     * Lists each [Google Cloud Platform (GCP) `Project`] (https://cloud.google.com/resource-
     * manager/reference/rest/v1/projects) that can have Firebase resources added to it. A Project will
     * only be listed if: - The caller has sufficient [Google IAM](https://cloud.google.com/iam)
     * permissions to call AddFirebase. - The Project is not already a FirebaseProject. - The Project is
     * not in an Organization which has policies that prevent Firebase resources from being added.
     *
     * Create a request for the method "availableProjects.list".
     *
     * This request holds the parameters needed by the firebase server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.ListAvailableProjectsResponse> {

      private static final String REST_PATH = "v1beta1/availableProjects";

      /**
       * Lists each [Google Cloud Platform (GCP) `Project`] (https://cloud.google.com/resource-
       * manager/reference/rest/v1/projects) that can have Firebase resources added to it. A Project
       * will only be listed if: - The caller has sufficient [Google IAM](https://cloud.google.com/iam)
       * permissions to call AddFirebase. - The Project is not already a FirebaseProject. - The Project
       * is not in an Organization which has policies that prevent Firebase resources from being added.
       *
       * Create a request for the method "availableProjects.list".
       *
       * This request holds the parameters needed by the the firebase server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.ListAvailableProjectsResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The maximum number of Projects to return in the response. The server may return fewer than
       * this value at its discretion. If no value is specified (or too large a value is specified),
       * the server will impose its own limit. This value cannot be negative.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer pageSize;

      /** The maximum number of Projects to return in the response. The server may return fewer than this
     value at its discretion. If no value is specified (or too large a value is specified), the server
     will impose its own limit. This value cannot be negative.
       */
      public java.lang.Integer getPageSize() {
        return pageSize;
      }

      /**
       * The maximum number of Projects to return in the response. The server may return fewer than
       * this value at its discretion. If no value is specified (or too large a value is specified),
       * the server will impose its own limit. This value cannot be negative.
       */
      public List setPageSize(java.lang.Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }

      /**
       * Token returned from a previous call to `ListAvailableProjects` indicating where in the set
       * of Projects to resume listing.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Token returned from a previous call to `ListAvailableProjects` indicating where in the set of
     Projects to resume listing.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * Token returned from a previous call to `ListAvailableProjects` indicating where in the set
       * of Projects to resume listing.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Operations collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code FirebaseManagement firebase = new FirebaseManagement(...);}
   *   {@code FirebaseManagement.Operations.List request = firebase.operations().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Operations operations() {
    return new Operations();
  }

  /**
   * The "operations" collection of methods.
   */
  public class Operations {

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the
     * operation result at intervals as recommended by the API service.
     *
     * Create a request for the method "operations.get".
     *
     * This request holds the parameters needed by the firebase server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param name The name of the operation resource.
     * @return the request
     */
    public Get get(java.lang.String name) throws java.io.IOException {
      Get result = new Get(name);
      initialize(result);
      return result;
    }

    public class Get extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.Operation> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^operations/.*$");

      /**
       * Gets the latest state of a long-running operation. Clients can use this method to poll the
       * operation result at intervals as recommended by the API service.
       *
       * Create a request for the method "operations.get".
       *
       * This request holds the parameters needed by the the firebase server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name The name of the operation resource.
       * @since 1.13
       */
      protected Get(java.lang.String name) {
        super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.Operation.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^operations/.*$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** The name of the operation resource. */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The name of the operation resource.
       */
      public java.lang.String getName() {
        return name;
      }

      /** The name of the operation resource. */
      public Get setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^operations/.*$");
        }
        this.name = name;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code FirebaseManagement firebase = new FirebaseManagement(...);}
   *   {@code FirebaseManagement.Projects.List request = firebase.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * Adds Firebase resources to the specified existing [Google Cloud Platform (GCP) `Project`]
     * (https://cloud.google.com/resource-manager/reference/rest/v1/projects). Since a FirebaseProject
     * is actually also a GCP `Project`, a `FirebaseProject` has the same underlying GCP identifiers
     * (`projectNumber` and `projectId`). This allows for easy interop with Google APIs. The result of
     * this call is an [`Operation`](../../v1beta1/operations). Poll the `Operation` to track the
     * provisioning process by calling GetOperation until
     * [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When `done` is `true`, the
     * `Operation` has either succeeded or failed. If the `Operation` succeeded, its
     * [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to a FirebaseProject; if
     * the `Operation` failed, its [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to
     * a google.rpc.Status. The `Operation` is automatically deleted after completion, so there is no
     * need to call DeleteOperation. This method does not modify any billing account information on the
     * underlying GCP `Project`. To call `AddFirebase`, a project member or service account must have
     * the following permissions (the IAM roles of Editor and Owner contain these permissions):
     * `firebase.projects.update`, `resourcemanager.projects.get`, `serviceusage.services.enable`, and
     * `serviceusage.services.get`.
     *
     * Create a request for the method "projects.addFirebase".
     *
     * This request holds the parameters needed by the firebase server.  After setting any optional
     * parameters, call the {@link AddFirebase#execute()} method to invoke the remote operation.
     *
     * @param project The resource name of the GCP `Project` to which Firebase resources will be added, in the format:
     *        projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
     *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
     *        PROJECT_IDENTIFIER values. After calling `AddFirebase`, the unique Project identifiers (
     *        [`projectNumber`](https://cloud.google.com/resource-
     *        manager/reference/rest/v1/projects#Project.FIELDS.project_number) and
     *        [`projectId`](https://cloud.google.com/resource-
     *        manager/reference/rest/v1/projects#Project.FIELDS.project_id)) of the underlying GCP
     *        `Project` are also the identifiers of the FirebaseProject.
     * @param content the {@link com.google.api.services.firebase.v1beta1.model.AddFirebaseRequest}
     * @return the request
     */
    public AddFirebase addFirebase(java.lang.String project, com.google.api.services.firebase.v1beta1.model.AddFirebaseRequest content) throws java.io.IOException {
      AddFirebase result = new AddFirebase(project, content);
      initialize(result);
      return result;
    }

    public class AddFirebase extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.Operation> {

      private static final String REST_PATH = "v1beta1/{+project}:addFirebase";

      private final java.util.regex.Pattern PROJECT_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+$");

      /**
       * Adds Firebase resources to the specified existing [Google Cloud Platform (GCP) `Project`]
       * (https://cloud.google.com/resource-manager/reference/rest/v1/projects). Since a FirebaseProject
       * is actually also a GCP `Project`, a `FirebaseProject` has the same underlying GCP identifiers
       * (`projectNumber` and `projectId`). This allows for easy interop with Google APIs. The result of
       * this call is an [`Operation`](../../v1beta1/operations). Poll the `Operation` to track the
       * provisioning process by calling GetOperation until
       * [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When `done` is `true`, the
       * `Operation` has either succeeded or failed. If the `Operation` succeeded, its
       * [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to a FirebaseProject;
       * if the `Operation` failed, its [`error`](../../v1beta1/operations#Operation.FIELDS.error) is
       * set to a google.rpc.Status. The `Operation` is automatically deleted after completion, so there
       * is no need to call DeleteOperation. This method does not modify any billing account information
       * on the underlying GCP `Project`. To call `AddFirebase`, a project member or service account
       * must have the following permissions (the IAM roles of Editor and Owner contain these
       * permissions): `firebase.projects.update`, `resourcemanager.projects.get`,
       * `serviceusage.services.enable`, and `serviceusage.services.get`.
       *
       * Create a request for the method "projects.addFirebase".
       *
       * This request holds the parameters needed by the the firebase server.  After setting any
       * optional parameters, call the {@link AddFirebase#execute()} method to invoke the remote
       * operation. <p> {@link
       * AddFirebase#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param project The resource name of the GCP `Project` to which Firebase resources will be added, in the format:
     *        projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
     *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
     *        PROJECT_IDENTIFIER values. After calling `AddFirebase`, the unique Project identifiers (
     *        [`projectNumber`](https://cloud.google.com/resource-
     *        manager/reference/rest/v1/projects#Project.FIELDS.project_number) and
     *        [`projectId`](https://cloud.google.com/resource-
     *        manager/reference/rest/v1/projects#Project.FIELDS.project_id)) of the underlying GCP
     *        `Project` are also the identifiers of the FirebaseProject.
       * @param content the {@link com.google.api.services.firebase.v1beta1.model.AddFirebaseRequest}
       * @since 1.13
       */
      protected AddFirebase(java.lang.String project, com.google.api.services.firebase.v1beta1.model.AddFirebaseRequest content) {
        super(FirebaseManagement.this, "POST", REST_PATH, content, com.google.api.services.firebase.v1beta1.model.Operation.class);
        this.project = com.google.api.client.util.Preconditions.checkNotNull(project, "Required parameter project must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(PROJECT_PATTERN.matcher(project).matches(),
              "Parameter project must conform to the pattern " +
              "^projects/[^/]+$");
        }
      }

      @Override
      public AddFirebase set$Xgafv(java.lang.String $Xgafv) {
        return (AddFirebase) super.set$Xgafv($Xgafv);
      }

      @Override
      public AddFirebase setAccessToken(java.lang.String accessToken) {
        return (AddFirebase) super.setAccessToken(accessToken);
      }

      @Override
      public AddFirebase setAlt(java.lang.String alt) {
        return (AddFirebase) super.setAlt(alt);
      }

      @Override
      public AddFirebase setCallback(java.lang.String callback) {
        return (AddFirebase) super.setCallback(callback);
      }

      @Override
      public AddFirebase setFields(java.lang.String fields) {
        return (AddFirebase) super.setFields(fields);
      }

      @Override
      public AddFirebase setKey(java.lang.String key) {
        return (AddFirebase) super.setKey(key);
      }

      @Override
      public AddFirebase setOauthToken(java.lang.String oauthToken) {
        return (AddFirebase) super.setOauthToken(oauthToken);
      }

      @Override
      public AddFirebase setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddFirebase) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddFirebase setQuotaUser(java.lang.String quotaUser) {
        return (AddFirebase) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddFirebase setUploadType(java.lang.String uploadType) {
        return (AddFirebase) super.setUploadType(uploadType);
      }

      @Override
      public AddFirebase setUploadProtocol(java.lang.String uploadProtocol) {
        return (AddFirebase) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the GCP `Project` to which Firebase resources will be added, in the
       * format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       * PROJECT_IDENTIFIER values. After calling `AddFirebase`, the unique Project identifiers (
       * [`projectNumber`](https://cloud.google.com/resource-
       * manager/reference/rest/v1/projects#Project.FIELDS.project_number) and
       * [`projectId`](https://cloud.google.com/resource-
       * manager/reference/rest/v1/projects#Project.FIELDS.project_id)) of the underlying GCP
       * `Project` are also the identifiers of the FirebaseProject.
       */
      @com.google.api.client.util.Key
      private java.lang.String project;

      /** The resource name of the GCP `Project` to which Firebase resources will be added, in the format:
     projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
     [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER
     values. After calling `AddFirebase`, the unique Project identifiers (
     [`projectNumber`](https://cloud.google.com/resource-
     manager/reference/rest/v1/projects#Project.FIELDS.project_number) and
     [`projectId`](https://cloud.google.com/resource-
     manager/reference/rest/v1/projects#Project.FIELDS.project_id)) of the underlying GCP `Project` are
     also the identifiers of the FirebaseProject.
       */
      public java.lang.String getProject() {
        return project;
      }

      /**
       * The resource name of the GCP `Project` to which Firebase resources will be added, in the
       * format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       * PROJECT_IDENTIFIER values. After calling `AddFirebase`, the unique Project identifiers (
       * [`projectNumber`](https://cloud.google.com/resource-
       * manager/reference/rest/v1/projects#Project.FIELDS.project_number) and
       * [`projectId`](https://cloud.google.com/resource-
       * manager/reference/rest/v1/projects#Project.FIELDS.project_id)) of the underlying GCP
       * `Project` are also the identifiers of the FirebaseProject.
       */
      public AddFirebase setProject(java.lang.String project) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(PROJECT_PATTERN.matcher(project).matches(),
              "Parameter project must conform to the pattern " +
              "^projects/[^/]+$");
        }
        this.project = project;
        return this;
      }

      @Override
      public AddFirebase set(String parameterName, Object value) {
        return (AddFirebase) super.set(parameterName, value);
      }
    }
    /**
     * Links the specified FirebaseProject with an existing [Google Analytics
     * account](http://www.google.com/analytics/). Using this call, you can either: - Specify an
     * `analyticsAccountId` to provision a new Google Analytics property within the specified account
     * and associate the new property with the `FirebaseProject`. - Specify an existing
     * `analyticsPropertyId` to associate the property with the `FirebaseProject`. Note that when you
     * call `AddGoogleAnalytics`: 1. The first check determines if any existing data streams in the
     * Google Analytics property correspond to any existing Firebase Apps in the `FirebaseProject`
     * (based on the `packageName` or `bundleId` associated with the data stream). Then, as applicable,
     * the data streams and apps are linked. Note that this auto-linking only applies to `AndroidApps`
     * and `IosApps`. 2. If no corresponding data streams are found for the Firebase Apps, new data
     * streams are provisioned in the Google Analytics property for each of the Firebase Apps. Note that
     * a new data stream is always provisioned for a Web App even if it was previously associated with a
     * data stream in the Analytics property. Learn more about the hierarchy and structure of Google
     * Analytics accounts in the [Analytics
     * documentation](https://support.google.com/analytics/answer/9303323). The result of this call is
     * an [`Operation`](../../v1beta1/operations). Poll the `Operation` to track the provisioning
     * process by calling GetOperation until [`done`](../../v1beta1/operations#Operation.FIELDS.done) is
     * `true`. When `done` is `true`, the `Operation` has either succeeded or failed. If the `Operation`
     * succeeded, its [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to an
     * AnalyticsDetails; if the `Operation` failed, its
     * [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a google.rpc.Status. To call
     * `AddGoogleAnalytics`, a project member must be an Owner for the existing `FirebaseProject` and
     * have the [`Edit` permission](https://support.google.com/analytics/answer/2884495) for the Google
     * Analytics account. If the `FirebaseProject` already has Google Analytics enabled, and you call
     * `AddGoogleAnalytics` using an `analyticsPropertyId` that's different from the currently
     * associated property, then the call will fail. Analytics may have already been enabled in the
     * Firebase console or by specifying `timeZone` and `regionCode` in the call to
     * [`AddFirebase`](../../v1beta1/projects/addFirebase).
     *
     * Create a request for the method "projects.addGoogleAnalytics".
     *
     * This request holds the parameters needed by the firebase server.  After setting any optional
     * parameters, call the {@link AddGoogleAnalytics#execute()} method to invoke the remote operation.
     *
     * @param parent The resource name of the FirebaseProject to link to an existing Google Analytics account, in the
     *        format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
     *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
     *        PROJECT_IDENTIFIER values.
     * @param content the {@link com.google.api.services.firebase.v1beta1.model.AddGoogleAnalyticsRequest}
     * @return the request
     */
    public AddGoogleAnalytics addGoogleAnalytics(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.AddGoogleAnalyticsRequest content) throws java.io.IOException {
      AddGoogleAnalytics result = new AddGoogleAnalytics(parent, content);
      initialize(result);
      return result;
    }

    public class AddGoogleAnalytics extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.Operation> {

      private static final String REST_PATH = "v1beta1/{+parent}:addGoogleAnalytics";

      private final java.util.regex.Pattern PARENT_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+$");

      /**
       * Links the specified FirebaseProject with an existing [Google Analytics
       * account](http://www.google.com/analytics/). Using this call, you can either: - Specify an
       * `analyticsAccountId` to provision a new Google Analytics property within the specified account
       * and associate the new property with the `FirebaseProject`. - Specify an existing
       * `analyticsPropertyId` to associate the property with the `FirebaseProject`. Note that when you
       * call `AddGoogleAnalytics`: 1. The first check determines if any existing data streams in the
       * Google Analytics property correspond to any existing Firebase Apps in the `FirebaseProject`
       * (based on the `packageName` or `bundleId` associated with the data stream). Then, as
       * applicable, the data streams and apps are linked. Note that this auto-linking only applies to
       * `AndroidApps` and `IosApps`. 2. If no corresponding data streams are found for the Firebase
       * Apps, new data streams are provisioned in the Google Analytics property for each of the
       * Firebase Apps. Note that a new data stream is always provisioned for a Web App even if it was
       * previously associated with a data stream in the Analytics property. Learn more about the
       * hierarchy and structure of Google Analytics accounts in the [Analytics
       * documentation](https://support.google.com/analytics/answer/9303323). The result of this call is
       * an [`Operation`](../../v1beta1/operations). Poll the `Operation` to track the provisioning
       * process by calling GetOperation until [`done`](../../v1beta1/operations#Operation.FIELDS.done)
       * is `true`. When `done` is `true`, the `Operation` has either succeeded or failed. If the
       * `Operation` succeeded, its [`response`](../../v1beta1/operations#Operation.FIELDS.response) is
       * set to an AnalyticsDetails; if the `Operation` failed, its
       * [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a google.rpc.Status. To
       * call `AddGoogleAnalytics`, a project member must be an Owner for the existing `FirebaseProject`
       * and have the [`Edit` permission](https://support.google.com/analytics/answer/2884495) for the
       * Google Analytics account. If the `FirebaseProject` already has Google Analytics enabled, and
       * you call `AddGoogleAnalytics` using an `analyticsPropertyId` that's different from the
       * currently associated property, then the call will fail. Analytics may have already been enabled
       * in the Firebase console or by specifying `timeZone` and `regionCode` in the call to
       * [`AddFirebase`](../../v1beta1/projects/addFirebase).
       *
       * Create a request for the method "projects.addGoogleAnalytics".
       *
       * This request holds the parameters needed by the the firebase server.  After setting any
       * optional parameters, call the {@link AddGoogleAnalytics#execute()} method to invoke the remote
       * operation. <p> {@link AddGoogleAnalytics#initialize(com.google.api.client.googleapis.services.A
       * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param parent The resource name of the FirebaseProject to link to an existing Google Analytics account, in the
     *        format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
     *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
     *        PROJECT_IDENTIFIER values.
       * @param content the {@link com.google.api.services.firebase.v1beta1.model.AddGoogleAnalyticsRequest}
       * @since 1.13
       */
      protected AddGoogleAnalytics(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.AddGoogleAnalyticsRequest content) {
        super(FirebaseManagement.this, "POST", REST_PATH, content, com.google.api.services.firebase.v1beta1.model.Operation.class);
        this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
              "Parameter parent must conform to the pattern " +
              "^projects/[^/]+$");
        }
      }

      @Override
      public AddGoogleAnalytics set$Xgafv(java.lang.String $Xgafv) {
        return (AddGoogleAnalytics) super.set$Xgafv($Xgafv);
      }

      @Override
      public AddGoogleAnalytics setAccessToken(java.lang.String accessToken) {
        return (AddGoogleAnalytics) super.setAccessToken(accessToken);
      }

      @Override
      public AddGoogleAnalytics setAlt(java.lang.String alt) {
        return (AddGoogleAnalytics) super.setAlt(alt);
      }

      @Override
      public AddGoogleAnalytics setCallback(java.lang.String callback) {
        return (AddGoogleAnalytics) super.setCallback(callback);
      }

      @Override
      public AddGoogleAnalytics setFields(java.lang.String fields) {
        return (AddGoogleAnalytics) super.setFields(fields);
      }

      @Override
      public AddGoogleAnalytics setKey(java.lang.String key) {
        return (AddGoogleAnalytics) super.setKey(key);
      }

      @Override
      public AddGoogleAnalytics setOauthToken(java.lang.String oauthToken) {
        return (AddGoogleAnalytics) super.setOauthToken(oauthToken);
      }

      @Override
      public AddGoogleAnalytics setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddGoogleAnalytics) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddGoogleAnalytics setQuotaUser(java.lang.String quotaUser) {
        return (AddGoogleAnalytics) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddGoogleAnalytics setUploadType(java.lang.String uploadType) {
        return (AddGoogleAnalytics) super.setUploadType(uploadType);
      }

      @Override
      public AddGoogleAnalytics setUploadProtocol(java.lang.String uploadProtocol) {
        return (AddGoogleAnalytics) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the FirebaseProject to link to an existing Google Analytics account,
       * in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       * PROJECT_IDENTIFIER values.
       */
      @com.google.api.client.util.Key
      private java.lang.String parent;

      /** The resource name of the FirebaseProject to link to an existing Google Analytics account, in the
     format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
     [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER
     values.
       */
      public java.lang.String getParent() {
        return parent;
      }

      /**
       * The resource name of the FirebaseProject to link to an existing Google Analytics account,
       * in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       * PROJECT_IDENTIFIER values.
       */
      public AddGoogleAnalytics setParent(java.lang.String parent) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
              "Parameter parent must conform to the pattern " +
              "^projects/[^/]+$");
        }
        this.parent = parent;
        return this;
      }

      @Override
      public AddGoogleAnalytics set(String parameterName, Object value) {
        return (AddGoogleAnalytics) super.set(parameterName, value);
      }
    }
    /**
     * Gets the specified FirebaseProject.
     *
     * Create a request for the method "projects.get".
     *
     * This request holds the parameters needed by the firebase server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param name The resource name of the FirebaseProject, in the format: projects/ PROJECT_IDENTIFIER Refer to the
     *        `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for details
     *        about PROJECT_IDENTIFIER values.
     * @return the request
     */
    public Get get(java.lang.String name) throws java.io.IOException {
      Get result = new Get(name);
      initialize(result);
      return result;
    }

    public class Get extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.FirebaseProject> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+$");

      /**
       * Gets the specified FirebaseProject.
       *
       * Create a request for the method "projects.get".
       *
       * This request holds the parameters needed by the the firebase server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the FirebaseProject, in the format: projects/ PROJECT_IDENTIFIER Refer to the
     *        `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for details
     *        about PROJECT_IDENTIFIER values.
       * @since 1.13
       */
      protected Get(java.lang.String name) {
        super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.FirebaseProject.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the FirebaseProject, in the format: projects/ PROJECT_IDENTIFIER Refer
       * to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for
       * details about PROJECT_IDENTIFIER values.
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the FirebaseProject, in the format: projects/ PROJECT_IDENTIFIER Refer to the
     `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
     PROJECT_IDENTIFIER values.
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the FirebaseProject, in the format: projects/ PROJECT_IDENTIFIER Refer
       * to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for
       * details about PROJECT_IDENTIFIER values.
       */
      public Get setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+$");
        }
        this.name = name;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Gets the configuration artifact associated with the specified FirebaseProject, which can be used
     * by servers to simplify initialization. Typically, this configuration is used with the Firebase
     * Admin SDK [initializeApp](https://firebase.google.com/docs/admin/setup#initialize_the_sdk)
     * command.
     *
     * Create a request for the method "projects.getAdminSdkConfig".
     *
     * This request holds the parameters needed by the firebase server.  After setting any optional
     * parameters, call the {@link GetAdminSdkConfig#execute()} method to invoke the remote operation.
     *
     * @param name The resource name of the FirebaseProject, in the format: projects/ PROJECT_IDENTIFIER/adminSdkConfig
     *        Refer to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for
     *        details about PROJECT_IDENTIFIER values.
     * @return the request
     */
    public GetAdminSdkConfig getAdminSdkConfig(java.lang.String name) throws java.io.IOException {
      GetAdminSdkConfig result = new GetAdminSdkConfig(name);
      initialize(result);
      return result;
    }

    public class GetAdminSdkConfig extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.AdminSdkConfig> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/adminSdkConfig$");

      /**
       * Gets the configuration artifact associated with the specified FirebaseProject, which can be
       * used by servers to simplify initialization. Typically, this configuration is used with the
       * Firebase Admin SDK
       * [initializeApp](https://firebase.google.com/docs/admin/setup#initialize_the_sdk) command.
       *
       * Create a request for the method "projects.getAdminSdkConfig".
       *
       * This request holds the parameters needed by the the firebase server.  After setting any
       * optional parameters, call the {@link GetAdminSdkConfig#execute()} method to invoke the remote
       * operation. <p> {@link GetAdminSdkConfig#initialize(com.google.api.client.googleapis.services.Ab
       * stractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param name The resource name of the FirebaseProject, in the format: projects/ PROJECT_IDENTIFIER/adminSdkConfig
     *        Refer to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for
     *        details about PROJECT_IDENTIFIER values.
       * @since 1.13
       */
      protected GetAdminSdkConfig(java.lang.String name) {
        super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.AdminSdkConfig.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/adminSdkConfig$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetAdminSdkConfig set$Xgafv(java.lang.String $Xgafv) {
        return (GetAdminSdkConfig) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetAdminSdkConfig setAccessToken(java.lang.String accessToken) {
        return (GetAdminSdkConfig) super.setAccessToken(accessToken);
      }

      @Override
      public GetAdminSdkConfig setAlt(java.lang.String alt) {
        return (GetAdminSdkConfig) super.setAlt(alt);
      }

      @Override
      public GetAdminSdkConfig setCallback(java.lang.String callback) {
        return (GetAdminSdkConfig) super.setCallback(callback);
      }

      @Override
      public GetAdminSdkConfig setFields(java.lang.String fields) {
        return (GetAdminSdkConfig) super.setFields(fields);
      }

      @Override
      public GetAdminSdkConfig setKey(java.lang.String key) {
        return (GetAdminSdkConfig) super.setKey(key);
      }

      @Override
      public GetAdminSdkConfig setOauthToken(java.lang.String oauthToken) {
        return (GetAdminSdkConfig) super.setOauthToken(oauthToken);
      }

      @Override
      public GetAdminSdkConfig setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetAdminSdkConfig) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetAdminSdkConfig setQuotaUser(java.lang.String quotaUser) {
        return (GetAdminSdkConfig) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetAdminSdkConfig setUploadType(java.lang.String uploadType) {
        return (GetAdminSdkConfig) super.setUploadType(uploadType);
      }

      @Override
      public GetAdminSdkConfig setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetAdminSdkConfig) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the FirebaseProject, in the format: projects/
       * PROJECT_IDENTIFIER/adminSdkConfig Refer to the `FirebaseProject`
       * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       * PROJECT_IDENTIFIER values.
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the FirebaseProject, in the format: projects/
     PROJECT_IDENTIFIER/adminSdkConfig Refer to the `FirebaseProject`
     [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER
     values.
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the FirebaseProject, in the format: projects/
       * PROJECT_IDENTIFIER/adminSdkConfig Refer to the `FirebaseProject`
       * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       * PROJECT_IDENTIFIER values.
       */
      public GetAdminSdkConfig setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/adminSdkConfig$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetAdminSdkConfig set(String parameterName, Object value) {
        return (GetAdminSdkConfig) super.set(parameterName, value);
      }
    }
    /**
     * Gets the Google Analytics details currently associated with the specified FirebaseProject. If the
     * `FirebaseProject` is not yet linked to Google Analytics, then the response to
     * `GetAnalyticsDetails` is `NOT_FOUND`.
     *
     * Create a request for the method "projects.getAnalyticsDetails".
     *
     * This request holds the parameters needed by the firebase server.  After setting any optional
     * parameters, call the {@link GetAnalyticsDetails#execute()} method to invoke the remote operation.
     *
     * @param name The resource name of the FirebaseProject, in the format: projects/
     *        PROJECT_IDENTIFIER/analyticsDetails Refer to the `FirebaseProject`
     *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
     *        PROJECT_IDENTIFIER values.
     * @return the request
     */
    public GetAnalyticsDetails getAnalyticsDetails(java.lang.String name) throws java.io.IOException {
      GetAnalyticsDetails result = new GetAnalyticsDetails(name);
      initialize(result);
      return result;
    }

    public class GetAnalyticsDetails extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.AnalyticsDetails> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/analyticsDetails$");

      /**
       * Gets the Google Analytics details currently associated with the specified FirebaseProject. If
       * the `FirebaseProject` is not yet linked to Google Analytics, then the response to
       * `GetAnalyticsDetails` is `NOT_FOUND`.
       *
       * Create a request for the method "projects.getAnalyticsDetails".
       *
       * This request holds the parameters needed by the the firebase server.  After setting any
       * optional parameters, call the {@link GetAnalyticsDetails#execute()} method to invoke the remote
       * operation. <p> {@link GetAnalyticsDetails#initialize(com.google.api.client.googleapis.services.
       * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param name The resource name of the FirebaseProject, in the format: projects/
     *        PROJECT_IDENTIFIER/analyticsDetails Refer to the `FirebaseProject`
     *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
     *        PROJECT_IDENTIFIER values.
       * @since 1.13
       */
      protected GetAnalyticsDetails(java.lang.String name) {
        super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.AnalyticsDetails.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/analyticsDetails$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetAnalyticsDetails set$Xgafv(java.lang.String $Xgafv) {
        return (GetAnalyticsDetails) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetAnalyticsDetails setAccessToken(java.lang.String accessToken) {
        return (GetAnalyticsDetails) super.setAccessToken(accessToken);
      }

      @Override
      public GetAnalyticsDetails setAlt(java.lang.String alt) {
        return (GetAnalyticsDetails) super.setAlt(alt);
      }

      @Override
      public GetAnalyticsDetails setCallback(java.lang.String callback) {
        return (GetAnalyticsDetails) super.setCallback(callback);
      }

      @Override
      public GetAnalyticsDetails setFields(java.lang.String fields) {
        return (GetAnalyticsDetails) super.setFields(fields);
      }

      @Override
      public GetAnalyticsDetails setKey(java.lang.String key) {
        return (GetAnalyticsDetails) super.setKey(key);
      }

      @Override
      public GetAnalyticsDetails setOauthToken(java.lang.String oauthToken) {
        return (GetAnalyticsDetails) super.setOauthToken(oauthToken);
      }

      @Override
      public GetAnalyticsDetails setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetAnalyticsDetails) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetAnalyticsDetails setQuotaUser(java.lang.String quotaUser) {
        return (GetAnalyticsDetails) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetAnalyticsDetails setUploadType(java.lang.String uploadType) {
        return (GetAnalyticsDetails) super.setUploadType(uploadType);
      }

      @Override
      public GetAnalyticsDetails setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetAnalyticsDetails) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the FirebaseProject, in the format: projects/
       * PROJECT_IDENTIFIER/analyticsDetails Refer to the `FirebaseProject`
       * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       * PROJECT_IDENTIFIER values.
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the FirebaseProject, in the format: projects/
     PROJECT_IDENTIFIER/analyticsDetails Refer to the `FirebaseProject`
     [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER
     values.
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the FirebaseProject, in the format: projects/
       * PROJECT_IDENTIFIER/analyticsDetails Refer to the `FirebaseProject`
       * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       * PROJECT_IDENTIFIER values.
       */
      public GetAnalyticsDetails setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/analyticsDetails$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetAnalyticsDetails set(String parameterName, Object value) {
        return (GetAnalyticsDetails) super.set(parameterName, value);
      }
    }
    /**
     * Lists each FirebaseProject accessible to the caller. The elements are returned in no particular
     * order, but they will be a consistent view of the Projects when additional requests are made with
     * a `pageToken`. This method is eventually consistent with Project mutations, which means newly
     * provisioned Projects and recent modifications to existing Projects might not be reflected in the
     * set of Projects. The list will include only ACTIVE Projects. Use GetFirebaseProject for
     * consistent reads as well as for additional Project details.
     *
     * Create a request for the method "projects.list".
     *
     * This request holds the parameters needed by the firebase server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.ListFirebaseProjectsResponse> {

      private static final String REST_PATH = "v1beta1/projects";

      /**
       * Lists each FirebaseProject accessible to the caller. The elements are returned in no particular
       * order, but they will be a consistent view of the Projects when additional requests are made
       * with a `pageToken`. This method is eventually consistent with Project mutations, which means
       * newly provisioned Projects and recent modifications to existing Projects might not be reflected
       * in the set of Projects. The list will include only ACTIVE Projects. Use GetFirebaseProject for
       * consistent reads as well as for additional Project details.
       *
       * Create a request for the method "projects.list".
       *
       * This request holds the parameters needed by the the firebase server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.ListFirebaseProjectsResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The maximum number of Projects to return in the response. The server may return fewer than
       * this at its discretion. If no value is specified (or too large a value is specified), the
       * server will impose its own limit. This value cannot be negative.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer pageSize;

      /** The maximum number of Projects to return in the response. The server may return fewer than this at
     its discretion. If no value is specified (or too large a value is specified), the server will
     impose its own limit. This value cannot be negative.
       */
      public java.lang.Integer getPageSize() {
        return pageSize;
      }

      /**
       * The maximum number of Projects to return in the response. The server may return fewer than
       * this at its discretion. If no value is specified (or too large a value is specified), the
       * server will impose its own limit. This value cannot be negative.
       */
      public List setPageSize(java.lang.Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }

      /**
       * Token returned from a previous call to `ListFirebaseProjects` indicating where in the set
       * of Projects to resume listing.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Token returned from a previous call to `ListFirebaseProjects` indicating where in the set of
     Projects to resume listing.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * Token returned from a previous call to `ListFirebaseProjects` indicating where in the set
       * of Projects to resume listing.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Updates the attributes of the specified FirebaseProject. All [query parameters](#query-
     * parameters) are required.
     *
     * Create a request for the method "projects.patch".
     *
     * This request holds the parameters needed by the firebase server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param name The resource name of the Project, in the format: projects/PROJECT_IDENTIFIER PROJECT_IDENTIFIER: the
     *        Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number)
     *        ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id).
     *        Learn more about using project identifiers in Google's [AIP 2510
     *        standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
     *        in any response body will be the `ProjectId`.
     * @param content the {@link com.google.api.services.firebase.v1beta1.model.FirebaseProject}
     * @return the request
     */
    public Patch patch(java.lang.String name, com.google.api.services.firebase.v1beta1.model.FirebaseProject content) throws java.io.IOException {
      Patch result = new Patch(name, content);
      initialize(result);
      return result;
    }

    public class Patch extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.FirebaseProject> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+$");

      /**
       * Updates the attributes of the specified FirebaseProject. All [query parameters](#query-
       * parameters) are required.
       *
       * Create a request for the method "projects.patch".
       *
       * This request holds the parameters needed by the the firebase server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the Project, in the format: projects/PROJECT_IDENTIFIER PROJECT_IDENTIFIER: the
     *        Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number)
     *        ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id).
     *        Learn more about using project identifiers in Google's [AIP 2510
     *        standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
     *        in any response body will be the `ProjectId`.
       * @param content the {@link com.google.api.services.firebase.v1beta1.model.FirebaseProject}
       * @since 1.13
       */
      protected Patch(java.lang.String name, com.google.api.services.firebase.v1beta1.model.FirebaseProject content) {
        super(FirebaseManagement.this, "PATCH", REST_PATH, content, com.google.api.services.firebase.v1beta1.model.FirebaseProject.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+$");
        }
      }

      @Override
      public Patch set$Xgafv(java.lang.String $Xgafv) {
        return (Patch) super.set$Xgafv($Xgafv);
      }

      @Override
      public Patch setAccessToken(java.lang.String accessToken) {
        return (Patch) super.setAccessToken(accessToken);
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setCallback(java.lang.String callback) {
        return (Patch) super.setCallback(callback);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUploadType(java.lang.String uploadType) {
        return (Patch) super.setUploadType(uploadType);
      }

      @Override
      public Patch setUploadProtocol(java.lang.String uploadProtocol) {
        return (Patch) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the Project, in the format: projects/PROJECT_IDENTIFIER
       * PROJECT_IDENTIFIER: the Project's
       * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or
       * its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using
       * project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).
       * Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`.
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the Project, in the format: projects/PROJECT_IDENTIFIER PROJECT_IDENTIFIER:
     the Project's [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number)
     ***(recommended)*** or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more
     about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).
     Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`.
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the Project, in the format: projects/PROJECT_IDENTIFIER
       * PROJECT_IDENTIFIER: the Project's
       * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or
       * its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using
       * project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).
       * Note that the value for PROJECT_IDENTIFIER in any response body will be the `ProjectId`.
       */
      public Patch setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+$");
        }
        this.name = name;
        return this;
      }

      /**
       * Specifies which fields to update. If this list is empty, then no state will be updated.
       * Note that the fields `name`, `projectId`, and `projectNumber` are all immutable.
       */
      @com.google.api.client.util.Key
      private String updateMask;

      /** Specifies which fields to update. If this list is empty, then no state will be updated. Note that
     the fields `name`, `projectId`, and `projectNumber` are all immutable.
       */
      public String getUpdateMask() {
        return updateMask;
      }

      /**
       * Specifies which fields to update. If this list is empty, then no state will be updated.
       * Note that the fields `name`, `projectId`, and `projectNumber` are all immutable.
       */
      public Patch setUpdateMask(String updateMask) {
        this.updateMask = updateMask;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Unlinks the specified FirebaseProject from its Google Analytics account. This call removes the
     * association of the specified `FirebaseProject` with its current Google Analytics property.
     * However, this call does not delete the Google Analytics resources, such as the Google Analytics
     * property or any data streams. These resources may be re-associated later to the `FirebaseProject`
     * by calling [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics) and specifying the
     * same `analyticsPropertyId`. For Android Apps and iOS Apps, this call re-links data streams with
     * their corresponding apps. However, for Web Apps, this call provisions a *new* data stream for
     * each Web App. To call `RemoveAnalytics`, a project member must be an Owner for the
     * `FirebaseProject`.
     *
     * Create a request for the method "projects.removeAnalytics".
     *
     * This request holds the parameters needed by the firebase server.  After setting any optional
     * parameters, call the {@link RemoveAnalytics#execute()} method to invoke the remote operation.
     *
     * @param parent The resource name of the FirebaseProject to unlink from its Google Analytics account, in the format:
     *        projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
     *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
     *        PROJECT_IDENTIFIER values.
     * @param content the {@link com.google.api.services.firebase.v1beta1.model.RemoveAnalyticsRequest}
     * @return the request
     */
    public RemoveAnalytics removeAnalytics(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.RemoveAnalyticsRequest content) throws java.io.IOException {
      RemoveAnalytics result = new RemoveAnalytics(parent, content);
      initialize(result);
      return result;
    }

    public class RemoveAnalytics extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.Empty> {

      private static final String REST_PATH = "v1beta1/{+parent}:removeAnalytics";

      private final java.util.regex.Pattern PARENT_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+$");

      /**
       * Unlinks the specified FirebaseProject from its Google Analytics account. This call removes the
       * association of the specified `FirebaseProject` with its current Google Analytics property.
       * However, this call does not delete the Google Analytics resources, such as the Google Analytics
       * property or any data streams. These resources may be re-associated later to the
       * `FirebaseProject` by calling [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics)
       * and specifying the same `analyticsPropertyId`. For Android Apps and iOS Apps, this call re-
       * links data streams with their corresponding apps. However, for Web Apps, this call provisions a
       * *new* data stream for each Web App. To call `RemoveAnalytics`, a project member must be an
       * Owner for the `FirebaseProject`.
       *
       * Create a request for the method "projects.removeAnalytics".
       *
       * This request holds the parameters needed by the the firebase server.  After setting any
       * optional parameters, call the {@link RemoveAnalytics#execute()} method to invoke the remote
       * operation. <p> {@link RemoveAnalytics#initialize(com.google.api.client.googleapis.services.Abst
       * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
       * the constructor. </p>
       *
       * @param parent The resource name of the FirebaseProject to unlink from its Google Analytics account, in the format:
     *        projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
     *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
     *        PROJECT_IDENTIFIER values.
       * @param content the {@link com.google.api.services.firebase.v1beta1.model.RemoveAnalyticsRequest}
       * @since 1.13
       */
      protected RemoveAnalytics(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.RemoveAnalyticsRequest content) {
        super(FirebaseManagement.this, "POST", REST_PATH, content, com.google.api.services.firebase.v1beta1.model.Empty.class);
        this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
              "Parameter parent must conform to the pattern " +
              "^projects/[^/]+$");
        }
      }

      @Override
      public RemoveAnalytics set$Xgafv(java.lang.String $Xgafv) {
        return (RemoveAnalytics) super.set$Xgafv($Xgafv);
      }

      @Override
      public RemoveAnalytics setAccessToken(java.lang.String accessToken) {
        return (RemoveAnalytics) super.setAccessToken(accessToken);
      }

      @Override
      public RemoveAnalytics setAlt(java.lang.String alt) {
        return (RemoveAnalytics) super.setAlt(alt);
      }

      @Override
      public RemoveAnalytics setCallback(java.lang.String callback) {
        return (RemoveAnalytics) super.setCallback(callback);
      }

      @Override
      public RemoveAnalytics setFields(java.lang.String fields) {
        return (RemoveAnalytics) super.setFields(fields);
      }

      @Override
      public RemoveAnalytics setKey(java.lang.String key) {
        return (RemoveAnalytics) super.setKey(key);
      }

      @Override
      public RemoveAnalytics setOauthToken(java.lang.String oauthToken) {
        return (RemoveAnalytics) super.setOauthToken(oauthToken);
      }

      @Override
      public RemoveAnalytics setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RemoveAnalytics) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RemoveAnalytics setQuotaUser(java.lang.String quotaUser) {
        return (RemoveAnalytics) super.setQuotaUser(quotaUser);
      }

      @Override
      public RemoveAnalytics setUploadType(java.lang.String uploadType) {
        return (RemoveAnalytics) super.setUploadType(uploadType);
      }

      @Override
      public RemoveAnalytics setUploadProtocol(java.lang.String uploadProtocol) {
        return (RemoveAnalytics) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the FirebaseProject to unlink from its Google Analytics account, in
       * the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       * PROJECT_IDENTIFIER values.
       */
      @com.google.api.client.util.Key
      private java.lang.String parent;

      /** The resource name of the FirebaseProject to unlink from its Google Analytics account, in the
     format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
     [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER
     values.
       */
      public java.lang.String getParent() {
        return parent;
      }

      /**
       * The resource name of the FirebaseProject to unlink from its Google Analytics account, in
       * the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       * PROJECT_IDENTIFIER values.
       */
      public RemoveAnalytics setParent(java.lang.String parent) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
              "Parameter parent must conform to the pattern " +
              "^projects/[^/]+$");
        }
        this.parent = parent;
        return this;
      }

      @Override
      public RemoveAnalytics set(String parameterName, Object value) {
        return (RemoveAnalytics) super.set(parameterName, value);
      }
    }
    /**
     * Lists all available Apps for the specified FirebaseProject. This is a convenience method.
     * Typically, interaction with an App should be done using the platform-specific service, but some
     * tool use-cases require a summary of all known Apps (such as for App selector interfaces).
     *
     * Create a request for the method "projects.searchApps".
     *
     * This request holds the parameters needed by the firebase server.  After setting any optional
     * parameters, call the {@link SearchApps#execute()} method to invoke the remote operation.
     *
     * @param parent The parent FirebaseProject for which to list Apps, in the format: projects/ PROJECT_IDENTIFIER Refer
     *        to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for
     *        details about PROJECT_IDENTIFIER values.
     * @return the request
     */
    public SearchApps searchApps(java.lang.String parent) throws java.io.IOException {
      SearchApps result = new SearchApps(parent);
      initialize(result);
      return result;
    }

    public class SearchApps extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.SearchFirebaseAppsResponse> {

      private static final String REST_PATH = "v1beta1/{+parent}:searchApps";

      private final java.util.regex.Pattern PARENT_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+$");

      /**
       * Lists all available Apps for the specified FirebaseProject. This is a convenience method.
       * Typically, interaction with an App should be done using the platform-specific service, but some
       * tool use-cases require a summary of all known Apps (such as for App selector interfaces).
       *
       * Create a request for the method "projects.searchApps".
       *
       * This request holds the parameters needed by the the firebase server.  After setting any
       * optional parameters, call the {@link SearchApps#execute()} method to invoke the remote
       * operation. <p> {@link
       * SearchApps#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param parent The parent FirebaseProject for which to list Apps, in the format: projects/ PROJECT_IDENTIFIER Refer
     *        to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for
     *        details about PROJECT_IDENTIFIER values.
       * @since 1.13
       */
      protected SearchApps(java.lang.String parent) {
        super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.SearchFirebaseAppsResponse.class);
        this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
              "Parameter parent must conform to the pattern " +
              "^projects/[^/]+$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public SearchApps set$Xgafv(java.lang.String $Xgafv) {
        return (SearchApps) super.set$Xgafv($Xgafv);
      }

      @Override
      public SearchApps setAccessToken(java.lang.String accessToken) {
        return (SearchApps) super.setAccessToken(accessToken);
      }

      @Override
      public SearchApps setAlt(java.lang.String alt) {
        return (SearchApps) super.setAlt(alt);
      }

      @Override
      public SearchApps setCallback(java.lang.String callback) {
        return (SearchApps) super.setCallback(callback);
      }

      @Override
      public SearchApps setFields(java.lang.String fields) {
        return (SearchApps) super.setFields(fields);
      }

      @Override
      public SearchApps setKey(java.lang.String key) {
        return (SearchApps) super.setKey(key);
      }

      @Override
      public SearchApps setOauthToken(java.lang.String oauthToken) {
        return (SearchApps) super.setOauthToken(oauthToken);
      }

      @Override
      public SearchApps setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SearchApps) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SearchApps setQuotaUser(java.lang.String quotaUser) {
        return (SearchApps) super.setQuotaUser(quotaUser);
      }

      @Override
      public SearchApps setUploadType(java.lang.String uploadType) {
        return (SearchApps) super.setUploadType(uploadType);
      }

      @Override
      public SearchApps setUploadProtocol(java.lang.String uploadProtocol) {
        return (SearchApps) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The parent FirebaseProject for which to list Apps, in the format: projects/
       * PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       * PROJECT_IDENTIFIER values.
       */
      @com.google.api.client.util.Key
      private java.lang.String parent;

      /** The parent FirebaseProject for which to list Apps, in the format: projects/ PROJECT_IDENTIFIER
     Refer to the `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for details
     about PROJECT_IDENTIFIER values.
       */
      public java.lang.String getParent() {
        return parent;
      }

      /**
       * The parent FirebaseProject for which to list Apps, in the format: projects/
       * PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       * PROJECT_IDENTIFIER values.
       */
      public SearchApps setParent(java.lang.String parent) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
              "Parameter parent must conform to the pattern " +
              "^projects/[^/]+$");
        }
        this.parent = parent;
        return this;
      }

      /**
       * A query string compatible with Google's [AIP-160](https://google.aip.dev/160) standard. Use
       * any of the following fields in a query: *
       * [`app_id`](../projects.apps#FirebaseAppInfo.FIELDS.app_id) *
       * [`namespace`](../projects.apps#FirebaseAppInfo.FIELDS.namespace) *
       * [`platform`](../projects.apps#FirebaseAppInfo.FIELDS.platform) We also support the
       * following "virtual" fields (fields which are not actually part of the returned resource
       * object, but can be queried as if they are pre-populated with specific values): *
       * `sha1_hash`: This field is considered to be a repeated `string` field, populated with the
       * list of all SHA-1 certificate fingerprints registered with the app. This list is empty if
       * the app is not an Android app. * `sha256_hash`: This field is considered to be a repeated
       * `string` field, populated with the list of all SHA-256 certificate fingerprints registered
       * with the app. This list is empty if the app is not an Android app. * `app_store_id`: This
       * field is considered to be a singular `string` field, populated with the Apple App Store ID
       * registered with the app. This field is empty if the app is not an iOS app. * `team_id`:
       * This field is considered to be a singular `string` field, populated with the Apple team ID
       * registered with the app. This field is empty if the app is not an iOS app.
       */
      @com.google.api.client.util.Key
      private java.lang.String filter;

      /** A query string compatible with Google's [AIP-160](https://google.aip.dev/160) standard. Use any of
     the following fields in a query: * [`app_id`](../projects.apps#FirebaseAppInfo.FIELDS.app_id) *
     [`namespace`](../projects.apps#FirebaseAppInfo.FIELDS.namespace) *
     [`platform`](../projects.apps#FirebaseAppInfo.FIELDS.platform) We also support the following
     "virtual" fields (fields which are not actually part of the returned resource object, but can be
     queried as if they are pre-populated with specific values): * `sha1_hash`: This field is considered
     to be a repeated `string` field, populated with the list of all SHA-1 certificate fingerprints
     registered with the app. This list is empty if the app is not an Android app. * `sha256_hash`: This
     field is considered to be a repeated `string` field, populated with the list of all SHA-256
     certificate fingerprints registered with the app. This list is empty if the app is not an Android
     app. * `app_store_id`: This field is considered to be a singular `string` field, populated with the
     Apple App Store ID registered with the app. This field is empty if the app is not an iOS app. *
     `team_id`: This field is considered to be a singular `string` field, populated with the Apple team
     ID registered with the app. This field is empty if the app is not an iOS app.
       */
      public java.lang.String getFilter() {
        return filter;
      }

      /**
       * A query string compatible with Google's [AIP-160](https://google.aip.dev/160) standard. Use
       * any of the following fields in a query: *
       * [`app_id`](../projects.apps#FirebaseAppInfo.FIELDS.app_id) *
       * [`namespace`](../projects.apps#FirebaseAppInfo.FIELDS.namespace) *
       * [`platform`](../projects.apps#FirebaseAppInfo.FIELDS.platform) We also support the
       * following "virtual" fields (fields which are not actually part of the returned resource
       * object, but can be queried as if they are pre-populated with specific values): *
       * `sha1_hash`: This field is considered to be a repeated `string` field, populated with the
       * list of all SHA-1 certificate fingerprints registered with the app. This list is empty if
       * the app is not an Android app. * `sha256_hash`: This field is considered to be a repeated
       * `string` field, populated with the list of all SHA-256 certificate fingerprints registered
       * with the app. This list is empty if the app is not an Android app. * `app_store_id`: This
       * field is considered to be a singular `string` field, populated with the Apple App Store ID
       * registered with the app. This field is empty if the app is not an iOS app. * `team_id`:
       * This field is considered to be a singular `string` field, populated with the Apple team ID
       * registered with the app. This field is empty if the app is not an iOS app.
       */
      public SearchApps setFilter(java.lang.String filter) {
        this.filter = filter;
        return this;
      }

      /**
       * The maximum number of Apps to return in the response. The server may return fewer than this
       * value at its discretion. If no value is specified (or too large a value is specified), then
       * the server will impose its own limit. This value cannot be negative.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer pageSize;

      /** The maximum number of Apps to return in the response. The server may return fewer than this value
     at its discretion. If no value is specified (or too large a value is specified), then the server
     will impose its own limit. This value cannot be negative.
       */
      public java.lang.Integer getPageSize() {
        return pageSize;
      }

      /**
       * The maximum number of Apps to return in the response. The server may return fewer than this
       * value at its discretion. If no value is specified (or too large a value is specified), then
       * the server will impose its own limit. This value cannot be negative.
       */
      public SearchApps setPageSize(java.lang.Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }

      /**
       * Token returned from a previous call to `SearchFirebaseApps` indicating where in the set of
       * Apps to resume listing.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** Token returned from a previous call to `SearchFirebaseApps` indicating where in the set of Apps to
     resume listing.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * Token returned from a previous call to `SearchFirebaseApps` indicating where in the set of
       * Apps to resume listing.
       */
      public SearchApps setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public SearchApps set(String parameterName, Object value) {
        return (SearchApps) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the AndroidApps collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseManagement firebase = new FirebaseManagement(...);}
     *   {@code FirebaseManagement.AndroidApps.List request = firebase.androidApps().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public AndroidApps androidApps() {
      return new AndroidApps();
    }

    /**
     * The "androidApps" collection of methods.
     */
    public class AndroidApps {

      /**
       * Requests the creation of a new AndroidApp in the specified FirebaseProject. The result of this
       * call is an `Operation` which can be used to track the provisioning process. The `Operation` is
       * automatically deleted after completion, so there is no need to call `DeleteOperation`.
       *
       * Create a request for the method "androidApps.create".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent The resource name of the parent FirebaseProject in which to create an AndroidApp, in the format:
       *        projects/PROJECT_IDENTIFIER/androidApps Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
       * @param content the {@link com.google.api.services.firebase.v1beta1.model.AndroidApp}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.AndroidApp content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.Operation> {

        private static final String REST_PATH = "v1beta1/{+parent}/androidApps";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Requests the creation of a new AndroidApp in the specified FirebaseProject. The result of this
         * call is an `Operation` which can be used to track the provisioning process. The `Operation` is
         * automatically deleted after completion, so there is no need to call `DeleteOperation`.
         *
         * Create a request for the method "androidApps.create".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent The resource name of the parent FirebaseProject in which to create an AndroidApp, in the format:
       *        projects/PROJECT_IDENTIFIER/androidApps Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
         * @param content the {@link com.google.api.services.firebase.v1beta1.model.AndroidApp}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.AndroidApp content) {
          super(FirebaseManagement.this, "POST", REST_PATH, content, com.google.api.services.firebase.v1beta1.model.Operation.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the parent FirebaseProject in which to create an AndroidApp, in the
         * format: projects/PROJECT_IDENTIFIER/androidApps Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** The resource name of the parent FirebaseProject in which to create an AndroidApp, in the format:
       projects/PROJECT_IDENTIFIER/androidApps Refer to the `FirebaseProject`
       [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER
       values.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * The resource name of the parent FirebaseProject in which to create an AndroidApp, in the
         * format: projects/PROJECT_IDENTIFIER/androidApps Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values.
         */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Gets the specified AndroidApp.
       *
       * Create a request for the method "androidApps.get".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID
       *        Since an APP_ID is a unique identifier, the Unique Resource from Sub-Collection access
       *        pattern may be used here, in the format: projects/-/androidApps/APP_ID Refer to the
       *        `AndroidApp` [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details
       *        about PROJECT_IDENTIFIER and APP_ID values.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.AndroidApp> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/androidApps/[^/]+$");

        /**
         * Gets the specified AndroidApp.
         *
         * Create a request for the method "androidApps.get".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID
       *        Since an APP_ID is a unique identifier, the Unique Resource from Sub-Collection access
       *        pattern may be used here, in the format: projects/-/androidApps/APP_ID Refer to the
       *        `AndroidApp` [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details
       *        about PROJECT_IDENTIFIER and APP_ID values.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.AndroidApp.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/androidApps/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the AndroidApp, in the format: projects/
         * PROJECT_IDENTIFIER/androidApps/APP_ID Since an APP_ID is a unique identifier, the Unique
         * Resource from Sub-Collection access pattern may be used here, in the format:
         * projects/-/androidApps/APP_ID Refer to the `AndroidApp`
         * [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER and APP_ID values.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID
       Since an APP_ID is a unique identifier, the Unique Resource from Sub-Collection access pattern may
       be used here, in the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
       [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about PROJECT_IDENTIFIER
       and APP_ID values.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the AndroidApp, in the format: projects/
         * PROJECT_IDENTIFIER/androidApps/APP_ID Since an APP_ID is a unique identifier, the Unique
         * Resource from Sub-Collection access pattern may be used here, in the format:
         * projects/-/androidApps/APP_ID Refer to the `AndroidApp`
         * [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER and APP_ID values.
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/androidApps/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Gets the configuration artifact associated with the specified AndroidApp.
       *
       * Create a request for the method "androidApps.getConfig".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link GetConfig#execute()} method to invoke the remote operation.
       *
       * @param name The resource name of the AndroidApp configuration to download, in the format:
       *        projects/PROJECT_IDENTIFIER/androidApps/APP_ID/config Since an APP_ID is a unique
       *        identifier, the Unique Resource from Sub-Collection access pattern may be used here, in
       *        the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
       *        [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER and APP_ID values.
       * @return the request
       */
      public GetConfig getConfig(java.lang.String name) throws java.io.IOException {
        GetConfig result = new GetConfig(name);
        initialize(result);
        return result;
      }

      public class GetConfig extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.AndroidAppConfig> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/androidApps/[^/]+/config$");

        /**
         * Gets the configuration artifact associated with the specified AndroidApp.
         *
         * Create a request for the method "androidApps.getConfig".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link GetConfig#execute()} method to invoke the remote
         * operation. <p> {@link
         * GetConfig#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource name of the AndroidApp configuration to download, in the format:
       *        projects/PROJECT_IDENTIFIER/androidApps/APP_ID/config Since an APP_ID is a unique
       *        identifier, the Unique Resource from Sub-Collection access pattern may be used here, in
       *        the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
       *        [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER and APP_ID values.
         * @since 1.13
         */
        protected GetConfig(java.lang.String name) {
          super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.AndroidAppConfig.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/androidApps/[^/]+/config$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public GetConfig set$Xgafv(java.lang.String $Xgafv) {
          return (GetConfig) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetConfig setAccessToken(java.lang.String accessToken) {
          return (GetConfig) super.setAccessToken(accessToken);
        }

        @Override
        public GetConfig setAlt(java.lang.String alt) {
          return (GetConfig) super.setAlt(alt);
        }

        @Override
        public GetConfig setCallback(java.lang.String callback) {
          return (GetConfig) super.setCallback(callback);
        }

        @Override
        public GetConfig setFields(java.lang.String fields) {
          return (GetConfig) super.setFields(fields);
        }

        @Override
        public GetConfig setKey(java.lang.String key) {
          return (GetConfig) super.setKey(key);
        }

        @Override
        public GetConfig setOauthToken(java.lang.String oauthToken) {
          return (GetConfig) super.setOauthToken(oauthToken);
        }

        @Override
        public GetConfig setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetConfig) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetConfig setQuotaUser(java.lang.String quotaUser) {
          return (GetConfig) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetConfig setUploadType(java.lang.String uploadType) {
          return (GetConfig) super.setUploadType(uploadType);
        }

        @Override
        public GetConfig setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetConfig) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the AndroidApp configuration to download, in the format:
         * projects/PROJECT_IDENTIFIER/androidApps/APP_ID/config Since an APP_ID is a unique
         * identifier, the Unique Resource from Sub-Collection access pattern may be used here, in
         * the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
         * [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER and APP_ID values.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the AndroidApp configuration to download, in the format:
       projects/PROJECT_IDENTIFIER/androidApps/APP_ID/config Since an APP_ID is a unique identifier, the
       Unique Resource from Sub-Collection access pattern may be used here, in the format:
       projects/-/androidApps/APP_ID Refer to the `AndroidApp`
       [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about PROJECT_IDENTIFIER
       and APP_ID values.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the AndroidApp configuration to download, in the format:
         * projects/PROJECT_IDENTIFIER/androidApps/APP_ID/config Since an APP_ID is a unique
         * identifier, the Unique Resource from Sub-Collection access pattern may be used here, in
         * the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
         * [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER and APP_ID values.
         */
        public GetConfig setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/androidApps/[^/]+/config$");
          }
          this.name = name;
          return this;
        }

        @Override
        public GetConfig set(String parameterName, Object value) {
          return (GetConfig) super.set(parameterName, value);
        }
      }
      /**
       * Lists each AndroidApp associated with the specified FirebaseProject. The elements are returned in
       * no particular order, but will be a consistent view of the Apps when additional requests are made
       * with a `pageToken`.
       *
       * Create a request for the method "androidApps.list".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent The resource name of the parent FirebaseProject for which to list each associated AndroidApp, in the
       *        format: projects/PROJECT_IDENTIFIER /androidApps Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.ListAndroidAppsResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/androidApps";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists each AndroidApp associated with the specified FirebaseProject. The elements are returned
         * in no particular order, but will be a consistent view of the Apps when additional requests are
         * made with a `pageToken`.
         *
         * Create a request for the method "androidApps.list".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent The resource name of the parent FirebaseProject for which to list each associated AndroidApp, in the
       *        format: projects/PROJECT_IDENTIFIER /androidApps Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.ListAndroidAppsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the parent FirebaseProject for which to list each associated
         * AndroidApp, in the format: projects/PROJECT_IDENTIFIER /androidApps Refer to the
         * `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for details
         * about PROJECT_IDENTIFIER values.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** The resource name of the parent FirebaseProject for which to list each associated AndroidApp, in
       the format: projects/PROJECT_IDENTIFIER /androidApps Refer to the `FirebaseProject`
       [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER
       values.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * The resource name of the parent FirebaseProject for which to list each associated
         * AndroidApp, in the format: projects/PROJECT_IDENTIFIER /androidApps Refer to the
         * `FirebaseProject` [`name`](../projects#FirebaseProject.FIELDS.name) field for details
         * about PROJECT_IDENTIFIER values.
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The maximum number of Apps to return in the response. The server may return fewer than
         * this at its discretion. If no value is specified (or too large a value is specified),
         * then the server will impose its own limit.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of Apps to return in the response. The server may return fewer than this at its
       discretion. If no value is specified (or too large a value is specified), then the server will
       impose its own limit.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * The maximum number of Apps to return in the response. The server may return fewer than
         * this at its discretion. If no value is specified (or too large a value is specified),
         * then the server will impose its own limit.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * Token returned from a previous call to `ListAndroidApps` indicating where in the set of
         * Apps to resume listing.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Token returned from a previous call to `ListAndroidApps` indicating where in the set of Apps to
       resume listing.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * Token returned from a previous call to `ListAndroidApps` indicating where in the set of
         * Apps to resume listing.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates the attributes of the specified AndroidApp.
       *
       * Create a request for the method "androidApps.patch".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID
       *        * PROJECT_IDENTIFIER: the parent Project's
       *        [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)***
       *        or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
       *        using project identifiers in Google's [AIP 2510
       *        standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
       *        in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-
       *        assigned identifier for the App (see
       *        [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
       * @param content the {@link com.google.api.services.firebase.v1beta1.model.AndroidApp}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.firebase.v1beta1.model.AndroidApp content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.AndroidApp> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/androidApps/[^/]+$");

        /**
         * Updates the attributes of the specified AndroidApp.
         *
         * Create a request for the method "androidApps.patch".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID
       *        * PROJECT_IDENTIFIER: the parent Project's
       *        [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)***
       *        or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
       *        using project identifiers in Google's [AIP 2510
       *        standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
       *        in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-
       *        assigned identifier for the App (see
       *        [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
         * @param content the {@link com.google.api.services.firebase.v1beta1.model.AndroidApp}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.firebase.v1beta1.model.AndroidApp content) {
          super(FirebaseManagement.this, "PATCH", REST_PATH, content, com.google.api.services.firebase.v1beta1.model.AndroidApp.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/androidApps/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the AndroidApp, in the format: projects/
         * PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
         * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)***
         * or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
         * using project identifiers in Google's [AIP 2510
         * standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
         * in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-
         * assigned identifier for the App (see
         * [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the AndroidApp, in the format: projects/ PROJECT_IDENTIFIER/androidApps/APP_ID
       * PROJECT_IDENTIFIER: the parent Project's
       [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its
       [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project
       identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value
       for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique,
       Firebase-assigned identifier for the App (see
       [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the AndroidApp, in the format: projects/
         * PROJECT_IDENTIFIER/androidApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
         * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)***
         * or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
         * using project identifiers in Google's [AIP 2510
         * standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
         * in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-
         * assigned identifier for the App (see
         * [`appId`](../projects.androidApps#AndroidApp.FIELDS.app_id)).
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/androidApps/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * Specifies which fields to update. Note that the fields `name`, `app_id`, `project_id`,
         * and `package_name` are all immutable.
         */
        @com.google.api.client.util.Key
        private String updateMask;

        /** Specifies which fields to update. Note that the fields `name`, `app_id`, `project_id`, and
       `package_name` are all immutable.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /**
         * Specifies which fields to update. Note that the fields `name`, `app_id`, `project_id`,
         * and `package_name` are all immutable.
         */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Sha collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code FirebaseManagement firebase = new FirebaseManagement(...);}
       *   {@code FirebaseManagement.Sha.List request = firebase.sha().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Sha sha() {
        return new Sha();
      }

      /**
       * The "sha" collection of methods.
       */
      public class Sha {

        /**
         * Adds a ShaCertificate to the specified AndroidApp.
         *
         * Create a request for the method "sha.create".
         *
         * This request holds the parameters needed by the firebase server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation.
         *
         * @param parent The resource name of the parent AndroidApp to which to add a ShaCertificate, in the format:
         *        projects/PROJECT_IDENTIFIER/androidApps/ APP_ID Since an APP_ID is a unique identifier,
         *        the Unique Resource from Sub-Collection access pattern may be used here, in the format:
         *        projects/-/androidApps/APP_ID Refer to the `AndroidApp`
         *        [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about
         *        PROJECT_IDENTIFIER and APP_ID values.
         * @param content the {@link com.google.api.services.firebase.v1beta1.model.ShaCertificate}
         * @return the request
         */
        public Create create(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.ShaCertificate content) throws java.io.IOException {
          Create result = new Create(parent, content);
          initialize(result);
          return result;
        }

        public class Create extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.ShaCertificate> {

          private static final String REST_PATH = "v1beta1/{+parent}/sha";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/androidApps/[^/]+$");

          /**
           * Adds a ShaCertificate to the specified AndroidApp.
           *
           * Create a request for the method "sha.create".
           *
           * This request holds the parameters needed by the the firebase server.  After setting any
           * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
           * <p> {@link
           * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent The resource name of the parent AndroidApp to which to add a ShaCertificate, in the format:
         *        projects/PROJECT_IDENTIFIER/androidApps/ APP_ID Since an APP_ID is a unique identifier,
         *        the Unique Resource from Sub-Collection access pattern may be used here, in the format:
         *        projects/-/androidApps/APP_ID Refer to the `AndroidApp`
         *        [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about
         *        PROJECT_IDENTIFIER and APP_ID values.
           * @param content the {@link com.google.api.services.firebase.v1beta1.model.ShaCertificate}
           * @since 1.13
           */
          protected Create(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.ShaCertificate content) {
            super(FirebaseManagement.this, "POST", REST_PATH, content, com.google.api.services.firebase.v1beta1.model.ShaCertificate.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/androidApps/[^/]+$");
            }
          }

          @Override
          public Create set$Xgafv(java.lang.String $Xgafv) {
            return (Create) super.set$Xgafv($Xgafv);
          }

          @Override
          public Create setAccessToken(java.lang.String accessToken) {
            return (Create) super.setAccessToken(accessToken);
          }

          @Override
          public Create setAlt(java.lang.String alt) {
            return (Create) super.setAlt(alt);
          }

          @Override
          public Create setCallback(java.lang.String callback) {
            return (Create) super.setCallback(callback);
          }

          @Override
          public Create setFields(java.lang.String fields) {
            return (Create) super.setFields(fields);
          }

          @Override
          public Create setKey(java.lang.String key) {
            return (Create) super.setKey(key);
          }

          @Override
          public Create setOauthToken(java.lang.String oauthToken) {
            return (Create) super.setOauthToken(oauthToken);
          }

          @Override
          public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Create) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Create setQuotaUser(java.lang.String quotaUser) {
            return (Create) super.setQuotaUser(quotaUser);
          }

          @Override
          public Create setUploadType(java.lang.String uploadType) {
            return (Create) super.setUploadType(uploadType);
          }

          @Override
          public Create setUploadProtocol(java.lang.String uploadProtocol) {
            return (Create) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the parent AndroidApp to which to add a ShaCertificate, in the
           * format: projects/PROJECT_IDENTIFIER/androidApps/ APP_ID Since an APP_ID is a unique
           * identifier, the Unique Resource from Sub-Collection access pattern may be used here, in
           * the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
           * [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about
           * PROJECT_IDENTIFIER and APP_ID values.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** The resource name of the parent AndroidApp to which to add a ShaCertificate, in the format:
         projects/PROJECT_IDENTIFIER/androidApps/ APP_ID Since an APP_ID is a unique identifier, the Unique
         Resource from Sub-Collection access pattern may be used here, in the format:
         projects/-/androidApps/APP_ID Refer to the `AndroidApp`
         [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about PROJECT_IDENTIFIER
         and APP_ID values.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * The resource name of the parent AndroidApp to which to add a ShaCertificate, in the
           * format: projects/PROJECT_IDENTIFIER/androidApps/ APP_ID Since an APP_ID is a unique
           * identifier, the Unique Resource from Sub-Collection access pattern may be used here, in
           * the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
           * [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about
           * PROJECT_IDENTIFIER and APP_ID values.
           */
          public Create setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/androidApps/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public Create set(String parameterName, Object value) {
            return (Create) super.set(parameterName, value);
          }
        }
        /**
         * Removes a ShaCertificate from the specified AndroidApp.
         *
         * Create a request for the method "sha.delete".
         *
         * This request holds the parameters needed by the firebase server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param name The resource name of the ShaCertificate to remove from the parent AndroidApp, in the format:
         *        projects/PROJECT_IDENTIFIER/androidApps/APP_ID /sha/SHA_HASH Refer to the `ShaCertificate`
         *        [`name`](../projects.androidApps.sha#ShaCertificate.FIELDS.name) field for details about
         *        PROJECT_IDENTIFIER, APP_ID, and SHA_HASH values. You can obtain the full resource name of
         *        the `ShaCertificate` from the response of
         *        [`ListShaCertificates`](../projects.androidApps.sha/list) or the original
         *        [`CreateShaCertificate`](../projects.androidApps.sha/create).
         * @return the request
         */
        public Delete delete(java.lang.String name) throws java.io.IOException {
          Delete result = new Delete(name);
          initialize(result);
          return result;
        }

        public class Delete extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.Empty> {

          private static final String REST_PATH = "v1beta1/{+name}";

          private final java.util.regex.Pattern NAME_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/androidApps/[^/]+/sha/[^/]+$");

          /**
           * Removes a ShaCertificate from the specified AndroidApp.
           *
           * Create a request for the method "sha.delete".
           *
           * This request holds the parameters needed by the the firebase server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           * <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param name The resource name of the ShaCertificate to remove from the parent AndroidApp, in the format:
         *        projects/PROJECT_IDENTIFIER/androidApps/APP_ID /sha/SHA_HASH Refer to the `ShaCertificate`
         *        [`name`](../projects.androidApps.sha#ShaCertificate.FIELDS.name) field for details about
         *        PROJECT_IDENTIFIER, APP_ID, and SHA_HASH values. You can obtain the full resource name of
         *        the `ShaCertificate` from the response of
         *        [`ListShaCertificates`](../projects.androidApps.sha/list) or the original
         *        [`CreateShaCertificate`](../projects.androidApps.sha/create).
           * @since 1.13
           */
          protected Delete(java.lang.String name) {
            super(FirebaseManagement.this, "DELETE", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.Empty.class);
            this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/androidApps/[^/]+/sha/[^/]+$");
            }
          }

          @Override
          public Delete set$Xgafv(java.lang.String $Xgafv) {
            return (Delete) super.set$Xgafv($Xgafv);
          }

          @Override
          public Delete setAccessToken(java.lang.String accessToken) {
            return (Delete) super.setAccessToken(accessToken);
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setCallback(java.lang.String callback) {
            return (Delete) super.setCallback(callback);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUploadType(java.lang.String uploadType) {
            return (Delete) super.setUploadType(uploadType);
          }

          @Override
          public Delete setUploadProtocol(java.lang.String uploadProtocol) {
            return (Delete) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the ShaCertificate to remove from the parent AndroidApp, in the
           * format: projects/PROJECT_IDENTIFIER/androidApps/APP_ID /sha/SHA_HASH Refer to the
           * `ShaCertificate` [`name`](../projects.androidApps.sha#ShaCertificate.FIELDS.name) field
           * for details about PROJECT_IDENTIFIER, APP_ID, and SHA_HASH values. You can obtain the
           * full resource name of the `ShaCertificate` from the response of
           * [`ListShaCertificates`](../projects.androidApps.sha/list) or the original
           * [`CreateShaCertificate`](../projects.androidApps.sha/create).
           */
          @com.google.api.client.util.Key
          private java.lang.String name;

          /** The resource name of the ShaCertificate to remove from the parent AndroidApp, in the format:
         projects/PROJECT_IDENTIFIER/androidApps/APP_ID /sha/SHA_HASH Refer to the `ShaCertificate`
         [`name`](../projects.androidApps.sha#ShaCertificate.FIELDS.name) field for details about
         PROJECT_IDENTIFIER, APP_ID, and SHA_HASH values. You can obtain the full resource name of the
         `ShaCertificate` from the response of [`ListShaCertificates`](../projects.androidApps.sha/list) or
         the original [`CreateShaCertificate`](../projects.androidApps.sha/create).
           */
          public java.lang.String getName() {
            return name;
          }

          /**
           * The resource name of the ShaCertificate to remove from the parent AndroidApp, in the
           * format: projects/PROJECT_IDENTIFIER/androidApps/APP_ID /sha/SHA_HASH Refer to the
           * `ShaCertificate` [`name`](../projects.androidApps.sha#ShaCertificate.FIELDS.name) field
           * for details about PROJECT_IDENTIFIER, APP_ID, and SHA_HASH values. You can obtain the
           * full resource name of the `ShaCertificate` from the response of
           * [`ListShaCertificates`](../projects.androidApps.sha/list) or the original
           * [`CreateShaCertificate`](../projects.androidApps.sha/create).
           */
          public Delete setName(java.lang.String name) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                  "Parameter name must conform to the pattern " +
                  "^projects/[^/]+/androidApps/[^/]+/sha/[^/]+$");
            }
            this.name = name;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Lists the SHA-1 and SHA-256 certificates for the specified AndroidApp.
         *
         * Create a request for the method "sha.list".
         *
         * This request holds the parameters needed by the firebase server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param parent The resource name of the parent AndroidApp for which to list each associated ShaCertificate, in the
         *        format: projects/PROJECT_IDENTIFIER /androidApps/APP_ID Since an APP_ID is a unique
         *        identifier, the Unique Resource from Sub-Collection access pattern may be used here, in
         *        the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
         *        [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about
         *        PROJECT_IDENTIFIER and APP_ID values.
         * @return the request
         */
        public List list(java.lang.String parent) throws java.io.IOException {
          List result = new List(parent);
          initialize(result);
          return result;
        }

        public class List extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.ListShaCertificatesResponse> {

          private static final String REST_PATH = "v1beta1/{+parent}/sha";

          private final java.util.regex.Pattern PARENT_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/androidApps/[^/]+$");

          /**
           * Lists the SHA-1 and SHA-256 certificates for the specified AndroidApp.
           *
           * Create a request for the method "sha.list".
           *
           * This request holds the parameters needed by the the firebase server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
           * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
           * must be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param parent The resource name of the parent AndroidApp for which to list each associated ShaCertificate, in the
         *        format: projects/PROJECT_IDENTIFIER /androidApps/APP_ID Since an APP_ID is a unique
         *        identifier, the Unique Resource from Sub-Collection access pattern may be used here, in
         *        the format: projects/-/androidApps/APP_ID Refer to the `AndroidApp`
         *        [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about
         *        PROJECT_IDENTIFIER and APP_ID values.
           * @since 1.13
           */
          protected List(java.lang.String parent) {
            super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.ListShaCertificatesResponse.class);
            this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/androidApps/[^/]+$");
            }
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List set$Xgafv(java.lang.String $Xgafv) {
            return (List) super.set$Xgafv($Xgafv);
          }

          @Override
          public List setAccessToken(java.lang.String accessToken) {
            return (List) super.setAccessToken(accessToken);
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setCallback(java.lang.String callback) {
            return (List) super.setCallback(callback);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUploadType(java.lang.String uploadType) {
            return (List) super.setUploadType(uploadType);
          }

          @Override
          public List setUploadProtocol(java.lang.String uploadProtocol) {
            return (List) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * The resource name of the parent AndroidApp for which to list each associated
           * ShaCertificate, in the format: projects/PROJECT_IDENTIFIER /androidApps/APP_ID Since an
           * APP_ID is a unique identifier, the Unique Resource from Sub-Collection access pattern
           * may be used here, in the format: projects/-/androidApps/APP_ID Refer to the
           * `AndroidApp` [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details
           * about PROJECT_IDENTIFIER and APP_ID values.
           */
          @com.google.api.client.util.Key
          private java.lang.String parent;

          /** The resource name of the parent AndroidApp for which to list each associated ShaCertificate, in the
         format: projects/PROJECT_IDENTIFIER /androidApps/APP_ID Since an APP_ID is a unique identifier, the
         Unique Resource from Sub-Collection access pattern may be used here, in the format:
         projects/-/androidApps/APP_ID Refer to the `AndroidApp`
         [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details about PROJECT_IDENTIFIER
         and APP_ID values.
           */
          public java.lang.String getParent() {
            return parent;
          }

          /**
           * The resource name of the parent AndroidApp for which to list each associated
           * ShaCertificate, in the format: projects/PROJECT_IDENTIFIER /androidApps/APP_ID Since an
           * APP_ID is a unique identifier, the Unique Resource from Sub-Collection access pattern
           * may be used here, in the format: projects/-/androidApps/APP_ID Refer to the
           * `AndroidApp` [`name`](../projects.androidApps#AndroidApp.FIELDS.name) field for details
           * about PROJECT_IDENTIFIER and APP_ID values.
           */
          public List setParent(java.lang.String parent) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                  "Parameter parent must conform to the pattern " +
                  "^projects/[^/]+/androidApps/[^/]+$");
            }
            this.parent = parent;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }

      }
    }
    /**
     * An accessor for creating requests from the AvailableLocations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseManagement firebase = new FirebaseManagement(...);}
     *   {@code FirebaseManagement.AvailableLocations.List request = firebase.availableLocations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public AvailableLocations availableLocations() {
      return new AvailableLocations();
    }

    /**
     * The "availableLocations" collection of methods.
     */
    public class AvailableLocations {

      /**
       * Lists the valid Google Cloud Platform (GCP) resource locations for the specified Project
       * (including a FirebaseProject). One of these locations can be selected as the Project's [_default_
       * GCP resource location](https://firebase.google.com/docs/projects/locations), which is the
       * geographical location where the Project's resources, such as Cloud Firestore, will be provisioned
       * by default. However, if the default GCP resource location has already been set for the Project,
       * then this setting cannot be changed. This call checks for any possible [location
       * restrictions](https://cloud.google.com/resource-manager/docs/organization-policy/defining-
       * locations) for the specified Project and, thus, might return a subset of all possible GCP
       * resource locations. To list all GCP resource locations (regardless of any restrictions), call the
       * endpoint without specifying a unique project identifier (that is,
       * `/v1beta1/{parent=projects/-}/listAvailableLocations`). To call `ListAvailableLocations` with a
       * specified project, a member must be at minimum a Viewer of the Project. Calls without a specified
       * project do not require any specific project permissions.
       *
       * Create a request for the method "availableLocations.list".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent The FirebaseProject for which to list GCP resource locations, in the format:
       *        projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values. If no unique project identifier is specified (that is,
       *        `projects/-`), the returned list does not take into account org-specific or project-
       *        specific location restrictions.
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.ListAvailableLocationsResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/availableLocations";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists the valid Google Cloud Platform (GCP) resource locations for the specified Project
         * (including a FirebaseProject). One of these locations can be selected as the Project's
         * [_default_ GCP resource location](https://firebase.google.com/docs/projects/locations), which
         * is the geographical location where the Project's resources, such as Cloud Firestore, will be
         * provisioned by default. However, if the default GCP resource location has already been set for
         * the Project, then this setting cannot be changed. This call checks for any possible [location
         * restrictions](https://cloud.google.com/resource-manager/docs/organization-policy/defining-
         * locations) for the specified Project and, thus, might return a subset of all possible GCP
         * resource locations. To list all GCP resource locations (regardless of any restrictions), call
         * the endpoint without specifying a unique project identifier (that is,
         * `/v1beta1/{parent=projects/-}/listAvailableLocations`). To call `ListAvailableLocations` with a
         * specified project, a member must be at minimum a Viewer of the Project. Calls without a
         * specified project do not require any specific project permissions.
         *
         * Create a request for the method "availableLocations.list".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent The FirebaseProject for which to list GCP resource locations, in the format:
       *        projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values. If no unique project identifier is specified (that is,
       *        `projects/-`), the returned list does not take into account org-specific or project-
       *        specific location restrictions.
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.ListAvailableLocationsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The FirebaseProject for which to list GCP resource locations, in the format:
         * projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values. If no unique project identifier is specified (that is,
         * `projects/-`), the returned list does not take into account org-specific or project-
         * specific location restrictions.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** The FirebaseProject for which to list GCP resource locations, in the format:
       projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER
       values. If no unique project identifier is specified (that is, `projects/-`), the returned list
       does not take into account org-specific or project-specific location restrictions.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * The FirebaseProject for which to list GCP resource locations, in the format:
         * projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values. If no unique project identifier is specified (that is,
         * `projects/-`), the returned list does not take into account org-specific or project-
         * specific location restrictions.
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The maximum number of locations to return in the response. The server may return fewer
         * than this value at its discretion. If no value is specified (or too large a value is
         * specified), then the server will impose its own limit. This value cannot be negative.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of locations to return in the response. The server may return fewer than this
       value at its discretion. If no value is specified (or too large a value is specified), then the
       server will impose its own limit. This value cannot be negative.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * The maximum number of locations to return in the response. The server may return fewer
         * than this value at its discretion. If no value is specified (or too large a value is
         * specified), then the server will impose its own limit. This value cannot be negative.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * Token returned from a previous call to `ListAvailableLocations` indicating where in the
         * list of locations to resume listing.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Token returned from a previous call to `ListAvailableLocations` indicating where in the list of
       locations to resume listing.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * Token returned from a previous call to `ListAvailableLocations` indicating where in the
         * list of locations to resume listing.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the DefaultLocation collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseManagement firebase = new FirebaseManagement(...);}
     *   {@code FirebaseManagement.DefaultLocation.List request = firebase.defaultLocation().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public DefaultLocation defaultLocation() {
      return new DefaultLocation();
    }

    /**
     * The "defaultLocation" collection of methods.
     */
    public class DefaultLocation {

      /**
       * Sets the default Google Cloud Platform (GCP) resource location for the specified FirebaseProject.
       * This method creates an App Engine application with a [default Cloud Storage
       * bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-
       * up-cloud-storage#activating_a_cloud_storage_bucket), located in the specified
       * [`locationId`](#body.request_body.FIELDS.location_id). This location must be one of the available
       * [GCP resource locations](https://firebase.google.com/docs/projects/locations). After the default
       * GCP resource location is finalized, or if it was already set, it cannot be changed. The default
       * GCP resource location for the specified `FirebaseProject` might already be set because either the
       * underlying GCP `Project` already has an App Engine application or `FinalizeDefaultLocation` was
       * previously called with a specified `locationId`. Any new calls to `FinalizeDefaultLocation` with
       * a *different* specified `locationId` will return a 409 error. The result of this call is an
       * [`Operation`](../../v1beta1/operations), which can be used to track the provisioning process. The
       * [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of the `Operation` is
       * google.protobuf.Empty. The `Operation` can be polled by its `name` using GetOperation until
       * `done` is true. When `done` is true, the `Operation` has either succeeded or failed. If the
       * `Operation` has succeeded, its [`response`](../../v1beta1/operations#Operation.FIELDS.response)
       * will be set to a google.protobuf.Empty; if the `Operation` has failed, its `error` will be set to
       * a google.rpc.Status. The `Operation` is automatically deleted after completion, so there is no
       * need to call DeleteOperation. All fields listed in the [request body](#request-body) are
       * required. To call `FinalizeDefaultLocation`, a member must be an Owner of the Project.
       *
       * Create a request for the method "defaultLocation.finalize".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link Finalize#execute()} method to invoke the remote operation.
       *
       * @param parent The resource name of the FirebaseProject for which the default GCP resource location will be set, in
       *        the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
       * @param content the {@link com.google.api.services.firebase.v1beta1.model.FinalizeDefaultLocationRequest}
       * @return the request
       */
      public Finalize finalize(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.FinalizeDefaultLocationRequest content) throws java.io.IOException {
        Finalize result = new Finalize(parent, content);
        initialize(result);
        return result;
      }

      public class Finalize extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.Operation> {

        private static final String REST_PATH = "v1beta1/{+parent}/defaultLocation:finalize";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Sets the default Google Cloud Platform (GCP) resource location for the specified
         * FirebaseProject. This method creates an App Engine application with a [default Cloud Storage
         * bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient
         * /setting-up-cloud-storage#activating_a_cloud_storage_bucket), located in the specified
         * [`locationId`](#body.request_body.FIELDS.location_id). This location must be one of the
         * available [GCP resource locations](https://firebase.google.com/docs/projects/locations). After
         * the default GCP resource location is finalized, or if it was already set, it cannot be changed.
         * The default GCP resource location for the specified `FirebaseProject` might already be set
         * because either the underlying GCP `Project` already has an App Engine application or
         * `FinalizeDefaultLocation` was previously called with a specified `locationId`. Any new calls to
         * `FinalizeDefaultLocation` with a *different* specified `locationId` will return a 409 error.
         * The result of this call is an [`Operation`](../../v1beta1/operations), which can be used to
         * track the provisioning process. The
         * [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of the `Operation` is
         * google.protobuf.Empty. The `Operation` can be polled by its `name` using GetOperation until
         * `done` is true. When `done` is true, the `Operation` has either succeeded or failed. If the
         * `Operation` has succeeded, its [`response`](../../v1beta1/operations#Operation.FIELDS.response)
         * will be set to a google.protobuf.Empty; if the `Operation` has failed, its `error` will be set
         * to a google.rpc.Status. The `Operation` is automatically deleted after completion, so there is
         * no need to call DeleteOperation. All fields listed in the [request body](#request-body) are
         * required. To call `FinalizeDefaultLocation`, a member must be an Owner of the Project.
         *
         * Create a request for the method "defaultLocation.finalize".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link Finalize#execute()} method to invoke the remote operation.
         * <p> {@link
         * Finalize#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent The resource name of the FirebaseProject for which the default GCP resource location will be set, in
       *        the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
         * @param content the {@link com.google.api.services.firebase.v1beta1.model.FinalizeDefaultLocationRequest}
         * @since 1.13
         */
        protected Finalize(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.FinalizeDefaultLocationRequest content) {
          super(FirebaseManagement.this, "POST", REST_PATH, content, com.google.api.services.firebase.v1beta1.model.Operation.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public Finalize set$Xgafv(java.lang.String $Xgafv) {
          return (Finalize) super.set$Xgafv($Xgafv);
        }

        @Override
        public Finalize setAccessToken(java.lang.String accessToken) {
          return (Finalize) super.setAccessToken(accessToken);
        }

        @Override
        public Finalize setAlt(java.lang.String alt) {
          return (Finalize) super.setAlt(alt);
        }

        @Override
        public Finalize setCallback(java.lang.String callback) {
          return (Finalize) super.setCallback(callback);
        }

        @Override
        public Finalize setFields(java.lang.String fields) {
          return (Finalize) super.setFields(fields);
        }

        @Override
        public Finalize setKey(java.lang.String key) {
          return (Finalize) super.setKey(key);
        }

        @Override
        public Finalize setOauthToken(java.lang.String oauthToken) {
          return (Finalize) super.setOauthToken(oauthToken);
        }

        @Override
        public Finalize setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Finalize) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Finalize setQuotaUser(java.lang.String quotaUser) {
          return (Finalize) super.setQuotaUser(quotaUser);
        }

        @Override
        public Finalize setUploadType(java.lang.String uploadType) {
          return (Finalize) super.setUploadType(uploadType);
        }

        @Override
        public Finalize setUploadProtocol(java.lang.String uploadProtocol) {
          return (Finalize) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the FirebaseProject for which the default GCP resource location will
         * be set, in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** The resource name of the FirebaseProject for which the default GCP resource location will be set,
       in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
       [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER
       values.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * The resource name of the FirebaseProject for which the default GCP resource location will
         * be set, in the format: projects/PROJECT_IDENTIFIER Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values.
         */
        public Finalize setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public Finalize set(String parameterName, Object value) {
          return (Finalize) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the IosApps collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseManagement firebase = new FirebaseManagement(...);}
     *   {@code FirebaseManagement.IosApps.List request = firebase.iosApps().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public IosApps iosApps() {
      return new IosApps();
    }

    /**
     * The "iosApps" collection of methods.
     */
    public class IosApps {

      /**
       * Requests the creation of a new IosApp in the specified FirebaseProject. The result of this call
       * is an `Operation` which can be used to track the provisioning process. The `Operation` is
       * automatically deleted after completion, so there is no need to call `DeleteOperation`.
       *
       * Create a request for the method "iosApps.create".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent The resource name of the parent FirebaseProject in which to create an IosApp, in the format:
       *        projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
       * @param content the {@link com.google.api.services.firebase.v1beta1.model.IosApp}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.IosApp content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.Operation> {

        private static final String REST_PATH = "v1beta1/{+parent}/iosApps";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Requests the creation of a new IosApp in the specified FirebaseProject. The result of this call
         * is an `Operation` which can be used to track the provisioning process. The `Operation` is
         * automatically deleted after completion, so there is no need to call `DeleteOperation`.
         *
         * Create a request for the method "iosApps.create".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent The resource name of the parent FirebaseProject in which to create an IosApp, in the format:
       *        projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
         * @param content the {@link com.google.api.services.firebase.v1beta1.model.IosApp}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.IosApp content) {
          super(FirebaseManagement.this, "POST", REST_PATH, content, com.google.api.services.firebase.v1beta1.model.Operation.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the parent FirebaseProject in which to create an IosApp, in the
         * format: projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** The resource name of the parent FirebaseProject in which to create an IosApp, in the format:
       projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
       [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER
       values.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * The resource name of the parent FirebaseProject in which to create an IosApp, in the
         * format: projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values.
         */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Gets the specified IosApp.
       *
       * Create a request for the method "iosApps.get".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID Since an
       *        APP_ID is a unique identifier, the Unique Resource from Sub-Collection access pattern may
       *        be used here, in the format: projects/-/iosApps/APP_ID Refer to the `IosApp`
       *        [`name`](../projects.iosApps#IosApp.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER and APP_ID values.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.IosApp> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/iosApps/[^/]+$");

        /**
         * Gets the specified IosApp.
         *
         * Create a request for the method "iosApps.get".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID Since an
       *        APP_ID is a unique identifier, the Unique Resource from Sub-Collection access pattern may
       *        be used here, in the format: projects/-/iosApps/APP_ID Refer to the `IosApp`
       *        [`name`](../projects.iosApps#IosApp.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER and APP_ID values.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.IosApp.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/iosApps/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER
         * /iosApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from Sub-
         * Collection access pattern may be used here, in the format: projects/-/iosApps/APP_ID
         * Refer to the `IosApp` [`name`](../projects.iosApps#IosApp.FIELDS.name) field for details
         * about PROJECT_IDENTIFIER and APP_ID values.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID Since
       an APP_ID is a unique identifier, the Unique Resource from Sub-Collection access pattern may be
       used here, in the format: projects/-/iosApps/APP_ID Refer to the `IosApp`
       [`name`](../projects.iosApps#IosApp.FIELDS.name) field for details about PROJECT_IDENTIFIER and
       APP_ID values.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER
         * /iosApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from Sub-
         * Collection access pattern may be used here, in the format: projects/-/iosApps/APP_ID
         * Refer to the `IosApp` [`name`](../projects.iosApps#IosApp.FIELDS.name) field for details
         * about PROJECT_IDENTIFIER and APP_ID values.
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/iosApps/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Gets the configuration artifact associated with the specified IosApp.
       *
       * Create a request for the method "iosApps.getConfig".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link GetConfig#execute()} method to invoke the remote operation.
       *
       * @param name The resource name of the App configuration to download, in the format:
       *        projects/PROJECT_IDENTIFIER/iosApps/APP_ID/config Since an APP_ID is a unique identifier,
       *        the Unique Resource from Sub-Collection access pattern may be used here, in the format:
       *        projects/-/iosApps/APP_ID Refer to the `IosApp`
       *        [`name`](../projects.iosApps#IosApp.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER and APP_ID values.
       * @return the request
       */
      public GetConfig getConfig(java.lang.String name) throws java.io.IOException {
        GetConfig result = new GetConfig(name);
        initialize(result);
        return result;
      }

      public class GetConfig extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.IosAppConfig> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/iosApps/[^/]+/config$");

        /**
         * Gets the configuration artifact associated with the specified IosApp.
         *
         * Create a request for the method "iosApps.getConfig".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link GetConfig#execute()} method to invoke the remote
         * operation. <p> {@link
         * GetConfig#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource name of the App configuration to download, in the format:
       *        projects/PROJECT_IDENTIFIER/iosApps/APP_ID/config Since an APP_ID is a unique identifier,
       *        the Unique Resource from Sub-Collection access pattern may be used here, in the format:
       *        projects/-/iosApps/APP_ID Refer to the `IosApp`
       *        [`name`](../projects.iosApps#IosApp.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER and APP_ID values.
         * @since 1.13
         */
        protected GetConfig(java.lang.String name) {
          super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.IosAppConfig.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/iosApps/[^/]+/config$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public GetConfig set$Xgafv(java.lang.String $Xgafv) {
          return (GetConfig) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetConfig setAccessToken(java.lang.String accessToken) {
          return (GetConfig) super.setAccessToken(accessToken);
        }

        @Override
        public GetConfig setAlt(java.lang.String alt) {
          return (GetConfig) super.setAlt(alt);
        }

        @Override
        public GetConfig setCallback(java.lang.String callback) {
          return (GetConfig) super.setCallback(callback);
        }

        @Override
        public GetConfig setFields(java.lang.String fields) {
          return (GetConfig) super.setFields(fields);
        }

        @Override
        public GetConfig setKey(java.lang.String key) {
          return (GetConfig) super.setKey(key);
        }

        @Override
        public GetConfig setOauthToken(java.lang.String oauthToken) {
          return (GetConfig) super.setOauthToken(oauthToken);
        }

        @Override
        public GetConfig setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetConfig) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetConfig setQuotaUser(java.lang.String quotaUser) {
          return (GetConfig) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetConfig setUploadType(java.lang.String uploadType) {
          return (GetConfig) super.setUploadType(uploadType);
        }

        @Override
        public GetConfig setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetConfig) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the App configuration to download, in the format:
         * projects/PROJECT_IDENTIFIER/iosApps/APP_ID/config Since an APP_ID is a unique identifier,
         * the Unique Resource from Sub-Collection access pattern may be used here, in the format:
         * projects/-/iosApps/APP_ID Refer to the `IosApp`
         * [`name`](../projects.iosApps#IosApp.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER and APP_ID values.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the App configuration to download, in the format:
       projects/PROJECT_IDENTIFIER/iosApps/APP_ID/config Since an APP_ID is a unique identifier, the
       Unique Resource from Sub-Collection access pattern may be used here, in the format:
       projects/-/iosApps/APP_ID Refer to the `IosApp` [`name`](../projects.iosApps#IosApp.FIELDS.name)
       field for details about PROJECT_IDENTIFIER and APP_ID values.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the App configuration to download, in the format:
         * projects/PROJECT_IDENTIFIER/iosApps/APP_ID/config Since an APP_ID is a unique identifier,
         * the Unique Resource from Sub-Collection access pattern may be used here, in the format:
         * projects/-/iosApps/APP_ID Refer to the `IosApp`
         * [`name`](../projects.iosApps#IosApp.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER and APP_ID values.
         */
        public GetConfig setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/iosApps/[^/]+/config$");
          }
          this.name = name;
          return this;
        }

        @Override
        public GetConfig set(String parameterName, Object value) {
          return (GetConfig) super.set(parameterName, value);
        }
      }
      /**
       * Lists each IosApp associated with the specified FirebaseProject. The elements are returned in no
       * particular order, but will be a consistent view of the Apps when additional requests are made
       * with a `pageToken`.
       *
       * Create a request for the method "iosApps.list".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent The resource name of the parent FirebaseProject for which to list each associated IosApp, in the
       *        format: projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.ListIosAppsResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/iosApps";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists each IosApp associated with the specified FirebaseProject. The elements are returned in
         * no particular order, but will be a consistent view of the Apps when additional requests are
         * made with a `pageToken`.
         *
         * Create a request for the method "iosApps.list".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent The resource name of the parent FirebaseProject for which to list each associated IosApp, in the
       *        format: projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.ListIosAppsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the parent FirebaseProject for which to list each associated IosApp,
         * in the format: projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** The resource name of the parent FirebaseProject for which to list each associated IosApp, in the
       format: projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
       [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER
       values.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * The resource name of the parent FirebaseProject for which to list each associated IosApp,
         * in the format: projects/PROJECT_IDENTIFIER/iosApps Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values.
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The maximum number of Apps to return in the response. The server may return fewer than
         * this at its discretion. If no value is specified (or too large a value is specified), the
         * server will impose its own limit.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of Apps to return in the response. The server may return fewer than this at its
       discretion. If no value is specified (or too large a value is specified), the server will impose
       its own limit.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * The maximum number of Apps to return in the response. The server may return fewer than
         * this at its discretion. If no value is specified (or too large a value is specified), the
         * server will impose its own limit.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * Token returned from a previous call to `ListIosApps` indicating where in the set of Apps
         * to resume listing.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Token returned from a previous call to `ListIosApps` indicating where in the set of Apps to resume
       listing.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * Token returned from a previous call to `ListIosApps` indicating where in the set of Apps
         * to resume listing.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates the attributes of the specified IosApp.
       *
       * Create a request for the method "iosApps.patch".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID *
       *        PROJECT_IDENTIFIER: the parent Project's
       *        [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)***
       *        or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
       *        using project identifiers in Google's [AIP 2510
       *        standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
       *        in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-
       *        assigned identifier for the App (see [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).
       * @param content the {@link com.google.api.services.firebase.v1beta1.model.IosApp}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.firebase.v1beta1.model.IosApp content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.IosApp> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/iosApps/[^/]+$");

        /**
         * Updates the attributes of the specified IosApp.
         *
         * Create a request for the method "iosApps.patch".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID *
       *        PROJECT_IDENTIFIER: the parent Project's
       *        [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)***
       *        or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
       *        using project identifiers in Google's [AIP 2510
       *        standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
       *        in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-
       *        assigned identifier for the App (see [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).
         * @param content the {@link com.google.api.services.firebase.v1beta1.model.IosApp}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.firebase.v1beta1.model.IosApp content) {
          super(FirebaseManagement.this, "PATCH", REST_PATH, content, com.google.api.services.firebase.v1beta1.model.IosApp.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/iosApps/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER
         * /iosApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
         * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)***
         * or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
         * using project identifiers in Google's [AIP 2510
         * standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
         * in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-
         * assigned identifier for the App (see
         * [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER /iosApps/APP_ID *
       PROJECT_IDENTIFIER: the parent Project's
       [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its
       [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project
       identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value
       for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique,
       Firebase-assigned identifier for the App (see [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the IosApp, in the format: projects/PROJECT_IDENTIFIER
         * /iosApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
         * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)***
         * or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
         * using project identifiers in Google's [AIP 2510
         * standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
         * in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-
         * assigned identifier for the App (see
         * [`appId`](../projects.iosApps#IosApp.FIELDS.app_id)).
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/iosApps/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * Specifies which fields to update. Note that the fields `name`, `appId`, `projectId`, and
         * `bundleId` are all immutable.
         */
        @com.google.api.client.util.Key
        private String updateMask;

        /** Specifies which fields to update. Note that the fields `name`, `appId`, `projectId`, and `bundleId`
       are all immutable.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /**
         * Specifies which fields to update. Note that the fields `name`, `appId`, `projectId`, and
         * `bundleId` are all immutable.
         */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the WebApps collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code FirebaseManagement firebase = new FirebaseManagement(...);}
     *   {@code FirebaseManagement.WebApps.List request = firebase.webApps().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public WebApps webApps() {
      return new WebApps();
    }

    /**
     * The "webApps" collection of methods.
     */
    public class WebApps {

      /**
       * Requests the creation of a new WebApp in the specified FirebaseProject. The result of this call
       * is an `Operation` which can be used to track the provisioning process. The `Operation` is
       * automatically deleted after completion, so there is no need to call `DeleteOperation`.
       *
       * Create a request for the method "webApps.create".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent The resource name of the parent FirebaseProject in which to create a WebApp, in the format:
       *        projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
       * @param content the {@link com.google.api.services.firebase.v1beta1.model.WebApp}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.WebApp content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.Operation> {

        private static final String REST_PATH = "v1beta1/{+parent}/webApps";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Requests the creation of a new WebApp in the specified FirebaseProject. The result of this call
         * is an `Operation` which can be used to track the provisioning process. The `Operation` is
         * automatically deleted after completion, so there is no need to call `DeleteOperation`.
         *
         * Create a request for the method "webApps.create".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent The resource name of the parent FirebaseProject in which to create a WebApp, in the format:
       *        projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
         * @param content the {@link com.google.api.services.firebase.v1beta1.model.WebApp}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.firebase.v1beta1.model.WebApp content) {
          super(FirebaseManagement.this, "POST", REST_PATH, content, com.google.api.services.firebase.v1beta1.model.Operation.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the parent FirebaseProject in which to create a WebApp, in the
         * format: projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** The resource name of the parent FirebaseProject in which to create a WebApp, in the format:
       projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
       [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER
       values.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * The resource name of the parent FirebaseProject in which to create a WebApp, in the
         * format: projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values.
         */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Gets the specified WebApp.
       *
       * Create a request for the method "webApps.get".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER /webApps/APP_ID Since an
       *        APP_ID is a unique identifier, the Unique Resource from Sub-Collection access pattern may
       *        be used here, in the format: projects/-/webApps/APP_ID Refer to the `WebApp`
       *        [`name`](../projects.webApps#WebApp.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER and APP_ID values.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.WebApp> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/webApps/[^/]+$");

        /**
         * Gets the specified WebApp.
         *
         * Create a request for the method "webApps.get".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER /webApps/APP_ID Since an
       *        APP_ID is a unique identifier, the Unique Resource from Sub-Collection access pattern may
       *        be used here, in the format: projects/-/webApps/APP_ID Refer to the `WebApp`
       *        [`name`](../projects.webApps#WebApp.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER and APP_ID values.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.WebApp.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/webApps/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER
         * /webApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from Sub-
         * Collection access pattern may be used here, in the format: projects/-/webApps/APP_ID
         * Refer to the `WebApp` [`name`](../projects.webApps#WebApp.FIELDS.name) field for details
         * about PROJECT_IDENTIFIER and APP_ID values.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER /webApps/APP_ID Since
       an APP_ID is a unique identifier, the Unique Resource from Sub-Collection access pattern may be
       used here, in the format: projects/-/webApps/APP_ID Refer to the `WebApp`
       [`name`](../projects.webApps#WebApp.FIELDS.name) field for details about PROJECT_IDENTIFIER and
       APP_ID values.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER
         * /webApps/APP_ID Since an APP_ID is a unique identifier, the Unique Resource from Sub-
         * Collection access pattern may be used here, in the format: projects/-/webApps/APP_ID
         * Refer to the `WebApp` [`name`](../projects.webApps#WebApp.FIELDS.name) field for details
         * about PROJECT_IDENTIFIER and APP_ID values.
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/webApps/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Gets the configuration artifact associated with the specified WebApp.
       *
       * Create a request for the method "webApps.getConfig".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link GetConfig#execute()} method to invoke the remote operation.
       *
       * @param name The resource name of the WebApp configuration to download, in the format:
       *        projects/PROJECT_IDENTIFIER/webApps/APP_ID/config Since an APP_ID is a unique identifier,
       *        the Unique Resource from Sub-Collection access pattern may be used here, in the format:
       *        projects/-/webApps/APP_ID Refer to the `WebApp`
       *        [`name`](../projects.webApps#WebApp.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER and APP_ID values.
       * @return the request
       */
      public GetConfig getConfig(java.lang.String name) throws java.io.IOException {
        GetConfig result = new GetConfig(name);
        initialize(result);
        return result;
      }

      public class GetConfig extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.WebAppConfig> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/webApps/[^/]+/config$");

        /**
         * Gets the configuration artifact associated with the specified WebApp.
         *
         * Create a request for the method "webApps.getConfig".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link GetConfig#execute()} method to invoke the remote
         * operation. <p> {@link
         * GetConfig#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource name of the WebApp configuration to download, in the format:
       *        projects/PROJECT_IDENTIFIER/webApps/APP_ID/config Since an APP_ID is a unique identifier,
       *        the Unique Resource from Sub-Collection access pattern may be used here, in the format:
       *        projects/-/webApps/APP_ID Refer to the `WebApp`
       *        [`name`](../projects.webApps#WebApp.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER and APP_ID values.
         * @since 1.13
         */
        protected GetConfig(java.lang.String name) {
          super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.WebAppConfig.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/webApps/[^/]+/config$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public GetConfig set$Xgafv(java.lang.String $Xgafv) {
          return (GetConfig) super.set$Xgafv($Xgafv);
        }

        @Override
        public GetConfig setAccessToken(java.lang.String accessToken) {
          return (GetConfig) super.setAccessToken(accessToken);
        }

        @Override
        public GetConfig setAlt(java.lang.String alt) {
          return (GetConfig) super.setAlt(alt);
        }

        @Override
        public GetConfig setCallback(java.lang.String callback) {
          return (GetConfig) super.setCallback(callback);
        }

        @Override
        public GetConfig setFields(java.lang.String fields) {
          return (GetConfig) super.setFields(fields);
        }

        @Override
        public GetConfig setKey(java.lang.String key) {
          return (GetConfig) super.setKey(key);
        }

        @Override
        public GetConfig setOauthToken(java.lang.String oauthToken) {
          return (GetConfig) super.setOauthToken(oauthToken);
        }

        @Override
        public GetConfig setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetConfig) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetConfig setQuotaUser(java.lang.String quotaUser) {
          return (GetConfig) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetConfig setUploadType(java.lang.String uploadType) {
          return (GetConfig) super.setUploadType(uploadType);
        }

        @Override
        public GetConfig setUploadProtocol(java.lang.String uploadProtocol) {
          return (GetConfig) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the WebApp configuration to download, in the format:
         * projects/PROJECT_IDENTIFIER/webApps/APP_ID/config Since an APP_ID is a unique identifier,
         * the Unique Resource from Sub-Collection access pattern may be used here, in the format:
         * projects/-/webApps/APP_ID Refer to the `WebApp`
         * [`name`](../projects.webApps#WebApp.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER and APP_ID values.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the WebApp configuration to download, in the format:
       projects/PROJECT_IDENTIFIER/webApps/APP_ID/config Since an APP_ID is a unique identifier, the
       Unique Resource from Sub-Collection access pattern may be used here, in the format:
       projects/-/webApps/APP_ID Refer to the `WebApp` [`name`](../projects.webApps#WebApp.FIELDS.name)
       field for details about PROJECT_IDENTIFIER and APP_ID values.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the WebApp configuration to download, in the format:
         * projects/PROJECT_IDENTIFIER/webApps/APP_ID/config Since an APP_ID is a unique identifier,
         * the Unique Resource from Sub-Collection access pattern may be used here, in the format:
         * projects/-/webApps/APP_ID Refer to the `WebApp`
         * [`name`](../projects.webApps#WebApp.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER and APP_ID values.
         */
        public GetConfig setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/webApps/[^/]+/config$");
          }
          this.name = name;
          return this;
        }

        @Override
        public GetConfig set(String parameterName, Object value) {
          return (GetConfig) super.set(parameterName, value);
        }
      }
      /**
       * Lists each WebApp associated with the specified FirebaseProject. The elements are returned in no
       * particular order, but will be a consistent view of the Apps when additional requests are made
       * with a `pageToken`.
       *
       * Create a request for the method "webApps.list".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent The resource name of the parent FirebaseProject for which to list each associated WebApp, in the
       *        format: projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.ListWebAppsResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/webApps";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists each WebApp associated with the specified FirebaseProject. The elements are returned in
         * no particular order, but will be a consistent view of the Apps when additional requests are
         * made with a `pageToken`.
         *
         * Create a request for the method "webApps.list".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent The resource name of the parent FirebaseProject for which to list each associated WebApp, in the
       *        format: projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
       *        [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
       *        PROJECT_IDENTIFIER values.
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(FirebaseManagement.this, "GET", REST_PATH, null, com.google.api.services.firebase.v1beta1.model.ListWebAppsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the parent FirebaseProject for which to list each associated WebApp,
         * in the format: projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values.
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** The resource name of the parent FirebaseProject for which to list each associated WebApp, in the
       format: projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
       [`name`](../projects#FirebaseProject.FIELDS.name) field for details about PROJECT_IDENTIFIER
       values.
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * The resource name of the parent FirebaseProject for which to list each associated WebApp,
         * in the format: projects/PROJECT_IDENTIFIER/webApps Refer to the `FirebaseProject`
         * [`name`](../projects#FirebaseProject.FIELDS.name) field for details about
         * PROJECT_IDENTIFIER values.
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * The maximum number of Apps to return in the response. The server may return fewer than
         * this value at its discretion. If no value is specified (or too large a value is
         * specified), then the server will impose its own limit.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** The maximum number of Apps to return in the response. The server may return fewer than this value
       at its discretion. If no value is specified (or too large a value is specified), then the server
       will impose its own limit.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * The maximum number of Apps to return in the response. The server may return fewer than
         * this value at its discretion. If no value is specified (or too large a value is
         * specified), then the server will impose its own limit.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * Token returned from a previous call to `ListWebApps` indicating where in the set of Apps
         * to resume listing.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Token returned from a previous call to `ListWebApps` indicating where in the set of Apps to resume
       listing.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * Token returned from a previous call to `ListWebApps` indicating where in the set of Apps
         * to resume listing.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates the attributes of the specified WebApp.
       *
       * Create a request for the method "webApps.patch".
       *
       * This request holds the parameters needed by the firebase server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER /webApps/APP_ID *
       *        PROJECT_IDENTIFIER: the parent Project's
       *        [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)***
       *        or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
       *        using project identifiers in Google's [AIP 2510
       *        standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
       *        in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-
       *        assigned identifier for the App (see [`appId`](../projects.webApps#WebApp.FIELDS.app_id)).
       * @param content the {@link com.google.api.services.firebase.v1beta1.model.WebApp}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.firebase.v1beta1.model.WebApp content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends FirebaseManagementRequest<com.google.api.services.firebase.v1beta1.model.WebApp> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/webApps/[^/]+$");

        /**
         * Updates the attributes of the specified WebApp.
         *
         * Create a request for the method "webApps.patch".
         *
         * This request holds the parameters needed by the the firebase server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER /webApps/APP_ID *
       *        PROJECT_IDENTIFIER: the parent Project's
       *        [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)***
       *        or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
       *        using project identifiers in Google's [AIP 2510
       *        standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
       *        in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-
       *        assigned identifier for the App (see [`appId`](../projects.webApps#WebApp.FIELDS.app_id)).
         * @param content the {@link com.google.api.services.firebase.v1beta1.model.WebApp}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.firebase.v1beta1.model.WebApp content) {
          super(FirebaseManagement.this, "PATCH", REST_PATH, content, com.google.api.services.firebase.v1beta1.model.WebApp.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/webApps/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER
         * /webApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
         * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)***
         * or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
         * using project identifiers in Google's [AIP 2510
         * standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
         * in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-
         * assigned identifier for the App (see
         * [`appId`](../projects.webApps#WebApp.FIELDS.app_id)).
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER /webApps/APP_ID *
       PROJECT_IDENTIFIER: the parent Project's
       [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its
       [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about using project
       identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510). Note that the value
       for PROJECT_IDENTIFIER in any response body will be the `ProjectId`. * APP_ID: the globally unique,
       Firebase-assigned identifier for the App (see [`appId`](../projects.webApps#WebApp.FIELDS.app_id)).
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The resource name of the WebApp, in the format: projects/PROJECT_IDENTIFIER
         * /webApps/APP_ID * PROJECT_IDENTIFIER: the parent Project's
         * [`ProjectNumber`](../projects#FirebaseProject.FIELDS.project_number) ***(recommended)***
         * or its [`ProjectId`](../projects#FirebaseProject.FIELDS.project_id). Learn more about
         * using project identifiers in Google's [AIP 2510
         * standard](https://google.aip.dev/cloud/2510). Note that the value for PROJECT_IDENTIFIER
         * in any response body will be the `ProjectId`. * APP_ID: the globally unique, Firebase-
         * assigned identifier for the App (see
         * [`appId`](../projects.webApps#WebApp.FIELDS.app_id)).
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/webApps/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /**
         * Specifies which fields to update. Note that the fields `name`, `appId`, and `projectId`
         * are all immutable.
         */
        @com.google.api.client.util.Key
        private String updateMask;

        /** Specifies which fields to update. Note that the fields `name`, `appId`, and `projectId` are all
       immutable.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /**
         * Specifies which fields to update. Note that the fields `name`, `appId`, and `projectId`
         * are all immutable.
         */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link FirebaseManagement}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link FirebaseManagement}. */
    @Override
    public FirebaseManagement build() {
      return new FirebaseManagement(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FirebaseManagementRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFirebaseManagementRequestInitializer(
        FirebaseManagementRequestInitializer firebasemanagementRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(firebasemanagementRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
