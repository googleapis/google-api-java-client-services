/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.securitycenter.v1beta1.model;

/**
 * Represents an operating system process.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Security Command Center API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Process extends com.google.api.client.json.GenericJson {

  /**
   * Process arguments as JSON encoded strings.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> args;

  /**
   * True if arguments is incomplete.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean argumentsTruncated;

  /**
   * File information for the process executable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private File binary;

  /**
   * Process environment variables.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<EnvironmentVariable> envVariables;

  static {
    // hack to force ProGuard to consider EnvironmentVariable used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(EnvironmentVariable.class);
  }

  /**
   * True if env_variables is incomplete.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean envVariablesTruncated;

  /**
   * File information for libraries loaded by the process.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<File> libraries;

  static {
    // hack to force ProGuard to consider File used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(File.class);
  }

  /**
   * The parent process id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long parentPid;

  /**
   * The process id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long pid;

  /**
   * When the process represents the invocation of a script, binary provides information about the
   * interpreter while script provides information about the script file provided to the
   * interpreter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private File script;

  /**
   * Process arguments as JSON encoded strings.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getArgs() {
    return args;
  }

  /**
   * Process arguments as JSON encoded strings.
   * @param args args or {@code null} for none
   */
  public Process setArgs(java.util.List<java.lang.String> args) {
    this.args = args;
    return this;
  }

  /**
   * True if arguments is incomplete.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getArgumentsTruncated() {
    return argumentsTruncated;
  }

  /**
   * True if arguments is incomplete.
   * @param argumentsTruncated argumentsTruncated or {@code null} for none
   */
  public Process setArgumentsTruncated(java.lang.Boolean argumentsTruncated) {
    this.argumentsTruncated = argumentsTruncated;
    return this;
  }

  /**
   * File information for the process executable.
   * @return value or {@code null} for none
   */
  public File getBinary() {
    return binary;
  }

  /**
   * File information for the process executable.
   * @param binary binary or {@code null} for none
   */
  public Process setBinary(File binary) {
    this.binary = binary;
    return this;
  }

  /**
   * Process environment variables.
   * @return value or {@code null} for none
   */
  public java.util.List<EnvironmentVariable> getEnvVariables() {
    return envVariables;
  }

  /**
   * Process environment variables.
   * @param envVariables envVariables or {@code null} for none
   */
  public Process setEnvVariables(java.util.List<EnvironmentVariable> envVariables) {
    this.envVariables = envVariables;
    return this;
  }

  /**
   * True if env_variables is incomplete.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getEnvVariablesTruncated() {
    return envVariablesTruncated;
  }

  /**
   * True if env_variables is incomplete.
   * @param envVariablesTruncated envVariablesTruncated or {@code null} for none
   */
  public Process setEnvVariablesTruncated(java.lang.Boolean envVariablesTruncated) {
    this.envVariablesTruncated = envVariablesTruncated;
    return this;
  }

  /**
   * File information for libraries loaded by the process.
   * @return value or {@code null} for none
   */
  public java.util.List<File> getLibraries() {
    return libraries;
  }

  /**
   * File information for libraries loaded by the process.
   * @param libraries libraries or {@code null} for none
   */
  public Process setLibraries(java.util.List<File> libraries) {
    this.libraries = libraries;
    return this;
  }

  /**
   * The parent process id.
   * @return value or {@code null} for none
   */
  public java.lang.Long getParentPid() {
    return parentPid;
  }

  /**
   * The parent process id.
   * @param parentPid parentPid or {@code null} for none
   */
  public Process setParentPid(java.lang.Long parentPid) {
    this.parentPid = parentPid;
    return this;
  }

  /**
   * The process id.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPid() {
    return pid;
  }

  /**
   * The process id.
   * @param pid pid or {@code null} for none
   */
  public Process setPid(java.lang.Long pid) {
    this.pid = pid;
    return this;
  }

  /**
   * When the process represents the invocation of a script, binary provides information about the
   * interpreter while script provides information about the script file provided to the
   * interpreter.
   * @return value or {@code null} for none
   */
  public File getScript() {
    return script;
  }

  /**
   * When the process represents the invocation of a script, binary provides information about the
   * interpreter while script provides information about the script file provided to the
   * interpreter.
   * @param script script or {@code null} for none
   */
  public Process setScript(File script) {
    this.script = script;
    return this;
  }

  @Override
  public Process set(String fieldName, Object value) {
    return (Process) super.set(fieldName, value);
  }

  @Override
  public Process clone() {
    return (Process) super.clone();
  }

}
