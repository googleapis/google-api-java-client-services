/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.batch.v1.model;

/**
 * Container runnable.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Batch API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Container extends com.google.api.client.json.GenericJson {

  /**
   * If set to true, external network access to and from container will be blocked, containers that
   * are with block_external_network as true can still communicate with each other, network cannot
   * be specified in the `container.options` field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean blockExternalNetwork;

  /**
   * Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the
   * container image or with the entrypoint field below) then commands are appended as arguments to
   * the ENTRYPOINT.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> commands;

  /**
   * Overrides the `ENTRYPOINT` specified in the container.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String entrypoint;

  /**
   * The URI to pull the container image from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imageUri;

  /**
   * Arbitrary additional options to include in the "docker run" command when running this
   * container, e.g. "--network host".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String options;

  /**
   * Optional password for logging in to a docker registry. If password matches
   * `projects/secrets/versions` then Batch will read the password from the Secret Manager;
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String password;

  /**
   * Optional username for logging in to a docker registry. If username matches
   * `projects/secrets/versions` then Batch will read the username from the Secret Manager.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String username;

  /**
   * Volumes to mount (bind mount) from the host machine files or directories into the container,
   * formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> volumes;

  /**
   * If set to true, external network access to and from container will be blocked, containers that
   * are with block_external_network as true can still communicate with each other, network cannot
   * be specified in the `container.options` field.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getBlockExternalNetwork() {
    return blockExternalNetwork;
  }

  /**
   * If set to true, external network access to and from container will be blocked, containers that
   * are with block_external_network as true can still communicate with each other, network cannot
   * be specified in the `container.options` field.
   * @param blockExternalNetwork blockExternalNetwork or {@code null} for none
   */
  public Container setBlockExternalNetwork(java.lang.Boolean blockExternalNetwork) {
    this.blockExternalNetwork = blockExternalNetwork;
    return this;
  }

  /**
   * Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the
   * container image or with the entrypoint field below) then commands are appended as arguments to
   * the ENTRYPOINT.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCommands() {
    return commands;
  }

  /**
   * Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the
   * container image or with the entrypoint field below) then commands are appended as arguments to
   * the ENTRYPOINT.
   * @param commands commands or {@code null} for none
   */
  public Container setCommands(java.util.List<java.lang.String> commands) {
    this.commands = commands;
    return this;
  }

  /**
   * Overrides the `ENTRYPOINT` specified in the container.
   * @return value or {@code null} for none
   */
  public java.lang.String getEntrypoint() {
    return entrypoint;
  }

  /**
   * Overrides the `ENTRYPOINT` specified in the container.
   * @param entrypoint entrypoint or {@code null} for none
   */
  public Container setEntrypoint(java.lang.String entrypoint) {
    this.entrypoint = entrypoint;
    return this;
  }

  /**
   * The URI to pull the container image from.
   * @return value or {@code null} for none
   */
  public java.lang.String getImageUri() {
    return imageUri;
  }

  /**
   * The URI to pull the container image from.
   * @param imageUri imageUri or {@code null} for none
   */
  public Container setImageUri(java.lang.String imageUri) {
    this.imageUri = imageUri;
    return this;
  }

  /**
   * Arbitrary additional options to include in the "docker run" command when running this
   * container, e.g. "--network host".
   * @return value or {@code null} for none
   */
  public java.lang.String getOptions() {
    return options;
  }

  /**
   * Arbitrary additional options to include in the "docker run" command when running this
   * container, e.g. "--network host".
   * @param options options or {@code null} for none
   */
  public Container setOptions(java.lang.String options) {
    this.options = options;
    return this;
  }

  /**
   * Optional password for logging in to a docker registry. If password matches
   * `projects/secrets/versions` then Batch will read the password from the Secret Manager;
   * @return value or {@code null} for none
   */
  public java.lang.String getPassword() {
    return password;
  }

  /**
   * Optional password for logging in to a docker registry. If password matches
   * `projects/secrets/versions` then Batch will read the password from the Secret Manager;
   * @param password password or {@code null} for none
   */
  public Container setPassword(java.lang.String password) {
    this.password = password;
    return this;
  }

  /**
   * Optional username for logging in to a docker registry. If username matches
   * `projects/secrets/versions` then Batch will read the username from the Secret Manager.
   * @return value or {@code null} for none
   */
  public java.lang.String getUsername() {
    return username;
  }

  /**
   * Optional username for logging in to a docker registry. If username matches
   * `projects/secrets/versions` then Batch will read the username from the Secret Manager.
   * @param username username or {@code null} for none
   */
  public Container setUsername(java.lang.String username) {
    this.username = username;
    return this;
  }

  /**
   * Volumes to mount (bind mount) from the host machine files or directories into the container,
   * formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getVolumes() {
    return volumes;
  }

  /**
   * Volumes to mount (bind mount) from the host machine files or directories into the container,
   * formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro
   * @param volumes volumes or {@code null} for none
   */
  public Container setVolumes(java.util.List<java.lang.String> volumes) {
    this.volumes = volumes;
    return this;
  }

  @Override
  public Container set(String fieldName, Object value) {
    return (Container) super.set(fieldName, value);
  }

  @Override
  public Container clone() {
    return (Container) super.clone();
  }

}
