/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vmmigration.v1alpha1.model;

/**
 * TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the VM Migration API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TargetVMDetails extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The OS license returned from the adaptation module report.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AppliedLicense appliedLicense;

  /**
   * Output only. The VM Boot Option, as set in the source vm.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bootOption;

  /**
   * Compute instance scheduling information (if empty default is used).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ComputeScheduling computeScheduling;

  /**
   * The disk type to use in the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String diskType;

  /**
   * The external IP to define in the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String externalIp;

  /**
   * The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a
   * named address resource full path.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String internalIp;

  /**
   * A map of labels to associate with the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * The license type to use in OS adaptation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String licenseType;

  /**
   * The machine type to create the VM with.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String machineType;

  /**
   * The machine type series to create the VM with.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String machineTypeSeries;

  /**
   * The metadata key/value pairs to assign to the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> metadata;

  /**
   * The name of the VM to create.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The network to connect the VM to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String network;

  /**
   * List of NICs connected to this VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NetworkInterface> networkInterfaces;

  static {
    // hack to force ProGuard to consider NetworkInterface used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(NetworkInterface.class);
  }

  /**
   * A map of network tags to associate with the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> networkTags;

  /**
   * The project in which to create the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String project;

  /**
   * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm
   * boot option is EFI.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean secureBoot;

  /**
   * The service account to associate the VM with.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceAccount;

  /**
   * The subnetwork to connect the VM to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subnetwork;

  /**
   * The full path of the resource of type TargetProject which represents the Compute Engine project
   * in which to create this VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetProject;

  /**
   * The zone in which to create the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String zone;

  /**
   * Output only. The OS license returned from the adaptation module report.
   * @return value or {@code null} for none
   */
  public AppliedLicense getAppliedLicense() {
    return appliedLicense;
  }

  /**
   * Output only. The OS license returned from the adaptation module report.
   * @param appliedLicense appliedLicense or {@code null} for none
   */
  public TargetVMDetails setAppliedLicense(AppliedLicense appliedLicense) {
    this.appliedLicense = appliedLicense;
    return this;
  }

  /**
   * Output only. The VM Boot Option, as set in the source vm.
   * @return value or {@code null} for none
   */
  public java.lang.String getBootOption() {
    return bootOption;
  }

  /**
   * Output only. The VM Boot Option, as set in the source vm.
   * @param bootOption bootOption or {@code null} for none
   */
  public TargetVMDetails setBootOption(java.lang.String bootOption) {
    this.bootOption = bootOption;
    return this;
  }

  /**
   * Compute instance scheduling information (if empty default is used).
   * @return value or {@code null} for none
   */
  public ComputeScheduling getComputeScheduling() {
    return computeScheduling;
  }

  /**
   * Compute instance scheduling information (if empty default is used).
   * @param computeScheduling computeScheduling or {@code null} for none
   */
  public TargetVMDetails setComputeScheduling(ComputeScheduling computeScheduling) {
    this.computeScheduling = computeScheduling;
    return this;
  }

  /**
   * The disk type to use in the VM.
   * @return value or {@code null} for none
   */
  public java.lang.String getDiskType() {
    return diskType;
  }

  /**
   * The disk type to use in the VM.
   * @param diskType diskType or {@code null} for none
   */
  public TargetVMDetails setDiskType(java.lang.String diskType) {
    this.diskType = diskType;
    return this;
  }

  /**
   * The external IP to define in the VM.
   * @return value or {@code null} for none
   */
  public java.lang.String getExternalIp() {
    return externalIp;
  }

  /**
   * The external IP to define in the VM.
   * @param externalIp externalIp or {@code null} for none
   */
  public TargetVMDetails setExternalIp(java.lang.String externalIp) {
    this.externalIp = externalIp;
    return this;
  }

  /**
   * The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a
   * named address resource full path.
   * @return value or {@code null} for none
   */
  public java.lang.String getInternalIp() {
    return internalIp;
  }

  /**
   * The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a
   * named address resource full path.
   * @param internalIp internalIp or {@code null} for none
   */
  public TargetVMDetails setInternalIp(java.lang.String internalIp) {
    this.internalIp = internalIp;
    return this;
  }

  /**
   * A map of labels to associate with the VM.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * A map of labels to associate with the VM.
   * @param labels labels or {@code null} for none
   */
  public TargetVMDetails setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * The license type to use in OS adaptation.
   * @return value or {@code null} for none
   */
  public java.lang.String getLicenseType() {
    return licenseType;
  }

  /**
   * The license type to use in OS adaptation.
   * @param licenseType licenseType or {@code null} for none
   */
  public TargetVMDetails setLicenseType(java.lang.String licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * The machine type to create the VM with.
   * @return value or {@code null} for none
   */
  public java.lang.String getMachineType() {
    return machineType;
  }

  /**
   * The machine type to create the VM with.
   * @param machineType machineType or {@code null} for none
   */
  public TargetVMDetails setMachineType(java.lang.String machineType) {
    this.machineType = machineType;
    return this;
  }

  /**
   * The machine type series to create the VM with.
   * @return value or {@code null} for none
   */
  public java.lang.String getMachineTypeSeries() {
    return machineTypeSeries;
  }

  /**
   * The machine type series to create the VM with.
   * @param machineTypeSeries machineTypeSeries or {@code null} for none
   */
  public TargetVMDetails setMachineTypeSeries(java.lang.String machineTypeSeries) {
    this.machineTypeSeries = machineTypeSeries;
    return this;
  }

  /**
   * The metadata key/value pairs to assign to the VM.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getMetadata() {
    return metadata;
  }

  /**
   * The metadata key/value pairs to assign to the VM.
   * @param metadata metadata or {@code null} for none
   */
  public TargetVMDetails setMetadata(java.util.Map<String, java.lang.String> metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The name of the VM to create.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name of the VM to create.
   * @param name name or {@code null} for none
   */
  public TargetVMDetails setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The network to connect the VM to.
   * @return value or {@code null} for none
   */
  public java.lang.String getNetwork() {
    return network;
  }

  /**
   * The network to connect the VM to.
   * @param network network or {@code null} for none
   */
  public TargetVMDetails setNetwork(java.lang.String network) {
    this.network = network;
    return this;
  }

  /**
   * List of NICs connected to this VM.
   * @return value or {@code null} for none
   */
  public java.util.List<NetworkInterface> getNetworkInterfaces() {
    return networkInterfaces;
  }

  /**
   * List of NICs connected to this VM.
   * @param networkInterfaces networkInterfaces or {@code null} for none
   */
  public TargetVMDetails setNetworkInterfaces(java.util.List<NetworkInterface> networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
    return this;
  }

  /**
   * A map of network tags to associate with the VM.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getNetworkTags() {
    return networkTags;
  }

  /**
   * A map of network tags to associate with the VM.
   * @param networkTags networkTags or {@code null} for none
   */
  public TargetVMDetails setNetworkTags(java.util.List<java.lang.String> networkTags) {
    this.networkTags = networkTags;
    return this;
  }

  /**
   * The project in which to create the VM.
   * @return value or {@code null} for none
   */
  public java.lang.String getProject() {
    return project;
  }

  /**
   * The project in which to create the VM.
   * @param project project or {@code null} for none
   */
  public TargetVMDetails setProject(java.lang.String project) {
    this.project = project;
    return this;
  }

  /**
   * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm
   * boot option is EFI.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSecureBoot() {
    return secureBoot;
  }

  /**
   * Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm
   * boot option is EFI.
   * @param secureBoot secureBoot or {@code null} for none
   */
  public TargetVMDetails setSecureBoot(java.lang.Boolean secureBoot) {
    this.secureBoot = secureBoot;
    return this;
  }

  /**
   * The service account to associate the VM with.
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceAccount() {
    return serviceAccount;
  }

  /**
   * The service account to associate the VM with.
   * @param serviceAccount serviceAccount or {@code null} for none
   */
  public TargetVMDetails setServiceAccount(java.lang.String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * The subnetwork to connect the VM to.
   * @return value or {@code null} for none
   */
  public java.lang.String getSubnetwork() {
    return subnetwork;
  }

  /**
   * The subnetwork to connect the VM to.
   * @param subnetwork subnetwork or {@code null} for none
   */
  public TargetVMDetails setSubnetwork(java.lang.String subnetwork) {
    this.subnetwork = subnetwork;
    return this;
  }

  /**
   * The full path of the resource of type TargetProject which represents the Compute Engine project
   * in which to create this VM.
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetProject() {
    return targetProject;
  }

  /**
   * The full path of the resource of type TargetProject which represents the Compute Engine project
   * in which to create this VM.
   * @param targetProject targetProject or {@code null} for none
   */
  public TargetVMDetails setTargetProject(java.lang.String targetProject) {
    this.targetProject = targetProject;
    return this;
  }

  /**
   * The zone in which to create the VM.
   * @return value or {@code null} for none
   */
  public java.lang.String getZone() {
    return zone;
  }

  /**
   * The zone in which to create the VM.
   * @param zone zone or {@code null} for none
   */
  public TargetVMDetails setZone(java.lang.String zone) {
    this.zone = zone;
    return this;
  }

  @Override
  public TargetVMDetails set(String fieldName, Object value) {
    return (TargetVMDetails) super.set(fieldName, value);
  }

  @Override
  public TargetVMDetails clone() {
    return (TargetVMDetails) super.clone();
  }

}
