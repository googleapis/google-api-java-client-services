/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.adsensehost;

/**
 * Service definition for AdSenseHost (v4.1).
 *
 * <p>
 * Generates performance reports, generates ad codes, and provides publisher management capabilities for AdSense Hosts.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/adsense/host/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link AdSenseHostRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class AdSenseHost extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the AdSense Host API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://www.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "adsensehost/v4.1/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch/adsensehost/v4.1";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public AdSenseHost(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  AdSenseHost(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Accounts collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdSenseHost adsensehost = new AdSenseHost(...);}
   *   {@code AdSenseHost.Accounts.List request = adsensehost.accounts().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Accounts accounts() {
    return new Accounts();
  }

  /**
   * The "accounts" collection of methods.
   */
  public class Accounts {

    /**
     * Get information about the selected associated AdSense account.
     *
     * Create a request for the method "accounts.get".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param accountId Account to get information about.
     * @return the request
     */
    public Get get(java.lang.String accountId) throws java.io.IOException {
      Get result = new Get(accountId);
      initialize(result);
      return result;
    }

    public class Get extends AdSenseHostRequest<com.google.api.services.adsensehost.model.Account> {

      private static final String REST_PATH = "accounts/{accountId}";

      /**
       * Get information about the selected associated AdSense account.
       *
       * Create a request for the method "accounts.get".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param accountId Account to get information about.
       * @since 1.13
       */
      protected Get(java.lang.String accountId) {
        super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.Account.class);
        this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Account to get information about. */
      @com.google.api.client.util.Key
      private java.lang.String accountId;

      /** Account to get information about.
       */
      public java.lang.String getAccountId() {
        return accountId;
      }

      /** Account to get information about. */
      public Get setAccountId(java.lang.String accountId) {
        this.accountId = accountId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * List hosted accounts associated with this AdSense account by ad client id.
     *
     * Create a request for the method "accounts.list".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param filterAdClientId Ad clients to list accounts for.
     * @return the request
     */
    public List list(java.util.List<java.lang.String> filterAdClientId) throws java.io.IOException {
      List result = new List(filterAdClientId);
      initialize(result);
      return result;
    }

    public class List extends AdSenseHostRequest<com.google.api.services.adsensehost.model.Accounts> {

      private static final String REST_PATH = "accounts";

      /**
       * List hosted accounts associated with this AdSense account by ad client id.
       *
       * Create a request for the method "accounts.list".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param filterAdClientId Ad clients to list accounts for.
       * @since 1.13
       */
      protected List(java.util.List<java.lang.String> filterAdClientId) {
        super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.Accounts.class);
        this.filterAdClientId = com.google.api.client.util.Preconditions.checkNotNull(filterAdClientId, "Required parameter filterAdClientId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** Ad clients to list accounts for. */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> filterAdClientId;

      /** Ad clients to list accounts for.
       */
      public java.util.List<java.lang.String> getFilterAdClientId() {
        return filterAdClientId;
      }

      /** Ad clients to list accounts for. */
      public List setFilterAdClientId(java.util.List<java.lang.String> filterAdClientId) {
        this.filterAdClientId = filterAdClientId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Adclients collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code AdSenseHost adsensehost = new AdSenseHost(...);}
     *   {@code AdSenseHost.Adclients.List request = adsensehost.adclients().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Adclients adclients() {
      return new Adclients();
    }

    /**
     * The "adclients" collection of methods.
     */
    public class Adclients {

      /**
       * Get information about one of the ad clients in the specified publisher's AdSense account.
       *
       * Create a request for the method "adclients.get".
       *
       * This request holds the parameters needed by the adsensehost server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param accountId Account which contains the ad client.
       * @param adClientId Ad client to get.
       * @return the request
       */
      public Get get(java.lang.String accountId, java.lang.String adClientId) throws java.io.IOException {
        Get result = new Get(accountId, adClientId);
        initialize(result);
        return result;
      }

      public class Get extends AdSenseHostRequest<com.google.api.services.adsensehost.model.AdClient> {

        private static final String REST_PATH = "accounts/{accountId}/adclients/{adClientId}";

        /**
         * Get information about one of the ad clients in the specified publisher's AdSense account.
         *
         * Create a request for the method "adclients.get".
         *
         * This request holds the parameters needed by the the adsensehost server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Account which contains the ad client.
         * @param adClientId Ad client to get.
         * @since 1.13
         */
        protected Get(java.lang.String accountId, java.lang.String adClientId) {
          super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.AdClient.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
          this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUserIp(java.lang.String userIp) {
          return (Get) super.setUserIp(userIp);
        }

        /** Account which contains the ad client. */
        @com.google.api.client.util.Key
        private java.lang.String accountId;

        /** Account which contains the ad client.
         */
        public java.lang.String getAccountId() {
          return accountId;
        }

        /** Account which contains the ad client. */
        public Get setAccountId(java.lang.String accountId) {
          this.accountId = accountId;
          return this;
        }

        /** Ad client to get. */
        @com.google.api.client.util.Key
        private java.lang.String adClientId;

        /** Ad client to get.
         */
        public java.lang.String getAdClientId() {
          return adClientId;
        }

        /** Ad client to get. */
        public Get setAdClientId(java.lang.String adClientId) {
          this.adClientId = adClientId;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * List all hosted ad clients in the specified hosted account.
       *
       * Create a request for the method "adclients.list".
       *
       * This request holds the parameters needed by the adsensehost server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param accountId Account for which to list ad clients.
       * @return the request
       */
      public List list(java.lang.String accountId) throws java.io.IOException {
        List result = new List(accountId);
        initialize(result);
        return result;
      }

      public class List extends AdSenseHostRequest<com.google.api.services.adsensehost.model.AdClients> {

        private static final String REST_PATH = "accounts/{accountId}/adclients";

        /**
         * List all hosted ad clients in the specified hosted account.
         *
         * Create a request for the method "adclients.list".
         *
         * This request holds the parameters needed by the the adsensehost server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Account for which to list ad clients.
         * @since 1.13
         */
        protected List(java.lang.String accountId) {
          super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.AdClients.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        /** Account for which to list ad clients. */
        @com.google.api.client.util.Key
        private java.lang.String accountId;

        /** Account for which to list ad clients.
         */
        public java.lang.String getAccountId() {
          return accountId;
        }

        /** Account for which to list ad clients. */
        public List setAccountId(java.lang.String accountId) {
          this.accountId = accountId;
          return this;
        }

        /** The maximum number of ad clients to include in the response, used for paging. */
        @com.google.api.client.util.Key
        private java.lang.Long maxResults;

        /** The maximum number of ad clients to include in the response, used for paging.

       [minimum: 0] [maximum: 10000]
         */
        public java.lang.Long getMaxResults() {
          return maxResults;
        }

        /** The maximum number of ad clients to include in the response, used for paging. */
        public List setMaxResults(java.lang.Long maxResults) {
          this.maxResults = maxResults;
          return this;
        }

        /**
         * A continuation token, used to page through ad clients. To retrieve the next page, set
         * this parameter to the value of "nextPageToken" from the previous response.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A continuation token, used to page through ad clients. To retrieve the next page, set this
       parameter to the value of "nextPageToken" from the previous response.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A continuation token, used to page through ad clients. To retrieve the next page, set
         * this parameter to the value of "nextPageToken" from the previous response.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Adunits collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code AdSenseHost adsensehost = new AdSenseHost(...);}
     *   {@code AdSenseHost.Adunits.List request = adsensehost.adunits().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Adunits adunits() {
      return new Adunits();
    }

    /**
     * The "adunits" collection of methods.
     */
    public class Adunits {

      /**
       * Delete the specified ad unit from the specified publisher AdSense account.
       *
       * Create a request for the method "adunits.delete".
       *
       * This request holds the parameters needed by the adsensehost server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param accountId Account which contains the ad unit.
       * @param adClientId Ad client for which to get ad unit.
       * @param adUnitId Ad unit to delete.
       * @return the request
       */
      public Delete delete(java.lang.String accountId, java.lang.String adClientId, java.lang.String adUnitId) throws java.io.IOException {
        Delete result = new Delete(accountId, adClientId, adUnitId);
        initialize(result);
        return result;
      }

      public class Delete extends AdSenseHostRequest<com.google.api.services.adsensehost.model.AdUnit> {

        private static final String REST_PATH = "accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}";

        /**
         * Delete the specified ad unit from the specified publisher AdSense account.
         *
         * Create a request for the method "adunits.delete".
         *
         * This request holds the parameters needed by the the adsensehost server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Account which contains the ad unit.
         * @param adClientId Ad client for which to get ad unit.
         * @param adUnitId Ad unit to delete.
         * @since 1.13
         */
        protected Delete(java.lang.String accountId, java.lang.String adClientId, java.lang.String adUnitId) {
          super(AdSenseHost.this, "DELETE", REST_PATH, null, com.google.api.services.adsensehost.model.AdUnit.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
          this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
          this.adUnitId = com.google.api.client.util.Preconditions.checkNotNull(adUnitId, "Required parameter adUnitId must be specified.");
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUserIp(java.lang.String userIp) {
          return (Delete) super.setUserIp(userIp);
        }

        /** Account which contains the ad unit. */
        @com.google.api.client.util.Key
        private java.lang.String accountId;

        /** Account which contains the ad unit.
         */
        public java.lang.String getAccountId() {
          return accountId;
        }

        /** Account which contains the ad unit. */
        public Delete setAccountId(java.lang.String accountId) {
          this.accountId = accountId;
          return this;
        }

        /** Ad client for which to get ad unit. */
        @com.google.api.client.util.Key
        private java.lang.String adClientId;

        /** Ad client for which to get ad unit.
         */
        public java.lang.String getAdClientId() {
          return adClientId;
        }

        /** Ad client for which to get ad unit. */
        public Delete setAdClientId(java.lang.String adClientId) {
          this.adClientId = adClientId;
          return this;
        }

        /** Ad unit to delete. */
        @com.google.api.client.util.Key
        private java.lang.String adUnitId;

        /** Ad unit to delete.
         */
        public java.lang.String getAdUnitId() {
          return adUnitId;
        }

        /** Ad unit to delete. */
        public Delete setAdUnitId(java.lang.String adUnitId) {
          this.adUnitId = adUnitId;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Get the specified host ad unit in this AdSense account.
       *
       * Create a request for the method "adunits.get".
       *
       * This request holds the parameters needed by the adsensehost server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param accountId Account which contains the ad unit.
       * @param adClientId Ad client for which to get ad unit.
       * @param adUnitId Ad unit to get.
       * @return the request
       */
      public Get get(java.lang.String accountId, java.lang.String adClientId, java.lang.String adUnitId) throws java.io.IOException {
        Get result = new Get(accountId, adClientId, adUnitId);
        initialize(result);
        return result;
      }

      public class Get extends AdSenseHostRequest<com.google.api.services.adsensehost.model.AdUnit> {

        private static final String REST_PATH = "accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}";

        /**
         * Get the specified host ad unit in this AdSense account.
         *
         * Create a request for the method "adunits.get".
         *
         * This request holds the parameters needed by the the adsensehost server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Account which contains the ad unit.
         * @param adClientId Ad client for which to get ad unit.
         * @param adUnitId Ad unit to get.
         * @since 1.13
         */
        protected Get(java.lang.String accountId, java.lang.String adClientId, java.lang.String adUnitId) {
          super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.AdUnit.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
          this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
          this.adUnitId = com.google.api.client.util.Preconditions.checkNotNull(adUnitId, "Required parameter adUnitId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUserIp(java.lang.String userIp) {
          return (Get) super.setUserIp(userIp);
        }

        /** Account which contains the ad unit. */
        @com.google.api.client.util.Key
        private java.lang.String accountId;

        /** Account which contains the ad unit.
         */
        public java.lang.String getAccountId() {
          return accountId;
        }

        /** Account which contains the ad unit. */
        public Get setAccountId(java.lang.String accountId) {
          this.accountId = accountId;
          return this;
        }

        /** Ad client for which to get ad unit. */
        @com.google.api.client.util.Key
        private java.lang.String adClientId;

        /** Ad client for which to get ad unit.
         */
        public java.lang.String getAdClientId() {
          return adClientId;
        }

        /** Ad client for which to get ad unit. */
        public Get setAdClientId(java.lang.String adClientId) {
          this.adClientId = adClientId;
          return this;
        }

        /** Ad unit to get. */
        @com.google.api.client.util.Key
        private java.lang.String adUnitId;

        /** Ad unit to get.
         */
        public java.lang.String getAdUnitId() {
          return adUnitId;
        }

        /** Ad unit to get. */
        public Get setAdUnitId(java.lang.String adUnitId) {
          this.adUnitId = adUnitId;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Get ad code for the specified ad unit, attaching the specified host custom channels.
       *
       * Create a request for the method "adunits.getAdCode".
       *
       * This request holds the parameters needed by the adsensehost server.  After setting any optional
       * parameters, call the {@link GetAdCode#execute()} method to invoke the remote operation.
       *
       * @param accountId Account which contains the ad client.
       * @param adClientId Ad client with contains the ad unit.
       * @param adUnitId Ad unit to get the code for.
       * @return the request
       */
      public GetAdCode getAdCode(java.lang.String accountId, java.lang.String adClientId, java.lang.String adUnitId) throws java.io.IOException {
        GetAdCode result = new GetAdCode(accountId, adClientId, adUnitId);
        initialize(result);
        return result;
      }

      public class GetAdCode extends AdSenseHostRequest<com.google.api.services.adsensehost.model.AdCode> {

        private static final String REST_PATH = "accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode";

        /**
         * Get ad code for the specified ad unit, attaching the specified host custom channels.
         *
         * Create a request for the method "adunits.getAdCode".
         *
         * This request holds the parameters needed by the the adsensehost server.  After setting any
         * optional parameters, call the {@link GetAdCode#execute()} method to invoke the remote
         * operation. <p> {@link
         * GetAdCode#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Account which contains the ad client.
         * @param adClientId Ad client with contains the ad unit.
         * @param adUnitId Ad unit to get the code for.
         * @since 1.13
         */
        protected GetAdCode(java.lang.String accountId, java.lang.String adClientId, java.lang.String adUnitId) {
          super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.AdCode.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
          this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
          this.adUnitId = com.google.api.client.util.Preconditions.checkNotNull(adUnitId, "Required parameter adUnitId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public GetAdCode setAlt(java.lang.String alt) {
          return (GetAdCode) super.setAlt(alt);
        }

        @Override
        public GetAdCode setFields(java.lang.String fields) {
          return (GetAdCode) super.setFields(fields);
        }

        @Override
        public GetAdCode setKey(java.lang.String key) {
          return (GetAdCode) super.setKey(key);
        }

        @Override
        public GetAdCode setOauthToken(java.lang.String oauthToken) {
          return (GetAdCode) super.setOauthToken(oauthToken);
        }

        @Override
        public GetAdCode setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (GetAdCode) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public GetAdCode setQuotaUser(java.lang.String quotaUser) {
          return (GetAdCode) super.setQuotaUser(quotaUser);
        }

        @Override
        public GetAdCode setUserIp(java.lang.String userIp) {
          return (GetAdCode) super.setUserIp(userIp);
        }

        /** Account which contains the ad client. */
        @com.google.api.client.util.Key
        private java.lang.String accountId;

        /** Account which contains the ad client.
         */
        public java.lang.String getAccountId() {
          return accountId;
        }

        /** Account which contains the ad client. */
        public GetAdCode setAccountId(java.lang.String accountId) {
          this.accountId = accountId;
          return this;
        }

        /** Ad client with contains the ad unit. */
        @com.google.api.client.util.Key
        private java.lang.String adClientId;

        /** Ad client with contains the ad unit.
         */
        public java.lang.String getAdClientId() {
          return adClientId;
        }

        /** Ad client with contains the ad unit. */
        public GetAdCode setAdClientId(java.lang.String adClientId) {
          this.adClientId = adClientId;
          return this;
        }

        /** Ad unit to get the code for. */
        @com.google.api.client.util.Key
        private java.lang.String adUnitId;

        /** Ad unit to get the code for.
         */
        public java.lang.String getAdUnitId() {
          return adUnitId;
        }

        /** Ad unit to get the code for. */
        public GetAdCode setAdUnitId(java.lang.String adUnitId) {
          this.adUnitId = adUnitId;
          return this;
        }

        /** Host custom channel to attach to the ad code. */
        @com.google.api.client.util.Key
        private java.util.List<java.lang.String> hostCustomChannelId;

        /** Host custom channel to attach to the ad code.
         */
        public java.util.List<java.lang.String> getHostCustomChannelId() {
          return hostCustomChannelId;
        }

        /** Host custom channel to attach to the ad code. */
        public GetAdCode setHostCustomChannelId(java.util.List<java.lang.String> hostCustomChannelId) {
          this.hostCustomChannelId = hostCustomChannelId;
          return this;
        }

        @Override
        public GetAdCode set(String parameterName, Object value) {
          return (GetAdCode) super.set(parameterName, value);
        }
      }
      /**
       * Insert the supplied ad unit into the specified publisher AdSense account.
       *
       * Create a request for the method "adunits.insert".
       *
       * This request holds the parameters needed by the adsensehost server.  After setting any optional
       * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       *
       * @param accountId Account which will contain the ad unit.
       * @param adClientId Ad client into which to insert the ad unit.
       * @param content the {@link com.google.api.services.adsensehost.model.AdUnit}
       * @return the request
       */
      public Insert insert(java.lang.String accountId, java.lang.String adClientId, com.google.api.services.adsensehost.model.AdUnit content) throws java.io.IOException {
        Insert result = new Insert(accountId, adClientId, content);
        initialize(result);
        return result;
      }

      public class Insert extends AdSenseHostRequest<com.google.api.services.adsensehost.model.AdUnit> {

        private static final String REST_PATH = "accounts/{accountId}/adclients/{adClientId}/adunits";

        /**
         * Insert the supplied ad unit into the specified publisher AdSense account.
         *
         * Create a request for the method "adunits.insert".
         *
         * This request holds the parameters needed by the the adsensehost server.  After setting any
         * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
         * <p> {@link
         * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Account which will contain the ad unit.
         * @param adClientId Ad client into which to insert the ad unit.
         * @param content the {@link com.google.api.services.adsensehost.model.AdUnit}
         * @since 1.13
         */
        protected Insert(java.lang.String accountId, java.lang.String adClientId, com.google.api.services.adsensehost.model.AdUnit content) {
          super(AdSenseHost.this, "POST", REST_PATH, content, com.google.api.services.adsensehost.model.AdUnit.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
          this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
        }

        @Override
        public Insert setAlt(java.lang.String alt) {
          return (Insert) super.setAlt(alt);
        }

        @Override
        public Insert setFields(java.lang.String fields) {
          return (Insert) super.setFields(fields);
        }

        @Override
        public Insert setKey(java.lang.String key) {
          return (Insert) super.setKey(key);
        }

        @Override
        public Insert setOauthToken(java.lang.String oauthToken) {
          return (Insert) super.setOauthToken(oauthToken);
        }

        @Override
        public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Insert) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Insert setQuotaUser(java.lang.String quotaUser) {
          return (Insert) super.setQuotaUser(quotaUser);
        }

        @Override
        public Insert setUserIp(java.lang.String userIp) {
          return (Insert) super.setUserIp(userIp);
        }

        /** Account which will contain the ad unit. */
        @com.google.api.client.util.Key
        private java.lang.String accountId;

        /** Account which will contain the ad unit.
         */
        public java.lang.String getAccountId() {
          return accountId;
        }

        /** Account which will contain the ad unit. */
        public Insert setAccountId(java.lang.String accountId) {
          this.accountId = accountId;
          return this;
        }

        /** Ad client into which to insert the ad unit. */
        @com.google.api.client.util.Key
        private java.lang.String adClientId;

        /** Ad client into which to insert the ad unit.
         */
        public java.lang.String getAdClientId() {
          return adClientId;
        }

        /** Ad client into which to insert the ad unit. */
        public Insert setAdClientId(java.lang.String adClientId) {
          this.adClientId = adClientId;
          return this;
        }

        @Override
        public Insert set(String parameterName, Object value) {
          return (Insert) super.set(parameterName, value);
        }
      }
      /**
       * List all ad units in the specified publisher's AdSense account.
       *
       * Create a request for the method "adunits.list".
       *
       * This request holds the parameters needed by the adsensehost server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param accountId Account which contains the ad client.
       * @param adClientId Ad client for which to list ad units.
       * @return the request
       */
      public List list(java.lang.String accountId, java.lang.String adClientId) throws java.io.IOException {
        List result = new List(accountId, adClientId);
        initialize(result);
        return result;
      }

      public class List extends AdSenseHostRequest<com.google.api.services.adsensehost.model.AdUnits> {

        private static final String REST_PATH = "accounts/{accountId}/adclients/{adClientId}/adunits";

        /**
         * List all ad units in the specified publisher's AdSense account.
         *
         * Create a request for the method "adunits.list".
         *
         * This request holds the parameters needed by the the adsensehost server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Account which contains the ad client.
         * @param adClientId Ad client for which to list ad units.
         * @since 1.13
         */
        protected List(java.lang.String accountId, java.lang.String adClientId) {
          super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.AdUnits.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
          this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        /** Account which contains the ad client. */
        @com.google.api.client.util.Key
        private java.lang.String accountId;

        /** Account which contains the ad client.
         */
        public java.lang.String getAccountId() {
          return accountId;
        }

        /** Account which contains the ad client. */
        public List setAccountId(java.lang.String accountId) {
          this.accountId = accountId;
          return this;
        }

        /** Ad client for which to list ad units. */
        @com.google.api.client.util.Key
        private java.lang.String adClientId;

        /** Ad client for which to list ad units.
         */
        public java.lang.String getAdClientId() {
          return adClientId;
        }

        /** Ad client for which to list ad units. */
        public List setAdClientId(java.lang.String adClientId) {
          this.adClientId = adClientId;
          return this;
        }

        /** Whether to include inactive ad units. Default: true. */
        @com.google.api.client.util.Key
        private java.lang.Boolean includeInactive;

        /** Whether to include inactive ad units. Default: true.
         */
        public java.lang.Boolean getIncludeInactive() {
          return includeInactive;
        }

        /** Whether to include inactive ad units. Default: true. */
        public List setIncludeInactive(java.lang.Boolean includeInactive) {
          this.includeInactive = includeInactive;
          return this;
        }

        /** The maximum number of ad units to include in the response, used for paging. */
        @com.google.api.client.util.Key
        private java.lang.Long maxResults;

        /** The maximum number of ad units to include in the response, used for paging.

       [minimum: 0] [maximum: 10000]
         */
        public java.lang.Long getMaxResults() {
          return maxResults;
        }

        /** The maximum number of ad units to include in the response, used for paging. */
        public List setMaxResults(java.lang.Long maxResults) {
          this.maxResults = maxResults;
          return this;
        }

        /**
         * A continuation token, used to page through ad units. To retrieve the next page, set this
         * parameter to the value of "nextPageToken" from the previous response.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A continuation token, used to page through ad units. To retrieve the next page, set this parameter
       to the value of "nextPageToken" from the previous response.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A continuation token, used to page through ad units. To retrieve the next page, set this
         * parameter to the value of "nextPageToken" from the previous response.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Update the supplied ad unit in the specified publisher AdSense account. This method supports
       * patch semantics.
       *
       * Create a request for the method "adunits.patch".
       *
       * This request holds the parameters needed by the adsensehost server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param accountId Account which contains the ad client.
       * @param adClientId Ad client which contains the ad unit.
       * @param adUnitId Ad unit to get.
       * @param content the {@link com.google.api.services.adsensehost.model.AdUnit}
       * @return the request
       */
      public Patch patch(java.lang.String accountId, java.lang.String adClientId, java.lang.String adUnitId, com.google.api.services.adsensehost.model.AdUnit content) throws java.io.IOException {
        Patch result = new Patch(accountId, adClientId, adUnitId, content);
        initialize(result);
        return result;
      }

      public class Patch extends AdSenseHostRequest<com.google.api.services.adsensehost.model.AdUnit> {

        private static final String REST_PATH = "accounts/{accountId}/adclients/{adClientId}/adunits";

        /**
         * Update the supplied ad unit in the specified publisher AdSense account. This method supports
         * patch semantics.
         *
         * Create a request for the method "adunits.patch".
         *
         * This request holds the parameters needed by the the adsensehost server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Account which contains the ad client.
         * @param adClientId Ad client which contains the ad unit.
         * @param adUnitId Ad unit to get.
         * @param content the {@link com.google.api.services.adsensehost.model.AdUnit}
         * @since 1.13
         */
        protected Patch(java.lang.String accountId, java.lang.String adClientId, java.lang.String adUnitId, com.google.api.services.adsensehost.model.AdUnit content) {
          super(AdSenseHost.this, "PATCH", REST_PATH, content, com.google.api.services.adsensehost.model.AdUnit.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
          this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
          this.adUnitId = com.google.api.client.util.Preconditions.checkNotNull(adUnitId, "Required parameter adUnitId must be specified.");
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUserIp(java.lang.String userIp) {
          return (Patch) super.setUserIp(userIp);
        }

        /** Account which contains the ad client. */
        @com.google.api.client.util.Key
        private java.lang.String accountId;

        /** Account which contains the ad client.
         */
        public java.lang.String getAccountId() {
          return accountId;
        }

        /** Account which contains the ad client. */
        public Patch setAccountId(java.lang.String accountId) {
          this.accountId = accountId;
          return this;
        }

        /** Ad client which contains the ad unit. */
        @com.google.api.client.util.Key
        private java.lang.String adClientId;

        /** Ad client which contains the ad unit.
         */
        public java.lang.String getAdClientId() {
          return adClientId;
        }

        /** Ad client which contains the ad unit. */
        public Patch setAdClientId(java.lang.String adClientId) {
          this.adClientId = adClientId;
          return this;
        }

        /** Ad unit to get. */
        @com.google.api.client.util.Key
        private java.lang.String adUnitId;

        /** Ad unit to get.
         */
        public java.lang.String getAdUnitId() {
          return adUnitId;
        }

        /** Ad unit to get. */
        public Patch setAdUnitId(java.lang.String adUnitId) {
          this.adUnitId = adUnitId;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }
      /**
       * Update the supplied ad unit in the specified publisher AdSense account.
       *
       * Create a request for the method "adunits.update".
       *
       * This request holds the parameters needed by the adsensehost server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * @param accountId Account which contains the ad client.
       * @param adClientId Ad client which contains the ad unit.
       * @param content the {@link com.google.api.services.adsensehost.model.AdUnit}
       * @return the request
       */
      public Update update(java.lang.String accountId, java.lang.String adClientId, com.google.api.services.adsensehost.model.AdUnit content) throws java.io.IOException {
        Update result = new Update(accountId, adClientId, content);
        initialize(result);
        return result;
      }

      public class Update extends AdSenseHostRequest<com.google.api.services.adsensehost.model.AdUnit> {

        private static final String REST_PATH = "accounts/{accountId}/adclients/{adClientId}/adunits";

        /**
         * Update the supplied ad unit in the specified publisher AdSense account.
         *
         * Create a request for the method "adunits.update".
         *
         * This request holds the parameters needed by the the adsensehost server.  After setting any
         * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
         * <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Account which contains the ad client.
         * @param adClientId Ad client which contains the ad unit.
         * @param content the {@link com.google.api.services.adsensehost.model.AdUnit}
         * @since 1.13
         */
        protected Update(java.lang.String accountId, java.lang.String adClientId, com.google.api.services.adsensehost.model.AdUnit content) {
          super(AdSenseHost.this, "PUT", REST_PATH, content, com.google.api.services.adsensehost.model.AdUnit.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
          this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
        }

        @Override
        public Update setAlt(java.lang.String alt) {
          return (Update) super.setAlt(alt);
        }

        @Override
        public Update setFields(java.lang.String fields) {
          return (Update) super.setFields(fields);
        }

        @Override
        public Update setKey(java.lang.String key) {
          return (Update) super.setKey(key);
        }

        @Override
        public Update setOauthToken(java.lang.String oauthToken) {
          return (Update) super.setOauthToken(oauthToken);
        }

        @Override
        public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Update) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Update setQuotaUser(java.lang.String quotaUser) {
          return (Update) super.setQuotaUser(quotaUser);
        }

        @Override
        public Update setUserIp(java.lang.String userIp) {
          return (Update) super.setUserIp(userIp);
        }

        /** Account which contains the ad client. */
        @com.google.api.client.util.Key
        private java.lang.String accountId;

        /** Account which contains the ad client.
         */
        public java.lang.String getAccountId() {
          return accountId;
        }

        /** Account which contains the ad client. */
        public Update setAccountId(java.lang.String accountId) {
          this.accountId = accountId;
          return this;
        }

        /** Ad client which contains the ad unit. */
        @com.google.api.client.util.Key
        private java.lang.String adClientId;

        /** Ad client which contains the ad unit.
         */
        public java.lang.String getAdClientId() {
          return adClientId;
        }

        /** Ad client which contains the ad unit. */
        public Update setAdClientId(java.lang.String adClientId) {
          this.adClientId = adClientId;
          return this;
        }

        @Override
        public Update set(String parameterName, Object value) {
          return (Update) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Reports collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code AdSenseHost adsensehost = new AdSenseHost(...);}
     *   {@code AdSenseHost.Reports.List request = adsensehost.reports().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Reports reports() {
      return new Reports();
    }

    /**
     * The "reports" collection of methods.
     */
    public class Reports {

      /**
       * Generate an AdSense report based on the report request sent in the query parameters. Returns the
       * result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
       *
       * Create a request for the method "reports.generate".
       *
       * This request holds the parameters needed by the adsensehost server.  After setting any optional
       * parameters, call the {@link Generate#execute()} method to invoke the remote operation.
       *
       * @param accountId Hosted account upon which to report.
       * @param startDate Start of the date range to report on in "YYYY-MM-DD" format, inclusive.
       * @param endDate End of the date range to report on in "YYYY-MM-DD" format, inclusive.
       * @return the request
       */
      public Generate generate(java.lang.String accountId, java.lang.String startDate, java.lang.String endDate) throws java.io.IOException {
        Generate result = new Generate(accountId, startDate, endDate);
        initialize(result);
        return result;
      }

      public class Generate extends AdSenseHostRequest<com.google.api.services.adsensehost.model.Report> {

        private static final String REST_PATH = "accounts/{accountId}/reports";

        private final java.util.regex.Pattern START_DATE_PATTERN =
            java.util.regex.Pattern.compile("\\d{4}-\\d{2}-\\d{2}|(today|startOfMonth|startOfYear)(([\\-\\+]\\d+[dwmy]){0,3}?)");

        private final java.util.regex.Pattern END_DATE_PATTERN =
            java.util.regex.Pattern.compile("\\d{4}-\\d{2}-\\d{2}|(today|startOfMonth|startOfYear)(([\\-\\+]\\d+[dwmy]){0,3}?)");

        private final java.util.regex.Pattern DIMENSION_PATTERN =
            java.util.regex.Pattern.compile("[a-zA-Z_]+");

        private final java.util.regex.Pattern FILTER_PATTERN =
            java.util.regex.Pattern.compile("[a-zA-Z_]+(==|=@).+");

        private final java.util.regex.Pattern LOCALE_PATTERN =
            java.util.regex.Pattern.compile("[a-zA-Z_]+");

        private final java.util.regex.Pattern METRIC_PATTERN =
            java.util.regex.Pattern.compile("[a-zA-Z_]+");

        private final java.util.regex.Pattern SORT_PATTERN =
            java.util.regex.Pattern.compile("(\\+|-)?[a-zA-Z_]+");

        /**
         * Generate an AdSense report based on the report request sent in the query parameters. Returns
         * the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
         *
         * Create a request for the method "reports.generate".
         *
         * This request holds the parameters needed by the the adsensehost server.  After setting any
         * optional parameters, call the {@link Generate#execute()} method to invoke the remote operation.
         * <p> {@link
         * Generate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param accountId Hosted account upon which to report.
         * @param startDate Start of the date range to report on in "YYYY-MM-DD" format, inclusive.
         * @param endDate End of the date range to report on in "YYYY-MM-DD" format, inclusive.
         * @since 1.13
         */
        protected Generate(java.lang.String accountId, java.lang.String startDate, java.lang.String endDate) {
          super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.Report.class);
          this.accountId = com.google.api.client.util.Preconditions.checkNotNull(accountId, "Required parameter accountId must be specified.");
          this.startDate = com.google.api.client.util.Preconditions.checkNotNull(startDate, "Required parameter startDate must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(START_DATE_PATTERN.matcher(startDate).matches(),
                "Parameter startDate must conform to the pattern " +
                "\\d{4}-\\d{2}-\\d{2}|(today|startOfMonth|startOfYear)(([\\-\\+]\\d+[dwmy]){0,3}?)");
          }
          this.endDate = com.google.api.client.util.Preconditions.checkNotNull(endDate, "Required parameter endDate must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(END_DATE_PATTERN.matcher(endDate).matches(),
                "Parameter endDate must conform to the pattern " +
                "\\d{4}-\\d{2}-\\d{2}|(today|startOfMonth|startOfYear)(([\\-\\+]\\d+[dwmy]){0,3}?)");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Generate setAlt(java.lang.String alt) {
          return (Generate) super.setAlt(alt);
        }

        @Override
        public Generate setFields(java.lang.String fields) {
          return (Generate) super.setFields(fields);
        }

        @Override
        public Generate setKey(java.lang.String key) {
          return (Generate) super.setKey(key);
        }

        @Override
        public Generate setOauthToken(java.lang.String oauthToken) {
          return (Generate) super.setOauthToken(oauthToken);
        }

        @Override
        public Generate setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Generate) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Generate setQuotaUser(java.lang.String quotaUser) {
          return (Generate) super.setQuotaUser(quotaUser);
        }

        @Override
        public Generate setUserIp(java.lang.String userIp) {
          return (Generate) super.setUserIp(userIp);
        }

        /** Hosted account upon which to report. */
        @com.google.api.client.util.Key
        private java.lang.String accountId;

        /** Hosted account upon which to report.
         */
        public java.lang.String getAccountId() {
          return accountId;
        }

        /** Hosted account upon which to report. */
        public Generate setAccountId(java.lang.String accountId) {
          this.accountId = accountId;
          return this;
        }

        /** Start of the date range to report on in "YYYY-MM-DD" format, inclusive. */
        @com.google.api.client.util.Key
        private java.lang.String startDate;

        /** Start of the date range to report on in "YYYY-MM-DD" format, inclusive.
         */
        public java.lang.String getStartDate() {
          return startDate;
        }

        /** Start of the date range to report on in "YYYY-MM-DD" format, inclusive. */
        public Generate setStartDate(java.lang.String startDate) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(START_DATE_PATTERN.matcher(startDate).matches(),
                "Parameter startDate must conform to the pattern " +
                "\\d{4}-\\d{2}-\\d{2}|(today|startOfMonth|startOfYear)(([\\-\\+]\\d+[dwmy]){0,3}?)");
          }
          this.startDate = startDate;
          return this;
        }

        /** End of the date range to report on in "YYYY-MM-DD" format, inclusive. */
        @com.google.api.client.util.Key
        private java.lang.String endDate;

        /** End of the date range to report on in "YYYY-MM-DD" format, inclusive.
         */
        public java.lang.String getEndDate() {
          return endDate;
        }

        /** End of the date range to report on in "YYYY-MM-DD" format, inclusive. */
        public Generate setEndDate(java.lang.String endDate) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(END_DATE_PATTERN.matcher(endDate).matches(),
                "Parameter endDate must conform to the pattern " +
                "\\d{4}-\\d{2}-\\d{2}|(today|startOfMonth|startOfYear)(([\\-\\+]\\d+[dwmy]){0,3}?)");
          }
          this.endDate = endDate;
          return this;
        }

        /** Dimensions to base the report on. */
        @com.google.api.client.util.Key
        private java.util.List<java.lang.String> dimension;

        /** Dimensions to base the report on.
         */
        public java.util.List<java.lang.String> getDimension() {
          return dimension;
        }

        /** Dimensions to base the report on. */
        public Generate setDimension(java.util.List<java.lang.String> dimension) {
          if (!getSuppressPatternChecks()) {
            for (String dimensionElem : dimension) {
              com.google.api.client.util.Preconditions.checkArgument(DIMENSION_PATTERN.matcher(dimensionElem).matches(),
                  "Parameter dimension elements must conform to the pattern " +
                  "[a-zA-Z_]+");
            }
          }
          this.dimension = dimension;
          return this;
        }

        /** Filters to be run on the report. */
        @com.google.api.client.util.Key
        private java.util.List<java.lang.String> filter;

        /** Filters to be run on the report.
         */
        public java.util.List<java.lang.String> getFilter() {
          return filter;
        }

        /** Filters to be run on the report. */
        public Generate setFilter(java.util.List<java.lang.String> filter) {
          if (!getSuppressPatternChecks()) {
            for (String filterElem : filter) {
              com.google.api.client.util.Preconditions.checkArgument(FILTER_PATTERN.matcher(filterElem).matches(),
                  "Parameter filter elements must conform to the pattern " +
                  "[a-zA-Z_]+(==|=@).+");
            }
          }
          this.filter = filter;
          return this;
        }

        /**
         * Optional locale to use for translating report output to a local language. Defaults to
         * "en_US" if not specified.
         */
        @com.google.api.client.util.Key
        private java.lang.String locale;

        /** Optional locale to use for translating report output to a local language. Defaults to "en_US" if
       not specified.
         */
        public java.lang.String getLocale() {
          return locale;
        }

        /**
         * Optional locale to use for translating report output to a local language. Defaults to
         * "en_US" if not specified.
         */
        public Generate setLocale(java.lang.String locale) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(LOCALE_PATTERN.matcher(locale).matches(),
                "Parameter locale must conform to the pattern " +
                "[a-zA-Z_]+");
          }
          this.locale = locale;
          return this;
        }

        /** The maximum number of rows of report data to return. */
        @com.google.api.client.util.Key
        private java.lang.Long maxResults;

        /** The maximum number of rows of report data to return.

       [minimum: 0] [maximum: 50000]
         */
        public java.lang.Long getMaxResults() {
          return maxResults;
        }

        /** The maximum number of rows of report data to return. */
        public Generate setMaxResults(java.lang.Long maxResults) {
          this.maxResults = maxResults;
          return this;
        }

        /** Numeric columns to include in the report. */
        @com.google.api.client.util.Key
        private java.util.List<java.lang.String> metric;

        /** Numeric columns to include in the report.
         */
        public java.util.List<java.lang.String> getMetric() {
          return metric;
        }

        /** Numeric columns to include in the report. */
        public Generate setMetric(java.util.List<java.lang.String> metric) {
          if (!getSuppressPatternChecks()) {
            for (String metricElem : metric) {
              com.google.api.client.util.Preconditions.checkArgument(METRIC_PATTERN.matcher(metricElem).matches(),
                  "Parameter metric elements must conform to the pattern " +
                  "[a-zA-Z_]+");
            }
          }
          this.metric = metric;
          return this;
        }

        /**
         * The name of a dimension or metric to sort the resulting report on, optionally prefixed
         * with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the
         * column is sorted ascending.
         */
        @com.google.api.client.util.Key
        private java.util.List<java.lang.String> sort;

        /** The name of a dimension or metric to sort the resulting report on, optionally prefixed with "+" to
       sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted
       ascending.
         */
        public java.util.List<java.lang.String> getSort() {
          return sort;
        }

        /**
         * The name of a dimension or metric to sort the resulting report on, optionally prefixed
         * with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the
         * column is sorted ascending.
         */
        public Generate setSort(java.util.List<java.lang.String> sort) {
          if (!getSuppressPatternChecks()) {
            for (String sortElem : sort) {
              com.google.api.client.util.Preconditions.checkArgument(SORT_PATTERN.matcher(sortElem).matches(),
                  "Parameter sort elements must conform to the pattern " +
                  "(\\+|-)?[a-zA-Z_]+");
            }
          }
          this.sort = sort;
          return this;
        }

        /** Index of the first row of report data to return. */
        @com.google.api.client.util.Key
        private java.lang.Long startIndex;

        /** Index of the first row of report data to return.

       [minimum: 0] [maximum: 5000]
         */
        public java.lang.Long getStartIndex() {
          return startIndex;
        }

        /** Index of the first row of report data to return. */
        public Generate setStartIndex(java.lang.Long startIndex) {
          this.startIndex = startIndex;
          return this;
        }

        @Override
        public Generate set(String parameterName, Object value) {
          return (Generate) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Adclients collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdSenseHost adsensehost = new AdSenseHost(...);}
   *   {@code AdSenseHost.Adclients.List request = adsensehost.adclients().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Adclients adclients() {
    return new Adclients();
  }

  /**
   * The "adclients" collection of methods.
   */
  public class Adclients {

    /**
     * Get information about one of the ad clients in the Host AdSense account.
     *
     * Create a request for the method "adclients.get".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param adClientId Ad client to get.
     * @return the request
     */
    public Get get(java.lang.String adClientId) throws java.io.IOException {
      Get result = new Get(adClientId);
      initialize(result);
      return result;
    }

    public class Get extends AdSenseHostRequest<com.google.api.services.adsensehost.model.AdClient> {

      private static final String REST_PATH = "adclients/{adClientId}";

      /**
       * Get information about one of the ad clients in the Host AdSense account.
       *
       * Create a request for the method "adclients.get".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param adClientId Ad client to get.
       * @since 1.13
       */
      protected Get(java.lang.String adClientId) {
        super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.AdClient.class);
        this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Ad client to get. */
      @com.google.api.client.util.Key
      private java.lang.String adClientId;

      /** Ad client to get.
       */
      public java.lang.String getAdClientId() {
        return adClientId;
      }

      /** Ad client to get. */
      public Get setAdClientId(java.lang.String adClientId) {
        this.adClientId = adClientId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * List all host ad clients in this AdSense account.
     *
     * Create a request for the method "adclients.list".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends AdSenseHostRequest<com.google.api.services.adsensehost.model.AdClients> {

      private static final String REST_PATH = "adclients";

      /**
       * List all host ad clients in this AdSense account.
       *
       * Create a request for the method "adclients.list".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.AdClients.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** The maximum number of ad clients to include in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of ad clients to include in the response, used for paging.

     [minimum: 0] [maximum: 10000]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of ad clients to include in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * A continuation token, used to page through ad clients. To retrieve the next page, set this
       * parameter to the value of "nextPageToken" from the previous response.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** A continuation token, used to page through ad clients. To retrieve the next page, set this
     parameter to the value of "nextPageToken" from the previous response.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * A continuation token, used to page through ad clients. To retrieve the next page, set this
       * parameter to the value of "nextPageToken" from the previous response.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Associationsessions collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdSenseHost adsensehost = new AdSenseHost(...);}
   *   {@code AdSenseHost.Associationsessions.List request = adsensehost.associationsessions().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Associationsessions associationsessions() {
    return new Associationsessions();
  }

  /**
   * The "associationsessions" collection of methods.
   */
  public class Associationsessions {

    /**
     * Create an association session for initiating an association with an AdSense user.
     *
     * Create a request for the method "associationsessions.start".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link Start#execute()} method to invoke the remote operation.
     *
     * @param productCode Products to associate with the user.
     * @param websiteUrl The URL of the user's hosted website.
     * @return the request
     */
    public Start start(java.util.List<java.lang.String> productCode, java.lang.String websiteUrl) throws java.io.IOException {
      Start result = new Start(productCode, websiteUrl);
      initialize(result);
      return result;
    }

    public class Start extends AdSenseHostRequest<com.google.api.services.adsensehost.model.AssociationSession> {

      private static final String REST_PATH = "associationsessions/start";

      /**
       * Create an association session for initiating an association with an AdSense user.
       *
       * Create a request for the method "associationsessions.start".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link Start#execute()} method to invoke the remote operation.
       * <p> {@link
       * Start#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param productCode Products to associate with the user.
       * @param websiteUrl The URL of the user's hosted website.
       * @since 1.13
       */
      protected Start(java.util.List<java.lang.String> productCode, java.lang.String websiteUrl) {
        super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.AssociationSession.class);
        this.productCode = com.google.api.client.util.Preconditions.checkNotNull(productCode, "Required parameter productCode must be specified.");
        this.websiteUrl = com.google.api.client.util.Preconditions.checkNotNull(websiteUrl, "Required parameter websiteUrl must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Start setAlt(java.lang.String alt) {
        return (Start) super.setAlt(alt);
      }

      @Override
      public Start setFields(java.lang.String fields) {
        return (Start) super.setFields(fields);
      }

      @Override
      public Start setKey(java.lang.String key) {
        return (Start) super.setKey(key);
      }

      @Override
      public Start setOauthToken(java.lang.String oauthToken) {
        return (Start) super.setOauthToken(oauthToken);
      }

      @Override
      public Start setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Start) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Start setQuotaUser(java.lang.String quotaUser) {
        return (Start) super.setQuotaUser(quotaUser);
      }

      @Override
      public Start setUserIp(java.lang.String userIp) {
        return (Start) super.setUserIp(userIp);
      }

      /** Products to associate with the user. */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> productCode;

      /** Products to associate with the user.
       */
      public java.util.List<java.lang.String> getProductCode() {
        return productCode;
      }

      /** Products to associate with the user. */
      public Start setProductCode(java.util.List<java.lang.String> productCode) {
        this.productCode = productCode;
        return this;
      }

      /** The URL of the user's hosted website. */
      @com.google.api.client.util.Key
      private java.lang.String websiteUrl;

      /** The URL of the user's hosted website.
       */
      public java.lang.String getWebsiteUrl() {
        return websiteUrl;
      }

      /** The URL of the user's hosted website. */
      public Start setWebsiteUrl(java.lang.String websiteUrl) {
        this.websiteUrl = websiteUrl;
        return this;
      }

      /** The preferred locale of the user. */
      @com.google.api.client.util.Key
      private java.lang.String userLocale;

      /** The preferred locale of the user.
       */
      public java.lang.String getUserLocale() {
        return userLocale;
      }

      /** The preferred locale of the user. */
      public Start setUserLocale(java.lang.String userLocale) {
        this.userLocale = userLocale;
        return this;
      }

      /** The locale of the user's hosted website. */
      @com.google.api.client.util.Key
      private java.lang.String websiteLocale;

      /** The locale of the user's hosted website.
       */
      public java.lang.String getWebsiteLocale() {
        return websiteLocale;
      }

      /** The locale of the user's hosted website. */
      public Start setWebsiteLocale(java.lang.String websiteLocale) {
        this.websiteLocale = websiteLocale;
        return this;
      }

      @Override
      public Start set(String parameterName, Object value) {
        return (Start) super.set(parameterName, value);
      }
    }
    /**
     * Verify an association session after the association callback returns from AdSense signup.
     *
     * Create a request for the method "associationsessions.verify".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link Verify#execute()} method to invoke the remote operation.
     *
     * @param token The token returned to the association callback URL.
     * @return the request
     */
    public Verify verify(java.lang.String token) throws java.io.IOException {
      Verify result = new Verify(token);
      initialize(result);
      return result;
    }

    public class Verify extends AdSenseHostRequest<com.google.api.services.adsensehost.model.AssociationSession> {

      private static final String REST_PATH = "associationsessions/verify";

      /**
       * Verify an association session after the association callback returns from AdSense signup.
       *
       * Create a request for the method "associationsessions.verify".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link Verify#execute()} method to invoke the remote operation.
       * <p> {@link
       * Verify#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param token The token returned to the association callback URL.
       * @since 1.13
       */
      protected Verify(java.lang.String token) {
        super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.AssociationSession.class);
        this.token = com.google.api.client.util.Preconditions.checkNotNull(token, "Required parameter token must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Verify setAlt(java.lang.String alt) {
        return (Verify) super.setAlt(alt);
      }

      @Override
      public Verify setFields(java.lang.String fields) {
        return (Verify) super.setFields(fields);
      }

      @Override
      public Verify setKey(java.lang.String key) {
        return (Verify) super.setKey(key);
      }

      @Override
      public Verify setOauthToken(java.lang.String oauthToken) {
        return (Verify) super.setOauthToken(oauthToken);
      }

      @Override
      public Verify setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Verify) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Verify setQuotaUser(java.lang.String quotaUser) {
        return (Verify) super.setQuotaUser(quotaUser);
      }

      @Override
      public Verify setUserIp(java.lang.String userIp) {
        return (Verify) super.setUserIp(userIp);
      }

      /** The token returned to the association callback URL. */
      @com.google.api.client.util.Key
      private java.lang.String token;

      /** The token returned to the association callback URL.
       */
      public java.lang.String getToken() {
        return token;
      }

      /** The token returned to the association callback URL. */
      public Verify setToken(java.lang.String token) {
        this.token = token;
        return this;
      }

      @Override
      public Verify set(String parameterName, Object value) {
        return (Verify) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Customchannels collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdSenseHost adsensehost = new AdSenseHost(...);}
   *   {@code AdSenseHost.Customchannels.List request = adsensehost.customchannels().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Customchannels customchannels() {
    return new Customchannels();
  }

  /**
   * The "customchannels" collection of methods.
   */
  public class Customchannels {

    /**
     * Delete a specific custom channel from the host AdSense account.
     *
     * Create a request for the method "customchannels.delete".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param adClientId Ad client from which to delete the custom channel.
     * @param customChannelId Custom channel to delete.
     * @return the request
     */
    public Delete delete(java.lang.String adClientId, java.lang.String customChannelId) throws java.io.IOException {
      Delete result = new Delete(adClientId, customChannelId);
      initialize(result);
      return result;
    }

    public class Delete extends AdSenseHostRequest<com.google.api.services.adsensehost.model.CustomChannel> {

      private static final String REST_PATH = "adclients/{adClientId}/customchannels/{customChannelId}";

      /**
       * Delete a specific custom channel from the host AdSense account.
       *
       * Create a request for the method "customchannels.delete".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param adClientId Ad client from which to delete the custom channel.
       * @param customChannelId Custom channel to delete.
       * @since 1.13
       */
      protected Delete(java.lang.String adClientId, java.lang.String customChannelId) {
        super(AdSenseHost.this, "DELETE", REST_PATH, null, com.google.api.services.adsensehost.model.CustomChannel.class);
        this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
        this.customChannelId = com.google.api.client.util.Preconditions.checkNotNull(customChannelId, "Required parameter customChannelId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** Ad client from which to delete the custom channel. */
      @com.google.api.client.util.Key
      private java.lang.String adClientId;

      /** Ad client from which to delete the custom channel.
       */
      public java.lang.String getAdClientId() {
        return adClientId;
      }

      /** Ad client from which to delete the custom channel. */
      public Delete setAdClientId(java.lang.String adClientId) {
        this.adClientId = adClientId;
        return this;
      }

      /** Custom channel to delete. */
      @com.google.api.client.util.Key
      private java.lang.String customChannelId;

      /** Custom channel to delete.
       */
      public java.lang.String getCustomChannelId() {
        return customChannelId;
      }

      /** Custom channel to delete. */
      public Delete setCustomChannelId(java.lang.String customChannelId) {
        this.customChannelId = customChannelId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Get a specific custom channel from the host AdSense account.
     *
     * Create a request for the method "customchannels.get".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param adClientId Ad client from which to get the custom channel.
     * @param customChannelId Custom channel to get.
     * @return the request
     */
    public Get get(java.lang.String adClientId, java.lang.String customChannelId) throws java.io.IOException {
      Get result = new Get(adClientId, customChannelId);
      initialize(result);
      return result;
    }

    public class Get extends AdSenseHostRequest<com.google.api.services.adsensehost.model.CustomChannel> {

      private static final String REST_PATH = "adclients/{adClientId}/customchannels/{customChannelId}";

      /**
       * Get a specific custom channel from the host AdSense account.
       *
       * Create a request for the method "customchannels.get".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
       * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param adClientId Ad client from which to get the custom channel.
       * @param customChannelId Custom channel to get.
       * @since 1.13
       */
      protected Get(java.lang.String adClientId, java.lang.String customChannelId) {
        super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.CustomChannel.class);
        this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
        this.customChannelId = com.google.api.client.util.Preconditions.checkNotNull(customChannelId, "Required parameter customChannelId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      /** Ad client from which to get the custom channel. */
      @com.google.api.client.util.Key
      private java.lang.String adClientId;

      /** Ad client from which to get the custom channel.
       */
      public java.lang.String getAdClientId() {
        return adClientId;
      }

      /** Ad client from which to get the custom channel. */
      public Get setAdClientId(java.lang.String adClientId) {
        this.adClientId = adClientId;
        return this;
      }

      /** Custom channel to get. */
      @com.google.api.client.util.Key
      private java.lang.String customChannelId;

      /** Custom channel to get.
       */
      public java.lang.String getCustomChannelId() {
        return customChannelId;
      }

      /** Custom channel to get. */
      public Get setCustomChannelId(java.lang.String customChannelId) {
        this.customChannelId = customChannelId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Add a new custom channel to the host AdSense account.
     *
     * Create a request for the method "customchannels.insert".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param adClientId Ad client to which the new custom channel will be added.
     * @param content the {@link com.google.api.services.adsensehost.model.CustomChannel}
     * @return the request
     */
    public Insert insert(java.lang.String adClientId, com.google.api.services.adsensehost.model.CustomChannel content) throws java.io.IOException {
      Insert result = new Insert(adClientId, content);
      initialize(result);
      return result;
    }

    public class Insert extends AdSenseHostRequest<com.google.api.services.adsensehost.model.CustomChannel> {

      private static final String REST_PATH = "adclients/{adClientId}/customchannels";

      /**
       * Add a new custom channel to the host AdSense account.
       *
       * Create a request for the method "customchannels.insert".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param adClientId Ad client to which the new custom channel will be added.
       * @param content the {@link com.google.api.services.adsensehost.model.CustomChannel}
       * @since 1.13
       */
      protected Insert(java.lang.String adClientId, com.google.api.services.adsensehost.model.CustomChannel content) {
        super(AdSenseHost.this, "POST", REST_PATH, content, com.google.api.services.adsensehost.model.CustomChannel.class);
        this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** Ad client to which the new custom channel will be added. */
      @com.google.api.client.util.Key
      private java.lang.String adClientId;

      /** Ad client to which the new custom channel will be added.
       */
      public java.lang.String getAdClientId() {
        return adClientId;
      }

      /** Ad client to which the new custom channel will be added. */
      public Insert setAdClientId(java.lang.String adClientId) {
        this.adClientId = adClientId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * List all host custom channels in this AdSense account.
     *
     * Create a request for the method "customchannels.list".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param adClientId Ad client for which to list custom channels.
     * @return the request
     */
    public List list(java.lang.String adClientId) throws java.io.IOException {
      List result = new List(adClientId);
      initialize(result);
      return result;
    }

    public class List extends AdSenseHostRequest<com.google.api.services.adsensehost.model.CustomChannels> {

      private static final String REST_PATH = "adclients/{adClientId}/customchannels";

      /**
       * List all host custom channels in this AdSense account.
       *
       * Create a request for the method "customchannels.list".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param adClientId Ad client for which to list custom channels.
       * @since 1.13
       */
      protected List(java.lang.String adClientId) {
        super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.CustomChannels.class);
        this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** Ad client for which to list custom channels. */
      @com.google.api.client.util.Key
      private java.lang.String adClientId;

      /** Ad client for which to list custom channels.
       */
      public java.lang.String getAdClientId() {
        return adClientId;
      }

      /** Ad client for which to list custom channels. */
      public List setAdClientId(java.lang.String adClientId) {
        this.adClientId = adClientId;
        return this;
      }

      /** The maximum number of custom channels to include in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of custom channels to include in the response, used for paging.

     [minimum: 0] [maximum: 10000]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of custom channels to include in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * A continuation token, used to page through custom channels. To retrieve the next page, set
       * this parameter to the value of "nextPageToken" from the previous response.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** A continuation token, used to page through custom channels. To retrieve the next page, set this
     parameter to the value of "nextPageToken" from the previous response.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * A continuation token, used to page through custom channels. To retrieve the next page, set
       * this parameter to the value of "nextPageToken" from the previous response.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Update a custom channel in the host AdSense account. This method supports patch semantics.
     *
     * Create a request for the method "customchannels.patch".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param adClientId Ad client in which the custom channel will be updated.
     * @param customChannelId Custom channel to get.
     * @param content the {@link com.google.api.services.adsensehost.model.CustomChannel}
     * @return the request
     */
    public Patch patch(java.lang.String adClientId, java.lang.String customChannelId, com.google.api.services.adsensehost.model.CustomChannel content) throws java.io.IOException {
      Patch result = new Patch(adClientId, customChannelId, content);
      initialize(result);
      return result;
    }

    public class Patch extends AdSenseHostRequest<com.google.api.services.adsensehost.model.CustomChannel> {

      private static final String REST_PATH = "adclients/{adClientId}/customchannels";

      /**
       * Update a custom channel in the host AdSense account. This method supports patch semantics.
       *
       * Create a request for the method "customchannels.patch".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       * <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param adClientId Ad client in which the custom channel will be updated.
       * @param customChannelId Custom channel to get.
       * @param content the {@link com.google.api.services.adsensehost.model.CustomChannel}
       * @since 1.13
       */
      protected Patch(java.lang.String adClientId, java.lang.String customChannelId, com.google.api.services.adsensehost.model.CustomChannel content) {
        super(AdSenseHost.this, "PATCH", REST_PATH, content, com.google.api.services.adsensehost.model.CustomChannel.class);
        this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
        this.customChannelId = com.google.api.client.util.Preconditions.checkNotNull(customChannelId, "Required parameter customChannelId must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      /** Ad client in which the custom channel will be updated. */
      @com.google.api.client.util.Key
      private java.lang.String adClientId;

      /** Ad client in which the custom channel will be updated.
       */
      public java.lang.String getAdClientId() {
        return adClientId;
      }

      /** Ad client in which the custom channel will be updated. */
      public Patch setAdClientId(java.lang.String adClientId) {
        this.adClientId = adClientId;
        return this;
      }

      /** Custom channel to get. */
      @com.google.api.client.util.Key
      private java.lang.String customChannelId;

      /** Custom channel to get.
       */
      public java.lang.String getCustomChannelId() {
        return customChannelId;
      }

      /** Custom channel to get. */
      public Patch setCustomChannelId(java.lang.String customChannelId) {
        this.customChannelId = customChannelId;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Update a custom channel in the host AdSense account.
     *
     * Create a request for the method "customchannels.update".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param adClientId Ad client in which the custom channel will be updated.
     * @param content the {@link com.google.api.services.adsensehost.model.CustomChannel}
     * @return the request
     */
    public Update update(java.lang.String adClientId, com.google.api.services.adsensehost.model.CustomChannel content) throws java.io.IOException {
      Update result = new Update(adClientId, content);
      initialize(result);
      return result;
    }

    public class Update extends AdSenseHostRequest<com.google.api.services.adsensehost.model.CustomChannel> {

      private static final String REST_PATH = "adclients/{adClientId}/customchannels";

      /**
       * Update a custom channel in the host AdSense account.
       *
       * Create a request for the method "customchannels.update".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       * <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param adClientId Ad client in which the custom channel will be updated.
       * @param content the {@link com.google.api.services.adsensehost.model.CustomChannel}
       * @since 1.13
       */
      protected Update(java.lang.String adClientId, com.google.api.services.adsensehost.model.CustomChannel content) {
        super(AdSenseHost.this, "PUT", REST_PATH, content, com.google.api.services.adsensehost.model.CustomChannel.class);
        this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      /** Ad client in which the custom channel will be updated. */
      @com.google.api.client.util.Key
      private java.lang.String adClientId;

      /** Ad client in which the custom channel will be updated.
       */
      public java.lang.String getAdClientId() {
        return adClientId;
      }

      /** Ad client in which the custom channel will be updated. */
      public Update setAdClientId(java.lang.String adClientId) {
        this.adClientId = adClientId;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Reports collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdSenseHost adsensehost = new AdSenseHost(...);}
   *   {@code AdSenseHost.Reports.List request = adsensehost.reports().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Reports reports() {
    return new Reports();
  }

  /**
   * The "reports" collection of methods.
   */
  public class Reports {

    /**
     * Generate an AdSense report based on the report request sent in the query parameters. Returns the
     * result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
     *
     * Create a request for the method "reports.generate".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link Generate#execute()} method to invoke the remote operation.
     *
     * @param startDate Start of the date range to report on in "YYYY-MM-DD" format, inclusive.
     * @param endDate End of the date range to report on in "YYYY-MM-DD" format, inclusive.
     * @return the request
     */
    public Generate generate(java.lang.String startDate, java.lang.String endDate) throws java.io.IOException {
      Generate result = new Generate(startDate, endDate);
      initialize(result);
      return result;
    }

    public class Generate extends AdSenseHostRequest<com.google.api.services.adsensehost.model.Report> {

      private static final String REST_PATH = "reports";

      private final java.util.regex.Pattern START_DATE_PATTERN =
          java.util.regex.Pattern.compile("\\d{4}-\\d{2}-\\d{2}|(today|startOfMonth|startOfYear)(([\\-\\+]\\d+[dwmy]){0,3}?)");

      private final java.util.regex.Pattern END_DATE_PATTERN =
          java.util.regex.Pattern.compile("\\d{4}-\\d{2}-\\d{2}|(today|startOfMonth|startOfYear)(([\\-\\+]\\d+[dwmy]){0,3}?)");

      private final java.util.regex.Pattern DIMENSION_PATTERN =
          java.util.regex.Pattern.compile("[a-zA-Z_]+");

      private final java.util.regex.Pattern FILTER_PATTERN =
          java.util.regex.Pattern.compile("[a-zA-Z_]+(==|=@).+");

      private final java.util.regex.Pattern LOCALE_PATTERN =
          java.util.regex.Pattern.compile("[a-zA-Z_]+");

      private final java.util.regex.Pattern METRIC_PATTERN =
          java.util.regex.Pattern.compile("[a-zA-Z_]+");

      private final java.util.regex.Pattern SORT_PATTERN =
          java.util.regex.Pattern.compile("(\\+|-)?[a-zA-Z_]+");

      /**
       * Generate an AdSense report based on the report request sent in the query parameters. Returns
       * the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
       *
       * Create a request for the method "reports.generate".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link Generate#execute()} method to invoke the remote operation.
       * <p> {@link
       * Generate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param startDate Start of the date range to report on in "YYYY-MM-DD" format, inclusive.
       * @param endDate End of the date range to report on in "YYYY-MM-DD" format, inclusive.
       * @since 1.13
       */
      protected Generate(java.lang.String startDate, java.lang.String endDate) {
        super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.Report.class);
        this.startDate = com.google.api.client.util.Preconditions.checkNotNull(startDate, "Required parameter startDate must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(START_DATE_PATTERN.matcher(startDate).matches(),
              "Parameter startDate must conform to the pattern " +
              "\\d{4}-\\d{2}-\\d{2}|(today|startOfMonth|startOfYear)(([\\-\\+]\\d+[dwmy]){0,3}?)");
        }
        this.endDate = com.google.api.client.util.Preconditions.checkNotNull(endDate, "Required parameter endDate must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(END_DATE_PATTERN.matcher(endDate).matches(),
              "Parameter endDate must conform to the pattern " +
              "\\d{4}-\\d{2}-\\d{2}|(today|startOfMonth|startOfYear)(([\\-\\+]\\d+[dwmy]){0,3}?)");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Generate setAlt(java.lang.String alt) {
        return (Generate) super.setAlt(alt);
      }

      @Override
      public Generate setFields(java.lang.String fields) {
        return (Generate) super.setFields(fields);
      }

      @Override
      public Generate setKey(java.lang.String key) {
        return (Generate) super.setKey(key);
      }

      @Override
      public Generate setOauthToken(java.lang.String oauthToken) {
        return (Generate) super.setOauthToken(oauthToken);
      }

      @Override
      public Generate setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Generate) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Generate setQuotaUser(java.lang.String quotaUser) {
        return (Generate) super.setQuotaUser(quotaUser);
      }

      @Override
      public Generate setUserIp(java.lang.String userIp) {
        return (Generate) super.setUserIp(userIp);
      }

      /** Start of the date range to report on in "YYYY-MM-DD" format, inclusive. */
      @com.google.api.client.util.Key
      private java.lang.String startDate;

      /** Start of the date range to report on in "YYYY-MM-DD" format, inclusive.
       */
      public java.lang.String getStartDate() {
        return startDate;
      }

      /** Start of the date range to report on in "YYYY-MM-DD" format, inclusive. */
      public Generate setStartDate(java.lang.String startDate) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(START_DATE_PATTERN.matcher(startDate).matches(),
              "Parameter startDate must conform to the pattern " +
              "\\d{4}-\\d{2}-\\d{2}|(today|startOfMonth|startOfYear)(([\\-\\+]\\d+[dwmy]){0,3}?)");
        }
        this.startDate = startDate;
        return this;
      }

      /** End of the date range to report on in "YYYY-MM-DD" format, inclusive. */
      @com.google.api.client.util.Key
      private java.lang.String endDate;

      /** End of the date range to report on in "YYYY-MM-DD" format, inclusive.
       */
      public java.lang.String getEndDate() {
        return endDate;
      }

      /** End of the date range to report on in "YYYY-MM-DD" format, inclusive. */
      public Generate setEndDate(java.lang.String endDate) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(END_DATE_PATTERN.matcher(endDate).matches(),
              "Parameter endDate must conform to the pattern " +
              "\\d{4}-\\d{2}-\\d{2}|(today|startOfMonth|startOfYear)(([\\-\\+]\\d+[dwmy]){0,3}?)");
        }
        this.endDate = endDate;
        return this;
      }

      /** Dimensions to base the report on. */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> dimension;

      /** Dimensions to base the report on.
       */
      public java.util.List<java.lang.String> getDimension() {
        return dimension;
      }

      /** Dimensions to base the report on. */
      public Generate setDimension(java.util.List<java.lang.String> dimension) {
        if (!getSuppressPatternChecks()) {
          for (String dimensionElem : dimension) {
            com.google.api.client.util.Preconditions.checkArgument(DIMENSION_PATTERN.matcher(dimensionElem).matches(),
                "Parameter dimension elements must conform to the pattern " +
                "[a-zA-Z_]+");
          }
        }
        this.dimension = dimension;
        return this;
      }

      /** Filters to be run on the report. */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> filter;

      /** Filters to be run on the report.
       */
      public java.util.List<java.lang.String> getFilter() {
        return filter;
      }

      /** Filters to be run on the report. */
      public Generate setFilter(java.util.List<java.lang.String> filter) {
        if (!getSuppressPatternChecks()) {
          for (String filterElem : filter) {
            com.google.api.client.util.Preconditions.checkArgument(FILTER_PATTERN.matcher(filterElem).matches(),
                "Parameter filter elements must conform to the pattern " +
                "[a-zA-Z_]+(==|=@).+");
          }
        }
        this.filter = filter;
        return this;
      }

      /**
       * Optional locale to use for translating report output to a local language. Defaults to
       * "en_US" if not specified.
       */
      @com.google.api.client.util.Key
      private java.lang.String locale;

      /** Optional locale to use for translating report output to a local language. Defaults to "en_US" if
     not specified.
       */
      public java.lang.String getLocale() {
        return locale;
      }

      /**
       * Optional locale to use for translating report output to a local language. Defaults to
       * "en_US" if not specified.
       */
      public Generate setLocale(java.lang.String locale) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(LOCALE_PATTERN.matcher(locale).matches(),
              "Parameter locale must conform to the pattern " +
              "[a-zA-Z_]+");
        }
        this.locale = locale;
        return this;
      }

      /** The maximum number of rows of report data to return. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of rows of report data to return.

     [minimum: 0] [maximum: 50000]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of rows of report data to return. */
      public Generate setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /** Numeric columns to include in the report. */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> metric;

      /** Numeric columns to include in the report.
       */
      public java.util.List<java.lang.String> getMetric() {
        return metric;
      }

      /** Numeric columns to include in the report. */
      public Generate setMetric(java.util.List<java.lang.String> metric) {
        if (!getSuppressPatternChecks()) {
          for (String metricElem : metric) {
            com.google.api.client.util.Preconditions.checkArgument(METRIC_PATTERN.matcher(metricElem).matches(),
                "Parameter metric elements must conform to the pattern " +
                "[a-zA-Z_]+");
          }
        }
        this.metric = metric;
        return this;
      }

      /**
       * The name of a dimension or metric to sort the resulting report on, optionally prefixed with
       * "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is
       * sorted ascending.
       */
      @com.google.api.client.util.Key
      private java.util.List<java.lang.String> sort;

      /** The name of a dimension or metric to sort the resulting report on, optionally prefixed with "+" to
     sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted
     ascending.
       */
      public java.util.List<java.lang.String> getSort() {
        return sort;
      }

      /**
       * The name of a dimension or metric to sort the resulting report on, optionally prefixed with
       * "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is
       * sorted ascending.
       */
      public Generate setSort(java.util.List<java.lang.String> sort) {
        if (!getSuppressPatternChecks()) {
          for (String sortElem : sort) {
            com.google.api.client.util.Preconditions.checkArgument(SORT_PATTERN.matcher(sortElem).matches(),
                "Parameter sort elements must conform to the pattern " +
                "(\\+|-)?[a-zA-Z_]+");
          }
        }
        this.sort = sort;
        return this;
      }

      /** Index of the first row of report data to return. */
      @com.google.api.client.util.Key
      private java.lang.Long startIndex;

      /** Index of the first row of report data to return.

     [minimum: 0] [maximum: 5000]
       */
      public java.lang.Long getStartIndex() {
        return startIndex;
      }

      /** Index of the first row of report data to return. */
      public Generate setStartIndex(java.lang.Long startIndex) {
        this.startIndex = startIndex;
        return this;
      }

      @Override
      public Generate set(String parameterName, Object value) {
        return (Generate) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Urlchannels collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AdSenseHost adsensehost = new AdSenseHost(...);}
   *   {@code AdSenseHost.Urlchannels.List request = adsensehost.urlchannels().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Urlchannels urlchannels() {
    return new Urlchannels();
  }

  /**
   * The "urlchannels" collection of methods.
   */
  public class Urlchannels {

    /**
     * Delete a URL channel from the host AdSense account.
     *
     * Create a request for the method "urlchannels.delete".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param adClientId Ad client from which to delete the URL channel.
     * @param urlChannelId URL channel to delete.
     * @return the request
     */
    public Delete delete(java.lang.String adClientId, java.lang.String urlChannelId) throws java.io.IOException {
      Delete result = new Delete(adClientId, urlChannelId);
      initialize(result);
      return result;
    }

    public class Delete extends AdSenseHostRequest<com.google.api.services.adsensehost.model.UrlChannel> {

      private static final String REST_PATH = "adclients/{adClientId}/urlchannels/{urlChannelId}";

      /**
       * Delete a URL channel from the host AdSense account.
       *
       * Create a request for the method "urlchannels.delete".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param adClientId Ad client from which to delete the URL channel.
       * @param urlChannelId URL channel to delete.
       * @since 1.13
       */
      protected Delete(java.lang.String adClientId, java.lang.String urlChannelId) {
        super(AdSenseHost.this, "DELETE", REST_PATH, null, com.google.api.services.adsensehost.model.UrlChannel.class);
        this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
        this.urlChannelId = com.google.api.client.util.Preconditions.checkNotNull(urlChannelId, "Required parameter urlChannelId must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      /** Ad client from which to delete the URL channel. */
      @com.google.api.client.util.Key
      private java.lang.String adClientId;

      /** Ad client from which to delete the URL channel.
       */
      public java.lang.String getAdClientId() {
        return adClientId;
      }

      /** Ad client from which to delete the URL channel. */
      public Delete setAdClientId(java.lang.String adClientId) {
        this.adClientId = adClientId;
        return this;
      }

      /** URL channel to delete. */
      @com.google.api.client.util.Key
      private java.lang.String urlChannelId;

      /** URL channel to delete.
       */
      public java.lang.String getUrlChannelId() {
        return urlChannelId;
      }

      /** URL channel to delete. */
      public Delete setUrlChannelId(java.lang.String urlChannelId) {
        this.urlChannelId = urlChannelId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Add a new URL channel to the host AdSense account.
     *
     * Create a request for the method "urlchannels.insert".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param adClientId Ad client to which the new URL channel will be added.
     * @param content the {@link com.google.api.services.adsensehost.model.UrlChannel}
     * @return the request
     */
    public Insert insert(java.lang.String adClientId, com.google.api.services.adsensehost.model.UrlChannel content) throws java.io.IOException {
      Insert result = new Insert(adClientId, content);
      initialize(result);
      return result;
    }

    public class Insert extends AdSenseHostRequest<com.google.api.services.adsensehost.model.UrlChannel> {

      private static final String REST_PATH = "adclients/{adClientId}/urlchannels";

      /**
       * Add a new URL channel to the host AdSense account.
       *
       * Create a request for the method "urlchannels.insert".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param adClientId Ad client to which the new URL channel will be added.
       * @param content the {@link com.google.api.services.adsensehost.model.UrlChannel}
       * @since 1.13
       */
      protected Insert(java.lang.String adClientId, com.google.api.services.adsensehost.model.UrlChannel content) {
        super(AdSenseHost.this, "POST", REST_PATH, content, com.google.api.services.adsensehost.model.UrlChannel.class);
        this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      /** Ad client to which the new URL channel will be added. */
      @com.google.api.client.util.Key
      private java.lang.String adClientId;

      /** Ad client to which the new URL channel will be added.
       */
      public java.lang.String getAdClientId() {
        return adClientId;
      }

      /** Ad client to which the new URL channel will be added. */
      public Insert setAdClientId(java.lang.String adClientId) {
        this.adClientId = adClientId;
        return this;
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * List all host URL channels in the host AdSense account.
     *
     * Create a request for the method "urlchannels.list".
     *
     * This request holds the parameters needed by the adsensehost server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param adClientId Ad client for which to list URL channels.
     * @return the request
     */
    public List list(java.lang.String adClientId) throws java.io.IOException {
      List result = new List(adClientId);
      initialize(result);
      return result;
    }

    public class List extends AdSenseHostRequest<com.google.api.services.adsensehost.model.UrlChannels> {

      private static final String REST_PATH = "adclients/{adClientId}/urlchannels";

      /**
       * List all host URL channels in the host AdSense account.
       *
       * Create a request for the method "urlchannels.list".
       *
       * This request holds the parameters needed by the the adsensehost server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param adClientId Ad client for which to list URL channels.
       * @since 1.13
       */
      protected List(java.lang.String adClientId) {
        super(AdSenseHost.this, "GET", REST_PATH, null, com.google.api.services.adsensehost.model.UrlChannels.class);
        this.adClientId = com.google.api.client.util.Preconditions.checkNotNull(adClientId, "Required parameter adClientId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      /** Ad client for which to list URL channels. */
      @com.google.api.client.util.Key
      private java.lang.String adClientId;

      /** Ad client for which to list URL channels.
       */
      public java.lang.String getAdClientId() {
        return adClientId;
      }

      /** Ad client for which to list URL channels. */
      public List setAdClientId(java.lang.String adClientId) {
        this.adClientId = adClientId;
        return this;
      }

      /** The maximum number of URL channels to include in the response, used for paging. */
      @com.google.api.client.util.Key
      private java.lang.Long maxResults;

      /** The maximum number of URL channels to include in the response, used for paging.

     [minimum: 0] [maximum: 10000]
       */
      public java.lang.Long getMaxResults() {
        return maxResults;
      }

      /** The maximum number of URL channels to include in the response, used for paging. */
      public List setMaxResults(java.lang.Long maxResults) {
        this.maxResults = maxResults;
        return this;
      }

      /**
       * A continuation token, used to page through URL channels. To retrieve the next page, set
       * this parameter to the value of "nextPageToken" from the previous response.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** A continuation token, used to page through URL channels. To retrieve the next page, set this
     parameter to the value of "nextPageToken" from the previous response.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * A continuation token, used to page through URL channels. To retrieve the next page, set
       * this parameter to the value of "nextPageToken" from the previous response.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link AdSenseHost}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link AdSenseHost}. */
    @Override
    public AdSenseHost build() {
      return new AdSenseHost(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link AdSenseHostRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setAdSenseHostRequestInitializer(
        AdSenseHostRequestInitializer adsensehostRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(adsensehostRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
