/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.fusiontables.model;

/**
 * Specifies the id, name and type of a column in a table.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Fusion Tables API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Column extends com.google.api.client.json.GenericJson {

  /**
   * Optional identifier of the base column. If present, this column is derived from the specified
   * base column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BaseColumn baseColumn;

  /**
   * Identifier for the column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer columnId;

  /**
   * Optional column description.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Optional column predicate. Used to map table to graph data model (subject,predicate,object) See
   * http://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/#data-model
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("graph_predicate")
  private java.lang.String graphPredicate;

  /**
   * Type name: a template for an individual column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * Required name of the column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Required type of the column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Optional identifier of the base column. If present, this column is derived from the specified
   * base column.
   * @return value or {@code null} for none
   */
  public BaseColumn getBaseColumn() {
    return baseColumn;
  }

  /**
   * Optional identifier of the base column. If present, this column is derived from the specified
   * base column.
   * @param baseColumn baseColumn or {@code null} for none
   */
  public Column setBaseColumn(BaseColumn baseColumn) {
    this.baseColumn = baseColumn;
    return this;
  }

  /**
   * Identifier for the column.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getColumnId() {
    return columnId;
  }

  /**
   * Identifier for the column.
   * @param columnId columnId or {@code null} for none
   */
  public Column setColumnId(java.lang.Integer columnId) {
    this.columnId = columnId;
    return this;
  }

  /**
   * Optional column description.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Optional column description.
   * @param description description or {@code null} for none
   */
  public Column setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional column predicate. Used to map table to graph data model (subject,predicate,object) See
   * http://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/#data-model
   * @return value or {@code null} for none
   */
  public java.lang.String getGraphPredicate() {
    return graphPredicate;
  }

  /**
   * Optional column predicate. Used to map table to graph data model (subject,predicate,object) See
   * http://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/#data-model
   * @param graphPredicate graphPredicate or {@code null} for none
   */
  public Column setGraphPredicate(java.lang.String graphPredicate) {
    this.graphPredicate = graphPredicate;
    return this;
  }

  /**
   * Type name: a template for an individual column.
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * Type name: a template for an individual column.
   * @param kind kind or {@code null} for none
   */
  public Column setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Required name of the column.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required name of the column.
   * @param name name or {@code null} for none
   */
  public Column setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Required type of the column.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Required type of the column.
   * @param type type or {@code null} for none
   */
  public Column setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public Column set(String fieldName, Object value) {
    return (Column) super.set(fieldName, value);
  }

  @Override
  public Column clone() {
    return (Column) super.clone();
  }

  /**
   * Optional identifier of the base column. If present, this column is derived from the specified
   * base column.
   */
  public static final class BaseColumn extends com.google.api.client.json.GenericJson {

    /**
     * The id of the column in the base table from which this column is derived.
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private java.lang.Integer columnId;

    /**
     * Offset to the entry in the list of base tables in the table definition.
     * The value may be {@code null}.
     */
    @com.google.api.client.util.Key
    private java.lang.Integer tableIndex;

    /**
     * The id of the column in the base table from which this column is derived.
     * @return value or {@code null} for none
     */
    public java.lang.Integer getColumnId() {
      return columnId;
    }

    /**
     * The id of the column in the base table from which this column is derived.
     * @param columnId columnId or {@code null} for none
     */
    public BaseColumn setColumnId(java.lang.Integer columnId) {
      this.columnId = columnId;
      return this;
    }

    /**
     * Offset to the entry in the list of base tables in the table definition.
     * @return value or {@code null} for none
     */
    public java.lang.Integer getTableIndex() {
      return tableIndex;
    }

    /**
     * Offset to the entry in the list of base tables in the table definition.
     * @param tableIndex tableIndex or {@code null} for none
     */
    public BaseColumn setTableIndex(java.lang.Integer tableIndex) {
      this.tableIndex = tableIndex;
      return this;
    }

    @Override
    public BaseColumn set(String fieldName, Object value) {
      return (BaseColumn) super.set(fieldName, value);
    }

    @Override
    public BaseColumn clone() {
      return (BaseColumn) super.clone();
    }

  }

}
