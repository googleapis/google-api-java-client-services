/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.chromewebstore.v2.model;

/**
 * Response message for `UploadItemPackage`.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Chrome Web Store API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class UploadItemPackageResponse extends com.google.api.client.json.GenericJson {

  /**
   * The extension version provided in the manifest of the uploaded package. This will not be set if
   * the upload is still in progress (`upload_state` is `UPLOAD_IN_PROGRESS`).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String crxVersion;

  /**
   * Output only. The ID of the item the package was uploaded to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String itemId;

  /**
   * The name of the item the package was uploaded to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The state of the upload. If `upload_state` is `UPLOAD_IN_PROGRESS`, you can poll
   * for updates using the fetchStatus method.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uploadState;

  /**
   * The extension version provided in the manifest of the uploaded package. This will not be set if
   * the upload is still in progress (`upload_state` is `UPLOAD_IN_PROGRESS`).
   * @return value or {@code null} for none
   */
  public java.lang.String getCrxVersion() {
    return crxVersion;
  }

  /**
   * The extension version provided in the manifest of the uploaded package. This will not be set if
   * the upload is still in progress (`upload_state` is `UPLOAD_IN_PROGRESS`).
   * @param crxVersion crxVersion or {@code null} for none
   */
  public UploadItemPackageResponse setCrxVersion(java.lang.String crxVersion) {
    this.crxVersion = crxVersion;
    return this;
  }

  /**
   * Output only. The ID of the item the package was uploaded to.
   * @return value or {@code null} for none
   */
  public java.lang.String getItemId() {
    return itemId;
  }

  /**
   * Output only. The ID of the item the package was uploaded to.
   * @param itemId itemId or {@code null} for none
   */
  public UploadItemPackageResponse setItemId(java.lang.String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * The name of the item the package was uploaded to.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name of the item the package was uploaded to.
   * @param name name or {@code null} for none
   */
  public UploadItemPackageResponse setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The state of the upload. If `upload_state` is `UPLOAD_IN_PROGRESS`, you can poll
   * for updates using the fetchStatus method.
   * @return value or {@code null} for none
   */
  public java.lang.String getUploadState() {
    return uploadState;
  }

  /**
   * Output only. The state of the upload. If `upload_state` is `UPLOAD_IN_PROGRESS`, you can poll
   * for updates using the fetchStatus method.
   * @param uploadState uploadState or {@code null} for none
   */
  public UploadItemPackageResponse setUploadState(java.lang.String uploadState) {
    this.uploadState = uploadState;
    return this;
  }

  @Override
  public UploadItemPackageResponse set(String fieldName, Object value) {
    return (UploadItemPackageResponse) super.set(fieldName, value);
  }

  @Override
  public UploadItemPackageResponse clone() {
    return (UploadItemPackageResponse) super.clone();
  }

}
