/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.merchantapi.conversions_v1beta;

/**
 * Service definition for Merchant (conversions_v1beta).
 *
 * <p>
 * Programmatically manage your Merchant Center Accounts.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.devsite.corp.google.com/merchant/api" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link MerchantRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Merchant extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Merchant API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://merchantapi.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://merchantapi.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Merchant(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Merchant(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Accounts collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Merchant merchantapi = new Merchant(...);}
   *   {@code Merchant.Accounts.List request = merchantapi.accounts().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Accounts accounts() {
    return new Accounts();
  }

  /**
   * The "accounts" collection of methods.
   */
  public class Accounts {

    /**
     * An accessor for creating requests from the ConversionSources collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Merchant merchantapi = new Merchant(...);}
     *   {@code Merchant.ConversionSources.List request = merchantapi.conversionSources().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public ConversionSources conversionSources() {
      return new ConversionSources();
    }

    /**
     * The "conversionSources" collection of methods.
     */
    public class ConversionSources {

      /**
       * Creates a new conversion source.
       *
       * Create a request for the method "conversionSources.create".
       *
       * This request holds the parameters needed by the merchantapi server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The merchant account that will own the new conversion source. Format: accounts/{account}
       * @param content the {@link com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource}
       * @return the request
       */
      public Create create(java.lang.String parent, com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource content) throws java.io.IOException {
        Create result = new Create(parent, content);
        initialize(result);
        return result;
      }

      public class Create extends MerchantRequest<com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource> {

        private static final String REST_PATH = "conversions/v1beta/{+parent}/conversionSources";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^accounts/[^/]+$");

        /**
         * Creates a new conversion source.
         *
         * Create a request for the method "conversionSources.create".
         *
         * This request holds the parameters needed by the the merchantapi server.  After setting any
         * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
         * <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The merchant account that will own the new conversion source. Format: accounts/{account}
         * @param content the {@link com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource}
         * @since 1.13
         */
        protected Create(java.lang.String parent, com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource content) {
          super(Merchant.this, "POST", REST_PATH, content, com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^accounts/[^/]+$");
          }
        }

        @Override
        public Create set$Xgafv(java.lang.String $Xgafv) {
          return (Create) super.set$Xgafv($Xgafv);
        }

        @Override
        public Create setAccessToken(java.lang.String accessToken) {
          return (Create) super.setAccessToken(accessToken);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setCallback(java.lang.String callback) {
          return (Create) super.setCallback(callback);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUploadType(java.lang.String uploadType) {
          return (Create) super.setUploadType(uploadType);
        }

        @Override
        public Create setUploadProtocol(java.lang.String uploadProtocol) {
          return (Create) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The merchant account that will own the new conversion source. Format:
         * accounts/{account}
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The merchant account that will own the new conversion source. Format: accounts/{account}
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The merchant account that will own the new conversion source. Format:
         * accounts/{account}
         */
        public Create setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^accounts/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * Archives an existing conversion source. If the conversion source is a Merchant Center
       * Destination, it will be recoverable for 30 days. If the conversion source is a Google Analytics
       * Link, it will be deleted immediately and can be restored by creating a new one.
       *
       * Create a request for the method "conversionSources.delete".
       *
       * This request holds the parameters needed by the merchantapi server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the conversion source to be deleted. Format:
       *        accounts/{account}/conversionSources/{conversion_source}
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends MerchantRequest<com.google.api.services.merchantapi.conversions_v1beta.model.Empty> {

        private static final String REST_PATH = "conversions/v1beta/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^accounts/[^/]+/conversionSources/[^/]+$");

        /**
         * Archives an existing conversion source. If the conversion source is a Merchant Center
         * Destination, it will be recoverable for 30 days. If the conversion source is a Google Analytics
         * Link, it will be deleted immediately and can be restored by creating a new one.
         *
         * Create a request for the method "conversionSources.delete".
         *
         * This request holds the parameters needed by the the merchantapi server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the conversion source to be deleted. Format:
       *        accounts/{account}/conversionSources/{conversion_source}
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(Merchant.this, "DELETE", REST_PATH, null, com.google.api.services.merchantapi.conversions_v1beta.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^accounts/[^/]+/conversionSources/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the conversion source to be deleted. Format:
         * accounts/{account}/conversionSources/{conversion_source}
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the conversion source to be deleted. Format:
       accounts/{account}/conversionSources/{conversion_source}
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the conversion source to be deleted. Format:
         * accounts/{account}/conversionSources/{conversion_source}
         */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^accounts/[^/]+/conversionSources/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Fetches a conversion source.
       *
       * Create a request for the method "conversionSources.get".
       *
       * This request holds the parameters needed by the merchantapi server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the conversion source to be fetched. Format:
       *        accounts/{account}/conversionSources/{conversion_source}
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends MerchantRequest<com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource> {

        private static final String REST_PATH = "conversions/v1beta/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^accounts/[^/]+/conversionSources/[^/]+$");

        /**
         * Fetches a conversion source.
         *
         * Create a request for the method "conversionSources.get".
         *
         * This request holds the parameters needed by the the merchantapi server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the conversion source to be fetched. Format:
       *        accounts/{account}/conversionSources/{conversion_source}
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(Merchant.this, "GET", REST_PATH, null, com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^accounts/[^/]+/conversionSources/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the conversion source to be fetched. Format:
         * accounts/{account}/conversionSources/{conversion_source}
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the conversion source to be fetched. Format:
       accounts/{account}/conversionSources/{conversion_source}
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the conversion source to be fetched. Format:
         * accounts/{account}/conversionSources/{conversion_source}
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^accounts/[^/]+/conversionSources/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Retrieves the list of conversion sources the caller has access to.
       *
       * Create a request for the method "conversionSources.list".
       *
       * This request holds the parameters needed by the merchantapi server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent Required. The merchant account who owns the collection of conversion sources. Format:
       *        accounts/{account}
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends MerchantRequest<com.google.api.services.merchantapi.conversions_v1beta.model.ListConversionSourcesResponse> {

        private static final String REST_PATH = "conversions/v1beta/{+parent}/conversionSources";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^accounts/[^/]+$");

        /**
         * Retrieves the list of conversion sources the caller has access to.
         *
         * Create a request for the method "conversionSources.list".
         *
         * This request holds the parameters needed by the the merchantapi server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent Required. The merchant account who owns the collection of conversion sources. Format:
       *        accounts/{account}
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(Merchant.this, "GET", REST_PATH, null, com.google.api.services.merchantapi.conversions_v1beta.model.ListConversionSourcesResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^accounts/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The merchant account who owns the collection of conversion sources. Format:
         * accounts/{account}
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** Required. The merchant account who owns the collection of conversion sources. Format:
       accounts/{account}
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * Required. The merchant account who owns the collection of conversion sources. Format:
         * accounts/{account}
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^accounts/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * Optional. The maximum number of conversion sources to return in a page. If no `page_size`
         * is specified, `100` is used as the default value. The maximum value is `200`. Values
         * above `200` will be coerced to `200`. Regardless of pagination, at most `200` conversion
         * sources are returned in total.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Optional. The maximum number of conversion sources to return in a page. If no `page_size` is
       specified, `100` is used as the default value. The maximum value is `200`. Values above `200` will
       be coerced to `200`. Regardless of pagination, at most `200` conversion sources are returned in
       total.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Optional. The maximum number of conversion sources to return in a page. If no `page_size`
         * is specified, `100` is used as the default value. The maximum value is `200`. Values
         * above `200` will be coerced to `200`. Regardless of pagination, at most `200` conversion
         * sources are returned in total.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** Optional. Page token. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** Optional. Page token.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** Optional. Page token. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        /** Optional. Show deleted (archived) option. */
        @com.google.api.client.util.Key
        private java.lang.Boolean showDeleted;

        /** Optional. Show deleted (archived) option.
         */
        public java.lang.Boolean getShowDeleted() {
          return showDeleted;
        }

        /** Optional. Show deleted (archived) option. */
        public List setShowDeleted(java.lang.Boolean showDeleted) {
          this.showDeleted = showDeleted;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }
      /**
       * Updates information of an existing conversion source. Available only for Merchant Center
       * Destination conversion sources.
       *
       * Create a request for the method "conversionSources.patch".
       *
       * This request holds the parameters needed by the merchantapi server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name Output only. Identifier. Generated by the Content API upon creation of a new `ConversionSource`.
       *        Format: [a-z]{4}:.+ The four characters before the colon represent the type of conversio
       *        source. Content after the colon represents the ID of the conversion source within that
       *        type. The ID of two different conversion sources might be the same across different types.
       *        The following type prefixes are supported: - galk: For GoogleAnalyticsLink sources. -
       *        mcdn: For MerchantCenterDestination sources.
       * @param content the {@link com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends MerchantRequest<com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource> {

        private static final String REST_PATH = "conversions/v1beta/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^accounts/[^/]+/conversionSources/[^/]+$");

        /**
         * Updates information of an existing conversion source. Available only for Merchant Center
         * Destination conversion sources.
         *
         * Create a request for the method "conversionSources.patch".
         *
         * This request holds the parameters needed by the the merchantapi server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         * <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Output only. Identifier. Generated by the Content API upon creation of a new `ConversionSource`.
       *        Format: [a-z]{4}:.+ The four characters before the colon represent the type of conversio
       *        source. Content after the colon represents the ID of the conversion source within that
       *        type. The ID of two different conversion sources might be the same across different types.
       *        The following type prefixes are supported: - galk: For GoogleAnalyticsLink sources. -
       *        mcdn: For MerchantCenterDestination sources.
         * @param content the {@link com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource content) {
          super(Merchant.this, "PATCH", REST_PATH, content, com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^accounts/[^/]+/conversionSources/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Output only. Identifier. Generated by the Content API upon creation of a new
         * `ConversionSource`. Format: [a-z]{4}:.+ The four characters before the colon represent
         * the type of conversio source. Content after the colon represents the ID of the conversion
         * source within that type. The ID of two different conversion sources might be the same
         * across different types. The following type prefixes are supported: - galk: For
         * GoogleAnalyticsLink sources. - mcdn: For MerchantCenterDestination sources.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Output only. Identifier. Generated by the Content API upon creation of a new `ConversionSource`.
       Format: [a-z]{4}:.+ The four characters before the colon represent the type of conversio source.
       Content after the colon represents the ID of the conversion source within that type. The ID of two
       different conversion sources might be the same across different types. The following type prefixes
       are supported: - galk: For GoogleAnalyticsLink sources. - mcdn: For MerchantCenterDestination
       sources.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Output only. Identifier. Generated by the Content API upon creation of a new
         * `ConversionSource`. Format: [a-z]{4}:.+ The four characters before the colon represent
         * the type of conversio source. Content after the colon represents the ID of the conversion
         * source within that type. The ID of two different conversion sources might be the same
         * across different types. The following type prefixes are supported: - galk: For
         * GoogleAnalyticsLink sources. - mcdn: For MerchantCenterDestination sources.
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^accounts/[^/]+/conversionSources/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** Optional. List of fields being updated. */
        @com.google.api.client.util.Key
        private String updateMask;

        /** Optional. List of fields being updated.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /** Optional. List of fields being updated. */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }
      /**
       * Re-enables an archived conversion source. Only Available for Merchant Center Destination
       * conversion sources.
       *
       * Create a request for the method "conversionSources.undelete".
       *
       * This request holds the parameters needed by the merchantapi server.  After setting any optional
       * parameters, call the {@link Undelete#execute()} method to invoke the remote operation.
       *
       * @param name Required. The name of the conversion source to be undeleted. Format:
       *        accounts/{account}/conversionSources/{conversion_source}
       * @param content the {@link com.google.api.services.merchantapi.conversions_v1beta.model.UndeleteConversionSourceRequest}
       * @return the request
       */
      public Undelete undelete(java.lang.String name, com.google.api.services.merchantapi.conversions_v1beta.model.UndeleteConversionSourceRequest content) throws java.io.IOException {
        Undelete result = new Undelete(name, content);
        initialize(result);
        return result;
      }

      public class Undelete extends MerchantRequest<com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource> {

        private static final String REST_PATH = "conversions/v1beta/{+name}:undelete";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^accounts/[^/]+/conversionSources/[^/]+$");

        /**
         * Re-enables an archived conversion source. Only Available for Merchant Center Destination
         * conversion sources.
         *
         * Create a request for the method "conversionSources.undelete".
         *
         * This request holds the parameters needed by the the merchantapi server.  After setting any
         * optional parameters, call the {@link Undelete#execute()} method to invoke the remote operation.
         * <p> {@link
         * Undelete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Required. The name of the conversion source to be undeleted. Format:
       *        accounts/{account}/conversionSources/{conversion_source}
         * @param content the {@link com.google.api.services.merchantapi.conversions_v1beta.model.UndeleteConversionSourceRequest}
         * @since 1.13
         */
        protected Undelete(java.lang.String name, com.google.api.services.merchantapi.conversions_v1beta.model.UndeleteConversionSourceRequest content) {
          super(Merchant.this, "POST", REST_PATH, content, com.google.api.services.merchantapi.conversions_v1beta.model.ConversionSource.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^accounts/[^/]+/conversionSources/[^/]+$");
          }
        }

        @Override
        public Undelete set$Xgafv(java.lang.String $Xgafv) {
          return (Undelete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Undelete setAccessToken(java.lang.String accessToken) {
          return (Undelete) super.setAccessToken(accessToken);
        }

        @Override
        public Undelete setAlt(java.lang.String alt) {
          return (Undelete) super.setAlt(alt);
        }

        @Override
        public Undelete setCallback(java.lang.String callback) {
          return (Undelete) super.setCallback(callback);
        }

        @Override
        public Undelete setFields(java.lang.String fields) {
          return (Undelete) super.setFields(fields);
        }

        @Override
        public Undelete setKey(java.lang.String key) {
          return (Undelete) super.setKey(key);
        }

        @Override
        public Undelete setOauthToken(java.lang.String oauthToken) {
          return (Undelete) super.setOauthToken(oauthToken);
        }

        @Override
        public Undelete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Undelete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Undelete setQuotaUser(java.lang.String quotaUser) {
          return (Undelete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Undelete setUploadType(java.lang.String uploadType) {
          return (Undelete) super.setUploadType(uploadType);
        }

        @Override
        public Undelete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Undelete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * Required. The name of the conversion source to be undeleted. Format:
         * accounts/{account}/conversionSources/{conversion_source}
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Required. The name of the conversion source to be undeleted. Format:
       accounts/{account}/conversionSources/{conversion_source}
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * Required. The name of the conversion source to be undeleted. Format:
         * accounts/{account}/conversionSources/{conversion_source}
         */
        public Undelete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^accounts/[^/]+/conversionSources/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Undelete set(String parameterName, Object value) {
          return (Undelete) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link Merchant}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Merchant}. */
    @Override
    public Merchant build() {
      return new Merchant(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link MerchantRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setMerchantRequestInitializer(
        MerchantRequestInitializer merchantRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(merchantRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
