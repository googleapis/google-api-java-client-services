/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.domains.v1.model;

/**
 * Domain forwarding configuration.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Domains API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DomainForwarding extends com.google.api.client.json.GenericJson {

  /**
   * If true, forwards the path after the domain name to the same path at the new address.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean pathForwarding;

  /**
   * The PEM-encoded certificate chain.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pemCertificate;

  /**
   * The redirect type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String redirectType;

  /**
   * If true, the forwarding works also over HTTPS.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean sslEnabled;

  /**
   * The subdomain of the registered domain that is being forwarded. E.g. `www.example.com`,
   * `example.com` (i.e. the registered domain itself) or `*.example.com` (i.e. all subdomains).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subdomain;

  /**
   * The target of the domain forwarding, i.e. the path to redirect the `subdomain` to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetUri;

  /**
   * If true, forwards the path after the domain name to the same path at the new address.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getPathForwarding() {
    return pathForwarding;
  }

  /**
   * If true, forwards the path after the domain name to the same path at the new address.
   * @param pathForwarding pathForwarding or {@code null} for none
   */
  public DomainForwarding setPathForwarding(java.lang.Boolean pathForwarding) {
    this.pathForwarding = pathForwarding;
    return this;
  }

  /**
   * The PEM-encoded certificate chain.
   * @return value or {@code null} for none
   */
  public java.lang.String getPemCertificate() {
    return pemCertificate;
  }

  /**
   * The PEM-encoded certificate chain.
   * @param pemCertificate pemCertificate or {@code null} for none
   */
  public DomainForwarding setPemCertificate(java.lang.String pemCertificate) {
    this.pemCertificate = pemCertificate;
    return this;
  }

  /**
   * The redirect type.
   * @return value or {@code null} for none
   */
  public java.lang.String getRedirectType() {
    return redirectType;
  }

  /**
   * The redirect type.
   * @param redirectType redirectType or {@code null} for none
   */
  public DomainForwarding setRedirectType(java.lang.String redirectType) {
    this.redirectType = redirectType;
    return this;
  }

  /**
   * If true, the forwarding works also over HTTPS.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSslEnabled() {
    return sslEnabled;
  }

  /**
   * If true, the forwarding works also over HTTPS.
   * @param sslEnabled sslEnabled or {@code null} for none
   */
  public DomainForwarding setSslEnabled(java.lang.Boolean sslEnabled) {
    this.sslEnabled = sslEnabled;
    return this;
  }

  /**
   * The subdomain of the registered domain that is being forwarded. E.g. `www.example.com`,
   * `example.com` (i.e. the registered domain itself) or `*.example.com` (i.e. all subdomains).
   * @return value or {@code null} for none
   */
  public java.lang.String getSubdomain() {
    return subdomain;
  }

  /**
   * The subdomain of the registered domain that is being forwarded. E.g. `www.example.com`,
   * `example.com` (i.e. the registered domain itself) or `*.example.com` (i.e. all subdomains).
   * @param subdomain subdomain or {@code null} for none
   */
  public DomainForwarding setSubdomain(java.lang.String subdomain) {
    this.subdomain = subdomain;
    return this;
  }

  /**
   * The target of the domain forwarding, i.e. the path to redirect the `subdomain` to.
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetUri() {
    return targetUri;
  }

  /**
   * The target of the domain forwarding, i.e. the path to redirect the `subdomain` to.
   * @param targetUri targetUri or {@code null} for none
   */
  public DomainForwarding setTargetUri(java.lang.String targetUri) {
    this.targetUri = targetUri;
    return this;
  }

  @Override
  public DomainForwarding set(String fieldName, Object value) {
    return (DomainForwarding) super.set(fieldName, value);
  }

  @Override
  public DomainForwarding clone() {
    return (DomainForwarding) super.clone();
  }

}
