/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataproc.model;

/**
 * Resource profile that contains information about all the resources required by executors and
 * tasks.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Dataproc API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ResourceProfileInfo extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, ExecutorResourceRequest> executorResources;

  static {
    // hack to force ProGuard to consider ExecutorResourceRequest used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ExecutorResourceRequest.class);
  }

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer resourceProfileId;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, TaskResourceRequest> taskResources;

  /**
   * @return value or {@code null} for none
   */
  public java.util.Map<String, ExecutorResourceRequest> getExecutorResources() {
    return executorResources;
  }

  /**
   * @param executorResources executorResources or {@code null} for none
   */
  public ResourceProfileInfo setExecutorResources(java.util.Map<String, ExecutorResourceRequest> executorResources) {
    this.executorResources = executorResources;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getResourceProfileId() {
    return resourceProfileId;
  }

  /**
   * @param resourceProfileId resourceProfileId or {@code null} for none
   */
  public ResourceProfileInfo setResourceProfileId(java.lang.Integer resourceProfileId) {
    this.resourceProfileId = resourceProfileId;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.Map<String, TaskResourceRequest> getTaskResources() {
    return taskResources;
  }

  /**
   * @param taskResources taskResources or {@code null} for none
   */
  public ResourceProfileInfo setTaskResources(java.util.Map<String, TaskResourceRequest> taskResources) {
    this.taskResources = taskResources;
    return this;
  }

  @Override
  public ResourceProfileInfo set(String fieldName, Object value) {
    return (ResourceProfileInfo) super.set(fieldName, value);
  }

  @Override
  public ResourceProfileInfo clone() {
    return (ResourceProfileInfo) super.clone();
  }

}
