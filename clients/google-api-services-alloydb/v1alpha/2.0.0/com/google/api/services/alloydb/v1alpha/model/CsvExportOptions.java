/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.alloydb.v1alpha.model;

/**
 * Options for exporting data in CSV format.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the AlloyDB API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CsvExportOptions extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Specifies the character that should appear before a data character that needs to be
   * escaped. The default is the same as quote character. The value of this argument has to be a
   * character in Hex ASCII Code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String escapeCharacter;

  /**
   * Optional. Specifies the character that separates columns within each row (line) of the file.
   * The default is comma. The value of this argument has to be a character in Hex ASCII Code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fieldDelimiter;

  /**
   * Optional. Specifies the quoting character to be used when a data value is quoted. The default
   * is double-quote. The value of this argument has to be a character in Hex ASCII Code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String quoteCharacter;

  /**
   * Required. The SELECT query used to extract the data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String selectQuery;

  /**
   * Optional. Specifies the character that should appear before a data character that needs to be
   * escaped. The default is the same as quote character. The value of this argument has to be a
   * character in Hex ASCII Code.
   * @return value or {@code null} for none
   */
  public java.lang.String getEscapeCharacter() {
    return escapeCharacter;
  }

  /**
   * Optional. Specifies the character that should appear before a data character that needs to be
   * escaped. The default is the same as quote character. The value of this argument has to be a
   * character in Hex ASCII Code.
   * @param escapeCharacter escapeCharacter or {@code null} for none
   */
  public CsvExportOptions setEscapeCharacter(java.lang.String escapeCharacter) {
    this.escapeCharacter = escapeCharacter;
    return this;
  }

  /**
   * Optional. Specifies the character that separates columns within each row (line) of the file.
   * The default is comma. The value of this argument has to be a character in Hex ASCII Code.
   * @return value or {@code null} for none
   */
  public java.lang.String getFieldDelimiter() {
    return fieldDelimiter;
  }

  /**
   * Optional. Specifies the character that separates columns within each row (line) of the file.
   * The default is comma. The value of this argument has to be a character in Hex ASCII Code.
   * @param fieldDelimiter fieldDelimiter or {@code null} for none
   */
  public CsvExportOptions setFieldDelimiter(java.lang.String fieldDelimiter) {
    this.fieldDelimiter = fieldDelimiter;
    return this;
  }

  /**
   * Optional. Specifies the quoting character to be used when a data value is quoted. The default
   * is double-quote. The value of this argument has to be a character in Hex ASCII Code.
   * @return value or {@code null} for none
   */
  public java.lang.String getQuoteCharacter() {
    return quoteCharacter;
  }

  /**
   * Optional. Specifies the quoting character to be used when a data value is quoted. The default
   * is double-quote. The value of this argument has to be a character in Hex ASCII Code.
   * @param quoteCharacter quoteCharacter or {@code null} for none
   */
  public CsvExportOptions setQuoteCharacter(java.lang.String quoteCharacter) {
    this.quoteCharacter = quoteCharacter;
    return this;
  }

  /**
   * Required. The SELECT query used to extract the data.
   * @return value or {@code null} for none
   */
  public java.lang.String getSelectQuery() {
    return selectQuery;
  }

  /**
   * Required. The SELECT query used to extract the data.
   * @param selectQuery selectQuery or {@code null} for none
   */
  public CsvExportOptions setSelectQuery(java.lang.String selectQuery) {
    this.selectQuery = selectQuery;
    return this;
  }

  @Override
  public CsvExportOptions set(String fieldName, Object value) {
    return (CsvExportOptions) super.set(fieldName, value);
  }

  @Override
  public CsvExportOptions clone() {
    return (CsvExportOptions) super.clone();
  }

}
