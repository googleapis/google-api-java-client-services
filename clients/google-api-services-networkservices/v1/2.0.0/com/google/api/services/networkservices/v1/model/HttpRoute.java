/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networkservices.v1.model;

/**
 * HttpRoute is the resource defining how HTTP traffic should be routed by a Mesh or Gateway
 * resource.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Services API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HttpRoute extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The timestamp when the resource was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. A free-text description of the resource. Max length 1024 characters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Optional. Etag of the resource. If this is provided, it must match the server's etag. If the
   * provided etag does not match the server's etag, the request will fail with a 409 ABORTED error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the
   * routing rules to route the requests served by the gateway. Each gateway reference should match
   * the pattern: `projects/locations/global/gateways/`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> gateways;

  /**
   * Required. Hostnames define a set of hosts that should match against the HTTP host header to
   * select a HttpRoute to process the request. Hostname is the fully qualified domain name of a
   * network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A
   * hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself
   * as the first label. Hostname can be "precise" which is a domain name without the terminating
   * dot of a network host (e.g. `foo.example.com`) or "wildcard", which is a domain name prefixed
   * with a single wildcard label (e.g. `*.example.com`). Note that as per RFC1035 and RFC1123, a
   * label must consist of lower case alphanumeric characters or '-', and must start and end with an
   * alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or
   * Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting
   * hostnames, the configuration will be rejected. For example, while it is acceptable for routes
   * for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same Mesh (or
   * Gateways under the same scope), it is not possible to associate two routes both with
   * `*.bar.com` or both with `bar.com`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> hostnames;

  /**
   * Optional. Set of label tags associated with the HttpRoute resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing
   * rules to route the requests served by the mesh. Each mesh reference should match the pattern:
   * `projects/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> meshes;

  /**
   * Identifier. Name of the HttpRoute resource. It matches pattern
   * `projects/locations/global/httpRoutes/http_route_name>`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Required. Rules that define how traffic is routed and handled. Rules will be matched
   * sequentially based on the RouteMatch specified for the rule.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HttpRouteRouteRule> rules;

  /**
   * Output only. Server-defined URL of this resource
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String selfLink;

  /**
   * Output only. The timestamp when the resource was updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. The timestamp when the resource was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The timestamp when the resource was created.
   * @param createTime createTime or {@code null} for none
   */
  public HttpRoute setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. A free-text description of the resource. Max length 1024 characters.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Optional. A free-text description of the resource. Max length 1024 characters.
   * @param description description or {@code null} for none
   */
  public HttpRoute setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Etag of the resource. If this is provided, it must match the server's etag. If the
   * provided etag does not match the server's etag, the request will fail with a 409 ABORTED error.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Optional. Etag of the resource. If this is provided, it must match the server's etag. If the
   * provided etag does not match the server's etag, the request will fail with a 409 ABORTED error.
   * @param etag etag or {@code null} for none
   */
  public HttpRoute setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the
   * routing rules to route the requests served by the gateway. Each gateway reference should match
   * the pattern: `projects/locations/global/gateways/`
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getGateways() {
    return gateways;
  }

  /**
   * Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the
   * routing rules to route the requests served by the gateway. Each gateway reference should match
   * the pattern: `projects/locations/global/gateways/`
   * @param gateways gateways or {@code null} for none
   */
  public HttpRoute setGateways(java.util.List<java.lang.String> gateways) {
    this.gateways = gateways;
    return this;
  }

  /**
   * Required. Hostnames define a set of hosts that should match against the HTTP host header to
   * select a HttpRoute to process the request. Hostname is the fully qualified domain name of a
   * network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A
   * hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself
   * as the first label. Hostname can be "precise" which is a domain name without the terminating
   * dot of a network host (e.g. `foo.example.com`) or "wildcard", which is a domain name prefixed
   * with a single wildcard label (e.g. `*.example.com`). Note that as per RFC1035 and RFC1123, a
   * label must consist of lower case alphanumeric characters or '-', and must start and end with an
   * alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or
   * Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting
   * hostnames, the configuration will be rejected. For example, while it is acceptable for routes
   * for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same Mesh (or
   * Gateways under the same scope), it is not possible to associate two routes both with
   * `*.bar.com` or both with `bar.com`.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getHostnames() {
    return hostnames;
  }

  /**
   * Required. Hostnames define a set of hosts that should match against the HTTP host header to
   * select a HttpRoute to process the request. Hostname is the fully qualified domain name of a
   * network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A
   * hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself
   * as the first label. Hostname can be "precise" which is a domain name without the terminating
   * dot of a network host (e.g. `foo.example.com`) or "wildcard", which is a domain name prefixed
   * with a single wildcard label (e.g. `*.example.com`). Note that as per RFC1035 and RFC1123, a
   * label must consist of lower case alphanumeric characters or '-', and must start and end with an
   * alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or
   * Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting
   * hostnames, the configuration will be rejected. For example, while it is acceptable for routes
   * for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same Mesh (or
   * Gateways under the same scope), it is not possible to associate two routes both with
   * `*.bar.com` or both with `bar.com`.
   * @param hostnames hostnames or {@code null} for none
   */
  public HttpRoute setHostnames(java.util.List<java.lang.String> hostnames) {
    this.hostnames = hostnames;
    return this;
  }

  /**
   * Optional. Set of label tags associated with the HttpRoute resource.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. Set of label tags associated with the HttpRoute resource.
   * @param labels labels or {@code null} for none
   */
  public HttpRoute setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing
   * rules to route the requests served by the mesh. Each mesh reference should match the pattern:
   * `projects/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMeshes() {
    return meshes;
  }

  /**
   * Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing
   * rules to route the requests served by the mesh. Each mesh reference should match the pattern:
   * `projects/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
   * @param meshes meshes or {@code null} for none
   */
  public HttpRoute setMeshes(java.util.List<java.lang.String> meshes) {
    this.meshes = meshes;
    return this;
  }

  /**
   * Identifier. Name of the HttpRoute resource. It matches pattern
   * `projects/locations/global/httpRoutes/http_route_name>`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. Name of the HttpRoute resource. It matches pattern
   * `projects/locations/global/httpRoutes/http_route_name>`.
   * @param name name or {@code null} for none
   */
  public HttpRoute setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Rules that define how traffic is routed and handled. Rules will be matched
   * sequentially based on the RouteMatch specified for the rule.
   * @return value or {@code null} for none
   */
  public java.util.List<HttpRouteRouteRule> getRules() {
    return rules;
  }

  /**
   * Required. Rules that define how traffic is routed and handled. Rules will be matched
   * sequentially based on the RouteMatch specified for the rule.
   * @param rules rules or {@code null} for none
   */
  public HttpRoute setRules(java.util.List<HttpRouteRouteRule> rules) {
    this.rules = rules;
    return this;
  }

  /**
   * Output only. Server-defined URL of this resource
   * @return value or {@code null} for none
   */
  public java.lang.String getSelfLink() {
    return selfLink;
  }

  /**
   * Output only. Server-defined URL of this resource
   * @param selfLink selfLink or {@code null} for none
   */
  public HttpRoute setSelfLink(java.lang.String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * Output only. The timestamp when the resource was updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The timestamp when the resource was updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public HttpRoute setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public HttpRoute set(String fieldName, Object value) {
    return (HttpRoute) super.set(fieldName, value);
  }

  @Override
  public HttpRoute clone() {
    return (HttpRoute) super.clone();
  }

}
