/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A PriceListProto can be used to represent any type of price lists, one of which is a menu of food
 * and drinks. It contains names and descriptions, together with its source URL list if it is
 * extracted or attributed to that URL. The names and descriptions are represented using repeated
 * PriceListNameInfo fields to allow versions in different languages. A PriceListProto may contain
 * multiple sections; in the context of a food menu, this would be multiple menu sections, e.g. for
 * breakfast, lunch, dinner, prix fixe, or dinner for two, etc. At least one menu section must be
 * present. Each section contains a number of items; for food menus, it may be FoodMenuItems defined
 * below. At least one item must be present in each section.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostorePriceListProto extends com.google.api.client.json.GenericJson {

  /**
   * For third party lists, represents the ID of the aggregator which provided this data. Optional.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger aggregatorId;

  /**
   * The time period when this price list is available. Establishments are not required to give
   * available_time for any given price list, however, when this field is not set, the price list is
   * understood as available any time the establishment is open.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreTimeScheduleProto availableTime;

  /**
   * Cuisine information if the location the price lists attached to is an eligible feature for a
   * food menu price list. Cuisine information should also only show up in a food price list.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> cuisines;

  /**
   * The repeated name_info field is for price lists listed in multiple languages. When a price list
   * has no names or descriptions, the size of the repeated field name_info may be 0. There should
   * be at most one name_info for any given language.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostorePriceListNameInfoProto> nameInfo;

  static {
    // hack to force ProGuard to consider GeostorePriceListNameInfoProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostorePriceListNameInfoProto.class);
  }

  /**
   * Each price list may have multiple sections. Note that these sections within the same price list
   * should most times contain only the same type of items for sale, e.g. all sections should
   * usually contain only food items if the enclosing price list is representing food menu. However,
   * sometimes such a requirement may be wrong, for example, McDonald's may sell burgers as well as
   * toys, and the toys may be in its own section. Thus we don't enforce any requirement that all
   * sections contain only the same type of items.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostorePriceListSectionProto> section;

  /**
   * Where this price list comes from. If set, this must also be a member of the price_list_url
   * field, and represents translations of a single URL.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreUrlListProto sourceUrl;

  /**
   * For third party lists, represents the ID of the aggregator which provided this data. Optional.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getAggregatorId() {
    return aggregatorId;
  }

  /**
   * For third party lists, represents the ID of the aggregator which provided this data. Optional.
   * @param aggregatorId aggregatorId or {@code null} for none
   */
  public GeostorePriceListProto setAggregatorId(java.math.BigInteger aggregatorId) {
    this.aggregatorId = aggregatorId;
    return this;
  }

  /**
   * The time period when this price list is available. Establishments are not required to give
   * available_time for any given price list, however, when this field is not set, the price list is
   * understood as available any time the establishment is open.
   * @return value or {@code null} for none
   */
  public GeostoreTimeScheduleProto getAvailableTime() {
    return availableTime;
  }

  /**
   * The time period when this price list is available. Establishments are not required to give
   * available_time for any given price list, however, when this field is not set, the price list is
   * understood as available any time the establishment is open.
   * @param availableTime availableTime or {@code null} for none
   */
  public GeostorePriceListProto setAvailableTime(GeostoreTimeScheduleProto availableTime) {
    this.availableTime = availableTime;
    return this;
  }

  /**
   * Cuisine information if the location the price lists attached to is an eligible feature for a
   * food menu price list. Cuisine information should also only show up in a food price list.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCuisines() {
    return cuisines;
  }

  /**
   * Cuisine information if the location the price lists attached to is an eligible feature for a
   * food menu price list. Cuisine information should also only show up in a food price list.
   * @param cuisines cuisines or {@code null} for none
   */
  public GeostorePriceListProto setCuisines(java.util.List<java.lang.String> cuisines) {
    this.cuisines = cuisines;
    return this;
  }

  /**
   * The repeated name_info field is for price lists listed in multiple languages. When a price list
   * has no names or descriptions, the size of the repeated field name_info may be 0. There should
   * be at most one name_info for any given language.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostorePriceListNameInfoProto> getNameInfo() {
    return nameInfo;
  }

  /**
   * The repeated name_info field is for price lists listed in multiple languages. When a price list
   * has no names or descriptions, the size of the repeated field name_info may be 0. There should
   * be at most one name_info for any given language.
   * @param nameInfo nameInfo or {@code null} for none
   */
  public GeostorePriceListProto setNameInfo(java.util.List<GeostorePriceListNameInfoProto> nameInfo) {
    this.nameInfo = nameInfo;
    return this;
  }

  /**
   * Each price list may have multiple sections. Note that these sections within the same price list
   * should most times contain only the same type of items for sale, e.g. all sections should
   * usually contain only food items if the enclosing price list is representing food menu. However,
   * sometimes such a requirement may be wrong, for example, McDonald's may sell burgers as well as
   * toys, and the toys may be in its own section. Thus we don't enforce any requirement that all
   * sections contain only the same type of items.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostorePriceListSectionProto> getSection() {
    return section;
  }

  /**
   * Each price list may have multiple sections. Note that these sections within the same price list
   * should most times contain only the same type of items for sale, e.g. all sections should
   * usually contain only food items if the enclosing price list is representing food menu. However,
   * sometimes such a requirement may be wrong, for example, McDonald's may sell burgers as well as
   * toys, and the toys may be in its own section. Thus we don't enforce any requirement that all
   * sections contain only the same type of items.
   * @param section section or {@code null} for none
   */
  public GeostorePriceListProto setSection(java.util.List<GeostorePriceListSectionProto> section) {
    this.section = section;
    return this;
  }

  /**
   * Where this price list comes from. If set, this must also be a member of the price_list_url
   * field, and represents translations of a single URL.
   * @return value or {@code null} for none
   */
  public GeostoreUrlListProto getSourceUrl() {
    return sourceUrl;
  }

  /**
   * Where this price list comes from. If set, this must also be a member of the price_list_url
   * field, and represents translations of a single URL.
   * @param sourceUrl sourceUrl or {@code null} for none
   */
  public GeostorePriceListProto setSourceUrl(GeostoreUrlListProto sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  @Override
  public GeostorePriceListProto set(String fieldName, Object value) {
    return (GeostorePriceListProto) super.set(fieldName, value);
  }

  @Override
  public GeostorePriceListProto clone() {
    return (GeostorePriceListProto) super.clone();
  }

}
