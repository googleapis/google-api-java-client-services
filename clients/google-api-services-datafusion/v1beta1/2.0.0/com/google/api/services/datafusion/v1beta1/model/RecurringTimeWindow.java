/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datafusion.v1beta1.model;

/**
 * Represents an arbitrary window of time that recurs.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Data Fusion API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RecurringTimeWindow extends com.google.api.client.json.GenericJson {

  /**
   * Required. An RRULE with format [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.8.5.3)
   * for how this window reccurs. They go on for the span of time between the start and end time.
   * The only supported FREQ value is "WEEKLY". To have something repeat every weekday, use:
   * "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR". This specifies how frequently the window starts. To have a
   * 9 am - 5 pm UTC-4 window every weekday, use something like: ``` start time =
   * 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence =
   * FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR ```
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String recurrence;

  /**
   * Required. The window representing the start and end time of recurrences. This field ignores the
   * date components of the provided timestamps. Only the time of day and duration between start and
   * end time are relevant.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TimeWindow window;

  /**
   * Required. An RRULE with format [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.8.5.3)
   * for how this window reccurs. They go on for the span of time between the start and end time.
   * The only supported FREQ value is "WEEKLY". To have something repeat every weekday, use:
   * "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR". This specifies how frequently the window starts. To have a
   * 9 am - 5 pm UTC-4 window every weekday, use something like: ``` start time =
   * 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence =
   * FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR ```
   * @return value or {@code null} for none
   */
  public java.lang.String getRecurrence() {
    return recurrence;
  }

  /**
   * Required. An RRULE with format [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.8.5.3)
   * for how this window reccurs. They go on for the span of time between the start and end time.
   * The only supported FREQ value is "WEEKLY". To have something repeat every weekday, use:
   * "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR". This specifies how frequently the window starts. To have a
   * 9 am - 5 pm UTC-4 window every weekday, use something like: ``` start time =
   * 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence =
   * FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR ```
   * @param recurrence recurrence or {@code null} for none
   */
  public RecurringTimeWindow setRecurrence(java.lang.String recurrence) {
    this.recurrence = recurrence;
    return this;
  }

  /**
   * Required. The window representing the start and end time of recurrences. This field ignores the
   * date components of the provided timestamps. Only the time of day and duration between start and
   * end time are relevant.
   * @return value or {@code null} for none
   */
  public TimeWindow getWindow() {
    return window;
  }

  /**
   * Required. The window representing the start and end time of recurrences. This field ignores the
   * date components of the provided timestamps. Only the time of day and duration between start and
   * end time are relevant.
   * @param window window or {@code null} for none
   */
  public RecurringTimeWindow setWindow(TimeWindow window) {
    this.window = window;
    return this;
  }

  @Override
  public RecurringTimeWindow set(String fieldName, Object value) {
    return (RecurringTimeWindow) super.set(fieldName, value);
  }

  @Override
  public RecurringTimeWindow clone() {
    return (RecurringTimeWindow) super.clone();
  }

}
