/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.run.v1alpha1.model;

/**
 * JobStatus represents the current state of a Job.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Run Admin API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class JobStatus extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The number of actively running instances. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer active;

  /**
   * Optional. Represents time when the job was completed. It is not guaranteed to be set in
   * happens-before order across separate operations. It is represented in RFC3339 form and is in
   * UTC. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String completionTime;

  /**
   * Optional. The latest available observations of a job's current state. More info:
   * https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<JobCondition> conditions;

  static {
    // hack to force ProGuard to consider JobCondition used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(JobCondition.class);
  }

  /**
   * Optional. The number of instances which reached phase Failed. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer failed;

  /**
   * Optional. ImageDigest holds the resolved digest for the image specified within
   * .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job.
   * This field holds the digest value regardless of whether a tag or digest was originally
   * specified in the Container object.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imageDigest;

  /**
   * Optional. Status of completed, failed, and running instances. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<InstanceStatus> instances;

  static {
    // hack to force ProGuard to consider InstanceStatus used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(InstanceStatus.class);
  }

  /**
   * Optional. The 'generation' of the job that was last processed by the controller.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer observedGeneration;

  /**
   * Optional. Represents time when the job was acknowledged by the job controller. It is not
   * guaranteed to be set in happens-before order across separate operations. It is represented in
   * RFC3339 form and is in UTC. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String startTime;

  /**
   * Optional. The number of instances which reached phase Succeeded. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer succeeded;

  /**
   * Optional. The number of actively running instances. +optional
   * @return value or {@code null} for none
   */
  public java.lang.Integer getActive() {
    return active;
  }

  /**
   * Optional. The number of actively running instances. +optional
   * @param active active or {@code null} for none
   */
  public JobStatus setActive(java.lang.Integer active) {
    this.active = active;
    return this;
  }

  /**
   * Optional. Represents time when the job was completed. It is not guaranteed to be set in
   * happens-before order across separate operations. It is represented in RFC3339 form and is in
   * UTC. +optional
   * @return value or {@code null} for none
   */
  public String getCompletionTime() {
    return completionTime;
  }

  /**
   * Optional. Represents time when the job was completed. It is not guaranteed to be set in
   * happens-before order across separate operations. It is represented in RFC3339 form and is in
   * UTC. +optional
   * @param completionTime completionTime or {@code null} for none
   */
  public JobStatus setCompletionTime(String completionTime) {
    this.completionTime = completionTime;
    return this;
  }

  /**
   * Optional. The latest available observations of a job's current state. More info:
   * https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
   * @return value or {@code null} for none
   */
  public java.util.List<JobCondition> getConditions() {
    return conditions;
  }

  /**
   * Optional. The latest available observations of a job's current state. More info:
   * https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/ +optional
   * @param conditions conditions or {@code null} for none
   */
  public JobStatus setConditions(java.util.List<JobCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  /**
   * Optional. The number of instances which reached phase Failed. +optional
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFailed() {
    return failed;
  }

  /**
   * Optional. The number of instances which reached phase Failed. +optional
   * @param failed failed or {@code null} for none
   */
  public JobStatus setFailed(java.lang.Integer failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Optional. ImageDigest holds the resolved digest for the image specified within
   * .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job.
   * This field holds the digest value regardless of whether a tag or digest was originally
   * specified in the Container object.
   * @return value or {@code null} for none
   */
  public java.lang.String getImageDigest() {
    return imageDigest;
  }

  /**
   * Optional. ImageDigest holds the resolved digest for the image specified within
   * .Spec.Template.Spec.Container.Image. The digest is resolved during the creation of the Job.
   * This field holds the digest value regardless of whether a tag or digest was originally
   * specified in the Container object.
   * @param imageDigest imageDigest or {@code null} for none
   */
  public JobStatus setImageDigest(java.lang.String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * Optional. Status of completed, failed, and running instances. +optional
   * @return value or {@code null} for none
   */
  public java.util.List<InstanceStatus> getInstances() {
    return instances;
  }

  /**
   * Optional. Status of completed, failed, and running instances. +optional
   * @param instances instances or {@code null} for none
   */
  public JobStatus setInstances(java.util.List<InstanceStatus> instances) {
    this.instances = instances;
    return this;
  }

  /**
   * Optional. The 'generation' of the job that was last processed by the controller.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getObservedGeneration() {
    return observedGeneration;
  }

  /**
   * Optional. The 'generation' of the job that was last processed by the controller.
   * @param observedGeneration observedGeneration or {@code null} for none
   */
  public JobStatus setObservedGeneration(java.lang.Integer observedGeneration) {
    this.observedGeneration = observedGeneration;
    return this;
  }

  /**
   * Optional. Represents time when the job was acknowledged by the job controller. It is not
   * guaranteed to be set in happens-before order across separate operations. It is represented in
   * RFC3339 form and is in UTC. +optional
   * @return value or {@code null} for none
   */
  public String getStartTime() {
    return startTime;
  }

  /**
   * Optional. Represents time when the job was acknowledged by the job controller. It is not
   * guaranteed to be set in happens-before order across separate operations. It is represented in
   * RFC3339 form and is in UTC. +optional
   * @param startTime startTime or {@code null} for none
   */
  public JobStatus setStartTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Optional. The number of instances which reached phase Succeeded. +optional
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSucceeded() {
    return succeeded;
  }

  /**
   * Optional. The number of instances which reached phase Succeeded. +optional
   * @param succeeded succeeded or {@code null} for none
   */
  public JobStatus setSucceeded(java.lang.Integer succeeded) {
    this.succeeded = succeeded;
    return this;
  }

  @Override
  public JobStatus set(String fieldName, Object value) {
    return (JobStatus) super.set(fieldName, value);
  }

  @Override
  public JobStatus clone() {
    return (JobStatus) super.clone();
  }

}
