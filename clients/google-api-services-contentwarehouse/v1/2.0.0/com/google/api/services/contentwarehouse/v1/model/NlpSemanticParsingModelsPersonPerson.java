/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for NlpSemanticParsingModelsPersonPerson.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSemanticParsingModelsPersonPerson extends com.google.api.client.json.GenericJson {

  /**
   * Alternative names like "John" for "Joan", with info such as RecognitionAlternateSource
   * indicating where is it from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<QualityQrewriteAlternativeNameInfo> alternativeNameInfo;

  /**
   * Alternative names, e.g., names with similar pronunciation, Kathy and Cathy.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> alternativeNames;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> annotationSource;

  /**
   * Contact metadata. Only available for personal contact.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<QualityQrewritePersonalContactData> contactData;

  /**
   * Required, but should only be used inside Aqua. Must not be used by outside clients!!
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingAnnotationEvalData evalData;

  /**
   * Indicates whether $Person is used for person-group reference. If true, then the
   * PersonalContactData in repeated contact_data field probably correspond to a group of different
   * persons, where $Person is used to represent family, kids, parents, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isPersonGroupReference;

  /**
   * Whether the person is from personal contacts (e.g. Focus contacts or device contacts) or the
   * person is constructed from a Gaia profile visible to the user (e.g. via Family Service).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isPersonalContact;

  /**
   * The name of the person without normalizations, preserves casing of the raw text, but removes
   * possible prefix/suffix. For example: raw_text: "Mr. John" normalized_text: "john" name: "John"
   * raw_text: "Tüll" normalized_text: "tuell" name: "Tüll"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Normalized text produced by annotator. Some annotators generate a normalized version to help
   * better match with contact list.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String normalizedText;

  /**
   * Contains information about a Copley Person reference (go/copley-people). Note that this
   * contains no information about the resolved people (e.g. names, phone numbers) but only about
   * the user's reference. Resolution metadata is stored in contact_data.pkg_person.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingQRefAnnotation pkgSemantics;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rawText;

  /**
   * Alternative names like "John" for "Joan", with info such as RecognitionAlternateSource
   * indicating where is it from.
   * @return value or {@code null} for none
   */
  public java.util.List<QualityQrewriteAlternativeNameInfo> getAlternativeNameInfo() {
    return alternativeNameInfo;
  }

  /**
   * Alternative names like "John" for "Joan", with info such as RecognitionAlternateSource
   * indicating where is it from.
   * @param alternativeNameInfo alternativeNameInfo or {@code null} for none
   */
  public NlpSemanticParsingModelsPersonPerson setAlternativeNameInfo(java.util.List<QualityQrewriteAlternativeNameInfo> alternativeNameInfo) {
    this.alternativeNameInfo = alternativeNameInfo;
    return this;
  }

  /**
   * Alternative names, e.g., names with similar pronunciation, Kathy and Cathy.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAlternativeNames() {
    return alternativeNames;
  }

  /**
   * Alternative names, e.g., names with similar pronunciation, Kathy and Cathy.
   * @param alternativeNames alternativeNames or {@code null} for none
   */
  public NlpSemanticParsingModelsPersonPerson setAlternativeNames(java.util.List<java.lang.String> alternativeNames) {
    this.alternativeNames = alternativeNames;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAnnotationSource() {
    return annotationSource;
  }

  /**
   * @param annotationSource annotationSource or {@code null} for none
   */
  public NlpSemanticParsingModelsPersonPerson setAnnotationSource(java.util.List<java.lang.String> annotationSource) {
    this.annotationSource = annotationSource;
    return this;
  }

  /**
   * Contact metadata. Only available for personal contact.
   * @return value or {@code null} for none
   */
  public java.util.List<QualityQrewritePersonalContactData> getContactData() {
    return contactData;
  }

  /**
   * Contact metadata. Only available for personal contact.
   * @param contactData contactData or {@code null} for none
   */
  public NlpSemanticParsingModelsPersonPerson setContactData(java.util.List<QualityQrewritePersonalContactData> contactData) {
    this.contactData = contactData;
    return this;
  }

  /**
   * Required, but should only be used inside Aqua. Must not be used by outside clients!!
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingAnnotationEvalData getEvalData() {
    return evalData;
  }

  /**
   * Required, but should only be used inside Aqua. Must not be used by outside clients!!
   * @param evalData evalData or {@code null} for none
   */
  public NlpSemanticParsingModelsPersonPerson setEvalData(NlpSemanticParsingAnnotationEvalData evalData) {
    this.evalData = evalData;
    return this;
  }

  /**
   * Indicates whether $Person is used for person-group reference. If true, then the
   * PersonalContactData in repeated contact_data field probably correspond to a group of different
   * persons, where $Person is used to represent family, kids, parents, etc.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsPersonGroupReference() {
    return isPersonGroupReference;
  }

  /**
   * Indicates whether $Person is used for person-group reference. If true, then the
   * PersonalContactData in repeated contact_data field probably correspond to a group of different
   * persons, where $Person is used to represent family, kids, parents, etc.
   * @param isPersonGroupReference isPersonGroupReference or {@code null} for none
   */
  public NlpSemanticParsingModelsPersonPerson setIsPersonGroupReference(java.lang.Boolean isPersonGroupReference) {
    this.isPersonGroupReference = isPersonGroupReference;
    return this;
  }

  /**
   * Whether the person is from personal contacts (e.g. Focus contacts or device contacts) or the
   * person is constructed from a Gaia profile visible to the user (e.g. via Family Service).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsPersonalContact() {
    return isPersonalContact;
  }

  /**
   * Whether the person is from personal contacts (e.g. Focus contacts or device contacts) or the
   * person is constructed from a Gaia profile visible to the user (e.g. via Family Service).
   * @param isPersonalContact isPersonalContact or {@code null} for none
   */
  public NlpSemanticParsingModelsPersonPerson setIsPersonalContact(java.lang.Boolean isPersonalContact) {
    this.isPersonalContact = isPersonalContact;
    return this;
  }

  /**
   * The name of the person without normalizations, preserves casing of the raw text, but removes
   * possible prefix/suffix. For example: raw_text: "Mr. John" normalized_text: "john" name: "John"
   * raw_text: "Tüll" normalized_text: "tuell" name: "Tüll"
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name of the person without normalizations, preserves casing of the raw text, but removes
   * possible prefix/suffix. For example: raw_text: "Mr. John" normalized_text: "john" name: "John"
   * raw_text: "Tüll" normalized_text: "tuell" name: "Tüll"
   * @param name name or {@code null} for none
   */
  public NlpSemanticParsingModelsPersonPerson setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Normalized text produced by annotator. Some annotators generate a normalized version to help
   * better match with contact list.
   * @return value or {@code null} for none
   */
  public java.lang.String getNormalizedText() {
    return normalizedText;
  }

  /**
   * Normalized text produced by annotator. Some annotators generate a normalized version to help
   * better match with contact list.
   * @param normalizedText normalizedText or {@code null} for none
   */
  public NlpSemanticParsingModelsPersonPerson setNormalizedText(java.lang.String normalizedText) {
    this.normalizedText = normalizedText;
    return this;
  }

  /**
   * Contains information about a Copley Person reference (go/copley-people). Note that this
   * contains no information about the resolved people (e.g. names, phone numbers) but only about
   * the user's reference. Resolution metadata is stored in contact_data.pkg_person.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingQRefAnnotation getPkgSemantics() {
    return pkgSemantics;
  }

  /**
   * Contains information about a Copley Person reference (go/copley-people). Note that this
   * contains no information about the resolved people (e.g. names, phone numbers) but only about
   * the user's reference. Resolution metadata is stored in contact_data.pkg_person.
   * @param pkgSemantics pkgSemantics or {@code null} for none
   */
  public NlpSemanticParsingModelsPersonPerson setPkgSemantics(NlpSemanticParsingQRefAnnotation pkgSemantics) {
    this.pkgSemantics = pkgSemantics;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getRawText() {
    return rawText;
  }

  /**
   * @param rawText rawText or {@code null} for none
   */
  public NlpSemanticParsingModelsPersonPerson setRawText(java.lang.String rawText) {
    this.rawText = rawText;
    return this;
  }

  @Override
  public NlpSemanticParsingModelsPersonPerson set(String fieldName, Object value) {
    return (NlpSemanticParsingModelsPersonPerson) super.set(fieldName, value);
  }

  @Override
  public NlpSemanticParsingModelsPersonPerson clone() {
    return (NlpSemanticParsingModelsPersonPerson) super.clone();
  }

}
