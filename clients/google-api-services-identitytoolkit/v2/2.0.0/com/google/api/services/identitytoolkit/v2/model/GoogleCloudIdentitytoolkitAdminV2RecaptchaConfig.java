/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.identitytoolkit.v2.model;

/**
 * The reCAPTCHA Enterprise integration config.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Identity Toolkit API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig extends com.google.api.client.json.GenericJson {

  /**
   * The reCAPTCHA config for email/password provider, containing the enforcement status. The
   * email/password provider contains all email related user flows protected by reCAPTCHA.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String emailPasswordEnforcementState;

  /**
   * The managed rules for authentication action based on reCAPTCHA scores. The rules are shared
   * across providers for a given tenant project.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule> managedRules;

  /**
   * The reCAPTCHA config for phone provider, containing the enforcement status. The phone provider
   * contains all SMS related user flows protected by reCAPTCHA.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String phoneEnforcementState;

  /**
   * The reCAPTCHA keys.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudIdentitytoolkitAdminV2RecaptchaKey> recaptchaKeys;

  /**
   * The managed rules for the authentication action based on reCAPTCHA toll fraud risk scores. Toll
   * fraud managed rules will only take effect when the phone_enforcement_state is AUDIT or ENFORCE
   * and use_sms_toll_fraud_protection is true.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudIdentitytoolkitAdminV2RecaptchaTollFraudManagedRule> tollFraudManagedRules;

  /**
   * Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useAccountDefender;

  /**
   * Whether to use the rCE bot score for reCAPTCHA phone provider. Can only be true when the
   * phone_enforcement_state is AUDIT or ENFORCE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useSmsBotScore;

  /**
   * Whether to use the rCE sms toll fraud protection risk score for reCAPTCHA phone provider. Can
   * only be true when the phone_enforcement_state is AUDIT or ENFORCE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useSmsTollFraudProtection;

  /**
   * The reCAPTCHA config for email/password provider, containing the enforcement status. The
   * email/password provider contains all email related user flows protected by reCAPTCHA.
   * @return value or {@code null} for none
   */
  public java.lang.String getEmailPasswordEnforcementState() {
    return emailPasswordEnforcementState;
  }

  /**
   * The reCAPTCHA config for email/password provider, containing the enforcement status. The
   * email/password provider contains all email related user flows protected by reCAPTCHA.
   * @param emailPasswordEnforcementState emailPasswordEnforcementState or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig setEmailPasswordEnforcementState(java.lang.String emailPasswordEnforcementState) {
    this.emailPasswordEnforcementState = emailPasswordEnforcementState;
    return this;
  }

  /**
   * The managed rules for authentication action based on reCAPTCHA scores. The rules are shared
   * across providers for a given tenant project.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule> getManagedRules() {
    return managedRules;
  }

  /**
   * The managed rules for authentication action based on reCAPTCHA scores. The rules are shared
   * across providers for a given tenant project.
   * @param managedRules managedRules or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig setManagedRules(java.util.List<GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule> managedRules) {
    this.managedRules = managedRules;
    return this;
  }

  /**
   * The reCAPTCHA config for phone provider, containing the enforcement status. The phone provider
   * contains all SMS related user flows protected by reCAPTCHA.
   * @return value or {@code null} for none
   */
  public java.lang.String getPhoneEnforcementState() {
    return phoneEnforcementState;
  }

  /**
   * The reCAPTCHA config for phone provider, containing the enforcement status. The phone provider
   * contains all SMS related user flows protected by reCAPTCHA.
   * @param phoneEnforcementState phoneEnforcementState or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig setPhoneEnforcementState(java.lang.String phoneEnforcementState) {
    this.phoneEnforcementState = phoneEnforcementState;
    return this;
  }

  /**
   * The reCAPTCHA keys.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudIdentitytoolkitAdminV2RecaptchaKey> getRecaptchaKeys() {
    return recaptchaKeys;
  }

  /**
   * The reCAPTCHA keys.
   * @param recaptchaKeys recaptchaKeys or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig setRecaptchaKeys(java.util.List<GoogleCloudIdentitytoolkitAdminV2RecaptchaKey> recaptchaKeys) {
    this.recaptchaKeys = recaptchaKeys;
    return this;
  }

  /**
   * The managed rules for the authentication action based on reCAPTCHA toll fraud risk scores. Toll
   * fraud managed rules will only take effect when the phone_enforcement_state is AUDIT or ENFORCE
   * and use_sms_toll_fraud_protection is true.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudIdentitytoolkitAdminV2RecaptchaTollFraudManagedRule> getTollFraudManagedRules() {
    return tollFraudManagedRules;
  }

  /**
   * The managed rules for the authentication action based on reCAPTCHA toll fraud risk scores. Toll
   * fraud managed rules will only take effect when the phone_enforcement_state is AUDIT or ENFORCE
   * and use_sms_toll_fraud_protection is true.
   * @param tollFraudManagedRules tollFraudManagedRules or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig setTollFraudManagedRules(java.util.List<GoogleCloudIdentitytoolkitAdminV2RecaptchaTollFraudManagedRule> tollFraudManagedRules) {
    this.tollFraudManagedRules = tollFraudManagedRules;
    return this;
  }

  /**
   * Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseAccountDefender() {
    return useAccountDefender;
  }

  /**
   * Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.
   * @param useAccountDefender useAccountDefender or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig setUseAccountDefender(java.lang.Boolean useAccountDefender) {
    this.useAccountDefender = useAccountDefender;
    return this;
  }

  /**
   * Whether to use the rCE bot score for reCAPTCHA phone provider. Can only be true when the
   * phone_enforcement_state is AUDIT or ENFORCE.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseSmsBotScore() {
    return useSmsBotScore;
  }

  /**
   * Whether to use the rCE bot score for reCAPTCHA phone provider. Can only be true when the
   * phone_enforcement_state is AUDIT or ENFORCE.
   * @param useSmsBotScore useSmsBotScore or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig setUseSmsBotScore(java.lang.Boolean useSmsBotScore) {
    this.useSmsBotScore = useSmsBotScore;
    return this;
  }

  /**
   * Whether to use the rCE sms toll fraud protection risk score for reCAPTCHA phone provider. Can
   * only be true when the phone_enforcement_state is AUDIT or ENFORCE.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseSmsTollFraudProtection() {
    return useSmsTollFraudProtection;
  }

  /**
   * Whether to use the rCE sms toll fraud protection risk score for reCAPTCHA phone provider. Can
   * only be true when the phone_enforcement_state is AUDIT or ENFORCE.
   * @param useSmsTollFraudProtection useSmsTollFraudProtection or {@code null} for none
   */
  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig setUseSmsTollFraudProtection(java.lang.Boolean useSmsTollFraudProtection) {
    this.useSmsTollFraudProtection = useSmsTollFraudProtection;
    return this;
  }

  @Override
  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig set(String fieldName, Object value) {
    return (GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig clone() {
    return (GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig) super.clone();
  }

}
