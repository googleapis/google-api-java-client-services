/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.solar.v1.model;

/**
 * SolarPanelConfig describes a particular placement of solar panels on the roof.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Solar API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SolarPanelConfig extends com.google.api.client.json.GenericJson {

  /**
   * Total number of panels. Note that this is redundant to (the sum of) the corresponding fields in
   * roof_segment_summaries.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer panelsCount;

  /**
   * Information about the production of each roof segment that is carrying at least one panel in
   * this layout. `roof_segment_summaries[i]` describes the i-th roof segment, including its size,
   * expected production and orientation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RoofSegmentSummary> roofSegmentSummaries;

  static {
    // hack to force ProGuard to consider RoofSegmentSummary used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(RoofSegmentSummary.class);
  }

  /**
   * How much sunlight energy this layout captures over the course of a year, in DC kWh, assuming
   * the panels described above.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float yearlyEnergyDcKwh;

  /**
   * Total number of panels. Note that this is redundant to (the sum of) the corresponding fields in
   * roof_segment_summaries.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPanelsCount() {
    return panelsCount;
  }

  /**
   * Total number of panels. Note that this is redundant to (the sum of) the corresponding fields in
   * roof_segment_summaries.
   * @param panelsCount panelsCount or {@code null} for none
   */
  public SolarPanelConfig setPanelsCount(java.lang.Integer panelsCount) {
    this.panelsCount = panelsCount;
    return this;
  }

  /**
   * Information about the production of each roof segment that is carrying at least one panel in
   * this layout. `roof_segment_summaries[i]` describes the i-th roof segment, including its size,
   * expected production and orientation.
   * @return value or {@code null} for none
   */
  public java.util.List<RoofSegmentSummary> getRoofSegmentSummaries() {
    return roofSegmentSummaries;
  }

  /**
   * Information about the production of each roof segment that is carrying at least one panel in
   * this layout. `roof_segment_summaries[i]` describes the i-th roof segment, including its size,
   * expected production and orientation.
   * @param roofSegmentSummaries roofSegmentSummaries or {@code null} for none
   */
  public SolarPanelConfig setRoofSegmentSummaries(java.util.List<RoofSegmentSummary> roofSegmentSummaries) {
    this.roofSegmentSummaries = roofSegmentSummaries;
    return this;
  }

  /**
   * How much sunlight energy this layout captures over the course of a year, in DC kWh, assuming
   * the panels described above.
   * @return value or {@code null} for none
   */
  public java.lang.Float getYearlyEnergyDcKwh() {
    return yearlyEnergyDcKwh;
  }

  /**
   * How much sunlight energy this layout captures over the course of a year, in DC kWh, assuming
   * the panels described above.
   * @param yearlyEnergyDcKwh yearlyEnergyDcKwh or {@code null} for none
   */
  public SolarPanelConfig setYearlyEnergyDcKwh(java.lang.Float yearlyEnergyDcKwh) {
    this.yearlyEnergyDcKwh = yearlyEnergyDcKwh;
    return this;
  }

  @Override
  public SolarPanelConfig set(String fieldName, Object value) {
    return (SolarPanelConfig) super.set(fieldName, value);
  }

  @Override
  public SolarPanelConfig clone() {
    return (SolarPanelConfig) super.clone();
  }

}
