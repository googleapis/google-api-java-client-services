/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A general-purpose buffer to contain sequences of samples. When representing a waveform, the
 * samples are the scalar values of an acoustic signal. When representing a sequence of feature
 * frames, the samples are vector-valued frames.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SpeechWaveHeader extends com.google.api.client.json.GenericJson {

  /**
   * Size of atomic type, in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer atomicSize;

  /**
   * Numeric type of data elements (if generic)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String atomicType;

  /**
   * For compressed signals with fixed bitrate, this is the number of bits per second.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float bitRate;

  /**
   * Byte-order of the atomic_type When atomic_type == "char", byte_order should be always "1". When
   * atomic_type == "int16", byte_order can be either "01" (Intel) or "10" (Motorola). Byte order
   * should default to Intel when in question.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String byteOrder;

  /**
   * Typically contains the parameter settings of the program that created the file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String details;

  /**
   * Array dimensions for a single sample. * For audio samples: * mono: rank==0, dimension==[1] *
   * stereo: rank==0, dimension==[2] (samples are interleaved) * For typical ASR features
   * representing energy, 12 MFCC coefficients, and first and second derivatives: * rank==1 and
   * dimension==[39].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> dimension;

  /**
   * The number of atomic elements stored per sample. This is the product of all the entries in the
   * dimension array. Written "out of order" in this file to be close to the dimension field, from
   * which it can always be computed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer elementsPerSample;

  /**
   * The rank of each sample. For a waveform (signals that are sequences of scalar values), this is
   * 0. For vector-valued signals (used as signals containing sequences of features, for example),
   * this is 1. scalar=0, vector=1, matrix=2, ...
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rank;

  /**
   * Sample encoding. Can be "ulaw".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sampleCoding;

  /**
   * For periodic signals, this is the number samples per second, else 0.0
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float sampleRate;

  /**
   * Size of a single sample, in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer sampleSize;

  /**
   * Structure of each sample. "generic" means that the samples are multi-dimensional arrays of
   * atomic_type with the specified rank.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sampleType;

  /**
   * Time origin for the signal, in seconds. Warning: Using float can result in rounding errors:
   * float's smallest distance between two representable values (1 ULP; see
   * https://en.wikipedia.org/wiki/Unit_in_the_last_place) between 1024 and 2048 (representing
   * ~17-34 min) is 0.0001220703125, what is approximately double of what we need to represent 1
   * sample in a 16 kHz sample rate audio. The error is double in the 2048s-4096s, 4x in the 4096s-
   * 8192s range etc. Higher sample rate encounters rounding errors earlier: with 96 kHz, rounding
   * errors start at ~2 min (128s).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float startTime;

  /**
   * The number of samples in file. Can be inferred for generics from file size.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long totalSamples;

  /**
   * Size of atomic type, in bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAtomicSize() {
    return atomicSize;
  }

  /**
   * Size of atomic type, in bytes.
   * @param atomicSize atomicSize or {@code null} for none
   */
  public SpeechWaveHeader setAtomicSize(java.lang.Integer atomicSize) {
    this.atomicSize = atomicSize;
    return this;
  }

  /**
   * Numeric type of data elements (if generic)
   * @return value or {@code null} for none
   */
  public java.lang.String getAtomicType() {
    return atomicType;
  }

  /**
   * Numeric type of data elements (if generic)
   * @param atomicType atomicType or {@code null} for none
   */
  public SpeechWaveHeader setAtomicType(java.lang.String atomicType) {
    this.atomicType = atomicType;
    return this;
  }

  /**
   * For compressed signals with fixed bitrate, this is the number of bits per second.
   * @return value or {@code null} for none
   */
  public java.lang.Float getBitRate() {
    return bitRate;
  }

  /**
   * For compressed signals with fixed bitrate, this is the number of bits per second.
   * @param bitRate bitRate or {@code null} for none
   */
  public SpeechWaveHeader setBitRate(java.lang.Float bitRate) {
    this.bitRate = bitRate;
    return this;
  }

  /**
   * Byte-order of the atomic_type When atomic_type == "char", byte_order should be always "1". When
   * atomic_type == "int16", byte_order can be either "01" (Intel) or "10" (Motorola). Byte order
   * should default to Intel when in question.
   * @return value or {@code null} for none
   */
  public java.lang.String getByteOrder() {
    return byteOrder;
  }

  /**
   * Byte-order of the atomic_type When atomic_type == "char", byte_order should be always "1". When
   * atomic_type == "int16", byte_order can be either "01" (Intel) or "10" (Motorola). Byte order
   * should default to Intel when in question.
   * @param byteOrder byteOrder or {@code null} for none
   */
  public SpeechWaveHeader setByteOrder(java.lang.String byteOrder) {
    this.byteOrder = byteOrder;
    return this;
  }

  /**
   * Typically contains the parameter settings of the program that created the file.
   * @return value or {@code null} for none
   */
  public java.lang.String getDetails() {
    return details;
  }

  /**
   * Typically contains the parameter settings of the program that created the file.
   * @param details details or {@code null} for none
   */
  public SpeechWaveHeader setDetails(java.lang.String details) {
    this.details = details;
    return this;
  }

  /**
   * Array dimensions for a single sample. * For audio samples: * mono: rank==0, dimension==[1] *
   * stereo: rank==0, dimension==[2] (samples are interleaved) * For typical ASR features
   * representing energy, 12 MFCC coefficients, and first and second derivatives: * rank==1 and
   * dimension==[39].
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getDimension() {
    return dimension;
  }

  /**
   * Array dimensions for a single sample. * For audio samples: * mono: rank==0, dimension==[1] *
   * stereo: rank==0, dimension==[2] (samples are interleaved) * For typical ASR features
   * representing energy, 12 MFCC coefficients, and first and second derivatives: * rank==1 and
   * dimension==[39].
   * @param dimension dimension or {@code null} for none
   */
  public SpeechWaveHeader setDimension(java.util.List<java.lang.Integer> dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * The number of atomic elements stored per sample. This is the product of all the entries in the
   * dimension array. Written "out of order" in this file to be close to the dimension field, from
   * which it can always be computed.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getElementsPerSample() {
    return elementsPerSample;
  }

  /**
   * The number of atomic elements stored per sample. This is the product of all the entries in the
   * dimension array. Written "out of order" in this file to be close to the dimension field, from
   * which it can always be computed.
   * @param elementsPerSample elementsPerSample or {@code null} for none
   */
  public SpeechWaveHeader setElementsPerSample(java.lang.Integer elementsPerSample) {
    this.elementsPerSample = elementsPerSample;
    return this;
  }

  /**
   * The rank of each sample. For a waveform (signals that are sequences of scalar values), this is
   * 0. For vector-valued signals (used as signals containing sequences of features, for example),
   * this is 1. scalar=0, vector=1, matrix=2, ...
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRank() {
    return rank;
  }

  /**
   * The rank of each sample. For a waveform (signals that are sequences of scalar values), this is
   * 0. For vector-valued signals (used as signals containing sequences of features, for example),
   * this is 1. scalar=0, vector=1, matrix=2, ...
   * @param rank rank or {@code null} for none
   */
  public SpeechWaveHeader setRank(java.lang.Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Sample encoding. Can be "ulaw".
   * @return value or {@code null} for none
   */
  public java.lang.String getSampleCoding() {
    return sampleCoding;
  }

  /**
   * Sample encoding. Can be "ulaw".
   * @param sampleCoding sampleCoding or {@code null} for none
   */
  public SpeechWaveHeader setSampleCoding(java.lang.String sampleCoding) {
    this.sampleCoding = sampleCoding;
    return this;
  }

  /**
   * For periodic signals, this is the number samples per second, else 0.0
   * @return value or {@code null} for none
   */
  public java.lang.Float getSampleRate() {
    return sampleRate;
  }

  /**
   * For periodic signals, this is the number samples per second, else 0.0
   * @param sampleRate sampleRate or {@code null} for none
   */
  public SpeechWaveHeader setSampleRate(java.lang.Float sampleRate) {
    this.sampleRate = sampleRate;
    return this;
  }

  /**
   * Size of a single sample, in bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSampleSize() {
    return sampleSize;
  }

  /**
   * Size of a single sample, in bytes.
   * @param sampleSize sampleSize or {@code null} for none
   */
  public SpeechWaveHeader setSampleSize(java.lang.Integer sampleSize) {
    this.sampleSize = sampleSize;
    return this;
  }

  /**
   * Structure of each sample. "generic" means that the samples are multi-dimensional arrays of
   * atomic_type with the specified rank.
   * @return value or {@code null} for none
   */
  public java.lang.String getSampleType() {
    return sampleType;
  }

  /**
   * Structure of each sample. "generic" means that the samples are multi-dimensional arrays of
   * atomic_type with the specified rank.
   * @param sampleType sampleType or {@code null} for none
   */
  public SpeechWaveHeader setSampleType(java.lang.String sampleType) {
    this.sampleType = sampleType;
    return this;
  }

  /**
   * Time origin for the signal, in seconds. Warning: Using float can result in rounding errors:
   * float's smallest distance between two representable values (1 ULP; see
   * https://en.wikipedia.org/wiki/Unit_in_the_last_place) between 1024 and 2048 (representing
   * ~17-34 min) is 0.0001220703125, what is approximately double of what we need to represent 1
   * sample in a 16 kHz sample rate audio. The error is double in the 2048s-4096s, 4x in the 4096s-
   * 8192s range etc. Higher sample rate encounters rounding errors earlier: with 96 kHz, rounding
   * errors start at ~2 min (128s).
   * @return value or {@code null} for none
   */
  public java.lang.Float getStartTime() {
    return startTime;
  }

  /**
   * Time origin for the signal, in seconds. Warning: Using float can result in rounding errors:
   * float's smallest distance between two representable values (1 ULP; see
   * https://en.wikipedia.org/wiki/Unit_in_the_last_place) between 1024 and 2048 (representing
   * ~17-34 min) is 0.0001220703125, what is approximately double of what we need to represent 1
   * sample in a 16 kHz sample rate audio. The error is double in the 2048s-4096s, 4x in the 4096s-
   * 8192s range etc. Higher sample rate encounters rounding errors earlier: with 96 kHz, rounding
   * errors start at ~2 min (128s).
   * @param startTime startTime or {@code null} for none
   */
  public SpeechWaveHeader setStartTime(java.lang.Float startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The number of samples in file. Can be inferred for generics from file size.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTotalSamples() {
    return totalSamples;
  }

  /**
   * The number of samples in file. Can be inferred for generics from file size.
   * @param totalSamples totalSamples or {@code null} for none
   */
  public SpeechWaveHeader setTotalSamples(java.lang.Long totalSamples) {
    this.totalSamples = totalSamples;
    return this;
  }

  @Override
  public SpeechWaveHeader set(String fieldName, Object value) {
    return (SpeechWaveHeader) super.set(fieldName, value);
  }

  @Override
  public SpeechWaveHeader clone() {
    return (SpeechWaveHeader) super.clone();
  }

}
