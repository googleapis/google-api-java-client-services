/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * The ArgumentValue reference to Mention.CompoundMention.Component. Next available tag number: 4
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RepositoryWebrefComponentReference extends com.google.api.client.json.GenericJson {

  /**
   * Optionally the freebase_mid of the WebrefEntity which the Component identifies via
   * entity_index. This is purely to help humans diagnose the WebrefEntities structure, may not
   * always be present and should not be used by production code. Use
   * QueryJoinToMeaningStructConverter to compose a proper value in place of the component
   * reference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String debugEntity;

  /**
   * The WebrefEntity referenced by `index` is equivalent to this function call in this context, but
   * not universally such that we don't want to recursively expand its MRF. Use this for example if
   * an entity corresponds to a category in an Intersect: CellPhones() & RelatedTo(/m/foo), where
   * /m/cell_phones is equivalent to CellPhones() (and may or may not have an annotated span), but
   * we don't want to generally assert that /m/cell_phones == CellPhones(). This cannot be an actual
   * FunctionCall to avoid a circular dependency.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String funcallName;

  /**
   * The index of the Component of the CompoundMention which has the mrf_index of this MRF
   * expression in WebrefEntity. Required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer index;

  /**
   * Optionally the freebase_mid of the WebrefEntity which the Component identifies via
   * entity_index. This is purely to help humans diagnose the WebrefEntities structure, may not
   * always be present and should not be used by production code. Use
   * QueryJoinToMeaningStructConverter to compose a proper value in place of the component
   * reference.
   * @return value or {@code null} for none
   */
  public java.lang.String getDebugEntity() {
    return debugEntity;
  }

  /**
   * Optionally the freebase_mid of the WebrefEntity which the Component identifies via
   * entity_index. This is purely to help humans diagnose the WebrefEntities structure, may not
   * always be present and should not be used by production code. Use
   * QueryJoinToMeaningStructConverter to compose a proper value in place of the component
   * reference.
   * @param debugEntity debugEntity or {@code null} for none
   */
  public RepositoryWebrefComponentReference setDebugEntity(java.lang.String debugEntity) {
    this.debugEntity = debugEntity;
    return this;
  }

  /**
   * The WebrefEntity referenced by `index` is equivalent to this function call in this context, but
   * not universally such that we don't want to recursively expand its MRF. Use this for example if
   * an entity corresponds to a category in an Intersect: CellPhones() & RelatedTo(/m/foo), where
   * /m/cell_phones is equivalent to CellPhones() (and may or may not have an annotated span), but
   * we don't want to generally assert that /m/cell_phones == CellPhones(). This cannot be an actual
   * FunctionCall to avoid a circular dependency.
   * @return value or {@code null} for none
   */
  public java.lang.String getFuncallName() {
    return funcallName;
  }

  /**
   * The WebrefEntity referenced by `index` is equivalent to this function call in this context, but
   * not universally such that we don't want to recursively expand its MRF. Use this for example if
   * an entity corresponds to a category in an Intersect: CellPhones() & RelatedTo(/m/foo), where
   * /m/cell_phones is equivalent to CellPhones() (and may or may not have an annotated span), but
   * we don't want to generally assert that /m/cell_phones == CellPhones(). This cannot be an actual
   * FunctionCall to avoid a circular dependency.
   * @param funcallName funcallName or {@code null} for none
   */
  public RepositoryWebrefComponentReference setFuncallName(java.lang.String funcallName) {
    this.funcallName = funcallName;
    return this;
  }

  /**
   * The index of the Component of the CompoundMention which has the mrf_index of this MRF
   * expression in WebrefEntity. Required.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getIndex() {
    return index;
  }

  /**
   * The index of the Component of the CompoundMention which has the mrf_index of this MRF
   * expression in WebrefEntity. Required.
   * @param index index or {@code null} for none
   */
  public RepositoryWebrefComponentReference setIndex(java.lang.Integer index) {
    this.index = index;
    return this;
  }

  @Override
  public RepositoryWebrefComponentReference set(String fieldName, Object value) {
    return (RepositoryWebrefComponentReference) super.set(fieldName, value);
  }

  @Override
  public RepositoryWebrefComponentReference clone() {
    return (RepositoryWebrefComponentReference) super.clone();
  }

}
