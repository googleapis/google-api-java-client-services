/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Represents a color in the RGBA color space. This message mirrors google.type.Color.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiCoreTypesGovernedColor extends com.google.api.client.json.GenericJson {

  /**
   * The fraction of this color that should be applied to the pixel. That is, the final pixel color
   * is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background
   * color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0
   * corresponds to a completely transparent color. If omitted, this color object is to be rendered
   * as a solid color (as if the alpha value had been explicitly given with a value of 1.0).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float alpha;

  /**
   * The amount of blue in the color as a value in the interval [0, 1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float blue;

  /**
   * The amount of green in the color as a value in the interval [0, 1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float green;

  /**
   * The amount of red in the color as a value in the interval [0, 1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float red;

  /**
   * The fraction of this color that should be applied to the pixel. That is, the final pixel color
   * is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background
   * color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0
   * corresponds to a completely transparent color. If omitted, this color object is to be rendered
   * as a solid color (as if the alpha value had been explicitly given with a value of 1.0).
   * @return value or {@code null} for none
   */
  public java.lang.Float getAlpha() {
    return alpha;
  }

  /**
   * The fraction of this color that should be applied to the pixel. That is, the final pixel color
   * is defined by the equation: pixel color = alpha * (this color) + (1.0 - alpha) * (background
   * color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0
   * corresponds to a completely transparent color. If omitted, this color object is to be rendered
   * as a solid color (as if the alpha value had been explicitly given with a value of 1.0).
   * @param alpha alpha or {@code null} for none
   */
  public AssistantApiCoreTypesGovernedColor setAlpha(java.lang.Float alpha) {
    this.alpha = alpha;
    return this;
  }

  /**
   * The amount of blue in the color as a value in the interval [0, 1].
   * @return value or {@code null} for none
   */
  public java.lang.Float getBlue() {
    return blue;
  }

  /**
   * The amount of blue in the color as a value in the interval [0, 1].
   * @param blue blue or {@code null} for none
   */
  public AssistantApiCoreTypesGovernedColor setBlue(java.lang.Float blue) {
    this.blue = blue;
    return this;
  }

  /**
   * The amount of green in the color as a value in the interval [0, 1].
   * @return value or {@code null} for none
   */
  public java.lang.Float getGreen() {
    return green;
  }

  /**
   * The amount of green in the color as a value in the interval [0, 1].
   * @param green green or {@code null} for none
   */
  public AssistantApiCoreTypesGovernedColor setGreen(java.lang.Float green) {
    this.green = green;
    return this;
  }

  /**
   * The amount of red in the color as a value in the interval [0, 1].
   * @return value or {@code null} for none
   */
  public java.lang.Float getRed() {
    return red;
  }

  /**
   * The amount of red in the color as a value in the interval [0, 1].
   * @param red red or {@code null} for none
   */
  public AssistantApiCoreTypesGovernedColor setRed(java.lang.Float red) {
    this.red = red;
    return this;
  }

  @Override
  public AssistantApiCoreTypesGovernedColor set(String fieldName, Object value) {
    return (AssistantApiCoreTypesGovernedColor) super.set(fieldName, value);
  }

  @Override
  public AssistantApiCoreTypesGovernedColor clone() {
    return (AssistantApiCoreTypesGovernedColor) super.clone();
  }

}
