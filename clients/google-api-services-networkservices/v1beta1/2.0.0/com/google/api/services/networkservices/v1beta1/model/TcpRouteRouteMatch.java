/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networkservices.v1beta1.model;

/**
 * RouteMatch defines the predicate used to match requests to a given action. Multiple match types
 * are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally
 * match traffic.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Services API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TcpRouteRouteMatch extends com.google.api.client.json.GenericJson {

  /**
   * Required. Must be specified in the CIDR range format. A CIDR range consists of an IP Address
   * and a prefix length to construct the subnet mask. By default, the prefix length is 32 (i.e.
   * matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches
   * against this exact IP address. "10.0.0.0/8" - matches against any IP address within the
   * 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String address;

  /**
   * Required. Specifies the destination port to match against.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String port;

  /**
   * Required. Must be specified in the CIDR range format. A CIDR range consists of an IP Address
   * and a prefix length to construct the subnet mask. By default, the prefix length is 32 (i.e.
   * matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches
   * against this exact IP address. "10.0.0.0/8" - matches against any IP address within the
   * 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
   * @return value or {@code null} for none
   */
  public java.lang.String getAddress() {
    return address;
  }

  /**
   * Required. Must be specified in the CIDR range format. A CIDR range consists of an IP Address
   * and a prefix length to construct the subnet mask. By default, the prefix length is 32 (i.e.
   * matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches
   * against this exact IP address. "10.0.0.0/8" - matches against any IP address within the
   * 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
   * @param address address or {@code null} for none
   */
  public TcpRouteRouteMatch setAddress(java.lang.String address) {
    this.address = address;
    return this;
  }

  /**
   * Required. Specifies the destination port to match against.
   * @return value or {@code null} for none
   */
  public java.lang.String getPort() {
    return port;
  }

  /**
   * Required. Specifies the destination port to match against.
   * @param port port or {@code null} for none
   */
  public TcpRouteRouteMatch setPort(java.lang.String port) {
    this.port = port;
    return this;
  }

  @Override
  public TcpRouteRouteMatch set(String fieldName, Object value) {
    return (TcpRouteRouteMatch) super.set(fieldName, value);
  }

  @Override
  public TcpRouteRouteMatch clone() {
    return (TcpRouteRouteMatch) super.clone();
  }

}
