/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.trafficdirector.v2.model;

/**
 * Describes a dynamically loaded listener via the LDS API. [#next-free-field: 6]
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Traffic Director API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DynamicListener extends com.google.api.client.json.GenericJson {

  /**
   * The listener state for any active listener by this name. These are listeners that are available
   * to service data plane traffic.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DynamicListenerState activeState;

  /**
   * The listener state for any draining listener by this name. These are listeners that are
   * currently undergoing draining in preparation to stop servicing data plane traffic. Note that if
   * attempting to recreate an Envoy configuration from a configuration dump, the draining listeners
   * should generally be discarded.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DynamicListenerState drainingState;

  /**
   * Set if the last update failed, cleared after the next successful update.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private UpdateFailureState errorState;

  /**
   * The name or unique id of this listener, pulled from the DynamicListenerState config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The listener state for any warming listener by this name. These are listeners that are
   * currently undergoing warming in preparation to service data plane traffic. Note that if
   * attempting to recreate an Envoy configuration from a configuration dump, the warming listeners
   * should generally be discarded.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DynamicListenerState warmingState;

  /**
   * The listener state for any active listener by this name. These are listeners that are available
   * to service data plane traffic.
   * @return value or {@code null} for none
   */
  public DynamicListenerState getActiveState() {
    return activeState;
  }

  /**
   * The listener state for any active listener by this name. These are listeners that are available
   * to service data plane traffic.
   * @param activeState activeState or {@code null} for none
   */
  public DynamicListener setActiveState(DynamicListenerState activeState) {
    this.activeState = activeState;
    return this;
  }

  /**
   * The listener state for any draining listener by this name. These are listeners that are
   * currently undergoing draining in preparation to stop servicing data plane traffic. Note that if
   * attempting to recreate an Envoy configuration from a configuration dump, the draining listeners
   * should generally be discarded.
   * @return value or {@code null} for none
   */
  public DynamicListenerState getDrainingState() {
    return drainingState;
  }

  /**
   * The listener state for any draining listener by this name. These are listeners that are
   * currently undergoing draining in preparation to stop servicing data plane traffic. Note that if
   * attempting to recreate an Envoy configuration from a configuration dump, the draining listeners
   * should generally be discarded.
   * @param drainingState drainingState or {@code null} for none
   */
  public DynamicListener setDrainingState(DynamicListenerState drainingState) {
    this.drainingState = drainingState;
    return this;
  }

  /**
   * Set if the last update failed, cleared after the next successful update.
   * @return value or {@code null} for none
   */
  public UpdateFailureState getErrorState() {
    return errorState;
  }

  /**
   * Set if the last update failed, cleared after the next successful update.
   * @param errorState errorState or {@code null} for none
   */
  public DynamicListener setErrorState(UpdateFailureState errorState) {
    this.errorState = errorState;
    return this;
  }

  /**
   * The name or unique id of this listener, pulled from the DynamicListenerState config.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name or unique id of this listener, pulled from the DynamicListenerState config.
   * @param name name or {@code null} for none
   */
  public DynamicListener setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The listener state for any warming listener by this name. These are listeners that are
   * currently undergoing warming in preparation to service data plane traffic. Note that if
   * attempting to recreate an Envoy configuration from a configuration dump, the warming listeners
   * should generally be discarded.
   * @return value or {@code null} for none
   */
  public DynamicListenerState getWarmingState() {
    return warmingState;
  }

  /**
   * The listener state for any warming listener by this name. These are listeners that are
   * currently undergoing warming in preparation to service data plane traffic. Note that if
   * attempting to recreate an Envoy configuration from a configuration dump, the warming listeners
   * should generally be discarded.
   * @param warmingState warmingState or {@code null} for none
   */
  public DynamicListener setWarmingState(DynamicListenerState warmingState) {
    this.warmingState = warmingState;
    return this;
  }

  @Override
  public DynamicListener set(String fieldName, Object value) {
    return (DynamicListener) super.set(fieldName, value);
  }

  @Override
  public DynamicListener clone() {
    return (DynamicListener) super.clone();
  }

}
