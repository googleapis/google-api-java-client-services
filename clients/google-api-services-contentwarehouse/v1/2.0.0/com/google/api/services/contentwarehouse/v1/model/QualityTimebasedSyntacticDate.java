/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Next ID: 21
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class QualityTimebasedSyntacticDate extends com.google.api.client.json.GenericJson {

  /**
   * The following field is set only when the byline date is different from the "date" field above.
   * Currently this happens when the byline date is within the 24 hours of the crawl time, or close
   * but not exactly the same as blog post date due to time zone. The syntactic date is never later
   * than the crawl time. NOTE: If this field is set, use_as_byline_date will be meaningless, and
   * better to be cleared.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long bylineDate;

  /**
   * The number of seconds since epoch (Jan 1, 1970). This can be negative to indicate a publication
   * date that is before 1970. For example, the ones from NY Times archive:
   * "http://select.nytimes.com/gst/abstract.html?res=F10B13FB3D5A10728FDDAF089"
   * "4DD405B8588F1D3=91=world+war+II=p"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long date;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private QualityTimebasedSyntacticDateDateRange daterange;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String debugInfo;

  /**
   * If set to true, the source of the date has explicit time zone specification. Note: This is only
   * used internally and should not be populated in docjoins.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean fromExplicitTimeZone;

  /**
   * Used to store extra information about the syntactic date. For now only two bits are set. Please
   * refer to the encoding/decoding functions provided in: quality/timebased/syntacticdate/util.h
   * Bit 1 = High confidence byline. This bit is set if the syntactic date has a byline date and
   * this date is considered to be high confidence. Bit 2 = High confidence byline without content
   * age. This bit is set if the syntactic date has a byline date and this date is considered to be
   * high confidence without support from content age.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer info;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private QualityTimebasedSyntacticDatePosition position;

  /**
   * The precision mark should be of type PRECISION_MARK.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer precisionMark;

  /**
   * If this is true, do not use syntactic date in date restricts.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean syntacticDateNotForRestrict;

  /**
   * Indicates the time zone offset in seconds applied to derive `date' in UTC. Example: Annotation:
   * "1pm PST" (UTC-8) => -8 * 3600 = -28800 Note: This is only used internally and should not be
   * populated in docjoins.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long timeZoneOffsetSeconds;

  /**
   * This bit is set if we believe that the syntactic date is really high confidence, but does not
   * qualify as a byline date.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean trustSyntacticDateInRanking;

  /**
   * Whether this date is good for display as the snippet byline date.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useAsBylineDate;

  /**
   * This bit is set if the syntactic date is good to be used in site-level timezone guessing
   * statistics calculation. (The date should be absolute date having a timestamp with hour and
   * minute level information. It can come with or without time zone information, which is indicated
   * in from_explicit_time_zone field defined below.)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useInTimeZoneGuessingMode;

  /**
   * If true, the DateRange is used as date restrict, if false, the date is used as date restrict.
   * Has no effect if syntactic_date_not_for_restrict is true.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useRangeInsteadOfDateForRestrict;

  /**
   * The following field is set only when the byline date is different from the "date" field above.
   * Currently this happens when the byline date is within the 24 hours of the crawl time, or close
   * but not exactly the same as blog post date due to time zone. The syntactic date is never later
   * than the crawl time. NOTE: If this field is set, use_as_byline_date will be meaningless, and
   * better to be cleared.
   * @return value or {@code null} for none
   */
  public java.lang.Long getBylineDate() {
    return bylineDate;
  }

  /**
   * The following field is set only when the byline date is different from the "date" field above.
   * Currently this happens when the byline date is within the 24 hours of the crawl time, or close
   * but not exactly the same as blog post date due to time zone. The syntactic date is never later
   * than the crawl time. NOTE: If this field is set, use_as_byline_date will be meaningless, and
   * better to be cleared.
   * @param bylineDate bylineDate or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setBylineDate(java.lang.Long bylineDate) {
    this.bylineDate = bylineDate;
    return this;
  }

  /**
   * The number of seconds since epoch (Jan 1, 1970). This can be negative to indicate a publication
   * date that is before 1970. For example, the ones from NY Times archive:
   * "http://select.nytimes.com/gst/abstract.html?res=F10B13FB3D5A10728FDDAF089"
   * "4DD405B8588F1D3=91=world+war+II=p"
   * @return value or {@code null} for none
   */
  public java.lang.Long getDate() {
    return date;
  }

  /**
   * The number of seconds since epoch (Jan 1, 1970). This can be negative to indicate a publication
   * date that is before 1970. For example, the ones from NY Times archive:
   * "http://select.nytimes.com/gst/abstract.html?res=F10B13FB3D5A10728FDDAF089"
   * "4DD405B8588F1D3=91=world+war+II=p"
   * @param date date or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setDate(java.lang.Long date) {
    this.date = date;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public QualityTimebasedSyntacticDateDateRange getDaterange() {
    return daterange;
  }

  /**
   * @param daterange daterange or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setDaterange(QualityTimebasedSyntacticDateDateRange daterange) {
    this.daterange = daterange;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getDebugInfo() {
    return debugInfo;
  }

  /**
   * @param debugInfo debugInfo or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setDebugInfo(java.lang.String debugInfo) {
    this.debugInfo = debugInfo;
    return this;
  }

  /**
   * If set to true, the source of the date has explicit time zone specification. Note: This is only
   * used internally and should not be populated in docjoins.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getFromExplicitTimeZone() {
    return fromExplicitTimeZone;
  }

  /**
   * If set to true, the source of the date has explicit time zone specification. Note: This is only
   * used internally and should not be populated in docjoins.
   * @param fromExplicitTimeZone fromExplicitTimeZone or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setFromExplicitTimeZone(java.lang.Boolean fromExplicitTimeZone) {
    this.fromExplicitTimeZone = fromExplicitTimeZone;
    return this;
  }

  /**
   * Used to store extra information about the syntactic date. For now only two bits are set. Please
   * refer to the encoding/decoding functions provided in: quality/timebased/syntacticdate/util.h
   * Bit 1 = High confidence byline. This bit is set if the syntactic date has a byline date and
   * this date is considered to be high confidence. Bit 2 = High confidence byline without content
   * age. This bit is set if the syntactic date has a byline date and this date is considered to be
   * high confidence without support from content age.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getInfo() {
    return info;
  }

  /**
   * Used to store extra information about the syntactic date. For now only two bits are set. Please
   * refer to the encoding/decoding functions provided in: quality/timebased/syntacticdate/util.h
   * Bit 1 = High confidence byline. This bit is set if the syntactic date has a byline date and
   * this date is considered to be high confidence. Bit 2 = High confidence byline without content
   * age. This bit is set if the syntactic date has a byline date and this date is considered to be
   * high confidence without support from content age.
   * @param info info or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setInfo(java.lang.Integer info) {
    this.info = info;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public QualityTimebasedSyntacticDatePosition getPosition() {
    return position;
  }

  /**
   * @param position position or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setPosition(QualityTimebasedSyntacticDatePosition position) {
    this.position = position;
    return this;
  }

  /**
   * The precision mark should be of type PRECISION_MARK.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPrecisionMark() {
    return precisionMark;
  }

  /**
   * The precision mark should be of type PRECISION_MARK.
   * @param precisionMark precisionMark or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setPrecisionMark(java.lang.Integer precisionMark) {
    this.precisionMark = precisionMark;
    return this;
  }

  /**
   * If this is true, do not use syntactic date in date restricts.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSyntacticDateNotForRestrict() {
    return syntacticDateNotForRestrict;
  }

  /**
   * If this is true, do not use syntactic date in date restricts.
   * @param syntacticDateNotForRestrict syntacticDateNotForRestrict or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setSyntacticDateNotForRestrict(java.lang.Boolean syntacticDateNotForRestrict) {
    this.syntacticDateNotForRestrict = syntacticDateNotForRestrict;
    return this;
  }

  /**
   * Indicates the time zone offset in seconds applied to derive `date' in UTC. Example: Annotation:
   * "1pm PST" (UTC-8) => -8 * 3600 = -28800 Note: This is only used internally and should not be
   * populated in docjoins.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTimeZoneOffsetSeconds() {
    return timeZoneOffsetSeconds;
  }

  /**
   * Indicates the time zone offset in seconds applied to derive `date' in UTC. Example: Annotation:
   * "1pm PST" (UTC-8) => -8 * 3600 = -28800 Note: This is only used internally and should not be
   * populated in docjoins.
   * @param timeZoneOffsetSeconds timeZoneOffsetSeconds or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setTimeZoneOffsetSeconds(java.lang.Long timeZoneOffsetSeconds) {
    this.timeZoneOffsetSeconds = timeZoneOffsetSeconds;
    return this;
  }

  /**
   * This bit is set if we believe that the syntactic date is really high confidence, but does not
   * qualify as a byline date.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getTrustSyntacticDateInRanking() {
    return trustSyntacticDateInRanking;
  }

  /**
   * This bit is set if we believe that the syntactic date is really high confidence, but does not
   * qualify as a byline date.
   * @param trustSyntacticDateInRanking trustSyntacticDateInRanking or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setTrustSyntacticDateInRanking(java.lang.Boolean trustSyntacticDateInRanking) {
    this.trustSyntacticDateInRanking = trustSyntacticDateInRanking;
    return this;
  }

  /**
   * Whether this date is good for display as the snippet byline date.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseAsBylineDate() {
    return useAsBylineDate;
  }

  /**
   * Whether this date is good for display as the snippet byline date.
   * @param useAsBylineDate useAsBylineDate or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setUseAsBylineDate(java.lang.Boolean useAsBylineDate) {
    this.useAsBylineDate = useAsBylineDate;
    return this;
  }

  /**
   * This bit is set if the syntactic date is good to be used in site-level timezone guessing
   * statistics calculation. (The date should be absolute date having a timestamp with hour and
   * minute level information. It can come with or without time zone information, which is indicated
   * in from_explicit_time_zone field defined below.)
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseInTimeZoneGuessingMode() {
    return useInTimeZoneGuessingMode;
  }

  /**
   * This bit is set if the syntactic date is good to be used in site-level timezone guessing
   * statistics calculation. (The date should be absolute date having a timestamp with hour and
   * minute level information. It can come with or without time zone information, which is indicated
   * in from_explicit_time_zone field defined below.)
   * @param useInTimeZoneGuessingMode useInTimeZoneGuessingMode or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setUseInTimeZoneGuessingMode(java.lang.Boolean useInTimeZoneGuessingMode) {
    this.useInTimeZoneGuessingMode = useInTimeZoneGuessingMode;
    return this;
  }

  /**
   * If true, the DateRange is used as date restrict, if false, the date is used as date restrict.
   * Has no effect if syntactic_date_not_for_restrict is true.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseRangeInsteadOfDateForRestrict() {
    return useRangeInsteadOfDateForRestrict;
  }

  /**
   * If true, the DateRange is used as date restrict, if false, the date is used as date restrict.
   * Has no effect if syntactic_date_not_for_restrict is true.
   * @param useRangeInsteadOfDateForRestrict useRangeInsteadOfDateForRestrict or {@code null} for none
   */
  public QualityTimebasedSyntacticDate setUseRangeInsteadOfDateForRestrict(java.lang.Boolean useRangeInsteadOfDateForRestrict) {
    this.useRangeInsteadOfDateForRestrict = useRangeInsteadOfDateForRestrict;
    return this;
  }

  @Override
  public QualityTimebasedSyntacticDate set(String fieldName, Object value) {
    return (QualityTimebasedSyntacticDate) super.set(fieldName, value);
  }

  @Override
  public QualityTimebasedSyntacticDate clone() {
    return (QualityTimebasedSyntacticDate) super.clone();
  }

}
