{
  "basePath": "",
  "id": "containeranalysis:v1alpha1",
  "documentationLink": "https://cloud.google.com/container-analysis/api/reference/rest/",
  "revision": "20190604",
  "discoveryVersion": "v1",
  "version_module": true,
  "schemas": {
    "Basis": {
      "id": "Basis",
      "description": "Basis describes the base image portion (Note) of the DockerImage\nrelationship.  Linked occurrences are derived from this or an\nequivalent image via:\n  FROM \u003cBasis.resource_url\u003e\nOr an equivalent reference, e.g. a tag of the resource_url.",
      "type": "object",
      "properties": {
        "fingerprint": {
          "$ref": "Fingerprint",
          "description": "The fingerprint of the base image."
        },
        "resourceUrl": {
          "type": "string",
          "description": "The resource_url for the resource representing the basis of\nassociated occurrence images."
        }
      }
    },
    "VulnerabilityType": {
      "description": "VulnerabilityType provides metadata about a security vulnerability.",
      "type": "object",
      "properties": {
        "severity": {
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "description": "Note provider assigned impact of the vulnerability",
          "type": "string",
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ]
        },
        "details": {
          "description": "All information about the package to specifically identify this\nvulnerability. One entry per (version range and cpe_uri) the\npackage vulnerability has manifested in.",
          "type": "array",
          "items": {
            "$ref": "Detail"
          }
        },
        "cvssScore": {
          "description": "The CVSS score for this Vulnerability.",
          "format": "float",
          "type": "number"
        }
      },
      "id": "VulnerabilityType"
    },
    "ListScanConfigsResponse": {
      "description": "A list of scan configs for the project.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A page token to pass in order to get more scan configs."
        },
        "scanConfigs": {
          "description": "The set of scan configs.",
          "type": "array",
          "items": {
            "$ref": "ScanConfig"
          }
        }
      },
      "id": "ListScanConfigsResponse"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1RepoId": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "string",
          "description": "A server-assigned, globally unique identifier."
        },
        "projectRepoId": {
          "description": "A combination of a project ID and a repo name.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId"
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1RepoId",
      "description": "A unique identifier for a Cloud Repo."
    },
    "Occurrence": {
      "id": "Occurrence",
      "description": "`Occurrence` includes information about analysis occurrences for an image.",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts."
          ],
          "enum": [
            "KIND_UNSPECIFIED",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY"
          ],
          "description": "Output only. This explicitly denotes which of the `Occurrence` details are\nspecified. This field can be used as a filter in list requests."
        },
        "resource": {
          "$ref": "Resource",
          "description": "\nThe resource for which the `Occurrence` applies."
        },
        "resourceUrl": {
          "description": "The unique URL of the image or the container for which the `Occurrence`\napplies. For example, https://gcr.io/project/image@sha256:foo This field\ncan be used as a filter in list requests.",
          "type": "string"
        },
        "name": {
          "description": "Output only. The name of the `Occurrence` in the form\n\"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
          "type": "string"
        },
        "attestation": {
          "$ref": "Attestation",
          "description": "Describes an attestation of an artifact."
        },
        "installation": {
          "$ref": "Installation",
          "description": "Describes the installation of a package on the linked resource."
        },
        "discovered": {
          "description": "Describes the initial scan status for this resource.",
          "$ref": "Discovered"
        },
        "deployment": {
          "$ref": "Deployment",
          "description": "Describes the deployment of an artifact on a runtime."
        },
        "noteName": {
          "type": "string",
          "description": "An analysis note associated with this image, in the form\n\"providers/{provider_id}/notes/{NOTE_ID}\"\nThis field can be used as a filter in list requests."
        },
        "vulnerabilityDetails": {
          "$ref": "VulnerabilityDetails",
          "description": "Details of a security vulnerability note."
        },
        "createTime": {
          "description": "Output only. The time this `Occurrence` was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "updateTime": {
          "description": "Output only. The time this `Occurrence` was last updated.",
          "format": "google-datetime",
          "type": "string"
        },
        "remediation": {
          "description": "A description of actions that can be taken to remedy the `Note`",
          "type": "string"
        },
        "derivedImage": {
          "description": "Describes how this resource derives from the basis\nin the associated note.",
          "$ref": "Derived"
        },
        "buildDetails": {
          "description": "Build details for a verifiable build.",
          "$ref": "BuildDetails"
        }
      }
    },
    "Note": {
      "description": "Provides a detailed description of a `Note`.",
      "type": "object",
      "properties": {
        "vulnerabilityType": {
          "$ref": "VulnerabilityType",
          "description": "A package vulnerability type of note."
        },
        "package": {
          "$ref": "Package",
          "description": "A note describing a package hosted by various package managers."
        },
        "createTime": {
          "description": "Output only. The time this note was created. This field can be used as a\nfilter in list requests.",
          "format": "google-datetime",
          "type": "string"
        },
        "updateTime": {
          "description": "Output only. The time this note was last updated. This field can be used as\na filter in list requests.",
          "format": "google-datetime",
          "type": "string"
        },
        "discovery": {
          "description": "A note describing a provider/analysis type.",
          "$ref": "Discovery"
        },
        "relatedUrl": {
          "description": "URLs associated with this note",
          "type": "array",
          "items": {
            "$ref": "RelatedUrl"
          }
        },
        "expirationTime": {
          "description": "Time of expiration for this note, null if note does not expire.",
          "format": "google-datetime",
          "type": "string"
        },
        "baseImage": {
          "$ref": "Basis",
          "description": "A note describing a base image."
        },
        "kind": {
          "enum": [
            "KIND_UNSPECIFIED",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY"
          ],
          "description": "Output only. This explicitly denotes which kind of note is specified. This\nfield can be used as a filter in list requests.",
          "type": "string",
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts."
          ]
        },
        "deployable": {
          "description": "A note describing something that can be deployed.",
          "$ref": "Deployable"
        },
        "buildType": {
          "$ref": "BuildType",
          "description": "Build provenance type for a verifiable build."
        },
        "longDescription": {
          "description": "A detailed description of this `Note`.",
          "type": "string"
        },
        "shortDescription": {
          "description": "A one sentence description of this `Note`.",
          "type": "string"
        },
        "attestationAuthority": {
          "$ref": "AttestationAuthority",
          "description": "A note describing an attestation role."
        },
        "name": {
          "description": "The name of the note in the form\n\"providers/{provider_id}/notes/{NOTE_ID}\"",
          "type": "string"
        }
      },
      "id": "Note"
    },
    "Empty": {
      "type": "object",
      "properties": {},
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`."
    },
    "SeverityCount": {
      "description": "The number of occurrences created for a specific severity.",
      "type": "object",
      "properties": {
        "severity": {
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "description": "The severity of the occurrences.",
          "type": "string"
        },
        "count": {
          "description": "The number of occurrences with the severity.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "SeverityCount"
    },
    "AuditLogConfig": {
      "description": "Provides the configuration for logging a type of permissions.\nExample:\n\n    {\n      \"audit_log_configs\": [\n        {\n          \"log_type\": \"DATA_READ\",\n          \"exempted_members\": [\n            \"user:foo@gmail.com\"\n          ]\n        },\n        {\n          \"log_type\": \"DATA_WRITE\",\n        }\n      ]\n    }\n\nThis enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting\nfoo@gmail.com from DATA_READ logging.",
      "type": "object",
      "properties": {
        "exemptedMembers": {
          "description": "Specifies the identities that do not cause logging for this type of\npermission.\nFollows the same format of Binding.members.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logType": {
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ],
          "description": "The log type that this config enables.",
          "type": "string",
          "enumDescriptions": [
            "Default case. Should never be this.",
            "Admin reads. Example: CloudIAM getIamPolicy",
            "Data writes. Example: CloudSQL Users create",
            "Data reads. Example: CloudSQL Users list"
          ]
        }
      },
      "id": "AuditLogConfig"
    },
    "Derived": {
      "type": "object",
      "properties": {
        "distance": {
          "type": "integer",
          "description": "Output only. The number of layers by which this image differs from the\nassociated image basis.",
          "format": "uint32"
        },
        "baseResourceUrl": {
          "description": "Output only. This contains the base image URL for the derived image\noccurrence.",
          "type": "string"
        },
        "fingerprint": {
          "$ref": "Fingerprint",
          "description": "The fingerprint of the derived image."
        },
        "layerInfo": {
          "description": "This contains layer-specific metadata, if populated it has length\n\"distance\" and is ordered with [distance] being the layer immediately\nfollowing the base image and [1] being the final layer.",
          "type": "array",
          "items": {
            "$ref": "Layer"
          }
        }
      },
      "id": "Derived",
      "description": "Derived describes the derived image portion (Occurrence) of the\nDockerImage relationship.  This image would be produced from a Dockerfile\nwith FROM \u003cDockerImage.Basis in attached Note\u003e."
    },
    "Source": {
      "description": "Source describes the location of the source used for the build.",
      "type": "object",
      "properties": {
        "repoSource": {
          "$ref": "RepoSource",
          "description": "If provided, get source from this location in a Cloud Repo."
        },
        "fileHashes": {
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "description": "Hash(es) of the build source, which can be used to verify that the original\nsource integrity was maintained in the build.\n\nThe keys to this map are file paths used as build source and the values\ncontain the hash values for those files.\n\nIf the build source came in a single package such as a gzipped tarfile\n(.tar.gz), the FileHash will be for the single path to that file.",
          "type": "object"
        },
        "storageSource": {
          "$ref": "StorageSource",
          "description": "If provided, get the source from this location in in Google Cloud\nStorage."
        },
        "artifactStorageSource": {
          "$ref": "StorageSource",
          "description": "If provided, the input binary artifacts for the build came from this\nlocation."
        },
        "additionalContexts": {
          "description": "If provided, some of the source code used for the build may be found in\nthese locations, in the case where the source repository had multiple\nremotes or submodules. This list will not include the context specified in\nthe context field.",
          "type": "array",
          "items": {
            "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SourceContext"
          }
        },
        "context": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1SourceContext",
          "description": "If provided, the source code used for the build came from this location."
        }
      },
      "id": "Source"
    },
    "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext": {
      "description": "A GitSourceContext denotes a particular revision in a third party Git\nrepository (e.g., GitHub).",
      "type": "object",
      "properties": {
        "revisionId": {
          "description": "Required.\nGit commit hash.",
          "type": "string"
        },
        "url": {
          "description": "Git repository URL.",
          "type": "string"
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext"
    },
    "BuildProvenance": {
      "type": "object",
      "properties": {
        "createTime": {
          "description": "Time at which the build was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "sourceProvenance": {
          "$ref": "Source",
          "description": "Details of the Source input to the build."
        },
        "projectId": {
          "description": "ID of the project.",
          "type": "string"
        },
        "finishTime": {
          "description": "Time at which execution of the build was finished.",
          "format": "google-datetime",
          "type": "string"
        },
        "creator": {
          "description": "E-mail address of the user who initiated this build. Note that this was the\nuser's e-mail address at the time the build was initiated; this address may\nnot represent the same end-user for all time.",
          "type": "string"
        },
        "logsBucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket where logs were written."
        },
        "builderVersion": {
          "description": "Version string of the builder at the time this build was executed.",
          "type": "string"
        },
        "commands": {
          "description": "Commands requested by the build.",
          "type": "array",
          "items": {
            "$ref": "Command"
          }
        },
        "builtArtifacts": {
          "description": "Output of the build.",
          "type": "array",
          "items": {
            "$ref": "Artifact"
          }
        },
        "id": {
          "description": "Unique identifier of the build.",
          "type": "string"
        },
        "buildOptions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Special options applied to this build. This is a catch-all field where\nbuild providers can enter any desired additional details."
        },
        "startTime": {
          "type": "string",
          "description": "Time at which execution of the build was started.",
          "format": "google-datetime"
        },
        "triggerId": {
          "type": "string",
          "description": "Trigger identifier if the build was triggered automatically; empty if not."
        }
      },
      "id": "BuildProvenance",
      "description": "Provenance of a build. Contains all information needed to verify the full\ndetails about the build from source to completion."
    },
    "Policy": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help\nprevent simultaneous updates of a policy from overwriting each other.\nIt is strongly suggested that systems make use of the `etag` in the\nread-modify-write cycle to perform policy updates in order to avoid race\nconditions: An `etag` is returned in the response to `getIamPolicy`, and\nsystems are expected to put that etag in the request to `setIamPolicy` to\nensure that their change will be applied to the same version of the policy.\n\nIf no `etag` is provided in the call to `setIamPolicy`, then the existing\npolicy is overwritten blindly.",
          "format": "byte",
          "type": "string"
        },
        "version": {
          "type": "integer",
          "description": "Deprecated.",
          "format": "int32"
        },
        "auditConfigs": {
          "description": "Specifies cloud audit logging configuration for this policy.",
          "type": "array",
          "items": {
            "$ref": "AuditConfig"
          }
        },
        "bindings": {
          "description": "Associates a list of `members` to a `role`.\n`bindings` with no members will result in an error.",
          "type": "array",
          "items": {
            "$ref": "Binding"
          }
        }
      },
      "id": "Policy",
      "description": "Defines an Identity and Access Management (IAM) policy. It is used to\nspecify access control policies for Cloud Platform resources.\n\n\nA `Policy` consists of a list of `bindings`. A `binding` binds a list of\n`members` to a `role`, where the members can be user accounts, Google groups,\nGoogle domains, and service accounts. A `role` is a named list of permissions\ndefined by IAM.\n\n**JSON Example**\n\n    {\n      \"bindings\": [\n        {\n          \"role\": \"roles/owner\",\n          \"members\": [\n            \"user:mike@example.com\",\n            \"group:admins@example.com\",\n            \"domain:google.com\",\n            \"serviceAccount:my-other-app@appspot.gserviceaccount.com\"\n          ]\n        },\n        {\n          \"role\": \"roles/viewer\",\n          \"members\": [\"user:sean@example.com\"]\n        }\n      ]\n    }\n\n**YAML Example**\n\n    bindings:\n    - members:\n      - user:mike@example.com\n      - group:admins@example.com\n      - domain:google.com\n      - serviceAccount:my-other-app@appspot.gserviceaccount.com\n      role: roles/owner\n    - members:\n      - user:sean@example.com\n      role: roles/viewer\n\n\nFor a description of IAM and its features, see the\n[IAM developer's guide](https://cloud.google.com/iam/docs)."
    },
    "ListNoteOccurrencesResponse": {
      "id": "ListNoteOccurrencesResponse",
      "description": "Response including listed occurrences for a note.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to receive the next page of notes."
        },
        "occurrences": {
          "description": "The occurrences attached to the specified note.",
          "type": "array",
          "items": {
            "$ref": "Occurrence"
          }
        }
      }
    },
    "VulnerabilityDetails": {
      "id": "VulnerabilityDetails",
      "description": "Used by Occurrence to point to where the vulnerability exists and how\nto fix it.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of package; whether native or non native(ruby gems,\nnode.js packages etc)"
        },
        "effectiveSeverity": {
          "type": "string",
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "description": "The distro assigned severity for this vulnerability when that is\navailable and note provider assigned severity when distro has not yet\nassigned a severity for this vulnerability."
        },
        "packageIssue": {
          "description": "The set of affected locations and their fixes (if available) within\nthe associated resource.",
          "type": "array",
          "items": {
            "$ref": "PackageIssue"
          }
        },
        "severity": {
          "type": "string",
          "enumDescriptions": [
            "Unknown Impact",
            "Minimal Impact",
            "Low Impact",
            "Medium Impact",
            "High Impact",
            "Critical Impact"
          ],
          "enum": [
            "SEVERITY_UNSPECIFIED",
            "MINIMAL",
            "LOW",
            "MEDIUM",
            "HIGH",
            "CRITICAL"
          ],
          "description": "Output only. The note provider assigned Severity of the vulnerability."
        },
        "cvssScore": {
          "description": "Output only. The CVSS score of this vulnerability. CVSS score is on a\nscale of 0-10 where 0 indicates low severity and 10 indicates high\nseverity.",
          "format": "float",
          "type": "number"
        }
      }
    },
    "AttestationAuthority": {
      "type": "object",
      "properties": {
        "hint": {
          "$ref": "AttestationAuthorityHint"
        }
      },
      "id": "AttestationAuthority",
      "description": "Note kind that represents a logical attestation \"role\" or \"authority\".  For\nexample, an organization might have one `AttestationAuthority` for \"QA\" and\none for \"build\".  This Note is intended to act strictly as a grouping\nmechanism for the attached Occurrences (Attestations).  This grouping\nmechanism also provides a security boundary, since IAM ACLs gate the ability\nfor a principle to attach an Occurrence to a given Note.  It also provides a\nsingle point of lookup to find all attached Attestation Occurrences, even if\nthey don't all live in the same project."
    },
    "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext": {
      "type": "object",
      "properties": {
        "repoId": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1RepoId",
          "description": "The ID of the repo."
        },
        "aliasContext": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1AliasContext",
          "description": "An alias, which may be a branch or tag."
        },
        "revisionId": {
          "description": "A revision ID.",
          "type": "string"
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext",
      "description": "A CloudRepoSourceContext denotes a particular revision in a Google Cloud\nSource Repo."
    },
    "Operation": {
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        },
        "response": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`."
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`.",
          "type": "string"
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        }
      },
      "id": "Operation"
    },
    "FileHashes": {
      "description": "Container message for hashes of byte content of files, used in Source\nmessages to verify integrity of source input to the build.",
      "type": "object",
      "properties": {
        "fileHash": {
          "description": "Collection of file hashes.",
          "type": "array",
          "items": {
            "$ref": "Hash"
          }
        }
      },
      "id": "FileHashes"
    },
    "AttestationAuthorityHint": {
      "type": "object",
      "properties": {
        "humanReadableName": {
          "type": "string",
          "description": "The human readable name of this Attestation Authority, for example \"qa\"."
        }
      },
      "id": "AttestationAuthorityHint",
      "description": "This submessage provides human-readable hints about the purpose of the\nAttestationAuthority.  Because the name of a Note acts as its resource\nreference, it is important to disambiguate the canonical name of the Note\n(which might be a UUID for security purposes) from \"readable\" names more\nsuitable for debug output.  Note that these hints should NOT be used to\nlook up AttestationAuthorities in security sensitive contexts, such as when\nlooking up Attestations to verify."
    },
    "PgpSignedAttestation": {
      "description": "An attestation wrapper with a PGP-compatible signature.\nThis message only supports `ATTACHED` signatures, where the payload that is\nsigned is included alongside the signature itself in the same file.",
      "type": "object",
      "properties": {
        "signature": {
          "type": "string",
          "description": "The raw content of the signature, as output by GNU Privacy Guard (GPG) or\nequivalent.  Since this message only supports attached signatures, the\npayload that was signed must be attached. While the signature format\nsupported is dependent on the verification implementation, currently only\nASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than\n`--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor\n--output=signature.gpg payload.json` will create the signature content\nexpected in this field in `signature.gpg` for the `payload.json`\nattestation payload."
        },
        "pgpKeyId": {
          "description": "The cryptographic fingerprint of the key used to generate the signature,\nas output by, e.g. `gpg --list-keys`. This should be the version 4, full\n160-bit fingerprint, expressed as a 40 character hexadecimal string. See\nhttps://tools.ietf.org/html/rfc4880#section-12.2 for details.\nImplementations may choose to acknowledge \"LONG\", \"SHORT\", or other\nabbreviated key IDs, but only the full fingerprint is guaranteed to work.\nIn gpg, the full fingerprint can be retrieved from the `fpr` field\nreturned when calling --list-keys with --with-colons.  For example:\n```\ngpg --with-colons --with-fingerprint --force-v4-certs \\\n    --list-keys attester@example.com\ntru::1:1513631572:0:3:1:5\npub:...\u003cSNIP\u003e...\nfpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB:\n```\nAbove, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.",
          "type": "string"
        },
        "contentType": {
          "enum": [
            "CONTENT_TYPE_UNSPECIFIED",
            "SIMPLE_SIGNING_JSON"
          ],
          "description": "Type (for example schema) of the attestation payload that was signed.\nThe verifier must ensure that the provided type is one that the verifier\nsupports, and that the attestation payload is a valid instantiation of that\ntype (for example by validating a JSON schema).",
          "type": "string",
          "enumDescriptions": [
            "`ContentType` is not set.",
            "Atomic format attestation signature. See\nhttps://github.com/containers/image/blob/8a5d2f82a6e3263290c8e0276c3e0f64e77723e7/docs/atomic-signature.md\nThe payload extracted from `signature` is a JSON blob conforming to the\nlinked schema."
          ]
        }
      },
      "id": "PgpSignedAttestation"
    },
    "Status": {
      "type": "object",
      "properties": {
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "Binding": {
      "type": "object",
      "properties": {
        "role": {
          "description": "Role that is assigned to `members`.\nFor example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        },
        "condition": {
          "$ref": "Expr",
          "description": "The condition that is associated with this binding.\nNOTE: An unsatisfied condition will not allow user access via current\nbinding. Different bindings, including their conditions, are examined\nindependently."
        },
        "members": {
          "description": "Specifies the identities requesting access for a Cloud Platform resource.\n`members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is\n   on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone\n   who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google\n   account. For example, `alice@gmail.com` .\n\n\n* `serviceAccount:{emailid}`: An email address that represents a service\n   account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group.\n   For example, `admins@example.com`.\n\n\n* `domain:{domain}`: The G Suite domain (primary) that represents all the\n   users of that domain. For example, `google.com` or `example.com`.\n\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "Binding",
      "description": "Associates `members` with a `role`."
    },
    "ListNotesResponse": {
      "description": "Response including listed notes.",
      "type": "object",
      "properties": {
        "notes": {
          "description": "The occurrences requested",
          "type": "array",
          "items": {
            "$ref": "Note"
          }
        },
        "nextPageToken": {
          "description": "The next pagination token in the list response. It should be used as\npage_token for the following request. An empty value means no more result.",
          "type": "string"
        }
      },
      "id": "ListNotesResponse"
    },
    "Layer": {
      "type": "object",
      "properties": {
        "directive": {
          "enum": [
            "DIRECTIVE_UNSPECIFIED",
            "MAINTAINER",
            "RUN",
            "CMD",
            "LABEL",
            "EXPOSE",
            "ENV",
            "ADD",
            "COPY",
            "ENTRYPOINT",
            "VOLUME",
            "USER",
            "WORKDIR",
            "ARG",
            "ONBUILD",
            "STOPSIGNAL",
            "HEALTHCHECK",
            "SHELL"
          ],
          "description": "The recovered Dockerfile directive used to construct this layer.",
          "type": "string",
          "enumDescriptions": [
            "Default value for unsupported/missing directive",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/reference/builder/#copy",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/",
            "https://docs.docker.com/engine/reference/builder/"
          ]
        },
        "arguments": {
          "type": "string",
          "description": "The recovered arguments to the Dockerfile directive."
        }
      },
      "id": "Layer",
      "description": "Layer holds metadata specific to a layer of a Docker image."
    },
    "BuildType": {
      "type": "object",
      "properties": {
        "builderVersion": {
          "description": "Version of the builder which produced this Note.",
          "type": "string"
        },
        "signature": {
          "$ref": "BuildSignature",
          "description": "Signature of the build in Occurrences pointing to the Note containing this\n`BuilderDetails`."
        }
      },
      "id": "BuildType",
      "description": "Note holding the version of the provider's builder and the signature of\nthe provenance message in linked BuildDetails."
    },
    "RelatedUrl": {
      "description": "Metadata for any related URL information",
      "type": "object",
      "properties": {
        "url": {
          "description": "Specific URL to associate with the note",
          "type": "string"
        },
        "label": {
          "type": "string",
          "description": "Label to describe usage of the URL"
        }
      },
      "id": "RelatedUrl"
    },
    "Installation": {
      "id": "Installation",
      "description": "This represents how a particular software package may be installed on\na system.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Output only. The name of the installed package."
        },
        "location": {
          "type": "array",
          "items": {
            "$ref": "Location"
          },
          "description": "All of the places within the filesystem versions of this package\nhave been found."
        }
      }
    },
    "GetVulnzOccurrencesSummaryResponse": {
      "id": "GetVulnzOccurrencesSummaryResponse",
      "description": "A summary of how many vulnz occurrences there are per severity type.\ncounts by groups, or if we should have different summary messages\nlike this.",
      "type": "object",
      "properties": {
        "counts": {
          "description": "A map of how many occurrences were found for each severity.",
          "type": "array",
          "items": {
            "$ref": "SeverityCount"
          }
        }
      }
    },
    "UpdateOperationRequest": {
      "id": "UpdateOperationRequest",
      "description": "Request for updating an existing operation",
      "type": "object",
      "properties": {
        "operation": {
          "$ref": "Operation",
          "description": "The operation to create."
        },
        "updateMask": {
          "description": "The fields to update.",
          "format": "google-fieldmask",
          "type": "string"
        }
      }
    },
    "Distribution": {
      "description": "This represents a particular channel of distribution for a given package.\ne.g. Debian's jessie-backports dpkg mirror",
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The distribution channel-specific homepage for this package."
        },
        "architecture": {
          "enumDescriptions": [
            "Unknown architecture",
            "X86 architecture",
            "X64 architecture"
          ],
          "enum": [
            "ARCHITECTURE_UNSPECIFIED",
            "X86",
            "X64"
          ],
          "description": "The CPU architecture for which packages in this distribution\nchannel were built",
          "type": "string"
        },
        "maintainer": {
          "description": "A freeform string denoting the maintainer of this package.",
          "type": "string"
        },
        "latestVersion": {
          "description": "The latest available version of this package in\nthis distribution channel.",
          "$ref": "Version"
        },
        "cpeUri": {
          "description": "The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)\ndenoting the package manager version distributing a package.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "The distribution channel-specific description of this package."
        }
      },
      "id": "Distribution"
    },
    "ScanConfig": {
      "description": "Indicates various scans and whether they are turned on or off.",
      "type": "object",
      "properties": {
        "updateTime": {
          "type": "string",
          "description": "Output only. The time this scan config was last updated.",
          "format": "google-datetime"
        },
        "name": {
          "description": "Output only. The name of the ScanConfig in the form\n“projects/{project_id}/scanConfigs/{scan_config_id}\".",
          "type": "string"
        },
        "description": {
          "description": "Output only. A human-readable description of what the `ScanConfig` does.",
          "type": "string"
        },
        "enabled": {
          "description": "Indicates whether the Scan is enabled.",
          "type": "boolean"
        },
        "createTime": {
          "description": "Output only. The time this scan config was created.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "ScanConfig"
    },
    "ListOccurrencesResponse": {
      "id": "ListOccurrencesResponse",
      "description": "Response including listed active occurrences.",
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The next pagination token in the list response. It should be used as\n`page_token` for the following request. An empty value means no more\nresults."
        },
        "occurrences": {
          "description": "The occurrences requested.",
          "type": "array",
          "items": {
            "$ref": "Occurrence"
          }
        }
      }
    },
    "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId": {
      "description": "Selects a repo using a Google Cloud Platform project ID (e.g.,\nwinged-cargo-31) and a repo name within that project.",
      "type": "object",
      "properties": {
        "projectId": {
          "description": "The ID of the project.",
          "type": "string"
        },
        "repoName": {
          "type": "string",
          "description": "The name of the repo. Leave empty for the default repo."
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId"
    },
    "StorageSource": {
      "description": "StorageSource describes the location of the source in an archive file in\nGoogle Cloud Storage.",
      "type": "object",
      "properties": {
        "object": {
          "type": "string",
          "description": "Google Cloud Storage object containing source."
        },
        "generation": {
          "description": "Google Cloud Storage generation for the object.",
          "format": "int64",
          "type": "string"
        },
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing source (see [Bucket Name\nRequirements]\n(https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        }
      },
      "id": "StorageSource"
    },
    "BuildDetails": {
      "type": "object",
      "properties": {
        "provenance": {
          "$ref": "BuildProvenance",
          "description": "The actual provenance"
        },
        "provenanceBytes": {
          "description": "Serialized JSON representation of the provenance, used in generating the\n`BuildSignature` in the corresponding Result. After verifying the\nsignature, `provenance_bytes` can be unmarshalled and compared to the\nprovenance to confirm that it is unchanged. A base64-encoded string\nrepresentation of the provenance bytes is used for the signature in order\nto interoperate with openssl which expects this format for signature\nverification.\n\nThe serialized form is captured both to avoid ambiguity in how the\nprovenance is marshalled to json as well to prevent incompatibilities with\nfuture changes.",
          "type": "string"
        }
      },
      "id": "BuildDetails",
      "description": "Message encapsulating build provenance details."
    },
    "Hash": {
      "description": "Container message for hash values.",
      "type": "object",
      "properties": {
        "type": {
          "enum": [
            "NONE",
            "SHA256"
          ],
          "description": "The type of hash that was performed.",
          "type": "string",
          "enumDescriptions": [
            "No hash requested.",
            "A sha256 hash."
          ]
        },
        "value": {
          "description": "The hash value.",
          "format": "byte",
          "type": "string"
        }
      },
      "id": "Hash"
    },
    "SetIamPolicyRequest": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "Policy",
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of\nthe policy is limited to a few 10s of KB. An empty policy is a\nvalid policy but certain Cloud Platform services (such as Projects)\nmight reject them."
        },
        "updateMask": {
          "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only\nthe fields in the mask will be modified. If no mask is provided, the\nfollowing default mask is used:\npaths: \"bindings, etag\"\nThis field is only used by Cloud IAM.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "SetIamPolicyRequest",
      "description": "Request message for `SetIamPolicy` method."
    },
    "VulnerabilityLocation": {
      "description": "The location of the vulnerability",
      "type": "object",
      "properties": {
        "cpeUri": {
          "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/)\nformat. Examples include distro or storage location for vulnerable jar.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "package": {
          "description": "The package being described.",
          "type": "string"
        },
        "version": {
          "$ref": "Version",
          "description": "The version of the package being described. This field can be used as a\nfilter in list requests."
        }
      },
      "id": "VulnerabilityLocation"
    },
    "Command": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the command, as presented on the command line, or if the command is\npackaged as a Docker container, as presented to `docker pull`.",
          "type": "string"
        },
        "id": {
          "description": "Optional unique identifier for this Command, used in wait_for to reference\nthis Command as a dependency.",
          "type": "string"
        },
        "dir": {
          "description": "Working directory (relative to project source root) used when running\nthis Command.",
          "type": "string"
        },
        "waitFor": {
          "description": "The ID(s) of the Command(s) that this Command depends on.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "description": "Environment variables set before running this Command.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "args": {
          "description": "Command-line arguments used when executing this Command.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "Command",
      "description": "Command describes a step performed as part of the build pipeline."
    },
    "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext": {
      "description": "A SourceContext referring to a Gerrit project.",
      "type": "object",
      "properties": {
        "gerritProject": {
          "type": "string",
          "description": "The full project name within the host. Projects may be nested, so\n\"project/subproject\" is a valid project name. The \"repo name\" is\nthe hostURI/project."
        },
        "aliasContext": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1AliasContext",
          "description": "An alias, which may be a branch or tag."
        },
        "hostUri": {
          "description": "The URI of a running Gerrit instance.",
          "type": "string"
        },
        "revisionId": {
          "description": "A revision (commit) ID.",
          "type": "string"
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext"
    },
    "Attestation": {
      "type": "object",
      "properties": {
        "pgpSignedAttestation": {
          "$ref": "PgpSignedAttestation"
        }
      },
      "id": "Attestation",
      "description": "Occurrence that represents a single \"attestation\".  The authenticity of an\nAttestation can be verified using the attached signature. If the verifier\ntrusts the public key of the signer, then verifying the signature is\nsufficient to establish trust.  In this circumstance, the\nAttestationAuthority to which this Attestation is attached is primarily\nuseful for look-up (how to find this Attestation if you already know the\nAuthority and artifact to be verified) and intent (which authority was this\nattestation intended to sign for)."
    },
    "Location": {
      "type": "object",
      "properties": {
        "cpeUri": {
          "description": "The cpe_uri in [cpe format](https://cpe.mitre.org/specification/)\ndenoting the package manager version distributing a package.",
          "type": "string"
        },
        "version": {
          "$ref": "Version",
          "description": "The version installed at this location."
        },
        "path": {
          "description": "The path from which we gathered that this package/version is installed.",
          "type": "string"
        }
      },
      "id": "Location",
      "description": "An occurrence of a particular package installation found within a\nsystem's filesystem.\ne.g. glibc was found in /var/lib/dpkg/status"
    },
    "Resource": {
      "description": "\nResource is an entity that can have metadata. E.g., a Docker image.",
      "type": "object",
      "properties": {
        "uri": {
          "description": "The unique URI of the resource. E.g.,\n\"https://gcr.io/project/image@sha256:foo\" for a Docker image.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource. E.g., the name of a Docker image - \"Debian\".",
          "type": "string"
        },
        "contentHash": {
          "$ref": "Hash",
          "description": "The hash of the resource content. E.g., the Docker digest."
        }
      },
      "id": "Resource"
    },
    "Artifact": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Artifact ID, if any; for container images, this will be a URL by digest\nlike gcr.io/projectID/imagename@sha256:123456",
          "type": "string"
        },
        "names": {
          "description": "Related artifact names. This may be the path to a binary or jar file, or in\nthe case of a container build, the name used to push the container image to\nGoogle Container Registry, as presented to `docker push`. Note that a\nsingle Artifact ID can have multiple names, for example if two tags are\napplied to one image.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name of the artifact. This may be the path to a binary or jar file, or in\nthe case of a container build, the name used to push the container image to\nGoogle Container Registry, as presented to `docker push`.\n\nThis field is deprecated in favor of the plural `names` field; it continues\nto exist here to allow existing BuildProvenance serialized to json in\ngoogle.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to\ndeserialize back into proto.",
          "type": "string"
        },
        "checksum": {
          "description": "Hash or checksum value of a binary, or Docker Registry 2.0 digest of a\ncontainer.",
          "type": "string"
        }
      },
      "id": "Artifact",
      "description": "Artifact describes a build product."
    },
    "TestIamPermissionsRequest": {
      "id": "TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of permissions to check for the `resource`. Permissions with\nwildcards (such as '*' or 'storage.*') are not allowed. For more\ninformation see\n[IAM Overview](https://cloud.google.com/iam/docs/overview#permissions)."
        }
      }
    },
    "Deployable": {
      "type": "object",
      "properties": {
        "resourceUri": {
          "description": "Resource URI for the artifact being deployed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "Deployable",
      "description": "An artifact that can be deployed in some runtime."
    },
    "Package": {
      "id": "Package",
      "description": "This represents a particular package that is distributed over\nvarious channels.\ne.g. glibc (aka libc6) is distributed by many, at various versions.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the package."
        },
        "distribution": {
          "description": "The various channels by which a package is distributed.",
          "type": "array",
          "items": {
            "$ref": "Distribution"
          }
        }
      }
    },
    "Version": {
      "id": "Version",
      "description": "Version contains structured information about the version of the package.\nFor a discussion of this in Debian/Ubuntu:\nhttp://serverfault.com/questions/604541/debian-packages-version-convention\nFor a discussion of this in Redhat/Fedora/Centos:\nhttp://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/",
      "type": "object",
      "properties": {
        "epoch": {
          "type": "integer",
          "description": "Used to correct mistakes in the version numbering scheme.",
          "format": "int32"
        },
        "revision": {
          "description": "The iteration of the package build from the above version.",
          "type": "string"
        },
        "name": {
          "description": "The main part of the version name.",
          "type": "string"
        },
        "kind": {
          "enumDescriptions": [
            "A standard package version, defined by the other fields.",
            "A special version representing negative infinity,\nother fields are ignored.",
            "A special version representing positive infinity,\nother fields are ignored."
          ],
          "enum": [
            "NORMAL",
            "MINIMUM",
            "MAXIMUM"
          ],
          "description": "Distinguish between sentinel MIN/MAX versions and normal versions.\nIf kind is not NORMAL, then the other fields are ignored.",
          "type": "string"
        }
      }
    },
    "GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata": {
      "description": "Metadata for all operations used and required for all operations\nthat created by Container Analysis Providers",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "Output only. The time this operation was created.",
          "format": "google-datetime",
          "type": "string"
        },
        "endTime": {
          "description": "Output only. The time that this operation was marked completed or failed.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata"
    },
    "Fingerprint": {
      "description": "A set of properties that uniquely identify a given Docker image.",
      "type": "object",
      "properties": {
        "v1Name": {
          "description": "The layer-id of the final layer in the Docker image's v1\nrepresentation.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "v2Name": {
          "description": "Output only. The name of the image's v2 blobs computed via:\n  [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1])\nOnly the name of the final blob is kept.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "v2Blob": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ordered list of v2 blobs that represent a given image."
        }
      },
      "id": "Fingerprint"
    },
    "AuditConfig": {
      "description": "Specifies the audit configuration for a service.\nThe configuration determines which permission types are logged, and what\nidentities, if any, are exempted from logging.\nAn AuditConfig must have one or more AuditLogConfigs.\n\nIf there are AuditConfigs for both `allServices` and a specific service,\nthe union of the two AuditConfigs is used for that service: the log_types\nspecified in each AuditConfig are enabled, and the exempted_members in each\nAuditLogConfig are exempted.\n\nExample Policy with multiple AuditConfigs:\n\n    {\n      \"audit_configs\": [\n        {\n          \"service\": \"allServices\"\n          \"audit_log_configs\": [\n            {\n              \"log_type\": \"DATA_READ\",\n              \"exempted_members\": [\n                \"user:foo@gmail.com\"\n              ]\n            },\n            {\n              \"log_type\": \"DATA_WRITE\",\n            },\n            {\n              \"log_type\": \"ADMIN_READ\",\n            }\n          ]\n        },\n        {\n          \"service\": \"fooservice.googleapis.com\"\n          \"audit_log_configs\": [\n            {\n              \"log_type\": \"DATA_READ\",\n            },\n            {\n              \"log_type\": \"DATA_WRITE\",\n              \"exempted_members\": [\n                \"user:bar@gmail.com\"\n              ]\n            }\n          ]\n        }\n      ]\n    }\n\nFor fooservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ\nlogging. It also exempts foo@gmail.com from DATA_READ logging, and\nbar@gmail.com from DATA_WRITE logging.",
      "type": "object",
      "properties": {
        "auditLogConfigs": {
          "description": "The configuration for logging of each type of permission.",
          "type": "array",
          "items": {
            "$ref": "AuditLogConfig"
          }
        },
        "service": {
          "type": "string",
          "description": "Specifies a service that will be enabled for audit logging.\nFor example, `storage.googleapis.com`, `cloudsql.googleapis.com`.\n`allServices` is a special value that covers all services."
        }
      },
      "id": "AuditConfig"
    },
    "Discovery": {
      "type": "object",
      "properties": {
        "analysisKind": {
          "enumDescriptions": [
            "Unknown",
            "The note and occurrence represent a package vulnerability.",
            "The note and occurrence assert build provenance.",
            "This represents an image basis relationship.",
            "This represents a package installed via a package manager.",
            "The note and occurrence track deployment events.",
            "The note and occurrence track the initial discovery status of a resource.",
            "This represents a logical \"role\" that can attest to artifacts."
          ],
          "enum": [
            "KIND_UNSPECIFIED",
            "PACKAGE_VULNERABILITY",
            "BUILD_DETAILS",
            "IMAGE_BASIS",
            "PACKAGE_MANAGER",
            "DEPLOYABLE",
            "DISCOVERY",
            "ATTESTATION_AUTHORITY"
          ],
          "description": "The kind of analysis that is handled by this discovery.",
          "type": "string"
        }
      },
      "id": "Discovery",
      "description": "A note that indicates a type of analysis a provider would perform. This note\nexists in a provider's project. A `Discovery` occurrence is created in a\nconsumer's project at the start of analysis. The occurrence's operation will\nindicate the status of the analysis. Absence of an occurrence linked to this\nnote for a resource indicates that analysis hasn't started."
    },
    "RepoSource": {
      "type": "object",
      "properties": {
        "tagName": {
          "type": "string",
          "description": "Name of the tag to build."
        },
        "commitSha": {
          "type": "string",
          "description": "Explicit commit SHA to build."
        },
        "projectId": {
          "description": "ID of the project that owns the repo.",
          "type": "string"
        },
        "repoName": {
          "type": "string",
          "description": "Name of the repo."
        },
        "branchName": {
          "description": "Name of the branch to build.",
          "type": "string"
        }
      },
      "id": "RepoSource",
      "description": "RepoSource describes the location of the source in a Google Cloud Source\nRepository."
    },
    "BuildSignature": {
      "description": "Message encapsulating the signature of the verified build.",
      "type": "object",
      "properties": {
        "keyType": {
          "description": "The type of the key, either stored in `public_key` or referenced in\n`key_id`",
          "type": "string",
          "enumDescriptions": [
            "`KeyType` is not set.",
            "`PGP ASCII Armored` public key.",
            "`PKIX PEM` public key."
          ],
          "enum": [
            "KEY_TYPE_UNSPECIFIED",
            "PGP_ASCII_ARMORED",
            "PKIX_PEM"
          ]
        },
        "signature": {
          "description": "Signature of the related `BuildProvenance`, encoded in a base64 string.",
          "type": "string"
        },
        "publicKey": {
          "type": "string",
          "description": "Public key of the builder which can be used to verify that the related\nfindings are valid and unchanged. If `key_type` is empty, this defaults\nto PEM encoded public keys.\n\nThis field may be empty if `key_id` references an external key.\n\nFor Cloud Build based signatures, this is a PEM encoded public\nkey. To verify the Cloud Build signature, place the contents of\nthis field into a file (public.pem). The signature field is base64-decoded\ninto its binary representation in signature.bin, and the provenance bytes\nfrom `BuildDetails` are base64-decoded into a binary representation in\nsigned.bin. OpenSSL can then verify the signature:\n`openssl sha256 -verify public.pem -signature signature.bin signed.bin`"
        },
        "keyId": {
          "type": "string",
          "description": "An Id for the key used to sign. This could be either an Id for the key\nstored in `public_key` (such as the Id or fingerprint for a PGP key, or the\nCN for a cert), or a reference to an external key (such as a reference to a\nkey in Cloud Key Management Service)."
        }
      },
      "id": "BuildSignature"
    },
    "CreateOperationRequest": {
      "type": "object",
      "properties": {
        "operation": {
          "$ref": "Operation",
          "description": "The operation to create."
        },
        "operationId": {
          "type": "string",
          "description": "The ID to use for this operation."
        }
      },
      "id": "CreateOperationRequest",
      "description": "Request for creating an operation"
    },
    "Discovered": {
      "type": "object",
      "properties": {
        "analysisStatusError": {
          "$ref": "Status",
          "description": "When an error is encountered this will contain a LocalizedMessage under\ndetails to show to the user. The LocalizedMessage output only and\npopulated by the API."
        },
        "operation": {
          "description": "Output only. An operation that indicates the status of the current scan.\nThis field is deprecated, do not use.",
          "$ref": "Operation"
        },
        "analysisStatus": {
          "description": "The status of discovery for the resource.",
          "type": "string",
          "enumDescriptions": [
            "Unknown",
            "Resource is known but no action has been taken yet.",
            "Resource is being analyzed.",
            "Analysis has finished successfully.",
            "Analysis has finished unsuccessfully, the analysis itself is in a bad\nstate.",
            "The resource is known not to be supported."
          ],
          "enum": [
            "ANALYSIS_STATUS_UNSPECIFIED",
            "PENDING",
            "SCANNING",
            "FINISHED_SUCCESS",
            "FINISHED_FAILED",
            "FINISHED_UNSUPPORTED"
          ]
        },
        "continuousAnalysis": {
          "type": "string",
          "enumDescriptions": [
            "Unknown",
            "The resource is continuously analyzed.",
            "The resource is ignored for continuous analysis."
          ],
          "enum": [
            "CONTINUOUS_ANALYSIS_UNSPECIFIED",
            "ACTIVE",
            "INACTIVE"
          ],
          "description": "Whether the resource is continuously analyzed."
        }
      },
      "id": "Discovered",
      "description": "Provides information about the scan status of a discovered resource."
    },
    "GoogleDevtoolsContaineranalysisV1alpha1SourceContext": {
      "type": "object",
      "properties": {
        "cloudRepo": {
          "description": "A SourceContext referring to a revision in a Google Cloud Source Repo.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext"
        },
        "labels": {
          "description": "Labels with user defined metadata.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "git": {
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext",
          "description": "A SourceContext referring to any third party Git repo (e.g., GitHub)."
        },
        "gerrit": {
          "description": "A SourceContext referring to a Gerrit project.",
          "$ref": "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext"
        }
      },
      "id": "GoogleDevtoolsContaineranalysisV1alpha1SourceContext",
      "description": "A SourceContext is a reference to a tree of files. A SourceContext together\nwith a path point to a unique revision of a single file or directory."
    },
    "GoogleDevtoolsContaineranalysisV1alpha1AliasContext": {
      "id": "GoogleDevtoolsContaineranalysisV1alpha1AliasContext",
      "description": "An alias to a repo revision.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The alias name.",
          "type": "string"
        },
        "kind": {
          "description": "The alias kind.",
          "type": "string",
          "enumDescriptions": [
            "Unknown.",
            "Git tag.",
            "Git branch.",
            "Used to specify non-standard aliases. For example, if a Git repo has a\nref named \"refs/foo/bar\"."
          ],
          "enum": [
            "KIND_UNSPECIFIED",
            "FIXED",
            "MOVABLE",
            "OTHER"
          ]
        }
      }
    },
    "Expr": {
      "id": "Expr",
      "description": "Represents an expression text. Example:\n\n    title: \"User account presence\"\n    description: \"Determines whether the request has a user account\"\n    expression: \"size(request.user) \u003e 0\"",
      "type": "object",
      "properties": {
        "title": {
          "description": "An optional title for the expression, i.e. a short string describing\nits purpose. This can be used e.g. in UIs which allow to enter the\nexpression.",
          "type": "string"
        },
        "location": {
          "description": "An optional string indicating the location of the expression for error\nreporting, e.g. a file name and a position in the file.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "An optional description of the expression. This is a longer text which\ndescribes the expression, e.g. when hovered over it in a UI."
        },
        "expression": {
          "description": "Textual representation of an expression in\nCommon Expression Language syntax.\n\nThe application context of the containing message determines which\nwell-known feature set of CEL is supported.",
          "type": "string"
        }
      }
    },
    "PackageIssue": {
      "type": "object",
      "properties": {
        "affectedLocation": {
          "description": "The location of the vulnerability.",
          "$ref": "VulnerabilityLocation"
        },
        "fixedLocation": {
          "$ref": "VulnerabilityLocation",
          "description": "The location of the available fix for vulnerability."
        },
        "severityName": {
          "type": "string"
        }
      },
      "id": "PackageIssue",
      "description": "This message wraps a location affected by a vulnerability and its\nassociated fix (if one is available)."
    },
    "Deployment": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Address of the runtime element hosting this deployment.",
          "type": "string"
        },
        "resourceUri": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. Resource URI for the artifact being deployed taken from the\ndeployable field with the same name."
        },
        "userEmail": {
          "type": "string",
          "description": "Identity of the user that triggered this deployment."
        },
        "config": {
          "description": "Configuration used to create this deployment.",
          "type": "string"
        },
        "undeployTime": {
          "description": "End of the lifetime of this deployment.",
          "format": "google-datetime",
          "type": "string"
        },
        "platform": {
          "enum": [
            "PLATFORM_UNSPECIFIED",
            "GKE",
            "FLEX",
            "CUSTOM"
          ],
          "description": "Platform hosting this deployment.",
          "type": "string",
          "enumDescriptions": [
            "Unknown",
            "Google Container Engine",
            "Google App Engine: Flexible Environment",
            "Custom user-defined platform"
          ]
        },
        "deployTime": {
          "type": "string",
          "description": "Beginning of the lifetime of this deployment.",
          "format": "google-datetime"
        }
      },
      "id": "Deployment",
      "description": "The period during which some deployable was active in a runtime."
    },
    "Detail": {
      "id": "Detail",
      "description": "Identifies all occurrences of this vulnerability in the package for a\nspecific distro/location\nFor example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2",
      "type": "object",
      "properties": {
        "isObsolete": {
          "description": "Whether this Detail is obsolete. Occurrences are expected not to point to\nobsolete details.",
          "type": "boolean"
        },
        "packageType": {
          "description": "The type of package; whether native or non native(ruby gems,\nnode.js packages etc)",
          "type": "string"
        },
        "fixedLocation": {
          "$ref": "VulnerabilityLocation",
          "description": "The fix for this specific package version."
        },
        "description": {
          "description": "A vendor-specific description of this note.",
          "type": "string"
        },
        "cpeUri": {
          "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in\nwhich the vulnerability manifests.  Examples include distro or storage\nlocation for vulnerable jar.\nThis field can be used as a filter in list requests.",
          "type": "string"
        },
        "severityName": {
          "description": "The severity (eg: distro assigned severity) for this vulnerability.",
          "type": "string"
        },
        "minAffectedVersion": {
          "$ref": "Version",
          "description": "The min version of the package in which the vulnerability exists."
        },
        "maxAffectedVersion": {
          "$ref": "Version",
          "description": "Deprecated, do not use. Use fixed_location instead.\n\nThe max version of the package in which the vulnerability exists."
        },
        "package": {
          "description": "The name of the package where the vulnerability was found.\nThis field can be used as a filter in list requests.",
          "type": "string"
        }
      }
    },
    "GetIamPolicyRequest": {
      "description": "Request message for `GetIamPolicy` method.",
      "type": "object",
      "properties": {},
      "id": "GetIamPolicyRequest"
    },
    "TestIamPermissionsResponse": {
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is\nallowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "TestIamPermissionsResponse"
    }
  },
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "protocol": "rest",
  "canonicalName": "Container Analysis",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "rootUrl": "https://containeranalysis.googleapis.com/",
  "ownerDomain": "google.com",
  "name": "containeranalysis",
  "batchPath": "batch",
  "fullyEncodeReservedExpansion": true,
  "title": "Container Analysis API",
  "ownerName": "Google",
  "resources": {
    "providers": {
      "resources": {
        "notes": {
          "methods": {
            "testIamPermissions": {
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "description": "Returns the permissions that a caller has on the specified note or\noccurrence resource. Requires list permission on the project (for example,\n\"storage.objects.list\" on the containing bucket for testing permission of\nan object). Attempting to call this method on a non-existent resource will\nresult in a `NOT_FOUND` error if the user has list permission on the\nproject, or a `PERMISSION_DENIED` error otherwise. The resource takes the\nfollowing formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for\n`Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "parameterOrder": [
                "resource"
              ],
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "resource": {
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:testIamPermissions",
              "path": "v1alpha1/{+resource}:testIamPermissions",
              "id": "containeranalysis.providers.notes.testIamPermissions"
            },
            "delete": {
              "response": {
                "$ref": "Empty"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "description": "The name of the note in the form of\n\"providers/{provider_id}/notes/{NOTE_ID}\"",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "path": "v1alpha1/{+name}",
              "id": "containeranalysis.providers.notes.delete",
              "description": "Deletes the given `Note` from the system."
            },
            "list": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "pattern": "^providers/[^/]+$",
                  "location": "path",
                  "description": "The name field will contain the project Id for example:\n\"providers/{provider_id}\n@Deprecated"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "type": "string"
                },
                "pageSize": {
                  "location": "query",
                  "description": "Number of notes to return in the list.",
                  "format": "int32",
                  "type": "integer"
                },
                "parent": {
                  "type": "string",
                  "location": "query",
                  "description": "This field contains the project Id for example: \"projects/{PROJECT_ID}\"."
                },
                "filter": {
                  "type": "string",
                  "location": "query",
                  "description": "The filter expression."
                }
              },
              "flatPath": "v1alpha1/providers/{providersId}/notes",
              "id": "containeranalysis.providers.notes.list",
              "path": "v1alpha1/{+name}/notes",
              "description": "Lists all `Notes` for a given project.",
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "ListNotesResponse"
              }
            },
            "setIamPolicy": {
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "description": "Sets the access control policy on the specified `Note` or `Occurrence`.\nRequires `containeranalysis.notes.setIamPolicy` or\n`containeranalysis.occurrences.setIamPolicy` permission if the resource is\na `Note` or an `Occurrence`, respectively.\nAttempting to call this method without these permissions will result in a `\n`PERMISSION_DENIED` error.\nAttempting to call this method on a non-existent resource will result in a\n`NOT_FOUND` error if the user has `containeranalysis.notes.list` permission\non a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or\na `PERMISSION_DENIED` error otherwise. The resource takes the following\nformats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences\nand projects/{projectid}/notes/{noteid} for notes",
              "response": {
                "$ref": "Policy"
              },
              "parameterOrder": [
                "resource"
              ],
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "resource": {
                  "pattern": "^providers/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                  "required": true,
                  "type": "string"
                }
              },
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:setIamPolicy",
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "id": "containeranalysis.providers.notes.setIamPolicy"
            },
            "create": {
              "description": "Creates a new `Note`.",
              "request": {
                "$ref": "Note"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Note"
              },
              "parameters": {
                "parent": {
                  "location": "query",
                  "description": "This field contains the project Id for example:\n\"projects/{project_id}",
                  "type": "string"
                },
                "noteId": {
                  "location": "query",
                  "description": "The ID to use for this note.",
                  "type": "string"
                },
                "name": {
                  "location": "path",
                  "description": "The name of the project.\nShould be of the form \"providers/{provider_id}\".\n@Deprecated",
                  "required": true,
                  "type": "string",
                  "pattern": "^providers/[^/]+$"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/providers/{providersId}/notes",
              "id": "containeranalysis.providers.notes.create",
              "path": "v1alpha1/{+name}/notes"
            },
            "getIamPolicy": {
              "response": {
                "$ref": "Policy"
              },
              "parameterOrder": [
                "resource"
              ],
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "resource": {
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                  "required": true,
                  "type": "string",
                  "pattern": "^providers/[^/]+/notes/[^/]+$"
                }
              },
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:getIamPolicy",
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "id": "containeranalysis.providers.notes.getIamPolicy",
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "description": "Gets the access control policy for a note or an `Occurrence` resource.\nRequires `containeranalysis.notes.setIamPolicy` or\n`containeranalysis.occurrences.setIamPolicy` permission if the resource is\na note or occurrence, respectively.\nAttempting to call this method on a resource without the required\npermission will result in a `PERMISSION_DENIED` error. Attempting to call\nthis method on a non-existent resource will result in a `NOT_FOUND` error\nif the user has list permission on the project, or a `PERMISSION_DENIED`\nerror otherwise. The resource takes the following formats:\n`projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and\nprojects/{PROJECT_ID}/notes/{NOTE_ID} for notes"
            },
            "patch": {
              "description": "Updates an existing `Note`.",
              "request": {
                "$ref": "Note"
              },
              "httpMethod": "PATCH",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Note"
              },
              "parameters": {
                "updateMask": {
                  "type": "string",
                  "location": "query",
                  "description": "The fields to update.",
                  "format": "google-fieldmask"
                },
                "name": {
                  "location": "path",
                  "description": "The name of the note.\nShould be of the form \"projects/{provider_id}/notes/{note_id}\".",
                  "required": true,
                  "type": "string",
                  "pattern": "^providers/[^/]+/notes/[^/]+$"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "id": "containeranalysis.providers.notes.patch",
              "path": "v1alpha1/{+name}"
            },
            "get": {
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Note"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "description": "The name of the note in the form of\n\"providers/{provider_id}/notes/{NOTE_ID}\"",
                  "required": true,
                  "type": "string",
                  "pattern": "^providers/[^/]+/notes/[^/]+$"
                }
              },
              "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
              "id": "containeranalysis.providers.notes.get",
              "path": "v1alpha1/{+name}",
              "description": "Returns the requested `Note`."
            }
          },
          "resources": {
            "occurrences": {
              "methods": {
                "list": {
                  "id": "containeranalysis.providers.notes.occurrences.list",
                  "path": "v1alpha1/{+name}/occurrences",
                  "description": "Lists `Occurrences` referencing the specified `Note`. Use this method to\nget all occurrences referencing your `Note` across all your customer\nprojects.",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ListNoteOccurrencesResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "filter": {
                      "description": "The filter expression.",
                      "type": "string",
                      "location": "query"
                    },
                    "name": {
                      "pattern": "^providers/[^/]+/notes/[^/]+$",
                      "location": "path",
                      "description": "The name field will contain the note name for example:\n  \"provider/{provider_id}/notes/{note_id}\"",
                      "required": true,
                      "type": "string"
                    },
                    "pageToken": {
                      "description": "Token to provide to skip to a particular spot in the list.",
                      "type": "string",
                      "location": "query"
                    },
                    "pageSize": {
                      "location": "query",
                      "description": "Number of notes to return in the list.",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}/occurrences"
                }
              }
            }
          }
        }
      }
    },
    "projects": {
      "resources": {
        "operations": {
          "methods": {
            "create": {
              "path": "v1alpha1/{+parent}/operations",
              "id": "containeranalysis.projects.operations.create",
              "request": {
                "$ref": "CreateOperationRequest"
              },
              "description": "Creates a new `Operation`.",
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "parent": {
                  "location": "path",
                  "description": "The project Id that this operation should be created under.",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/operations"
            },
            "patch": {
              "flatPath": "v1alpha1/projects/{projectsId}/operations/{operationsId}",
              "path": "v1alpha1/{+name}",
              "id": "containeranalysis.projects.operations.patch",
              "description": "Updates an existing operation returns an error if operation\n does not exist. The only valid operations are to update mark the done bit\nchange the result.",
              "request": {
                "$ref": "UpdateOperationRequest"
              },
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "PATCH",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/operations/[^/]+$",
                  "location": "path",
                  "description": "The name of the Operation.\nShould be of the form \"projects/{provider_id}/operations/{operation_id}\".",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            }
          }
        },
        "occurrences": {
          "methods": {
            "create": {
              "response": {
                "$ref": "Occurrence"
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "description": "The name of the project.  Should be of the form \"projects/{project_id}\".\n@Deprecated",
                  "type": "string",
                  "location": "query"
                },
                "parent": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "description": "This field contains the project Id for example: \"projects/{project_id}\""
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences",
              "path": "v1alpha1/{+parent}/occurrences",
              "id": "containeranalysis.projects.occurrences.create",
              "description": "Creates a new `Occurrence`. Use this method to create `Occurrences`\nfor a resource.",
              "request": {
                "$ref": "Occurrence"
              }
            },
            "setIamPolicy": {
              "description": "Sets the access control policy on the specified `Note` or `Occurrence`.\nRequires `containeranalysis.notes.setIamPolicy` or\n`containeranalysis.occurrences.setIamPolicy` permission if the resource is\na `Note` or an `Occurrence`, respectively.\nAttempting to call this method without these permissions will result in a `\n`PERMISSION_DENIED` error.\nAttempting to call this method on a non-existent resource will result in a\n`NOT_FOUND` error if the user has `containeranalysis.notes.list` permission\non a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or\na `PERMISSION_DENIED` error otherwise. The resource takes the following\nformats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences\nand projects/{projectid}/notes/{noteid} for notes",
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "response": {
                "$ref": "Policy"
              },
              "parameterOrder": [
                "resource"
              ],
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy",
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "id": "containeranalysis.projects.occurrences.setIamPolicy"
            },
            "getIamPolicy": {
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "id": "containeranalysis.projects.occurrences.getIamPolicy",
              "request": {
                "$ref": "GetIamPolicyRequest"
              },
              "description": "Gets the access control policy for a note or an `Occurrence` resource.\nRequires `containeranalysis.notes.setIamPolicy` or\n`containeranalysis.occurrences.setIamPolicy` permission if the resource is\na note or occurrence, respectively.\nAttempting to call this method on a resource without the required\npermission will result in a `PERMISSION_DENIED` error. Attempting to call\nthis method on a non-existent resource will result in a `NOT_FOUND` error\nif the user has list permission on the project, or a `PERMISSION_DENIED`\nerror otherwise. The resource takes the following formats:\n`projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and\nprojects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
              "response": {
                "$ref": "Policy"
              },
              "parameterOrder": [
                "resource"
              ],
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "resource": {
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$"
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy"
            },
            "get": {
              "id": "containeranalysis.projects.occurrences.get",
              "path": "v1alpha1/{+name}",
              "description": "Returns the requested `Occurrence`.",
              "httpMethod": "GET",
              "response": {
                "$ref": "Occurrence"
              },
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path",
                  "description": "The name of the occurrence of the form\n\"projects/{project_id}/occurrences/{OCCURRENCE_ID}\""
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}"
            },
            "patch": {
              "description": "Updates an existing occurrence.",
              "request": {
                "$ref": "Occurrence"
              },
              "response": {
                "$ref": "Occurrence"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "PATCH",
              "parameters": {
                "updateMask": {
                  "description": "The fields to update.",
                  "format": "google-fieldmask",
                  "type": "string",
                  "location": "query"
                },
                "name": {
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path",
                  "description": "The name of the occurrence.\nShould be of the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\".",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "path": "v1alpha1/{+name}",
              "id": "containeranalysis.projects.occurrences.patch"
            },
            "getVulnerabilitySummary": {
              "response": {
                "$ref": "GetVulnzOccurrencesSummaryResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "parent": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "description": "This contains the project Id for example: projects/{project_id}"
                },
                "filter": {
                  "location": "query",
                  "description": "The filter expression.",
                  "type": "string"
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences:vulnerabilitySummary",
              "path": "v1alpha1/{+parent}/occurrences:vulnerabilitySummary",
              "id": "containeranalysis.projects.occurrences.getVulnerabilitySummary",
              "description": "Gets a summary of the number and severity of occurrences."
            },
            "testIamPermissions": {
              "description": "Returns the permissions that a caller has on the specified note or\noccurrence resource. Requires list permission on the project (for example,\n\"storage.objects.list\" on the containing bucket for testing permission of\nan object). Attempting to call this method on a non-existent resource will\nresult in a `NOT_FOUND` error if the user has list permission on the\nproject, or a `PERMISSION_DENIED` error otherwise. The resource takes the\nfollowing formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for\n`Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "httpMethod": "POST",
              "parameterOrder": [
                "resource"
              ],
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions",
              "id": "containeranalysis.projects.occurrences.testIamPermissions",
              "path": "v1alpha1/{+resource}:testIamPermissions"
            },
            "delete": {
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$",
                  "location": "path",
                  "description": "The name of the occurrence in the form of\n\"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
              "id": "containeranalysis.projects.occurrences.delete",
              "path": "v1alpha1/{+name}",
              "description": "Deletes the given `Occurrence` from the system. Use this when\nan `Occurrence` is no longer applicable for the given resource.",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              }
            },
            "getNotes": {
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Note"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "description": "The name of the occurrence in the form\n\"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/occurrences/[^/]+$"
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}/notes",
              "id": "containeranalysis.projects.occurrences.getNotes",
              "path": "v1alpha1/{+name}/notes",
              "description": "Gets the `Note` attached to the given `Occurrence`."
            },
            "list": {
              "path": "v1alpha1/{+parent}/occurrences",
              "id": "containeranalysis.projects.occurrences.list",
              "description": "Lists active `Occurrences` for a given project matching the filters.",
              "response": {
                "$ref": "ListOccurrencesResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET",
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "type": "string"
                },
                "kind": {
                  "location": "query",
                  "enum": [
                    "KIND_UNSPECIFIED",
                    "PACKAGE_VULNERABILITY",
                    "BUILD_DETAILS",
                    "IMAGE_BASIS",
                    "PACKAGE_MANAGER",
                    "DEPLOYABLE",
                    "DISCOVERY",
                    "ATTESTATION_AUTHORITY"
                  ],
                  "description": "The kind of occurrences to filter on.",
                  "type": "string"
                },
                "pageSize": {
                  "type": "integer",
                  "location": "query",
                  "description": "Number of occurrences to return in the list.",
                  "format": "int32"
                },
                "parent": {
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "description": "This contains the project Id for example: projects/{project_id}.",
                  "required": true,
                  "type": "string"
                },
                "name": {
                  "type": "string",
                  "location": "query",
                  "description": "The name field contains the project Id. For example:\n\"projects/{project_id}\n@Deprecated"
                },
                "filter": {
                  "description": "The filter expression.",
                  "type": "string",
                  "location": "query"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/occurrences"
            }
          }
        },
        "notes": {
          "methods": {
            "getIamPolicy": {
              "httpMethod": "POST",
              "parameterOrder": [
                "resource"
              ],
              "response": {
                "$ref": "Policy"
              },
              "parameters": {
                "resource": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:getIamPolicy",
              "id": "containeranalysis.projects.notes.getIamPolicy",
              "path": "v1alpha1/{+resource}:getIamPolicy",
              "description": "Gets the access control policy for a note or an `Occurrence` resource.\nRequires `containeranalysis.notes.setIamPolicy` or\n`containeranalysis.occurrences.setIamPolicy` permission if the resource is\na note or occurrence, respectively.\nAttempting to call this method on a resource without the required\npermission will result in a `PERMISSION_DENIED` error. Attempting to call\nthis method on a non-existent resource will result in a `NOT_FOUND` error\nif the user has list permission on the project, or a `PERMISSION_DENIED`\nerror otherwise. The resource takes the following formats:\n`projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and\nprojects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
              "request": {
                "$ref": "GetIamPolicyRequest"
              }
            },
            "patch": {
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
              "path": "v1alpha1/{+name}",
              "id": "containeranalysis.projects.notes.patch",
              "description": "Updates an existing `Note`.",
              "request": {
                "$ref": "Note"
              },
              "response": {
                "$ref": "Note"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "PATCH",
              "parameters": {
                "updateMask": {
                  "type": "string",
                  "location": "query",
                  "description": "The fields to update.",
                  "format": "google-fieldmask"
                },
                "name": {
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "description": "The name of the note.\nShould be of the form \"projects/{provider_id}/notes/{note_id}\".",
                  "required": true,
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "get": {
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "description": "The name of the note in the form of\n\"providers/{provider_id}/notes/{NOTE_ID}\""
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
              "id": "containeranalysis.projects.notes.get",
              "path": "v1alpha1/{+name}",
              "description": "Returns the requested `Note`.",
              "httpMethod": "GET",
              "response": {
                "$ref": "Note"
              },
              "parameterOrder": [
                "name"
              ]
            },
            "testIamPermissions": {
              "path": "v1alpha1/{+resource}:testIamPermissions",
              "id": "containeranalysis.projects.notes.testIamPermissions",
              "description": "Returns the permissions that a caller has on the specified note or\noccurrence resource. Requires list permission on the project (for example,\n\"storage.objects.list\" on the containing bucket for testing permission of\nan object). Attempting to call this method on a non-existent resource will\nresult in a `NOT_FOUND` error if the user has list permission on the\nproject, or a `PERMISSION_DENIED` error otherwise. The resource takes the\nfollowing formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for\n`Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "parameterOrder": [
                "resource"
              ],
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:testIamPermissions"
            },
            "delete": {
              "httpMethod": "DELETE",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "description": "The name of the note in the form of\n\"providers/{provider_id}/notes/{NOTE_ID}\""
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
              "id": "containeranalysis.projects.notes.delete",
              "path": "v1alpha1/{+name}",
              "description": "Deletes the given `Note` from the system."
            },
            "list": {
              "flatPath": "v1alpha1/projects/{projectsId}/notes",
              "id": "containeranalysis.projects.notes.list",
              "path": "v1alpha1/{+parent}/notes",
              "description": "Lists all `Notes` for a given project.",
              "httpMethod": "GET",
              "response": {
                "$ref": "ListNotesResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "name": {
                  "location": "query",
                  "description": "The name field will contain the project Id for example:\n\"providers/{provider_id}\n@Deprecated",
                  "type": "string"
                },
                "pageToken": {
                  "location": "query",
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "type": "string"
                },
                "pageSize": {
                  "location": "query",
                  "description": "Number of notes to return in the list.",
                  "format": "int32",
                  "type": "integer"
                },
                "parent": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "location": "path",
                  "description": "This field contains the project Id for example: \"projects/{PROJECT_ID}\"."
                },
                "filter": {
                  "type": "string",
                  "location": "query",
                  "description": "The filter expression."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "setIamPolicy": {
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "resource": {
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/notes/[^/]+$",
                  "location": "path",
                  "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field."
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:setIamPolicy",
              "path": "v1alpha1/{+resource}:setIamPolicy",
              "id": "containeranalysis.projects.notes.setIamPolicy",
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "description": "Sets the access control policy on the specified `Note` or `Occurrence`.\nRequires `containeranalysis.notes.setIamPolicy` or\n`containeranalysis.occurrences.setIamPolicy` permission if the resource is\na `Note` or an `Occurrence`, respectively.\nAttempting to call this method without these permissions will result in a `\n`PERMISSION_DENIED` error.\nAttempting to call this method on a non-existent resource will result in a\n`NOT_FOUND` error if the user has `containeranalysis.notes.list` permission\non a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or\na `PERMISSION_DENIED` error otherwise. The resource takes the following\nformats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences\nand projects/{projectid}/notes/{noteid} for notes",
              "response": {
                "$ref": "Policy"
              },
              "parameterOrder": [
                "resource"
              ],
              "httpMethod": "POST"
            },
            "create": {
              "response": {
                "$ref": "Note"
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "location": "path",
                  "description": "This field contains the project Id for example:\n\"projects/{project_id}",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+$"
                },
                "noteId": {
                  "description": "The ID to use for this note.",
                  "type": "string",
                  "location": "query"
                },
                "name": {
                  "location": "query",
                  "description": "The name of the project.\nShould be of the form \"providers/{provider_id}\".\n@Deprecated",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/notes",
              "path": "v1alpha1/{+parent}/notes",
              "id": "containeranalysis.projects.notes.create",
              "description": "Creates a new `Note`.",
              "request": {
                "$ref": "Note"
              }
            }
          },
          "resources": {
            "occurrences": {
              "methods": {
                "list": {
                  "description": "Lists `Occurrences` referencing the specified `Note`. Use this method to\nget all occurrences referencing your `Note` across all your customer\nprojects.",
                  "response": {
                    "$ref": "ListNoteOccurrencesResponse"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "The filter expression."
                    },
                    "name": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/notes/[^/]+$",
                      "location": "path",
                      "description": "The name field will contain the note name for example:\n  \"provider/{provider_id}/notes/{note_id}\""
                    },
                    "pageToken": {
                      "description": "Token to provide to skip to a particular spot in the list.",
                      "type": "string",
                      "location": "query"
                    },
                    "pageSize": {
                      "type": "integer",
                      "location": "query",
                      "description": "Number of notes to return in the list.",
                      "format": "int32"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}/occurrences",
                  "path": "v1alpha1/{+name}/occurrences",
                  "id": "containeranalysis.projects.notes.occurrences.list"
                }
              }
            }
          }
        },
        "scanConfigs": {
          "methods": {
            "get": {
              "response": {
                "$ref": "ScanConfig"
              },
              "parameterOrder": [
                "name"
              ],
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "name": {
                  "location": "path",
                  "description": "The name of the ScanConfig in the form\nprojects/{project_id}/scanConfigs/{scan_config_id}",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/scanConfigs/[^/]+$"
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs/{scanConfigsId}",
              "path": "v1alpha1/{+name}",
              "id": "containeranalysis.projects.scanConfigs.get",
              "description": "Gets a specific scan configuration for a project."
            },
            "list": {
              "description": "Lists scan configurations for a project.",
              "response": {
                "$ref": "ListScanConfigsResponse"
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "parent": {
                  "description": "This containers the project Id i.e.: projects/{project_id}",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+$",
                  "location": "path"
                },
                "filter": {
                  "location": "query",
                  "description": "The filter expression.",
                  "type": "string"
                },
                "pageToken": {
                  "location": "query",
                  "description": "The page token to use for the next request.",
                  "type": "string"
                },
                "pageSize": {
                  "description": "The number of items to return.",
                  "format": "int32",
                  "type": "integer",
                  "location": "query"
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs",
              "path": "v1alpha1/{+parent}/scanConfigs",
              "id": "containeranalysis.projects.scanConfigs.list"
            },
            "patch": {
              "httpMethod": "PATCH",
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "ScanConfig"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "updateMask": {
                  "location": "query",
                  "description": "The fields to update.",
                  "format": "google-fieldmask",
                  "type": "string"
                },
                "name": {
                  "location": "path",
                  "description": "The scan config to update of the form\nprojects/{project_id}/scanConfigs/{scan_config_id}.",
                  "required": true,
                  "type": "string",
                  "pattern": "^projects/[^/]+/scanConfigs/[^/]+$"
                }
              },
              "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs/{scanConfigsId}",
              "id": "containeranalysis.projects.scanConfigs.patch",
              "path": "v1alpha1/{+name}",
              "request": {
                "$ref": "ScanConfig"
              },
              "description": "Updates the scan configuration to a new value."
            }
          }
        }
      }
    }
  },
  "parameters": {
    "upload_protocol": {
      "type": "string",
      "location": "query",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "default": "true",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "type": "string"
    },
    "alt": {
      "location": "query",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    }
  },
  "version": "v1alpha1",
  "baseUrl": "https://containeranalysis.googleapis.com/",
  "servicePath": "",
  "kind": "discovery#restDescription",
  "description": "An implementation of the Grafeas API, which stores, and enables querying and retrieval of critical metadata about all of your software artifacts."
}
