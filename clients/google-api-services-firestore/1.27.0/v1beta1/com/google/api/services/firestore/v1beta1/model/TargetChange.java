/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1beta1.model;

/**
 * Targets being watched have changed.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Firestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TargetChange extends com.google.api.client.json.GenericJson {

  /**
   * The error that resulted in this change, if applicable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Status cause;

  /**
   * The consistent `read_time` for the given `target_ids` (omitted when the target_ids are not at a
   * consistent snapshot).
   *
   * The stream is guaranteed to send a `read_time` with `target_ids` empty whenever the entire
   * stream reaches a new consistent snapshot. ADD, CURRENT, and RESET messages are guaranteed to
   * (eventually) result in a new consistent snapshot (while NO_CHANGE and REMOVE messages are not).
   *
   * For a given stream, `read_time` is guaranteed to be monotonically increasing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String readTime;

  /**
   * A token that can be used to resume the stream for the given `target_ids`, or all targets if
   * `target_ids` is empty.
   *
   * Not set on every target change.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String resumeToken;

  /**
   * The type of change that occurred.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String targetChangeType;

  /**
   * The target IDs of targets that have changed.
   *
   * If empty, the change applies to all targets.
   *
   * For `target_change_type=ADD`, the order of the target IDs matches the order of the requests to
   * add the targets. This allows clients to unambiguously associate server-assigned target IDs with
   * added targets.
   *
   * For other states, the order of the target IDs is not defined.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> targetIds;

  /**
   * The error that resulted in this change, if applicable.
   * @return value or {@code null} for none
   */
  public Status getCause() {
    return cause;
  }

  /**
   * The error that resulted in this change, if applicable.
   * @param cause cause or {@code null} for none
   */
  public TargetChange setCause(Status cause) {
    this.cause = cause;
    return this;
  }

  /**
   * The consistent `read_time` for the given `target_ids` (omitted when the target_ids are not at a
   * consistent snapshot).
   *
   * The stream is guaranteed to send a `read_time` with `target_ids` empty whenever the entire
   * stream reaches a new consistent snapshot. ADD, CURRENT, and RESET messages are guaranteed to
   * (eventually) result in a new consistent snapshot (while NO_CHANGE and REMOVE messages are not).
   *
   * For a given stream, `read_time` is guaranteed to be monotonically increasing.
   * @return value or {@code null} for none
   */
  public String getReadTime() {
    return readTime;
  }

  /**
   * The consistent `read_time` for the given `target_ids` (omitted when the target_ids are not at a
   * consistent snapshot).
   *
   * The stream is guaranteed to send a `read_time` with `target_ids` empty whenever the entire
   * stream reaches a new consistent snapshot. ADD, CURRENT, and RESET messages are guaranteed to
   * (eventually) result in a new consistent snapshot (while NO_CHANGE and REMOVE messages are not).
   *
   * For a given stream, `read_time` is guaranteed to be monotonically increasing.
   * @param readTime readTime or {@code null} for none
   */
  public TargetChange setReadTime(String readTime) {
    this.readTime = readTime;
    return this;
  }

  /**
   * A token that can be used to resume the stream for the given `target_ids`, or all targets if
   * `target_ids` is empty.
   *
   * Not set on every target change.
   * @see #decodeResumeToken()
   * @return value or {@code null} for none
   */
  public java.lang.String getResumeToken() {
    return resumeToken;
  }

  /**
   * A token that can be used to resume the stream for the given `target_ids`, or all targets if
   * `target_ids` is empty.
   *
   * Not set on every target change.
   * @see #getResumeToken()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeResumeToken() {
    return com.google.api.client.util.Base64.decodeBase64(resumeToken);
  }

  /**
   * A token that can be used to resume the stream for the given `target_ids`, or all targets if
   * `target_ids` is empty.
   *
   * Not set on every target change.
   * @see #encodeResumeToken()
   * @param resumeToken resumeToken or {@code null} for none
   */
  public TargetChange setResumeToken(java.lang.String resumeToken) {
    this.resumeToken = resumeToken;
    return this;
  }

  /**
   * A token that can be used to resume the stream for the given `target_ids`, or all targets if
   * `target_ids` is empty.
   *
   * Not set on every target change.
   * @see #setResumeToken()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public TargetChange encodeResumeToken(byte[] resumeToken) {
    this.resumeToken = com.google.api.client.util.Base64.encodeBase64URLSafeString(resumeToken);
    return this;
  }

  /**
   * The type of change that occurred.
   * @return value or {@code null} for none
   */
  public java.lang.String getTargetChangeType() {
    return targetChangeType;
  }

  /**
   * The type of change that occurred.
   * @param targetChangeType targetChangeType or {@code null} for none
   */
  public TargetChange setTargetChangeType(java.lang.String targetChangeType) {
    this.targetChangeType = targetChangeType;
    return this;
  }

  /**
   * The target IDs of targets that have changed.
   *
   * If empty, the change applies to all targets.
   *
   * For `target_change_type=ADD`, the order of the target IDs matches the order of the requests to
   * add the targets. This allows clients to unambiguously associate server-assigned target IDs with
   * added targets.
   *
   * For other states, the order of the target IDs is not defined.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getTargetIds() {
    return targetIds;
  }

  /**
   * The target IDs of targets that have changed.
   *
   * If empty, the change applies to all targets.
   *
   * For `target_change_type=ADD`, the order of the target IDs matches the order of the requests to
   * add the targets. This allows clients to unambiguously associate server-assigned target IDs with
   * added targets.
   *
   * For other states, the order of the target IDs is not defined.
   * @param targetIds targetIds or {@code null} for none
   */
  public TargetChange setTargetIds(java.util.List<java.lang.Integer> targetIds) {
    this.targetIds = targetIds;
    return this;
  }

  @Override
  public TargetChange set(String fieldName, Object value) {
    return (TargetChange) super.set(fieldName, value);
  }

  @Override
  public TargetChange clone() {
    return (TargetChange) super.clone();
  }

}
