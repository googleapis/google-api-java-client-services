/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.bigquery.model;

/**
 * Evaluation metrics for binary classification/classifier models.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the BigQuery API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BinaryClassificationMetrics extends com.google.api.client.json.GenericJson {

  /**
   * Aggregate classification metrics.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AggregateClassificationMetrics aggregateClassificationMetrics;

  /**
   * Binary confusion matrix at multiple thresholds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<BinaryConfusionMatrix> binaryConfusionMatrixList;

  /**
   * Label representing the negative class.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String negativeLabel;

  /**
   * Label representing the positive class.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String positiveLabel;

  /**
   * Aggregate classification metrics.
   * @return value or {@code null} for none
   */
  public AggregateClassificationMetrics getAggregateClassificationMetrics() {
    return aggregateClassificationMetrics;
  }

  /**
   * Aggregate classification metrics.
   * @param aggregateClassificationMetrics aggregateClassificationMetrics or {@code null} for none
   */
  public BinaryClassificationMetrics setAggregateClassificationMetrics(AggregateClassificationMetrics aggregateClassificationMetrics) {
    this.aggregateClassificationMetrics = aggregateClassificationMetrics;
    return this;
  }

  /**
   * Binary confusion matrix at multiple thresholds.
   * @return value or {@code null} for none
   */
  public java.util.List<BinaryConfusionMatrix> getBinaryConfusionMatrixList() {
    return binaryConfusionMatrixList;
  }

  /**
   * Binary confusion matrix at multiple thresholds.
   * @param binaryConfusionMatrixList binaryConfusionMatrixList or {@code null} for none
   */
  public BinaryClassificationMetrics setBinaryConfusionMatrixList(java.util.List<BinaryConfusionMatrix> binaryConfusionMatrixList) {
    this.binaryConfusionMatrixList = binaryConfusionMatrixList;
    return this;
  }

  /**
   * Label representing the negative class.
   * @return value or {@code null} for none
   */
  public java.lang.String getNegativeLabel() {
    return negativeLabel;
  }

  /**
   * Label representing the negative class.
   * @param negativeLabel negativeLabel or {@code null} for none
   */
  public BinaryClassificationMetrics setNegativeLabel(java.lang.String negativeLabel) {
    this.negativeLabel = negativeLabel;
    return this;
  }

  /**
   * Label representing the positive class.
   * @return value or {@code null} for none
   */
  public java.lang.String getPositiveLabel() {
    return positiveLabel;
  }

  /**
   * Label representing the positive class.
   * @param positiveLabel positiveLabel or {@code null} for none
   */
  public BinaryClassificationMetrics setPositiveLabel(java.lang.String positiveLabel) {
    this.positiveLabel = positiveLabel;
    return this;
  }

  @Override
  public BinaryClassificationMetrics set(String fieldName, Object value) {
    return (BinaryClassificationMetrics) super.set(fieldName, value);
  }

  @Override
  public BinaryClassificationMetrics clone() {
    return (BinaryClassificationMetrics) super.clone();
  }

}
