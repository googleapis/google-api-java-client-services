/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vectortile.v1.model;

/**
 * Represents a 2D polyline. Used to represent segments such as roads, train tracks, etc.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Semantic Tile API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Line extends com.google.api.client.json.GenericJson {

  /**
   * The z-order of this geometry when rendered on a flat basemap. Geometry with a lower z-order
   * should be rendered beneath geometry with a higher z-order. This z-ordering does not imply
   * anything about the altitude of the area relative to the ground, but it can be used to prevent
   * z-fighting. Unlike Line.z_order this can be used to compare with Area.basemap_z_order, and in
   * fact may yield more accurate rendering (where a line may be rendered beneath an area).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BasemapZOrder basemapZOrder;

  /**
   * The vertices present in the polyline.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Vertex2DList vertexOffsets;

  /**
   * The z-order of the line. Lines with a lower z-order should be rendered beneath lines with a
   * higher z-order. This z-ordering does not imply anything about the altitude of the area relative
   * to the ground, but it can be used to prevent z-fighting during rendering on the client. In
   * general, larger and more important road features will have a higher z-order line associated
   * with them. This z-ordering can only be used to compare lines, and cannot be compared with the
   * z_order field in the Area message. The z-order may be negative or zero. Prefer
   * Line.basemap_z_order.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer zOrder;

  /**
   * The z-order of this geometry when rendered on a flat basemap. Geometry with a lower z-order
   * should be rendered beneath geometry with a higher z-order. This z-ordering does not imply
   * anything about the altitude of the area relative to the ground, but it can be used to prevent
   * z-fighting. Unlike Line.z_order this can be used to compare with Area.basemap_z_order, and in
   * fact may yield more accurate rendering (where a line may be rendered beneath an area).
   * @return value or {@code null} for none
   */
  public BasemapZOrder getBasemapZOrder() {
    return basemapZOrder;
  }

  /**
   * The z-order of this geometry when rendered on a flat basemap. Geometry with a lower z-order
   * should be rendered beneath geometry with a higher z-order. This z-ordering does not imply
   * anything about the altitude of the area relative to the ground, but it can be used to prevent
   * z-fighting. Unlike Line.z_order this can be used to compare with Area.basemap_z_order, and in
   * fact may yield more accurate rendering (where a line may be rendered beneath an area).
   * @param basemapZOrder basemapZOrder or {@code null} for none
   */
  public Line setBasemapZOrder(BasemapZOrder basemapZOrder) {
    this.basemapZOrder = basemapZOrder;
    return this;
  }

  /**
   * The vertices present in the polyline.
   * @return value or {@code null} for none
   */
  public Vertex2DList getVertexOffsets() {
    return vertexOffsets;
  }

  /**
   * The vertices present in the polyline.
   * @param vertexOffsets vertexOffsets or {@code null} for none
   */
  public Line setVertexOffsets(Vertex2DList vertexOffsets) {
    this.vertexOffsets = vertexOffsets;
    return this;
  }

  /**
   * The z-order of the line. Lines with a lower z-order should be rendered beneath lines with a
   * higher z-order. This z-ordering does not imply anything about the altitude of the area relative
   * to the ground, but it can be used to prevent z-fighting during rendering on the client. In
   * general, larger and more important road features will have a higher z-order line associated
   * with them. This z-ordering can only be used to compare lines, and cannot be compared with the
   * z_order field in the Area message. The z-order may be negative or zero. Prefer
   * Line.basemap_z_order.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getZOrder() {
    return zOrder;
  }

  /**
   * The z-order of the line. Lines with a lower z-order should be rendered beneath lines with a
   * higher z-order. This z-ordering does not imply anything about the altitude of the area relative
   * to the ground, but it can be used to prevent z-fighting during rendering on the client. In
   * general, larger and more important road features will have a higher z-order line associated
   * with them. This z-ordering can only be used to compare lines, and cannot be compared with the
   * z_order field in the Area message. The z-order may be negative or zero. Prefer
   * Line.basemap_z_order.
   * @param zOrder zOrder or {@code null} for none
   */
  public Line setZOrder(java.lang.Integer zOrder) {
    this.zOrder = zOrder;
    return this;
  }

  @Override
  public Line set(String fieldName, Object value) {
    return (Line) super.set(fieldName, value);
  }

  @Override
  public Line clone() {
    return (Line) super.clone();
  }

}
