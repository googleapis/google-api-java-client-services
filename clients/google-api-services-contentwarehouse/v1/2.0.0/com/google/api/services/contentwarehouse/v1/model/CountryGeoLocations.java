/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * List of locations assigned to a document.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CountryGeoLocations extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CountryGeoLocation> geoLocation;

  static {
    // hack to force ProGuard to consider CountryGeoLocation used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CountryGeoLocation.class);
  }

  /**
   * This will be set to true for documents which receive several clicks but are not assigned any
   * location because the click distribution is flat. Typical examples are global sites like
   * facebook.com, chains like walmart.com, informational sites like wikipedia.org etc. This flag is
   * not propagated to deeper pages since this signal is meant to indicate that a website or a part
   * of website is conclusively non-local, so propagating this information to deeper pages does not
   * make sense. If this flag is set, then the only possible geo_location will be the ones which are
   * propagated_from_a_subpage.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isNonLocationSpecific;

  /**
   * Depth of the URL from it's nearest parent in GeoLocation data. Webpages inherhit locations from
   * their parent pages. For example, if foo.com/a is assigned location L1, and foo.com/a/b is not
   * assigned any location, then http://www.foo.com/a/b inherits location L1 from it's nearest
   * parent foo.com/a in GeoLocation data. This attribute is the distance from the nearest parent
   * which is present in GeoLocation data. In this particular case, it will be 1.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer propagationDepthFromParent;

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<CountryGeoLocation> getGeoLocation() {
    return geoLocation;
  }

  /**
   * @param geoLocation geoLocation or {@code null} for none
   */
  public CountryGeoLocations setGeoLocation(java.util.List<CountryGeoLocation> geoLocation) {
    this.geoLocation = geoLocation;
    return this;
  }

  /**
   * This will be set to true for documents which receive several clicks but are not assigned any
   * location because the click distribution is flat. Typical examples are global sites like
   * facebook.com, chains like walmart.com, informational sites like wikipedia.org etc. This flag is
   * not propagated to deeper pages since this signal is meant to indicate that a website or a part
   * of website is conclusively non-local, so propagating this information to deeper pages does not
   * make sense. If this flag is set, then the only possible geo_location will be the ones which are
   * propagated_from_a_subpage.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsNonLocationSpecific() {
    return isNonLocationSpecific;
  }

  /**
   * This will be set to true for documents which receive several clicks but are not assigned any
   * location because the click distribution is flat. Typical examples are global sites like
   * facebook.com, chains like walmart.com, informational sites like wikipedia.org etc. This flag is
   * not propagated to deeper pages since this signal is meant to indicate that a website or a part
   * of website is conclusively non-local, so propagating this information to deeper pages does not
   * make sense. If this flag is set, then the only possible geo_location will be the ones which are
   * propagated_from_a_subpage.
   * @param isNonLocationSpecific isNonLocationSpecific or {@code null} for none
   */
  public CountryGeoLocations setIsNonLocationSpecific(java.lang.Boolean isNonLocationSpecific) {
    this.isNonLocationSpecific = isNonLocationSpecific;
    return this;
  }

  /**
   * Depth of the URL from it's nearest parent in GeoLocation data. Webpages inherhit locations from
   * their parent pages. For example, if foo.com/a is assigned location L1, and foo.com/a/b is not
   * assigned any location, then http://www.foo.com/a/b inherits location L1 from it's nearest
   * parent foo.com/a in GeoLocation data. This attribute is the distance from the nearest parent
   * which is present in GeoLocation data. In this particular case, it will be 1.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPropagationDepthFromParent() {
    return propagationDepthFromParent;
  }

  /**
   * Depth of the URL from it's nearest parent in GeoLocation data. Webpages inherhit locations from
   * their parent pages. For example, if foo.com/a is assigned location L1, and foo.com/a/b is not
   * assigned any location, then http://www.foo.com/a/b inherits location L1 from it's nearest
   * parent foo.com/a in GeoLocation data. This attribute is the distance from the nearest parent
   * which is present in GeoLocation data. In this particular case, it will be 1.
   * @param propagationDepthFromParent propagationDepthFromParent or {@code null} for none
   */
  public CountryGeoLocations setPropagationDepthFromParent(java.lang.Integer propagationDepthFromParent) {
    this.propagationDepthFromParent = propagationDepthFromParent;
    return this;
  }

  @Override
  public CountryGeoLocations set(String fieldName, Object value) {
    return (CountryGeoLocations) super.set(fieldName, value);
  }

  @Override
  public CountryGeoLocations clone() {
    return (CountryGeoLocations) super.clone();
  }

}
