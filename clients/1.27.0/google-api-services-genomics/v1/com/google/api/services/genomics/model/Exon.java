/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.genomics.model;

/**
 * Model definition for Exon.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Genomics API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Exon extends com.google.api.client.json.GenericJson {

  /**
   * The end position of the exon on this annotation's reference sequence, 0-based exclusive. Note
   * that this is relative to the reference start, and *not* the containing annotation start.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long end;

  /**
   * The frame of this exon. Contains a value of 0, 1, or 2, which indicates the offset of the first
   * coding base of the exon within the reading frame of the coding DNA sequence, if any. This field
   * is dependent on the strandedness of this annotation (see Annotation.reverse_strand). For
   * forward stranded annotations, this offset is relative to the exon.start. For reverse strand
   * annotations, this offset is relative to the exon.end `- 1`.
   *
   * Unset if this exon does not intersect the coding sequence. Upon creation of a transcript, the
   * frame must be populated for all or none of the coding exons.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer frame;

  /**
   * The start position of the exon on this annotation's reference sequence, 0-based inclusive. Note
   * that this is relative to the reference start, and **not** the containing annotation start.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long start;

  /**
   * The end position of the exon on this annotation's reference sequence, 0-based exclusive. Note
   * that this is relative to the reference start, and *not* the containing annotation start.
   * @return value or {@code null} for none
   */
  public java.lang.Long getEnd() {
    return end;
  }

  /**
   * The end position of the exon on this annotation's reference sequence, 0-based exclusive. Note
   * that this is relative to the reference start, and *not* the containing annotation start.
   * @param end end or {@code null} for none
   */
  public Exon setEnd(java.lang.Long end) {
    this.end = end;
    return this;
  }

  /**
   * The frame of this exon. Contains a value of 0, 1, or 2, which indicates the offset of the first
   * coding base of the exon within the reading frame of the coding DNA sequence, if any. This field
   * is dependent on the strandedness of this annotation (see Annotation.reverse_strand). For
   * forward stranded annotations, this offset is relative to the exon.start. For reverse strand
   * annotations, this offset is relative to the exon.end `- 1`.
   *
   * Unset if this exon does not intersect the coding sequence. Upon creation of a transcript, the
   * frame must be populated for all or none of the coding exons.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getFrame() {
    return frame;
  }

  /**
   * The frame of this exon. Contains a value of 0, 1, or 2, which indicates the offset of the first
   * coding base of the exon within the reading frame of the coding DNA sequence, if any. This field
   * is dependent on the strandedness of this annotation (see Annotation.reverse_strand). For
   * forward stranded annotations, this offset is relative to the exon.start. For reverse strand
   * annotations, this offset is relative to the exon.end `- 1`.
   *
   * Unset if this exon does not intersect the coding sequence. Upon creation of a transcript, the
   * frame must be populated for all or none of the coding exons.
   * @param frame frame or {@code null} for none
   */
  public Exon setFrame(java.lang.Integer frame) {
    this.frame = frame;
    return this;
  }

  /**
   * The start position of the exon on this annotation's reference sequence, 0-based inclusive. Note
   * that this is relative to the reference start, and **not** the containing annotation start.
   * @return value or {@code null} for none
   */
  public java.lang.Long getStart() {
    return start;
  }

  /**
   * The start position of the exon on this annotation's reference sequence, 0-based inclusive. Note
   * that this is relative to the reference start, and **not** the containing annotation start.
   * @param start start or {@code null} for none
   */
  public Exon setStart(java.lang.Long start) {
    this.start = start;
    return this;
  }

  @Override
  public Exon set(String fieldName, Object value) {
    return (Exon) super.set(fieldName, value);
  }

  @Override
  public Exon clone() {
    return (Exon) super.clone();
  }

}
