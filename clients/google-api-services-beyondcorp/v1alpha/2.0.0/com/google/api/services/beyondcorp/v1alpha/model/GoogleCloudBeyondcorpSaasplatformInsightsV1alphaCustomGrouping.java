/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.beyondcorp.v1alpha.model;

/**
 * Customised grouping option that allows setting the group_by fields and also the filters togather
 * for a configured insight request.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the BeyondCorp API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Filterable parameters to be added to the grouping clause. Available fields could be
   * fetched by calling insight list and get APIs in `BASIC` view. `=` is the only comparison
   * operator supported. `AND` is the only logical operator supported. Usage:
   * field_filter="fieldName1=fieldVal1 AND fieldName2=fieldVal2". NOTE: Only `AND` conditions are
   * allowed. NOTE: Use the `filter_alias` from `Insight.Metadata.Field` message for the filtering
   * the corresponding fields in this filter field. (These expressions are based on the filter
   * language described at https://google.aip.dev/160).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fieldFilter;

  /**
   * Required. Fields to be used for grouping. NOTE: Use the `filter_alias` from
   * `Insight.Metadata.Field` message for declaring the fields to be grouped-by here.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> groupFields;

  /**
   * Optional. Filterable parameters to be added to the grouping clause. Available fields could be
   * fetched by calling insight list and get APIs in `BASIC` view. `=` is the only comparison
   * operator supported. `AND` is the only logical operator supported. Usage:
   * field_filter="fieldName1=fieldVal1 AND fieldName2=fieldVal2". NOTE: Only `AND` conditions are
   * allowed. NOTE: Use the `filter_alias` from `Insight.Metadata.Field` message for the filtering
   * the corresponding fields in this filter field. (These expressions are based on the filter
   * language described at https://google.aip.dev/160).
   * @return value or {@code null} for none
   */
  public java.lang.String getFieldFilter() {
    return fieldFilter;
  }

  /**
   * Optional. Filterable parameters to be added to the grouping clause. Available fields could be
   * fetched by calling insight list and get APIs in `BASIC` view. `=` is the only comparison
   * operator supported. `AND` is the only logical operator supported. Usage:
   * field_filter="fieldName1=fieldVal1 AND fieldName2=fieldVal2". NOTE: Only `AND` conditions are
   * allowed. NOTE: Use the `filter_alias` from `Insight.Metadata.Field` message for the filtering
   * the corresponding fields in this filter field. (These expressions are based on the filter
   * language described at https://google.aip.dev/160).
   * @param fieldFilter fieldFilter or {@code null} for none
   */
  public GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping setFieldFilter(java.lang.String fieldFilter) {
    this.fieldFilter = fieldFilter;
    return this;
  }

  /**
   * Required. Fields to be used for grouping. NOTE: Use the `filter_alias` from
   * `Insight.Metadata.Field` message for declaring the fields to be grouped-by here.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getGroupFields() {
    return groupFields;
  }

  /**
   * Required. Fields to be used for grouping. NOTE: Use the `filter_alias` from
   * `Insight.Metadata.Field` message for declaring the fields to be grouped-by here.
   * @param groupFields groupFields or {@code null} for none
   */
  public GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping setGroupFields(java.util.List<java.lang.String> groupFields) {
    this.groupFields = groupFields;
    return this;
  }

  @Override
  public GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping set(String fieldName, Object value) {
    return (GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping clone() {
    return (GoogleCloudBeyondcorpSaasplatformInsightsV1alphaCustomGrouping) super.clone();
  }

}
