/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.looker.v1.model;

/**
 * ExportMetadata represents the metadata of the exported artifacts. The metadata.json file in
 * export artifact can be parsed as this message
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Looker (Google Cloud core) API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ExportMetadata extends com.google.api.client.json.GenericJson {

  /**
   * Encryption key that was used to encrypt the export artifacts.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ExportMetadataEncryptionKey exportEncryptionKey;

  /**
   * List of files created as part of export artifact (excluding the metadata). The paths are
   * relative to the folder containing the metadata.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> filePaths;

  /**
   * Looker encryption key, encrypted with the provided export encryption key. This value will only
   * be populated if the looker instance uses Looker managed encryption instead of CMEK.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lookerEncryptionKey;

  /**
   * Name of the exported instance. Format:
   * projects/{project}/locations/{location}/instances/{instance}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lookerInstance;

  /**
   * Platform edition of the exported instance.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lookerPlatformEdition;

  /**
   * Version of instance when the export was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lookerVersion;

  /**
   * The source type of the migration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String source;

  /**
   * Encryption key that was used to encrypt the export artifacts.
   * @return value or {@code null} for none
   */
  public ExportMetadataEncryptionKey getExportEncryptionKey() {
    return exportEncryptionKey;
  }

  /**
   * Encryption key that was used to encrypt the export artifacts.
   * @param exportEncryptionKey exportEncryptionKey or {@code null} for none
   */
  public ExportMetadata setExportEncryptionKey(ExportMetadataEncryptionKey exportEncryptionKey) {
    this.exportEncryptionKey = exportEncryptionKey;
    return this;
  }

  /**
   * List of files created as part of export artifact (excluding the metadata). The paths are
   * relative to the folder containing the metadata.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getFilePaths() {
    return filePaths;
  }

  /**
   * List of files created as part of export artifact (excluding the metadata). The paths are
   * relative to the folder containing the metadata.
   * @param filePaths filePaths or {@code null} for none
   */
  public ExportMetadata setFilePaths(java.util.List<java.lang.String> filePaths) {
    this.filePaths = filePaths;
    return this;
  }

  /**
   * Looker encryption key, encrypted with the provided export encryption key. This value will only
   * be populated if the looker instance uses Looker managed encryption instead of CMEK.
   * @return value or {@code null} for none
   */
  public java.lang.String getLookerEncryptionKey() {
    return lookerEncryptionKey;
  }

  /**
   * Looker encryption key, encrypted with the provided export encryption key. This value will only
   * be populated if the looker instance uses Looker managed encryption instead of CMEK.
   * @param lookerEncryptionKey lookerEncryptionKey or {@code null} for none
   */
  public ExportMetadata setLookerEncryptionKey(java.lang.String lookerEncryptionKey) {
    this.lookerEncryptionKey = lookerEncryptionKey;
    return this;
  }

  /**
   * Name of the exported instance. Format:
   * projects/{project}/locations/{location}/instances/{instance}
   * @return value or {@code null} for none
   */
  public java.lang.String getLookerInstance() {
    return lookerInstance;
  }

  /**
   * Name of the exported instance. Format:
   * projects/{project}/locations/{location}/instances/{instance}
   * @param lookerInstance lookerInstance or {@code null} for none
   */
  public ExportMetadata setLookerInstance(java.lang.String lookerInstance) {
    this.lookerInstance = lookerInstance;
    return this;
  }

  /**
   * Platform edition of the exported instance.
   * @return value or {@code null} for none
   */
  public java.lang.String getLookerPlatformEdition() {
    return lookerPlatformEdition;
  }

  /**
   * Platform edition of the exported instance.
   * @param lookerPlatformEdition lookerPlatformEdition or {@code null} for none
   */
  public ExportMetadata setLookerPlatformEdition(java.lang.String lookerPlatformEdition) {
    this.lookerPlatformEdition = lookerPlatformEdition;
    return this;
  }

  /**
   * Version of instance when the export was created.
   * @return value or {@code null} for none
   */
  public java.lang.String getLookerVersion() {
    return lookerVersion;
  }

  /**
   * Version of instance when the export was created.
   * @param lookerVersion lookerVersion or {@code null} for none
   */
  public ExportMetadata setLookerVersion(java.lang.String lookerVersion) {
    this.lookerVersion = lookerVersion;
    return this;
  }

  /**
   * The source type of the migration.
   * @return value or {@code null} for none
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * The source type of the migration.
   * @param source source or {@code null} for none
   */
  public ExportMetadata setSource(java.lang.String source) {
    this.source = source;
    return this;
  }

  @Override
  public ExportMetadata set(String fieldName, Object value) {
    return (ExportMetadata) super.set(fieldName, value);
  }

  @Override
  public ExportMetadata clone() {
    return (ExportMetadata) super.clone();
  }

}
