/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.connectors.v2;

/**
 * Service definition for Connectors (v2).
 *
 * <p>
 * Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/apigee/docs/api-platform/connectors/about-connectors" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ConnectorsRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Connectors extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Connectors API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://connectors.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://connectors.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Connectors(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Connectors(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Connectors connectors = new Connectors(...);}
   *   {@code Connectors.Projects.List request = connectors.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * An accessor for creating requests from the Locations collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Connectors connectors = new Connectors(...);}
     *   {@code Connectors.Locations.List request = connectors.locations().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Locations locations() {
      return new Locations();
    }

    /**
     * The "locations" collection of methods.
     */
    public class Locations {

      /**
       * An accessor for creating requests from the Connections collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Connectors connectors = new Connectors(...);}
       *   {@code Connectors.Connections.List request = connectors.connections().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Connections connections() {
        return new Connections();
      }

      /**
       * The "connections" collection of methods.
       */
      public class Connections {

        /**
         * Executes a SQL statement specified in the body of the request. An example of this SQL statement
         * in the case of Salesforce connector would be 'select * from Account a, Order o where a.Id =
         * o.AccountId'.
         *
         * Create a request for the method "connections.executeSqlQuery".
         *
         * This request holds the parameters needed by the connectors server.  After setting any optional
         * parameters, call the {@link ExecuteSqlQuery#execute()} method to invoke the remote operation.
         *
         * @param connection Required. Resource name of the Connection. Format:
         *        projects/{project}/locations/{location}/connections/{connection}
         * @param content the {@link com.google.api.services.connectors.v2.model.ExecuteSqlQueryRequest}
         * @return the request
         */
        public ExecuteSqlQuery executeSqlQuery(java.lang.String connection, com.google.api.services.connectors.v2.model.ExecuteSqlQueryRequest content) throws java.io.IOException {
          ExecuteSqlQuery result = new ExecuteSqlQuery(connection, content);
          initialize(result);
          return result;
        }

        public class ExecuteSqlQuery extends ConnectorsRequest<com.google.api.services.connectors.v2.model.ExecuteSqlQueryResponse> {

          private static final String REST_PATH = "v2/{+connection}:executeSqlQuery";

          private final java.util.regex.Pattern CONNECTION_PATTERN =
              java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+$");

          /**
           * Executes a SQL statement specified in the body of the request. An example of this SQL statement
           * in the case of Salesforce connector would be 'select * from Account a, Order o where a.Id =
           * o.AccountId'.
           *
           * Create a request for the method "connections.executeSqlQuery".
           *
           * This request holds the parameters needed by the the connectors server.  After setting any
           * optional parameters, call the {@link ExecuteSqlQuery#execute()} method to invoke the remote
           * operation. <p> {@link ExecuteSqlQuery#initialize(com.google.api.client.googleapis.services.Abst
           * ractGoogleClientRequest)} must be called to initialize this instance immediately after invoking
           * the constructor. </p>
           *
           * @param connection Required. Resource name of the Connection. Format:
         *        projects/{project}/locations/{location}/connections/{connection}
           * @param content the {@link com.google.api.services.connectors.v2.model.ExecuteSqlQueryRequest}
           * @since 1.13
           */
          protected ExecuteSqlQuery(java.lang.String connection, com.google.api.services.connectors.v2.model.ExecuteSqlQueryRequest content) {
            super(Connectors.this, "POST", REST_PATH, content, com.google.api.services.connectors.v2.model.ExecuteSqlQueryResponse.class);
            this.connection = com.google.api.client.util.Preconditions.checkNotNull(connection, "Required parameter connection must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(CONNECTION_PATTERN.matcher(connection).matches(),
                  "Parameter connection must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
            }
          }

          @Override
          public ExecuteSqlQuery set$Xgafv(java.lang.String $Xgafv) {
            return (ExecuteSqlQuery) super.set$Xgafv($Xgafv);
          }

          @Override
          public ExecuteSqlQuery setAccessToken(java.lang.String accessToken) {
            return (ExecuteSqlQuery) super.setAccessToken(accessToken);
          }

          @Override
          public ExecuteSqlQuery setAlt(java.lang.String alt) {
            return (ExecuteSqlQuery) super.setAlt(alt);
          }

          @Override
          public ExecuteSqlQuery setCallback(java.lang.String callback) {
            return (ExecuteSqlQuery) super.setCallback(callback);
          }

          @Override
          public ExecuteSqlQuery setFields(java.lang.String fields) {
            return (ExecuteSqlQuery) super.setFields(fields);
          }

          @Override
          public ExecuteSqlQuery setKey(java.lang.String key) {
            return (ExecuteSqlQuery) super.setKey(key);
          }

          @Override
          public ExecuteSqlQuery setOauthToken(java.lang.String oauthToken) {
            return (ExecuteSqlQuery) super.setOauthToken(oauthToken);
          }

          @Override
          public ExecuteSqlQuery setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (ExecuteSqlQuery) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public ExecuteSqlQuery setQuotaUser(java.lang.String quotaUser) {
            return (ExecuteSqlQuery) super.setQuotaUser(quotaUser);
          }

          @Override
          public ExecuteSqlQuery setUploadType(java.lang.String uploadType) {
            return (ExecuteSqlQuery) super.setUploadType(uploadType);
          }

          @Override
          public ExecuteSqlQuery setUploadProtocol(java.lang.String uploadProtocol) {
            return (ExecuteSqlQuery) super.setUploadProtocol(uploadProtocol);
          }

          /**
           * Required. Resource name of the Connection. Format:
           * projects/{project}/locations/{location}/connections/{connection}
           */
          @com.google.api.client.util.Key
          private java.lang.String connection;

          /** Required. Resource name of the Connection. Format:
         projects/{project}/locations/{location}/connections/{connection}
           */
          public java.lang.String getConnection() {
            return connection;
          }

          /**
           * Required. Resource name of the Connection. Format:
           * projects/{project}/locations/{location}/connections/{connection}
           */
          public ExecuteSqlQuery setConnection(java.lang.String connection) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(CONNECTION_PATTERN.matcher(connection).matches(),
                  "Parameter connection must conform to the pattern " +
                  "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
            }
            this.connection = connection;
            return this;
          }

          @Override
          public ExecuteSqlQuery set(String parameterName, Object value) {
            return (ExecuteSqlQuery) super.set(parameterName, value);
          }
        }

        /**
         * An accessor for creating requests from the Actions collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Connectors connectors = new Connectors(...);}
         *   {@code Connectors.Actions.List request = connectors.actions().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Actions actions() {
          return new Actions();
        }

        /**
         * The "actions" collection of methods.
         */
        public class Actions {

          /**
           * Executes an action with the name specified in the request. The input parameters for executing the
           * action are passed through the body of the ExecuteAction request.
           *
           * Create a request for the method "actions.execute".
           *
           * This request holds the parameters needed by the connectors server.  After setting any optional
           * parameters, call the {@link Execute#execute()} method to invoke the remote operation.
           *
           * @param name Required. Resource name of the Action. Format:
           *        projects/{project}/locations/{location}/connections/{connection}/actions/{action}
           * @param content the {@link com.google.api.services.connectors.v2.model.ExecuteActionRequest}
           * @return the request
           */
          public Execute execute(java.lang.String name, com.google.api.services.connectors.v2.model.ExecuteActionRequest content) throws java.io.IOException {
            Execute result = new Execute(name, content);
            initialize(result);
            return result;
          }

          public class Execute extends ConnectorsRequest<com.google.api.services.connectors.v2.model.ExecuteActionResponse> {

            private static final String REST_PATH = "v2/{+name}:execute";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/actions/[^/]+$");

            /**
             * Executes an action with the name specified in the request. The input parameters for executing
             * the action are passed through the body of the ExecuteAction request.
             *
             * Create a request for the method "actions.execute".
             *
             * This request holds the parameters needed by the the connectors server.  After setting any
             * optional parameters, call the {@link Execute#execute()} method to invoke the remote operation.
             * <p> {@link
             * Execute#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. Resource name of the Action. Format:
           *        projects/{project}/locations/{location}/connections/{connection}/actions/{action}
             * @param content the {@link com.google.api.services.connectors.v2.model.ExecuteActionRequest}
             * @since 1.13
             */
            protected Execute(java.lang.String name, com.google.api.services.connectors.v2.model.ExecuteActionRequest content) {
              super(Connectors.this, "POST", REST_PATH, content, com.google.api.services.connectors.v2.model.ExecuteActionResponse.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/actions/[^/]+$");
              }
            }

            @Override
            public Execute set$Xgafv(java.lang.String $Xgafv) {
              return (Execute) super.set$Xgafv($Xgafv);
            }

            @Override
            public Execute setAccessToken(java.lang.String accessToken) {
              return (Execute) super.setAccessToken(accessToken);
            }

            @Override
            public Execute setAlt(java.lang.String alt) {
              return (Execute) super.setAlt(alt);
            }

            @Override
            public Execute setCallback(java.lang.String callback) {
              return (Execute) super.setCallback(callback);
            }

            @Override
            public Execute setFields(java.lang.String fields) {
              return (Execute) super.setFields(fields);
            }

            @Override
            public Execute setKey(java.lang.String key) {
              return (Execute) super.setKey(key);
            }

            @Override
            public Execute setOauthToken(java.lang.String oauthToken) {
              return (Execute) super.setOauthToken(oauthToken);
            }

            @Override
            public Execute setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Execute) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Execute setQuotaUser(java.lang.String quotaUser) {
              return (Execute) super.setQuotaUser(quotaUser);
            }

            @Override
            public Execute setUploadType(java.lang.String uploadType) {
              return (Execute) super.setUploadType(uploadType);
            }

            @Override
            public Execute setUploadProtocol(java.lang.String uploadProtocol) {
              return (Execute) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Resource name of the Action. Format:
             * projects/{project}/locations/{location}/connections/{connection}/actions/{action}
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. Resource name of the Action. Format:
           projects/{project}/locations/{location}/connections/{connection}/actions/{action}
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. Resource name of the Action. Format:
             * projects/{project}/locations/{location}/connections/{connection}/actions/{action}
             */
            public Execute setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+/actions/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Execute set(String parameterName, Object value) {
              return (Execute) super.set(parameterName, value);
            }
          }
          /**
           * Gets the schema of all the actions supported by the connector.
           *
           * Create a request for the method "actions.list".
           *
           * This request holds the parameters needed by the connectors server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. Parent resource name of the Action. Format:
           *        projects/{project}/locations/{location}/connections/{connection}
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends ConnectorsRequest<com.google.api.services.connectors.v2.model.ListActionsResponse> {

            private static final String REST_PATH = "v2/{+parent}/actions";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+$");

            /**
             * Gets the schema of all the actions supported by the connector.
             *
             * Create a request for the method "actions.list".
             *
             * This request holds the parameters needed by the the connectors server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. Parent resource name of the Action. Format:
           *        projects/{project}/locations/{location}/connections/{connection}
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(Connectors.this, "GET", REST_PATH, null, com.google.api.services.connectors.v2.model.ListActionsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Parent resource name of the Action. Format:
             * projects/{project}/locations/{location}/connections/{connection}
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. Parent resource name of the Action. Format:
           projects/{project}/locations/{location}/connections/{connection}
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. Parent resource name of the Action. Format:
             * projects/{project}/locations/{location}/connections/{connection}
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Number of Actions to return. Defaults to 25. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Number of Actions to return. Defaults to 25.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** Number of Actions to return. Defaults to 25. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * Page token, return from a previous ListActions call, that can be used retrieve the
             * next page of content. If unspecified, the request returns the first page of actions.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Page token, return from a previous ListActions call, that can be used retrieve the next page of
           content. If unspecified, the request returns the first page of actions.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * Page token, return from a previous ListActions call, that can be used retrieve the
             * next page of content. If unspecified, the request returns the first page of actions.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the EntityTypes collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Connectors connectors = new Connectors(...);}
         *   {@code Connectors.EntityTypes.List request = connectors.entityTypes().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public EntityTypes entityTypes() {
          return new EntityTypes();
        }

        /**
         * The "entityTypes" collection of methods.
         */
        public class EntityTypes {

          /**
           * Lists metadata related to all entity types present in the external system.
           *
           * Create a request for the method "entityTypes.list".
           *
           * This request holds the parameters needed by the connectors server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. Resource name of the Entity Type. Format:
           *        projects/{project}/locations/{location}/connections/{connection}
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends ConnectorsRequest<com.google.api.services.connectors.v2.model.ListEntityTypesResponse> {

            private static final String REST_PATH = "v2/{+parent}/entityTypes";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+$");

            /**
             * Lists metadata related to all entity types present in the external system.
             *
             * Create a request for the method "entityTypes.list".
             *
             * This request holds the parameters needed by the the connectors server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. Resource name of the Entity Type. Format:
           *        projects/{project}/locations/{location}/connections/{connection}
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(Connectors.this, "GET", REST_PATH, null, com.google.api.services.connectors.v2.model.ListEntityTypesResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. Resource name of the Entity Type. Format:
             * projects/{project}/locations/{location}/connections/{connection}
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. Resource name of the Entity Type. Format:
           projects/{project}/locations/{location}/connections/{connection}
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. Resource name of the Entity Type. Format:
             * projects/{project}/locations/{location}/connections/{connection}
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/connections/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /** Number of entity types to return. Defaults to 25. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** Number of entity types to return. Defaults to 25.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** Number of entity types to return. Defaults to 25. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * Page token, return from a previous ListEntityTypes call, that can be used retrieve
             * the next page of content. If unspecified, the request returns the first page of
             * entity types.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** Page token, return from a previous ListEntityTypes call, that can be used retrieve the next page of
           content. If unspecified, the request returns the first page of entity types.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * Page token, return from a previous ListEntityTypes call, that can be used retrieve
             * the next page of content. If unspecified, the request returns the first page of
             * entity types.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

          /**
           * An accessor for creating requests from the Entities collection.
           *
           * <p>The typical use is:</p>
           * <pre>
           *   {@code Connectors connectors = new Connectors(...);}
           *   {@code Connectors.Entities.List request = connectors.entities().list(parameters ...)}
           * </pre>
           *
           * @return the resource collection
           */
          public Entities entities() {
            return new Entities();
          }

          /**
           * The "entities" collection of methods.
           */
          public class Entities {

            /**
             * Creates a new entity row of the specified entity type in the external system. The field values
             * for creating the row are contained in the body of the request. The response message contains a
             * `Entity` message object returned as a response by the external system.
             *
             * Create a request for the method "entities.create".
             *
             * This request holds the parameters needed by the connectors server.  After setting any optional
             * parameters, call the {@link Create#execute()} method to invoke the remote operation.
             *
             * @param parent Required. Resource name of the Entity Type. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
             * @param content the {@link com.google.api.services.connectors.v2.model.Entity}
             * @return the request
             */
            public Create create(java.lang.String parent, com.google.api.services.connectors.v2.model.Entity content) throws java.io.IOException {
              Create result = new Create(parent, content);
              initialize(result);
              return result;
            }

            public class Create extends ConnectorsRequest<com.google.api.services.connectors.v2.model.Entity> {

              private static final String REST_PATH = "v2/{+parent}/entities";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$");

              /**
               * Creates a new entity row of the specified entity type in the external system. The field values
               * for creating the row are contained in the body of the request. The response message contains a
               * `Entity` message object returned as a response by the external system.
               *
               * Create a request for the method "entities.create".
               *
               * This request holds the parameters needed by the the connectors server.  After setting any
               * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
               * <p> {@link
               * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. Resource name of the Entity Type. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               * @param content the {@link com.google.api.services.connectors.v2.model.Entity}
               * @since 1.13
               */
              protected Create(java.lang.String parent, com.google.api.services.connectors.v2.model.Entity content) {
                super(Connectors.this, "POST", REST_PATH, content, com.google.api.services.connectors.v2.model.Entity.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$");
                }
              }

              @Override
              public Create set$Xgafv(java.lang.String $Xgafv) {
                return (Create) super.set$Xgafv($Xgafv);
              }

              @Override
              public Create setAccessToken(java.lang.String accessToken) {
                return (Create) super.setAccessToken(accessToken);
              }

              @Override
              public Create setAlt(java.lang.String alt) {
                return (Create) super.setAlt(alt);
              }

              @Override
              public Create setCallback(java.lang.String callback) {
                return (Create) super.setCallback(callback);
              }

              @Override
              public Create setFields(java.lang.String fields) {
                return (Create) super.setFields(fields);
              }

              @Override
              public Create setKey(java.lang.String key) {
                return (Create) super.setKey(key);
              }

              @Override
              public Create setOauthToken(java.lang.String oauthToken) {
                return (Create) super.setOauthToken(oauthToken);
              }

              @Override
              public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Create) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Create setQuotaUser(java.lang.String quotaUser) {
                return (Create) super.setQuotaUser(quotaUser);
              }

              @Override
              public Create setUploadType(java.lang.String uploadType) {
                return (Create) super.setUploadType(uploadType);
              }

              @Override
              public Create setUploadProtocol(java.lang.String uploadProtocol) {
                return (Create) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. Resource name of the Entity Type. Format:
               * projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. Resource name of the Entity Type. Format:
             projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               */
              public java.lang.String getParent() {
                return parent;
              }

              /**
               * Required. Resource name of the Entity Type. Format:
               * projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               */
              public Create setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              @Override
              public Create set(String parameterName, Object value) {
                return (Create) super.set(parameterName, value);
              }
            }
            /**
             * Deletes an existing entity row matching the entity type and entity id specified in the request.
             *
             * Create a request for the method "entities.delete".
             *
             * This request holds the parameters needed by the connectors server.  After setting any optional
             * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             *
             * @param name Required. Resource name of the Entity Type. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entiti
             *        es/{id}
             * @return the request
             */
            public Delete delete(java.lang.String name) throws java.io.IOException {
              Delete result = new Delete(name);
              initialize(result);
              return result;
            }

            public class Delete extends ConnectorsRequest<com.google.api.services.connectors.v2.model.Empty> {

              private static final String REST_PATH = "v2/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$");

              /**
               * Deletes an existing entity row matching the entity type and entity id specified in the request.
               *
               * Create a request for the method "entities.delete".
               *
               * This request holds the parameters needed by the the connectors server.  After setting any
               * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
               * <p> {@link
               * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Required. Resource name of the Entity Type. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entiti
             *        es/{id}
               * @since 1.13
               */
              protected Delete(java.lang.String name) {
                super(Connectors.this, "DELETE", REST_PATH, null, com.google.api.services.connectors.v2.model.Empty.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$");
                }
              }

              @Override
              public Delete set$Xgafv(java.lang.String $Xgafv) {
                return (Delete) super.set$Xgafv($Xgafv);
              }

              @Override
              public Delete setAccessToken(java.lang.String accessToken) {
                return (Delete) super.setAccessToken(accessToken);
              }

              @Override
              public Delete setAlt(java.lang.String alt) {
                return (Delete) super.setAlt(alt);
              }

              @Override
              public Delete setCallback(java.lang.String callback) {
                return (Delete) super.setCallback(callback);
              }

              @Override
              public Delete setFields(java.lang.String fields) {
                return (Delete) super.setFields(fields);
              }

              @Override
              public Delete setKey(java.lang.String key) {
                return (Delete) super.setKey(key);
              }

              @Override
              public Delete setOauthToken(java.lang.String oauthToken) {
                return (Delete) super.setOauthToken(oauthToken);
              }

              @Override
              public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Delete) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Delete setQuotaUser(java.lang.String quotaUser) {
                return (Delete) super.setQuotaUser(quotaUser);
              }

              @Override
              public Delete setUploadType(java.lang.String uploadType) {
                return (Delete) super.setUploadType(uploadType);
              }

              @Override
              public Delete setUploadProtocol(java.lang.String uploadProtocol) {
                return (Delete) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. Resource name of the Entity Type. Format: projects/{project}/locations/{l
               * ocation}/connections/{connection}/entityTypes/{type}/entities/{id}
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Required. Resource name of the Entity Type. Format:
             projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Required. Resource name of the Entity Type. Format: projects/{project}/locations/{l
               * ocation}/connections/{connection}/entityTypes/{type}/entities/{id}
               */
              public Delete setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Delete set(String parameterName, Object value) {
                return (Delete) super.set(parameterName, value);
              }
            }
            /**
             * Deletes entities based on conditions specified in the request and not on entity id.
             *
             * Create a request for the method "entities.deleteEntitiesWithConditions".
             *
             * This request holds the parameters needed by the connectors server.  After setting any optional
             * parameters, call the {@link DeleteEntitiesWithConditions#execute()} method to invoke the remote
             * operation.
             *
             * @param entityType Required. Resource name of the Entity Type. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
             * @return the request
             */
            public DeleteEntitiesWithConditions deleteEntitiesWithConditions(java.lang.String entityType) throws java.io.IOException {
              DeleteEntitiesWithConditions result = new DeleteEntitiesWithConditions(entityType);
              initialize(result);
              return result;
            }

            public class DeleteEntitiesWithConditions extends ConnectorsRequest<com.google.api.services.connectors.v2.model.Empty> {

              private static final String REST_PATH = "v2/{+entityType}/entities:deleteEntitiesWithConditions";

              private final java.util.regex.Pattern ENTITY_TYPE_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$");

              /**
               * Deletes entities based on conditions specified in the request and not on entity id.
               *
               * Create a request for the method "entities.deleteEntitiesWithConditions".
               *
               * This request holds the parameters needed by the the connectors server.  After setting any
               * optional parameters, call the {@link DeleteEntitiesWithConditions#execute()} method to invoke
               * the remote operation. <p> {@link DeleteEntitiesWithConditions#initialize(com.google.api.client.
               * googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
               * immediately after invoking the constructor. </p>
               *
               * @param entityType Required. Resource name of the Entity Type. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               * @since 1.13
               */
              protected DeleteEntitiesWithConditions(java.lang.String entityType) {
                super(Connectors.this, "POST", REST_PATH, null, com.google.api.services.connectors.v2.model.Empty.class);
                this.entityType = com.google.api.client.util.Preconditions.checkNotNull(entityType, "Required parameter entityType must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(ENTITY_TYPE_PATTERN.matcher(entityType).matches(),
                      "Parameter entityType must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$");
                }
              }

              @Override
              public DeleteEntitiesWithConditions set$Xgafv(java.lang.String $Xgafv) {
                return (DeleteEntitiesWithConditions) super.set$Xgafv($Xgafv);
              }

              @Override
              public DeleteEntitiesWithConditions setAccessToken(java.lang.String accessToken) {
                return (DeleteEntitiesWithConditions) super.setAccessToken(accessToken);
              }

              @Override
              public DeleteEntitiesWithConditions setAlt(java.lang.String alt) {
                return (DeleteEntitiesWithConditions) super.setAlt(alt);
              }

              @Override
              public DeleteEntitiesWithConditions setCallback(java.lang.String callback) {
                return (DeleteEntitiesWithConditions) super.setCallback(callback);
              }

              @Override
              public DeleteEntitiesWithConditions setFields(java.lang.String fields) {
                return (DeleteEntitiesWithConditions) super.setFields(fields);
              }

              @Override
              public DeleteEntitiesWithConditions setKey(java.lang.String key) {
                return (DeleteEntitiesWithConditions) super.setKey(key);
              }

              @Override
              public DeleteEntitiesWithConditions setOauthToken(java.lang.String oauthToken) {
                return (DeleteEntitiesWithConditions) super.setOauthToken(oauthToken);
              }

              @Override
              public DeleteEntitiesWithConditions setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (DeleteEntitiesWithConditions) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public DeleteEntitiesWithConditions setQuotaUser(java.lang.String quotaUser) {
                return (DeleteEntitiesWithConditions) super.setQuotaUser(quotaUser);
              }

              @Override
              public DeleteEntitiesWithConditions setUploadType(java.lang.String uploadType) {
                return (DeleteEntitiesWithConditions) super.setUploadType(uploadType);
              }

              @Override
              public DeleteEntitiesWithConditions setUploadProtocol(java.lang.String uploadProtocol) {
                return (DeleteEntitiesWithConditions) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. Resource name of the Entity Type. Format:
               * projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               */
              @com.google.api.client.util.Key
              private java.lang.String entityType;

              /** Required. Resource name of the Entity Type. Format:
             projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               */
              public java.lang.String getEntityType() {
                return entityType;
              }

              /**
               * Required. Resource name of the Entity Type. Format:
               * projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               */
              public DeleteEntitiesWithConditions setEntityType(java.lang.String entityType) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(ENTITY_TYPE_PATTERN.matcher(entityType).matches(),
                      "Parameter entityType must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$");
                }
                this.entityType = entityType;
                return this;
              }

              /**
               * Required. Conditions to be used when deleting entities. From a proto standpoint,
               * There are no restrictions on what can be passed using this field. The connector
               * documentation should have information about what format of filters/conditions are
               * supported. Note: If this conditions field is left empty, an exception is thrown. We
               * don't want to consider 'empty conditions' to be a match-all case. Connector
               * developers can determine and document what a match-all case constraint would be.
               */
              @com.google.api.client.util.Key
              private java.lang.String conditions;

              /** Required. Conditions to be used when deleting entities. From a proto standpoint, There are no
             restrictions on what can be passed using this field. The connector documentation should have
             information about what format of filters/conditions are supported. Note: If this conditions field
             is left empty, an exception is thrown. We don't want to consider 'empty conditions' to be a match-
             all case. Connector developers can determine and document what a match-all case constraint would
             be.
               */
              public java.lang.String getConditions() {
                return conditions;
              }

              /**
               * Required. Conditions to be used when deleting entities. From a proto standpoint,
               * There are no restrictions on what can be passed using this field. The connector
               * documentation should have information about what format of filters/conditions are
               * supported. Note: If this conditions field is left empty, an exception is thrown. We
               * don't want to consider 'empty conditions' to be a match-all case. Connector
               * developers can determine and document what a match-all case constraint would be.
               */
              public DeleteEntitiesWithConditions setConditions(java.lang.String conditions) {
                this.conditions = conditions;
                return this;
              }

              @Override
              public DeleteEntitiesWithConditions set(String parameterName, Object value) {
                return (DeleteEntitiesWithConditions) super.set(parameterName, value);
              }
            }
            /**
             * Gets a single entity row matching the entity type and entity id specified in the request.
             *
             * Create a request for the method "entities.get".
             *
             * This request holds the parameters needed by the connectors server.  After setting any optional
             * parameters, call the {@link Get#execute()} method to invoke the remote operation.
             *
             * @param name Required. Resource name of the Entity Type. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entiti
             *        es/{id}
             * @return the request
             */
            public Get get(java.lang.String name) throws java.io.IOException {
              Get result = new Get(name);
              initialize(result);
              return result;
            }

            public class Get extends ConnectorsRequest<com.google.api.services.connectors.v2.model.Entity> {

              private static final String REST_PATH = "v2/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$");

              /**
               * Gets a single entity row matching the entity type and entity id specified in the request.
               *
               * Create a request for the method "entities.get".
               *
               * This request holds the parameters needed by the the connectors server.  After setting any
               * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
               * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Required. Resource name of the Entity Type. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entiti
             *        es/{id}
               * @since 1.13
               */
              protected Get(java.lang.String name) {
                super(Connectors.this, "GET", REST_PATH, null, com.google.api.services.connectors.v2.model.Entity.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public Get set$Xgafv(java.lang.String $Xgafv) {
                return (Get) super.set$Xgafv($Xgafv);
              }

              @Override
              public Get setAccessToken(java.lang.String accessToken) {
                return (Get) super.setAccessToken(accessToken);
              }

              @Override
              public Get setAlt(java.lang.String alt) {
                return (Get) super.setAlt(alt);
              }

              @Override
              public Get setCallback(java.lang.String callback) {
                return (Get) super.setCallback(callback);
              }

              @Override
              public Get setFields(java.lang.String fields) {
                return (Get) super.setFields(fields);
              }

              @Override
              public Get setKey(java.lang.String key) {
                return (Get) super.setKey(key);
              }

              @Override
              public Get setOauthToken(java.lang.String oauthToken) {
                return (Get) super.setOauthToken(oauthToken);
              }

              @Override
              public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Get) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Get setQuotaUser(java.lang.String quotaUser) {
                return (Get) super.setQuotaUser(quotaUser);
              }

              @Override
              public Get setUploadType(java.lang.String uploadType) {
                return (Get) super.setUploadType(uploadType);
              }

              @Override
              public Get setUploadProtocol(java.lang.String uploadProtocol) {
                return (Get) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. Resource name of the Entity Type. Format: projects/{project}/locations/{l
               * ocation}/connections/{connection}/entityTypes/{type}/entities/{id}
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Required. Resource name of the Entity Type. Format:
             projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Required. Resource name of the Entity Type. Format: projects/{project}/locations/{l
               * ocation}/connections/{connection}/entityTypes/{type}/entities/{id}
               */
              public Get setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Get set(String parameterName, Object value) {
                return (Get) super.set(parameterName, value);
              }
            }
            /**
             * Lists entity rows of a particular entity type contained in the request. Note: 1. Currently, only
             * max of one 'sort_by' column is supported. 2. If no 'sort_by' column is provided, the primary key
             * of the table is used. If zero or more than one primary key is available, we default to the
             * unpaginated list entities logic which only returns the first page. 3. The values of the 'sort_by'
             * columns must uniquely identify an entity row, otherwise undefined behaviors may be observed
             * during pagination. 4. Since transactions are not supported, any updates, inserts or deletes
             * during pagination can lead to stale data being returned or other unexpected behaviors.
             *
             * Create a request for the method "entities.list".
             *
             * This request holds the parameters needed by the connectors server.  After setting any optional
             * parameters, call the {@link List#execute()} method to invoke the remote operation.
             *
             * @param parent Required. Resource name of the Entity Type. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
             * @return the request
             */
            public List list(java.lang.String parent) throws java.io.IOException {
              List result = new List(parent);
              initialize(result);
              return result;
            }

            public class List extends ConnectorsRequest<com.google.api.services.connectors.v2.model.ListEntitiesResponse> {

              private static final String REST_PATH = "v2/{+parent}/entities";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$");

              /**
               * Lists entity rows of a particular entity type contained in the request. Note: 1. Currently,
               * only max of one 'sort_by' column is supported. 2. If no 'sort_by' column is provided, the
               * primary key of the table is used. If zero or more than one primary key is available, we default
               * to the unpaginated list entities logic which only returns the first page. 3. The values of the
               * 'sort_by' columns must uniquely identify an entity row, otherwise undefined behaviors may be
               * observed during pagination. 4. Since transactions are not supported, any updates, inserts or
               * deletes during pagination can lead to stale data being returned or other unexpected behaviors.
               *
               * Create a request for the method "entities.list".
               *
               * This request holds the parameters needed by the the connectors server.  After setting any
               * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
               * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. Resource name of the Entity Type. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               * @since 1.13
               */
              protected List(java.lang.String parent) {
                super(Connectors.this, "GET", REST_PATH, null, com.google.api.services.connectors.v2.model.ListEntitiesResponse.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public List set$Xgafv(java.lang.String $Xgafv) {
                return (List) super.set$Xgafv($Xgafv);
              }

              @Override
              public List setAccessToken(java.lang.String accessToken) {
                return (List) super.setAccessToken(accessToken);
              }

              @Override
              public List setAlt(java.lang.String alt) {
                return (List) super.setAlt(alt);
              }

              @Override
              public List setCallback(java.lang.String callback) {
                return (List) super.setCallback(callback);
              }

              @Override
              public List setFields(java.lang.String fields) {
                return (List) super.setFields(fields);
              }

              @Override
              public List setKey(java.lang.String key) {
                return (List) super.setKey(key);
              }

              @Override
              public List setOauthToken(java.lang.String oauthToken) {
                return (List) super.setOauthToken(oauthToken);
              }

              @Override
              public List setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (List) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public List setQuotaUser(java.lang.String quotaUser) {
                return (List) super.setQuotaUser(quotaUser);
              }

              @Override
              public List setUploadType(java.lang.String uploadType) {
                return (List) super.setUploadType(uploadType);
              }

              @Override
              public List setUploadProtocol(java.lang.String uploadProtocol) {
                return (List) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. Resource name of the Entity Type. Format:
               * projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. Resource name of the Entity Type. Format:
             projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               */
              public java.lang.String getParent() {
                return parent;
              }

              /**
               * Required. Resource name of the Entity Type. Format:
               * projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               */
              public List setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              /**
               * Conditions to be used when listing entities. From a proto standpoint, There are no
               * restrictions on what can be passed using this field. The connector documentation
               * should have information about what format of filters/conditions are supported.
               */
              @com.google.api.client.util.Key
              private java.lang.String conditions;

              /** Conditions to be used when listing entities. From a proto standpoint, There are no restrictions on
             what can be passed using this field. The connector documentation should have information about what
             format of filters/conditions are supported.
               */
              public java.lang.String getConditions() {
                return conditions;
              }

              /**
               * Conditions to be used when listing entities. From a proto standpoint, There are no
               * restrictions on what can be passed using this field. The connector documentation
               * should have information about what format of filters/conditions are supported.
               */
              public List setConditions(java.lang.String conditions) {
                this.conditions = conditions;
                return this;
              }

              /** Number of entity rows to return. Defaults page size = 25. Max page size = 200. */
              @com.google.api.client.util.Key
              private java.lang.Integer pageSize;

              /** Number of entity rows to return. Defaults page size = 25. Max page size = 200.
               */
              public java.lang.Integer getPageSize() {
                return pageSize;
              }

              /** Number of entity rows to return. Defaults page size = 25. Max page size = 200. */
              public List setPageSize(java.lang.Integer pageSize) {
                this.pageSize = pageSize;
                return this;
              }

              /** Page token value if available from a previous request. */
              @com.google.api.client.util.Key
              private java.lang.String pageToken;

              /** Page token value if available from a previous request.
               */
              public java.lang.String getPageToken() {
                return pageToken;
              }

              /** Page token value if available from a previous request. */
              public List setPageToken(java.lang.String pageToken) {
                this.pageToken = pageToken;
                return this;
              }

              /** List of 'sort_by' columns to use when returning the results. */
              @com.google.api.client.util.Key
              private java.util.List<java.lang.String> sortBy;

              /** List of 'sort_by' columns to use when returning the results.
               */
              public java.util.List<java.lang.String> getSortBy() {
                return sortBy;
              }

              /** List of 'sort_by' columns to use when returning the results. */
              public List setSortBy(java.util.List<java.lang.String> sortBy) {
                this.sortBy = sortBy;
                return this;
              }

              @Override
              public List set(String parameterName, Object value) {
                return (List) super.set(parameterName, value);
              }
            }
            /**
             * Updates an existing entity row matching the entity type and entity id specified in the request.
             * The fields in the entity row that need to be modified are contained in the body of the request.
             * All unspecified fields are left unchanged. The response message contains a `Entity` message
             * object returned as a response by the external system.
             *
             * Create a request for the method "entities.patch".
             *
             * This request holds the parameters needed by the connectors server.  After setting any optional
             * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             *
             * @param name Output only. Resource name of the Entity. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entiti
             *        es/{id}
             * @param content the {@link com.google.api.services.connectors.v2.model.Entity}
             * @return the request
             */
            public Patch patch(java.lang.String name, com.google.api.services.connectors.v2.model.Entity content) throws java.io.IOException {
              Patch result = new Patch(name, content);
              initialize(result);
              return result;
            }

            public class Patch extends ConnectorsRequest<com.google.api.services.connectors.v2.model.Entity> {

              private static final String REST_PATH = "v2/{+name}";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$");

              /**
               * Updates an existing entity row matching the entity type and entity id specified in the request.
               * The fields in the entity row that need to be modified are contained in the body of the request.
               * All unspecified fields are left unchanged. The response message contains a `Entity` message
               * object returned as a response by the external system.
               *
               * Create a request for the method "entities.patch".
               *
               * This request holds the parameters needed by the the connectors server.  After setting any
               * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
               * <p> {@link
               * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
               * be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Output only. Resource name of the Entity. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entiti
             *        es/{id}
               * @param content the {@link com.google.api.services.connectors.v2.model.Entity}
               * @since 1.13
               */
              protected Patch(java.lang.String name, com.google.api.services.connectors.v2.model.Entity content) {
                super(Connectors.this, "PATCH", REST_PATH, content, com.google.api.services.connectors.v2.model.Entity.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$");
                }
              }

              @Override
              public Patch set$Xgafv(java.lang.String $Xgafv) {
                return (Patch) super.set$Xgafv($Xgafv);
              }

              @Override
              public Patch setAccessToken(java.lang.String accessToken) {
                return (Patch) super.setAccessToken(accessToken);
              }

              @Override
              public Patch setAlt(java.lang.String alt) {
                return (Patch) super.setAlt(alt);
              }

              @Override
              public Patch setCallback(java.lang.String callback) {
                return (Patch) super.setCallback(callback);
              }

              @Override
              public Patch setFields(java.lang.String fields) {
                return (Patch) super.setFields(fields);
              }

              @Override
              public Patch setKey(java.lang.String key) {
                return (Patch) super.setKey(key);
              }

              @Override
              public Patch setOauthToken(java.lang.String oauthToken) {
                return (Patch) super.setOauthToken(oauthToken);
              }

              @Override
              public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (Patch) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public Patch setQuotaUser(java.lang.String quotaUser) {
                return (Patch) super.setQuotaUser(quotaUser);
              }

              @Override
              public Patch setUploadType(java.lang.String uploadType) {
                return (Patch) super.setUploadType(uploadType);
              }

              @Override
              public Patch setUploadProtocol(java.lang.String uploadProtocol) {
                return (Patch) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Output only. Resource name of the Entity. Format: projects/{project}/locations/{loc
               * ation}/connections/{connection}/entityTypes/{type}/entities/{id}
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Output only. Resource name of the Entity. Format:
             projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}/entities/{id}
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Output only. Resource name of the Entity. Format: projects/{project}/locations/{loc
               * ation}/connections/{connection}/entityTypes/{type}/entities/{id}
               */
              public Patch setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+/entities/[^/]+$");
                }
                this.name = name;
                return this;
              }

              @Override
              public Patch set(String parameterName, Object value) {
                return (Patch) super.set(parameterName, value);
              }
            }
            /**
             * Updates entities based on conditions specified in the request and not on entity id.
             *
             * Create a request for the method "entities.updateEntitiesWithConditions".
             *
             * This request holds the parameters needed by the connectors server.  After setting any optional
             * parameters, call the {@link UpdateEntitiesWithConditions#execute()} method to invoke the remote
             * operation.
             *
             * @param entityType Required. Resource name of the Entity Type. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
             * @param content the {@link com.google.api.services.connectors.v2.model.Entity}
             * @return the request
             */
            public UpdateEntitiesWithConditions updateEntitiesWithConditions(java.lang.String entityType, com.google.api.services.connectors.v2.model.Entity content) throws java.io.IOException {
              UpdateEntitiesWithConditions result = new UpdateEntitiesWithConditions(entityType, content);
              initialize(result);
              return result;
            }

            public class UpdateEntitiesWithConditions extends ConnectorsRequest<com.google.api.services.connectors.v2.model.UpdateEntitiesWithConditionsResponse> {

              private static final String REST_PATH = "v2/{+entityType}/entities:updateEntitiesWithConditions";

              private final java.util.regex.Pattern ENTITY_TYPE_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$");

              /**
               * Updates entities based on conditions specified in the request and not on entity id.
               *
               * Create a request for the method "entities.updateEntitiesWithConditions".
               *
               * This request holds the parameters needed by the the connectors server.  After setting any
               * optional parameters, call the {@link UpdateEntitiesWithConditions#execute()} method to invoke
               * the remote operation. <p> {@link UpdateEntitiesWithConditions#initialize(com.google.api.client.
               * googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
               * immediately after invoking the constructor. </p>
               *
               * @param entityType Required. Resource name of the Entity Type. Format:
             *        projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               * @param content the {@link com.google.api.services.connectors.v2.model.Entity}
               * @since 1.13
               */
              protected UpdateEntitiesWithConditions(java.lang.String entityType, com.google.api.services.connectors.v2.model.Entity content) {
                super(Connectors.this, "POST", REST_PATH, content, com.google.api.services.connectors.v2.model.UpdateEntitiesWithConditionsResponse.class);
                this.entityType = com.google.api.client.util.Preconditions.checkNotNull(entityType, "Required parameter entityType must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(ENTITY_TYPE_PATTERN.matcher(entityType).matches(),
                      "Parameter entityType must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$");
                }
              }

              @Override
              public UpdateEntitiesWithConditions set$Xgafv(java.lang.String $Xgafv) {
                return (UpdateEntitiesWithConditions) super.set$Xgafv($Xgafv);
              }

              @Override
              public UpdateEntitiesWithConditions setAccessToken(java.lang.String accessToken) {
                return (UpdateEntitiesWithConditions) super.setAccessToken(accessToken);
              }

              @Override
              public UpdateEntitiesWithConditions setAlt(java.lang.String alt) {
                return (UpdateEntitiesWithConditions) super.setAlt(alt);
              }

              @Override
              public UpdateEntitiesWithConditions setCallback(java.lang.String callback) {
                return (UpdateEntitiesWithConditions) super.setCallback(callback);
              }

              @Override
              public UpdateEntitiesWithConditions setFields(java.lang.String fields) {
                return (UpdateEntitiesWithConditions) super.setFields(fields);
              }

              @Override
              public UpdateEntitiesWithConditions setKey(java.lang.String key) {
                return (UpdateEntitiesWithConditions) super.setKey(key);
              }

              @Override
              public UpdateEntitiesWithConditions setOauthToken(java.lang.String oauthToken) {
                return (UpdateEntitiesWithConditions) super.setOauthToken(oauthToken);
              }

              @Override
              public UpdateEntitiesWithConditions setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (UpdateEntitiesWithConditions) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public UpdateEntitiesWithConditions setQuotaUser(java.lang.String quotaUser) {
                return (UpdateEntitiesWithConditions) super.setQuotaUser(quotaUser);
              }

              @Override
              public UpdateEntitiesWithConditions setUploadType(java.lang.String uploadType) {
                return (UpdateEntitiesWithConditions) super.setUploadType(uploadType);
              }

              @Override
              public UpdateEntitiesWithConditions setUploadProtocol(java.lang.String uploadProtocol) {
                return (UpdateEntitiesWithConditions) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. Resource name of the Entity Type. Format:
               * projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               */
              @com.google.api.client.util.Key
              private java.lang.String entityType;

              /** Required. Resource name of the Entity Type. Format:
             projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               */
              public java.lang.String getEntityType() {
                return entityType;
              }

              /**
               * Required. Resource name of the Entity Type. Format:
               * projects/{project}/locations/{location}/connections/{connection}/entityTypes/{type}
               */
              public UpdateEntitiesWithConditions setEntityType(java.lang.String entityType) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(ENTITY_TYPE_PATTERN.matcher(entityType).matches(),
                      "Parameter entityType must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/connections/[^/]+/entityTypes/[^/]+$");
                }
                this.entityType = entityType;
                return this;
              }

              /**
               * Required. Conditions to be used when updating entities. From a proto standpoint,
               * There are no restrictions on what can be passed using this field. The connector
               * documentation should have information about what format of filters/conditions are
               * supported. Note: If this conditions field is left empty, an exception is thrown. We
               * don't want to consider 'empty conditions' to be a match-all case. Connector
               * developers can determine and document what a match-all case constraint would be.
               */
              @com.google.api.client.util.Key
              private java.lang.String conditions;

              /** Required. Conditions to be used when updating entities. From a proto standpoint, There are no
             restrictions on what can be passed using this field. The connector documentation should have
             information about what format of filters/conditions are supported. Note: If this conditions field
             is left empty, an exception is thrown. We don't want to consider 'empty conditions' to be a match-
             all case. Connector developers can determine and document what a match-all case constraint would
             be.
               */
              public java.lang.String getConditions() {
                return conditions;
              }

              /**
               * Required. Conditions to be used when updating entities. From a proto standpoint,
               * There are no restrictions on what can be passed using this field. The connector
               * documentation should have information about what format of filters/conditions are
               * supported. Note: If this conditions field is left empty, an exception is thrown. We
               * don't want to consider 'empty conditions' to be a match-all case. Connector
               * developers can determine and document what a match-all case constraint would be.
               */
              public UpdateEntitiesWithConditions setConditions(java.lang.String conditions) {
                this.conditions = conditions;
                return this;
              }

              @Override
              public UpdateEntitiesWithConditions set(String parameterName, Object value) {
                return (UpdateEntitiesWithConditions) super.set(parameterName, value);
              }
            }

          }
        }
      }
    }
  }

  /**
   * Builder for {@link Connectors}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Connectors}. */
    @Override
    public Connectors build() {
      return new Connectors(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ConnectorsRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setConnectorsRequestInitializer(
        ConnectorsRequestInitializer connectorsRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(connectorsRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
