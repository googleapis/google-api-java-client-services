/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Contains information regarding an ongoing conference (aka call) for a meeting space.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CallInfo extends com.google.api.client.json.GenericJson {

  /**
   * Abuse reporting configuration for the ongoing conference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AbuseReportingConfig abuseReportingConfig;

  /**
   * Output only. Display name of the owner of artifacts generated in this conference. The expected
   * use of this in clients is to present info like "This recording will be sent to John Doe's
   * Drive". This field can be empty if preferred display name determination fails for any reason.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private UserDisplayInfo artifactOwner;

  /**
   * Output only. Documents attached to an ongoing conference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DocumentInfo> attachedDocuments;

  /**
   * Output only. The set of reactions that clients are allowed to send and can expect to receive.
   * Note that a device in the conference should have the MAY_SEND_REACTIONS privilege to be able to
   * send reactions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ReactionInfo> availableReactions;

  /**
   * Information about active broadcast session in the ongoing conference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BroadcastSessionInfo broadcastSessionInfo;

  /**
   * Output only. The calendar event ID of a Google Calendar event that the meeting space is
   * associated with. If the meeting space is not associated with an event in Google Calendar, this
   * field is empty. For recurring events, it refers to the recurring instance associated with the
   * current call, as determined by the server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String calendarEventId;

  /**
   * The current co-activity session, or unset if there is none in progress. A co-activity session
   * can be initiated by devices in JOINED state . Initiator of the co-activity is expected to
   * populate this field to start the session. Once clients detect that the co-activity has
   * finished, any JOINED device can clear this field to end the co-activity session. In the case of
   * switching activities, the initiator of the new activity merely needs to override this with the
   * new co-activity data, and all connected clients are expected to handle the transition
   * gracefully.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CoActivity coActivity;

  /**
   * The current collaboration session, or unset if no collaboration is in progress.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Collaboration collaboration;

  /**
   * CSE information for the ongoing conference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CseInfo cseInfo;

  /**
   * Output only. The maximum number of devices that may be in the joined state simultaneously in
   * this conference. This can be used by clients to guess whether it will be possible to join, but
   * the only way to know is to try to join. It can also be used to inform users about the limit
   * that is in effect. This limit is normally set when the conference is created and not changed
   * during the lifetime of the conference. But there are some cases where it may change, so clients
   * should be aware that the information may be stale.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxJoinedDevices;

  /**
   * Output only. Information about the media backend for the currently ongoing conference in the
   * meeting space. The media backend information will only be filled in for clients that are
   * supposed to present the information. The information should be displayed in a debug panel and
   * is only intended for internal debugging purposes. If the string is empty nothing should be
   * displayed about the media backend. Deprecated because media backend is always MEDIA_ROUTER
   * since Dec 2018.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mediaBackendInfo;

  /**
   * Output only. The name or description of the organization or domain that the organizer belongs
   * to. The expected use of this in clients is to present messages like "John Doe (outside of
   * Google.com) is trying to join this call", where "Google.com" is the organization name. The
   * field will be empty if the organization name could not be determined, possibly because of a
   * backend error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String organizationName;

  /**
   * Paygate information to clients.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PaygateInfo paygateInfo;

  /**
   * The current presenter in the call, or unset if there is no current presenter. Clients can set
   * this to change the presenter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Presenter presenter;

  /**
   * Deprecated, use RecordingSessionInfo instead. Info about recording for this conference. This
   * will always be set in server responses, with a valid recording status. This is superseded by
   * streaming_sessions field, which contains the same information about this recording as well as
   * additional information about other application type at the same time. This will be deprecated
   * and removed at some point.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RecordingInfo recordingInfo;

  /**
   * Information about active recording session in the ongoing conference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RecordingSessionInfo recordingSessionInfo;

  /**
   * Settings of the ongoing conference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CallSettings settings;

  /**
   * Output only. Info about streaming sessions (recording or broadcast) for this conference. This
   * should contain all active sessions. Currently, it's guaranteed to have at most one recording
   * and at most one broadcast (at most two sessions in total). For each application type (recording
   * or broadcast), latest inactive session is included if there's no active one.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<StreamingSessionInfo> streamingSessions;

  /**
   * Information about active transcription session in the ongoing conference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TranscriptionSessionInfo transcriptionSessionInfo;

  /**
   * The number of devices viewing the conference - MeetingDevices that are in VIEWER role and
   * JOINED state in the conference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer viewerCount;

  /**
   * Information about active YouTube broadcast sessions in the ongoing conference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<YouTubeBroadcastSessionInfo> youTubeBroadcastSessionInfos;

  /**
   * Abuse reporting configuration for the ongoing conference.
   * @return value or {@code null} for none
   */
  public AbuseReportingConfig getAbuseReportingConfig() {
    return abuseReportingConfig;
  }

  /**
   * Abuse reporting configuration for the ongoing conference.
   * @param abuseReportingConfig abuseReportingConfig or {@code null} for none
   */
  public CallInfo setAbuseReportingConfig(AbuseReportingConfig abuseReportingConfig) {
    this.abuseReportingConfig = abuseReportingConfig;
    return this;
  }

  /**
   * Output only. Display name of the owner of artifacts generated in this conference. The expected
   * use of this in clients is to present info like "This recording will be sent to John Doe's
   * Drive". This field can be empty if preferred display name determination fails for any reason.
   * @return value or {@code null} for none
   */
  public UserDisplayInfo getArtifactOwner() {
    return artifactOwner;
  }

  /**
   * Output only. Display name of the owner of artifacts generated in this conference. The expected
   * use of this in clients is to present info like "This recording will be sent to John Doe's
   * Drive". This field can be empty if preferred display name determination fails for any reason.
   * @param artifactOwner artifactOwner or {@code null} for none
   */
  public CallInfo setArtifactOwner(UserDisplayInfo artifactOwner) {
    this.artifactOwner = artifactOwner;
    return this;
  }

  /**
   * Output only. Documents attached to an ongoing conference.
   * @return value or {@code null} for none
   */
  public java.util.List<DocumentInfo> getAttachedDocuments() {
    return attachedDocuments;
  }

  /**
   * Output only. Documents attached to an ongoing conference.
   * @param attachedDocuments attachedDocuments or {@code null} for none
   */
  public CallInfo setAttachedDocuments(java.util.List<DocumentInfo> attachedDocuments) {
    this.attachedDocuments = attachedDocuments;
    return this;
  }

  /**
   * Output only. The set of reactions that clients are allowed to send and can expect to receive.
   * Note that a device in the conference should have the MAY_SEND_REACTIONS privilege to be able to
   * send reactions.
   * @return value or {@code null} for none
   */
  public java.util.List<ReactionInfo> getAvailableReactions() {
    return availableReactions;
  }

  /**
   * Output only. The set of reactions that clients are allowed to send and can expect to receive.
   * Note that a device in the conference should have the MAY_SEND_REACTIONS privilege to be able to
   * send reactions.
   * @param availableReactions availableReactions or {@code null} for none
   */
  public CallInfo setAvailableReactions(java.util.List<ReactionInfo> availableReactions) {
    this.availableReactions = availableReactions;
    return this;
  }

  /**
   * Information about active broadcast session in the ongoing conference.
   * @return value or {@code null} for none
   */
  public BroadcastSessionInfo getBroadcastSessionInfo() {
    return broadcastSessionInfo;
  }

  /**
   * Information about active broadcast session in the ongoing conference.
   * @param broadcastSessionInfo broadcastSessionInfo or {@code null} for none
   */
  public CallInfo setBroadcastSessionInfo(BroadcastSessionInfo broadcastSessionInfo) {
    this.broadcastSessionInfo = broadcastSessionInfo;
    return this;
  }

  /**
   * Output only. The calendar event ID of a Google Calendar event that the meeting space is
   * associated with. If the meeting space is not associated with an event in Google Calendar, this
   * field is empty. For recurring events, it refers to the recurring instance associated with the
   * current call, as determined by the server.
   * @return value or {@code null} for none
   */
  public java.lang.String getCalendarEventId() {
    return calendarEventId;
  }

  /**
   * Output only. The calendar event ID of a Google Calendar event that the meeting space is
   * associated with. If the meeting space is not associated with an event in Google Calendar, this
   * field is empty. For recurring events, it refers to the recurring instance associated with the
   * current call, as determined by the server.
   * @param calendarEventId calendarEventId or {@code null} for none
   */
  public CallInfo setCalendarEventId(java.lang.String calendarEventId) {
    this.calendarEventId = calendarEventId;
    return this;
  }

  /**
   * The current co-activity session, or unset if there is none in progress. A co-activity session
   * can be initiated by devices in JOINED state . Initiator of the co-activity is expected to
   * populate this field to start the session. Once clients detect that the co-activity has
   * finished, any JOINED device can clear this field to end the co-activity session. In the case of
   * switching activities, the initiator of the new activity merely needs to override this with the
   * new co-activity data, and all connected clients are expected to handle the transition
   * gracefully.
   * @return value or {@code null} for none
   */
  public CoActivity getCoActivity() {
    return coActivity;
  }

  /**
   * The current co-activity session, or unset if there is none in progress. A co-activity session
   * can be initiated by devices in JOINED state . Initiator of the co-activity is expected to
   * populate this field to start the session. Once clients detect that the co-activity has
   * finished, any JOINED device can clear this field to end the co-activity session. In the case of
   * switching activities, the initiator of the new activity merely needs to override this with the
   * new co-activity data, and all connected clients are expected to handle the transition
   * gracefully.
   * @param coActivity coActivity or {@code null} for none
   */
  public CallInfo setCoActivity(CoActivity coActivity) {
    this.coActivity = coActivity;
    return this;
  }

  /**
   * The current collaboration session, or unset if no collaboration is in progress.
   * @return value or {@code null} for none
   */
  public Collaboration getCollaboration() {
    return collaboration;
  }

  /**
   * The current collaboration session, or unset if no collaboration is in progress.
   * @param collaboration collaboration or {@code null} for none
   */
  public CallInfo setCollaboration(Collaboration collaboration) {
    this.collaboration = collaboration;
    return this;
  }

  /**
   * CSE information for the ongoing conference.
   * @return value or {@code null} for none
   */
  public CseInfo getCseInfo() {
    return cseInfo;
  }

  /**
   * CSE information for the ongoing conference.
   * @param cseInfo cseInfo or {@code null} for none
   */
  public CallInfo setCseInfo(CseInfo cseInfo) {
    this.cseInfo = cseInfo;
    return this;
  }

  /**
   * Output only. The maximum number of devices that may be in the joined state simultaneously in
   * this conference. This can be used by clients to guess whether it will be possible to join, but
   * the only way to know is to try to join. It can also be used to inform users about the limit
   * that is in effect. This limit is normally set when the conference is created and not changed
   * during the lifetime of the conference. But there are some cases where it may change, so clients
   * should be aware that the information may be stale.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxJoinedDevices() {
    return maxJoinedDevices;
  }

  /**
   * Output only. The maximum number of devices that may be in the joined state simultaneously in
   * this conference. This can be used by clients to guess whether it will be possible to join, but
   * the only way to know is to try to join. It can also be used to inform users about the limit
   * that is in effect. This limit is normally set when the conference is created and not changed
   * during the lifetime of the conference. But there are some cases where it may change, so clients
   * should be aware that the information may be stale.
   * @param maxJoinedDevices maxJoinedDevices or {@code null} for none
   */
  public CallInfo setMaxJoinedDevices(java.lang.Integer maxJoinedDevices) {
    this.maxJoinedDevices = maxJoinedDevices;
    return this;
  }

  /**
   * Output only. Information about the media backend for the currently ongoing conference in the
   * meeting space. The media backend information will only be filled in for clients that are
   * supposed to present the information. The information should be displayed in a debug panel and
   * is only intended for internal debugging purposes. If the string is empty nothing should be
   * displayed about the media backend. Deprecated because media backend is always MEDIA_ROUTER
   * since Dec 2018.
   * @return value or {@code null} for none
   */
  public java.lang.String getMediaBackendInfo() {
    return mediaBackendInfo;
  }

  /**
   * Output only. Information about the media backend for the currently ongoing conference in the
   * meeting space. The media backend information will only be filled in for clients that are
   * supposed to present the information. The information should be displayed in a debug panel and
   * is only intended for internal debugging purposes. If the string is empty nothing should be
   * displayed about the media backend. Deprecated because media backend is always MEDIA_ROUTER
   * since Dec 2018.
   * @param mediaBackendInfo mediaBackendInfo or {@code null} for none
   */
  public CallInfo setMediaBackendInfo(java.lang.String mediaBackendInfo) {
    this.mediaBackendInfo = mediaBackendInfo;
    return this;
  }

  /**
   * Output only. The name or description of the organization or domain that the organizer belongs
   * to. The expected use of this in clients is to present messages like "John Doe (outside of
   * Google.com) is trying to join this call", where "Google.com" is the organization name. The
   * field will be empty if the organization name could not be determined, possibly because of a
   * backend error.
   * @return value or {@code null} for none
   */
  public java.lang.String getOrganizationName() {
    return organizationName;
  }

  /**
   * Output only. The name or description of the organization or domain that the organizer belongs
   * to. The expected use of this in clients is to present messages like "John Doe (outside of
   * Google.com) is trying to join this call", where "Google.com" is the organization name. The
   * field will be empty if the organization name could not be determined, possibly because of a
   * backend error.
   * @param organizationName organizationName or {@code null} for none
   */
  public CallInfo setOrganizationName(java.lang.String organizationName) {
    this.organizationName = organizationName;
    return this;
  }

  /**
   * Paygate information to clients.
   * @return value or {@code null} for none
   */
  public PaygateInfo getPaygateInfo() {
    return paygateInfo;
  }

  /**
   * Paygate information to clients.
   * @param paygateInfo paygateInfo or {@code null} for none
   */
  public CallInfo setPaygateInfo(PaygateInfo paygateInfo) {
    this.paygateInfo = paygateInfo;
    return this;
  }

  /**
   * The current presenter in the call, or unset if there is no current presenter. Clients can set
   * this to change the presenter.
   * @return value or {@code null} for none
   */
  public Presenter getPresenter() {
    return presenter;
  }

  /**
   * The current presenter in the call, or unset if there is no current presenter. Clients can set
   * this to change the presenter.
   * @param presenter presenter or {@code null} for none
   */
  public CallInfo setPresenter(Presenter presenter) {
    this.presenter = presenter;
    return this;
  }

  /**
   * Deprecated, use RecordingSessionInfo instead. Info about recording for this conference. This
   * will always be set in server responses, with a valid recording status. This is superseded by
   * streaming_sessions field, which contains the same information about this recording as well as
   * additional information about other application type at the same time. This will be deprecated
   * and removed at some point.
   * @return value or {@code null} for none
   */
  public RecordingInfo getRecordingInfo() {
    return recordingInfo;
  }

  /**
   * Deprecated, use RecordingSessionInfo instead. Info about recording for this conference. This
   * will always be set in server responses, with a valid recording status. This is superseded by
   * streaming_sessions field, which contains the same information about this recording as well as
   * additional information about other application type at the same time. This will be deprecated
   * and removed at some point.
   * @param recordingInfo recordingInfo or {@code null} for none
   */
  public CallInfo setRecordingInfo(RecordingInfo recordingInfo) {
    this.recordingInfo = recordingInfo;
    return this;
  }

  /**
   * Information about active recording session in the ongoing conference.
   * @return value or {@code null} for none
   */
  public RecordingSessionInfo getRecordingSessionInfo() {
    return recordingSessionInfo;
  }

  /**
   * Information about active recording session in the ongoing conference.
   * @param recordingSessionInfo recordingSessionInfo or {@code null} for none
   */
  public CallInfo setRecordingSessionInfo(RecordingSessionInfo recordingSessionInfo) {
    this.recordingSessionInfo = recordingSessionInfo;
    return this;
  }

  /**
   * Settings of the ongoing conference.
   * @return value or {@code null} for none
   */
  public CallSettings getSettings() {
    return settings;
  }

  /**
   * Settings of the ongoing conference.
   * @param settings settings or {@code null} for none
   */
  public CallInfo setSettings(CallSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Output only. Info about streaming sessions (recording or broadcast) for this conference. This
   * should contain all active sessions. Currently, it's guaranteed to have at most one recording
   * and at most one broadcast (at most two sessions in total). For each application type (recording
   * or broadcast), latest inactive session is included if there's no active one.
   * @return value or {@code null} for none
   */
  public java.util.List<StreamingSessionInfo> getStreamingSessions() {
    return streamingSessions;
  }

  /**
   * Output only. Info about streaming sessions (recording or broadcast) for this conference. This
   * should contain all active sessions. Currently, it's guaranteed to have at most one recording
   * and at most one broadcast (at most two sessions in total). For each application type (recording
   * or broadcast), latest inactive session is included if there's no active one.
   * @param streamingSessions streamingSessions or {@code null} for none
   */
  public CallInfo setStreamingSessions(java.util.List<StreamingSessionInfo> streamingSessions) {
    this.streamingSessions = streamingSessions;
    return this;
  }

  /**
   * Information about active transcription session in the ongoing conference.
   * @return value or {@code null} for none
   */
  public TranscriptionSessionInfo getTranscriptionSessionInfo() {
    return transcriptionSessionInfo;
  }

  /**
   * Information about active transcription session in the ongoing conference.
   * @param transcriptionSessionInfo transcriptionSessionInfo or {@code null} for none
   */
  public CallInfo setTranscriptionSessionInfo(TranscriptionSessionInfo transcriptionSessionInfo) {
    this.transcriptionSessionInfo = transcriptionSessionInfo;
    return this;
  }

  /**
   * The number of devices viewing the conference - MeetingDevices that are in VIEWER role and
   * JOINED state in the conference.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getViewerCount() {
    return viewerCount;
  }

  /**
   * The number of devices viewing the conference - MeetingDevices that are in VIEWER role and
   * JOINED state in the conference.
   * @param viewerCount viewerCount or {@code null} for none
   */
  public CallInfo setViewerCount(java.lang.Integer viewerCount) {
    this.viewerCount = viewerCount;
    return this;
  }

  /**
   * Information about active YouTube broadcast sessions in the ongoing conference.
   * @return value or {@code null} for none
   */
  public java.util.List<YouTubeBroadcastSessionInfo> getYouTubeBroadcastSessionInfos() {
    return youTubeBroadcastSessionInfos;
  }

  /**
   * Information about active YouTube broadcast sessions in the ongoing conference.
   * @param youTubeBroadcastSessionInfos youTubeBroadcastSessionInfos or {@code null} for none
   */
  public CallInfo setYouTubeBroadcastSessionInfos(java.util.List<YouTubeBroadcastSessionInfo> youTubeBroadcastSessionInfos) {
    this.youTubeBroadcastSessionInfos = youTubeBroadcastSessionInfos;
    return this;
  }

  @Override
  public CallInfo set(String fieldName, Object value) {
    return (CallInfo) super.set(fieldName, value);
  }

  @Override
  public CallInfo clone() {
    return (CallInfo) super.clone();
  }

}
