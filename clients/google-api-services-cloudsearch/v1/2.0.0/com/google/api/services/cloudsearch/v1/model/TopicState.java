/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * State of an topic thread as maintained within Tingle.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TopicState extends com.google.api.client.json.GenericJson {

  /**
   * Map of label => count of topic constituent messages with label These only contain counts of
   * labels that are relevant for topic normalization/denormalization. Eg. If a topic thread has 5
   * constituents, 4 of which are in inbox, this will contain ^i => 4. Some labels of interest are
   * archive, inbox, trash, spam, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Integer> labelIdMessageCount;

  /**
   * Number of constituents for this entity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numConstituents;

  /**
   * Map of label => count of topic constituent messages with label These only contain counts of
   * labels that are relevant for topic normalization/denormalization. Eg. If a topic thread has 5
   * constituents, 4 of which are in inbox, this will contain ^i => 4. Some labels of interest are
   * archive, inbox, trash, spam, etc.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Integer> getLabelIdMessageCount() {
    return labelIdMessageCount;
  }

  /**
   * Map of label => count of topic constituent messages with label These only contain counts of
   * labels that are relevant for topic normalization/denormalization. Eg. If a topic thread has 5
   * constituents, 4 of which are in inbox, this will contain ^i => 4. Some labels of interest are
   * archive, inbox, trash, spam, etc.
   * @param labelIdMessageCount labelIdMessageCount or {@code null} for none
   */
  public TopicState setLabelIdMessageCount(java.util.Map<String, java.lang.Integer> labelIdMessageCount) {
    this.labelIdMessageCount = labelIdMessageCount;
    return this;
  }

  /**
   * Number of constituents for this entity.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumConstituents() {
    return numConstituents;
  }

  /**
   * Number of constituents for this entity.
   * @param numConstituents numConstituents or {@code null} for none
   */
  public TopicState setNumConstituents(java.lang.Integer numConstituents) {
    this.numConstituents = numConstituents;
    return this;
  }

  @Override
  public TopicState set(String fieldName, Object value) {
    return (TopicState) super.set(fieldName, value);
  }

  @Override
  public TopicState clone() {
    return (TopicState) super.clone();
  }

}
