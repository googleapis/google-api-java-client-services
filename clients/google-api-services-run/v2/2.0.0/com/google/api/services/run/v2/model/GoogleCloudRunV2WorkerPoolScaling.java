/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.run.v2.model;

/**
 * Worker pool scaling settings.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Run Admin API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudRunV2WorkerPoolScaling extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The total number of instances in manual scaling mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer manualInstanceCount;

  /**
   * Optional. The maximum count of instances distributed among revisions based on the specified
   * instance split percentages.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxInstanceCount;

  /**
   * Optional. A maximum percentage of instances that will be moved in each step of traffic split
   * changes. When set to a positive value, the server will bring up, at most, that percentage of
   * new instances at a time before moving traffic to them. After moving traffic, the server will
   * bring down instances of the old revision. This can reduce a spike of total active instances
   * during changes from one revision to another but specifying how many extra instances can be
   * brought up at a time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxSurge;

  /**
   * Optional. A maximum percentage of instances that may be unavailable during changes from one
   * revision to another. When set to a positive value, the server may bring down instances before
   * bringing up new instances. This can prevent a spike of total active instances during changes
   * from one revision by reducing the pool of instances before bringing up new ones. Some requests
   * may be slow or fail to serve during the transition.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxUnavailable;

  /**
   * Optional. The minimum count of instances distributed among revisions based on the specified
   * instance split percentages.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer minInstanceCount;

  /**
   * Optional. The scaling mode for the worker pool.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String scalingMode;

  /**
   * Optional. The total number of instances in manual scaling mode.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getManualInstanceCount() {
    return manualInstanceCount;
  }

  /**
   * Optional. The total number of instances in manual scaling mode.
   * @param manualInstanceCount manualInstanceCount or {@code null} for none
   */
  public GoogleCloudRunV2WorkerPoolScaling setManualInstanceCount(java.lang.Integer manualInstanceCount) {
    this.manualInstanceCount = manualInstanceCount;
    return this;
  }

  /**
   * Optional. The maximum count of instances distributed among revisions based on the specified
   * instance split percentages.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxInstanceCount() {
    return maxInstanceCount;
  }

  /**
   * Optional. The maximum count of instances distributed among revisions based on the specified
   * instance split percentages.
   * @param maxInstanceCount maxInstanceCount or {@code null} for none
   */
  public GoogleCloudRunV2WorkerPoolScaling setMaxInstanceCount(java.lang.Integer maxInstanceCount) {
    this.maxInstanceCount = maxInstanceCount;
    return this;
  }

  /**
   * Optional. A maximum percentage of instances that will be moved in each step of traffic split
   * changes. When set to a positive value, the server will bring up, at most, that percentage of
   * new instances at a time before moving traffic to them. After moving traffic, the server will
   * bring down instances of the old revision. This can reduce a spike of total active instances
   * during changes from one revision to another but specifying how many extra instances can be
   * brought up at a time.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxSurge() {
    return maxSurge;
  }

  /**
   * Optional. A maximum percentage of instances that will be moved in each step of traffic split
   * changes. When set to a positive value, the server will bring up, at most, that percentage of
   * new instances at a time before moving traffic to them. After moving traffic, the server will
   * bring down instances of the old revision. This can reduce a spike of total active instances
   * during changes from one revision to another but specifying how many extra instances can be
   * brought up at a time.
   * @param maxSurge maxSurge or {@code null} for none
   */
  public GoogleCloudRunV2WorkerPoolScaling setMaxSurge(java.lang.Integer maxSurge) {
    this.maxSurge = maxSurge;
    return this;
  }

  /**
   * Optional. A maximum percentage of instances that may be unavailable during changes from one
   * revision to another. When set to a positive value, the server may bring down instances before
   * bringing up new instances. This can prevent a spike of total active instances during changes
   * from one revision by reducing the pool of instances before bringing up new ones. Some requests
   * may be slow or fail to serve during the transition.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxUnavailable() {
    return maxUnavailable;
  }

  /**
   * Optional. A maximum percentage of instances that may be unavailable during changes from one
   * revision to another. When set to a positive value, the server may bring down instances before
   * bringing up new instances. This can prevent a spike of total active instances during changes
   * from one revision by reducing the pool of instances before bringing up new ones. Some requests
   * may be slow or fail to serve during the transition.
   * @param maxUnavailable maxUnavailable or {@code null} for none
   */
  public GoogleCloudRunV2WorkerPoolScaling setMaxUnavailable(java.lang.Integer maxUnavailable) {
    this.maxUnavailable = maxUnavailable;
    return this;
  }

  /**
   * Optional. The minimum count of instances distributed among revisions based on the specified
   * instance split percentages.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMinInstanceCount() {
    return minInstanceCount;
  }

  /**
   * Optional. The minimum count of instances distributed among revisions based on the specified
   * instance split percentages.
   * @param minInstanceCount minInstanceCount or {@code null} for none
   */
  public GoogleCloudRunV2WorkerPoolScaling setMinInstanceCount(java.lang.Integer minInstanceCount) {
    this.minInstanceCount = minInstanceCount;
    return this;
  }

  /**
   * Optional. The scaling mode for the worker pool.
   * @return value or {@code null} for none
   */
  public java.lang.String getScalingMode() {
    return scalingMode;
  }

  /**
   * Optional. The scaling mode for the worker pool.
   * @param scalingMode scalingMode or {@code null} for none
   */
  public GoogleCloudRunV2WorkerPoolScaling setScalingMode(java.lang.String scalingMode) {
    this.scalingMode = scalingMode;
    return this;
  }

  @Override
  public GoogleCloudRunV2WorkerPoolScaling set(String fieldName, Object value) {
    return (GoogleCloudRunV2WorkerPoolScaling) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudRunV2WorkerPoolScaling clone() {
    return (GoogleCloudRunV2WorkerPoolScaling) super.clone();
  }

}
