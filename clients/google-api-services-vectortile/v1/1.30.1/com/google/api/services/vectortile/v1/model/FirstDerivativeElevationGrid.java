/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vectortile.v1.model;

/**
 * A packed representation of a 2D grid of uniformly spaced points containing elevation data. Each
 * point within the grid represents the altitude in meters above average sea level at that location
 * within the tile. Elevations provided are (generally) relative to the EGM96 geoid, however some
 * areas will be relative to NAVD88. EGM96 and NAVD88 are off by no more than 2 meters. The grid is
 * oriented north-west to south-east, as illustrated: rows[0].a[0] rows[0].a[m] +-----------------+
 * | | | N | | ^ | | | | | W <-----> E | | | | | v | | S | | | +-----------------+ rows[n].a[0]
 * rows[n].a[m] Rather than storing the altitudes directly, we store the diffs between them as
 * integers at some requested level of precision to take advantage of integer packing. The actual
 * altitude values a[] can be reconstructed using the scale and each row's first_altitude and
 * altitude_diff fields.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Semantic Tile API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FirstDerivativeElevationGrid extends com.google.api.client.json.GenericJson {

  /**
   * A multiplier applied to the altitude fields below to extract the actual altitudes in meters
   * from the elevation grid.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float altitudeMultiplier;

  /**
   * Rows of points containing altitude data making up the elevation grid. Each row is the same
   * length. Rows are ordered from north to south. E.g: rows[0] is the north-most row, and rows[n]
   * is the south-most row.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Row> rows;

  /**
   * A multiplier applied to the altitude fields below to extract the actual altitudes in meters
   * from the elevation grid.
   * @return value or {@code null} for none
   */
  public java.lang.Float getAltitudeMultiplier() {
    return altitudeMultiplier;
  }

  /**
   * A multiplier applied to the altitude fields below to extract the actual altitudes in meters
   * from the elevation grid.
   * @param altitudeMultiplier altitudeMultiplier or {@code null} for none
   */
  public FirstDerivativeElevationGrid setAltitudeMultiplier(java.lang.Float altitudeMultiplier) {
    this.altitudeMultiplier = altitudeMultiplier;
    return this;
  }

  /**
   * Rows of points containing altitude data making up the elevation grid. Each row is the same
   * length. Rows are ordered from north to south. E.g: rows[0] is the north-most row, and rows[n]
   * is the south-most row.
   * @return value or {@code null} for none
   */
  public java.util.List<Row> getRows() {
    return rows;
  }

  /**
   * Rows of points containing altitude data making up the elevation grid. Each row is the same
   * length. Rows are ordered from north to south. E.g: rows[0] is the north-most row, and rows[n]
   * is the south-most row.
   * @param rows rows or {@code null} for none
   */
  public FirstDerivativeElevationGrid setRows(java.util.List<Row> rows) {
    this.rows = rows;
    return this;
  }

  @Override
  public FirstDerivativeElevationGrid set(String fieldName, Object value) {
    return (FirstDerivativeElevationGrid) super.set(fieldName, value);
  }

  @Override
  public FirstDerivativeElevationGrid clone() {
    return (FirstDerivativeElevationGrid) super.clone();
  }

}
