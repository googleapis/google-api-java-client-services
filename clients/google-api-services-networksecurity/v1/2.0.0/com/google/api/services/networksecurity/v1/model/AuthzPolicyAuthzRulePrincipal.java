/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networksecurity.v1.model;

/**
 * Describes the properties of a principal to be matched against.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Security API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AuthzPolicyAuthzRulePrincipal extends com.google.api.client.json.GenericJson {

  /**
   * Required. A non-empty string whose value is matched against the principal value based on the
   * principal_selector. Only exact match can be applied for CLIENT_CERT_URI_SAN,
   * CLIENT_CERT_DNS_NAME_SAN, CLIENT_CERT_COMMON_NAME selectors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AuthzPolicyAuthzRuleStringMatch principal;

  /**
   * Optional. An enum to decide what principal value the principal rule will match against. If not
   * specified, the PrincipalSelector is CLIENT_CERT_URI_SAN.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String principalSelector;

  /**
   * Required. A non-empty string whose value is matched against the principal value based on the
   * principal_selector. Only exact match can be applied for CLIENT_CERT_URI_SAN,
   * CLIENT_CERT_DNS_NAME_SAN, CLIENT_CERT_COMMON_NAME selectors.
   * @return value or {@code null} for none
   */
  public AuthzPolicyAuthzRuleStringMatch getPrincipal() {
    return principal;
  }

  /**
   * Required. A non-empty string whose value is matched against the principal value based on the
   * principal_selector. Only exact match can be applied for CLIENT_CERT_URI_SAN,
   * CLIENT_CERT_DNS_NAME_SAN, CLIENT_CERT_COMMON_NAME selectors.
   * @param principal principal or {@code null} for none
   */
  public AuthzPolicyAuthzRulePrincipal setPrincipal(AuthzPolicyAuthzRuleStringMatch principal) {
    this.principal = principal;
    return this;
  }

  /**
   * Optional. An enum to decide what principal value the principal rule will match against. If not
   * specified, the PrincipalSelector is CLIENT_CERT_URI_SAN.
   * @return value or {@code null} for none
   */
  public java.lang.String getPrincipalSelector() {
    return principalSelector;
  }

  /**
   * Optional. An enum to decide what principal value the principal rule will match against. If not
   * specified, the PrincipalSelector is CLIENT_CERT_URI_SAN.
   * @param principalSelector principalSelector or {@code null} for none
   */
  public AuthzPolicyAuthzRulePrincipal setPrincipalSelector(java.lang.String principalSelector) {
    this.principalSelector = principalSelector;
    return this;
  }

  @Override
  public AuthzPolicyAuthzRulePrincipal set(String fieldName, Object value) {
    return (AuthzPolicyAuthzRulePrincipal) super.set(fieldName, value);
  }

  @Override
  public AuthzPolicyAuthzRulePrincipal clone() {
    return (AuthzPolicyAuthzRulePrincipal) super.clone();
  }

}
