/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.area120tables.v1alpha1.model;

/**
 * Details on a column in the table.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Area120 Tables API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ColumnDescription extends com.google.api.client.json.GenericJson {

  /**
   * Data type of the column Supported types are auto_id, boolean, boolean_list, creator,
   * create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person,
   * person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship,
   * file_attachment_list. These types directly map to the column types supported on Tables website.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dataType;

  /**
   * Internal id for a column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit
   * the values to a set of possible values. We return the range of values in such cases to help
   * clients implement better user data validation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<LabeledItem> labels;

  /**
   * Optional. Indicates that this is a lookup column whose value is derived from the relationship
   * column specified in the details. Lookup columns can not be updated directly. To change the
   * value you must update the associated relationship column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private LookupDetails lookupDetails;

  /**
   * column name
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. Additional details about a relationship column. Specified when data_type is
   * relationship.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RelationshipDetails relationshipDetails;

  /**
   * Data type of the column Supported types are auto_id, boolean, boolean_list, creator,
   * create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person,
   * person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship,
   * file_attachment_list. These types directly map to the column types supported on Tables website.
   * @return value or {@code null} for none
   */
  public java.lang.String getDataType() {
    return dataType;
  }

  /**
   * Data type of the column Supported types are auto_id, boolean, boolean_list, creator,
   * create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person,
   * person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship,
   * file_attachment_list. These types directly map to the column types supported on Tables website.
   * @param dataType dataType or {@code null} for none
   */
  public ColumnDescription setDataType(java.lang.String dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Internal id for a column.
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Internal id for a column.
   * @param id id or {@code null} for none
   */
  public ColumnDescription setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit
   * the values to a set of possible values. We return the range of values in such cases to help
   * clients implement better user data validation.
   * @return value or {@code null} for none
   */
  public java.util.List<LabeledItem> getLabels() {
    return labels;
  }

  /**
   * Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit
   * the values to a set of possible values. We return the range of values in such cases to help
   * clients implement better user data validation.
   * @param labels labels or {@code null} for none
   */
  public ColumnDescription setLabels(java.util.List<LabeledItem> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Optional. Indicates that this is a lookup column whose value is derived from the relationship
   * column specified in the details. Lookup columns can not be updated directly. To change the
   * value you must update the associated relationship column.
   * @return value or {@code null} for none
   */
  public LookupDetails getLookupDetails() {
    return lookupDetails;
  }

  /**
   * Optional. Indicates that this is a lookup column whose value is derived from the relationship
   * column specified in the details. Lookup columns can not be updated directly. To change the
   * value you must update the associated relationship column.
   * @param lookupDetails lookupDetails or {@code null} for none
   */
  public ColumnDescription setLookupDetails(LookupDetails lookupDetails) {
    this.lookupDetails = lookupDetails;
    return this;
  }

  /**
   * column name
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * column name
   * @param name name or {@code null} for none
   */
  public ColumnDescription setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. Additional details about a relationship column. Specified when data_type is
   * relationship.
   * @return value or {@code null} for none
   */
  public RelationshipDetails getRelationshipDetails() {
    return relationshipDetails;
  }

  /**
   * Optional. Additional details about a relationship column. Specified when data_type is
   * relationship.
   * @param relationshipDetails relationshipDetails or {@code null} for none
   */
  public ColumnDescription setRelationshipDetails(RelationshipDetails relationshipDetails) {
    this.relationshipDetails = relationshipDetails;
    return this;
  }

  @Override
  public ColumnDescription set(String fieldName, Object value) {
    return (ColumnDescription) super.set(fieldName, value);
  }

  @Override
  public ColumnDescription clone() {
    return (ColumnDescription) super.clone();
  }

}
