/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.sheets.v4.model;

/**
 * A sheet in a spreadsheet.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Sheets API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Sheet extends com.google.api.client.json.GenericJson {

  /**
   * The banded (alternating colors) ranges on this sheet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<BandedRange> bandedRanges;

  static {
    // hack to force ProGuard to consider BandedRange used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(BandedRange.class);
  }

  /**
   * The filter on this sheet, if any.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BasicFilter basicFilter;

  /**
   * The specifications of every chart on this sheet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<EmbeddedChart> charts;

  static {
    // hack to force ProGuard to consider EmbeddedChart used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(EmbeddedChart.class);
  }

  /**
   * All column groups on this sheet, ordered by increasing range start index, then by group depth.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DimensionGroup> columnGroups;

  static {
    // hack to force ProGuard to consider DimensionGroup used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(DimensionGroup.class);
  }

  /**
   * The conditional format rules in this sheet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ConditionalFormatRule> conditionalFormats;

  static {
    // hack to force ProGuard to consider ConditionalFormatRule used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ConditionalFormatRule.class);
  }

  /**
   * Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent
   * on the number of ranges requested on this sheet. For example, if this is representing `Sheet1`,
   * and the spreadsheet was requested with ranges `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the
   * first GridData will have a startRow/startColumn of `0`, while the second one will have
   * `startRow 14` (zero-based row 15), and `startColumn 3` (zero-based column D).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GridData> data;

  static {
    // hack to force ProGuard to consider GridData used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GridData.class);
  }

  /**
   * The developer metadata associated with a sheet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DeveloperMetadata> developerMetadata;

  static {
    // hack to force ProGuard to consider DeveloperMetadata used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(DeveloperMetadata.class);
  }

  /**
   * The filter views in this sheet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<FilterView> filterViews;

  static {
    // hack to force ProGuard to consider FilterView used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(FilterView.class);
  }

  /**
   * The ranges that are merged together.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GridRange> merges;

  static {
    // hack to force ProGuard to consider GridRange used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GridRange.class);
  }

  /**
   * The properties of the sheet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SheetProperties properties;

  /**
   * The protected ranges in this sheet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ProtectedRange> protectedRanges;

  static {
    // hack to force ProGuard to consider ProtectedRange used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ProtectedRange.class);
  }

  /**
   * All row groups on this sheet, ordered by increasing range start index, then by group depth.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DimensionGroup> rowGroups;

  static {
    // hack to force ProGuard to consider DimensionGroup used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(DimensionGroup.class);
  }

  /**
   * The banded (alternating colors) ranges on this sheet.
   * @return value or {@code null} for none
   */
  public java.util.List<BandedRange> getBandedRanges() {
    return bandedRanges;
  }

  /**
   * The banded (alternating colors) ranges on this sheet.
   * @param bandedRanges bandedRanges or {@code null} for none
   */
  public Sheet setBandedRanges(java.util.List<BandedRange> bandedRanges) {
    this.bandedRanges = bandedRanges;
    return this;
  }

  /**
   * The filter on this sheet, if any.
   * @return value or {@code null} for none
   */
  public BasicFilter getBasicFilter() {
    return basicFilter;
  }

  /**
   * The filter on this sheet, if any.
   * @param basicFilter basicFilter or {@code null} for none
   */
  public Sheet setBasicFilter(BasicFilter basicFilter) {
    this.basicFilter = basicFilter;
    return this;
  }

  /**
   * The specifications of every chart on this sheet.
   * @return value or {@code null} for none
   */
  public java.util.List<EmbeddedChart> getCharts() {
    return charts;
  }

  /**
   * The specifications of every chart on this sheet.
   * @param charts charts or {@code null} for none
   */
  public Sheet setCharts(java.util.List<EmbeddedChart> charts) {
    this.charts = charts;
    return this;
  }

  /**
   * All column groups on this sheet, ordered by increasing range start index, then by group depth.
   * @return value or {@code null} for none
   */
  public java.util.List<DimensionGroup> getColumnGroups() {
    return columnGroups;
  }

  /**
   * All column groups on this sheet, ordered by increasing range start index, then by group depth.
   * @param columnGroups columnGroups or {@code null} for none
   */
  public Sheet setColumnGroups(java.util.List<DimensionGroup> columnGroups) {
    this.columnGroups = columnGroups;
    return this;
  }

  /**
   * The conditional format rules in this sheet.
   * @return value or {@code null} for none
   */
  public java.util.List<ConditionalFormatRule> getConditionalFormats() {
    return conditionalFormats;
  }

  /**
   * The conditional format rules in this sheet.
   * @param conditionalFormats conditionalFormats or {@code null} for none
   */
  public Sheet setConditionalFormats(java.util.List<ConditionalFormatRule> conditionalFormats) {
    this.conditionalFormats = conditionalFormats;
    return this;
  }

  /**
   * Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent
   * on the number of ranges requested on this sheet. For example, if this is representing `Sheet1`,
   * and the spreadsheet was requested with ranges `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the
   * first GridData will have a startRow/startColumn of `0`, while the second one will have
   * `startRow 14` (zero-based row 15), and `startColumn 3` (zero-based column D).
   * @return value or {@code null} for none
   */
  public java.util.List<GridData> getData() {
    return data;
  }

  /**
   * Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent
   * on the number of ranges requested on this sheet. For example, if this is representing `Sheet1`,
   * and the spreadsheet was requested with ranges `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the
   * first GridData will have a startRow/startColumn of `0`, while the second one will have
   * `startRow 14` (zero-based row 15), and `startColumn 3` (zero-based column D).
   * @param data data or {@code null} for none
   */
  public Sheet setData(java.util.List<GridData> data) {
    this.data = data;
    return this;
  }

  /**
   * The developer metadata associated with a sheet.
   * @return value or {@code null} for none
   */
  public java.util.List<DeveloperMetadata> getDeveloperMetadata() {
    return developerMetadata;
  }

  /**
   * The developer metadata associated with a sheet.
   * @param developerMetadata developerMetadata or {@code null} for none
   */
  public Sheet setDeveloperMetadata(java.util.List<DeveloperMetadata> developerMetadata) {
    this.developerMetadata = developerMetadata;
    return this;
  }

  /**
   * The filter views in this sheet.
   * @return value or {@code null} for none
   */
  public java.util.List<FilterView> getFilterViews() {
    return filterViews;
  }

  /**
   * The filter views in this sheet.
   * @param filterViews filterViews or {@code null} for none
   */
  public Sheet setFilterViews(java.util.List<FilterView> filterViews) {
    this.filterViews = filterViews;
    return this;
  }

  /**
   * The ranges that are merged together.
   * @return value or {@code null} for none
   */
  public java.util.List<GridRange> getMerges() {
    return merges;
  }

  /**
   * The ranges that are merged together.
   * @param merges merges or {@code null} for none
   */
  public Sheet setMerges(java.util.List<GridRange> merges) {
    this.merges = merges;
    return this;
  }

  /**
   * The properties of the sheet.
   * @return value or {@code null} for none
   */
  public SheetProperties getProperties() {
    return properties;
  }

  /**
   * The properties of the sheet.
   * @param properties properties or {@code null} for none
   */
  public Sheet setProperties(SheetProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * The protected ranges in this sheet.
   * @return value or {@code null} for none
   */
  public java.util.List<ProtectedRange> getProtectedRanges() {
    return protectedRanges;
  }

  /**
   * The protected ranges in this sheet.
   * @param protectedRanges protectedRanges or {@code null} for none
   */
  public Sheet setProtectedRanges(java.util.List<ProtectedRange> protectedRanges) {
    this.protectedRanges = protectedRanges;
    return this;
  }

  /**
   * All row groups on this sheet, ordered by increasing range start index, then by group depth.
   * @return value or {@code null} for none
   */
  public java.util.List<DimensionGroup> getRowGroups() {
    return rowGroups;
  }

  /**
   * All row groups on this sheet, ordered by increasing range start index, then by group depth.
   * @param rowGroups rowGroups or {@code null} for none
   */
  public Sheet setRowGroups(java.util.List<DimensionGroup> rowGroups) {
    this.rowGroups = rowGroups;
    return this;
  }

  @Override
  public Sheet set(String fieldName, Object value) {
    return (Sheet) super.set(fieldName, value);
  }

  @Override
  public Sheet clone() {
    return (Sheet) super.clone();
  }

}
