/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This message is used for storing smartphone related information. Note: MobilePerDocData is a
 * similar message, but it's for lowend mobile.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SmartphonePerDocData extends com.google.api.client.json.GenericJson {

  /**
   * If set, this page is a smartphone dup, a page serving equivalent contents as another URL
   * (desktop canonical), but in smartphone-optimized style. This field holds the docid of the
   * desktop canonical.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDDesktopCanonicalDocid") @com.google.api.client.json.JsonString
  private java.math.BigInteger dEPRECATEDDesktopCanonicalDocid;

  /**
   * Mobile URL for homepages, predicted by the URL rewrite rules. See go/mobile-homepage-
   * prediction.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("DEPRECATEDMobileHomepageDocid") @com.google.api.client.json.JsonString
  private java.math.BigInteger dEPRECATEDMobileHomepageDocid;

  /**
   * Indicates if the page is violating mobile ads density interstitial policy and the violation
   * strength. See go/interstitials-for-ads and http://ariane/268642 for details. To save indexing
   * space, we convert the double values in [0.0, 1.0] to intergers in range [0, 1000] by using
   * floor(value * 1000).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer adsDensityInterstitialViolationStrength;

  /**
   * Indicates if the page serves error to smartphone crawler. go/ramsey-sp404demotion
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isErrorPage;

  /**
   * Indicates if the page has mobile N-1 redirection. go/ramsey-n1demotion
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isN1Redirect;

  /**
   * Indicates if the page is rendered in a friendly manner on smartphones. We use this field as
   * tri-state: "unset" means the rendering result classification is not available, and "set as
   * false" means that the page is rendered in unfriendly manner on smartphones. See also go/modena-
   * ranking.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isSmartphoneOptimized;

  /**
   * Indicates if the current URL serves error page to desktop crawler and non error page to
   * smartphone crawler.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isWebErrorMobileContent;

  /**
   * The ratio of the area of the largest Flash to the render area.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double maximumFlashRatio;

  /**
   * Indicates if the page is violating mobile interstitial policy and should be demoted. See go
   * /interstitials-ranking-dd for details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean violatesMobileInterstitialPolicy;

  /**
   * If set, this page is a smartphone dup, a page serving equivalent contents as another URL
   * (desktop canonical), but in smartphone-optimized style. This field holds the docid of the
   * desktop canonical.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getDEPRECATEDDesktopCanonicalDocid() {
    return dEPRECATEDDesktopCanonicalDocid;
  }

  /**
   * If set, this page is a smartphone dup, a page serving equivalent contents as another URL
   * (desktop canonical), but in smartphone-optimized style. This field holds the docid of the
   * desktop canonical.
   * @param dEPRECATEDDesktopCanonicalDocid dEPRECATEDDesktopCanonicalDocid or {@code null} for none
   */
  public SmartphonePerDocData setDEPRECATEDDesktopCanonicalDocid(java.math.BigInteger dEPRECATEDDesktopCanonicalDocid) {
    this.dEPRECATEDDesktopCanonicalDocid = dEPRECATEDDesktopCanonicalDocid;
    return this;
  }

  /**
   * Mobile URL for homepages, predicted by the URL rewrite rules. See go/mobile-homepage-
   * prediction.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getDEPRECATEDMobileHomepageDocid() {
    return dEPRECATEDMobileHomepageDocid;
  }

  /**
   * Mobile URL for homepages, predicted by the URL rewrite rules. See go/mobile-homepage-
   * prediction.
   * @param dEPRECATEDMobileHomepageDocid dEPRECATEDMobileHomepageDocid or {@code null} for none
   */
  public SmartphonePerDocData setDEPRECATEDMobileHomepageDocid(java.math.BigInteger dEPRECATEDMobileHomepageDocid) {
    this.dEPRECATEDMobileHomepageDocid = dEPRECATEDMobileHomepageDocid;
    return this;
  }

  /**
   * Indicates if the page is violating mobile ads density interstitial policy and the violation
   * strength. See go/interstitials-for-ads and http://ariane/268642 for details. To save indexing
   * space, we convert the double values in [0.0, 1.0] to intergers in range [0, 1000] by using
   * floor(value * 1000).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAdsDensityInterstitialViolationStrength() {
    return adsDensityInterstitialViolationStrength;
  }

  /**
   * Indicates if the page is violating mobile ads density interstitial policy and the violation
   * strength. See go/interstitials-for-ads and http://ariane/268642 for details. To save indexing
   * space, we convert the double values in [0.0, 1.0] to intergers in range [0, 1000] by using
   * floor(value * 1000).
   * @param adsDensityInterstitialViolationStrength adsDensityInterstitialViolationStrength or {@code null} for none
   */
  public SmartphonePerDocData setAdsDensityInterstitialViolationStrength(java.lang.Integer adsDensityInterstitialViolationStrength) {
    this.adsDensityInterstitialViolationStrength = adsDensityInterstitialViolationStrength;
    return this;
  }

  /**
   * Indicates if the page serves error to smartphone crawler. go/ramsey-sp404demotion
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsErrorPage() {
    return isErrorPage;
  }

  /**
   * Indicates if the page serves error to smartphone crawler. go/ramsey-sp404demotion
   * @param isErrorPage isErrorPage or {@code null} for none
   */
  public SmartphonePerDocData setIsErrorPage(java.lang.Boolean isErrorPage) {
    this.isErrorPage = isErrorPage;
    return this;
  }

  /**
   * Indicates if the page has mobile N-1 redirection. go/ramsey-n1demotion
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsN1Redirect() {
    return isN1Redirect;
  }

  /**
   * Indicates if the page has mobile N-1 redirection. go/ramsey-n1demotion
   * @param isN1Redirect isN1Redirect or {@code null} for none
   */
  public SmartphonePerDocData setIsN1Redirect(java.lang.Boolean isN1Redirect) {
    this.isN1Redirect = isN1Redirect;
    return this;
  }

  /**
   * Indicates if the page is rendered in a friendly manner on smartphones. We use this field as
   * tri-state: "unset" means the rendering result classification is not available, and "set as
   * false" means that the page is rendered in unfriendly manner on smartphones. See also go/modena-
   * ranking.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsSmartphoneOptimized() {
    return isSmartphoneOptimized;
  }

  /**
   * Indicates if the page is rendered in a friendly manner on smartphones. We use this field as
   * tri-state: "unset" means the rendering result classification is not available, and "set as
   * false" means that the page is rendered in unfriendly manner on smartphones. See also go/modena-
   * ranking.
   * @param isSmartphoneOptimized isSmartphoneOptimized or {@code null} for none
   */
  public SmartphonePerDocData setIsSmartphoneOptimized(java.lang.Boolean isSmartphoneOptimized) {
    this.isSmartphoneOptimized = isSmartphoneOptimized;
    return this;
  }

  /**
   * Indicates if the current URL serves error page to desktop crawler and non error page to
   * smartphone crawler.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsWebErrorMobileContent() {
    return isWebErrorMobileContent;
  }

  /**
   * Indicates if the current URL serves error page to desktop crawler and non error page to
   * smartphone crawler.
   * @param isWebErrorMobileContent isWebErrorMobileContent or {@code null} for none
   */
  public SmartphonePerDocData setIsWebErrorMobileContent(java.lang.Boolean isWebErrorMobileContent) {
    this.isWebErrorMobileContent = isWebErrorMobileContent;
    return this;
  }

  /**
   * The ratio of the area of the largest Flash to the render area.
   * @return value or {@code null} for none
   */
  public java.lang.Double getMaximumFlashRatio() {
    return maximumFlashRatio;
  }

  /**
   * The ratio of the area of the largest Flash to the render area.
   * @param maximumFlashRatio maximumFlashRatio or {@code null} for none
   */
  public SmartphonePerDocData setMaximumFlashRatio(java.lang.Double maximumFlashRatio) {
    this.maximumFlashRatio = maximumFlashRatio;
    return this;
  }

  /**
   * Indicates if the page is violating mobile interstitial policy and should be demoted. See go
   * /interstitials-ranking-dd for details.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getViolatesMobileInterstitialPolicy() {
    return violatesMobileInterstitialPolicy;
  }

  /**
   * Indicates if the page is violating mobile interstitial policy and should be demoted. See go
   * /interstitials-ranking-dd for details.
   * @param violatesMobileInterstitialPolicy violatesMobileInterstitialPolicy or {@code null} for none
   */
  public SmartphonePerDocData setViolatesMobileInterstitialPolicy(java.lang.Boolean violatesMobileInterstitialPolicy) {
    this.violatesMobileInterstitialPolicy = violatesMobileInterstitialPolicy;
    return this;
  }

  @Override
  public SmartphonePerDocData set(String fieldName, Object value) {
    return (SmartphonePerDocData) super.set(fieldName, value);
  }

  @Override
  public SmartphonePerDocData clone() {
    return (SmartphonePerDocData) super.clone();
  }

}
