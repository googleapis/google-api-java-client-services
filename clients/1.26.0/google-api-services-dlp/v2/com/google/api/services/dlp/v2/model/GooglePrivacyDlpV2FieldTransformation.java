/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dlp.v2.model;

/**
 * The transformation to apply to the field.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Data Loss Prevention (DLP) API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GooglePrivacyDlpV2FieldTransformation extends com.google.api.client.json.GenericJson {

  /**
   * Only apply the transformation if the condition evaluates to true for the given
   * `RecordCondition`. The conditions are allowed to reference fields that are not used in the
   * actual transformation. [optional]
   *
   * Example Use Cases:
   *
   * - Apply a different bucket transformation to an age column if the zip code column for the same
   * record is within a specific range. - Redact a field if the date of birth field is greater than
   * 85.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GooglePrivacyDlpV2RecordCondition condition;

  /**
   * Input field(s) to apply the transformation to. [required]
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GooglePrivacyDlpV2FieldId> fields;

  static {
    // hack to force ProGuard to consider GooglePrivacyDlpV2FieldId used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GooglePrivacyDlpV2FieldId.class);
  }

  /**
   * Treat the contents of the field as free text, and selectively transform content that matches an
   * `InfoType`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GooglePrivacyDlpV2InfoTypeTransformations infoTypeTransformations;

  /**
   * Apply the transformation to the entire field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GooglePrivacyDlpV2PrimitiveTransformation primitiveTransformation;

  /**
   * Only apply the transformation if the condition evaluates to true for the given
   * `RecordCondition`. The conditions are allowed to reference fields that are not used in the
   * actual transformation. [optional]
   *
   * Example Use Cases:
   *
   * - Apply a different bucket transformation to an age column if the zip code column for the same
   * record is within a specific range. - Redact a field if the date of birth field is greater than
   * 85.
   * @return value or {@code null} for none
   */
  public GooglePrivacyDlpV2RecordCondition getCondition() {
    return condition;
  }

  /**
   * Only apply the transformation if the condition evaluates to true for the given
   * `RecordCondition`. The conditions are allowed to reference fields that are not used in the
   * actual transformation. [optional]
   *
   * Example Use Cases:
   *
   * - Apply a different bucket transformation to an age column if the zip code column for the same
   * record is within a specific range. - Redact a field if the date of birth field is greater than
   * 85.
   * @param condition condition or {@code null} for none
   */
  public GooglePrivacyDlpV2FieldTransformation setCondition(GooglePrivacyDlpV2RecordCondition condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Input field(s) to apply the transformation to. [required]
   * @return value or {@code null} for none
   */
  public java.util.List<GooglePrivacyDlpV2FieldId> getFields() {
    return fields;
  }

  /**
   * Input field(s) to apply the transformation to. [required]
   * @param fields fields or {@code null} for none
   */
  public GooglePrivacyDlpV2FieldTransformation setFields(java.util.List<GooglePrivacyDlpV2FieldId> fields) {
    this.fields = fields;
    return this;
  }

  /**
   * Treat the contents of the field as free text, and selectively transform content that matches an
   * `InfoType`.
   * @return value or {@code null} for none
   */
  public GooglePrivacyDlpV2InfoTypeTransformations getInfoTypeTransformations() {
    return infoTypeTransformations;
  }

  /**
   * Treat the contents of the field as free text, and selectively transform content that matches an
   * `InfoType`.
   * @param infoTypeTransformations infoTypeTransformations or {@code null} for none
   */
  public GooglePrivacyDlpV2FieldTransformation setInfoTypeTransformations(GooglePrivacyDlpV2InfoTypeTransformations infoTypeTransformations) {
    this.infoTypeTransformations = infoTypeTransformations;
    return this;
  }

  /**
   * Apply the transformation to the entire field.
   * @return value or {@code null} for none
   */
  public GooglePrivacyDlpV2PrimitiveTransformation getPrimitiveTransformation() {
    return primitiveTransformation;
  }

  /**
   * Apply the transformation to the entire field.
   * @param primitiveTransformation primitiveTransformation or {@code null} for none
   */
  public GooglePrivacyDlpV2FieldTransformation setPrimitiveTransformation(GooglePrivacyDlpV2PrimitiveTransformation primitiveTransformation) {
    this.primitiveTransformation = primitiveTransformation;
    return this;
  }

  @Override
  public GooglePrivacyDlpV2FieldTransformation set(String fieldName, Object value) {
    return (GooglePrivacyDlpV2FieldTransformation) super.set(fieldName, value);
  }

  @Override
  public GooglePrivacyDlpV2FieldTransformation clone() {
    return (GooglePrivacyDlpV2FieldTransformation) super.clone();
  }

}
