/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This proto represents the geographic area served by an establishment. WARNING: This proto is not
 * meant to be used directly. Please use the provided libraries.
 * http://google3/geostore/base/public/service_area.h
 * http://google3/java/com/google/geostore/base/ServiceArea.java
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreServiceAreaProto extends com.google.api.client.json.GenericJson {

  /**
   * The features that make up the service area for this establishment. These features are subject
   * to the following constraints applied by editing middleware (notably, not strictly enforced by
   * lints in storage): 1. The following feature types (and their subtypes) may be used: +
   * TYPE_ISLAND + TYPE_POLITICAL, except the following prohibited subtypes: - TYPE_CONSTITUENCY -
   * TYPE_LAND_PARCEL + TYPE_POSTAL 2. There is a maximum limit (currently 20) to the number of
   * areas which may be provided. This is due to serving efficiency limitations. 3. There are no
   * additional geometry requirements for these features beyond the requirements based on the
   * feature types above. In practice this means that these features will either have polygonal or
   * point-based geometries. 4. These referenced features are generally required to have names,
   * though this is not strictly enforced.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreFeatureIdProto> servedFeature;

  static {
    // hack to force ProGuard to consider GeostoreFeatureIdProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreFeatureIdProto.class);
  }

  /**
   * The features that make up the service area for this establishment. These features are subject
   * to the following constraints applied by editing middleware (notably, not strictly enforced by
   * lints in storage): 1. The following feature types (and their subtypes) may be used: +
   * TYPE_ISLAND + TYPE_POLITICAL, except the following prohibited subtypes: - TYPE_CONSTITUENCY -
   * TYPE_LAND_PARCEL + TYPE_POSTAL 2. There is a maximum limit (currently 20) to the number of
   * areas which may be provided. This is due to serving efficiency limitations. 3. There are no
   * additional geometry requirements for these features beyond the requirements based on the
   * feature types above. In practice this means that these features will either have polygonal or
   * point-based geometries. 4. These referenced features are generally required to have names,
   * though this is not strictly enforced.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreFeatureIdProto> getServedFeature() {
    return servedFeature;
  }

  /**
   * The features that make up the service area for this establishment. These features are subject
   * to the following constraints applied by editing middleware (notably, not strictly enforced by
   * lints in storage): 1. The following feature types (and their subtypes) may be used: +
   * TYPE_ISLAND + TYPE_POLITICAL, except the following prohibited subtypes: - TYPE_CONSTITUENCY -
   * TYPE_LAND_PARCEL + TYPE_POSTAL 2. There is a maximum limit (currently 20) to the number of
   * areas which may be provided. This is due to serving efficiency limitations. 3. There are no
   * additional geometry requirements for these features beyond the requirements based on the
   * feature types above. In practice this means that these features will either have polygonal or
   * point-based geometries. 4. These referenced features are generally required to have names,
   * though this is not strictly enforced.
   * @param servedFeature servedFeature or {@code null} for none
   */
  public GeostoreServiceAreaProto setServedFeature(java.util.List<GeostoreFeatureIdProto> servedFeature) {
    this.servedFeature = servedFeature;
    return this;
  }

  @Override
  public GeostoreServiceAreaProto set(String fieldName, Object value) {
    return (GeostoreServiceAreaProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreServiceAreaProto clone() {
    return (GeostoreServiceAreaProto) super.clone();
  }

}
