/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.oracledatabase.v1.model;

/**
 * Details of the Database resource. https://docs.oracle.com/en-
 * us/iaas/api/#/en/database/20160918/Database/
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Oracle Database@Google Cloud API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Database extends com.google.api.client.json.GenericJson {

  /**
   * Required. The password for the default ADMIN user.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String adminPassword;

  /**
   * Optional. The character set for the database. The default is AL32UTF8.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String characterSet;

  /**
   * Output only. The date and time that the Database was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. The database ID of the Database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String databaseId;

  /**
   * Optional. The name of the DbHome resource associated with the Database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dbHomeName;

  /**
   * Optional. The database name. The name must begin with an alphabetic character and can contain a
   * maximum of eight alphanumeric characters. Special characters are not permitted.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dbName;

  /**
   * Optional. The DB_UNIQUE_NAME of the Oracle Database being backed up.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dbUniqueName;

  /**
   * Output only. The GCP Oracle zone where the Database is created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String gcpOracleZone;

  /**
   * Identifier. The name of the Database resource in the following format:
   * projects/{project}/locations/{region}/databases/{database}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. The national character set for the database. The default is AL16UTF16.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ncharacterSet;

  /**
   * Output only. HTTPS link to OCI resources exposed to Customer via UI Interface.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ociUrl;

  /**
   * Output only. The Status of Operations Insights for this Database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String opsInsightsStatus;

  /**
   * Optional. The properties of the Database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DatabaseProperties properties;

  /**
   * Optional. The TDE wallet password for the database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tdeWalletPassword;

  /**
   * Required. The password for the default ADMIN user.
   * @return value or {@code null} for none
   */
  public java.lang.String getAdminPassword() {
    return adminPassword;
  }

  /**
   * Required. The password for the default ADMIN user.
   * @param adminPassword adminPassword or {@code null} for none
   */
  public Database setAdminPassword(java.lang.String adminPassword) {
    this.adminPassword = adminPassword;
    return this;
  }

  /**
   * Optional. The character set for the database. The default is AL32UTF8.
   * @return value or {@code null} for none
   */
  public java.lang.String getCharacterSet() {
    return characterSet;
  }

  /**
   * Optional. The character set for the database. The default is AL32UTF8.
   * @param characterSet characterSet or {@code null} for none
   */
  public Database setCharacterSet(java.lang.String characterSet) {
    this.characterSet = characterSet;
    return this;
  }

  /**
   * Output only. The date and time that the Database was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The date and time that the Database was created.
   * @param createTime createTime or {@code null} for none
   */
  public Database setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. The database ID of the Database.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabaseId() {
    return databaseId;
  }

  /**
   * Optional. The database ID of the Database.
   * @param databaseId databaseId or {@code null} for none
   */
  public Database setDatabaseId(java.lang.String databaseId) {
    this.databaseId = databaseId;
    return this;
  }

  /**
   * Optional. The name of the DbHome resource associated with the Database.
   * @return value or {@code null} for none
   */
  public java.lang.String getDbHomeName() {
    return dbHomeName;
  }

  /**
   * Optional. The name of the DbHome resource associated with the Database.
   * @param dbHomeName dbHomeName or {@code null} for none
   */
  public Database setDbHomeName(java.lang.String dbHomeName) {
    this.dbHomeName = dbHomeName;
    return this;
  }

  /**
   * Optional. The database name. The name must begin with an alphabetic character and can contain a
   * maximum of eight alphanumeric characters. Special characters are not permitted.
   * @return value or {@code null} for none
   */
  public java.lang.String getDbName() {
    return dbName;
  }

  /**
   * Optional. The database name. The name must begin with an alphabetic character and can contain a
   * maximum of eight alphanumeric characters. Special characters are not permitted.
   * @param dbName dbName or {@code null} for none
   */
  public Database setDbName(java.lang.String dbName) {
    this.dbName = dbName;
    return this;
  }

  /**
   * Optional. The DB_UNIQUE_NAME of the Oracle Database being backed up.
   * @return value or {@code null} for none
   */
  public java.lang.String getDbUniqueName() {
    return dbUniqueName;
  }

  /**
   * Optional. The DB_UNIQUE_NAME of the Oracle Database being backed up.
   * @param dbUniqueName dbUniqueName or {@code null} for none
   */
  public Database setDbUniqueName(java.lang.String dbUniqueName) {
    this.dbUniqueName = dbUniqueName;
    return this;
  }

  /**
   * Output only. The GCP Oracle zone where the Database is created.
   * @return value or {@code null} for none
   */
  public java.lang.String getGcpOracleZone() {
    return gcpOracleZone;
  }

  /**
   * Output only. The GCP Oracle zone where the Database is created.
   * @param gcpOracleZone gcpOracleZone or {@code null} for none
   */
  public Database setGcpOracleZone(java.lang.String gcpOracleZone) {
    this.gcpOracleZone = gcpOracleZone;
    return this;
  }

  /**
   * Identifier. The name of the Database resource in the following format:
   * projects/{project}/locations/{region}/databases/{database}
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The name of the Database resource in the following format:
   * projects/{project}/locations/{region}/databases/{database}
   * @param name name or {@code null} for none
   */
  public Database setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. The national character set for the database. The default is AL16UTF16.
   * @return value or {@code null} for none
   */
  public java.lang.String getNcharacterSet() {
    return ncharacterSet;
  }

  /**
   * Optional. The national character set for the database. The default is AL16UTF16.
   * @param ncharacterSet ncharacterSet or {@code null} for none
   */
  public Database setNcharacterSet(java.lang.String ncharacterSet) {
    this.ncharacterSet = ncharacterSet;
    return this;
  }

  /**
   * Output only. HTTPS link to OCI resources exposed to Customer via UI Interface.
   * @return value or {@code null} for none
   */
  public java.lang.String getOciUrl() {
    return ociUrl;
  }

  /**
   * Output only. HTTPS link to OCI resources exposed to Customer via UI Interface.
   * @param ociUrl ociUrl or {@code null} for none
   */
  public Database setOciUrl(java.lang.String ociUrl) {
    this.ociUrl = ociUrl;
    return this;
  }

  /**
   * Output only. The Status of Operations Insights for this Database.
   * @return value or {@code null} for none
   */
  public java.lang.String getOpsInsightsStatus() {
    return opsInsightsStatus;
  }

  /**
   * Output only. The Status of Operations Insights for this Database.
   * @param opsInsightsStatus opsInsightsStatus or {@code null} for none
   */
  public Database setOpsInsightsStatus(java.lang.String opsInsightsStatus) {
    this.opsInsightsStatus = opsInsightsStatus;
    return this;
  }

  /**
   * Optional. The properties of the Database.
   * @return value or {@code null} for none
   */
  public DatabaseProperties getProperties() {
    return properties;
  }

  /**
   * Optional. The properties of the Database.
   * @param properties properties or {@code null} for none
   */
  public Database setProperties(DatabaseProperties properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Optional. The TDE wallet password for the database.
   * @return value or {@code null} for none
   */
  public java.lang.String getTdeWalletPassword() {
    return tdeWalletPassword;
  }

  /**
   * Optional. The TDE wallet password for the database.
   * @param tdeWalletPassword tdeWalletPassword or {@code null} for none
   */
  public Database setTdeWalletPassword(java.lang.String tdeWalletPassword) {
    this.tdeWalletPassword = tdeWalletPassword;
    return this;
  }

  @Override
  public Database set(String fieldName, Object value) {
    return (Database) super.set(fieldName, value);
  }

  @Override
  public Database clone() {
    return (Database) super.clone();
  }

}
