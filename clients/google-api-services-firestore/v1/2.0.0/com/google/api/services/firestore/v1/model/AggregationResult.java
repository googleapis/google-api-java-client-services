/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1.model;

/**
 * The result of a single bucket from a Firestore aggregation query. The keys of `aggregate_fields`
 * are the same for all results in an aggregation query, unlike document queries which can have
 * different fields present for each result.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Firestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AggregationResult extends com.google.api.client.json.GenericJson {

  /**
   * The result of the aggregation functions, ex: `COUNT(*) AS total_docs`. The key is the alias
   * assigned to the aggregation function on input and the size of this map equals the number of
   * aggregation functions in the query.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, Value> aggregateFields;

  /**
   * The result of the aggregation functions, ex: `COUNT(*) AS total_docs`. The key is the alias
   * assigned to the aggregation function on input and the size of this map equals the number of
   * aggregation functions in the query.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, Value> getAggregateFields() {
    return aggregateFields;
  }

  /**
   * The result of the aggregation functions, ex: `COUNT(*) AS total_docs`. The key is the alias
   * assigned to the aggregation function on input and the size of this map equals the number of
   * aggregation functions in the query.
   * @param aggregateFields aggregateFields or {@code null} for none
   */
  public AggregationResult setAggregateFields(java.util.Map<String, Value> aggregateFields) {
    this.aggregateFields = aggregateFields;
    return this;
  }

  @Override
  public AggregationResult set(String fieldName, Object value) {
    return (AggregationResult) super.set(fieldName, value);
  }

  @Override
  public AggregationResult clone() {
    return (AggregationResult) super.clone();
  }

}
