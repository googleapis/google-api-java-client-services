/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebaserules.v1.model;

/**
 * Test result message containing the state of the test as well as a description and source position
 * for test failures.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase Rules API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TestResult extends com.google.api.client.json.GenericJson {

  /**
   * Debug messages related to test execution issues encountered during evaluation.
   *
   * Debug messages may be related to too many or too few invocations of function mocks or to
   * runtime errors that occur during evaluation.
   *
   * For example: ```Unable to read variable [name: "resource"]```
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> debugMessages;

  /**
   * Position in the `Source` or `Ruleset` where the principle runtime error occurs.
   *
   * Evaluation of an expression may result in an error. Rules are deny by default, so a `DENY`
   * expectation when an error is generated is valid. When there is a `DENY` with an error, the
   * `SourcePosition` is returned.
   *
   * E.g. `error_position { line: 19 column: 37 }`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SourcePosition errorPosition;

  /**
   * The set of function calls made to service-defined methods.
   *
   * Function calls are included in the order in which they are encountered during evaluation, are
   * provided for both mocked and unmocked functions, and included on the response regardless of the
   * test `state`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<FunctionCall> functionCalls;

  static {
    // hack to force ProGuard to consider FunctionCall used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(FunctionCall.class);
  }

  /**
   * State of the test.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * The set of visited expressions for a given test. This returns positions and evaluation results
   * of all visited expressions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<VisitedExpression> visitedExpressions;

  /**
   * Debug messages related to test execution issues encountered during evaluation.
   *
   * Debug messages may be related to too many or too few invocations of function mocks or to
   * runtime errors that occur during evaluation.
   *
   * For example: ```Unable to read variable [name: "resource"]```
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDebugMessages() {
    return debugMessages;
  }

  /**
   * Debug messages related to test execution issues encountered during evaluation.
   *
   * Debug messages may be related to too many or too few invocations of function mocks or to
   * runtime errors that occur during evaluation.
   *
   * For example: ```Unable to read variable [name: "resource"]```
   * @param debugMessages debugMessages or {@code null} for none
   */
  public TestResult setDebugMessages(java.util.List<java.lang.String> debugMessages) {
    this.debugMessages = debugMessages;
    return this;
  }

  /**
   * Position in the `Source` or `Ruleset` where the principle runtime error occurs.
   *
   * Evaluation of an expression may result in an error. Rules are deny by default, so a `DENY`
   * expectation when an error is generated is valid. When there is a `DENY` with an error, the
   * `SourcePosition` is returned.
   *
   * E.g. `error_position { line: 19 column: 37 }`
   * @return value or {@code null} for none
   */
  public SourcePosition getErrorPosition() {
    return errorPosition;
  }

  /**
   * Position in the `Source` or `Ruleset` where the principle runtime error occurs.
   *
   * Evaluation of an expression may result in an error. Rules are deny by default, so a `DENY`
   * expectation when an error is generated is valid. When there is a `DENY` with an error, the
   * `SourcePosition` is returned.
   *
   * E.g. `error_position { line: 19 column: 37 }`
   * @param errorPosition errorPosition or {@code null} for none
   */
  public TestResult setErrorPosition(SourcePosition errorPosition) {
    this.errorPosition = errorPosition;
    return this;
  }

  /**
   * The set of function calls made to service-defined methods.
   *
   * Function calls are included in the order in which they are encountered during evaluation, are
   * provided for both mocked and unmocked functions, and included on the response regardless of the
   * test `state`.
   * @return value or {@code null} for none
   */
  public java.util.List<FunctionCall> getFunctionCalls() {
    return functionCalls;
  }

  /**
   * The set of function calls made to service-defined methods.
   *
   * Function calls are included in the order in which they are encountered during evaluation, are
   * provided for both mocked and unmocked functions, and included on the response regardless of the
   * test `state`.
   * @param functionCalls functionCalls or {@code null} for none
   */
  public TestResult setFunctionCalls(java.util.List<FunctionCall> functionCalls) {
    this.functionCalls = functionCalls;
    return this;
  }

  /**
   * State of the test.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * State of the test.
   * @param state state or {@code null} for none
   */
  public TestResult setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * The set of visited expressions for a given test. This returns positions and evaluation results
   * of all visited expressions.
   * @return value or {@code null} for none
   */
  public java.util.List<VisitedExpression> getVisitedExpressions() {
    return visitedExpressions;
  }

  /**
   * The set of visited expressions for a given test. This returns positions and evaluation results
   * of all visited expressions.
   * @param visitedExpressions visitedExpressions or {@code null} for none
   */
  public TestResult setVisitedExpressions(java.util.List<VisitedExpression> visitedExpressions) {
    this.visitedExpressions = visitedExpressions;
    return this;
  }

  @Override
  public TestResult set(String fieldName, Object value) {
    return (TestResult) super.set(fieldName, value);
  }

  @Override
  public TestResult clone() {
    return (TestResult) super.clone();
  }

}
