/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.run.v1alpha1.model;

/**
 * InstanceSpec is a description of an instance.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Run Admin API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class InstanceSpec extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Optional duration in seconds the instance may be active relative to StartTime before
   * the system will actively try to mark it failed and kill associated containers. If set to zero,
   * the system will never attempt to kill an instance based on time. Otherwise, value must be a
   * positive integer. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long activeDeadlineSeconds;

  /**
   * Optional. List of containers belonging to the instance. We disallow a number of fields on this
   * Container. Only a single container may be provided.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Container> containers;

  static {
    // hack to force ProGuard to consider Container used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Container.class);
  }

  /**
   * Optional. Restart policy for all containers within the instance. Allowed values are: -
   * OnFailure: Instances will always be restarted on failure if the backoffLimit has not been
   * reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used
   * if backoffLimit is set. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String restartPolicy;

  /**
   * Optional. Email address of the IAM service account associated with the instance of a Job. The
   * service account represents the identity of the running instance, and determines what
   * permissions the instance has. If not provided, the instance will use the project's default
   * service account. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serviceAccountName;

  /**
   * Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must
   * be non-negative integer. The value zero indicates delete immediately. The grace period is the
   * duration in seconds after the processes running in the instance are sent a termination signal
   * and the time when the processes are forcibly halted with a kill signal. Set this value longer
   * than the expected cleanup time for your process. +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long terminationGracePeriodSeconds;

  /**
   * Optional. List of volumes that can be mounted by containers belonging to the instance. More
   * info: https://kubernetes.io/docs/concepts/storage/volumes +optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Volume> volumes;

  /**
   * Optional. Optional duration in seconds the instance may be active relative to StartTime before
   * the system will actively try to mark it failed and kill associated containers. If set to zero,
   * the system will never attempt to kill an instance based on time. Otherwise, value must be a
   * positive integer. +optional
   * @return value or {@code null} for none
   */
  public java.lang.Long getActiveDeadlineSeconds() {
    return activeDeadlineSeconds;
  }

  /**
   * Optional. Optional duration in seconds the instance may be active relative to StartTime before
   * the system will actively try to mark it failed and kill associated containers. If set to zero,
   * the system will never attempt to kill an instance based on time. Otherwise, value must be a
   * positive integer. +optional
   * @param activeDeadlineSeconds activeDeadlineSeconds or {@code null} for none
   */
  public InstanceSpec setActiveDeadlineSeconds(java.lang.Long activeDeadlineSeconds) {
    this.activeDeadlineSeconds = activeDeadlineSeconds;
    return this;
  }

  /**
   * Optional. List of containers belonging to the instance. We disallow a number of fields on this
   * Container. Only a single container may be provided.
   * @return value or {@code null} for none
   */
  public java.util.List<Container> getContainers() {
    return containers;
  }

  /**
   * Optional. List of containers belonging to the instance. We disallow a number of fields on this
   * Container. Only a single container may be provided.
   * @param containers containers or {@code null} for none
   */
  public InstanceSpec setContainers(java.util.List<Container> containers) {
    this.containers = containers;
    return this;
  }

  /**
   * Optional. Restart policy for all containers within the instance. Allowed values are: -
   * OnFailure: Instances will always be restarted on failure if the backoffLimit has not been
   * reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used
   * if backoffLimit is set. +optional
   * @return value or {@code null} for none
   */
  public java.lang.String getRestartPolicy() {
    return restartPolicy;
  }

  /**
   * Optional. Restart policy for all containers within the instance. Allowed values are: -
   * OnFailure: Instances will always be restarted on failure if the backoffLimit has not been
   * reached. - Never: Instances are never restarted and all failures are permanent. Cannot be used
   * if backoffLimit is set. +optional
   * @param restartPolicy restartPolicy or {@code null} for none
   */
  public InstanceSpec setRestartPolicy(java.lang.String restartPolicy) {
    this.restartPolicy = restartPolicy;
    return this;
  }

  /**
   * Optional. Email address of the IAM service account associated with the instance of a Job. The
   * service account represents the identity of the running instance, and determines what
   * permissions the instance has. If not provided, the instance will use the project's default
   * service account. +optional
   * @return value or {@code null} for none
   */
  public java.lang.String getServiceAccountName() {
    return serviceAccountName;
  }

  /**
   * Optional. Email address of the IAM service account associated with the instance of a Job. The
   * service account represents the identity of the running instance, and determines what
   * permissions the instance has. If not provided, the instance will use the project's default
   * service account. +optional
   * @param serviceAccountName serviceAccountName or {@code null} for none
   */
  public InstanceSpec setServiceAccountName(java.lang.String serviceAccountName) {
    this.serviceAccountName = serviceAccountName;
    return this;
  }

  /**
   * Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must
   * be non-negative integer. The value zero indicates delete immediately. The grace period is the
   * duration in seconds after the processes running in the instance are sent a termination signal
   * and the time when the processes are forcibly halted with a kill signal. Set this value longer
   * than the expected cleanup time for your process. +optional
   * @return value or {@code null} for none
   */
  public java.lang.Long getTerminationGracePeriodSeconds() {
    return terminationGracePeriodSeconds;
  }

  /**
   * Optional. Optional duration in seconds the instance needs to terminate gracefully. Value must
   * be non-negative integer. The value zero indicates delete immediately. The grace period is the
   * duration in seconds after the processes running in the instance are sent a termination signal
   * and the time when the processes are forcibly halted with a kill signal. Set this value longer
   * than the expected cleanup time for your process. +optional
   * @param terminationGracePeriodSeconds terminationGracePeriodSeconds or {@code null} for none
   */
  public InstanceSpec setTerminationGracePeriodSeconds(java.lang.Long terminationGracePeriodSeconds) {
    this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
    return this;
  }

  /**
   * Optional. List of volumes that can be mounted by containers belonging to the instance. More
   * info: https://kubernetes.io/docs/concepts/storage/volumes +optional
   * @return value or {@code null} for none
   */
  public java.util.List<Volume> getVolumes() {
    return volumes;
  }

  /**
   * Optional. List of volumes that can be mounted by containers belonging to the instance. More
   * info: https://kubernetes.io/docs/concepts/storage/volumes +optional
   * @param volumes volumes or {@code null} for none
   */
  public InstanceSpec setVolumes(java.util.List<Volume> volumes) {
    this.volumes = volumes;
    return this;
  }

  @Override
  public InstanceSpec set(String fieldName, Object value) {
    return (InstanceSpec) super.set(fieldName, value);
  }

  @Override
  public InstanceSpec clone() {
    return (InstanceSpec) super.clone();
  }

}
