/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datastore.v1beta3.model;

/**
 * Nearest Neighbors search config. The ordering provided by FindNearest supersedes the order_by
 * stage. If multiple documents have the same vector distance, the returned document order is not
 * guaranteed to be stable between queries.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Datastore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FindNearest extends com.google.api.client.json.GenericJson {

  /**
   * Required. The Distance Measure to use, required.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String distanceMeasure;

  /**
   * Optional. Optional name of the field to output the result of the vector distance calculation.
   * Must conform to entity property limitations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String distanceResultProperty;

  /**
   * Optional. Option to specify a threshold for which no less similar documents will be returned.
   * The behavior of the specified `distance_measure` will affect the meaning of the distance
   * threshold. Since DOT_PRODUCT distances increase when the vectors are more similar, the
   * comparison is inverted. * For EUCLIDEAN, COSINE: WHERE distance <= distance_threshold * For
   * DOT_PRODUCT: WHERE distance >= distance_threshold
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double distanceThreshold;

  /**
   * Required. The number of nearest neighbors to return. Must be a positive integer of no more than
   * 100.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer limit;

  /**
   * Required. The query vector that we are searching on. Must be a vector of no more than 2048
   * dimensions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Value queryVector;

  /**
   * Required. An indexed vector property to search upon. Only documents which contain vectors whose
   * dimensionality match the query_vector can be returned.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PropertyReference vectorProperty;

  /**
   * Required. The Distance Measure to use, required.
   * @return value or {@code null} for none
   */
  public java.lang.String getDistanceMeasure() {
    return distanceMeasure;
  }

  /**
   * Required. The Distance Measure to use, required.
   * @param distanceMeasure distanceMeasure or {@code null} for none
   */
  public FindNearest setDistanceMeasure(java.lang.String distanceMeasure) {
    this.distanceMeasure = distanceMeasure;
    return this;
  }

  /**
   * Optional. Optional name of the field to output the result of the vector distance calculation.
   * Must conform to entity property limitations.
   * @return value or {@code null} for none
   */
  public java.lang.String getDistanceResultProperty() {
    return distanceResultProperty;
  }

  /**
   * Optional. Optional name of the field to output the result of the vector distance calculation.
   * Must conform to entity property limitations.
   * @param distanceResultProperty distanceResultProperty or {@code null} for none
   */
  public FindNearest setDistanceResultProperty(java.lang.String distanceResultProperty) {
    this.distanceResultProperty = distanceResultProperty;
    return this;
  }

  /**
   * Optional. Option to specify a threshold for which no less similar documents will be returned.
   * The behavior of the specified `distance_measure` will affect the meaning of the distance
   * threshold. Since DOT_PRODUCT distances increase when the vectors are more similar, the
   * comparison is inverted. * For EUCLIDEAN, COSINE: WHERE distance <= distance_threshold * For
   * DOT_PRODUCT: WHERE distance >= distance_threshold
   * @return value or {@code null} for none
   */
  public java.lang.Double getDistanceThreshold() {
    return distanceThreshold;
  }

  /**
   * Optional. Option to specify a threshold for which no less similar documents will be returned.
   * The behavior of the specified `distance_measure` will affect the meaning of the distance
   * threshold. Since DOT_PRODUCT distances increase when the vectors are more similar, the
   * comparison is inverted. * For EUCLIDEAN, COSINE: WHERE distance <= distance_threshold * For
   * DOT_PRODUCT: WHERE distance >= distance_threshold
   * @param distanceThreshold distanceThreshold or {@code null} for none
   */
  public FindNearest setDistanceThreshold(java.lang.Double distanceThreshold) {
    this.distanceThreshold = distanceThreshold;
    return this;
  }

  /**
   * Required. The number of nearest neighbors to return. Must be a positive integer of no more than
   * 100.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getLimit() {
    return limit;
  }

  /**
   * Required. The number of nearest neighbors to return. Must be a positive integer of no more than
   * 100.
   * @param limit limit or {@code null} for none
   */
  public FindNearest setLimit(java.lang.Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Required. The query vector that we are searching on. Must be a vector of no more than 2048
   * dimensions.
   * @return value or {@code null} for none
   */
  public Value getQueryVector() {
    return queryVector;
  }

  /**
   * Required. The query vector that we are searching on. Must be a vector of no more than 2048
   * dimensions.
   * @param queryVector queryVector or {@code null} for none
   */
  public FindNearest setQueryVector(Value queryVector) {
    this.queryVector = queryVector;
    return this;
  }

  /**
   * Required. An indexed vector property to search upon. Only documents which contain vectors whose
   * dimensionality match the query_vector can be returned.
   * @return value or {@code null} for none
   */
  public PropertyReference getVectorProperty() {
    return vectorProperty;
  }

  /**
   * Required. An indexed vector property to search upon. Only documents which contain vectors whose
   * dimensionality match the query_vector can be returned.
   * @param vectorProperty vectorProperty or {@code null} for none
   */
  public FindNearest setVectorProperty(PropertyReference vectorProperty) {
    this.vectorProperty = vectorProperty;
    return this;
  }

  @Override
  public FindNearest set(String fieldName, Object value) {
    return (FindNearest) super.set(fieldName, value);
  }

  @Override
  public FindNearest clone() {
    return (FindNearest) super.clone();
  }

}
