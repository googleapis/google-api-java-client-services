=== begin: ./com/google/api/services/cloud/platform/EccoDomaniIeri/EccoDomaniIeri.java
/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.cloud.platform.EccoDomaniIeri;

/**
 * Service definition for EccoDomaniIeri (v1).
 *
 * <p>
 * helloworld API v1.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="http://developers.google.com/appengine" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link EccoDomaniIeriRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class EccoDomaniIeri extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.22.0-SNAPSHOT of the Schmecken Sie Gut library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://peer-pontus.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "helloworld/v1/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public EccoDomaniIeri(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  EccoDomaniIeri(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Greetings collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code EccoDomaniIeri helloworld = new EccoDomaniIeri(...);}
   *   {@code EccoDomaniIeri.Greetings.List request = helloworld.greetings().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Greetings greetings() {
    return new Greetings();
  }

  /**
   * The "greetings" collection of methods.
   */
  public class Greetings {

    /**
     * Create a request for the method "greetings.authed".
     *
     * This request holds the parameters needed by the helloworld server.  After setting any optional
     * parameters, call the {@link Authed#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Authed authed() throws java.io.IOException {
      Authed result = new Authed();
      initialize(result);
      return result;
    }

    public class Authed extends EccoDomaniIeriRequest<com.google.api.services.cloud.platform.EccoDomaniIeri.model.HelloGreeting> {

      private static final String REST_PATH = "hellogreeting/authed";

      /**
       * Create a request for the method "greetings.authed".
       *
       * This request holds the parameters needed by the the helloworld server.  After setting any
       * optional parameters, call the {@link Authed#execute()} method to invoke the remote operation.
       * <p> {@link
       * Authed#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Authed() {
        super(EccoDomaniIeri.this, "POST", REST_PATH, null, com.google.api.services.cloud.platform.EccoDomaniIeri.model.HelloGreeting.class);
      }

      @Override
      public Authed setAlt(java.lang.String alt) {
        return (Authed) super.setAlt(alt);
      }

      @Override
      public Authed setFields(java.lang.String fields) {
        return (Authed) super.setFields(fields);
      }

      @Override
      public Authed setKey(java.lang.String key) {
        return (Authed) super.setKey(key);
      }

      @Override
      public Authed setOauthToken(java.lang.String oauthToken) {
        return (Authed) super.setOauthToken(oauthToken);
      }

      @Override
      public Authed setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Authed) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Authed setQuotaUser(java.lang.String quotaUser) {
        return (Authed) super.setQuotaUser(quotaUser);
      }

      @Override
      public Authed setUserIp(java.lang.String userIp) {
        return (Authed) super.setUserIp(userIp);
      }

      @Override
      public Authed set(String parameterName, Object value) {
        return (Authed) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "greetings.getGreeting".
     *
     * This request holds the parameters needed by the helloworld server.  After setting any optional
     * parameters, call the {@link GetGreeting#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public GetGreeting getGreeting(java.lang.Integer id) throws java.io.IOException {
      GetGreeting result = new GetGreeting(id);
      initialize(result);
      return result;
    }

    public class GetGreeting extends EccoDomaniIeriRequest<com.google.api.services.cloud.platform.EccoDomaniIeri.model.HelloGreeting> {

      private static final String REST_PATH = "hellogreeting/{id}";

      /**
       * Create a request for the method "greetings.getGreeting".
       *
       * This request holds the parameters needed by the the helloworld server.  After setting any
       * optional parameters, call the {@link GetGreeting#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetGreeting#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected GetGreeting(java.lang.Integer id) {
        super(EccoDomaniIeri.this, "GET", REST_PATH, null, com.google.api.services.cloud.platform.EccoDomaniIeri.model.HelloGreeting.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetGreeting setAlt(java.lang.String alt) {
        return (GetGreeting) super.setAlt(alt);
      }

      @Override
      public GetGreeting setFields(java.lang.String fields) {
        return (GetGreeting) super.setFields(fields);
      }

      @Override
      public GetGreeting setKey(java.lang.String key) {
        return (GetGreeting) super.setKey(key);
      }

      @Override
      public GetGreeting setOauthToken(java.lang.String oauthToken) {
        return (GetGreeting) super.setOauthToken(oauthToken);
      }

      @Override
      public GetGreeting setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetGreeting) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetGreeting setQuotaUser(java.lang.String quotaUser) {
        return (GetGreeting) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetGreeting setUserIp(java.lang.String userIp) {
        return (GetGreeting) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer id;

      /**

       */
      public java.lang.Integer getId() {
        return id;
      }

      public GetGreeting setId(java.lang.Integer id) {
        this.id = id;
        return this;
      }

      @Override
      public GetGreeting set(String parameterName, Object value) {
        return (GetGreeting) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "greetings.listGreeting".
     *
     * This request holds the parameters needed by the helloworld server.  After setting any optional
     * parameters, call the {@link ListGreeting#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public ListGreeting listGreeting() throws java.io.IOException {
      ListGreeting result = new ListGreeting();
      initialize(result);
      return result;
    }

    public class ListGreeting extends EccoDomaniIeriRequest<com.google.api.services.cloud.platform.EccoDomaniIeri.model.HelloGreetingCollection> {

      private static final String REST_PATH = "hellogreeting";

      /**
       * Create a request for the method "greetings.listGreeting".
       *
       * This request holds the parameters needed by the the helloworld server.  After setting any
       * optional parameters, call the {@link ListGreeting#execute()} method to invoke the remote
       * operation. <p> {@link
       * ListGreeting#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected ListGreeting() {
        super(EccoDomaniIeri.this, "GET", REST_PATH, null, com.google.api.services.cloud.platform.EccoDomaniIeri.model.HelloGreetingCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public ListGreeting setAlt(java.lang.String alt) {
        return (ListGreeting) super.setAlt(alt);
      }

      @Override
      public ListGreeting setFields(java.lang.String fields) {
        return (ListGreeting) super.setFields(fields);
      }

      @Override
      public ListGreeting setKey(java.lang.String key) {
        return (ListGreeting) super.setKey(key);
      }

      @Override
      public ListGreeting setOauthToken(java.lang.String oauthToken) {
        return (ListGreeting) super.setOauthToken(oauthToken);
      }

      @Override
      public ListGreeting setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ListGreeting) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ListGreeting setQuotaUser(java.lang.String quotaUser) {
        return (ListGreeting) super.setQuotaUser(quotaUser);
      }

      @Override
      public ListGreeting setUserIp(java.lang.String userIp) {
        return (ListGreeting) super.setUserIp(userIp);
      }

      @Override
      public ListGreeting set(String parameterName, Object value) {
        return (ListGreeting) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "greetings.multiply".
     *
     * This request holds the parameters needed by the helloworld server.  After setting any optional
     * parameters, call the {@link Multiply#execute()} method to invoke the remote operation.
     *
     * @param times
     * @param content the {@link com.google.api.services.cloud.platform.EccoDomaniIeri.model.HelloGreeting}
     * @return the request
     */
    public Multiply multiply(java.lang.Integer times, com.google.api.services.cloud.platform.EccoDomaniIeri.model.HelloGreeting content) throws java.io.IOException {
      Multiply result = new Multiply(times, content);
      initialize(result);
      return result;
    }

    public class Multiply extends EccoDomaniIeriRequest<com.google.api.services.cloud.platform.EccoDomaniIeri.model.HelloGreeting> {

      private static final String REST_PATH = "hellogreeting/{times}";

      /**
       * Create a request for the method "greetings.multiply".
       *
       * This request holds the parameters needed by the the helloworld server.  After setting any
       * optional parameters, call the {@link Multiply#execute()} method to invoke the remote operation.
       * <p> {@link
       * Multiply#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param times
       * @param content the {@link com.google.api.services.cloud.platform.EccoDomaniIeri.model.HelloGreeting}
       * @since 1.13
       */
      protected Multiply(java.lang.Integer times, com.google.api.services.cloud.platform.EccoDomaniIeri.model.HelloGreeting content) {
        super(EccoDomaniIeri.this, "POST", REST_PATH, content, com.google.api.services.cloud.platform.EccoDomaniIeri.model.HelloGreeting.class);
        this.times = com.google.api.client.util.Preconditions.checkNotNull(times, "Required parameter times must be specified.");
      }

      @Override
      public Multiply setAlt(java.lang.String alt) {
        return (Multiply) super.setAlt(alt);
      }

      @Override
      public Multiply setFields(java.lang.String fields) {
        return (Multiply) super.setFields(fields);
      }

      @Override
      public Multiply setKey(java.lang.String key) {
        return (Multiply) super.setKey(key);
      }

      @Override
      public Multiply setOauthToken(java.lang.String oauthToken) {
        return (Multiply) super.setOauthToken(oauthToken);
      }

      @Override
      public Multiply setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Multiply) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Multiply setQuotaUser(java.lang.String quotaUser) {
        return (Multiply) super.setQuotaUser(quotaUser);
      }

      @Override
      public Multiply setUserIp(java.lang.String userIp) {
        return (Multiply) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer times;

      /**

       */
      public java.lang.Integer getTimes() {
        return times;
      }

      public Multiply setTimes(java.lang.Integer times) {
        this.times = times;
        return this;
      }

      @Override
      public Multiply set(String parameterName, Object value) {
        return (Multiply) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link EccoDomaniIeri}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link EccoDomaniIeri}. */
    @Override
    public EccoDomaniIeri build() {
      return new EccoDomaniIeri(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link EccoDomaniIeriRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setEccoDomaniIeriRequestInitializer(
        EccoDomaniIeriRequestInitializer eccodomaniieriRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(eccodomaniieriRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
=== end: ./com/google/api/services/cloud/platform/EccoDomaniIeri/EccoDomaniIeri.java
=== begin: ./com/google/api/services/cloud/platform/EccoDomaniIeri/EccoDomaniIeriRequestInitializer.java
/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.cloud.platform.EccoDomaniIeri;

/**
 * EccoDomaniIeri request initializer for setting properties like key and userIp.
 *
 * <p>
 * The simplest usage is to use it to set the key parameter:
 * </p>
 *
 * <pre>
  public static final GoogleClientRequestInitializer KEY_INITIALIZER =
      new EccoDomaniIeriRequestInitializer(KEY);
 * </pre>
 *
 * <p>
 * There is also a constructor to set both the key and userIp parameters:
 * </p>
 *
 * <pre>
  public static final GoogleClientRequestInitializer INITIALIZER =
      new EccoDomaniIeriRequestInitializer(KEY, USER_IP);
 * </pre>
 *
 * <p>
 * If you want to implement custom logic, extend it like this:
 * </p>
 *
 * <pre>
  public static class MyRequestInitializer extends EccoDomaniIeriRequestInitializer {

    {@literal @}Override
    public void initializeEccoDomaniIeriRequest(EccoDomaniIeriRequest{@literal <}?{@literal >} request)
        throws IOException {
      // custom logic
    }
  }
 * </pre>
 *
 * <p>
 * Finally, to set the key and userIp parameters and insert custom logic, extend it like this:
 * </p>
 *
 * <pre>
  public static class MyRequestInitializer2 extends EccoDomaniIeriRequestInitializer {

    public MyKeyRequestInitializer() {
      super(KEY, USER_IP);
    }

    {@literal @}Override
    public void initializeEccoDomaniIeriRequest(EccoDomaniIeriRequest{@literal <}?{@literal >} request)
        throws IOException {
      // custom logic
    }
  }
 * </pre>
 *
 * <p>
 * Subclasses should be thread-safe.
 * </p>
 *
 * @since 1.12
 */
public class EccoDomaniIeriRequestInitializer extends com.google.api.client.googleapis.services.json.CommonGoogleJsonClientRequestInitializer {

  public EccoDomaniIeriRequestInitializer() {
    super();
  }

  /**
   * @param key API key or {@code null} to leave it unchanged
   */
  public EccoDomaniIeriRequestInitializer(String key) {
    super(key);
  }

  /**
   * @param key API key or {@code null} to leave it unchanged
   * @param userIp user IP or {@code null} to leave it unchanged
   */
  public EccoDomaniIeriRequestInitializer(String key, String userIp) {
    super(key, userIp);
  }

  @Override
  public final void initializeJsonRequest(com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest<?> request) throws java.io.IOException {
    super.initializeJsonRequest(request);
    initializeEccoDomaniIeriRequest((EccoDomaniIeriRequest<?>) request);
  }

  /**
   * Initializes EccoDomaniIeri request.
   *
   * <p>
   * Default implementation does nothing. Called from
   * {@link #initializeJsonRequest(com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest)}.
   * </p>
   *
   * @throws java.io.IOException I/O exception
   */
  protected void initializeEccoDomaniIeriRequest(EccoDomaniIeriRequest<?> request) throws java.io.IOException {
  }
}
=== end: ./com/google/api/services/cloud/platform/EccoDomaniIeri/EccoDomaniIeriRequestInitializer.java
=== begin: ./com/google/api/services/cloud/platform/EccoDomaniIeri/EccoDomaniIeriRequest.java
/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.cloud.platform.EccoDomaniIeri;

/**
 * EccoDomaniIeri request.
 *
 * @since 1.3
 */
@SuppressWarnings("javadoc")
public abstract class EccoDomaniIeriRequest<T> extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest<T> {

  /**
   * @param client Google client
   * @param method HTTP Method
   * @param uriTemplate URI template for the path relative to the base URL. If it starts with a "/"
   *        the base path from the base URL will be stripped out. The URI template can also be a
   *        full URL. URI template expansion is done using
   *        {@link com.google.api.client.http.UriTemplate#expand(String, String, Object, boolean)}
   * @param content A POJO that can be serialized into JSON or {@code null} for none
   * @param responseClass response class to parse into
   */
  public EccoDomaniIeriRequest(
      EccoDomaniIeri client, String method, String uriTemplate, Object content, Class<T> responseClass) {
    super(
        client,
        method,
        uriTemplate,
        content,
        responseClass);
  }

  /** Data format for the response. */
  @com.google.api.client.util.Key
  private java.lang.String alt;

  /**
   * Data format for the response. [default: json]
   */
  public java.lang.String getAlt() {
    return alt;
  }

  /** Data format for the response. */
  public EccoDomaniIeriRequest<T> setAlt(java.lang.String alt) {
    this.alt = alt;
    return this;
  }

  /** Selector specifying which fields to include in a partial response. */
  @com.google.api.client.util.Key
  private java.lang.String fields;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  public java.lang.String getFields() {
    return fields;
  }

  /** Selector specifying which fields to include in a partial response. */
  public EccoDomaniIeriRequest<T> setFields(java.lang.String fields) {
    this.fields = fields;
    return this;
  }

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and
   * reports. Required unless you provide an OAuth 2.0 token.
   */
  @com.google.api.client.util.Key
  private java.lang.String key;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and
   * reports. Required unless you provide an OAuth 2.0 token.
   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and
   * reports. Required unless you provide an OAuth 2.0 token.
   */
  public EccoDomaniIeriRequest<T> setKey(java.lang.String key) {
    this.key = key;
    return this;
  }

  /** OAuth 2.0 token for the current user. */
  @com.google.api.client.util.Key("oauth_token")
  private java.lang.String oauthToken;

  /**
   * OAuth 2.0 token for the current user.
   */
  public java.lang.String getOauthToken() {
    return oauthToken;
  }

  /** OAuth 2.0 token for the current user. */
  public EccoDomaniIeriRequest<T> setOauthToken(java.lang.String oauthToken) {
    this.oauthToken = oauthToken;
    return this;
  }

  /** Returns response with indentations and line breaks. */
  @com.google.api.client.util.Key
  private java.lang.Boolean prettyPrint;

  /**
   * Returns response with indentations and line breaks. [default: true]
   */
  public java.lang.Boolean getPrettyPrint() {
    return prettyPrint;
  }

  /** Returns response with indentations and line breaks. */
  public EccoDomaniIeriRequest<T> setPrettyPrint(java.lang.Boolean prettyPrint) {
    this.prettyPrint = prettyPrint;
    return this;
  }

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string
   * assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
   */
  @com.google.api.client.util.Key
  private java.lang.String quotaUser;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string
   * assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
   */
  public java.lang.String getQuotaUser() {
    return quotaUser;
  }

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string
   * assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.
   */
  public EccoDomaniIeriRequest<T> setQuotaUser(java.lang.String quotaUser) {
    this.quotaUser = quotaUser;
    return this;
  }

  /**
   * IP address of the site where the request originates. Use this if you want to enforce per-user
   * limits.
   */
  @com.google.api.client.util.Key
  private java.lang.String userIp;

  /**
   * IP address of the site where the request originates. Use this if you want to enforce per-user
   * limits.
   */
  public java.lang.String getUserIp() {
    return userIp;
  }

  /**
   * IP address of the site where the request originates. Use this if you want to enforce per-user
   * limits.
   */
  public EccoDomaniIeriRequest<T> setUserIp(java.lang.String userIp) {
    this.userIp = userIp;
    return this;
  }

  @Override
  public final EccoDomaniIeri getAbstractGoogleClient() {
    return (EccoDomaniIeri) super.getAbstractGoogleClient();
  }

  @Override
  public EccoDomaniIeriRequest<T> setDisableGZipContent(boolean disableGZipContent) {
    return (EccoDomaniIeriRequest<T>) super.setDisableGZipContent(disableGZipContent);
  }

  @Override
  public EccoDomaniIeriRequest<T> setRequestHeaders(com.google.api.client.http.HttpHeaders headers) {
    return (EccoDomaniIeriRequest<T>) super.setRequestHeaders(headers);
  }

  @Override
  public EccoDomaniIeriRequest<T> set(String parameterName, Object value) {
    return (EccoDomaniIeriRequest<T>) super.set(parameterName, value);
  }
}
=== end: ./com/google/api/services/cloud/platform/EccoDomaniIeri/EccoDomaniIeriRequest.java
=== begin: ./com/google/api/services/cloud/platform/EccoDomaniIeri/EccoDomaniIeriScopes.java
/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.cloud.platform.EccoDomaniIeri;

/**
 * Available OAuth 2.0 scopes for use with the Schmecken Sie Gut.
 *
 * @since 1.4
 */
public class EccoDomaniIeriScopes {

  /** View your email address. */
  public static final String USERINFO_EMAIL = "https://www.googleapis.com/auth/userinfo.email";

  /**
   * Returns an unmodifiable set that contains all scopes declared by this class.
   *
   * @since 1.16
   */
  public static java.util.Set<String> all() {
    java.util.Set<String> set = new java.util.HashSet<String>();
    set.add(USERINFO_EMAIL);
    return java.util.Collections.unmodifiableSet(set);
  }

  private EccoDomaniIeriScopes() {
  }
}
=== end: ./com/google/api/services/cloud/platform/EccoDomaniIeri/EccoDomaniIeriScopes.java
=== begin: ./com/google/api/services/cloud/platform/EccoDomaniIeri/model/HelloGreetingCollection.java
/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.cloud.platform.EccoDomaniIeri.model;

/**
 * Collection of Greetings.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Schmecken Sie Gut. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HelloGreetingCollection extends com.google.api.client.json.GenericJson {

  /**
   * Greeting that stores a message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<HelloGreeting> items;

  static {
    // hack to force ProGuard to consider HelloGreeting used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(HelloGreeting.class);
  }

  /**
   * Greeting that stores a message.
   * @return value or {@code null} for none
   */
  public java.util.List<HelloGreeting> getItems() {
    return items;
  }

  /**
   * Greeting that stores a message.
   * @param items items or {@code null} for none
   */
  public HelloGreetingCollection setItems(java.util.List<HelloGreeting> items) {
    this.items = items;
    return this;
  }

  @Override
  public HelloGreetingCollection set(String fieldName, Object value) {
    return (HelloGreetingCollection) super.set(fieldName, value);
  }

  @Override
  public HelloGreetingCollection clone() {
    return (HelloGreetingCollection) super.clone();
  }

}
=== end: ./com/google/api/services/cloud/platform/EccoDomaniIeri/model/HelloGreetingCollection.java
=== begin: ./com/google/api/services/cloud/platform/EccoDomaniIeri/model/HelloGreeting.java
/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.cloud.platform.EccoDomaniIeri.model;

/**
 * Greeting that stores a message.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Schmecken Sie Gut. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HelloGreeting extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String message;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getMessage() {
    return message;
  }

  /**
   * @param message message or {@code null} for none
   */
  public HelloGreeting setMessage(java.lang.String message) {
    this.message = message;
    return this;
  }

  @Override
  public HelloGreeting set(String fieldName, Object value) {
    return (HelloGreeting) super.set(fieldName, value);
  }

  @Override
  public HelloGreeting clone() {
    return (HelloGreeting) super.clone();
  }

}
=== end: ./com/google/api/services/cloud/platform/EccoDomaniIeri/model/HelloGreeting.java
=== begin: ./pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.sonatype.oss</groupId>
    <artifactId>oss-parent</artifactId>
    <version>7</version>
  </parent>

  <groupId>com.google.apis</groupId>
  <artifactId>google-api-services-cloud-platform-eccodomaniieri</artifactId>
  <version>v1-revsnapshot-1.22.0-SNAPSHOT</version>
  <name>Schmecken Sie Gut v1-revsnapshot-1.22.0-SNAPSHOT</name>
  <packaging>jar</packaging>

  <inceptionYear>2011</inceptionYear>

  <organization>
    <name>Google</name>
    <url>http://www.google.com/</url>
  </organization>

  <licenses>
    <license>
      <name>The Apache Software License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
          <source>1.5</source>
          <target>1.5</target>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.3.1</version>
        <configuration>
          <archive>
            <manifestEntries>
              <Built-By>Google</Built-By>
              <Build-Jdk>1.6.x</Build-Jdk>
            </manifestEntries>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <doctitle>Schmecken Sie Gut ${project.version}</doctitle>
          <windowtitle>Schmecken Sie Gut ${project.version}</windowtitle>
          <links>
            <link>http://docs.oracle.com/javase/7/docs/api</link>
          
            <link>http://javadoc.google-http-java-client.googlecode.com/hg/1.22.0-SNAPSHOT</link>
          
            <link>http://javadoc.google-oauth-java-client.googlecode.com/hg/1.22.0-SNAPSHOT</link>
          
            <link>http://javadoc.google-api-java-client.googlecode.com/hg/1.22.0-SNAPSHOT</link>
          </links>
        </configuration>
      </plugin>
    </plugins>
    <sourceDirectory>.</sourceDirectory>
  </build>

  <dependencies>
    <dependency>
      <groupId>com.google.api-client</groupId>
      <artifactId>google-api-client</artifactId>
      <version>1.22.0-SNAPSHOT</version>
    </dependency>
  </dependencies>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
</project>=== end: ./pom.xml
