/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * SimpleSecretProto (in authenticator.proto) and SimpleSecretHolderProto (below) share the notion
 * of a "label", which identifies a particular secret without (hopefully) revealing the secret. Note
 * that a SimpleSecretLabel only disambiguates between secrets used to get access to some particular
 * object. Two different secrets that apply to two different objects could have the same label. For
 * example, in the common sharing model, each object has no more than one "auth key". Therefore, the
 * label for an auth key simply has type = AUTH_KEY with no additional information. In theory, we
 * could add some sort of resource ID to SimpleSecretLabel to make it more explicit. However, in
 * practice, this is never really needed. A SimpleSecret for one object is never used to authorize a
 * request on some other object, so there is no ambiguity. Also, since SimpleSecrets must obviously
 * be unguessable, there is no risk that a SimpleSecret intended for one object will accidentally
 * grant access to another.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SecurityCredentialsSimpleSecretLabelProto extends com.google.api.client.json.GenericJson {

  /**
   * ***DEPRECATED (3-Oct-2011) *** This field should be deleted when code stops using CAP_TOKEN
   * labels. Used when type = CAP_TOKEN. When a CAP_TOKEN label appears in a SimpleSecretHolder
   * Principal, |capability_id| must be filled in to identify one of the capabilities on the ACL.
   * When a CAP_TOKEN label appears in a SimpleSecret Authenticator, it is NOT necessary to fill in
   * |capability_id| -- ACL Service will find the ID by searching all capabilities on the ACL for
   * one associated with the token given by the SimpleSecret's secret data. If |capability_id| is
   * specified, though, then the Authenticator will only be accepted if it actually matches that
   * particular token ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer capabilityId;

  /**
   * Used when type = GENERIC_SECRET
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String genericLabel;

  /**
   * Used when type == INVITE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long inviteId;

  /**
   * This is optional because required enums cannot be extended.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * ***DEPRECATED (3-Oct-2011) *** This field should be deleted when code stops using CAP_TOKEN
   * labels. Used when type = CAP_TOKEN. When a CAP_TOKEN label appears in a SimpleSecretHolder
   * Principal, |capability_id| must be filled in to identify one of the capabilities on the ACL.
   * When a CAP_TOKEN label appears in a SimpleSecret Authenticator, it is NOT necessary to fill in
   * |capability_id| -- ACL Service will find the ID by searching all capabilities on the ACL for
   * one associated with the token given by the SimpleSecret's secret data. If |capability_id| is
   * specified, though, then the Authenticator will only be accepted if it actually matches that
   * particular token ID.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCapabilityId() {
    return capabilityId;
  }

  /**
   * ***DEPRECATED (3-Oct-2011) *** This field should be deleted when code stops using CAP_TOKEN
   * labels. Used when type = CAP_TOKEN. When a CAP_TOKEN label appears in a SimpleSecretHolder
   * Principal, |capability_id| must be filled in to identify one of the capabilities on the ACL.
   * When a CAP_TOKEN label appears in a SimpleSecret Authenticator, it is NOT necessary to fill in
   * |capability_id| -- ACL Service will find the ID by searching all capabilities on the ACL for
   * one associated with the token given by the SimpleSecret's secret data. If |capability_id| is
   * specified, though, then the Authenticator will only be accepted if it actually matches that
   * particular token ID.
   * @param capabilityId capabilityId or {@code null} for none
   */
  public SecurityCredentialsSimpleSecretLabelProto setCapabilityId(java.lang.Integer capabilityId) {
    this.capabilityId = capabilityId;
    return this;
  }

  /**
   * Used when type = GENERIC_SECRET
   * @see #decodeGenericLabel()
   * @return value or {@code null} for none
   */
  public java.lang.String getGenericLabel() {
    return genericLabel;
  }

  /**
   * Used when type = GENERIC_SECRET
   * @see #getGenericLabel()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeGenericLabel() {
    return com.google.api.client.util.Base64.decodeBase64(genericLabel);
  }

  /**
   * Used when type = GENERIC_SECRET
   * @see #encodeGenericLabel()
   * @param genericLabel genericLabel or {@code null} for none
   */
  public SecurityCredentialsSimpleSecretLabelProto setGenericLabel(java.lang.String genericLabel) {
    this.genericLabel = genericLabel;
    return this;
  }

  /**
   * Used when type = GENERIC_SECRET
   * @see #setGenericLabel()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public SecurityCredentialsSimpleSecretLabelProto encodeGenericLabel(byte[] genericLabel) {
    this.genericLabel = com.google.api.client.util.Base64.encodeBase64URLSafeString(genericLabel);
    return this;
  }

  /**
   * Used when type == INVITE.
   * @return value or {@code null} for none
   */
  public java.lang.Long getInviteId() {
    return inviteId;
  }

  /**
   * Used when type == INVITE.
   * @param inviteId inviteId or {@code null} for none
   */
  public SecurityCredentialsSimpleSecretLabelProto setInviteId(java.lang.Long inviteId) {
    this.inviteId = inviteId;
    return this;
  }

  /**
   * This is optional because required enums cannot be extended.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * This is optional because required enums cannot be extended.
   * @param type type or {@code null} for none
   */
  public SecurityCredentialsSimpleSecretLabelProto setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  @Override
  public SecurityCredentialsSimpleSecretLabelProto set(String fieldName, Object value) {
    return (SecurityCredentialsSimpleSecretLabelProto) super.set(fieldName, value);
  }

  @Override
  public SecurityCredentialsSimpleSecretLabelProto clone() {
    return (SecurityCredentialsSimpleSecretLabelProto) super.clone();
  }

}
