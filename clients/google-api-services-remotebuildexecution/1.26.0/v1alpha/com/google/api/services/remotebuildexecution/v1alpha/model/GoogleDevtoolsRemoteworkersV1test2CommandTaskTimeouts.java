/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.remotebuildexecution.v1alpha.model;

/**
 * Describes the timeouts associated with this task.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Remote Build Execution API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts extends com.google.api.client.json.GenericJson {

  /**
   * This specifies the maximum time that the task can run, excluding the time required to download
   * inputs or upload outputs. That is, the worker will terminate the task if it runs longer than
   * this.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String execution;

  /**
   * This specifies the maximum amount of time the task can be idle - that is, go without generating
   * some output in either stdout or stderr. If the process is silent for more than the specified
   * time, the worker will terminate the task.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String idle;

  /**
   * If the execution or IO timeouts are exceeded, the worker will try to gracefully terminate the
   * task and return any existing logs. However, tasks may be hard-frozen in which case this process
   * will fail. This timeout specifies how long to wait for a terminated task to shut down
   * gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g. SIGKILL on *nix,
   * CTRL_BREAK_EVENT on Windows).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String shutdown;

  /**
   * This specifies the maximum time that the task can run, excluding the time required to download
   * inputs or upload outputs. That is, the worker will terminate the task if it runs longer than
   * this.
   * @return value or {@code null} for none
   */
  public String getExecution() {
    return execution;
  }

  /**
   * This specifies the maximum time that the task can run, excluding the time required to download
   * inputs or upload outputs. That is, the worker will terminate the task if it runs longer than
   * this.
   * @param execution execution or {@code null} for none
   */
  public GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts setExecution(String execution) {
    this.execution = execution;
    return this;
  }

  /**
   * This specifies the maximum amount of time the task can be idle - that is, go without generating
   * some output in either stdout or stderr. If the process is silent for more than the specified
   * time, the worker will terminate the task.
   * @return value or {@code null} for none
   */
  public String getIdle() {
    return idle;
  }

  /**
   * This specifies the maximum amount of time the task can be idle - that is, go without generating
   * some output in either stdout or stderr. If the process is silent for more than the specified
   * time, the worker will terminate the task.
   * @param idle idle or {@code null} for none
   */
  public GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts setIdle(String idle) {
    this.idle = idle;
    return this;
  }

  /**
   * If the execution or IO timeouts are exceeded, the worker will try to gracefully terminate the
   * task and return any existing logs. However, tasks may be hard-frozen in which case this process
   * will fail. This timeout specifies how long to wait for a terminated task to shut down
   * gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g. SIGKILL on *nix,
   * CTRL_BREAK_EVENT on Windows).
   * @return value or {@code null} for none
   */
  public String getShutdown() {
    return shutdown;
  }

  /**
   * If the execution or IO timeouts are exceeded, the worker will try to gracefully terminate the
   * task and return any existing logs. However, tasks may be hard-frozen in which case this process
   * will fail. This timeout specifies how long to wait for a terminated task to shut down
   * gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g. SIGKILL on *nix,
   * CTRL_BREAK_EVENT on Windows).
   * @param shutdown shutdown or {@code null} for none
   */
  public GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts setShutdown(String shutdown) {
    this.shutdown = shutdown;
    return this;
  }

  @Override
  public GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts set(String fieldName, Object value) {
    return (GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts) super.set(fieldName, value);
  }

  @Override
  public GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts clone() {
    return (GoogleDevtoolsRemoteworkersV1test2CommandTaskTimeouts) super.clone();
  }

}
