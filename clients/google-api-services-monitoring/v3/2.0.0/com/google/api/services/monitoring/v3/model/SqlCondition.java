/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.monitoring.v3.model;

/**
 * A condition that allows alerting policies to be defined using GoogleSQL. SQL conditions examine a
 * sliding window of logs using GoogleSQL. Alert policies with SQL conditions may incur additional
 * billing.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Monitoring API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SqlCondition extends com.google.api.client.json.GenericJson {

  /**
   * Test the boolean value in the indicated column.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BooleanTest booleanTest;

  /**
   * Schedule the query to execute every so many days.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Daily daily;

  /**
   * Schedule the query to execute every so many hours.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Hourly hourly;

  /**
   * Schedule the query to execute every so many minutes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Minutes minutes;

  /**
   * Required. The Log Analytics SQL query to run, as a string. The query must conform to the
   * required shape. Specifically, the query must not try to filter the input by time. A filter will
   * automatically be applied to filter the input so that the query receives all rows received since
   * the last time the query was run.For example, the following query extracts all log entries
   * containing an HTTP request: SELECT timestamp, log_name, severity, http_request, resource,
   * labels FROM my-project.global._Default._AllLogs WHERE http_request IS NOT NULL
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String query;

  /**
   * Test the row count against a threshold.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RowCountTest rowCountTest;

  /**
   * Test the boolean value in the indicated column.
   * @return value or {@code null} for none
   */
  public BooleanTest getBooleanTest() {
    return booleanTest;
  }

  /**
   * Test the boolean value in the indicated column.
   * @param booleanTest booleanTest or {@code null} for none
   */
  public SqlCondition setBooleanTest(BooleanTest booleanTest) {
    this.booleanTest = booleanTest;
    return this;
  }

  /**
   * Schedule the query to execute every so many days.
   * @return value or {@code null} for none
   */
  public Daily getDaily() {
    return daily;
  }

  /**
   * Schedule the query to execute every so many days.
   * @param daily daily or {@code null} for none
   */
  public SqlCondition setDaily(Daily daily) {
    this.daily = daily;
    return this;
  }

  /**
   * Schedule the query to execute every so many hours.
   * @return value or {@code null} for none
   */
  public Hourly getHourly() {
    return hourly;
  }

  /**
   * Schedule the query to execute every so many hours.
   * @param hourly hourly or {@code null} for none
   */
  public SqlCondition setHourly(Hourly hourly) {
    this.hourly = hourly;
    return this;
  }

  /**
   * Schedule the query to execute every so many minutes.
   * @return value or {@code null} for none
   */
  public Minutes getMinutes() {
    return minutes;
  }

  /**
   * Schedule the query to execute every so many minutes.
   * @param minutes minutes or {@code null} for none
   */
  public SqlCondition setMinutes(Minutes minutes) {
    this.minutes = minutes;
    return this;
  }

  /**
   * Required. The Log Analytics SQL query to run, as a string. The query must conform to the
   * required shape. Specifically, the query must not try to filter the input by time. A filter will
   * automatically be applied to filter the input so that the query receives all rows received since
   * the last time the query was run.For example, the following query extracts all log entries
   * containing an HTTP request: SELECT timestamp, log_name, severity, http_request, resource,
   * labels FROM my-project.global._Default._AllLogs WHERE http_request IS NOT NULL
   * @return value or {@code null} for none
   */
  public java.lang.String getQuery() {
    return query;
  }

  /**
   * Required. The Log Analytics SQL query to run, as a string. The query must conform to the
   * required shape. Specifically, the query must not try to filter the input by time. A filter will
   * automatically be applied to filter the input so that the query receives all rows received since
   * the last time the query was run.For example, the following query extracts all log entries
   * containing an HTTP request: SELECT timestamp, log_name, severity, http_request, resource,
   * labels FROM my-project.global._Default._AllLogs WHERE http_request IS NOT NULL
   * @param query query or {@code null} for none
   */
  public SqlCondition setQuery(java.lang.String query) {
    this.query = query;
    return this;
  }

  /**
   * Test the row count against a threshold.
   * @return value or {@code null} for none
   */
  public RowCountTest getRowCountTest() {
    return rowCountTest;
  }

  /**
   * Test the row count against a threshold.
   * @param rowCountTest rowCountTest or {@code null} for none
   */
  public SqlCondition setRowCountTest(RowCountTest rowCountTest) {
    this.rowCountTest = rowCountTest;
    return this;
  }

  @Override
  public SqlCondition set(String fieldName, Object value) {
    return (SqlCondition) super.set(fieldName, value);
  }

  @Override
  public SqlCondition clone() {
    return (SqlCondition) super.clone();
  }

}
