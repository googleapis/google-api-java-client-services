/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Alternate names are some urls that we would like to associate with documents in addition to
 * canonicals. Sometimes we may want to serve these alternatenames instead of canonicals. Alternames
 * in CompositeDoc should come from WebMirror pipeline.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CompositeDocAlternateName extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Url")
  private java.lang.String url;

  /**
   * See webutil/urlencoding
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("UrlEncoding")
  private java.lang.Integer urlEncoding;

  /**
   * Fp96 of webmirror equivalence class as of last time this was exported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ecnFp;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getUrl() {
    return url;
  }

  /**
   * @param url url or {@code null} for none
   */
  public CompositeDocAlternateName setUrl(java.lang.String url) {
    this.url = url;
    return this;
  }

  /**
   * See webutil/urlencoding
   * @return value or {@code null} for none
   */
  public java.lang.Integer getUrlEncoding() {
    return urlEncoding;
  }

  /**
   * See webutil/urlencoding
   * @param urlEncoding urlEncoding or {@code null} for none
   */
  public CompositeDocAlternateName setUrlEncoding(java.lang.Integer urlEncoding) {
    this.urlEncoding = urlEncoding;
    return this;
  }

  /**
   * Fp96 of webmirror equivalence class as of last time this was exported.
   * @see #decodeEcnFp()
   * @return value or {@code null} for none
   */
  public java.lang.String getEcnFp() {
    return ecnFp;
  }

  /**
   * Fp96 of webmirror equivalence class as of last time this was exported.
   * @see #getEcnFp()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeEcnFp() {
    return com.google.api.client.util.Base64.decodeBase64(ecnFp);
  }

  /**
   * Fp96 of webmirror equivalence class as of last time this was exported.
   * @see #encodeEcnFp()
   * @param ecnFp ecnFp or {@code null} for none
   */
  public CompositeDocAlternateName setEcnFp(java.lang.String ecnFp) {
    this.ecnFp = ecnFp;
    return this;
  }

  /**
   * Fp96 of webmirror equivalence class as of last time this was exported.
   * @see #setEcnFp()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public CompositeDocAlternateName encodeEcnFp(byte[] ecnFp) {
    this.ecnFp = com.google.api.client.util.Base64.encodeBase64URLSafeString(ecnFp);
    return this;
  }

  @Override
  public CompositeDocAlternateName set(String fieldName, Object value) {
    return (CompositeDocAlternateName) super.set(fieldName, value);
  }

  @Override
  public CompositeDocAlternateName clone() {
    return (CompositeDocAlternateName) super.clone();
  }

}
