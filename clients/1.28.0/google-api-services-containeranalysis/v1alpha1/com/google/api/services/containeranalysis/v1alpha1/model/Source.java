/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.containeranalysis.v1alpha1.model;

/**
 * Source describes the location of the source used for the build.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Container Analysis API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Source extends com.google.api.client.json.GenericJson {

  /**
   * If provided, some of the source code used for the build may be found in these locations, in the
   * case where the source repository had multiple remotes or submodules. This list will not include
   * the context specified in the context field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleDevtoolsContaineranalysisV1alpha1SourceContext> additionalContexts;

  static {
    // hack to force ProGuard to consider GoogleDevtoolsContaineranalysisV1alpha1SourceContext used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleDevtoolsContaineranalysisV1alpha1SourceContext.class);
  }

  /**
   * If provided, the input binary artifacts for the build came from this location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private StorageSource artifactStorageSource;

  /**
   * If provided, the source code used for the build came from this location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleDevtoolsContaineranalysisV1alpha1SourceContext context;

  /**
   * Hash(es) of the build source, which can be used to verify that the original source integrity
   * was maintained in the build.
   *
   * The keys to this map are file paths used as build source and the values contain the hash values
   * for those files.
   *
   * If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash
   * will be for the single path to that file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, FileHashes> fileHashes;

  static {
    // hack to force ProGuard to consider FileHashes used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(FileHashes.class);
  }

  /**
   * If provided, get source from this location in a Cloud Repo.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private RepoSource repoSource;

  /**
   * If provided, get the source from this location in in Google Cloud Storage.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private StorageSource storageSource;

  /**
   * If provided, some of the source code used for the build may be found in these locations, in the
   * case where the source repository had multiple remotes or submodules. This list will not include
   * the context specified in the context field.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleDevtoolsContaineranalysisV1alpha1SourceContext> getAdditionalContexts() {
    return additionalContexts;
  }

  /**
   * If provided, some of the source code used for the build may be found in these locations, in the
   * case where the source repository had multiple remotes or submodules. This list will not include
   * the context specified in the context field.
   * @param additionalContexts additionalContexts or {@code null} for none
   */
  public Source setAdditionalContexts(java.util.List<GoogleDevtoolsContaineranalysisV1alpha1SourceContext> additionalContexts) {
    this.additionalContexts = additionalContexts;
    return this;
  }

  /**
   * If provided, the input binary artifacts for the build came from this location.
   * @return value or {@code null} for none
   */
  public StorageSource getArtifactStorageSource() {
    return artifactStorageSource;
  }

  /**
   * If provided, the input binary artifacts for the build came from this location.
   * @param artifactStorageSource artifactStorageSource or {@code null} for none
   */
  public Source setArtifactStorageSource(StorageSource artifactStorageSource) {
    this.artifactStorageSource = artifactStorageSource;
    return this;
  }

  /**
   * If provided, the source code used for the build came from this location.
   * @return value or {@code null} for none
   */
  public GoogleDevtoolsContaineranalysisV1alpha1SourceContext getContext() {
    return context;
  }

  /**
   * If provided, the source code used for the build came from this location.
   * @param context context or {@code null} for none
   */
  public Source setContext(GoogleDevtoolsContaineranalysisV1alpha1SourceContext context) {
    this.context = context;
    return this;
  }

  /**
   * Hash(es) of the build source, which can be used to verify that the original source integrity
   * was maintained in the build.
   *
   * The keys to this map are file paths used as build source and the values contain the hash values
   * for those files.
   *
   * If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash
   * will be for the single path to that file.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, FileHashes> getFileHashes() {
    return fileHashes;
  }

  /**
   * Hash(es) of the build source, which can be used to verify that the original source integrity
   * was maintained in the build.
   *
   * The keys to this map are file paths used as build source and the values contain the hash values
   * for those files.
   *
   * If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash
   * will be for the single path to that file.
   * @param fileHashes fileHashes or {@code null} for none
   */
  public Source setFileHashes(java.util.Map<String, FileHashes> fileHashes) {
    this.fileHashes = fileHashes;
    return this;
  }

  /**
   * If provided, get source from this location in a Cloud Repo.
   * @return value or {@code null} for none
   */
  public RepoSource getRepoSource() {
    return repoSource;
  }

  /**
   * If provided, get source from this location in a Cloud Repo.
   * @param repoSource repoSource or {@code null} for none
   */
  public Source setRepoSource(RepoSource repoSource) {
    this.repoSource = repoSource;
    return this;
  }

  /**
   * If provided, get the source from this location in in Google Cloud Storage.
   * @return value or {@code null} for none
   */
  public StorageSource getStorageSource() {
    return storageSource;
  }

  /**
   * If provided, get the source from this location in in Google Cloud Storage.
   * @param storageSource storageSource or {@code null} for none
   */
  public Source setStorageSource(StorageSource storageSource) {
    this.storageSource = storageSource;
    return this;
  }

  @Override
  public Source set(String fieldName, Object value) {
    return (Source) super.set(fieldName, value);
  }

  @Override
  public Source clone() {
    return (Source) super.clone();
  }

}
