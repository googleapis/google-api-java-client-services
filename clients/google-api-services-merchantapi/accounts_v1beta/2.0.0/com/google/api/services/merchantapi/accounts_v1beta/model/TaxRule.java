/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.merchantapi.accounts_v1beta.model;

/**
 * Primary type convension percent micro : 100% = 1 000 000 and 1% = 10 000 cannot be negative.
 * Information about tax nexus and related parameters applicable to orders delivered to the area
 * covered by a single tax admin. Nexus is created when a merchant is doing business in an area
 * administered by tax admin (only US states are supported for nexus configuration). If merchant has
 * nexus in a US state, merchant needs to pay tax to all tax authorities associated with the
 * shipping destination. Next Id : 8
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Merchant API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TaxRule extends com.google.api.client.json.GenericJson {

  /**
   * Required. Time period when this rule is effective. If the duration is missing from
   * effective_time listed, then it is open ended to the future. The start of this time period is
   * inclusive, and the end is exclusive.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Interval effectiveTimePeriod;

  /**
   * The admin_id or criteria_id of the region in which this rule is applicable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long locationId;

  /**
   * The range of postal codes in which this rule is applicable.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TaxPostalCodeRange postCodeRange;

  /**
   * Region code in which this rule is applicable
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String regionCode;

  /**
   * A fixed rate specified in micros, where 100% = 1_000_000. Suitable for origin-based states.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long selfSpecifiedRateMicros;

  /**
   * If set, shipping charge is taxed (at the same rate as product) when delivering to this admin's
   * area. Can only be set on US states without category.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean shippingTaxed;

  /**
   * Rate that depends on delivery location: if merchant has a nexus in corresponding US state,
   * rates from authorities with jurisdiction over delivery area are added up.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean useGoogleRate;

  /**
   * Required. Time period when this rule is effective. If the duration is missing from
   * effective_time listed, then it is open ended to the future. The start of this time period is
   * inclusive, and the end is exclusive.
   * @return value or {@code null} for none
   */
  public Interval getEffectiveTimePeriod() {
    return effectiveTimePeriod;
  }

  /**
   * Required. Time period when this rule is effective. If the duration is missing from
   * effective_time listed, then it is open ended to the future. The start of this time period is
   * inclusive, and the end is exclusive.
   * @param effectiveTimePeriod effectiveTimePeriod or {@code null} for none
   */
  public TaxRule setEffectiveTimePeriod(Interval effectiveTimePeriod) {
    this.effectiveTimePeriod = effectiveTimePeriod;
    return this;
  }

  /**
   * The admin_id or criteria_id of the region in which this rule is applicable.
   * @return value or {@code null} for none
   */
  public java.lang.Long getLocationId() {
    return locationId;
  }

  /**
   * The admin_id or criteria_id of the region in which this rule is applicable.
   * @param locationId locationId or {@code null} for none
   */
  public TaxRule setLocationId(java.lang.Long locationId) {
    this.locationId = locationId;
    return this;
  }

  /**
   * The range of postal codes in which this rule is applicable.
   * @return value or {@code null} for none
   */
  public TaxPostalCodeRange getPostCodeRange() {
    return postCodeRange;
  }

  /**
   * The range of postal codes in which this rule is applicable.
   * @param postCodeRange postCodeRange or {@code null} for none
   */
  public TaxRule setPostCodeRange(TaxPostalCodeRange postCodeRange) {
    this.postCodeRange = postCodeRange;
    return this;
  }

  /**
   * Region code in which this rule is applicable
   * @return value or {@code null} for none
   */
  public java.lang.String getRegionCode() {
    return regionCode;
  }

  /**
   * Region code in which this rule is applicable
   * @param regionCode regionCode or {@code null} for none
   */
  public TaxRule setRegionCode(java.lang.String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * A fixed rate specified in micros, where 100% = 1_000_000. Suitable for origin-based states.
   * @return value or {@code null} for none
   */
  public java.lang.Long getSelfSpecifiedRateMicros() {
    return selfSpecifiedRateMicros;
  }

  /**
   * A fixed rate specified in micros, where 100% = 1_000_000. Suitable for origin-based states.
   * @param selfSpecifiedRateMicros selfSpecifiedRateMicros or {@code null} for none
   */
  public TaxRule setSelfSpecifiedRateMicros(java.lang.Long selfSpecifiedRateMicros) {
    this.selfSpecifiedRateMicros = selfSpecifiedRateMicros;
    return this;
  }

  /**
   * If set, shipping charge is taxed (at the same rate as product) when delivering to this admin's
   * area. Can only be set on US states without category.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getShippingTaxed() {
    return shippingTaxed;
  }

  /**
   * If set, shipping charge is taxed (at the same rate as product) when delivering to this admin's
   * area. Can only be set on US states without category.
   * @param shippingTaxed shippingTaxed or {@code null} for none
   */
  public TaxRule setShippingTaxed(java.lang.Boolean shippingTaxed) {
    this.shippingTaxed = shippingTaxed;
    return this;
  }

  /**
   * Rate that depends on delivery location: if merchant has a nexus in corresponding US state,
   * rates from authorities with jurisdiction over delivery area are added up.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUseGoogleRate() {
    return useGoogleRate;
  }

  /**
   * Rate that depends on delivery location: if merchant has a nexus in corresponding US state,
   * rates from authorities with jurisdiction over delivery area are added up.
   * @param useGoogleRate useGoogleRate or {@code null} for none
   */
  public TaxRule setUseGoogleRate(java.lang.Boolean useGoogleRate) {
    this.useGoogleRate = useGoogleRate;
    return this;
  }

  @Override
  public TaxRule set(String fieldName, Object value) {
    return (TaxRule) super.set(fieldName, value);
  }

  @Override
  public TaxRule clone() {
    return (TaxRule) super.clone();
  }

}
