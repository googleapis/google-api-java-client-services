/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for PeoplestackFlexorgsProtoInternalExternal.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PeoplestackFlexorgsProtoInternalExternal extends com.google.api.client.json.GenericJson {

  /**
   * All evaluations are done within the context of a given application, e.g., "Gmail" and should
   * not be reused in other apps.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String application;

  /**
   * * There can be multiple states based on the context: 1. AUTOCOMPLETE + Gmail - context 1 2.
   * AUTOCOMPLETE + Chat/Dynamite - context 2 3. "SOME OTHER ACTION" + Gmail - context 3 A client
   * should identify whether a patrticular context is present in the list and only if one is found -
   * use the state that goes alogn with the context, otherwise the client should default to whatever
   * is the safe assumption about "internality/externality" the application should be making
   * (likely, consider everything not explicitly "internal" as "external").
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PeoplestackFlexorgsProtoInternalExternalStateStatus> stateStatus;

  /**
   * All evaluations are done within the context of a given application, e.g., "Gmail" and should
   * not be reused in other apps.
   * @return value or {@code null} for none
   */
  public java.lang.String getApplication() {
    return application;
  }

  /**
   * All evaluations are done within the context of a given application, e.g., "Gmail" and should
   * not be reused in other apps.
   * @param application application or {@code null} for none
   */
  public PeoplestackFlexorgsProtoInternalExternal setApplication(java.lang.String application) {
    this.application = application;
    return this;
  }

  /**
   * * There can be multiple states based on the context: 1. AUTOCOMPLETE + Gmail - context 1 2.
   * AUTOCOMPLETE + Chat/Dynamite - context 2 3. "SOME OTHER ACTION" + Gmail - context 3 A client
   * should identify whether a patrticular context is present in the list and only if one is found -
   * use the state that goes alogn with the context, otherwise the client should default to whatever
   * is the safe assumption about "internality/externality" the application should be making
   * (likely, consider everything not explicitly "internal" as "external").
   * @return value or {@code null} for none
   */
  public java.util.List<PeoplestackFlexorgsProtoInternalExternalStateStatus> getStateStatus() {
    return stateStatus;
  }

  /**
   * * There can be multiple states based on the context: 1. AUTOCOMPLETE + Gmail - context 1 2.
   * AUTOCOMPLETE + Chat/Dynamite - context 2 3. "SOME OTHER ACTION" + Gmail - context 3 A client
   * should identify whether a patrticular context is present in the list and only if one is found -
   * use the state that goes alogn with the context, otherwise the client should default to whatever
   * is the safe assumption about "internality/externality" the application should be making
   * (likely, consider everything not explicitly "internal" as "external").
   * @param stateStatus stateStatus or {@code null} for none
   */
  public PeoplestackFlexorgsProtoInternalExternal setStateStatus(java.util.List<PeoplestackFlexorgsProtoInternalExternalStateStatus> stateStatus) {
    this.stateStatus = stateStatus;
    return this;
  }

  @Override
  public PeoplestackFlexorgsProtoInternalExternal set(String fieldName, Object value) {
    return (PeoplestackFlexorgsProtoInternalExternal) super.set(fieldName, value);
  }

  @Override
  public PeoplestackFlexorgsProtoInternalExternal clone() {
    return (PeoplestackFlexorgsProtoInternalExternal) super.clone();
  }

}
