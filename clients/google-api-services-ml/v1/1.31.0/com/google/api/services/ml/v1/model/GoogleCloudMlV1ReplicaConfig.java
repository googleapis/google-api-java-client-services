/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.ml.v1.model;

/**
 * Represents the configuration for a replica in a cluster.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the AI Platform Training & Prediction API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudMlV1ReplicaConfig extends com.google.api.client.json.GenericJson {

  /**
   * Represents the type and number of accelerators used by the replica. [Learn about restrictions
   * on accelerator configurations for training.](/ai-platform/training/docs/using-gpus#compute-
   * engine-machine-types-with-gpu)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudMlV1AcceleratorConfig acceleratorConfig;

  /**
   * Arguments to the entrypoint command. The following rules apply for container_command and
   * container_args: - If you do not supply command or args: The defaults defined in the Docker
   * image are used. - If you supply a command but no args: The default EntryPoint and the default
   * Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If
   * you supply only args: The default Entrypoint defined in the Docker image is run with the args
   * that you supplied. - If you supply a command and args: The default Entrypoint and the default
   * Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be
   * set if custom container image is not provided. Note that this field and [TrainingInput.args]
   * are mutually exclusive, i.e., both cannot be set at the same time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> containerArgs;

  /**
   * The command with which the replica's custom container is run. If provided, it will override
   * default ENTRYPOINT of the docker image. If not provided, the docker image's ENTRYPOINT is used.
   * It cannot be set if custom container image is not provided. Note that this field and
   * [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> containerCommand;

  /**
   * The Docker image to run on the replica. This image must be in Container Registry. Learn more
   * about [configuring custom containers](/ai-platform/training/docs/distributed-training-
   * containers).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String imageUri;

  /**
   * The AI Platform runtime version that includes a TensorFlow version matching the one used in the
   * custom container. This field is required if the replica is a TPU worker that uses a custom
   * container. Otherwise, do not specify this field. This must be a [runtime version that currently
   * supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note
   * that the version of TensorFlow included in a runtime version may differ from the numbering of
   * the runtime version itself, because it may have a different [patch
   * version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this
   * field, you must specify the runtime version (TensorFlow minor version). For example, if your
   * custom container runs TensorFlow `1.x.y`, specify `1.x`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String tpuTfVersion;

  /**
   * Represents the type and number of accelerators used by the replica. [Learn about restrictions
   * on accelerator configurations for training.](/ai-platform/training/docs/using-gpus#compute-
   * engine-machine-types-with-gpu)
   * @return value or {@code null} for none
   */
  public GoogleCloudMlV1AcceleratorConfig getAcceleratorConfig() {
    return acceleratorConfig;
  }

  /**
   * Represents the type and number of accelerators used by the replica. [Learn about restrictions
   * on accelerator configurations for training.](/ai-platform/training/docs/using-gpus#compute-
   * engine-machine-types-with-gpu)
   * @param acceleratorConfig acceleratorConfig or {@code null} for none
   */
  public GoogleCloudMlV1ReplicaConfig setAcceleratorConfig(GoogleCloudMlV1AcceleratorConfig acceleratorConfig) {
    this.acceleratorConfig = acceleratorConfig;
    return this;
  }

  /**
   * Arguments to the entrypoint command. The following rules apply for container_command and
   * container_args: - If you do not supply command or args: The defaults defined in the Docker
   * image are used. - If you supply a command but no args: The default EntryPoint and the default
   * Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If
   * you supply only args: The default Entrypoint defined in the Docker image is run with the args
   * that you supplied. - If you supply a command and args: The default Entrypoint and the default
   * Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be
   * set if custom container image is not provided. Note that this field and [TrainingInput.args]
   * are mutually exclusive, i.e., both cannot be set at the same time.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getContainerArgs() {
    return containerArgs;
  }

  /**
   * Arguments to the entrypoint command. The following rules apply for container_command and
   * container_args: - If you do not supply command or args: The defaults defined in the Docker
   * image are used. - If you supply a command but no args: The default EntryPoint and the default
   * Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If
   * you supply only args: The default Entrypoint defined in the Docker image is run with the args
   * that you supplied. - If you supply a command and args: The default Entrypoint and the default
   * Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be
   * set if custom container image is not provided. Note that this field and [TrainingInput.args]
   * are mutually exclusive, i.e., both cannot be set at the same time.
   * @param containerArgs containerArgs or {@code null} for none
   */
  public GoogleCloudMlV1ReplicaConfig setContainerArgs(java.util.List<java.lang.String> containerArgs) {
    this.containerArgs = containerArgs;
    return this;
  }

  /**
   * The command with which the replica's custom container is run. If provided, it will override
   * default ENTRYPOINT of the docker image. If not provided, the docker image's ENTRYPOINT is used.
   * It cannot be set if custom container image is not provided. Note that this field and
   * [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getContainerCommand() {
    return containerCommand;
  }

  /**
   * The command with which the replica's custom container is run. If provided, it will override
   * default ENTRYPOINT of the docker image. If not provided, the docker image's ENTRYPOINT is used.
   * It cannot be set if custom container image is not provided. Note that this field and
   * [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.
   * @param containerCommand containerCommand or {@code null} for none
   */
  public GoogleCloudMlV1ReplicaConfig setContainerCommand(java.util.List<java.lang.String> containerCommand) {
    this.containerCommand = containerCommand;
    return this;
  }

  /**
   * The Docker image to run on the replica. This image must be in Container Registry. Learn more
   * about [configuring custom containers](/ai-platform/training/docs/distributed-training-
   * containers).
   * @return value or {@code null} for none
   */
  public java.lang.String getImageUri() {
    return imageUri;
  }

  /**
   * The Docker image to run on the replica. This image must be in Container Registry. Learn more
   * about [configuring custom containers](/ai-platform/training/docs/distributed-training-
   * containers).
   * @param imageUri imageUri or {@code null} for none
   */
  public GoogleCloudMlV1ReplicaConfig setImageUri(java.lang.String imageUri) {
    this.imageUri = imageUri;
    return this;
  }

  /**
   * The AI Platform runtime version that includes a TensorFlow version matching the one used in the
   * custom container. This field is required if the replica is a TPU worker that uses a custom
   * container. Otherwise, do not specify this field. This must be a [runtime version that currently
   * supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note
   * that the version of TensorFlow included in a runtime version may differ from the numbering of
   * the runtime version itself, because it may have a different [patch
   * version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this
   * field, you must specify the runtime version (TensorFlow minor version). For example, if your
   * custom container runs TensorFlow `1.x.y`, specify `1.x`.
   * @return value or {@code null} for none
   */
  public java.lang.String getTpuTfVersion() {
    return tpuTfVersion;
  }

  /**
   * The AI Platform runtime version that includes a TensorFlow version matching the one used in the
   * custom container. This field is required if the replica is a TPU worker that uses a custom
   * container. Otherwise, do not specify this field. This must be a [runtime version that currently
   * supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note
   * that the version of TensorFlow included in a runtime version may differ from the numbering of
   * the runtime version itself, because it may have a different [patch
   * version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this
   * field, you must specify the runtime version (TensorFlow minor version). For example, if your
   * custom container runs TensorFlow `1.x.y`, specify `1.x`.
   * @param tpuTfVersion tpuTfVersion or {@code null} for none
   */
  public GoogleCloudMlV1ReplicaConfig setTpuTfVersion(java.lang.String tpuTfVersion) {
    this.tpuTfVersion = tpuTfVersion;
    return this;
  }

  @Override
  public GoogleCloudMlV1ReplicaConfig set(String fieldName, Object value) {
    return (GoogleCloudMlV1ReplicaConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudMlV1ReplicaConfig clone() {
    return (GoogleCloudMlV1ReplicaConfig) super.clone();
  }

}
