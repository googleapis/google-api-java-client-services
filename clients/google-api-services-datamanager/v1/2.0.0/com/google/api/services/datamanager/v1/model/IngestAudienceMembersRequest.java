/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datamanager.v1.model;

/**
 * Request to upload audience members to the provided destinations. Returns an
 * IngestAudienceMembersResponse.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Data Manager API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IngestAudienceMembersRequest extends com.google.api.client.json.GenericJson {

  /**
   * Required. The list of users to send to the specified destinations. At most 10000 AudienceMember
   * resources can be sent in a single request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AudienceMember> audienceMembers;

  static {
    // hack to force ProGuard to consider AudienceMember used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(AudienceMember.class);
  }

  /**
   * Optional. Request-level consent to apply to all users in the request. User-level consent
   * overrides request-level consent, and can be specified in each AudienceMember.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Consent consent;

  /**
   * Required. The list of destinations to send the audience members to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Destination> destinations;

  static {
    // hack to force ProGuard to consider Destination used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Destination.class);
  }

  /**
   * Optional. Required for UserData uploads. The encoding type of the user identifiers. For hashed
   * user identifiers, this is the encoding type of the hashed string. For encrypted hashed user
   * identifiers, this is the encoding type of the outer encrypted string, but not necessarily the
   * inner hashed string, meaning the inner hashed string could be encoded in a different way than
   * the outer encrypted string. For non `UserData` uploads, this field is ignored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String encoding;

  /**
   * Optional. Encryption information for UserData uploads. If not set, it's assumed that uploaded
   * identifying information is hashed but not encrypted. For non `UserData` uploads, this field is
   * ignored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EncryptionInfo encryptionInfo;

  /**
   * Optional. The terms of service that the user has accepted/rejected.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TermsOfService termsOfService;

  /**
   * Optional. For testing purposes. If `true`, the request is validated but not executed. Only
   * errors are returned, not results.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean validateOnly;

  /**
   * Required. The list of users to send to the specified destinations. At most 10000 AudienceMember
   * resources can be sent in a single request.
   * @return value or {@code null} for none
   */
  public java.util.List<AudienceMember> getAudienceMembers() {
    return audienceMembers;
  }

  /**
   * Required. The list of users to send to the specified destinations. At most 10000 AudienceMember
   * resources can be sent in a single request.
   * @param audienceMembers audienceMembers or {@code null} for none
   */
  public IngestAudienceMembersRequest setAudienceMembers(java.util.List<AudienceMember> audienceMembers) {
    this.audienceMembers = audienceMembers;
    return this;
  }

  /**
   * Optional. Request-level consent to apply to all users in the request. User-level consent
   * overrides request-level consent, and can be specified in each AudienceMember.
   * @return value or {@code null} for none
   */
  public Consent getConsent() {
    return consent;
  }

  /**
   * Optional. Request-level consent to apply to all users in the request. User-level consent
   * overrides request-level consent, and can be specified in each AudienceMember.
   * @param consent consent or {@code null} for none
   */
  public IngestAudienceMembersRequest setConsent(Consent consent) {
    this.consent = consent;
    return this;
  }

  /**
   * Required. The list of destinations to send the audience members to.
   * @return value or {@code null} for none
   */
  public java.util.List<Destination> getDestinations() {
    return destinations;
  }

  /**
   * Required. The list of destinations to send the audience members to.
   * @param destinations destinations or {@code null} for none
   */
  public IngestAudienceMembersRequest setDestinations(java.util.List<Destination> destinations) {
    this.destinations = destinations;
    return this;
  }

  /**
   * Optional. Required for UserData uploads. The encoding type of the user identifiers. For hashed
   * user identifiers, this is the encoding type of the hashed string. For encrypted hashed user
   * identifiers, this is the encoding type of the outer encrypted string, but not necessarily the
   * inner hashed string, meaning the inner hashed string could be encoded in a different way than
   * the outer encrypted string. For non `UserData` uploads, this field is ignored.
   * @return value or {@code null} for none
   */
  public java.lang.String getEncoding() {
    return encoding;
  }

  /**
   * Optional. Required for UserData uploads. The encoding type of the user identifiers. For hashed
   * user identifiers, this is the encoding type of the hashed string. For encrypted hashed user
   * identifiers, this is the encoding type of the outer encrypted string, but not necessarily the
   * inner hashed string, meaning the inner hashed string could be encoded in a different way than
   * the outer encrypted string. For non `UserData` uploads, this field is ignored.
   * @param encoding encoding or {@code null} for none
   */
  public IngestAudienceMembersRequest setEncoding(java.lang.String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Optional. Encryption information for UserData uploads. If not set, it's assumed that uploaded
   * identifying information is hashed but not encrypted. For non `UserData` uploads, this field is
   * ignored.
   * @return value or {@code null} for none
   */
  public EncryptionInfo getEncryptionInfo() {
    return encryptionInfo;
  }

  /**
   * Optional. Encryption information for UserData uploads. If not set, it's assumed that uploaded
   * identifying information is hashed but not encrypted. For non `UserData` uploads, this field is
   * ignored.
   * @param encryptionInfo encryptionInfo or {@code null} for none
   */
  public IngestAudienceMembersRequest setEncryptionInfo(EncryptionInfo encryptionInfo) {
    this.encryptionInfo = encryptionInfo;
    return this;
  }

  /**
   * Optional. The terms of service that the user has accepted/rejected.
   * @return value or {@code null} for none
   */
  public TermsOfService getTermsOfService() {
    return termsOfService;
  }

  /**
   * Optional. The terms of service that the user has accepted/rejected.
   * @param termsOfService termsOfService or {@code null} for none
   */
  public IngestAudienceMembersRequest setTermsOfService(TermsOfService termsOfService) {
    this.termsOfService = termsOfService;
    return this;
  }

  /**
   * Optional. For testing purposes. If `true`, the request is validated but not executed. Only
   * errors are returned, not results.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getValidateOnly() {
    return validateOnly;
  }

  /**
   * Optional. For testing purposes. If `true`, the request is validated but not executed. Only
   * errors are returned, not results.
   * @param validateOnly validateOnly or {@code null} for none
   */
  public IngestAudienceMembersRequest setValidateOnly(java.lang.Boolean validateOnly) {
    this.validateOnly = validateOnly;
    return this;
  }

  @Override
  public IngestAudienceMembersRequest set(String fieldName, Object value) {
    return (IngestAudienceMembersRequest) super.set(fieldName, value);
  }

  @Override
  public IngestAudienceMembersRequest clone() {
    return (IngestAudienceMembersRequest) super.clone();
  }

}
