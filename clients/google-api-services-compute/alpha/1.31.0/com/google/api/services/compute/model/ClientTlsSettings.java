/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.compute.model;

/**
 * [Deprecated] The client side authentication settings for connection originating from the backend
 * service. the backend service.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Compute Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ClientTlsSettings extends com.google.api.client.json.GenericJson {

  /**
   * Configures the mechanism to obtain client-side security certificates and identity information.
   * This field is only applicable when mode is set to MUTUAL.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TlsContext clientTlsContext;

  /**
   * Indicates whether connections to this port should be secured using TLS. The value of this field
   * determines how TLS is enforced. This can be set to one of the following values: DISABLE: Do not
   * setup a TLS connection to the backends. SIMPLE: Originate a TLS connection to the backends.
   * MUTUAL: Secure connections to the backends using mutual TLS by presenting client certificates
   * for authentication.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String mode;

  /**
   * SNI string to present to the server during TLS handshake. This field is applicable only when
   * mode is SIMPLE or MUTUAL.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sni;

  /**
   * A list of alternate names to verify the subject identity in the certificate.If specified, the
   * proxy will verify that the server certificate's subject alt name matches one of the specified
   * values. This field is applicable only when mode is SIMPLE or MUTUAL.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> subjectAltNames;

  /**
   * Configures the mechanism to obtain client-side security certificates and identity information.
   * This field is only applicable when mode is set to MUTUAL.
   * @return value or {@code null} for none
   */
  public TlsContext getClientTlsContext() {
    return clientTlsContext;
  }

  /**
   * Configures the mechanism to obtain client-side security certificates and identity information.
   * This field is only applicable when mode is set to MUTUAL.
   * @param clientTlsContext clientTlsContext or {@code null} for none
   */
  public ClientTlsSettings setClientTlsContext(TlsContext clientTlsContext) {
    this.clientTlsContext = clientTlsContext;
    return this;
  }

  /**
   * Indicates whether connections to this port should be secured using TLS. The value of this field
   * determines how TLS is enforced. This can be set to one of the following values: DISABLE: Do not
   * setup a TLS connection to the backends. SIMPLE: Originate a TLS connection to the backends.
   * MUTUAL: Secure connections to the backends using mutual TLS by presenting client certificates
   * for authentication.
   * @return value or {@code null} for none
   */
  public java.lang.String getMode() {
    return mode;
  }

  /**
   * Indicates whether connections to this port should be secured using TLS. The value of this field
   * determines how TLS is enforced. This can be set to one of the following values: DISABLE: Do not
   * setup a TLS connection to the backends. SIMPLE: Originate a TLS connection to the backends.
   * MUTUAL: Secure connections to the backends using mutual TLS by presenting client certificates
   * for authentication.
   * @param mode mode or {@code null} for none
   */
  public ClientTlsSettings setMode(java.lang.String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * SNI string to present to the server during TLS handshake. This field is applicable only when
   * mode is SIMPLE or MUTUAL.
   * @return value or {@code null} for none
   */
  public java.lang.String getSni() {
    return sni;
  }

  /**
   * SNI string to present to the server during TLS handshake. This field is applicable only when
   * mode is SIMPLE or MUTUAL.
   * @param sni sni or {@code null} for none
   */
  public ClientTlsSettings setSni(java.lang.String sni) {
    this.sni = sni;
    return this;
  }

  /**
   * A list of alternate names to verify the subject identity in the certificate.If specified, the
   * proxy will verify that the server certificate's subject alt name matches one of the specified
   * values. This field is applicable only when mode is SIMPLE or MUTUAL.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSubjectAltNames() {
    return subjectAltNames;
  }

  /**
   * A list of alternate names to verify the subject identity in the certificate.If specified, the
   * proxy will verify that the server certificate's subject alt name matches one of the specified
   * values. This field is applicable only when mode is SIMPLE or MUTUAL.
   * @param subjectAltNames subjectAltNames or {@code null} for none
   */
  public ClientTlsSettings setSubjectAltNames(java.util.List<java.lang.String> subjectAltNames) {
    this.subjectAltNames = subjectAltNames;
    return this;
  }

  @Override
  public ClientTlsSettings set(String fieldName, Object value) {
    return (ClientTlsSettings) super.set(fieldName, value);
  }

  @Override
  public ClientTlsSettings clone() {
    return (ClientTlsSettings) super.clone();
  }

}
