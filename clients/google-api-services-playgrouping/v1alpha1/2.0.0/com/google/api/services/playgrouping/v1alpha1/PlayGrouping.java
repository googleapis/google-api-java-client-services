/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.playgrouping.v1alpha1;

/**
 * Service definition for PlayGrouping (v1alpha1).
 *
 * <p>
 * playgrouping.googleapis.com API.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/playgrouping/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link PlayGroupingRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class PlayGrouping extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Google Play Grouping API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://playgrouping.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://playgrouping.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public PlayGrouping(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  PlayGrouping(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Apps collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code PlayGrouping playgrouping = new PlayGrouping(...);}
   *   {@code PlayGrouping.Apps.List request = playgrouping.apps().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Apps apps() {
    return new Apps();
  }

  /**
   * The "apps" collection of methods.
   */
  public class Apps {

    /**
     * An accessor for creating requests from the Tokens collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code PlayGrouping playgrouping = new PlayGrouping(...);}
     *   {@code PlayGrouping.Tokens.List request = playgrouping.tokens().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Tokens tokens() {
      return new Tokens();
    }

    /**
     * The "tokens" collection of methods.
     */
    public class Tokens {

      /**
       * Verify an API token by asserting the app and persona it belongs to. The verification is a
       * protection against client-side attacks and will fail if the contents of the token don't match the
       * provided values. A token must be verified before it can be used to manipulate user tags.
       *
       * Create a request for the method "tokens.verify".
       *
       * This request holds the parameters needed by the playgrouping server.  After setting any optional
       * parameters, call the {@link Verify#execute()} method to invoke the remote operation.
       *
       * @param appPackage Required. App the token belongs to. Format: apps/{package_name}
       * @param token Required. The token to be verified. Format: tokens/{token}
       * @param content the {@link com.google.api.services.playgrouping.v1alpha1.model.VerifyTokenRequest}
       * @return the request
       */
      public Verify verify(java.lang.String appPackage, java.lang.String token, com.google.api.services.playgrouping.v1alpha1.model.VerifyTokenRequest content) throws java.io.IOException {
        Verify result = new Verify(appPackage, token, content);
        initialize(result);
        return result;
      }

      public class Verify extends PlayGroupingRequest<com.google.api.services.playgrouping.v1alpha1.model.VerifyTokenResponse> {

        private static final String REST_PATH = "v1alpha1/{+appPackage}/{+token}:verify";

        private final java.util.regex.Pattern APP_PACKAGE_PATTERN =
            java.util.regex.Pattern.compile("^apps/[^/]+$");

        private final java.util.regex.Pattern TOKEN_PATTERN =
            java.util.regex.Pattern.compile("^tokens/[^/]+$");

        /**
         * Verify an API token by asserting the app and persona it belongs to. The verification is a
         * protection against client-side attacks and will fail if the contents of the token don't match
         * the provided values. A token must be verified before it can be used to manipulate user tags.
         *
         * Create a request for the method "tokens.verify".
         *
         * This request holds the parameters needed by the the playgrouping server.  After setting any
         * optional parameters, call the {@link Verify#execute()} method to invoke the remote operation.
         * <p> {@link
         * Verify#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param appPackage Required. App the token belongs to. Format: apps/{package_name}
         * @param token Required. The token to be verified. Format: tokens/{token}
         * @param content the {@link com.google.api.services.playgrouping.v1alpha1.model.VerifyTokenRequest}
         * @since 1.13
         */
        protected Verify(java.lang.String appPackage, java.lang.String token, com.google.api.services.playgrouping.v1alpha1.model.VerifyTokenRequest content) {
          super(PlayGrouping.this, "POST", REST_PATH, content, com.google.api.services.playgrouping.v1alpha1.model.VerifyTokenResponse.class);
          this.appPackage = com.google.api.client.util.Preconditions.checkNotNull(appPackage, "Required parameter appPackage must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PACKAGE_PATTERN.matcher(appPackage).matches(),
                "Parameter appPackage must conform to the pattern " +
                "^apps/[^/]+$");
          }
          this.token = com.google.api.client.util.Preconditions.checkNotNull(token, "Required parameter token must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(TOKEN_PATTERN.matcher(token).matches(),
                "Parameter token must conform to the pattern " +
                "^tokens/[^/]+$");
          }
        }

        @Override
        public Verify set$Xgafv(java.lang.String $Xgafv) {
          return (Verify) super.set$Xgafv($Xgafv);
        }

        @Override
        public Verify setAccessToken(java.lang.String accessToken) {
          return (Verify) super.setAccessToken(accessToken);
        }

        @Override
        public Verify setAlt(java.lang.String alt) {
          return (Verify) super.setAlt(alt);
        }

        @Override
        public Verify setCallback(java.lang.String callback) {
          return (Verify) super.setCallback(callback);
        }

        @Override
        public Verify setFields(java.lang.String fields) {
          return (Verify) super.setFields(fields);
        }

        @Override
        public Verify setKey(java.lang.String key) {
          return (Verify) super.setKey(key);
        }

        @Override
        public Verify setOauthToken(java.lang.String oauthToken) {
          return (Verify) super.setOauthToken(oauthToken);
        }

        @Override
        public Verify setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Verify) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Verify setQuotaUser(java.lang.String quotaUser) {
          return (Verify) super.setQuotaUser(quotaUser);
        }

        @Override
        public Verify setUploadType(java.lang.String uploadType) {
          return (Verify) super.setUploadType(uploadType);
        }

        @Override
        public Verify setUploadProtocol(java.lang.String uploadProtocol) {
          return (Verify) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. App the token belongs to. Format: apps/{package_name} */
        @com.google.api.client.util.Key
        private java.lang.String appPackage;

        /** Required. App the token belongs to. Format: apps/{package_name}
         */
        public java.lang.String getAppPackage() {
          return appPackage;
        }

        /** Required. App the token belongs to. Format: apps/{package_name} */
        public Verify setAppPackage(java.lang.String appPackage) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(APP_PACKAGE_PATTERN.matcher(appPackage).matches(),
                "Parameter appPackage must conform to the pattern " +
                "^apps/[^/]+$");
          }
          this.appPackage = appPackage;
          return this;
        }

        /** Required. The token to be verified. Format: tokens/{token} */
        @com.google.api.client.util.Key
        private java.lang.String token;

        /** Required. The token to be verified. Format: tokens/{token}
         */
        public java.lang.String getToken() {
          return token;
        }

        /** Required. The token to be verified. Format: tokens/{token} */
        public Verify setToken(java.lang.String token) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(TOKEN_PATTERN.matcher(token).matches(),
                "Parameter token must conform to the pattern " +
                "^tokens/[^/]+$");
          }
          this.token = token;
          return this;
        }

        @Override
        public Verify set(String parameterName, Object value) {
          return (Verify) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Tags collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code PlayGrouping playgrouping = new PlayGrouping(...);}
       *   {@code PlayGrouping.Tags.List request = playgrouping.tags().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Tags tags() {
        return new Tags();
      }

      /**
       * The "tags" collection of methods.
       */
      public class Tags {

        /**
         * Create or update tags for the user and app that are represented by the given token.
         *
         * Create a request for the method "tags.createOrUpdate".
         *
         * This request holds the parameters needed by the playgrouping server.  After setting any optional
         * parameters, call the {@link CreateOrUpdate#execute()} method to invoke the remote operation.
         *
         * @param appPackage Required. App whose tags are being manipulated. Format: apps/{package_name}
         * @param token Required. Token for which the tags are being inserted or updated. Format: tokens/{token}
         * @param content the {@link com.google.api.services.playgrouping.v1alpha1.model.CreateOrUpdateTagsRequest}
         * @return the request
         */
        public CreateOrUpdate createOrUpdate(java.lang.String appPackage, java.lang.String token, com.google.api.services.playgrouping.v1alpha1.model.CreateOrUpdateTagsRequest content) throws java.io.IOException {
          CreateOrUpdate result = new CreateOrUpdate(appPackage, token, content);
          initialize(result);
          return result;
        }

        public class CreateOrUpdate extends PlayGroupingRequest<com.google.api.services.playgrouping.v1alpha1.model.CreateOrUpdateTagsResponse> {

          private static final String REST_PATH = "v1alpha1/{+appPackage}/{+token}/tags:createOrUpdate";

          private final java.util.regex.Pattern APP_PACKAGE_PATTERN =
              java.util.regex.Pattern.compile("^apps/[^/]+$");

          private final java.util.regex.Pattern TOKEN_PATTERN =
              java.util.regex.Pattern.compile("^tokens/[^/]+$");

          /**
           * Create or update tags for the user and app that are represented by the given token.
           *
           * Create a request for the method "tags.createOrUpdate".
           *
           * This request holds the parameters needed by the the playgrouping server.  After setting any
           * optional parameters, call the {@link CreateOrUpdate#execute()} method to invoke the remote
           * operation. <p> {@link CreateOrUpdate#initialize(com.google.api.client.googleapis.services.Abstr
           * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
           * the constructor. </p>
           *
           * @param appPackage Required. App whose tags are being manipulated. Format: apps/{package_name}
           * @param token Required. Token for which the tags are being inserted or updated. Format: tokens/{token}
           * @param content the {@link com.google.api.services.playgrouping.v1alpha1.model.CreateOrUpdateTagsRequest}
           * @since 1.13
           */
          protected CreateOrUpdate(java.lang.String appPackage, java.lang.String token, com.google.api.services.playgrouping.v1alpha1.model.CreateOrUpdateTagsRequest content) {
            super(PlayGrouping.this, "POST", REST_PATH, content, com.google.api.services.playgrouping.v1alpha1.model.CreateOrUpdateTagsResponse.class);
            this.appPackage = com.google.api.client.util.Preconditions.checkNotNull(appPackage, "Required parameter appPackage must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(APP_PACKAGE_PATTERN.matcher(appPackage).matches(),
                  "Parameter appPackage must conform to the pattern " +
                  "^apps/[^/]+$");
            }
            this.token = com.google.api.client.util.Preconditions.checkNotNull(token, "Required parameter token must be specified.");
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(TOKEN_PATTERN.matcher(token).matches(),
                  "Parameter token must conform to the pattern " +
                  "^tokens/[^/]+$");
            }
          }

          @Override
          public CreateOrUpdate set$Xgafv(java.lang.String $Xgafv) {
            return (CreateOrUpdate) super.set$Xgafv($Xgafv);
          }

          @Override
          public CreateOrUpdate setAccessToken(java.lang.String accessToken) {
            return (CreateOrUpdate) super.setAccessToken(accessToken);
          }

          @Override
          public CreateOrUpdate setAlt(java.lang.String alt) {
            return (CreateOrUpdate) super.setAlt(alt);
          }

          @Override
          public CreateOrUpdate setCallback(java.lang.String callback) {
            return (CreateOrUpdate) super.setCallback(callback);
          }

          @Override
          public CreateOrUpdate setFields(java.lang.String fields) {
            return (CreateOrUpdate) super.setFields(fields);
          }

          @Override
          public CreateOrUpdate setKey(java.lang.String key) {
            return (CreateOrUpdate) super.setKey(key);
          }

          @Override
          public CreateOrUpdate setOauthToken(java.lang.String oauthToken) {
            return (CreateOrUpdate) super.setOauthToken(oauthToken);
          }

          @Override
          public CreateOrUpdate setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (CreateOrUpdate) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public CreateOrUpdate setQuotaUser(java.lang.String quotaUser) {
            return (CreateOrUpdate) super.setQuotaUser(quotaUser);
          }

          @Override
          public CreateOrUpdate setUploadType(java.lang.String uploadType) {
            return (CreateOrUpdate) super.setUploadType(uploadType);
          }

          @Override
          public CreateOrUpdate setUploadProtocol(java.lang.String uploadProtocol) {
            return (CreateOrUpdate) super.setUploadProtocol(uploadProtocol);
          }

          /** Required. App whose tags are being manipulated. Format: apps/{package_name} */
          @com.google.api.client.util.Key
          private java.lang.String appPackage;

          /** Required. App whose tags are being manipulated. Format: apps/{package_name}
           */
          public java.lang.String getAppPackage() {
            return appPackage;
          }

          /** Required. App whose tags are being manipulated. Format: apps/{package_name} */
          public CreateOrUpdate setAppPackage(java.lang.String appPackage) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(APP_PACKAGE_PATTERN.matcher(appPackage).matches(),
                  "Parameter appPackage must conform to the pattern " +
                  "^apps/[^/]+$");
            }
            this.appPackage = appPackage;
            return this;
          }

          /**
           * Required. Token for which the tags are being inserted or updated. Format:
           * tokens/{token}
           */
          @com.google.api.client.util.Key
          private java.lang.String token;

          /** Required. Token for which the tags are being inserted or updated. Format: tokens/{token}
           */
          public java.lang.String getToken() {
            return token;
          }

          /**
           * Required. Token for which the tags are being inserted or updated. Format:
           * tokens/{token}
           */
          public CreateOrUpdate setToken(java.lang.String token) {
            if (!getSuppressPatternChecks()) {
              com.google.api.client.util.Preconditions.checkArgument(TOKEN_PATTERN.matcher(token).matches(),
                  "Parameter token must conform to the pattern " +
                  "^tokens/[^/]+$");
            }
            this.token = token;
            return this;
          }

          @Override
          public CreateOrUpdate set(String parameterName, Object value) {
            return (CreateOrUpdate) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link PlayGrouping}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link PlayGrouping}. */
    @Override
    public PlayGrouping build() {
      return new PlayGrouping(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link PlayGroupingRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setPlayGroupingRequestInitializer(
        PlayGroupingRequestInitializer playgroupingRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(playgroupingRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
