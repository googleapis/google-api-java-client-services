/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.migrationcenter.v1alpha1.model;

/**
 * Details of network address.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Migration Center API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NetworkAddress extends com.google.api.client.json.GenericJson {

  /**
   * Whether DHCP is used to assign addresses.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String assignment;

  /**
   * Broadcast address.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String bcast;

  /**
   * Fully qualified domain name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String fqdn;

  /**
   * Assigned or configured IP Address.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ipAddress;

  /**
   * Subnet mask.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String subnetMask;

  /**
   * Whether DHCP is used to assign addresses.
   * @return value or {@code null} for none
   */
  public java.lang.String getAssignment() {
    return assignment;
  }

  /**
   * Whether DHCP is used to assign addresses.
   * @param assignment assignment or {@code null} for none
   */
  public NetworkAddress setAssignment(java.lang.String assignment) {
    this.assignment = assignment;
    return this;
  }

  /**
   * Broadcast address.
   * @return value or {@code null} for none
   */
  public java.lang.String getBcast() {
    return bcast;
  }

  /**
   * Broadcast address.
   * @param bcast bcast or {@code null} for none
   */
  public NetworkAddress setBcast(java.lang.String bcast) {
    this.bcast = bcast;
    return this;
  }

  /**
   * Fully qualified domain name.
   * @return value or {@code null} for none
   */
  public java.lang.String getFqdn() {
    return fqdn;
  }

  /**
   * Fully qualified domain name.
   * @param fqdn fqdn or {@code null} for none
   */
  public NetworkAddress setFqdn(java.lang.String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * Assigned or configured IP Address.
   * @return value or {@code null} for none
   */
  public java.lang.String getIpAddress() {
    return ipAddress;
  }

  /**
   * Assigned or configured IP Address.
   * @param ipAddress ipAddress or {@code null} for none
   */
  public NetworkAddress setIpAddress(java.lang.String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Subnet mask.
   * @return value or {@code null} for none
   */
  public java.lang.String getSubnetMask() {
    return subnetMask;
  }

  /**
   * Subnet mask.
   * @param subnetMask subnetMask or {@code null} for none
   */
  public NetworkAddress setSubnetMask(java.lang.String subnetMask) {
    this.subnetMask = subnetMask;
    return this;
  }

  @Override
  public NetworkAddress set(String fieldName, Object value) {
    return (NetworkAddress) super.set(fieldName, value);
  }

  @Override
  public NetworkAddress clone() {
    return (NetworkAddress) super.clone();
  }

}
