/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.oslogin.v1beta;

/**
 * Service definition for CloudOSLogin (v1beta).
 *
 * <p>
 * Manages OS login configuration for Google account users.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/compute/docs/oslogin/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link CloudOSLoginRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class CloudOSLogin extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.28.0 of the Cloud OS Login API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://oslogin.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public CloudOSLogin(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  CloudOSLogin(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Users collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code CloudOSLogin oslogin = new CloudOSLogin(...);}
   *   {@code CloudOSLogin.Users.List request = oslogin.users().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Users users() {
    return new Users();
  }

  /**
   * The "users" collection of methods.
   */
  public class Users {

    /**
     * Retrieves the profile information used for logging in to a virtual machine on Google Compute
     * Engine.
     *
     * Create a request for the method "users.getLoginProfile".
     *
     * This request holds the parameters needed by the oslogin server.  After setting any optional
     * parameters, call the {@link GetLoginProfile#execute()} method to invoke the remote operation.
     *
     * @param name The unique ID for the user in format `users/{user}`.
     * @return the request
     */
    public GetLoginProfile getLoginProfile(java.lang.String name) throws java.io.IOException {
      GetLoginProfile result = new GetLoginProfile(name);
      initialize(result);
      return result;
    }

    public class GetLoginProfile extends CloudOSLoginRequest<com.google.api.services.oslogin.v1beta.model.LoginProfile> {

      private static final String REST_PATH = "v1beta/{+name}/loginProfile";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^users/[^/]+$");

      /**
       * Retrieves the profile information used for logging in to a virtual machine on Google Compute
       * Engine.
       *
       * Create a request for the method "users.getLoginProfile".
       *
       * This request holds the parameters needed by the the oslogin server.  After setting any optional
       * parameters, call the {@link GetLoginProfile#execute()} method to invoke the remote operation.
       * <p> {@link GetLoginProfile#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
       * lientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param name The unique ID for the user in format `users/{user}`.
       * @since 1.13
       */
      protected GetLoginProfile(java.lang.String name) {
        super(CloudOSLogin.this, "GET", REST_PATH, null, com.google.api.services.oslogin.v1beta.model.LoginProfile.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^users/[^/]+$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetLoginProfile set$Xgafv(java.lang.String $Xgafv) {
        return (GetLoginProfile) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetLoginProfile setAccessToken(java.lang.String accessToken) {
        return (GetLoginProfile) super.setAccessToken(accessToken);
      }

      @Override
      public GetLoginProfile setAlt(java.lang.String alt) {
        return (GetLoginProfile) super.setAlt(alt);
      }

      @Override
      public GetLoginProfile setCallback(java.lang.String callback) {
        return (GetLoginProfile) super.setCallback(callback);
      }

      @Override
      public GetLoginProfile setFields(java.lang.String fields) {
        return (GetLoginProfile) super.setFields(fields);
      }

      @Override
      public GetLoginProfile setKey(java.lang.String key) {
        return (GetLoginProfile) super.setKey(key);
      }

      @Override
      public GetLoginProfile setOauthToken(java.lang.String oauthToken) {
        return (GetLoginProfile) super.setOauthToken(oauthToken);
      }

      @Override
      public GetLoginProfile setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetLoginProfile) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetLoginProfile setQuotaUser(java.lang.String quotaUser) {
        return (GetLoginProfile) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetLoginProfile setUploadType(java.lang.String uploadType) {
        return (GetLoginProfile) super.setUploadType(uploadType);
      }

      @Override
      public GetLoginProfile setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetLoginProfile) super.setUploadProtocol(uploadProtocol);
      }

      /** The unique ID for the user in format `users/{user}`. */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The unique ID for the user in format `users/{user}`.
       */
      public java.lang.String getName() {
        return name;
      }

      /** The unique ID for the user in format `users/{user}`. */
      public GetLoginProfile setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^users/[^/]+$");
        }
        this.name = name;
        return this;
      }

      /** The project ID of the Google Cloud Platform project. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The project ID of the Google Cloud Platform project.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The project ID of the Google Cloud Platform project. */
      public GetLoginProfile setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      /** A system ID for filtering the results of the request. */
      @com.google.api.client.util.Key
      private java.lang.String systemId;

      /** A system ID for filtering the results of the request.
       */
      public java.lang.String getSystemId() {
        return systemId;
      }

      /** A system ID for filtering the results of the request. */
      public GetLoginProfile setSystemId(java.lang.String systemId) {
        this.systemId = systemId;
        return this;
      }

      @Override
      public GetLoginProfile set(String parameterName, Object value) {
        return (GetLoginProfile) super.set(parameterName, value);
      }
    }
    /**
     * Adds an SSH public key and returns the profile information. Default POSIX account information is
     * set when no username and UID exist as part of the login profile.
     *
     * Create a request for the method "users.importSshPublicKey".
     *
     * This request holds the parameters needed by the oslogin server.  After setting any optional
     * parameters, call the {@link ImportSshPublicKey#execute()} method to invoke the remote operation.
     *
     * @param parent The unique ID for the user in format `users/{user}`.
     * @param content the {@link com.google.api.services.oslogin.v1beta.model.SshPublicKey}
     * @return the request
     */
    public ImportSshPublicKey importSshPublicKey(java.lang.String parent, com.google.api.services.oslogin.v1beta.model.SshPublicKey content) throws java.io.IOException {
      ImportSshPublicKey result = new ImportSshPublicKey(parent, content);
      initialize(result);
      return result;
    }

    public class ImportSshPublicKey extends CloudOSLoginRequest<com.google.api.services.oslogin.v1beta.model.ImportSshPublicKeyResponse> {

      private static final String REST_PATH = "v1beta/{+parent}:importSshPublicKey";

      private final java.util.regex.Pattern PARENT_PATTERN =
          java.util.regex.Pattern.compile("^users/[^/]+$");

      /**
       * Adds an SSH public key and returns the profile information. Default POSIX account information
       * is set when no username and UID exist as part of the login profile.
       *
       * Create a request for the method "users.importSshPublicKey".
       *
       * This request holds the parameters needed by the the oslogin server.  After setting any optional
       * parameters, call the {@link ImportSshPublicKey#execute()} method to invoke the remote
       * operation. <p> {@link ImportSshPublicKey#initialize(com.google.api.client.googleapis.services.A
       * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param parent The unique ID for the user in format `users/{user}`.
       * @param content the {@link com.google.api.services.oslogin.v1beta.model.SshPublicKey}
       * @since 1.13
       */
      protected ImportSshPublicKey(java.lang.String parent, com.google.api.services.oslogin.v1beta.model.SshPublicKey content) {
        super(CloudOSLogin.this, "POST", REST_PATH, content, com.google.api.services.oslogin.v1beta.model.ImportSshPublicKeyResponse.class);
        this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
              "Parameter parent must conform to the pattern " +
              "^users/[^/]+$");
        }
      }

      @Override
      public ImportSshPublicKey set$Xgafv(java.lang.String $Xgafv) {
        return (ImportSshPublicKey) super.set$Xgafv($Xgafv);
      }

      @Override
      public ImportSshPublicKey setAccessToken(java.lang.String accessToken) {
        return (ImportSshPublicKey) super.setAccessToken(accessToken);
      }

      @Override
      public ImportSshPublicKey setAlt(java.lang.String alt) {
        return (ImportSshPublicKey) super.setAlt(alt);
      }

      @Override
      public ImportSshPublicKey setCallback(java.lang.String callback) {
        return (ImportSshPublicKey) super.setCallback(callback);
      }

      @Override
      public ImportSshPublicKey setFields(java.lang.String fields) {
        return (ImportSshPublicKey) super.setFields(fields);
      }

      @Override
      public ImportSshPublicKey setKey(java.lang.String key) {
        return (ImportSshPublicKey) super.setKey(key);
      }

      @Override
      public ImportSshPublicKey setOauthToken(java.lang.String oauthToken) {
        return (ImportSshPublicKey) super.setOauthToken(oauthToken);
      }

      @Override
      public ImportSshPublicKey setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (ImportSshPublicKey) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ImportSshPublicKey setQuotaUser(java.lang.String quotaUser) {
        return (ImportSshPublicKey) super.setQuotaUser(quotaUser);
      }

      @Override
      public ImportSshPublicKey setUploadType(java.lang.String uploadType) {
        return (ImportSshPublicKey) super.setUploadType(uploadType);
      }

      @Override
      public ImportSshPublicKey setUploadProtocol(java.lang.String uploadProtocol) {
        return (ImportSshPublicKey) super.setUploadProtocol(uploadProtocol);
      }

      /** The unique ID for the user in format `users/{user}`. */
      @com.google.api.client.util.Key
      private java.lang.String parent;

      /** The unique ID for the user in format `users/{user}`.
       */
      public java.lang.String getParent() {
        return parent;
      }

      /** The unique ID for the user in format `users/{user}`. */
      public ImportSshPublicKey setParent(java.lang.String parent) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
              "Parameter parent must conform to the pattern " +
              "^users/[^/]+$");
        }
        this.parent = parent;
        return this;
      }

      /** The project ID of the Google Cloud Platform project. */
      @com.google.api.client.util.Key
      private java.lang.String projectId;

      /** The project ID of the Google Cloud Platform project.
       */
      public java.lang.String getProjectId() {
        return projectId;
      }

      /** The project ID of the Google Cloud Platform project. */
      public ImportSshPublicKey setProjectId(java.lang.String projectId) {
        this.projectId = projectId;
        return this;
      }

      @Override
      public ImportSshPublicKey set(String parameterName, Object value) {
        return (ImportSshPublicKey) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Projects collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code CloudOSLogin oslogin = new CloudOSLogin(...);}
     *   {@code CloudOSLogin.Projects.List request = oslogin.projects().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Projects projects() {
      return new Projects();
    }

    /**
     * The "projects" collection of methods.
     */
    public class Projects {

      /**
       * Deletes a POSIX account.
       *
       * Create a request for the method "projects.delete".
       *
       * This request holds the parameters needed by the oslogin server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name A reference to the POSIX account to update. POSIX accounts are identified
      by the project ID they are
       *        associated with. A reference to the POSIX
      account is in format
       *        `users/{user}/projects/{project}`.
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends CloudOSLoginRequest<com.google.api.services.oslogin.v1beta.model.Empty> {

        private static final String REST_PATH = "v1beta/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^users/[^/]+/projects/[^/]+$");

        /**
         * Deletes a POSIX account.
         *
         * Create a request for the method "projects.delete".
         *
         * This request holds the parameters needed by the the oslogin server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name A reference to the POSIX account to update. POSIX accounts are identified
      by the project ID they are
       *        associated with. A reference to the POSIX
      account is in format
       *        `users/{user}/projects/{project}`.
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(CloudOSLogin.this, "DELETE", REST_PATH, null, com.google.api.services.oslogin.v1beta.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^users/[^/]+/projects/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * A reference to the POSIX account to update. POSIX accounts are identified by the project
         * ID they are associated with. A reference to the POSIX account is in format
         * `users/{user}/projects/{project}`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** A reference to the POSIX account to update. POSIX accounts are identified by the project ID they
       are associated with. A reference to the POSIX account is in format
       `users/{user}/projects/{project}`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * A reference to the POSIX account to update. POSIX accounts are identified by the project
         * ID they are associated with. A reference to the POSIX account is in format
         * `users/{user}/projects/{project}`.
         */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^users/[^/]+/projects/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the SshPublicKeys collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code CloudOSLogin oslogin = new CloudOSLogin(...);}
     *   {@code CloudOSLogin.SshPublicKeys.List request = oslogin.sshPublicKeys().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public SshPublicKeys sshPublicKeys() {
      return new SshPublicKeys();
    }

    /**
     * The "sshPublicKeys" collection of methods.
     */
    public class SshPublicKeys {

      /**
       * Deletes an SSH public key.
       *
       * Create a request for the method "sshPublicKeys.delete".
       *
       * This request holds the parameters needed by the oslogin server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param name The fingerprint of the public key to update. Public keys are identified by
      their SHA-256
       *        fingerprint. The fingerprint of the public key is in format
       *        `users/{user}/sshPublicKeys/{fingerprint}`.
       * @return the request
       */
      public Delete delete(java.lang.String name) throws java.io.IOException {
        Delete result = new Delete(name);
        initialize(result);
        return result;
      }

      public class Delete extends CloudOSLoginRequest<com.google.api.services.oslogin.v1beta.model.Empty> {

        private static final String REST_PATH = "v1beta/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^users/[^/]+/sshPublicKeys/[^/]+$");

        /**
         * Deletes an SSH public key.
         *
         * Create a request for the method "sshPublicKeys.delete".
         *
         * This request holds the parameters needed by the the oslogin server.  After setting any optional
         * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The fingerprint of the public key to update. Public keys are identified by
      their SHA-256
       *        fingerprint. The fingerprint of the public key is in format
       *        `users/{user}/sshPublicKeys/{fingerprint}`.
         * @since 1.13
         */
        protected Delete(java.lang.String name) {
          super(CloudOSLogin.this, "DELETE", REST_PATH, null, com.google.api.services.oslogin.v1beta.model.Empty.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^users/[^/]+/sshPublicKeys/[^/]+$");
          }
        }

        @Override
        public Delete set$Xgafv(java.lang.String $Xgafv) {
          return (Delete) super.set$Xgafv($Xgafv);
        }

        @Override
        public Delete setAccessToken(java.lang.String accessToken) {
          return (Delete) super.setAccessToken(accessToken);
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setCallback(java.lang.String callback) {
          return (Delete) super.setCallback(callback);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUploadType(java.lang.String uploadType) {
          return (Delete) super.setUploadType(uploadType);
        }

        @Override
        public Delete setUploadProtocol(java.lang.String uploadProtocol) {
          return (Delete) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The fingerprint of the public key to update. Public keys are identified by their SHA-256
         * fingerprint. The fingerprint of the public key is in format
         * `users/{user}/sshPublicKeys/{fingerprint}`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The fingerprint of the public key to update. Public keys are identified by their SHA-256
       fingerprint. The fingerprint of the public key is in format
       `users/{user}/sshPublicKeys/{fingerprint}`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The fingerprint of the public key to update. Public keys are identified by their SHA-256
         * fingerprint. The fingerprint of the public key is in format
         * `users/{user}/sshPublicKeys/{fingerprint}`.
         */
        public Delete setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^users/[^/]+/sshPublicKeys/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Retrieves an SSH public key.
       *
       * Create a request for the method "sshPublicKeys.get".
       *
       * This request holds the parameters needed by the oslogin server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name The fingerprint of the public key to retrieve. Public keys are identified
      by their SHA-256
       *        fingerprint. The fingerprint of the public key is in
      format
       *        `users/{user}/sshPublicKeys/{fingerprint}`.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends CloudOSLoginRequest<com.google.api.services.oslogin.v1beta.model.SshPublicKey> {

        private static final String REST_PATH = "v1beta/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^users/[^/]+/sshPublicKeys/[^/]+$");

        /**
         * Retrieves an SSH public key.
         *
         * Create a request for the method "sshPublicKeys.get".
         *
         * This request holds the parameters needed by the the oslogin server.  After setting any optional
         * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The fingerprint of the public key to retrieve. Public keys are identified
      by their SHA-256
       *        fingerprint. The fingerprint of the public key is in
      format
       *        `users/{user}/sshPublicKeys/{fingerprint}`.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(CloudOSLogin.this, "GET", REST_PATH, null, com.google.api.services.oslogin.v1beta.model.SshPublicKey.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^users/[^/]+/sshPublicKeys/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The fingerprint of the public key to retrieve. Public keys are identified by their
         * SHA-256 fingerprint. The fingerprint of the public key is in format
         * `users/{user}/sshPublicKeys/{fingerprint}`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The fingerprint of the public key to retrieve. Public keys are identified by their SHA-256
       fingerprint. The fingerprint of the public key is in format
       `users/{user}/sshPublicKeys/{fingerprint}`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The fingerprint of the public key to retrieve. Public keys are identified by their
         * SHA-256 fingerprint. The fingerprint of the public key is in format
         * `users/{user}/sshPublicKeys/{fingerprint}`.
         */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^users/[^/]+/sshPublicKeys/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Updates an SSH public key and returns the profile information. This method supports patch
       * semantics.
       *
       * Create a request for the method "sshPublicKeys.patch".
       *
       * This request holds the parameters needed by the oslogin server.  After setting any optional
       * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
       *
       * @param name The fingerprint of the public key to update. Public keys are identified by
      their SHA-256
       *        fingerprint. The fingerprint of the public key is in format
       *        `users/{user}/sshPublicKeys/{fingerprint}`.
       * @param content the {@link com.google.api.services.oslogin.v1beta.model.SshPublicKey}
       * @return the request
       */
      public Patch patch(java.lang.String name, com.google.api.services.oslogin.v1beta.model.SshPublicKey content) throws java.io.IOException {
        Patch result = new Patch(name, content);
        initialize(result);
        return result;
      }

      public class Patch extends CloudOSLoginRequest<com.google.api.services.oslogin.v1beta.model.SshPublicKey> {

        private static final String REST_PATH = "v1beta/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^users/[^/]+/sshPublicKeys/[^/]+$");

        /**
         * Updates an SSH public key and returns the profile information. This method supports patch
         * semantics.
         *
         * Create a request for the method "sshPublicKeys.patch".
         *
         * This request holds the parameters needed by the the oslogin server.  After setting any optional
         * parameters, call the {@link Patch#execute()} method to invoke the remote operation. <p> {@link
         * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name The fingerprint of the public key to update. Public keys are identified by
      their SHA-256
       *        fingerprint. The fingerprint of the public key is in format
       *        `users/{user}/sshPublicKeys/{fingerprint}`.
         * @param content the {@link com.google.api.services.oslogin.v1beta.model.SshPublicKey}
         * @since 1.13
         */
        protected Patch(java.lang.String name, com.google.api.services.oslogin.v1beta.model.SshPublicKey content) {
          super(CloudOSLogin.this, "PATCH", REST_PATH, content, com.google.api.services.oslogin.v1beta.model.SshPublicKey.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^users/[^/]+/sshPublicKeys/[^/]+$");
          }
        }

        @Override
        public Patch set$Xgafv(java.lang.String $Xgafv) {
          return (Patch) super.set$Xgafv($Xgafv);
        }

        @Override
        public Patch setAccessToken(java.lang.String accessToken) {
          return (Patch) super.setAccessToken(accessToken);
        }

        @Override
        public Patch setAlt(java.lang.String alt) {
          return (Patch) super.setAlt(alt);
        }

        @Override
        public Patch setCallback(java.lang.String callback) {
          return (Patch) super.setCallback(callback);
        }

        @Override
        public Patch setFields(java.lang.String fields) {
          return (Patch) super.setFields(fields);
        }

        @Override
        public Patch setKey(java.lang.String key) {
          return (Patch) super.setKey(key);
        }

        @Override
        public Patch setOauthToken(java.lang.String oauthToken) {
          return (Patch) super.setOauthToken(oauthToken);
        }

        @Override
        public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Patch) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Patch setQuotaUser(java.lang.String quotaUser) {
          return (Patch) super.setQuotaUser(quotaUser);
        }

        @Override
        public Patch setUploadType(java.lang.String uploadType) {
          return (Patch) super.setUploadType(uploadType);
        }

        @Override
        public Patch setUploadProtocol(java.lang.String uploadProtocol) {
          return (Patch) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The fingerprint of the public key to update. Public keys are identified by their SHA-256
         * fingerprint. The fingerprint of the public key is in format
         * `users/{user}/sshPublicKeys/{fingerprint}`.
         */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** The fingerprint of the public key to update. Public keys are identified by their SHA-256
       fingerprint. The fingerprint of the public key is in format
       `users/{user}/sshPublicKeys/{fingerprint}`.
         */
        public java.lang.String getName() {
          return name;
        }

        /**
         * The fingerprint of the public key to update. Public keys are identified by their SHA-256
         * fingerprint. The fingerprint of the public key is in format
         * `users/{user}/sshPublicKeys/{fingerprint}`.
         */
        public Patch setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^users/[^/]+/sshPublicKeys/[^/]+$");
          }
          this.name = name;
          return this;
        }

        /** Mask to control which fields get updated. Updates all if not present. */
        @com.google.api.client.util.Key
        private String updateMask;

        /** Mask to control which fields get updated. Updates all if not present.
         */
        public String getUpdateMask() {
          return updateMask;
        }

        /** Mask to control which fields get updated. Updates all if not present. */
        public Patch setUpdateMask(String updateMask) {
          this.updateMask = updateMask;
          return this;
        }

        @Override
        public Patch set(String parameterName, Object value) {
          return (Patch) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link CloudOSLogin}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link CloudOSLogin}. */
    @Override
    public CloudOSLogin build() {
      return new CloudOSLogin(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link CloudOSLoginRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setCloudOSLoginRequestInitializer(
        CloudOSLoginRequestInitializer cloudosloginRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(cloudosloginRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
