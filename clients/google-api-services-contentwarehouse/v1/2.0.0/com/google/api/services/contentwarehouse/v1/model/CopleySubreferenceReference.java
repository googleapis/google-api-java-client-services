/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Represents a reference that may be part of a larger compound reference. For example, "my
 * brother's birthday" will have a subreference that may have references for "my brother".
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CopleySubreferenceReference extends com.google.api.client.json.GenericJson {

  /**
   * Type of reference. There may be multiple for a single reference (e.g. relationship and
   * contact).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> personalReferenceTypes;

  /**
   * Highest reference score for any references merged in this span.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float referenceScore;

  /**
   * Only set for unresolved relationship references and can be used to get the canonical word for
   * the relationship (e.g. "mother") in TTS.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CopleyLexicalMetadata relationshipLexicalInfo;

  /**
   * Type of reference. There may be multiple for a single reference (e.g. relationship and
   * contact).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPersonalReferenceTypes() {
    return personalReferenceTypes;
  }

  /**
   * Type of reference. There may be multiple for a single reference (e.g. relationship and
   * contact).
   * @param personalReferenceTypes personalReferenceTypes or {@code null} for none
   */
  public CopleySubreferenceReference setPersonalReferenceTypes(java.util.List<java.lang.String> personalReferenceTypes) {
    this.personalReferenceTypes = personalReferenceTypes;
    return this;
  }

  /**
   * Highest reference score for any references merged in this span.
   * @return value or {@code null} for none
   */
  public java.lang.Float getReferenceScore() {
    return referenceScore;
  }

  /**
   * Highest reference score for any references merged in this span.
   * @param referenceScore referenceScore or {@code null} for none
   */
  public CopleySubreferenceReference setReferenceScore(java.lang.Float referenceScore) {
    this.referenceScore = referenceScore;
    return this;
  }

  /**
   * Only set for unresolved relationship references and can be used to get the canonical word for
   * the relationship (e.g. "mother") in TTS.
   * @return value or {@code null} for none
   */
  public CopleyLexicalMetadata getRelationshipLexicalInfo() {
    return relationshipLexicalInfo;
  }

  /**
   * Only set for unresolved relationship references and can be used to get the canonical word for
   * the relationship (e.g. "mother") in TTS.
   * @param relationshipLexicalInfo relationshipLexicalInfo or {@code null} for none
   */
  public CopleySubreferenceReference setRelationshipLexicalInfo(CopleyLexicalMetadata relationshipLexicalInfo) {
    this.relationshipLexicalInfo = relationshipLexicalInfo;
    return this;
  }

  @Override
  public CopleySubreferenceReference set(String fieldName, Object value) {
    return (CopleySubreferenceReference) super.set(fieldName, value);
  }

  @Override
  public CopleySubreferenceReference clone() {
    return (CopleySubreferenceReference) super.clone();
  }

}
