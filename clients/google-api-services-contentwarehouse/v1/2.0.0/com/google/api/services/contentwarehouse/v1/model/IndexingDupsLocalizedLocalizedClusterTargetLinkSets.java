/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for IndexingDupsLocalizedLocalizedClusterTargetLinkSets.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingDupsLocalizedLocalizedClusterTargetLinkSets extends com.google.api.client.json.GenericJson {

  /**
   * Direct links are the simplest scenarios where A simply links to B.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<IndexingDupsLocalizedLocalizedClusterTargetLink> directTargetLink;

  static {
    // hack to force ProGuard to consider IndexingDupsLocalizedLocalizedClusterTargetLink used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(IndexingDupsLocalizedLocalizedClusterTargetLink.class);
  }

  /**
   * Repeated field for URLs that are not directly linking to the document TargetLink refers to. We
   * can encounter the following scenario: A -> Links to B -> links to C (i.e. without (A) linking
   * to (C)). In the context of B, indirect_inclusion would include the link to 'C' but not the link
   * back to 'A'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<IndexingDupsLocalizedLocalizedClusterTargetLink> indirectTargetLink;

  static {
    // hack to force ProGuard to consider IndexingDupsLocalizedLocalizedClusterTargetLink used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(IndexingDupsLocalizedLocalizedClusterTargetLink.class);
  }

  /**
   * Direct links are the simplest scenarios where A simply links to B.
   * @return value or {@code null} for none
   */
  public java.util.List<IndexingDupsLocalizedLocalizedClusterTargetLink> getDirectTargetLink() {
    return directTargetLink;
  }

  /**
   * Direct links are the simplest scenarios where A simply links to B.
   * @param directTargetLink directTargetLink or {@code null} for none
   */
  public IndexingDupsLocalizedLocalizedClusterTargetLinkSets setDirectTargetLink(java.util.List<IndexingDupsLocalizedLocalizedClusterTargetLink> directTargetLink) {
    this.directTargetLink = directTargetLink;
    return this;
  }

  /**
   * Repeated field for URLs that are not directly linking to the document TargetLink refers to. We
   * can encounter the following scenario: A -> Links to B -> links to C (i.e. without (A) linking
   * to (C)). In the context of B, indirect_inclusion would include the link to 'C' but not the link
   * back to 'A'.
   * @return value or {@code null} for none
   */
  public java.util.List<IndexingDupsLocalizedLocalizedClusterTargetLink> getIndirectTargetLink() {
    return indirectTargetLink;
  }

  /**
   * Repeated field for URLs that are not directly linking to the document TargetLink refers to. We
   * can encounter the following scenario: A -> Links to B -> links to C (i.e. without (A) linking
   * to (C)). In the context of B, indirect_inclusion would include the link to 'C' but not the link
   * back to 'A'.
   * @param indirectTargetLink indirectTargetLink or {@code null} for none
   */
  public IndexingDupsLocalizedLocalizedClusterTargetLinkSets setIndirectTargetLink(java.util.List<IndexingDupsLocalizedLocalizedClusterTargetLink> indirectTargetLink) {
    this.indirectTargetLink = indirectTargetLink;
    return this;
  }

  @Override
  public IndexingDupsLocalizedLocalizedClusterTargetLinkSets set(String fieldName, Object value) {
    return (IndexingDupsLocalizedLocalizedClusterTargetLinkSets) super.set(fieldName, value);
  }

  @Override
  public IndexingDupsLocalizedLocalizedClusterTargetLinkSets clone() {
    return (IndexingDupsLocalizedLocalizedClusterTargetLinkSets) super.clone();
  }

}
