/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.toolresults.model;

/**
 * A step that represents running tests.
 *
 * It accepts ant-junit xml files which will be parsed into structured test results by the service.
 * Xml file paths are updated in order to append more files, however they can't be deleted.
 *
 * Users can also add test results manually by using the test_result field.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Tool Results API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TestExecutionStep extends com.google.api.client.json.GenericJson {

  /**
   * Issues observed during the test execution.
   *
   * For example, if the mobile app under test crashed during the test, the error message and the
   * stack trace content can be recorded here to assist debugging.
   *
   * - In response: present if set by create or update - In create/update request: optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<TestIssue> testIssues;

  /**
   * List of test suite overview contents. This could be parsed from xUnit XML log by server, or
   * uploaded directly by user. This references should only be called when test suites are fully
   * parsed or uploaded.
   *
   * The maximum allowed number of test suite overviews per step is 1000.
   *
   * - In response: always set - In create request: optional - In update request: never (use
   * publishXunitXmlFiles custom method instead)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<TestSuiteOverview> testSuiteOverviews;

  /**
   * The timing break down of the test execution.
   *
   * - In response: present if set by create or update - In create/update request: optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TestTiming testTiming;

  /**
   * Represents the execution of the test runner.
   *
   * The exit code of this tool will be used to determine if the test passed.
   *
   * - In response: always set - In create/update request: optional
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ToolExecution toolExecution;

  /**
   * Issues observed during the test execution.
   *
   * For example, if the mobile app under test crashed during the test, the error message and the
   * stack trace content can be recorded here to assist debugging.
   *
   * - In response: present if set by create or update - In create/update request: optional
   * @return value or {@code null} for none
   */
  public java.util.List<TestIssue> getTestIssues() {
    return testIssues;
  }

  /**
   * Issues observed during the test execution.
   *
   * For example, if the mobile app under test crashed during the test, the error message and the
   * stack trace content can be recorded here to assist debugging.
   *
   * - In response: present if set by create or update - In create/update request: optional
   * @param testIssues testIssues or {@code null} for none
   */
  public TestExecutionStep setTestIssues(java.util.List<TestIssue> testIssues) {
    this.testIssues = testIssues;
    return this;
  }

  /**
   * List of test suite overview contents. This could be parsed from xUnit XML log by server, or
   * uploaded directly by user. This references should only be called when test suites are fully
   * parsed or uploaded.
   *
   * The maximum allowed number of test suite overviews per step is 1000.
   *
   * - In response: always set - In create request: optional - In update request: never (use
   * publishXunitXmlFiles custom method instead)
   * @return value or {@code null} for none
   */
  public java.util.List<TestSuiteOverview> getTestSuiteOverviews() {
    return testSuiteOverviews;
  }

  /**
   * List of test suite overview contents. This could be parsed from xUnit XML log by server, or
   * uploaded directly by user. This references should only be called when test suites are fully
   * parsed or uploaded.
   *
   * The maximum allowed number of test suite overviews per step is 1000.
   *
   * - In response: always set - In create request: optional - In update request: never (use
   * publishXunitXmlFiles custom method instead)
   * @param testSuiteOverviews testSuiteOverviews or {@code null} for none
   */
  public TestExecutionStep setTestSuiteOverviews(java.util.List<TestSuiteOverview> testSuiteOverviews) {
    this.testSuiteOverviews = testSuiteOverviews;
    return this;
  }

  /**
   * The timing break down of the test execution.
   *
   * - In response: present if set by create or update - In create/update request: optional
   * @return value or {@code null} for none
   */
  public TestTiming getTestTiming() {
    return testTiming;
  }

  /**
   * The timing break down of the test execution.
   *
   * - In response: present if set by create or update - In create/update request: optional
   * @param testTiming testTiming or {@code null} for none
   */
  public TestExecutionStep setTestTiming(TestTiming testTiming) {
    this.testTiming = testTiming;
    return this;
  }

  /**
   * Represents the execution of the test runner.
   *
   * The exit code of this tool will be used to determine if the test passed.
   *
   * - In response: always set - In create/update request: optional
   * @return value or {@code null} for none
   */
  public ToolExecution getToolExecution() {
    return toolExecution;
  }

  /**
   * Represents the execution of the test runner.
   *
   * The exit code of this tool will be used to determine if the test passed.
   *
   * - In response: always set - In create/update request: optional
   * @param toolExecution toolExecution or {@code null} for none
   */
  public TestExecutionStep setToolExecution(ToolExecution toolExecution) {
    this.toolExecution = toolExecution;
    return this;
  }

  @Override
  public TestExecutionStep set(String fieldName, Object value) {
    return (TestExecutionStep) super.set(fieldName, value);
  }

  @Override
  public TestExecutionStep clone() {
    return (TestExecutionStep) super.clone();
  }

}
