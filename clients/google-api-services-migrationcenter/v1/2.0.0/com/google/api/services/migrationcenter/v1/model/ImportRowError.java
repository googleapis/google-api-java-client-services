/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.migrationcenter.v1.model;

/**
 * A resource that reports the import job errors at row level.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Migration Center API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ImportRowError extends com.google.api.client.json.GenericJson {

  /**
   * Error details for an archive file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImportRowErrorArchiveErrorDetails archiveError;

  /**
   * Output only. The asset title.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String assetTitle;

  /**
   * Error details for a CSV file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImportRowErrorCsvErrorDetails csvError;

  /**
   * The list of errors detected in the row.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ImportError> errors;

  static {
    // hack to force ProGuard to consider ImportError used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ImportError.class);
  }

  /**
   * The row number where the error was detected.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rowNumber;

  /**
   * The name of the VM in the row.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vmName;

  /**
   * The VM UUID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String vmUuid;

  /**
   * Error details for an XLSX file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ImportRowErrorXlsxErrorDetails xlsxError;

  /**
   * Error details for an archive file.
   * @return value or {@code null} for none
   */
  public ImportRowErrorArchiveErrorDetails getArchiveError() {
    return archiveError;
  }

  /**
   * Error details for an archive file.
   * @param archiveError archiveError or {@code null} for none
   */
  public ImportRowError setArchiveError(ImportRowErrorArchiveErrorDetails archiveError) {
    this.archiveError = archiveError;
    return this;
  }

  /**
   * Output only. The asset title.
   * @return value or {@code null} for none
   */
  public java.lang.String getAssetTitle() {
    return assetTitle;
  }

  /**
   * Output only. The asset title.
   * @param assetTitle assetTitle or {@code null} for none
   */
  public ImportRowError setAssetTitle(java.lang.String assetTitle) {
    this.assetTitle = assetTitle;
    return this;
  }

  /**
   * Error details for a CSV file.
   * @return value or {@code null} for none
   */
  public ImportRowErrorCsvErrorDetails getCsvError() {
    return csvError;
  }

  /**
   * Error details for a CSV file.
   * @param csvError csvError or {@code null} for none
   */
  public ImportRowError setCsvError(ImportRowErrorCsvErrorDetails csvError) {
    this.csvError = csvError;
    return this;
  }

  /**
   * The list of errors detected in the row.
   * @return value or {@code null} for none
   */
  public java.util.List<ImportError> getErrors() {
    return errors;
  }

  /**
   * The list of errors detected in the row.
   * @param errors errors or {@code null} for none
   */
  public ImportRowError setErrors(java.util.List<ImportError> errors) {
    this.errors = errors;
    return this;
  }

  /**
   * The row number where the error was detected.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRowNumber() {
    return rowNumber;
  }

  /**
   * The row number where the error was detected.
   * @param rowNumber rowNumber or {@code null} for none
   */
  public ImportRowError setRowNumber(java.lang.Integer rowNumber) {
    this.rowNumber = rowNumber;
    return this;
  }

  /**
   * The name of the VM in the row.
   * @return value or {@code null} for none
   */
  public java.lang.String getVmName() {
    return vmName;
  }

  /**
   * The name of the VM in the row.
   * @param vmName vmName or {@code null} for none
   */
  public ImportRowError setVmName(java.lang.String vmName) {
    this.vmName = vmName;
    return this;
  }

  /**
   * The VM UUID.
   * @return value or {@code null} for none
   */
  public java.lang.String getVmUuid() {
    return vmUuid;
  }

  /**
   * The VM UUID.
   * @param vmUuid vmUuid or {@code null} for none
   */
  public ImportRowError setVmUuid(java.lang.String vmUuid) {
    this.vmUuid = vmUuid;
    return this;
  }

  /**
   * Error details for an XLSX file.
   * @return value or {@code null} for none
   */
  public ImportRowErrorXlsxErrorDetails getXlsxError() {
    return xlsxError;
  }

  /**
   * Error details for an XLSX file.
   * @param xlsxError xlsxError or {@code null} for none
   */
  public ImportRowError setXlsxError(ImportRowErrorXlsxErrorDetails xlsxError) {
    this.xlsxError = xlsxError;
    return this;
  }

  @Override
  public ImportRowError set(String fieldName, Object value) {
    return (ImportRowError) super.set(fieldName, value);
  }

  @Override
  public ImportRowError clone() {
    return (ImportRowError) super.clone();
  }

}
