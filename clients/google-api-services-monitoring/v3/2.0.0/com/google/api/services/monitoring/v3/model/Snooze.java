/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.monitoring.v3.model;

/**
 * A Snooze will prevent any alerts from being opened, and close any that are already open. The
 * Snooze will work on alerts that match the criteria defined in the Snooze. The Snooze will be
 * active from interval.start_time through interval.end_time.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Monitoring API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Snooze extends com.google.api.client.json.GenericJson {

  /**
   * Required. This defines the criteria for applying the Snooze. See Criteria for more information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Criteria criteria;

  /**
   * Required. A display name for the Snooze. This can be, at most, 512 unicode characters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Required. The Snooze will be active from interval.start_time through interval.end_time.
   * interval.start_time cannot be in the past. There is a 15 second clock skew to account for the
   * time it takes for a request to reach the API from the UI.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TimeInterval interval;

  /**
   * Required. The name of the Snooze. The format is:
   * projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID] The ID of the Snooze will be generated by
   * the system.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Required. This defines the criteria for applying the Snooze. See Criteria for more information.
   * @return value or {@code null} for none
   */
  public Criteria getCriteria() {
    return criteria;
  }

  /**
   * Required. This defines the criteria for applying the Snooze. See Criteria for more information.
   * @param criteria criteria or {@code null} for none
   */
  public Snooze setCriteria(Criteria criteria) {
    this.criteria = criteria;
    return this;
  }

  /**
   * Required. A display name for the Snooze. This can be, at most, 512 unicode characters.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Required. A display name for the Snooze. This can be, at most, 512 unicode characters.
   * @param displayName displayName or {@code null} for none
   */
  public Snooze setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The Snooze will be active from interval.start_time through interval.end_time.
   * interval.start_time cannot be in the past. There is a 15 second clock skew to account for the
   * time it takes for a request to reach the API from the UI.
   * @return value or {@code null} for none
   */
  public TimeInterval getInterval() {
    return interval;
  }

  /**
   * Required. The Snooze will be active from interval.start_time through interval.end_time.
   * interval.start_time cannot be in the past. There is a 15 second clock skew to account for the
   * time it takes for a request to reach the API from the UI.
   * @param interval interval or {@code null} for none
   */
  public Snooze setInterval(TimeInterval interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Required. The name of the Snooze. The format is:
   * projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID] The ID of the Snooze will be generated by
   * the system.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required. The name of the Snooze. The format is:
   * projects/[PROJECT_ID_OR_NUMBER]/snoozes/[SNOOZE_ID] The ID of the Snooze will be generated by
   * the system.
   * @param name name or {@code null} for none
   */
  public Snooze setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  @Override
  public Snooze set(String fieldName, Object value) {
    return (Snooze) super.set(fieldName, value);
  }

  @Override
  public Snooze clone() {
    return (Snooze) super.clone();
  }

}
