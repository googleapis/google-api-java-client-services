/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.androidenterprise.model;

/**
 * The existence of an Installs resource indicates that an app is installed on a particular device
 * (or that an install is pending).
 *
 * The API can be used to create an install resource using the update method. This triggers the
 * actual install of the app on the device. If the user does not already have an entitlement for the
 * app, then an attempt is made to create one. If this fails (for example, because the app is not
 * free and there is no available license), then the creation of the install fails.
 *
 * The API can also be used to update an installed app. If the update method is used on an existing
 * install, then the app will be updated to the latest available version.
 *
 * Note that it is not possible to force the installation of a specific version of an app: the
 * version code is read-only.
 *
 * If a user installs an app themselves (as permitted by the enterprise), then again an install
 * resource and possibly an entitlement resource are automatically created.
 *
 * The API can also be used to delete an install resource, which triggers the removal of the app
 * from the device. Note that deleting an install does not automatically remove the corresponding
 * entitlement, even if there are no remaining installs. The install resource will also be deleted
 * if the user uninstalls the app themselves.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Play EMM API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Install extends com.google.api.client.json.GenericJson {

  /**
   * Install state. The state "installPending" means that an install request has recently been made
   * and download to the device is in progress. The state "installed" means that the app has been
   * installed. This field is read-only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String installState;

  /**
   * Identifies what kind of resource this is. Value: the fixed string "androidenterprise#install".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kind;

  /**
   * The ID of the product that the install is for. For example, "app:com.google.android.gm".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String productId;

  /**
   * The version of the installed product. Guaranteed to be set only if the install state is
   * "installed".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer versionCode;

  /**
   * Install state. The state "installPending" means that an install request has recently been made
   * and download to the device is in progress. The state "installed" means that the app has been
   * installed. This field is read-only.
   * @return value or {@code null} for none
   */
  public java.lang.String getInstallState() {
    return installState;
  }

  /**
   * Install state. The state "installPending" means that an install request has recently been made
   * and download to the device is in progress. The state "installed" means that the app has been
   * installed. This field is read-only.
   * @param installState installState or {@code null} for none
   */
  public Install setInstallState(java.lang.String installState) {
    this.installState = installState;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string "androidenterprise#install".
   * @return value or {@code null} for none
   */
  public java.lang.String getKind() {
    return kind;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string "androidenterprise#install".
   * @param kind kind or {@code null} for none
   */
  public Install setKind(java.lang.String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The ID of the product that the install is for. For example, "app:com.google.android.gm".
   * @return value or {@code null} for none
   */
  public java.lang.String getProductId() {
    return productId;
  }

  /**
   * The ID of the product that the install is for. For example, "app:com.google.android.gm".
   * @param productId productId or {@code null} for none
   */
  public Install setProductId(java.lang.String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * The version of the installed product. Guaranteed to be set only if the install state is
   * "installed".
   * @return value or {@code null} for none
   */
  public java.lang.Integer getVersionCode() {
    return versionCode;
  }

  /**
   * The version of the installed product. Guaranteed to be set only if the install state is
   * "installed".
   * @param versionCode versionCode or {@code null} for none
   */
  public Install setVersionCode(java.lang.Integer versionCode) {
    this.versionCode = versionCode;
    return this;
  }

  @Override
  public Install set(String fieldName, Object value) {
    return (Install) super.set(fieldName, value);
  }

  @Override
  public Install clone() {
    return (Install) super.clone();
  }

}
