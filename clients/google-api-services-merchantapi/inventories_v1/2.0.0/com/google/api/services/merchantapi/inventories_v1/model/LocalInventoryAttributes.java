/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.merchantapi.inventories_v1.model;

/**
 * Local inventory attributes.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Merchant API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class LocalInventoryAttributes extends com.google.api.client.json.GenericJson {

  /**
   * [Availability](https://support.google.com/merchants/answer/3061342) of the product at this
   * store.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String availability;

  /**
   * Optional. Location of the product inside the store. Maximum length is 20 bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String instoreProductLocation;

  /**
   * Optional. Supported [pickup method](https://support.google.com/merchants/answer/3061342) for
   * this product. Unless the value is `"not supported"`, this field must be submitted together with
   * `pickupSla`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pickupMethod;

  /**
   * Optional. Relative time period from the order date for an order for this product, from this
   * store, to be ready for pickup. Must be submitted with `pickupMethod`. See more details
   * [here](https://support.google.com/merchants/answer/3061342).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pickupSla;

  /**
   * Optional. Price of the product at this store.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Price price;

  /**
   * Optional. Quantity of the product available at this store. Must be greater than or equal to
   * zero.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long quantity;

  /**
   * Optional. Sale price of the product at this store. Mandatory if `salePriceEffectiveDate` is
   * defined.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Price salePrice;

  /**
   * Optional. The `TimePeriod` of the sale at this store.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Interval salePriceEffectiveDate;

  /**
   * [Availability](https://support.google.com/merchants/answer/3061342) of the product at this
   * store.
   * @return value or {@code null} for none
   */
  public java.lang.String getAvailability() {
    return availability;
  }

  /**
   * [Availability](https://support.google.com/merchants/answer/3061342) of the product at this
   * store.
   * @param availability availability or {@code null} for none
   */
  public LocalInventoryAttributes setAvailability(java.lang.String availability) {
    this.availability = availability;
    return this;
  }

  /**
   * Optional. Location of the product inside the store. Maximum length is 20 bytes.
   * @return value or {@code null} for none
   */
  public java.lang.String getInstoreProductLocation() {
    return instoreProductLocation;
  }

  /**
   * Optional. Location of the product inside the store. Maximum length is 20 bytes.
   * @param instoreProductLocation instoreProductLocation or {@code null} for none
   */
  public LocalInventoryAttributes setInstoreProductLocation(java.lang.String instoreProductLocation) {
    this.instoreProductLocation = instoreProductLocation;
    return this;
  }

  /**
   * Optional. Supported [pickup method](https://support.google.com/merchants/answer/3061342) for
   * this product. Unless the value is `"not supported"`, this field must be submitted together with
   * `pickupSla`.
   * @return value or {@code null} for none
   */
  public java.lang.String getPickupMethod() {
    return pickupMethod;
  }

  /**
   * Optional. Supported [pickup method](https://support.google.com/merchants/answer/3061342) for
   * this product. Unless the value is `"not supported"`, this field must be submitted together with
   * `pickupSla`.
   * @param pickupMethod pickupMethod or {@code null} for none
   */
  public LocalInventoryAttributes setPickupMethod(java.lang.String pickupMethod) {
    this.pickupMethod = pickupMethod;
    return this;
  }

  /**
   * Optional. Relative time period from the order date for an order for this product, from this
   * store, to be ready for pickup. Must be submitted with `pickupMethod`. See more details
   * [here](https://support.google.com/merchants/answer/3061342).
   * @return value or {@code null} for none
   */
  public java.lang.String getPickupSla() {
    return pickupSla;
  }

  /**
   * Optional. Relative time period from the order date for an order for this product, from this
   * store, to be ready for pickup. Must be submitted with `pickupMethod`. See more details
   * [here](https://support.google.com/merchants/answer/3061342).
   * @param pickupSla pickupSla or {@code null} for none
   */
  public LocalInventoryAttributes setPickupSla(java.lang.String pickupSla) {
    this.pickupSla = pickupSla;
    return this;
  }

  /**
   * Optional. Price of the product at this store.
   * @return value or {@code null} for none
   */
  public Price getPrice() {
    return price;
  }

  /**
   * Optional. Price of the product at this store.
   * @param price price or {@code null} for none
   */
  public LocalInventoryAttributes setPrice(Price price) {
    this.price = price;
    return this;
  }

  /**
   * Optional. Quantity of the product available at this store. Must be greater than or equal to
   * zero.
   * @return value or {@code null} for none
   */
  public java.lang.Long getQuantity() {
    return quantity;
  }

  /**
   * Optional. Quantity of the product available at this store. Must be greater than or equal to
   * zero.
   * @param quantity quantity or {@code null} for none
   */
  public LocalInventoryAttributes setQuantity(java.lang.Long quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Optional. Sale price of the product at this store. Mandatory if `salePriceEffectiveDate` is
   * defined.
   * @return value or {@code null} for none
   */
  public Price getSalePrice() {
    return salePrice;
  }

  /**
   * Optional. Sale price of the product at this store. Mandatory if `salePriceEffectiveDate` is
   * defined.
   * @param salePrice salePrice or {@code null} for none
   */
  public LocalInventoryAttributes setSalePrice(Price salePrice) {
    this.salePrice = salePrice;
    return this;
  }

  /**
   * Optional. The `TimePeriod` of the sale at this store.
   * @return value or {@code null} for none
   */
  public Interval getSalePriceEffectiveDate() {
    return salePriceEffectiveDate;
  }

  /**
   * Optional. The `TimePeriod` of the sale at this store.
   * @param salePriceEffectiveDate salePriceEffectiveDate or {@code null} for none
   */
  public LocalInventoryAttributes setSalePriceEffectiveDate(Interval salePriceEffectiveDate) {
    this.salePriceEffectiveDate = salePriceEffectiveDate;
    return this;
  }

  @Override
  public LocalInventoryAttributes set(String fieldName, Object value) {
    return (LocalInventoryAttributes) super.set(fieldName, value);
  }

  @Override
  public LocalInventoryAttributes clone() {
    return (LocalInventoryAttributes) super.clone();
  }

}
