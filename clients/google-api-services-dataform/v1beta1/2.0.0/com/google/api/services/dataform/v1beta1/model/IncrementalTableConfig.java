/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.dataform.v1beta1.model;

/**
 * Contains settings for relations of type `INCREMENTAL_TABLE`.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Dataform API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IncrementalTableConfig extends com.google.api.client.json.GenericJson {

  /**
   * SQL statements to be executed after inserting new rows into the relation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> incrementalPostOperations;

  /**
   * SQL statements to be executed before inserting new rows into the relation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> incrementalPreOperations;

  /**
   * The SELECT query which returns rows which should be inserted into the relation if it already
   * exists and is not being refreshed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String incrementalSelectQuery;

  /**
   * Whether this table should be protected from being refreshed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean refreshDisabled;

  /**
   * A set of columns or SQL expressions used to define row uniqueness. If any duplicates are
   * discovered (as defined by `unique_key_parts`), only the newly selected rows (as defined by
   * `incremental_select_query`) will be included in the relation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> uniqueKeyParts;

  /**
   * A SQL expression conditional used to limit the set of existing rows considered for a merge
   * operation (see `unique_key_parts` for more information).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String updatePartitionFilter;

  /**
   * SQL statements to be executed after inserting new rows into the relation.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getIncrementalPostOperations() {
    return incrementalPostOperations;
  }

  /**
   * SQL statements to be executed after inserting new rows into the relation.
   * @param incrementalPostOperations incrementalPostOperations or {@code null} for none
   */
  public IncrementalTableConfig setIncrementalPostOperations(java.util.List<java.lang.String> incrementalPostOperations) {
    this.incrementalPostOperations = incrementalPostOperations;
    return this;
  }

  /**
   * SQL statements to be executed before inserting new rows into the relation.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getIncrementalPreOperations() {
    return incrementalPreOperations;
  }

  /**
   * SQL statements to be executed before inserting new rows into the relation.
   * @param incrementalPreOperations incrementalPreOperations or {@code null} for none
   */
  public IncrementalTableConfig setIncrementalPreOperations(java.util.List<java.lang.String> incrementalPreOperations) {
    this.incrementalPreOperations = incrementalPreOperations;
    return this;
  }

  /**
   * The SELECT query which returns rows which should be inserted into the relation if it already
   * exists and is not being refreshed.
   * @return value or {@code null} for none
   */
  public java.lang.String getIncrementalSelectQuery() {
    return incrementalSelectQuery;
  }

  /**
   * The SELECT query which returns rows which should be inserted into the relation if it already
   * exists and is not being refreshed.
   * @param incrementalSelectQuery incrementalSelectQuery or {@code null} for none
   */
  public IncrementalTableConfig setIncrementalSelectQuery(java.lang.String incrementalSelectQuery) {
    this.incrementalSelectQuery = incrementalSelectQuery;
    return this;
  }

  /**
   * Whether this table should be protected from being refreshed.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRefreshDisabled() {
    return refreshDisabled;
  }

  /**
   * Whether this table should be protected from being refreshed.
   * @param refreshDisabled refreshDisabled or {@code null} for none
   */
  public IncrementalTableConfig setRefreshDisabled(java.lang.Boolean refreshDisabled) {
    this.refreshDisabled = refreshDisabled;
    return this;
  }

  /**
   * A set of columns or SQL expressions used to define row uniqueness. If any duplicates are
   * discovered (as defined by `unique_key_parts`), only the newly selected rows (as defined by
   * `incremental_select_query`) will be included in the relation.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getUniqueKeyParts() {
    return uniqueKeyParts;
  }

  /**
   * A set of columns or SQL expressions used to define row uniqueness. If any duplicates are
   * discovered (as defined by `unique_key_parts`), only the newly selected rows (as defined by
   * `incremental_select_query`) will be included in the relation.
   * @param uniqueKeyParts uniqueKeyParts or {@code null} for none
   */
  public IncrementalTableConfig setUniqueKeyParts(java.util.List<java.lang.String> uniqueKeyParts) {
    this.uniqueKeyParts = uniqueKeyParts;
    return this;
  }

  /**
   * A SQL expression conditional used to limit the set of existing rows considered for a merge
   * operation (see `unique_key_parts` for more information).
   * @return value or {@code null} for none
   */
  public java.lang.String getUpdatePartitionFilter() {
    return updatePartitionFilter;
  }

  /**
   * A SQL expression conditional used to limit the set of existing rows considered for a merge
   * operation (see `unique_key_parts` for more information).
   * @param updatePartitionFilter updatePartitionFilter or {@code null} for none
   */
  public IncrementalTableConfig setUpdatePartitionFilter(java.lang.String updatePartitionFilter) {
    this.updatePartitionFilter = updatePartitionFilter;
    return this;
  }

  @Override
  public IncrementalTableConfig set(String fieldName, Object value) {
    return (IncrementalTableConfig) super.set(fieldName, value);
  }

  @Override
  public IncrementalTableConfig clone() {
    return (IncrementalTableConfig) super.clone();
  }

}
