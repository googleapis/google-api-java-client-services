/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Used to provide a search operator for text properties. This is optional. Search operators let
 * users restrict the query to specific fields relevant to the type of item being searched.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TextOperatorOptions extends com.google.api.client.json.GenericJson {

  /**
   * If true, the text value will be tokenized as one atomic value in operator searches and facet
   * matches. For example, if the operator name is "genre" and the value is "science-fiction" the
   * query restrictions "genre:science" and "genre:fiction" will not match the item; "genre:science-
   * fiction" will. Value matching is case-sensitive and does not remove special characters. If
   * false, the text will be tokenized. For example, if the value is "science-fiction" the queries
   * "genre:science" and "genre:fiction" will match the item.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean exactMatchWithOperator;

  /**
   * Indicates the operator name required in the query in order to isolate the text property. For
   * example, if operatorName is *subject* and the property's name is *subjectLine*, then queries
   * like *subject:value* will show results only where the value of the property named *subjectLine*
   * matches *value*. By contrast, a search that uses the same *value* without an operator will
   * return all items where *value* matches the value of any text properties or text within the
   * content field for the item. The operator name can only contain lowercase letters (a-z). The
   * maximum length is 32 characters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String operatorName;

  /**
   * If true, the text value will be tokenized as one atomic value in operator searches and facet
   * matches. For example, if the operator name is "genre" and the value is "science-fiction" the
   * query restrictions "genre:science" and "genre:fiction" will not match the item; "genre:science-
   * fiction" will. Value matching is case-sensitive and does not remove special characters. If
   * false, the text will be tokenized. For example, if the value is "science-fiction" the queries
   * "genre:science" and "genre:fiction" will match the item.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getExactMatchWithOperator() {
    return exactMatchWithOperator;
  }

  /**
   * If true, the text value will be tokenized as one atomic value in operator searches and facet
   * matches. For example, if the operator name is "genre" and the value is "science-fiction" the
   * query restrictions "genre:science" and "genre:fiction" will not match the item; "genre:science-
   * fiction" will. Value matching is case-sensitive and does not remove special characters. If
   * false, the text will be tokenized. For example, if the value is "science-fiction" the queries
   * "genre:science" and "genre:fiction" will match the item.
   * @param exactMatchWithOperator exactMatchWithOperator or {@code null} for none
   */
  public TextOperatorOptions setExactMatchWithOperator(java.lang.Boolean exactMatchWithOperator) {
    this.exactMatchWithOperator = exactMatchWithOperator;
    return this;
  }

  /**
   * Indicates the operator name required in the query in order to isolate the text property. For
   * example, if operatorName is *subject* and the property's name is *subjectLine*, then queries
   * like *subject:value* will show results only where the value of the property named *subjectLine*
   * matches *value*. By contrast, a search that uses the same *value* without an operator will
   * return all items where *value* matches the value of any text properties or text within the
   * content field for the item. The operator name can only contain lowercase letters (a-z). The
   * maximum length is 32 characters.
   * @return value or {@code null} for none
   */
  public java.lang.String getOperatorName() {
    return operatorName;
  }

  /**
   * Indicates the operator name required in the query in order to isolate the text property. For
   * example, if operatorName is *subject* and the property's name is *subjectLine*, then queries
   * like *subject:value* will show results only where the value of the property named *subjectLine*
   * matches *value*. By contrast, a search that uses the same *value* without an operator will
   * return all items where *value* matches the value of any text properties or text within the
   * content field for the item. The operator name can only contain lowercase letters (a-z). The
   * maximum length is 32 characters.
   * @param operatorName operatorName or {@code null} for none
   */
  public TextOperatorOptions setOperatorName(java.lang.String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  @Override
  public TextOperatorOptions set(String fieldName, Object value) {
    return (TextOperatorOptions) super.set(fieldName, value);
  }

  @Override
  public TextOperatorOptions clone() {
    return (TextOperatorOptions) super.clone();
  }

}
