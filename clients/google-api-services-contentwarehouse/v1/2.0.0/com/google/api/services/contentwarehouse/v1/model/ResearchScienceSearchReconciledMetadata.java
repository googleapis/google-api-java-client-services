/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A proto for storing inferred and reconciled metadata for Science Search. Next available tag: 71
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ResearchScienceSearchReconciledMetadata extends com.google.api.client.json.GenericJson {

  /**
   * Alternate names and acronyms for the dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> alternateName;

  /**
   * A string representation of the authors of the dataset, collected from author and creator in raw
   * metadata. The exact format (e.g., comma-separated, etc.) is up to the extender that populates
   * this field. The assumption is that this string may appear in the UI "as is".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String authorList;

  /**
   * A hash of the fields copied by BasicMetadataExtender and the importers. See
   * cs/research/science_search/backend/extender/basic_metadata_extender.h for the list of fields.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger basicFieldsHash;

  /**
   * Catalog that this dataset is a part of.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScienceSearchCatalog catalog;

  /**
   * Compact Identifiers (for example "RRID:SCR_002088") that can be resolved by Identifiers.org or
   * N2T.net meta-resolvers.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> compactIdentifier;

  /**
   * Compact Identifier(s) extracted from the citation field. Like in the case of DOI(s) those
   * identify the articles related to the dataset rather than the dataset itself.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> compactIdentifierFromCitation;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScienceSearchDate coverageEndDate;

  /**
   * The start and end date that the dataset covers. If the dataset covers a single timepoint, then
   * start and end dates are the same. Use the ISO 8601 format for dates (e.g., 2006-05-23).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScienceSearchDate coverageStartDate;

  /**
   * The dataset in downloadable form. There can be multiple data download entries for different
   * file types.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ResearchScienceSearchDataDownload> dataDownload;

  static {
    // hack to force ProGuard to consider ResearchScienceSearchDataDownload used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ResearchScienceSearchDataDownload.class);
  }

  /**
   * A hash of the raw metadata fields used by the QualityExtender.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger datasetClassificationFieldsHash;

  /**
   * Probability that the entity is in fact a dataset (in contrast to spam or website labelled as
   * dataset that does not describe a dataset).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double datasetClassificationScore;

  /**
   * The date when the dataset was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScienceSearchDate dateCreated;

  /**
   * The date when the dataset was modified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScienceSearchDate dateModified;

  /**
   * The date when the dataset was published.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScienceSearchDate datePublished;

  /**
   * Most recent of the three dates (published, created, modified)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScienceSearchDate dateUpdated;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> denylistStatus;

  /**
   * Description of the dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> description;

  /**
   * Description of the dataset converted to HTML.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> descriptionInHtml;

  /**
   * The DOI for the dataset. We assume that there is only one.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String doi;

  /**
   * DOI(s) extracted from the citation field. In contrast to the "doi" field these DOIs identify
   * the articles related to the dataset rather than the dataset itself.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> doiFromCitation;

  /**
   * Field of study: a general, high-level classification of the dataset. This is only populated
   * during indexing time and it is only populated if the classification_source is KNOWLEDGE_GRAPH
   * or it's above inference threshold.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ResearchScienceSearchFieldOfStudyInfo> fieldOfStudy;

  static {
    // hack to force ProGuard to consider ResearchScienceSearchFieldOfStudyInfo used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ResearchScienceSearchFieldOfStudyInfo.class);
  }

  /**
   * The fingerprint of basic fields from DatasetMetadata, including: - name - description
   * DEPRECATED
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger fingerprint;

  /**
   * Funder of the dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ResearchScienceSearchOrganization> funder;

  static {
    // hack to force ProGuard to consider ResearchScienceSearchOrganization used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ResearchScienceSearchOrganization.class);
  }

  /**
   * Indicates if the dataset has table summaries. This field is only populated during indexing
   * time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hasTableSummaries;

  /**
   * A unique id for the dataset. For the data from Spore, this is the spore id, such as, for
   * example "http://accession.nodc.noaa.gov/8500223#__sid=js0" REQUIRED
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * An identifier as provided by the dataset itself.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> identifierFromSource;

  /**
   * The image urls provided by the dataset (e.g., for thumbnail images).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> imageUrl;

  /**
   * Index of this dataset in its cluster of replicas.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer indexInCluster;

  /**
   * Indicates if the dataset is available for free or behind a paywal
   * http://schema.org/isAccessibleForFree
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String isAccessibleForFree;

  /**
   * A resource (most likely another dataset) from which this dataset is derived or from which it is
   * a modification or adaption. http://schema.org/isBasedOn
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> isBasedOn;

  /**
   * Indicates whether the metadata was inferred using an ML model rather than from the schema.org
   * fields. Use optional so that explicitly setting to false will ensure the value is passed along
   * to the KG instead of being indistinguisable from being unset and thus not set in the KG. This
   * field was originally non-optional; changing to optional is backwards compatible, but protos
   * created prior to being optional won't have has_is_inferred() (go/proto-
   * proposals/proto3-presence#wire-format-semantic-changes).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isInferred;

  /**
   * Keywords describing the dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> keyword;

  /**
   * The 2-letter language code for the source page for the dataset. Same as the language code in
   * source_url_docjoin_info. Populated only when generating output for indexing.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String languageCode;

  /**
   * License for the dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ResearchScienceSearchLicense> license;

  static {
    // hack to force ProGuard to consider ResearchScienceSearchLicense used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ResearchScienceSearchLicense.class);
  }

  /**
   * License for the dataset. DEPRECATED
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> licenseDeprecated;

  /**
   * A technique or technology used in a Dataset corresponding to the method used for measuring the
   * corresponding variable(s) (described using variableMeasured).
   * http://schema.org/measurementTechnique
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> measurementTechnique;

  /**
   * Mentioned URLs in the description.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> mentionedUrls;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String metadataType;

  /**
   * The names of the dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> name;

  /**
   * The number of datasets at the same source url as this dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numberOfDatasetsAtSourceUrl;

  /**
   * The number of articles that reference this dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer numberOfScholarCitations;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ResearchScienceSearchCitation> publication;

  static {
    // hack to force ProGuard to consider ResearchScienceSearchCitation used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ResearchScienceSearchCitation.class);
  }

  /**
   * The url for the article that (likely) describes this dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String relatedArticleUrl;

  /**
   * The info of replicas of this dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ResearchScienceSearchReplica> replica;

  /**
   * Ids for other instances (not different versions) of this dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> sameAs;

  /**
   * Query string to send to Scholar to obtain the best approximation of citations to the dataset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String scholarQuery;

  /**
   * For tables and figures, contains all of the metadata for a scholarly article that was the
   * source of this table or figure. This field is populated only if metadata_type is 'TABLE' or
   * 'FIGURE'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScienceSearchScholarlyArticle scholarlyArticle;

  /**
   * Source of the dataset: unifies provider, creator, author, publisher etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ResearchScienceSearchOrganization> sourceOrganization;

  static {
    // hack to force ProGuard to consider ResearchScienceSearchOrganization used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ResearchScienceSearchOrganization.class);
  }

  /**
   * Source url from which we gathered the metadata
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sourceUrl;

  /**
   * All the information extracted from docjoin, for the source_url of this dataset, aka
   * DatasetMetadata.source_url.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScienceSearchSourceUrlDocjoinInfo sourceUrlDocjoinInfo;

  /**
   * Locations that describe spatial coverage of the data. If the data covers multiple locations
   * then each value corresponds to one such location, describing its coordinates, mid, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ResearchScienceSearchLocation> spatialCoverage;

  static {
    // hack to force ProGuard to consider ResearchScienceSearchLocation used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(ResearchScienceSearchLocation.class);
  }

  /**
   * Top salient term labels that describe the dataset document body.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> topSalientTermLabel;

  /**
   * urls for the dataset, including doi.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> url;

  /**
   * Variables that the data in the dataset captures (e.g., pressure, salinity, temperature). For
   * now, these are just strings.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> variable;

  /**
   * Information on the version cluster that the dataset is a part of. This field is populated
   * during the indexing time; the field is populated only if the dataset is part of a version
   * cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ResearchScienceSearchVersionClusterInfo versionClusterInfo;

  /**
   * A hash of the raw metadata fields used by the VersionEmbeddingExtender.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger versionEmbeddingFieldsHash;

  /**
   * An embedding for the dataset to be used by the VersionAggregator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Float> versionEmbeddingVector;

  /**
   * Alternate names and acronyms for the dataset.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAlternateName() {
    return alternateName;
  }

  /**
   * Alternate names and acronyms for the dataset.
   * @param alternateName alternateName or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setAlternateName(java.util.List<java.lang.String> alternateName) {
    this.alternateName = alternateName;
    return this;
  }

  /**
   * A string representation of the authors of the dataset, collected from author and creator in raw
   * metadata. The exact format (e.g., comma-separated, etc.) is up to the extender that populates
   * this field. The assumption is that this string may appear in the UI "as is".
   * @return value or {@code null} for none
   */
  public java.lang.String getAuthorList() {
    return authorList;
  }

  /**
   * A string representation of the authors of the dataset, collected from author and creator in raw
   * metadata. The exact format (e.g., comma-separated, etc.) is up to the extender that populates
   * this field. The assumption is that this string may appear in the UI "as is".
   * @param authorList authorList or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setAuthorList(java.lang.String authorList) {
    this.authorList = authorList;
    return this;
  }

  /**
   * A hash of the fields copied by BasicMetadataExtender and the importers. See
   * cs/research/science_search/backend/extender/basic_metadata_extender.h for the list of fields.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getBasicFieldsHash() {
    return basicFieldsHash;
  }

  /**
   * A hash of the fields copied by BasicMetadataExtender and the importers. See
   * cs/research/science_search/backend/extender/basic_metadata_extender.h for the list of fields.
   * @param basicFieldsHash basicFieldsHash or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setBasicFieldsHash(java.math.BigInteger basicFieldsHash) {
    this.basicFieldsHash = basicFieldsHash;
    return this;
  }

  /**
   * Catalog that this dataset is a part of.
   * @return value or {@code null} for none
   */
  public ResearchScienceSearchCatalog getCatalog() {
    return catalog;
  }

  /**
   * Catalog that this dataset is a part of.
   * @param catalog catalog or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setCatalog(ResearchScienceSearchCatalog catalog) {
    this.catalog = catalog;
    return this;
  }

  /**
   * Compact Identifiers (for example "RRID:SCR_002088") that can be resolved by Identifiers.org or
   * N2T.net meta-resolvers.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCompactIdentifier() {
    return compactIdentifier;
  }

  /**
   * Compact Identifiers (for example "RRID:SCR_002088") that can be resolved by Identifiers.org or
   * N2T.net meta-resolvers.
   * @param compactIdentifier compactIdentifier or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setCompactIdentifier(java.util.List<java.lang.String> compactIdentifier) {
    this.compactIdentifier = compactIdentifier;
    return this;
  }

  /**
   * Compact Identifier(s) extracted from the citation field. Like in the case of DOI(s) those
   * identify the articles related to the dataset rather than the dataset itself.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCompactIdentifierFromCitation() {
    return compactIdentifierFromCitation;
  }

  /**
   * Compact Identifier(s) extracted from the citation field. Like in the case of DOI(s) those
   * identify the articles related to the dataset rather than the dataset itself.
   * @param compactIdentifierFromCitation compactIdentifierFromCitation or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setCompactIdentifierFromCitation(java.util.List<java.lang.String> compactIdentifierFromCitation) {
    this.compactIdentifierFromCitation = compactIdentifierFromCitation;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public ResearchScienceSearchDate getCoverageEndDate() {
    return coverageEndDate;
  }

  /**
   * @param coverageEndDate coverageEndDate or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setCoverageEndDate(ResearchScienceSearchDate coverageEndDate) {
    this.coverageEndDate = coverageEndDate;
    return this;
  }

  /**
   * The start and end date that the dataset covers. If the dataset covers a single timepoint, then
   * start and end dates are the same. Use the ISO 8601 format for dates (e.g., 2006-05-23).
   * @return value or {@code null} for none
   */
  public ResearchScienceSearchDate getCoverageStartDate() {
    return coverageStartDate;
  }

  /**
   * The start and end date that the dataset covers. If the dataset covers a single timepoint, then
   * start and end dates are the same. Use the ISO 8601 format for dates (e.g., 2006-05-23).
   * @param coverageStartDate coverageStartDate or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setCoverageStartDate(ResearchScienceSearchDate coverageStartDate) {
    this.coverageStartDate = coverageStartDate;
    return this;
  }

  /**
   * The dataset in downloadable form. There can be multiple data download entries for different
   * file types.
   * @return value or {@code null} for none
   */
  public java.util.List<ResearchScienceSearchDataDownload> getDataDownload() {
    return dataDownload;
  }

  /**
   * The dataset in downloadable form. There can be multiple data download entries for different
   * file types.
   * @param dataDownload dataDownload or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setDataDownload(java.util.List<ResearchScienceSearchDataDownload> dataDownload) {
    this.dataDownload = dataDownload;
    return this;
  }

  /**
   * A hash of the raw metadata fields used by the QualityExtender.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getDatasetClassificationFieldsHash() {
    return datasetClassificationFieldsHash;
  }

  /**
   * A hash of the raw metadata fields used by the QualityExtender.
   * @param datasetClassificationFieldsHash datasetClassificationFieldsHash or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setDatasetClassificationFieldsHash(java.math.BigInteger datasetClassificationFieldsHash) {
    this.datasetClassificationFieldsHash = datasetClassificationFieldsHash;
    return this;
  }

  /**
   * Probability that the entity is in fact a dataset (in contrast to spam or website labelled as
   * dataset that does not describe a dataset).
   * @return value or {@code null} for none
   */
  public java.lang.Double getDatasetClassificationScore() {
    return datasetClassificationScore;
  }

  /**
   * Probability that the entity is in fact a dataset (in contrast to spam or website labelled as
   * dataset that does not describe a dataset).
   * @param datasetClassificationScore datasetClassificationScore or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setDatasetClassificationScore(java.lang.Double datasetClassificationScore) {
    this.datasetClassificationScore = datasetClassificationScore;
    return this;
  }

  /**
   * The date when the dataset was created.
   * @return value or {@code null} for none
   */
  public ResearchScienceSearchDate getDateCreated() {
    return dateCreated;
  }

  /**
   * The date when the dataset was created.
   * @param dateCreated dateCreated or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setDateCreated(ResearchScienceSearchDate dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The date when the dataset was modified.
   * @return value or {@code null} for none
   */
  public ResearchScienceSearchDate getDateModified() {
    return dateModified;
  }

  /**
   * The date when the dataset was modified.
   * @param dateModified dateModified or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setDateModified(ResearchScienceSearchDate dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * The date when the dataset was published.
   * @return value or {@code null} for none
   */
  public ResearchScienceSearchDate getDatePublished() {
    return datePublished;
  }

  /**
   * The date when the dataset was published.
   * @param datePublished datePublished or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setDatePublished(ResearchScienceSearchDate datePublished) {
    this.datePublished = datePublished;
    return this;
  }

  /**
   * Most recent of the three dates (published, created, modified)
   * @return value or {@code null} for none
   */
  public ResearchScienceSearchDate getDateUpdated() {
    return dateUpdated;
  }

  /**
   * Most recent of the three dates (published, created, modified)
   * @param dateUpdated dateUpdated or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setDateUpdated(ResearchScienceSearchDate dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDenylistStatus() {
    return denylistStatus;
  }

  /**
   * @param denylistStatus denylistStatus or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setDenylistStatus(java.util.List<java.lang.String> denylistStatus) {
    this.denylistStatus = denylistStatus;
    return this;
  }

  /**
   * Description of the dataset.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDescription() {
    return description;
  }

  /**
   * Description of the dataset.
   * @param description description or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setDescription(java.util.List<java.lang.String> description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the dataset converted to HTML.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDescriptionInHtml() {
    return descriptionInHtml;
  }

  /**
   * Description of the dataset converted to HTML.
   * @param descriptionInHtml descriptionInHtml or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setDescriptionInHtml(java.util.List<java.lang.String> descriptionInHtml) {
    this.descriptionInHtml = descriptionInHtml;
    return this;
  }

  /**
   * The DOI for the dataset. We assume that there is only one.
   * @return value or {@code null} for none
   */
  public java.lang.String getDoi() {
    return doi;
  }

  /**
   * The DOI for the dataset. We assume that there is only one.
   * @param doi doi or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setDoi(java.lang.String doi) {
    this.doi = doi;
    return this;
  }

  /**
   * DOI(s) extracted from the citation field. In contrast to the "doi" field these DOIs identify
   * the articles related to the dataset rather than the dataset itself.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getDoiFromCitation() {
    return doiFromCitation;
  }

  /**
   * DOI(s) extracted from the citation field. In contrast to the "doi" field these DOIs identify
   * the articles related to the dataset rather than the dataset itself.
   * @param doiFromCitation doiFromCitation or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setDoiFromCitation(java.util.List<java.lang.String> doiFromCitation) {
    this.doiFromCitation = doiFromCitation;
    return this;
  }

  /**
   * Field of study: a general, high-level classification of the dataset. This is only populated
   * during indexing time and it is only populated if the classification_source is KNOWLEDGE_GRAPH
   * or it's above inference threshold.
   * @return value or {@code null} for none
   */
  public java.util.List<ResearchScienceSearchFieldOfStudyInfo> getFieldOfStudy() {
    return fieldOfStudy;
  }

  /**
   * Field of study: a general, high-level classification of the dataset. This is only populated
   * during indexing time and it is only populated if the classification_source is KNOWLEDGE_GRAPH
   * or it's above inference threshold.
   * @param fieldOfStudy fieldOfStudy or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setFieldOfStudy(java.util.List<ResearchScienceSearchFieldOfStudyInfo> fieldOfStudy) {
    this.fieldOfStudy = fieldOfStudy;
    return this;
  }

  /**
   * The fingerprint of basic fields from DatasetMetadata, including: - name - description
   * DEPRECATED
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getFingerprint() {
    return fingerprint;
  }

  /**
   * The fingerprint of basic fields from DatasetMetadata, including: - name - description
   * DEPRECATED
   * @param fingerprint fingerprint or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setFingerprint(java.math.BigInteger fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * Funder of the dataset.
   * @return value or {@code null} for none
   */
  public java.util.List<ResearchScienceSearchOrganization> getFunder() {
    return funder;
  }

  /**
   * Funder of the dataset.
   * @param funder funder or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setFunder(java.util.List<ResearchScienceSearchOrganization> funder) {
    this.funder = funder;
    return this;
  }

  /**
   * Indicates if the dataset has table summaries. This field is only populated during indexing
   * time.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHasTableSummaries() {
    return hasTableSummaries;
  }

  /**
   * Indicates if the dataset has table summaries. This field is only populated during indexing
   * time.
   * @param hasTableSummaries hasTableSummaries or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setHasTableSummaries(java.lang.Boolean hasTableSummaries) {
    this.hasTableSummaries = hasTableSummaries;
    return this;
  }

  /**
   * A unique id for the dataset. For the data from Spore, this is the spore id, such as, for
   * example "http://accession.nodc.noaa.gov/8500223#__sid=js0" REQUIRED
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * A unique id for the dataset. For the data from Spore, this is the spore id, such as, for
   * example "http://accession.nodc.noaa.gov/8500223#__sid=js0" REQUIRED
   * @param id id or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * An identifier as provided by the dataset itself.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getIdentifierFromSource() {
    return identifierFromSource;
  }

  /**
   * An identifier as provided by the dataset itself.
   * @param identifierFromSource identifierFromSource or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setIdentifierFromSource(java.util.List<java.lang.String> identifierFromSource) {
    this.identifierFromSource = identifierFromSource;
    return this;
  }

  /**
   * The image urls provided by the dataset (e.g., for thumbnail images).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getImageUrl() {
    return imageUrl;
  }

  /**
   * The image urls provided by the dataset (e.g., for thumbnail images).
   * @param imageUrl imageUrl or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setImageUrl(java.util.List<java.lang.String> imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Index of this dataset in its cluster of replicas.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getIndexInCluster() {
    return indexInCluster;
  }

  /**
   * Index of this dataset in its cluster of replicas.
   * @param indexInCluster indexInCluster or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setIndexInCluster(java.lang.Integer indexInCluster) {
    this.indexInCluster = indexInCluster;
    return this;
  }

  /**
   * Indicates if the dataset is available for free or behind a paywal
   * http://schema.org/isAccessibleForFree
   * @return value or {@code null} for none
   */
  public java.lang.String getIsAccessibleForFree() {
    return isAccessibleForFree;
  }

  /**
   * Indicates if the dataset is available for free or behind a paywal
   * http://schema.org/isAccessibleForFree
   * @param isAccessibleForFree isAccessibleForFree or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setIsAccessibleForFree(java.lang.String isAccessibleForFree) {
    this.isAccessibleForFree = isAccessibleForFree;
    return this;
  }

  /**
   * A resource (most likely another dataset) from which this dataset is derived or from which it is
   * a modification or adaption. http://schema.org/isBasedOn
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getIsBasedOn() {
    return isBasedOn;
  }

  /**
   * A resource (most likely another dataset) from which this dataset is derived or from which it is
   * a modification or adaption. http://schema.org/isBasedOn
   * @param isBasedOn isBasedOn or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setIsBasedOn(java.util.List<java.lang.String> isBasedOn) {
    this.isBasedOn = isBasedOn;
    return this;
  }

  /**
   * Indicates whether the metadata was inferred using an ML model rather than from the schema.org
   * fields. Use optional so that explicitly setting to false will ensure the value is passed along
   * to the KG instead of being indistinguisable from being unset and thus not set in the KG. This
   * field was originally non-optional; changing to optional is backwards compatible, but protos
   * created prior to being optional won't have has_is_inferred() (go/proto-
   * proposals/proto3-presence#wire-format-semantic-changes).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsInferred() {
    return isInferred;
  }

  /**
   * Indicates whether the metadata was inferred using an ML model rather than from the schema.org
   * fields. Use optional so that explicitly setting to false will ensure the value is passed along
   * to the KG instead of being indistinguisable from being unset and thus not set in the KG. This
   * field was originally non-optional; changing to optional is backwards compatible, but protos
   * created prior to being optional won't have has_is_inferred() (go/proto-
   * proposals/proto3-presence#wire-format-semantic-changes).
   * @param isInferred isInferred or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setIsInferred(java.lang.Boolean isInferred) {
    this.isInferred = isInferred;
    return this;
  }

  /**
   * Keywords describing the dataset.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getKeyword() {
    return keyword;
  }

  /**
   * Keywords describing the dataset.
   * @param keyword keyword or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setKeyword(java.util.List<java.lang.String> keyword) {
    this.keyword = keyword;
    return this;
  }

  /**
   * The 2-letter language code for the source page for the dataset. Same as the language code in
   * source_url_docjoin_info. Populated only when generating output for indexing.
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguageCode() {
    return languageCode;
  }

  /**
   * The 2-letter language code for the source page for the dataset. Same as the language code in
   * source_url_docjoin_info. Populated only when generating output for indexing.
   * @param languageCode languageCode or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setLanguageCode(java.lang.String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * License for the dataset.
   * @return value or {@code null} for none
   */
  public java.util.List<ResearchScienceSearchLicense> getLicense() {
    return license;
  }

  /**
   * License for the dataset.
   * @param license license or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setLicense(java.util.List<ResearchScienceSearchLicense> license) {
    this.license = license;
    return this;
  }

  /**
   * License for the dataset. DEPRECATED
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLicenseDeprecated() {
    return licenseDeprecated;
  }

  /**
   * License for the dataset. DEPRECATED
   * @param licenseDeprecated licenseDeprecated or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setLicenseDeprecated(java.util.List<java.lang.String> licenseDeprecated) {
    this.licenseDeprecated = licenseDeprecated;
    return this;
  }

  /**
   * A technique or technology used in a Dataset corresponding to the method used for measuring the
   * corresponding variable(s) (described using variableMeasured).
   * http://schema.org/measurementTechnique
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMeasurementTechnique() {
    return measurementTechnique;
  }

  /**
   * A technique or technology used in a Dataset corresponding to the method used for measuring the
   * corresponding variable(s) (described using variableMeasured).
   * http://schema.org/measurementTechnique
   * @param measurementTechnique measurementTechnique or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setMeasurementTechnique(java.util.List<java.lang.String> measurementTechnique) {
    this.measurementTechnique = measurementTechnique;
    return this;
  }

  /**
   * Mentioned URLs in the description.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMentionedUrls() {
    return mentionedUrls;
  }

  /**
   * Mentioned URLs in the description.
   * @param mentionedUrls mentionedUrls or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setMentionedUrls(java.util.List<java.lang.String> mentionedUrls) {
    this.mentionedUrls = mentionedUrls;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.String getMetadataType() {
    return metadataType;
  }

  /**
   * @param metadataType metadataType or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setMetadataType(java.lang.String metadataType) {
    this.metadataType = metadataType;
    return this;
  }

  /**
   * The names of the dataset.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getName() {
    return name;
  }

  /**
   * The names of the dataset.
   * @param name name or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setName(java.util.List<java.lang.String> name) {
    this.name = name;
    return this;
  }

  /**
   * The number of datasets at the same source url as this dataset.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumberOfDatasetsAtSourceUrl() {
    return numberOfDatasetsAtSourceUrl;
  }

  /**
   * The number of datasets at the same source url as this dataset.
   * @param numberOfDatasetsAtSourceUrl numberOfDatasetsAtSourceUrl or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setNumberOfDatasetsAtSourceUrl(java.lang.Integer numberOfDatasetsAtSourceUrl) {
    this.numberOfDatasetsAtSourceUrl = numberOfDatasetsAtSourceUrl;
    return this;
  }

  /**
   * The number of articles that reference this dataset.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNumberOfScholarCitations() {
    return numberOfScholarCitations;
  }

  /**
   * The number of articles that reference this dataset.
   * @param numberOfScholarCitations numberOfScholarCitations or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setNumberOfScholarCitations(java.lang.Integer numberOfScholarCitations) {
    this.numberOfScholarCitations = numberOfScholarCitations;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<ResearchScienceSearchCitation> getPublication() {
    return publication;
  }

  /**
   * @param publication publication or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setPublication(java.util.List<ResearchScienceSearchCitation> publication) {
    this.publication = publication;
    return this;
  }

  /**
   * The url for the article that (likely) describes this dataset.
   * @return value or {@code null} for none
   */
  public java.lang.String getRelatedArticleUrl() {
    return relatedArticleUrl;
  }

  /**
   * The url for the article that (likely) describes this dataset.
   * @param relatedArticleUrl relatedArticleUrl or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setRelatedArticleUrl(java.lang.String relatedArticleUrl) {
    this.relatedArticleUrl = relatedArticleUrl;
    return this;
  }

  /**
   * The info of replicas of this dataset.
   * @return value or {@code null} for none
   */
  public java.util.List<ResearchScienceSearchReplica> getReplica() {
    return replica;
  }

  /**
   * The info of replicas of this dataset.
   * @param replica replica or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setReplica(java.util.List<ResearchScienceSearchReplica> replica) {
    this.replica = replica;
    return this;
  }

  /**
   * Ids for other instances (not different versions) of this dataset.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSameAs() {
    return sameAs;
  }

  /**
   * Ids for other instances (not different versions) of this dataset.
   * @param sameAs sameAs or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setSameAs(java.util.List<java.lang.String> sameAs) {
    this.sameAs = sameAs;
    return this;
  }

  /**
   * Query string to send to Scholar to obtain the best approximation of citations to the dataset.
   * @return value or {@code null} for none
   */
  public java.lang.String getScholarQuery() {
    return scholarQuery;
  }

  /**
   * Query string to send to Scholar to obtain the best approximation of citations to the dataset.
   * @param scholarQuery scholarQuery or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setScholarQuery(java.lang.String scholarQuery) {
    this.scholarQuery = scholarQuery;
    return this;
  }

  /**
   * For tables and figures, contains all of the metadata for a scholarly article that was the
   * source of this table or figure. This field is populated only if metadata_type is 'TABLE' or
   * 'FIGURE'.
   * @return value or {@code null} for none
   */
  public ResearchScienceSearchScholarlyArticle getScholarlyArticle() {
    return scholarlyArticle;
  }

  /**
   * For tables and figures, contains all of the metadata for a scholarly article that was the
   * source of this table or figure. This field is populated only if metadata_type is 'TABLE' or
   * 'FIGURE'.
   * @param scholarlyArticle scholarlyArticle or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setScholarlyArticle(ResearchScienceSearchScholarlyArticle scholarlyArticle) {
    this.scholarlyArticle = scholarlyArticle;
    return this;
  }

  /**
   * Source of the dataset: unifies provider, creator, author, publisher etc.
   * @return value or {@code null} for none
   */
  public java.util.List<ResearchScienceSearchOrganization> getSourceOrganization() {
    return sourceOrganization;
  }

  /**
   * Source of the dataset: unifies provider, creator, author, publisher etc.
   * @param sourceOrganization sourceOrganization or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setSourceOrganization(java.util.List<ResearchScienceSearchOrganization> sourceOrganization) {
    this.sourceOrganization = sourceOrganization;
    return this;
  }

  /**
   * Source url from which we gathered the metadata
   * @return value or {@code null} for none
   */
  public java.lang.String getSourceUrl() {
    return sourceUrl;
  }

  /**
   * Source url from which we gathered the metadata
   * @param sourceUrl sourceUrl or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setSourceUrl(java.lang.String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * All the information extracted from docjoin, for the source_url of this dataset, aka
   * DatasetMetadata.source_url.
   * @return value or {@code null} for none
   */
  public ResearchScienceSearchSourceUrlDocjoinInfo getSourceUrlDocjoinInfo() {
    return sourceUrlDocjoinInfo;
  }

  /**
   * All the information extracted from docjoin, for the source_url of this dataset, aka
   * DatasetMetadata.source_url.
   * @param sourceUrlDocjoinInfo sourceUrlDocjoinInfo or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setSourceUrlDocjoinInfo(ResearchScienceSearchSourceUrlDocjoinInfo sourceUrlDocjoinInfo) {
    this.sourceUrlDocjoinInfo = sourceUrlDocjoinInfo;
    return this;
  }

  /**
   * Locations that describe spatial coverage of the data. If the data covers multiple locations
   * then each value corresponds to one such location, describing its coordinates, mid, etc.
   * @return value or {@code null} for none
   */
  public java.util.List<ResearchScienceSearchLocation> getSpatialCoverage() {
    return spatialCoverage;
  }

  /**
   * Locations that describe spatial coverage of the data. If the data covers multiple locations
   * then each value corresponds to one such location, describing its coordinates, mid, etc.
   * @param spatialCoverage spatialCoverage or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setSpatialCoverage(java.util.List<ResearchScienceSearchLocation> spatialCoverage) {
    this.spatialCoverage = spatialCoverage;
    return this;
  }

  /**
   * Top salient term labels that describe the dataset document body.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getTopSalientTermLabel() {
    return topSalientTermLabel;
  }

  /**
   * Top salient term labels that describe the dataset document body.
   * @param topSalientTermLabel topSalientTermLabel or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setTopSalientTermLabel(java.util.List<java.lang.String> topSalientTermLabel) {
    this.topSalientTermLabel = topSalientTermLabel;
    return this;
  }

  /**
   * urls for the dataset, including doi.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getUrl() {
    return url;
  }

  /**
   * urls for the dataset, including doi.
   * @param url url or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setUrl(java.util.List<java.lang.String> url) {
    this.url = url;
    return this;
  }

  /**
   * Variables that the data in the dataset captures (e.g., pressure, salinity, temperature). For
   * now, these are just strings.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getVariable() {
    return variable;
  }

  /**
   * Variables that the data in the dataset captures (e.g., pressure, salinity, temperature). For
   * now, these are just strings.
   * @param variable variable or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setVariable(java.util.List<java.lang.String> variable) {
    this.variable = variable;
    return this;
  }

  /**
   * Information on the version cluster that the dataset is a part of. This field is populated
   * during the indexing time; the field is populated only if the dataset is part of a version
   * cluster.
   * @return value or {@code null} for none
   */
  public ResearchScienceSearchVersionClusterInfo getVersionClusterInfo() {
    return versionClusterInfo;
  }

  /**
   * Information on the version cluster that the dataset is a part of. This field is populated
   * during the indexing time; the field is populated only if the dataset is part of a version
   * cluster.
   * @param versionClusterInfo versionClusterInfo or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setVersionClusterInfo(ResearchScienceSearchVersionClusterInfo versionClusterInfo) {
    this.versionClusterInfo = versionClusterInfo;
    return this;
  }

  /**
   * A hash of the raw metadata fields used by the VersionEmbeddingExtender.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getVersionEmbeddingFieldsHash() {
    return versionEmbeddingFieldsHash;
  }

  /**
   * A hash of the raw metadata fields used by the VersionEmbeddingExtender.
   * @param versionEmbeddingFieldsHash versionEmbeddingFieldsHash or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setVersionEmbeddingFieldsHash(java.math.BigInteger versionEmbeddingFieldsHash) {
    this.versionEmbeddingFieldsHash = versionEmbeddingFieldsHash;
    return this;
  }

  /**
   * An embedding for the dataset to be used by the VersionAggregator.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Float> getVersionEmbeddingVector() {
    return versionEmbeddingVector;
  }

  /**
   * An embedding for the dataset to be used by the VersionAggregator.
   * @param versionEmbeddingVector versionEmbeddingVector or {@code null} for none
   */
  public ResearchScienceSearchReconciledMetadata setVersionEmbeddingVector(java.util.List<java.lang.Float> versionEmbeddingVector) {
    this.versionEmbeddingVector = versionEmbeddingVector;
    return this;
  }

  @Override
  public ResearchScienceSearchReconciledMetadata set(String fieldName, Object value) {
    return (ResearchScienceSearchReconciledMetadata) super.set(fieldName, value);
  }

  @Override
  public ResearchScienceSearchReconciledMetadata clone() {
    return (ResearchScienceSearchReconciledMetadata) super.clone();
  }

}
