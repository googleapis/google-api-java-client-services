/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.bigtableadmin.v2.model;

/**
 * A create, update, or delete of a particular column family.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Bigtable Admin API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Modification extends com.google.api.client.json.GenericJson {

  /**
   * Create a new column family with the specified schema, or fail if one already exists with the
   * given ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ColumnFamily create;

  /**
   * Drop (delete) the column family with the given ID, or fail if no such family exists.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean drop;

  /**
   * The ID of the column family to be modified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * Update an existing column family to the specified schema, or fail if no column family exists
   * with the given ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ColumnFamily update;

  /**
   * Create a new column family with the specified schema, or fail if one already exists with the
   * given ID.
   * @return value or {@code null} for none
   */
  public ColumnFamily getCreate() {
    return create;
  }

  /**
   * Create a new column family with the specified schema, or fail if one already exists with the
   * given ID.
   * @param create create or {@code null} for none
   */
  public Modification setCreate(ColumnFamily create) {
    this.create = create;
    return this;
  }

  /**
   * Drop (delete) the column family with the given ID, or fail if no such family exists.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDrop() {
    return drop;
  }

  /**
   * Drop (delete) the column family with the given ID, or fail if no such family exists.
   * @param drop drop or {@code null} for none
   */
  public Modification setDrop(java.lang.Boolean drop) {
    this.drop = drop;
    return this;
  }

  /**
   * The ID of the column family to be modified.
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * The ID of the column family to be modified.
   * @param id id or {@code null} for none
   */
  public Modification setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * Update an existing column family to the specified schema, or fail if no column family exists
   * with the given ID.
   * @return value or {@code null} for none
   */
  public ColumnFamily getUpdate() {
    return update;
  }

  /**
   * Update an existing column family to the specified schema, or fail if no column family exists
   * with the given ID.
   * @param update update or {@code null} for none
   */
  public Modification setUpdate(ColumnFamily update) {
    this.update = update;
    return this;
  }

  @Override
  public Modification set(String fieldName, Object value) {
    return (Modification) super.set(fieldName, value);
  }

  @Override
  public Modification clone() {
    return (Modification) super.clone();
  }

}
