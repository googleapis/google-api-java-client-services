/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.spanner.v1.model;

/**
 * When a read-write transaction is executed on a multiplexed session, this precommit token is sent
 * back to the client as a part of the [Transaction] message in the BeginTransaction response and
 * also as a part of the [ResultSet] and [PartialResultSet] responses.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Spanner API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MultiplexedSessionPrecommitToken extends com.google.api.client.json.GenericJson {

  /**
   * Opaque precommit token.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String precommitToken;

  /**
   * An incrementing seq number is generated on every precommit token that is returned. Clients
   * should remember the precommit token with the highest sequence number from the current
   * transaction attempt.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer seqNum;

  /**
   * Opaque precommit token.
   * @see #decodePrecommitToken()
   * @return value or {@code null} for none
   */
  public java.lang.String getPrecommitToken() {
    return precommitToken;
  }

  /**
   * Opaque precommit token.
   * @see #getPrecommitToken()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodePrecommitToken() {
    return com.google.api.client.util.Base64.decodeBase64(precommitToken);
  }

  /**
   * Opaque precommit token.
   * @see #encodePrecommitToken()
   * @param precommitToken precommitToken or {@code null} for none
   */
  public MultiplexedSessionPrecommitToken setPrecommitToken(java.lang.String precommitToken) {
    this.precommitToken = precommitToken;
    return this;
  }

  /**
   * Opaque precommit token.
   * @see #setPrecommitToken()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public MultiplexedSessionPrecommitToken encodePrecommitToken(byte[] precommitToken) {
    this.precommitToken = com.google.api.client.util.Base64.encodeBase64URLSafeString(precommitToken);
    return this;
  }

  /**
   * An incrementing seq number is generated on every precommit token that is returned. Clients
   * should remember the precommit token with the highest sequence number from the current
   * transaction attempt.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSeqNum() {
    return seqNum;
  }

  /**
   * An incrementing seq number is generated on every precommit token that is returned. Clients
   * should remember the precommit token with the highest sequence number from the current
   * transaction attempt.
   * @param seqNum seqNum or {@code null} for none
   */
  public MultiplexedSessionPrecommitToken setSeqNum(java.lang.Integer seqNum) {
    this.seqNum = seqNum;
    return this;
  }

  @Override
  public MultiplexedSessionPrecommitToken set(String fieldName, Object value) {
    return (MultiplexedSessionPrecommitToken) super.set(fieldName, value);
  }

  @Override
  public MultiplexedSessionPrecommitToken clone() {
    return (MultiplexedSessionPrecommitToken) super.clone();
  }

}
