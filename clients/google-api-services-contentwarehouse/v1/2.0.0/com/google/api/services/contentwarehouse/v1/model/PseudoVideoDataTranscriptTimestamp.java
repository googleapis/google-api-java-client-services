/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Mapping of time/character correspondences. Used to map found snippets to the time and thumbnail
 * nearest that snippet.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PseudoVideoDataTranscriptTimestamp extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("CharOffset")
  private java.lang.Integer charOffset;

  /**
   * quantized to values in range 0-127
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("Confidence")
  private java.lang.Integer confidence;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("TimeOffset")
  private java.lang.Integer timeOffset;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCharOffset() {
    return charOffset;
  }

  /**
   * @param charOffset charOffset or {@code null} for none
   */
  public PseudoVideoDataTranscriptTimestamp setCharOffset(java.lang.Integer charOffset) {
    this.charOffset = charOffset;
    return this;
  }

  /**
   * quantized to values in range 0-127
   * @return value or {@code null} for none
   */
  public java.lang.Integer getConfidence() {
    return confidence;
  }

  /**
   * quantized to values in range 0-127
   * @param confidence confidence or {@code null} for none
   */
  public PseudoVideoDataTranscriptTimestamp setConfidence(java.lang.Integer confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTimeOffset() {
    return timeOffset;
  }

  /**
   * @param timeOffset timeOffset or {@code null} for none
   */
  public PseudoVideoDataTranscriptTimestamp setTimeOffset(java.lang.Integer timeOffset) {
    this.timeOffset = timeOffset;
    return this;
  }

  @Override
  public PseudoVideoDataTranscriptTimestamp set(String fieldName, Object value) {
    return (PseudoVideoDataTranscriptTimestamp) super.set(fieldName, value);
  }

  @Override
  public PseudoVideoDataTranscriptTimestamp clone() {
    return (PseudoVideoDataTranscriptTimestamp) super.clone();
  }

}
