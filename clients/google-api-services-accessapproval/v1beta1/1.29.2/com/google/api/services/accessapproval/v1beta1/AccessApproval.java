/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.accessapproval.v1beta1;

/**
 * Service definition for AccessApproval (v1beta1).
 *
 * <p>
 * An API for controlling access to data by Google personnel.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/access-approval/docs" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link AccessApprovalRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class AccessApproval extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.29.2 of the Access Approval API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://accessapproval.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public AccessApproval(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  AccessApproval(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Folders collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AccessApproval accessapproval = new AccessApproval(...);}
   *   {@code AccessApproval.Folders.List request = accessapproval.folders().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Folders folders() {
    return new Folders();
  }

  /**
   * The "folders" collection of methods.
   */
  public class Folders {

    /**
     * Gets the settings associated with a project, folder, or organization.
     *
     * Create a request for the method "folders.getAccessApprovalSettings".
     *
     * This request holds the parameters needed by the accessapproval server.  After setting any
     * optional parameters, call the {@link GetAccessApprovalSettings#execute()} method to invoke the
     * remote operation.
     *
     * @param name Name of the AccessApprovalSettings to retrieve.
     * @return the request
     */
    public GetAccessApprovalSettings getAccessApprovalSettings(java.lang.String name) throws java.io.IOException {
      GetAccessApprovalSettings result = new GetAccessApprovalSettings(name);
      initialize(result);
      return result;
    }

    public class GetAccessApprovalSettings extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^folders/[^/]+/accessApprovalSettings$");

      /**
       * Gets the settings associated with a project, folder, or organization.
       *
       * Create a request for the method "folders.getAccessApprovalSettings".
       *
       * This request holds the parameters needed by the the accessapproval server.  After setting any
       * optional parameters, call the {@link GetAccessApprovalSettings#execute()} method to invoke the
       * remote operation. <p> {@link GetAccessApprovalSettings#initialize(com.google.api.client.googlea
       * pis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @param name Name of the AccessApprovalSettings to retrieve.
       * @since 1.13
       */
      protected GetAccessApprovalSettings(java.lang.String name) {
        super(AccessApproval.this, "GET", REST_PATH, null, com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/accessApprovalSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetAccessApprovalSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetAccessApprovalSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetAccessApprovalSettings setAccessToken(java.lang.String accessToken) {
        return (GetAccessApprovalSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetAccessApprovalSettings setAlt(java.lang.String alt) {
        return (GetAccessApprovalSettings) super.setAlt(alt);
      }

      @Override
      public GetAccessApprovalSettings setCallback(java.lang.String callback) {
        return (GetAccessApprovalSettings) super.setCallback(callback);
      }

      @Override
      public GetAccessApprovalSettings setFields(java.lang.String fields) {
        return (GetAccessApprovalSettings) super.setFields(fields);
      }

      @Override
      public GetAccessApprovalSettings setKey(java.lang.String key) {
        return (GetAccessApprovalSettings) super.setKey(key);
      }

      @Override
      public GetAccessApprovalSettings setOauthToken(java.lang.String oauthToken) {
        return (GetAccessApprovalSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetAccessApprovalSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetAccessApprovalSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetAccessApprovalSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetAccessApprovalSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetAccessApprovalSettings setUploadType(java.lang.String uploadType) {
        return (GetAccessApprovalSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetAccessApprovalSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetAccessApprovalSettings) super.setUploadProtocol(uploadProtocol);
      }

      /** Name of the AccessApprovalSettings to retrieve. */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Name of the AccessApprovalSettings to retrieve.
       */
      public java.lang.String getName() {
        return name;
      }

      /** Name of the AccessApprovalSettings to retrieve. */
      public GetAccessApprovalSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/accessApprovalSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetAccessApprovalSettings set(String parameterName, Object value) {
        return (GetAccessApprovalSettings) super.set(parameterName, value);
      }
    }
    /**
     * Updates the settings associated with a project, folder, or organization. Completely replaces the
     * existing settings.
     *
     * Create a request for the method "folders.updateAccessApprovalSettings".
     *
     * This request holds the parameters needed by the accessapproval server.  After setting any
     * optional parameters, call the {@link UpdateAccessApprovalSettings#execute()} method to invoke the
     * remote operation.
     *
     * @param name The resource name of the settings. Format is one of:
     *        "projects/{project_id}/accessApprovalSettings"
     *        "folders/{folder_id}/accessApprovalSettings"
     *        "organizations/{organization_id}/accessApprovalSettings"
     * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings}
     * @return the request
     */
    public UpdateAccessApprovalSettings updateAccessApprovalSettings(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings content) throws java.io.IOException {
      UpdateAccessApprovalSettings result = new UpdateAccessApprovalSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateAccessApprovalSettings extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^folders/[^/]+/accessApprovalSettings$");

      /**
       * Updates the settings associated with a project, folder, or organization. Completely replaces
       * the existing settings.
       *
       * Create a request for the method "folders.updateAccessApprovalSettings".
       *
       * This request holds the parameters needed by the the accessapproval server.  After setting any
       * optional parameters, call the {@link UpdateAccessApprovalSettings#execute()} method to invoke
       * the remote operation. <p> {@link UpdateAccessApprovalSettings#initialize(com.google.api.client.
       * googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the settings. Format is one of:
     *        "projects/{project_id}/accessApprovalSettings"
     *        "folders/{folder_id}/accessApprovalSettings"
     *        "organizations/{organization_id}/accessApprovalSettings"
       * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings}
       * @since 1.13
       */
      protected UpdateAccessApprovalSettings(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings content) {
        super(AccessApproval.this, "PATCH", REST_PATH, content, com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/accessApprovalSettings$");
        }
      }

      @Override
      public UpdateAccessApprovalSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateAccessApprovalSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateAccessApprovalSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateAccessApprovalSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateAccessApprovalSettings setAlt(java.lang.String alt) {
        return (UpdateAccessApprovalSettings) super.setAlt(alt);
      }

      @Override
      public UpdateAccessApprovalSettings setCallback(java.lang.String callback) {
        return (UpdateAccessApprovalSettings) super.setCallback(callback);
      }

      @Override
      public UpdateAccessApprovalSettings setFields(java.lang.String fields) {
        return (UpdateAccessApprovalSettings) super.setFields(fields);
      }

      @Override
      public UpdateAccessApprovalSettings setKey(java.lang.String key) {
        return (UpdateAccessApprovalSettings) super.setKey(key);
      }

      @Override
      public UpdateAccessApprovalSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateAccessApprovalSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateAccessApprovalSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateAccessApprovalSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateAccessApprovalSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateAccessApprovalSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateAccessApprovalSettings setUploadType(java.lang.String uploadType) {
        return (UpdateAccessApprovalSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateAccessApprovalSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateAccessApprovalSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the settings. Format is one of:
       *
       * "projects/{project_id}/accessApprovalSettings" "folders/{folder_id}/accessApprovalSettings"
       * "organizations/{organization_id}/accessApprovalSettings"
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the settings. Format is one of:

     "projects/{project_id}/accessApprovalSettings" "folders/{folder_id}/accessApprovalSettings"
     "organizations/{organization_id}/accessApprovalSettings"
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the settings. Format is one of:
       *
       * "projects/{project_id}/accessApprovalSettings" "folders/{folder_id}/accessApprovalSettings"
       * "organizations/{organization_id}/accessApprovalSettings"
       */
      public UpdateAccessApprovalSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^folders/[^/]+/accessApprovalSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public UpdateAccessApprovalSettings set(String parameterName, Object value) {
        return (UpdateAccessApprovalSettings) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the ApprovalRequests collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code AccessApproval accessapproval = new AccessApproval(...);}
     *   {@code AccessApproval.ApprovalRequests.List request = accessapproval.approvalRequests().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public ApprovalRequests approvalRequests() {
      return new ApprovalRequests();
    }

    /**
     * The "approvalRequests" collection of methods.
     */
    public class ApprovalRequests {

      /**
       * Approves a request and returns the updated ApprovalRequest.
       *
       * Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request
       * exists but is not in a pending state.
       *
       * Create a request for the method "approvalRequests.approve".
       *
       * This request holds the parameters needed by the accessapproval server.  After setting any
       * optional parameters, call the {@link Approve#execute()} method to invoke the remote operation.
       *
       * @param name Name of the approval request to approve.
       * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.ApproveApprovalRequestMessage}
       * @return the request
       */
      public Approve approve(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.ApproveApprovalRequestMessage content) throws java.io.IOException {
        Approve result = new Approve(name, content);
        initialize(result);
        return result;
      }

      public class Approve extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest> {

        private static final String REST_PATH = "v1beta1/{+name}:approve";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^folders/[^/]+/approvalRequests/[^/]+$");

        /**
         * Approves a request and returns the updated ApprovalRequest.
         *
         * Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request
         * exists but is not in a pending state.
         *
         * Create a request for the method "approvalRequests.approve".
         *
         * This request holds the parameters needed by the the accessapproval server.  After setting any
         * optional parameters, call the {@link Approve#execute()} method to invoke the remote operation.
         * <p> {@link
         * Approve#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Name of the approval request to approve.
         * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.ApproveApprovalRequestMessage}
         * @since 1.13
         */
        protected Approve(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.ApproveApprovalRequestMessage content) {
          super(AccessApproval.this, "POST", REST_PATH, content, com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/approvalRequests/[^/]+$");
          }
        }

        @Override
        public Approve set$Xgafv(java.lang.String $Xgafv) {
          return (Approve) super.set$Xgafv($Xgafv);
        }

        @Override
        public Approve setAccessToken(java.lang.String accessToken) {
          return (Approve) super.setAccessToken(accessToken);
        }

        @Override
        public Approve setAlt(java.lang.String alt) {
          return (Approve) super.setAlt(alt);
        }

        @Override
        public Approve setCallback(java.lang.String callback) {
          return (Approve) super.setCallback(callback);
        }

        @Override
        public Approve setFields(java.lang.String fields) {
          return (Approve) super.setFields(fields);
        }

        @Override
        public Approve setKey(java.lang.String key) {
          return (Approve) super.setKey(key);
        }

        @Override
        public Approve setOauthToken(java.lang.String oauthToken) {
          return (Approve) super.setOauthToken(oauthToken);
        }

        @Override
        public Approve setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Approve) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Approve setQuotaUser(java.lang.String quotaUser) {
          return (Approve) super.setQuotaUser(quotaUser);
        }

        @Override
        public Approve setUploadType(java.lang.String uploadType) {
          return (Approve) super.setUploadType(uploadType);
        }

        @Override
        public Approve setUploadProtocol(java.lang.String uploadProtocol) {
          return (Approve) super.setUploadProtocol(uploadProtocol);
        }

        /** Name of the approval request to approve. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Name of the approval request to approve.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Name of the approval request to approve. */
        public Approve setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/approvalRequests/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Approve set(String parameterName, Object value) {
          return (Approve) super.set(parameterName, value);
        }
      }
      /**
       * Dismisses a request. Returns the updated ApprovalRequest.
       *
       * NOTE: This does not deny access to the resource if another request has been made and approved. It
       * is equivalent in effect to ignoring the request altogether.
       *
       * Returns NOT_FOUND if the request does not exist.
       *
       * Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
       *
       * Create a request for the method "approvalRequests.dismiss".
       *
       * This request holds the parameters needed by the accessapproval server.  After setting any
       * optional parameters, call the {@link Dismiss#execute()} method to invoke the remote operation.
       *
       * @param name Name of the ApprovalRequest to dismiss.
       * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.DismissApprovalRequestMessage}
       * @return the request
       */
      public Dismiss dismiss(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.DismissApprovalRequestMessage content) throws java.io.IOException {
        Dismiss result = new Dismiss(name, content);
        initialize(result);
        return result;
      }

      public class Dismiss extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest> {

        private static final String REST_PATH = "v1beta1/{+name}:dismiss";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^folders/[^/]+/approvalRequests/[^/]+$");

        /**
         * Dismisses a request. Returns the updated ApprovalRequest.
         *
         * NOTE: This does not deny access to the resource if another request has been made and approved.
         * It is equivalent in effect to ignoring the request altogether.
         *
         * Returns NOT_FOUND if the request does not exist.
         *
         * Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
         *
         * Create a request for the method "approvalRequests.dismiss".
         *
         * This request holds the parameters needed by the the accessapproval server.  After setting any
         * optional parameters, call the {@link Dismiss#execute()} method to invoke the remote operation.
         * <p> {@link
         * Dismiss#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Name of the ApprovalRequest to dismiss.
         * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.DismissApprovalRequestMessage}
         * @since 1.13
         */
        protected Dismiss(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.DismissApprovalRequestMessage content) {
          super(AccessApproval.this, "POST", REST_PATH, content, com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/approvalRequests/[^/]+$");
          }
        }

        @Override
        public Dismiss set$Xgafv(java.lang.String $Xgafv) {
          return (Dismiss) super.set$Xgafv($Xgafv);
        }

        @Override
        public Dismiss setAccessToken(java.lang.String accessToken) {
          return (Dismiss) super.setAccessToken(accessToken);
        }

        @Override
        public Dismiss setAlt(java.lang.String alt) {
          return (Dismiss) super.setAlt(alt);
        }

        @Override
        public Dismiss setCallback(java.lang.String callback) {
          return (Dismiss) super.setCallback(callback);
        }

        @Override
        public Dismiss setFields(java.lang.String fields) {
          return (Dismiss) super.setFields(fields);
        }

        @Override
        public Dismiss setKey(java.lang.String key) {
          return (Dismiss) super.setKey(key);
        }

        @Override
        public Dismiss setOauthToken(java.lang.String oauthToken) {
          return (Dismiss) super.setOauthToken(oauthToken);
        }

        @Override
        public Dismiss setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Dismiss) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Dismiss setQuotaUser(java.lang.String quotaUser) {
          return (Dismiss) super.setQuotaUser(quotaUser);
        }

        @Override
        public Dismiss setUploadType(java.lang.String uploadType) {
          return (Dismiss) super.setUploadType(uploadType);
        }

        @Override
        public Dismiss setUploadProtocol(java.lang.String uploadProtocol) {
          return (Dismiss) super.setUploadProtocol(uploadProtocol);
        }

        /** Name of the ApprovalRequest to dismiss. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Name of the ApprovalRequest to dismiss.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Name of the ApprovalRequest to dismiss. */
        public Dismiss setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/approvalRequests/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Dismiss set(String parameterName, Object value) {
          return (Dismiss) super.set(parameterName, value);
        }
      }
      /**
       * Gets an approval request. Returns NOT_FOUND if the request does not exist.
       *
       * Create a request for the method "approvalRequests.get".
       *
       * This request holds the parameters needed by the accessapproval server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Name of the approval request to retrieve.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^folders/[^/]+/approvalRequests/[^/]+$");

        /**
         * Gets an approval request. Returns NOT_FOUND if the request does not exist.
         *
         * Create a request for the method "approvalRequests.get".
         *
         * This request holds the parameters needed by the the accessapproval server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Name of the approval request to retrieve.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(AccessApproval.this, "GET", REST_PATH, null, com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/approvalRequests/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Name of the approval request to retrieve. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Name of the approval request to retrieve.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Name of the approval request to retrieve. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^folders/[^/]+/approvalRequests/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists approval requests associated with a project, folder, or organization. Approval requests can
       * be filtered by state (pending, active, dismissed). The order is reverse chronological.
       *
       * Create a request for the method "approvalRequests.list".
       *
       * This request holds the parameters needed by the accessapproval server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent The parent resource. This may be "projects/{project_id}",
      "folders/{folder_id}", or
       *        "organizations/{organization_id}".
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.ListApprovalRequestsResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/approvalRequests";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^folders/[^/]+$");

        /**
         * Lists approval requests associated with a project, folder, or organization. Approval requests
         * can be filtered by state (pending, active, dismissed). The order is reverse chronological.
         *
         * Create a request for the method "approvalRequests.list".
         *
         * This request holds the parameters needed by the the accessapproval server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent The parent resource. This may be "projects/{project_id}",
      "folders/{folder_id}", or
       *        "organizations/{organization_id}".
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(AccessApproval.this, "GET", REST_PATH, null, com.google.api.services.accessapproval.v1beta1.model.ListApprovalRequestsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^folders/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The parent resource. This may be "projects/{project_id}", "folders/{folder_id}", or
         * "organizations/{organization_id}".
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** The parent resource. This may be "projects/{project_id}", "folders/{folder_id}", or
       "organizations/{organization_id}".
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * The parent resource. This may be "projects/{project_id}", "folders/{folder_id}", or
         * "organizations/{organization_id}".
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^folders/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * A filter on the type of approval requests to retrieve. Must be one of the following
         * values:
         *
         * [not set]: Requests that are pending or have active approvals. ALL: All requests.
         * PENDING: Only pending requests. ACTIVE: Only active (i.e. currently approved) requests.
         * DISMISSED: Only dismissed (including expired) requests.
         */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** A filter on the type of approval requests to retrieve. Must be one of the following values:

       [not set]: Requests that are pending or have active approvals. ALL: All requests. PENDING: Only
       pending requests. ACTIVE: Only active (i.e. currently approved) requests. DISMISSED: Only dismissed
       (including expired) requests.
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /**
         * A filter on the type of approval requests to retrieve. Must be one of the following
         * values:
         *
         * [not set]: Requests that are pending or have active approvals. ALL: All requests.
         * PENDING: Only pending requests. ACTIVE: Only active (i.e. currently approved) requests.
         * DISMISSED: Only dismissed (including expired) requests.
         */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** Requested page size. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Requested page size.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** Requested page size. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** A token identifying the page of results to return. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A token identifying the page of results to return.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** A token identifying the page of results to return. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Organizations collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AccessApproval accessapproval = new AccessApproval(...);}
   *   {@code AccessApproval.Organizations.List request = accessapproval.organizations().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Organizations organizations() {
    return new Organizations();
  }

  /**
   * The "organizations" collection of methods.
   */
  public class Organizations {

    /**
     * Gets the settings associated with a project, folder, or organization.
     *
     * Create a request for the method "organizations.getAccessApprovalSettings".
     *
     * This request holds the parameters needed by the accessapproval server.  After setting any
     * optional parameters, call the {@link GetAccessApprovalSettings#execute()} method to invoke the
     * remote operation.
     *
     * @param name Name of the AccessApprovalSettings to retrieve.
     * @return the request
     */
    public GetAccessApprovalSettings getAccessApprovalSettings(java.lang.String name) throws java.io.IOException {
      GetAccessApprovalSettings result = new GetAccessApprovalSettings(name);
      initialize(result);
      return result;
    }

    public class GetAccessApprovalSettings extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^organizations/[^/]+/accessApprovalSettings$");

      /**
       * Gets the settings associated with a project, folder, or organization.
       *
       * Create a request for the method "organizations.getAccessApprovalSettings".
       *
       * This request holds the parameters needed by the the accessapproval server.  After setting any
       * optional parameters, call the {@link GetAccessApprovalSettings#execute()} method to invoke the
       * remote operation. <p> {@link GetAccessApprovalSettings#initialize(com.google.api.client.googlea
       * pis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @param name Name of the AccessApprovalSettings to retrieve.
       * @since 1.13
       */
      protected GetAccessApprovalSettings(java.lang.String name) {
        super(AccessApproval.this, "GET", REST_PATH, null, com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/accessApprovalSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetAccessApprovalSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetAccessApprovalSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetAccessApprovalSettings setAccessToken(java.lang.String accessToken) {
        return (GetAccessApprovalSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetAccessApprovalSettings setAlt(java.lang.String alt) {
        return (GetAccessApprovalSettings) super.setAlt(alt);
      }

      @Override
      public GetAccessApprovalSettings setCallback(java.lang.String callback) {
        return (GetAccessApprovalSettings) super.setCallback(callback);
      }

      @Override
      public GetAccessApprovalSettings setFields(java.lang.String fields) {
        return (GetAccessApprovalSettings) super.setFields(fields);
      }

      @Override
      public GetAccessApprovalSettings setKey(java.lang.String key) {
        return (GetAccessApprovalSettings) super.setKey(key);
      }

      @Override
      public GetAccessApprovalSettings setOauthToken(java.lang.String oauthToken) {
        return (GetAccessApprovalSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetAccessApprovalSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetAccessApprovalSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetAccessApprovalSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetAccessApprovalSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetAccessApprovalSettings setUploadType(java.lang.String uploadType) {
        return (GetAccessApprovalSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetAccessApprovalSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetAccessApprovalSettings) super.setUploadProtocol(uploadProtocol);
      }

      /** Name of the AccessApprovalSettings to retrieve. */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Name of the AccessApprovalSettings to retrieve.
       */
      public java.lang.String getName() {
        return name;
      }

      /** Name of the AccessApprovalSettings to retrieve. */
      public GetAccessApprovalSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/accessApprovalSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetAccessApprovalSettings set(String parameterName, Object value) {
        return (GetAccessApprovalSettings) super.set(parameterName, value);
      }
    }
    /**
     * Updates the settings associated with a project, folder, or organization. Completely replaces the
     * existing settings.
     *
     * Create a request for the method "organizations.updateAccessApprovalSettings".
     *
     * This request holds the parameters needed by the accessapproval server.  After setting any
     * optional parameters, call the {@link UpdateAccessApprovalSettings#execute()} method to invoke the
     * remote operation.
     *
     * @param name The resource name of the settings. Format is one of:
     *        "projects/{project_id}/accessApprovalSettings"
     *        "folders/{folder_id}/accessApprovalSettings"
     *        "organizations/{organization_id}/accessApprovalSettings"
     * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings}
     * @return the request
     */
    public UpdateAccessApprovalSettings updateAccessApprovalSettings(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings content) throws java.io.IOException {
      UpdateAccessApprovalSettings result = new UpdateAccessApprovalSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateAccessApprovalSettings extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^organizations/[^/]+/accessApprovalSettings$");

      /**
       * Updates the settings associated with a project, folder, or organization. Completely replaces
       * the existing settings.
       *
       * Create a request for the method "organizations.updateAccessApprovalSettings".
       *
       * This request holds the parameters needed by the the accessapproval server.  After setting any
       * optional parameters, call the {@link UpdateAccessApprovalSettings#execute()} method to invoke
       * the remote operation. <p> {@link UpdateAccessApprovalSettings#initialize(com.google.api.client.
       * googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the settings. Format is one of:
     *        "projects/{project_id}/accessApprovalSettings"
     *        "folders/{folder_id}/accessApprovalSettings"
     *        "organizations/{organization_id}/accessApprovalSettings"
       * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings}
       * @since 1.13
       */
      protected UpdateAccessApprovalSettings(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings content) {
        super(AccessApproval.this, "PATCH", REST_PATH, content, com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/accessApprovalSettings$");
        }
      }

      @Override
      public UpdateAccessApprovalSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateAccessApprovalSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateAccessApprovalSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateAccessApprovalSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateAccessApprovalSettings setAlt(java.lang.String alt) {
        return (UpdateAccessApprovalSettings) super.setAlt(alt);
      }

      @Override
      public UpdateAccessApprovalSettings setCallback(java.lang.String callback) {
        return (UpdateAccessApprovalSettings) super.setCallback(callback);
      }

      @Override
      public UpdateAccessApprovalSettings setFields(java.lang.String fields) {
        return (UpdateAccessApprovalSettings) super.setFields(fields);
      }

      @Override
      public UpdateAccessApprovalSettings setKey(java.lang.String key) {
        return (UpdateAccessApprovalSettings) super.setKey(key);
      }

      @Override
      public UpdateAccessApprovalSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateAccessApprovalSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateAccessApprovalSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateAccessApprovalSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateAccessApprovalSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateAccessApprovalSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateAccessApprovalSettings setUploadType(java.lang.String uploadType) {
        return (UpdateAccessApprovalSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateAccessApprovalSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateAccessApprovalSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the settings. Format is one of:
       *
       * "projects/{project_id}/accessApprovalSettings" "folders/{folder_id}/accessApprovalSettings"
       * "organizations/{organization_id}/accessApprovalSettings"
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the settings. Format is one of:

     "projects/{project_id}/accessApprovalSettings" "folders/{folder_id}/accessApprovalSettings"
     "organizations/{organization_id}/accessApprovalSettings"
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the settings. Format is one of:
       *
       * "projects/{project_id}/accessApprovalSettings" "folders/{folder_id}/accessApprovalSettings"
       * "organizations/{organization_id}/accessApprovalSettings"
       */
      public UpdateAccessApprovalSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^organizations/[^/]+/accessApprovalSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public UpdateAccessApprovalSettings set(String parameterName, Object value) {
        return (UpdateAccessApprovalSettings) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the ApprovalRequests collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code AccessApproval accessapproval = new AccessApproval(...);}
     *   {@code AccessApproval.ApprovalRequests.List request = accessapproval.approvalRequests().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public ApprovalRequests approvalRequests() {
      return new ApprovalRequests();
    }

    /**
     * The "approvalRequests" collection of methods.
     */
    public class ApprovalRequests {

      /**
       * Approves a request and returns the updated ApprovalRequest.
       *
       * Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request
       * exists but is not in a pending state.
       *
       * Create a request for the method "approvalRequests.approve".
       *
       * This request holds the parameters needed by the accessapproval server.  After setting any
       * optional parameters, call the {@link Approve#execute()} method to invoke the remote operation.
       *
       * @param name Name of the approval request to approve.
       * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.ApproveApprovalRequestMessage}
       * @return the request
       */
      public Approve approve(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.ApproveApprovalRequestMessage content) throws java.io.IOException {
        Approve result = new Approve(name, content);
        initialize(result);
        return result;
      }

      public class Approve extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest> {

        private static final String REST_PATH = "v1beta1/{+name}:approve";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^organizations/[^/]+/approvalRequests/[^/]+$");

        /**
         * Approves a request and returns the updated ApprovalRequest.
         *
         * Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request
         * exists but is not in a pending state.
         *
         * Create a request for the method "approvalRequests.approve".
         *
         * This request holds the parameters needed by the the accessapproval server.  After setting any
         * optional parameters, call the {@link Approve#execute()} method to invoke the remote operation.
         * <p> {@link
         * Approve#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Name of the approval request to approve.
         * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.ApproveApprovalRequestMessage}
         * @since 1.13
         */
        protected Approve(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.ApproveApprovalRequestMessage content) {
          super(AccessApproval.this, "POST", REST_PATH, content, com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/approvalRequests/[^/]+$");
          }
        }

        @Override
        public Approve set$Xgafv(java.lang.String $Xgafv) {
          return (Approve) super.set$Xgafv($Xgafv);
        }

        @Override
        public Approve setAccessToken(java.lang.String accessToken) {
          return (Approve) super.setAccessToken(accessToken);
        }

        @Override
        public Approve setAlt(java.lang.String alt) {
          return (Approve) super.setAlt(alt);
        }

        @Override
        public Approve setCallback(java.lang.String callback) {
          return (Approve) super.setCallback(callback);
        }

        @Override
        public Approve setFields(java.lang.String fields) {
          return (Approve) super.setFields(fields);
        }

        @Override
        public Approve setKey(java.lang.String key) {
          return (Approve) super.setKey(key);
        }

        @Override
        public Approve setOauthToken(java.lang.String oauthToken) {
          return (Approve) super.setOauthToken(oauthToken);
        }

        @Override
        public Approve setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Approve) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Approve setQuotaUser(java.lang.String quotaUser) {
          return (Approve) super.setQuotaUser(quotaUser);
        }

        @Override
        public Approve setUploadType(java.lang.String uploadType) {
          return (Approve) super.setUploadType(uploadType);
        }

        @Override
        public Approve setUploadProtocol(java.lang.String uploadProtocol) {
          return (Approve) super.setUploadProtocol(uploadProtocol);
        }

        /** Name of the approval request to approve. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Name of the approval request to approve.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Name of the approval request to approve. */
        public Approve setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/approvalRequests/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Approve set(String parameterName, Object value) {
          return (Approve) super.set(parameterName, value);
        }
      }
      /**
       * Dismisses a request. Returns the updated ApprovalRequest.
       *
       * NOTE: This does not deny access to the resource if another request has been made and approved. It
       * is equivalent in effect to ignoring the request altogether.
       *
       * Returns NOT_FOUND if the request does not exist.
       *
       * Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
       *
       * Create a request for the method "approvalRequests.dismiss".
       *
       * This request holds the parameters needed by the accessapproval server.  After setting any
       * optional parameters, call the {@link Dismiss#execute()} method to invoke the remote operation.
       *
       * @param name Name of the ApprovalRequest to dismiss.
       * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.DismissApprovalRequestMessage}
       * @return the request
       */
      public Dismiss dismiss(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.DismissApprovalRequestMessage content) throws java.io.IOException {
        Dismiss result = new Dismiss(name, content);
        initialize(result);
        return result;
      }

      public class Dismiss extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest> {

        private static final String REST_PATH = "v1beta1/{+name}:dismiss";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^organizations/[^/]+/approvalRequests/[^/]+$");

        /**
         * Dismisses a request. Returns the updated ApprovalRequest.
         *
         * NOTE: This does not deny access to the resource if another request has been made and approved.
         * It is equivalent in effect to ignoring the request altogether.
         *
         * Returns NOT_FOUND if the request does not exist.
         *
         * Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
         *
         * Create a request for the method "approvalRequests.dismiss".
         *
         * This request holds the parameters needed by the the accessapproval server.  After setting any
         * optional parameters, call the {@link Dismiss#execute()} method to invoke the remote operation.
         * <p> {@link
         * Dismiss#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Name of the ApprovalRequest to dismiss.
         * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.DismissApprovalRequestMessage}
         * @since 1.13
         */
        protected Dismiss(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.DismissApprovalRequestMessage content) {
          super(AccessApproval.this, "POST", REST_PATH, content, com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/approvalRequests/[^/]+$");
          }
        }

        @Override
        public Dismiss set$Xgafv(java.lang.String $Xgafv) {
          return (Dismiss) super.set$Xgafv($Xgafv);
        }

        @Override
        public Dismiss setAccessToken(java.lang.String accessToken) {
          return (Dismiss) super.setAccessToken(accessToken);
        }

        @Override
        public Dismiss setAlt(java.lang.String alt) {
          return (Dismiss) super.setAlt(alt);
        }

        @Override
        public Dismiss setCallback(java.lang.String callback) {
          return (Dismiss) super.setCallback(callback);
        }

        @Override
        public Dismiss setFields(java.lang.String fields) {
          return (Dismiss) super.setFields(fields);
        }

        @Override
        public Dismiss setKey(java.lang.String key) {
          return (Dismiss) super.setKey(key);
        }

        @Override
        public Dismiss setOauthToken(java.lang.String oauthToken) {
          return (Dismiss) super.setOauthToken(oauthToken);
        }

        @Override
        public Dismiss setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Dismiss) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Dismiss setQuotaUser(java.lang.String quotaUser) {
          return (Dismiss) super.setQuotaUser(quotaUser);
        }

        @Override
        public Dismiss setUploadType(java.lang.String uploadType) {
          return (Dismiss) super.setUploadType(uploadType);
        }

        @Override
        public Dismiss setUploadProtocol(java.lang.String uploadProtocol) {
          return (Dismiss) super.setUploadProtocol(uploadProtocol);
        }

        /** Name of the ApprovalRequest to dismiss. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Name of the ApprovalRequest to dismiss.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Name of the ApprovalRequest to dismiss. */
        public Dismiss setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/approvalRequests/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Dismiss set(String parameterName, Object value) {
          return (Dismiss) super.set(parameterName, value);
        }
      }
      /**
       * Gets an approval request. Returns NOT_FOUND if the request does not exist.
       *
       * Create a request for the method "approvalRequests.get".
       *
       * This request holds the parameters needed by the accessapproval server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Name of the approval request to retrieve.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^organizations/[^/]+/approvalRequests/[^/]+$");

        /**
         * Gets an approval request. Returns NOT_FOUND if the request does not exist.
         *
         * Create a request for the method "approvalRequests.get".
         *
         * This request holds the parameters needed by the the accessapproval server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Name of the approval request to retrieve.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(AccessApproval.this, "GET", REST_PATH, null, com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/approvalRequests/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Name of the approval request to retrieve. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Name of the approval request to retrieve.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Name of the approval request to retrieve. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^organizations/[^/]+/approvalRequests/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists approval requests associated with a project, folder, or organization. Approval requests can
       * be filtered by state (pending, active, dismissed). The order is reverse chronological.
       *
       * Create a request for the method "approvalRequests.list".
       *
       * This request holds the parameters needed by the accessapproval server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent The parent resource. This may be "projects/{project_id}",
      "folders/{folder_id}", or
       *        "organizations/{organization_id}".
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.ListApprovalRequestsResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/approvalRequests";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^organizations/[^/]+$");

        /**
         * Lists approval requests associated with a project, folder, or organization. Approval requests
         * can be filtered by state (pending, active, dismissed). The order is reverse chronological.
         *
         * Create a request for the method "approvalRequests.list".
         *
         * This request holds the parameters needed by the the accessapproval server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent The parent resource. This may be "projects/{project_id}",
      "folders/{folder_id}", or
       *        "organizations/{organization_id}".
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(AccessApproval.this, "GET", REST_PATH, null, com.google.api.services.accessapproval.v1beta1.model.ListApprovalRequestsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^organizations/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The parent resource. This may be "projects/{project_id}", "folders/{folder_id}", or
         * "organizations/{organization_id}".
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** The parent resource. This may be "projects/{project_id}", "folders/{folder_id}", or
       "organizations/{organization_id}".
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * The parent resource. This may be "projects/{project_id}", "folders/{folder_id}", or
         * "organizations/{organization_id}".
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^organizations/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * A filter on the type of approval requests to retrieve. Must be one of the following
         * values:
         *
         * [not set]: Requests that are pending or have active approvals. ALL: All requests.
         * PENDING: Only pending requests. ACTIVE: Only active (i.e. currently approved) requests.
         * DISMISSED: Only dismissed (including expired) requests.
         */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** A filter on the type of approval requests to retrieve. Must be one of the following values:

       [not set]: Requests that are pending or have active approvals. ALL: All requests. PENDING: Only
       pending requests. ACTIVE: Only active (i.e. currently approved) requests. DISMISSED: Only dismissed
       (including expired) requests.
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /**
         * A filter on the type of approval requests to retrieve. Must be one of the following
         * values:
         *
         * [not set]: Requests that are pending or have active approvals. ALL: All requests.
         * PENDING: Only pending requests. ACTIVE: Only active (i.e. currently approved) requests.
         * DISMISSED: Only dismissed (including expired) requests.
         */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** Requested page size. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Requested page size.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** Requested page size. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** A token identifying the page of results to return. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A token identifying the page of results to return.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** A token identifying the page of results to return. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Projects collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code AccessApproval accessapproval = new AccessApproval(...);}
   *   {@code AccessApproval.Projects.List request = accessapproval.projects().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Projects projects() {
    return new Projects();
  }

  /**
   * The "projects" collection of methods.
   */
  public class Projects {

    /**
     * Gets the settings associated with a project, folder, or organization.
     *
     * Create a request for the method "projects.getAccessApprovalSettings".
     *
     * This request holds the parameters needed by the accessapproval server.  After setting any
     * optional parameters, call the {@link GetAccessApprovalSettings#execute()} method to invoke the
     * remote operation.
     *
     * @param name Name of the AccessApprovalSettings to retrieve.
     * @return the request
     */
    public GetAccessApprovalSettings getAccessApprovalSettings(java.lang.String name) throws java.io.IOException {
      GetAccessApprovalSettings result = new GetAccessApprovalSettings(name);
      initialize(result);
      return result;
    }

    public class GetAccessApprovalSettings extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/accessApprovalSettings$");

      /**
       * Gets the settings associated with a project, folder, or organization.
       *
       * Create a request for the method "projects.getAccessApprovalSettings".
       *
       * This request holds the parameters needed by the the accessapproval server.  After setting any
       * optional parameters, call the {@link GetAccessApprovalSettings#execute()} method to invoke the
       * remote operation. <p> {@link GetAccessApprovalSettings#initialize(com.google.api.client.googlea
       * pis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @param name Name of the AccessApprovalSettings to retrieve.
       * @since 1.13
       */
      protected GetAccessApprovalSettings(java.lang.String name) {
        super(AccessApproval.this, "GET", REST_PATH, null, com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/accessApprovalSettings$");
        }
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetAccessApprovalSettings set$Xgafv(java.lang.String $Xgafv) {
        return (GetAccessApprovalSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public GetAccessApprovalSettings setAccessToken(java.lang.String accessToken) {
        return (GetAccessApprovalSettings) super.setAccessToken(accessToken);
      }

      @Override
      public GetAccessApprovalSettings setAlt(java.lang.String alt) {
        return (GetAccessApprovalSettings) super.setAlt(alt);
      }

      @Override
      public GetAccessApprovalSettings setCallback(java.lang.String callback) {
        return (GetAccessApprovalSettings) super.setCallback(callback);
      }

      @Override
      public GetAccessApprovalSettings setFields(java.lang.String fields) {
        return (GetAccessApprovalSettings) super.setFields(fields);
      }

      @Override
      public GetAccessApprovalSettings setKey(java.lang.String key) {
        return (GetAccessApprovalSettings) super.setKey(key);
      }

      @Override
      public GetAccessApprovalSettings setOauthToken(java.lang.String oauthToken) {
        return (GetAccessApprovalSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public GetAccessApprovalSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetAccessApprovalSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetAccessApprovalSettings setQuotaUser(java.lang.String quotaUser) {
        return (GetAccessApprovalSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetAccessApprovalSettings setUploadType(java.lang.String uploadType) {
        return (GetAccessApprovalSettings) super.setUploadType(uploadType);
      }

      @Override
      public GetAccessApprovalSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (GetAccessApprovalSettings) super.setUploadProtocol(uploadProtocol);
      }

      /** Name of the AccessApprovalSettings to retrieve. */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** Name of the AccessApprovalSettings to retrieve.
       */
      public java.lang.String getName() {
        return name;
      }

      /** Name of the AccessApprovalSettings to retrieve. */
      public GetAccessApprovalSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/accessApprovalSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public GetAccessApprovalSettings set(String parameterName, Object value) {
        return (GetAccessApprovalSettings) super.set(parameterName, value);
      }
    }
    /**
     * Updates the settings associated with a project, folder, or organization. Completely replaces the
     * existing settings.
     *
     * Create a request for the method "projects.updateAccessApprovalSettings".
     *
     * This request holds the parameters needed by the accessapproval server.  After setting any
     * optional parameters, call the {@link UpdateAccessApprovalSettings#execute()} method to invoke the
     * remote operation.
     *
     * @param name The resource name of the settings. Format is one of:
     *        "projects/{project_id}/accessApprovalSettings"
     *        "folders/{folder_id}/accessApprovalSettings"
     *        "organizations/{organization_id}/accessApprovalSettings"
     * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings}
     * @return the request
     */
    public UpdateAccessApprovalSettings updateAccessApprovalSettings(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings content) throws java.io.IOException {
      UpdateAccessApprovalSettings result = new UpdateAccessApprovalSettings(name, content);
      initialize(result);
      return result;
    }

    public class UpdateAccessApprovalSettings extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings> {

      private static final String REST_PATH = "v1beta1/{+name}";

      private final java.util.regex.Pattern NAME_PATTERN =
          java.util.regex.Pattern.compile("^projects/[^/]+/accessApprovalSettings$");

      /**
       * Updates the settings associated with a project, folder, or organization. Completely replaces
       * the existing settings.
       *
       * Create a request for the method "projects.updateAccessApprovalSettings".
       *
       * This request holds the parameters needed by the the accessapproval server.  After setting any
       * optional parameters, call the {@link UpdateAccessApprovalSettings#execute()} method to invoke
       * the remote operation. <p> {@link UpdateAccessApprovalSettings#initialize(com.google.api.client.
       * googleapis.services.AbstractGoogleClientRequest)} must be called to initialize this instance
       * immediately after invoking the constructor. </p>
       *
       * @param name The resource name of the settings. Format is one of:
     *        "projects/{project_id}/accessApprovalSettings"
     *        "folders/{folder_id}/accessApprovalSettings"
     *        "organizations/{organization_id}/accessApprovalSettings"
       * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings}
       * @since 1.13
       */
      protected UpdateAccessApprovalSettings(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings content) {
        super(AccessApproval.this, "PATCH", REST_PATH, content, com.google.api.services.accessapproval.v1beta1.model.AccessApprovalSettings.class);
        this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/accessApprovalSettings$");
        }
      }

      @Override
      public UpdateAccessApprovalSettings set$Xgafv(java.lang.String $Xgafv) {
        return (UpdateAccessApprovalSettings) super.set$Xgafv($Xgafv);
      }

      @Override
      public UpdateAccessApprovalSettings setAccessToken(java.lang.String accessToken) {
        return (UpdateAccessApprovalSettings) super.setAccessToken(accessToken);
      }

      @Override
      public UpdateAccessApprovalSettings setAlt(java.lang.String alt) {
        return (UpdateAccessApprovalSettings) super.setAlt(alt);
      }

      @Override
      public UpdateAccessApprovalSettings setCallback(java.lang.String callback) {
        return (UpdateAccessApprovalSettings) super.setCallback(callback);
      }

      @Override
      public UpdateAccessApprovalSettings setFields(java.lang.String fields) {
        return (UpdateAccessApprovalSettings) super.setFields(fields);
      }

      @Override
      public UpdateAccessApprovalSettings setKey(java.lang.String key) {
        return (UpdateAccessApprovalSettings) super.setKey(key);
      }

      @Override
      public UpdateAccessApprovalSettings setOauthToken(java.lang.String oauthToken) {
        return (UpdateAccessApprovalSettings) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateAccessApprovalSettings setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateAccessApprovalSettings) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateAccessApprovalSettings setQuotaUser(java.lang.String quotaUser) {
        return (UpdateAccessApprovalSettings) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateAccessApprovalSettings setUploadType(java.lang.String uploadType) {
        return (UpdateAccessApprovalSettings) super.setUploadType(uploadType);
      }

      @Override
      public UpdateAccessApprovalSettings setUploadProtocol(java.lang.String uploadProtocol) {
        return (UpdateAccessApprovalSettings) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * The resource name of the settings. Format is one of:
       *
       * "projects/{project_id}/accessApprovalSettings" "folders/{folder_id}/accessApprovalSettings"
       * "organizations/{organization_id}/accessApprovalSettings"
       */
      @com.google.api.client.util.Key
      private java.lang.String name;

      /** The resource name of the settings. Format is one of:

     "projects/{project_id}/accessApprovalSettings" "folders/{folder_id}/accessApprovalSettings"
     "organizations/{organization_id}/accessApprovalSettings"
       */
      public java.lang.String getName() {
        return name;
      }

      /**
       * The resource name of the settings. Format is one of:
       *
       * "projects/{project_id}/accessApprovalSettings" "folders/{folder_id}/accessApprovalSettings"
       * "organizations/{organization_id}/accessApprovalSettings"
       */
      public UpdateAccessApprovalSettings setName(java.lang.String name) {
        if (!getSuppressPatternChecks()) {
          com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
              "Parameter name must conform to the pattern " +
              "^projects/[^/]+/accessApprovalSettings$");
        }
        this.name = name;
        return this;
      }

      @Override
      public UpdateAccessApprovalSettings set(String parameterName, Object value) {
        return (UpdateAccessApprovalSettings) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the ApprovalRequests collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code AccessApproval accessapproval = new AccessApproval(...);}
     *   {@code AccessApproval.ApprovalRequests.List request = accessapproval.approvalRequests().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public ApprovalRequests approvalRequests() {
      return new ApprovalRequests();
    }

    /**
     * The "approvalRequests" collection of methods.
     */
    public class ApprovalRequests {

      /**
       * Approves a request and returns the updated ApprovalRequest.
       *
       * Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request
       * exists but is not in a pending state.
       *
       * Create a request for the method "approvalRequests.approve".
       *
       * This request holds the parameters needed by the accessapproval server.  After setting any
       * optional parameters, call the {@link Approve#execute()} method to invoke the remote operation.
       *
       * @param name Name of the approval request to approve.
       * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.ApproveApprovalRequestMessage}
       * @return the request
       */
      public Approve approve(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.ApproveApprovalRequestMessage content) throws java.io.IOException {
        Approve result = new Approve(name, content);
        initialize(result);
        return result;
      }

      public class Approve extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest> {

        private static final String REST_PATH = "v1beta1/{+name}:approve";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/approvalRequests/[^/]+$");

        /**
         * Approves a request and returns the updated ApprovalRequest.
         *
         * Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request
         * exists but is not in a pending state.
         *
         * Create a request for the method "approvalRequests.approve".
         *
         * This request holds the parameters needed by the the accessapproval server.  After setting any
         * optional parameters, call the {@link Approve#execute()} method to invoke the remote operation.
         * <p> {@link
         * Approve#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Name of the approval request to approve.
         * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.ApproveApprovalRequestMessage}
         * @since 1.13
         */
        protected Approve(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.ApproveApprovalRequestMessage content) {
          super(AccessApproval.this, "POST", REST_PATH, content, com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/approvalRequests/[^/]+$");
          }
        }

        @Override
        public Approve set$Xgafv(java.lang.String $Xgafv) {
          return (Approve) super.set$Xgafv($Xgafv);
        }

        @Override
        public Approve setAccessToken(java.lang.String accessToken) {
          return (Approve) super.setAccessToken(accessToken);
        }

        @Override
        public Approve setAlt(java.lang.String alt) {
          return (Approve) super.setAlt(alt);
        }

        @Override
        public Approve setCallback(java.lang.String callback) {
          return (Approve) super.setCallback(callback);
        }

        @Override
        public Approve setFields(java.lang.String fields) {
          return (Approve) super.setFields(fields);
        }

        @Override
        public Approve setKey(java.lang.String key) {
          return (Approve) super.setKey(key);
        }

        @Override
        public Approve setOauthToken(java.lang.String oauthToken) {
          return (Approve) super.setOauthToken(oauthToken);
        }

        @Override
        public Approve setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Approve) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Approve setQuotaUser(java.lang.String quotaUser) {
          return (Approve) super.setQuotaUser(quotaUser);
        }

        @Override
        public Approve setUploadType(java.lang.String uploadType) {
          return (Approve) super.setUploadType(uploadType);
        }

        @Override
        public Approve setUploadProtocol(java.lang.String uploadProtocol) {
          return (Approve) super.setUploadProtocol(uploadProtocol);
        }

        /** Name of the approval request to approve. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Name of the approval request to approve.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Name of the approval request to approve. */
        public Approve setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/approvalRequests/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Approve set(String parameterName, Object value) {
          return (Approve) super.set(parameterName, value);
        }
      }
      /**
       * Dismisses a request. Returns the updated ApprovalRequest.
       *
       * NOTE: This does not deny access to the resource if another request has been made and approved. It
       * is equivalent in effect to ignoring the request altogether.
       *
       * Returns NOT_FOUND if the request does not exist.
       *
       * Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
       *
       * Create a request for the method "approvalRequests.dismiss".
       *
       * This request holds the parameters needed by the accessapproval server.  After setting any
       * optional parameters, call the {@link Dismiss#execute()} method to invoke the remote operation.
       *
       * @param name Name of the ApprovalRequest to dismiss.
       * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.DismissApprovalRequestMessage}
       * @return the request
       */
      public Dismiss dismiss(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.DismissApprovalRequestMessage content) throws java.io.IOException {
        Dismiss result = new Dismiss(name, content);
        initialize(result);
        return result;
      }

      public class Dismiss extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest> {

        private static final String REST_PATH = "v1beta1/{+name}:dismiss";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/approvalRequests/[^/]+$");

        /**
         * Dismisses a request. Returns the updated ApprovalRequest.
         *
         * NOTE: This does not deny access to the resource if another request has been made and approved.
         * It is equivalent in effect to ignoring the request altogether.
         *
         * Returns NOT_FOUND if the request does not exist.
         *
         * Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
         *
         * Create a request for the method "approvalRequests.dismiss".
         *
         * This request holds the parameters needed by the the accessapproval server.  After setting any
         * optional parameters, call the {@link Dismiss#execute()} method to invoke the remote operation.
         * <p> {@link
         * Dismiss#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Name of the ApprovalRequest to dismiss.
         * @param content the {@link com.google.api.services.accessapproval.v1beta1.model.DismissApprovalRequestMessage}
         * @since 1.13
         */
        protected Dismiss(java.lang.String name, com.google.api.services.accessapproval.v1beta1.model.DismissApprovalRequestMessage content) {
          super(AccessApproval.this, "POST", REST_PATH, content, com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/approvalRequests/[^/]+$");
          }
        }

        @Override
        public Dismiss set$Xgafv(java.lang.String $Xgafv) {
          return (Dismiss) super.set$Xgafv($Xgafv);
        }

        @Override
        public Dismiss setAccessToken(java.lang.String accessToken) {
          return (Dismiss) super.setAccessToken(accessToken);
        }

        @Override
        public Dismiss setAlt(java.lang.String alt) {
          return (Dismiss) super.setAlt(alt);
        }

        @Override
        public Dismiss setCallback(java.lang.String callback) {
          return (Dismiss) super.setCallback(callback);
        }

        @Override
        public Dismiss setFields(java.lang.String fields) {
          return (Dismiss) super.setFields(fields);
        }

        @Override
        public Dismiss setKey(java.lang.String key) {
          return (Dismiss) super.setKey(key);
        }

        @Override
        public Dismiss setOauthToken(java.lang.String oauthToken) {
          return (Dismiss) super.setOauthToken(oauthToken);
        }

        @Override
        public Dismiss setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Dismiss) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Dismiss setQuotaUser(java.lang.String quotaUser) {
          return (Dismiss) super.setQuotaUser(quotaUser);
        }

        @Override
        public Dismiss setUploadType(java.lang.String uploadType) {
          return (Dismiss) super.setUploadType(uploadType);
        }

        @Override
        public Dismiss setUploadProtocol(java.lang.String uploadProtocol) {
          return (Dismiss) super.setUploadProtocol(uploadProtocol);
        }

        /** Name of the ApprovalRequest to dismiss. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Name of the ApprovalRequest to dismiss.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Name of the ApprovalRequest to dismiss. */
        public Dismiss setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/approvalRequests/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Dismiss set(String parameterName, Object value) {
          return (Dismiss) super.set(parameterName, value);
        }
      }
      /**
       * Gets an approval request. Returns NOT_FOUND if the request does not exist.
       *
       * Create a request for the method "approvalRequests.get".
       *
       * This request holds the parameters needed by the accessapproval server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param name Name of the approval request to retrieve.
       * @return the request
       */
      public Get get(java.lang.String name) throws java.io.IOException {
        Get result = new Get(name);
        initialize(result);
        return result;
      }

      public class Get extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest> {

        private static final String REST_PATH = "v1beta1/{+name}";

        private final java.util.regex.Pattern NAME_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+/approvalRequests/[^/]+$");

        /**
         * Gets an approval request. Returns NOT_FOUND if the request does not exist.
         *
         * Create a request for the method "approvalRequests.get".
         *
         * This request holds the parameters needed by the the accessapproval server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
         * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param name Name of the approval request to retrieve.
         * @since 1.13
         */
        protected Get(java.lang.String name) {
          super(AccessApproval.this, "GET", REST_PATH, null, com.google.api.services.accessapproval.v1beta1.model.ApprovalRequest.class);
          this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/approvalRequests/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Name of the approval request to retrieve. */
        @com.google.api.client.util.Key
        private java.lang.String name;

        /** Name of the approval request to retrieve.
         */
        public java.lang.String getName() {
          return name;
        }

        /** Name of the approval request to retrieve. */
        public Get setName(java.lang.String name) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                "Parameter name must conform to the pattern " +
                "^projects/[^/]+/approvalRequests/[^/]+$");
          }
          this.name = name;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists approval requests associated with a project, folder, or organization. Approval requests can
       * be filtered by state (pending, active, dismissed). The order is reverse chronological.
       *
       * Create a request for the method "approvalRequests.list".
       *
       * This request holds the parameters needed by the accessapproval server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param parent The parent resource. This may be "projects/{project_id}",
      "folders/{folder_id}", or
       *        "organizations/{organization_id}".
       * @return the request
       */
      public List list(java.lang.String parent) throws java.io.IOException {
        List result = new List(parent);
        initialize(result);
        return result;
      }

      public class List extends AccessApprovalRequest<com.google.api.services.accessapproval.v1beta1.model.ListApprovalRequestsResponse> {

        private static final String REST_PATH = "v1beta1/{+parent}/approvalRequests";

        private final java.util.regex.Pattern PARENT_PATTERN =
            java.util.regex.Pattern.compile("^projects/[^/]+$");

        /**
         * Lists approval requests associated with a project, folder, or organization. Approval requests
         * can be filtered by state (pending, active, dismissed). The order is reverse chronological.
         *
         * Create a request for the method "approvalRequests.list".
         *
         * This request holds the parameters needed by the the accessapproval server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
         * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param parent The parent resource. This may be "projects/{project_id}",
      "folders/{folder_id}", or
       *        "organizations/{organization_id}".
         * @since 1.13
         */
        protected List(java.lang.String parent) {
          super(AccessApproval.this, "GET", REST_PATH, null, com.google.api.services.accessapproval.v1beta1.model.ListApprovalRequestsResponse.class);
          this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /**
         * The parent resource. This may be "projects/{project_id}", "folders/{folder_id}", or
         * "organizations/{organization_id}".
         */
        @com.google.api.client.util.Key
        private java.lang.String parent;

        /** The parent resource. This may be "projects/{project_id}", "folders/{folder_id}", or
       "organizations/{organization_id}".
         */
        public java.lang.String getParent() {
          return parent;
        }

        /**
         * The parent resource. This may be "projects/{project_id}", "folders/{folder_id}", or
         * "organizations/{organization_id}".
         */
        public List setParent(java.lang.String parent) {
          if (!getSuppressPatternChecks()) {
            com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                "Parameter parent must conform to the pattern " +
                "^projects/[^/]+$");
          }
          this.parent = parent;
          return this;
        }

        /**
         * A filter on the type of approval requests to retrieve. Must be one of the following
         * values:
         *
         * [not set]: Requests that are pending or have active approvals. ALL: All requests.
         * PENDING: Only pending requests. ACTIVE: Only active (i.e. currently approved) requests.
         * DISMISSED: Only dismissed (including expired) requests.
         */
        @com.google.api.client.util.Key
        private java.lang.String filter;

        /** A filter on the type of approval requests to retrieve. Must be one of the following values:

       [not set]: Requests that are pending or have active approvals. ALL: All requests. PENDING: Only
       pending requests. ACTIVE: Only active (i.e. currently approved) requests. DISMISSED: Only dismissed
       (including expired) requests.
         */
        public java.lang.String getFilter() {
          return filter;
        }

        /**
         * A filter on the type of approval requests to retrieve. Must be one of the following
         * values:
         *
         * [not set]: Requests that are pending or have active approvals. ALL: All requests.
         * PENDING: Only pending requests. ACTIVE: Only active (i.e. currently approved) requests.
         * DISMISSED: Only dismissed (including expired) requests.
         */
        public List setFilter(java.lang.String filter) {
          this.filter = filter;
          return this;
        }

        /** Requested page size. */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Requested page size.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /** Requested page size. */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /** A token identifying the page of results to return. */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A token identifying the page of results to return.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /** A token identifying the page of results to return. */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link AccessApproval}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link AccessApproval}. */
    @Override
    public AccessApproval build() {
      return new AccessApproval(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link AccessApprovalRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setAccessApprovalRequestInitializer(
        AccessApprovalRequestInitializer accessapprovalRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(accessapprovalRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
