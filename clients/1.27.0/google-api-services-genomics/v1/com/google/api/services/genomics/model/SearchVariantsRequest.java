/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.genomics.model;

/**
 * The variant search request.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Genomics API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SearchVariantsRequest extends com.google.api.client.json.GenericJson {

  /**
   * Only return variant calls which belong to call sets with these ids. Leaving this blank returns
   * all variant calls. If a variant has no calls belonging to any of these call sets, it won't be
   * returned at all.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> callSetIds;

  /**
   * The end of the window, 0-based exclusive. If unspecified or 0, defaults to the length of the
   * reference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long end;

  /**
   * The maximum number of calls to return in a single page. Note that this limit may be exceeded in
   * the event that a matching variant contains more calls than the requested maximum. If
   * unspecified, defaults to 5000. The maximum value is 10000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxCalls;

  /**
   * The maximum number of variants to return in a single page. If unspecified, defaults to 5000.
   * The maximum value is 10000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer pageSize;

  /**
   * The continuation token, which is used to page through large result sets. To get the next page
   * of results, set this parameter to the value of `nextPageToken` from the previous response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pageToken;

  /**
   * Required. Only return variants in this reference sequence.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String referenceName;

  /**
   * The beginning of the window (0-based, inclusive) for which overlapping variants should be
   * returned. If unspecified, defaults to 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long start;

  /**
   * Only return variants which have exactly this name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String variantName;

  /**
   * At most one variant set ID must be provided. Only variants from this variant set will be
   * returned. If omitted, a call set id must be included in the request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> variantSetIds;

  /**
   * Only return variant calls which belong to call sets with these ids. Leaving this blank returns
   * all variant calls. If a variant has no calls belonging to any of these call sets, it won't be
   * returned at all.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCallSetIds() {
    return callSetIds;
  }

  /**
   * Only return variant calls which belong to call sets with these ids. Leaving this blank returns
   * all variant calls. If a variant has no calls belonging to any of these call sets, it won't be
   * returned at all.
   * @param callSetIds callSetIds or {@code null} for none
   */
  public SearchVariantsRequest setCallSetIds(java.util.List<java.lang.String> callSetIds) {
    this.callSetIds = callSetIds;
    return this;
  }

  /**
   * The end of the window, 0-based exclusive. If unspecified or 0, defaults to the length of the
   * reference.
   * @return value or {@code null} for none
   */
  public java.lang.Long getEnd() {
    return end;
  }

  /**
   * The end of the window, 0-based exclusive. If unspecified or 0, defaults to the length of the
   * reference.
   * @param end end or {@code null} for none
   */
  public SearchVariantsRequest setEnd(java.lang.Long end) {
    this.end = end;
    return this;
  }

  /**
   * The maximum number of calls to return in a single page. Note that this limit may be exceeded in
   * the event that a matching variant contains more calls than the requested maximum. If
   * unspecified, defaults to 5000. The maximum value is 10000.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxCalls() {
    return maxCalls;
  }

  /**
   * The maximum number of calls to return in a single page. Note that this limit may be exceeded in
   * the event that a matching variant contains more calls than the requested maximum. If
   * unspecified, defaults to 5000. The maximum value is 10000.
   * @param maxCalls maxCalls or {@code null} for none
   */
  public SearchVariantsRequest setMaxCalls(java.lang.Integer maxCalls) {
    this.maxCalls = maxCalls;
    return this;
  }

  /**
   * The maximum number of variants to return in a single page. If unspecified, defaults to 5000.
   * The maximum value is 10000.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPageSize() {
    return pageSize;
  }

  /**
   * The maximum number of variants to return in a single page. If unspecified, defaults to 5000.
   * The maximum value is 10000.
   * @param pageSize pageSize or {@code null} for none
   */
  public SearchVariantsRequest setPageSize(java.lang.Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * The continuation token, which is used to page through large result sets. To get the next page
   * of results, set this parameter to the value of `nextPageToken` from the previous response.
   * @return value or {@code null} for none
   */
  public java.lang.String getPageToken() {
    return pageToken;
  }

  /**
   * The continuation token, which is used to page through large result sets. To get the next page
   * of results, set this parameter to the value of `nextPageToken` from the previous response.
   * @param pageToken pageToken or {@code null} for none
   */
  public SearchVariantsRequest setPageToken(java.lang.String pageToken) {
    this.pageToken = pageToken;
    return this;
  }

  /**
   * Required. Only return variants in this reference sequence.
   * @return value or {@code null} for none
   */
  public java.lang.String getReferenceName() {
    return referenceName;
  }

  /**
   * Required. Only return variants in this reference sequence.
   * @param referenceName referenceName or {@code null} for none
   */
  public SearchVariantsRequest setReferenceName(java.lang.String referenceName) {
    this.referenceName = referenceName;
    return this;
  }

  /**
   * The beginning of the window (0-based, inclusive) for which overlapping variants should be
   * returned. If unspecified, defaults to 0.
   * @return value or {@code null} for none
   */
  public java.lang.Long getStart() {
    return start;
  }

  /**
   * The beginning of the window (0-based, inclusive) for which overlapping variants should be
   * returned. If unspecified, defaults to 0.
   * @param start start or {@code null} for none
   */
  public SearchVariantsRequest setStart(java.lang.Long start) {
    this.start = start;
    return this;
  }

  /**
   * Only return variants which have exactly this name.
   * @return value or {@code null} for none
   */
  public java.lang.String getVariantName() {
    return variantName;
  }

  /**
   * Only return variants which have exactly this name.
   * @param variantName variantName or {@code null} for none
   */
  public SearchVariantsRequest setVariantName(java.lang.String variantName) {
    this.variantName = variantName;
    return this;
  }

  /**
   * At most one variant set ID must be provided. Only variants from this variant set will be
   * returned. If omitted, a call set id must be included in the request.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getVariantSetIds() {
    return variantSetIds;
  }

  /**
   * At most one variant set ID must be provided. Only variants from this variant set will be
   * returned. If omitted, a call set id must be included in the request.
   * @param variantSetIds variantSetIds or {@code null} for none
   */
  public SearchVariantsRequest setVariantSetIds(java.util.List<java.lang.String> variantSetIds) {
    this.variantSetIds = variantSetIds;
    return this;
  }

  @Override
  public SearchVariantsRequest set(String fieldName, Object value) {
    return (SearchVariantsRequest) super.set(fieldName, value);
  }

  @Override
  public SearchVariantsRequest clone() {
    return (SearchVariantsRequest) super.clone();
  }

}
