/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Next ID: 17
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class AssistantApiSuggestionsSupport extends com.google.api.client.json.GenericJson {

  /**
   * Whether client supports user impersonation on suggestion chip click. go/suggestion-click-
   * impersonation
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean clickImpersonationSupported;

  /**
   * Whether client supports suggestion chips with colored background/border. Deprecated in favor of
   * go/color-token-suggestion-chip.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean coloredChipBackgroundBorderSupported;

  /**
   * Whether client supports suggestion chips with colored text. See design doc: http://go/opa-
   * suggestions-ux-eng-design. Deprecated in favor of go/color-token-suggestion-chip.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean coloredChipTextSupported;

  /**
   * Whether client supports suggestions debug data to be displayed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean debugDataSupported;

  /**
   * Whether DRL history chip is supported. Related bug: http://b/241837879, http://b/171854732
   * Design doc: http://go/panthera-history-chip-dd DRL history chip was originally rolled out to
   * Panthera in http://google3/googledata/experiments/mobile/agsa/studies/agsa_nga/opa_panthera_one
   * _input_ui_launch.gcl?l=55=384682900. We plan to roll it out to NGA and TNG.
   * drl_history_chip_supported bit specifies whether the client support (and should have) DRL
   * history chip.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean drlHistoryChipSupported;

  /**
   * Whether client supports escape hatches aka post execution suggestions go/nga-escape-hatch-prd
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String escapeHatchSupported;

  /**
   * Whether the client can rewrite suggestion query text into executed text, if the latter is
   * present. If this feature is disabled, the rewrite happens in Assistant Server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean executedTextSupported;

  /**
   * Whether the client supports passing back `execution_context` from
   * |assistant.api.client_op.SuggestionProcessingParams| when the suggestion is clicked or spoken.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean executionContextSupported;

  /**
   * Whether the client supports features in |SuggestionFeatureSpecificAction|.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AssistantApiFeatureSpecificActionSupport featureSpecificActionSupport;

  /**
   * Whether the client supports handling App Actions' notification when the suggestion is clicked.
   * This will allow the server to populate the `app_actions_notification_data` extension field from
   * |SuggestionFeatureSpecificAction| proto message.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean featureSpecificAppActionsNotificationSupported;

  /**
   * Whether the rule_id field in the execution_context is supported. This is a temporary workaround
   * to be able to identify clicks on Person entity suggestions on Sabrina and is expected to be
   * eventually deprecated. TODO(b/185517153) : Deprecate (but do not delete) once click tracking is
   * correctly sent up from the Katniss client.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean ruleIdInExecutionContextSupported;

  /**
   * Whether the client can show executed_text after the click on the suggestion chip. Must be set
   * to false on TNG. TNG disregards |SuggestionProcessingParams.show_executed_text| field and
   * always treats it as if |show_executed_text=true|.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean showExecutedTextSupported;

  /**
   * Whether the client can show chip as (text | translation). go/lang-partner-doc
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean showTranslationSupported;

  /**
   * A list of suggestions display targets supported by this client. If unset only DEFAULT
   * SuggestionDisplayTarget is supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<AssistantApiSuggestionsSupportDisplayTargetSupport> supportedDisplayTargets;

  /**
   * Whether client supports widget suggestion chip to be displayed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean widgetDataSupported;

  /**
   * Whether client supports user impersonation on suggestion chip click. go/suggestion-click-
   * impersonation
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getClickImpersonationSupported() {
    return clickImpersonationSupported;
  }

  /**
   * Whether client supports user impersonation on suggestion chip click. go/suggestion-click-
   * impersonation
   * @param clickImpersonationSupported clickImpersonationSupported or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setClickImpersonationSupported(java.lang.Boolean clickImpersonationSupported) {
    this.clickImpersonationSupported = clickImpersonationSupported;
    return this;
  }

  /**
   * Whether client supports suggestion chips with colored background/border. Deprecated in favor of
   * go/color-token-suggestion-chip.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getColoredChipBackgroundBorderSupported() {
    return coloredChipBackgroundBorderSupported;
  }

  /**
   * Whether client supports suggestion chips with colored background/border. Deprecated in favor of
   * go/color-token-suggestion-chip.
   * @param coloredChipBackgroundBorderSupported coloredChipBackgroundBorderSupported or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setColoredChipBackgroundBorderSupported(java.lang.Boolean coloredChipBackgroundBorderSupported) {
    this.coloredChipBackgroundBorderSupported = coloredChipBackgroundBorderSupported;
    return this;
  }

  /**
   * Whether client supports suggestion chips with colored text. See design doc: http://go/opa-
   * suggestions-ux-eng-design. Deprecated in favor of go/color-token-suggestion-chip.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getColoredChipTextSupported() {
    return coloredChipTextSupported;
  }

  /**
   * Whether client supports suggestion chips with colored text. See design doc: http://go/opa-
   * suggestions-ux-eng-design. Deprecated in favor of go/color-token-suggestion-chip.
   * @param coloredChipTextSupported coloredChipTextSupported or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setColoredChipTextSupported(java.lang.Boolean coloredChipTextSupported) {
    this.coloredChipTextSupported = coloredChipTextSupported;
    return this;
  }

  /**
   * Whether client supports suggestions debug data to be displayed.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDebugDataSupported() {
    return debugDataSupported;
  }

  /**
   * Whether client supports suggestions debug data to be displayed.
   * @param debugDataSupported debugDataSupported or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setDebugDataSupported(java.lang.Boolean debugDataSupported) {
    this.debugDataSupported = debugDataSupported;
    return this;
  }

  /**
   * Whether DRL history chip is supported. Related bug: http://b/241837879, http://b/171854732
   * Design doc: http://go/panthera-history-chip-dd DRL history chip was originally rolled out to
   * Panthera in http://google3/googledata/experiments/mobile/agsa/studies/agsa_nga/opa_panthera_one
   * _input_ui_launch.gcl?l=55=384682900. We plan to roll it out to NGA and TNG.
   * drl_history_chip_supported bit specifies whether the client support (and should have) DRL
   * history chip.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDrlHistoryChipSupported() {
    return drlHistoryChipSupported;
  }

  /**
   * Whether DRL history chip is supported. Related bug: http://b/241837879, http://b/171854732
   * Design doc: http://go/panthera-history-chip-dd DRL history chip was originally rolled out to
   * Panthera in http://google3/googledata/experiments/mobile/agsa/studies/agsa_nga/opa_panthera_one
   * _input_ui_launch.gcl?l=55=384682900. We plan to roll it out to NGA and TNG.
   * drl_history_chip_supported bit specifies whether the client support (and should have) DRL
   * history chip.
   * @param drlHistoryChipSupported drlHistoryChipSupported or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setDrlHistoryChipSupported(java.lang.Boolean drlHistoryChipSupported) {
    this.drlHistoryChipSupported = drlHistoryChipSupported;
    return this;
  }

  /**
   * Whether client supports escape hatches aka post execution suggestions go/nga-escape-hatch-prd
   * @return value or {@code null} for none
   */
  public java.lang.String getEscapeHatchSupported() {
    return escapeHatchSupported;
  }

  /**
   * Whether client supports escape hatches aka post execution suggestions go/nga-escape-hatch-prd
   * @param escapeHatchSupported escapeHatchSupported or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setEscapeHatchSupported(java.lang.String escapeHatchSupported) {
    this.escapeHatchSupported = escapeHatchSupported;
    return this;
  }

  /**
   * Whether the client can rewrite suggestion query text into executed text, if the latter is
   * present. If this feature is disabled, the rewrite happens in Assistant Server.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getExecutedTextSupported() {
    return executedTextSupported;
  }

  /**
   * Whether the client can rewrite suggestion query text into executed text, if the latter is
   * present. If this feature is disabled, the rewrite happens in Assistant Server.
   * @param executedTextSupported executedTextSupported or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setExecutedTextSupported(java.lang.Boolean executedTextSupported) {
    this.executedTextSupported = executedTextSupported;
    return this;
  }

  /**
   * Whether the client supports passing back `execution_context` from
   * |assistant.api.client_op.SuggestionProcessingParams| when the suggestion is clicked or spoken.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getExecutionContextSupported() {
    return executionContextSupported;
  }

  /**
   * Whether the client supports passing back `execution_context` from
   * |assistant.api.client_op.SuggestionProcessingParams| when the suggestion is clicked or spoken.
   * @param executionContextSupported executionContextSupported or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setExecutionContextSupported(java.lang.Boolean executionContextSupported) {
    this.executionContextSupported = executionContextSupported;
    return this;
  }

  /**
   * Whether the client supports features in |SuggestionFeatureSpecificAction|.
   * @return value or {@code null} for none
   */
  public AssistantApiFeatureSpecificActionSupport getFeatureSpecificActionSupport() {
    return featureSpecificActionSupport;
  }

  /**
   * Whether the client supports features in |SuggestionFeatureSpecificAction|.
   * @param featureSpecificActionSupport featureSpecificActionSupport or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setFeatureSpecificActionSupport(AssistantApiFeatureSpecificActionSupport featureSpecificActionSupport) {
    this.featureSpecificActionSupport = featureSpecificActionSupport;
    return this;
  }

  /**
   * Whether the client supports handling App Actions' notification when the suggestion is clicked.
   * This will allow the server to populate the `app_actions_notification_data` extension field from
   * |SuggestionFeatureSpecificAction| proto message.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getFeatureSpecificAppActionsNotificationSupported() {
    return featureSpecificAppActionsNotificationSupported;
  }

  /**
   * Whether the client supports handling App Actions' notification when the suggestion is clicked.
   * This will allow the server to populate the `app_actions_notification_data` extension field from
   * |SuggestionFeatureSpecificAction| proto message.
   * @param featureSpecificAppActionsNotificationSupported featureSpecificAppActionsNotificationSupported or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setFeatureSpecificAppActionsNotificationSupported(java.lang.Boolean featureSpecificAppActionsNotificationSupported) {
    this.featureSpecificAppActionsNotificationSupported = featureSpecificAppActionsNotificationSupported;
    return this;
  }

  /**
   * Whether the rule_id field in the execution_context is supported. This is a temporary workaround
   * to be able to identify clicks on Person entity suggestions on Sabrina and is expected to be
   * eventually deprecated. TODO(b/185517153) : Deprecate (but do not delete) once click tracking is
   * correctly sent up from the Katniss client.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getRuleIdInExecutionContextSupported() {
    return ruleIdInExecutionContextSupported;
  }

  /**
   * Whether the rule_id field in the execution_context is supported. This is a temporary workaround
   * to be able to identify clicks on Person entity suggestions on Sabrina and is expected to be
   * eventually deprecated. TODO(b/185517153) : Deprecate (but do not delete) once click tracking is
   * correctly sent up from the Katniss client.
   * @param ruleIdInExecutionContextSupported ruleIdInExecutionContextSupported or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setRuleIdInExecutionContextSupported(java.lang.Boolean ruleIdInExecutionContextSupported) {
    this.ruleIdInExecutionContextSupported = ruleIdInExecutionContextSupported;
    return this;
  }

  /**
   * Whether the client can show executed_text after the click on the suggestion chip. Must be set
   * to false on TNG. TNG disregards |SuggestionProcessingParams.show_executed_text| field and
   * always treats it as if |show_executed_text=true|.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getShowExecutedTextSupported() {
    return showExecutedTextSupported;
  }

  /**
   * Whether the client can show executed_text after the click on the suggestion chip. Must be set
   * to false on TNG. TNG disregards |SuggestionProcessingParams.show_executed_text| field and
   * always treats it as if |show_executed_text=true|.
   * @param showExecutedTextSupported showExecutedTextSupported or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setShowExecutedTextSupported(java.lang.Boolean showExecutedTextSupported) {
    this.showExecutedTextSupported = showExecutedTextSupported;
    return this;
  }

  /**
   * Whether the client can show chip as (text | translation). go/lang-partner-doc
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getShowTranslationSupported() {
    return showTranslationSupported;
  }

  /**
   * Whether the client can show chip as (text | translation). go/lang-partner-doc
   * @param showTranslationSupported showTranslationSupported or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setShowTranslationSupported(java.lang.Boolean showTranslationSupported) {
    this.showTranslationSupported = showTranslationSupported;
    return this;
  }

  /**
   * A list of suggestions display targets supported by this client. If unset only DEFAULT
   * SuggestionDisplayTarget is supported.
   * @return value or {@code null} for none
   */
  public java.util.List<AssistantApiSuggestionsSupportDisplayTargetSupport> getSupportedDisplayTargets() {
    return supportedDisplayTargets;
  }

  /**
   * A list of suggestions display targets supported by this client. If unset only DEFAULT
   * SuggestionDisplayTarget is supported.
   * @param supportedDisplayTargets supportedDisplayTargets or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setSupportedDisplayTargets(java.util.List<AssistantApiSuggestionsSupportDisplayTargetSupport> supportedDisplayTargets) {
    this.supportedDisplayTargets = supportedDisplayTargets;
    return this;
  }

  /**
   * Whether client supports widget suggestion chip to be displayed.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getWidgetDataSupported() {
    return widgetDataSupported;
  }

  /**
   * Whether client supports widget suggestion chip to be displayed.
   * @param widgetDataSupported widgetDataSupported or {@code null} for none
   */
  public AssistantApiSuggestionsSupport setWidgetDataSupported(java.lang.Boolean widgetDataSupported) {
    this.widgetDataSupported = widgetDataSupported;
    return this;
  }

  @Override
  public AssistantApiSuggestionsSupport set(String fieldName, Object value) {
    return (AssistantApiSuggestionsSupport) super.set(fieldName, value);
  }

  @Override
  public AssistantApiSuggestionsSupport clone() {
    return (AssistantApiSuggestionsSupport) super.clone();
  }

}
