/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datamigration.v1.model;

/**
 * Options to configure rule type MultiColumnDatatypeChange. The rule is used to change the data
 * type and associated properties of multiple columns at once. The rule filter field can refer to
 * one or more entities. The rule scope can be one of:Column. This rule requires additional filters
 * to be specified beyond the basic rule filter field, which is the source data type, but the rule
 * supports additional filtering capabilities such as the minimum and maximum field length. All
 * additional filters which are specified are required to be met in order for the rule to be applied
 * (logical AND between the fields).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Database Migration API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MultiColumnDatatypeChange extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Custom engine specific features.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Object> customFeatures;

  /**
   * Required. New data type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String newDataType;

  /**
   * Optional. Column fractional seconds precision - used only for timestamp based datatypes - if
   * not specified and relevant uses the source column fractional seconds precision.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer overrideFractionalSecondsPrecision;

  /**
   * Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source
   * column length.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long overrideLength;

  /**
   * Optional. Column precision - when relevant - if not specified and relevant uses the source
   * column precision.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer overridePrecision;

  /**
   * Optional. Column scale - when relevant - if not specified and relevant uses the source column
   * scale.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer overrideScale;

  /**
   * Required. Filter on source data type.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sourceDataTypeFilter;

  /**
   * Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SourceNumericFilter sourceNumericFilter;

  /**
   * Optional. Filter for text-based data types like varchar.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SourceTextFilter sourceTextFilter;

  /**
   * Optional. Custom engine specific features.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Object> getCustomFeatures() {
    return customFeatures;
  }

  /**
   * Optional. Custom engine specific features.
   * @param customFeatures customFeatures or {@code null} for none
   */
  public MultiColumnDatatypeChange setCustomFeatures(java.util.Map<String, java.lang.Object> customFeatures) {
    this.customFeatures = customFeatures;
    return this;
  }

  /**
   * Required. New data type.
   * @return value or {@code null} for none
   */
  public java.lang.String getNewDataType() {
    return newDataType;
  }

  /**
   * Required. New data type.
   * @param newDataType newDataType or {@code null} for none
   */
  public MultiColumnDatatypeChange setNewDataType(java.lang.String newDataType) {
    this.newDataType = newDataType;
    return this;
  }

  /**
   * Optional. Column fractional seconds precision - used only for timestamp based datatypes - if
   * not specified and relevant uses the source column fractional seconds precision.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOverrideFractionalSecondsPrecision() {
    return overrideFractionalSecondsPrecision;
  }

  /**
   * Optional. Column fractional seconds precision - used only for timestamp based datatypes - if
   * not specified and relevant uses the source column fractional seconds precision.
   * @param overrideFractionalSecondsPrecision overrideFractionalSecondsPrecision or {@code null} for none
   */
  public MultiColumnDatatypeChange setOverrideFractionalSecondsPrecision(java.lang.Integer overrideFractionalSecondsPrecision) {
    this.overrideFractionalSecondsPrecision = overrideFractionalSecondsPrecision;
    return this;
  }

  /**
   * Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source
   * column length.
   * @return value or {@code null} for none
   */
  public java.lang.Long getOverrideLength() {
    return overrideLength;
  }

  /**
   * Optional. Column length - e.g. varchar (50) - if not specified and relevant uses the source
   * column length.
   * @param overrideLength overrideLength or {@code null} for none
   */
  public MultiColumnDatatypeChange setOverrideLength(java.lang.Long overrideLength) {
    this.overrideLength = overrideLength;
    return this;
  }

  /**
   * Optional. Column precision - when relevant - if not specified and relevant uses the source
   * column precision.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOverridePrecision() {
    return overridePrecision;
  }

  /**
   * Optional. Column precision - when relevant - if not specified and relevant uses the source
   * column precision.
   * @param overridePrecision overridePrecision or {@code null} for none
   */
  public MultiColumnDatatypeChange setOverridePrecision(java.lang.Integer overridePrecision) {
    this.overridePrecision = overridePrecision;
    return this;
  }

  /**
   * Optional. Column scale - when relevant - if not specified and relevant uses the source column
   * scale.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getOverrideScale() {
    return overrideScale;
  }

  /**
   * Optional. Column scale - when relevant - if not specified and relevant uses the source column
   * scale.
   * @param overrideScale overrideScale or {@code null} for none
   */
  public MultiColumnDatatypeChange setOverrideScale(java.lang.Integer overrideScale) {
    this.overrideScale = overrideScale;
    return this;
  }

  /**
   * Required. Filter on source data type.
   * @return value or {@code null} for none
   */
  public java.lang.String getSourceDataTypeFilter() {
    return sourceDataTypeFilter;
  }

  /**
   * Required. Filter on source data type.
   * @param sourceDataTypeFilter sourceDataTypeFilter or {@code null} for none
   */
  public MultiColumnDatatypeChange setSourceDataTypeFilter(java.lang.String sourceDataTypeFilter) {
    this.sourceDataTypeFilter = sourceDataTypeFilter;
    return this;
  }

  /**
   * Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
   * @return value or {@code null} for none
   */
  public SourceNumericFilter getSourceNumericFilter() {
    return sourceNumericFilter;
  }

  /**
   * Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
   * @param sourceNumericFilter sourceNumericFilter or {@code null} for none
   */
  public MultiColumnDatatypeChange setSourceNumericFilter(SourceNumericFilter sourceNumericFilter) {
    this.sourceNumericFilter = sourceNumericFilter;
    return this;
  }

  /**
   * Optional. Filter for text-based data types like varchar.
   * @return value or {@code null} for none
   */
  public SourceTextFilter getSourceTextFilter() {
    return sourceTextFilter;
  }

  /**
   * Optional. Filter for text-based data types like varchar.
   * @param sourceTextFilter sourceTextFilter or {@code null} for none
   */
  public MultiColumnDatatypeChange setSourceTextFilter(SourceTextFilter sourceTextFilter) {
    this.sourceTextFilter = sourceTextFilter;
    return this;
  }

  @Override
  public MultiColumnDatatypeChange set(String fieldName, Object value) {
    return (MultiColumnDatatypeChange) super.set(fieldName, value);
  }

  @Override
  public MultiColumnDatatypeChange clone() {
    return (MultiColumnDatatypeChange) super.clone();
  }

}
