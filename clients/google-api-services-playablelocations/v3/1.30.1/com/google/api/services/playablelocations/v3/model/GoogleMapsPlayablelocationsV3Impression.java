/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.playablelocations.v3.model;

/**
 * Encapsulates impression event details.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Playable Locations API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleMapsPlayablelocationsV3Impression extends com.google.api.client.json.GenericJson {

  /**
   * An arbitrary, developer-defined type identifier for each type of game object used in your game.
   * Since players interact with differ types of game objects in different ways, this field allows
   * you to segregate impression data by type for analysis. You should assign a unique
   * `game_object_type` ID to represent a distinct type of game object in your game. For example,
   * 1=monster location, 2=powerup location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer gameObjectType;

  /**
   * Required. The type of impression event.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String impressionType;

  /**
   * Required. The name of the playable location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String locationName;

  /**
   * An arbitrary, developer-defined type identifier for each type of game object used in your game.
   * Since players interact with differ types of game objects in different ways, this field allows
   * you to segregate impression data by type for analysis. You should assign a unique
   * `game_object_type` ID to represent a distinct type of game object in your game. For example,
   * 1=monster location, 2=powerup location.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGameObjectType() {
    return gameObjectType;
  }

  /**
   * An arbitrary, developer-defined type identifier for each type of game object used in your game.
   * Since players interact with differ types of game objects in different ways, this field allows
   * you to segregate impression data by type for analysis. You should assign a unique
   * `game_object_type` ID to represent a distinct type of game object in your game. For example,
   * 1=monster location, 2=powerup location.
   * @param gameObjectType gameObjectType or {@code null} for none
   */
  public GoogleMapsPlayablelocationsV3Impression setGameObjectType(java.lang.Integer gameObjectType) {
    this.gameObjectType = gameObjectType;
    return this;
  }

  /**
   * Required. The type of impression event.
   * @return value or {@code null} for none
   */
  public java.lang.String getImpressionType() {
    return impressionType;
  }

  /**
   * Required. The type of impression event.
   * @param impressionType impressionType or {@code null} for none
   */
  public GoogleMapsPlayablelocationsV3Impression setImpressionType(java.lang.String impressionType) {
    this.impressionType = impressionType;
    return this;
  }

  /**
   * Required. The name of the playable location.
   * @return value or {@code null} for none
   */
  public java.lang.String getLocationName() {
    return locationName;
  }

  /**
   * Required. The name of the playable location.
   * @param locationName locationName or {@code null} for none
   */
  public GoogleMapsPlayablelocationsV3Impression setLocationName(java.lang.String locationName) {
    this.locationName = locationName;
    return this;
  }

  @Override
  public GoogleMapsPlayablelocationsV3Impression set(String fieldName, Object value) {
    return (GoogleMapsPlayablelocationsV3Impression) super.set(fieldName, value);
  }

  @Override
  public GoogleMapsPlayablelocationsV3Impression clone() {
    return (GoogleMapsPlayablelocationsV3Impression) super.clone();
  }

}
