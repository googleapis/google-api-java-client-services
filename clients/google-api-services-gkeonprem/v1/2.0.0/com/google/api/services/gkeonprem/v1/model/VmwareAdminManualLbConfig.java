/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.gkeonprem.v1.model;

/**
 * Model definition for VmwareAdminManualLbConfig.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Anthos On-Prem API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VmwareAdminManualLbConfig extends com.google.api.client.json.GenericJson {

  /**
   * NodePort for add-ons server in the admin cluster.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer addonsNodePort;

  /**
   * NodePort for control plane service. The Kubernetes API server in the admin cluster is
   * implemented as a Service of type NodePort (ex. 30968).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer controlPlaneNodePort;

  /**
   * NodePort for ingress service's http. The ingress service in the admin cluster is implemented as
   * a Service of type NodePort (ex. 32527).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer ingressHttpNodePort;

  /**
   * NodePort for ingress service's https. The ingress service in the admin cluster is implemented
   * as a Service of type NodePort (ex. 30139).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer ingressHttpsNodePort;

  /**
   * NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex.
   * 30564).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer konnectivityServerNodePort;

  /**
   * NodePort for add-ons server in the admin cluster.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getAddonsNodePort() {
    return addonsNodePort;
  }

  /**
   * NodePort for add-ons server in the admin cluster.
   * @param addonsNodePort addonsNodePort or {@code null} for none
   */
  public VmwareAdminManualLbConfig setAddonsNodePort(java.lang.Integer addonsNodePort) {
    this.addonsNodePort = addonsNodePort;
    return this;
  }

  /**
   * NodePort for control plane service. The Kubernetes API server in the admin cluster is
   * implemented as a Service of type NodePort (ex. 30968).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getControlPlaneNodePort() {
    return controlPlaneNodePort;
  }

  /**
   * NodePort for control plane service. The Kubernetes API server in the admin cluster is
   * implemented as a Service of type NodePort (ex. 30968).
   * @param controlPlaneNodePort controlPlaneNodePort or {@code null} for none
   */
  public VmwareAdminManualLbConfig setControlPlaneNodePort(java.lang.Integer controlPlaneNodePort) {
    this.controlPlaneNodePort = controlPlaneNodePort;
    return this;
  }

  /**
   * NodePort for ingress service's http. The ingress service in the admin cluster is implemented as
   * a Service of type NodePort (ex. 32527).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getIngressHttpNodePort() {
    return ingressHttpNodePort;
  }

  /**
   * NodePort for ingress service's http. The ingress service in the admin cluster is implemented as
   * a Service of type NodePort (ex. 32527).
   * @param ingressHttpNodePort ingressHttpNodePort or {@code null} for none
   */
  public VmwareAdminManualLbConfig setIngressHttpNodePort(java.lang.Integer ingressHttpNodePort) {
    this.ingressHttpNodePort = ingressHttpNodePort;
    return this;
  }

  /**
   * NodePort for ingress service's https. The ingress service in the admin cluster is implemented
   * as a Service of type NodePort (ex. 30139).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getIngressHttpsNodePort() {
    return ingressHttpsNodePort;
  }

  /**
   * NodePort for ingress service's https. The ingress service in the admin cluster is implemented
   * as a Service of type NodePort (ex. 30139).
   * @param ingressHttpsNodePort ingressHttpsNodePort or {@code null} for none
   */
  public VmwareAdminManualLbConfig setIngressHttpsNodePort(java.lang.Integer ingressHttpsNodePort) {
    this.ingressHttpsNodePort = ingressHttpsNodePort;
    return this;
  }

  /**
   * NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex.
   * 30564).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getKonnectivityServerNodePort() {
    return konnectivityServerNodePort;
  }

  /**
   * NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex.
   * 30564).
   * @param konnectivityServerNodePort konnectivityServerNodePort or {@code null} for none
   */
  public VmwareAdminManualLbConfig setKonnectivityServerNodePort(java.lang.Integer konnectivityServerNodePort) {
    this.konnectivityServerNodePort = konnectivityServerNodePort;
    return this;
  }

  @Override
  public VmwareAdminManualLbConfig set(String fieldName, Object value) {
    return (VmwareAdminManualLbConfig) super.set(fieldName, value);
  }

  @Override
  public VmwareAdminManualLbConfig clone() {
    return (VmwareAdminManualLbConfig) super.clone();
  }

}
