/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for NlpSemanticParsingDatetimeQuantity.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class NlpSemanticParsingDatetimeQuantity extends com.google.api.client.json.GenericJson {

  /**
   * For internal use - DateTime subgrammar users should look at Duration.modifier. = MORE in [3
   * more days].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String modifier;

  /**
   * = 3 in "3 milliseconds".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double number;

  /**
   * This field keeps the span info of the number element in a quantity expression, which is useful
   * for downstream components to obtain the number annotations inside a quantity when necessary.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private NlpSemanticParsingAnnotationEvalData numberSpan;

  /**
   * Quantities are typically converted into milliseconds, regardless of the units the user used.
   * Sometimes this loses crucial information, e.g., "5 days" vs "5 nights". When quantities are
   * converted to milliseconds, 'symbolic_quantity' will contain the sequence of units that the user
   * actually supplied. This can be more than one element in cases like "one minute and 30 seconds".
   * In cases where 'symbolic_quantity' has more than one element, THERE IS NO GUARANTEED ORDER
   * between elements.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NlpSemanticParsingDatetimeQuantity> symbolicQuantity;

  /**
   * = MILLISECOND in "3 milliseconds".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String unit;

  /**
   * For internal use - DateTime subgrammar users should look at Duration.modifier. = MORE in [3
   * more days].
   * @return value or {@code null} for none
   */
  public java.lang.String getModifier() {
    return modifier;
  }

  /**
   * For internal use - DateTime subgrammar users should look at Duration.modifier. = MORE in [3
   * more days].
   * @param modifier modifier or {@code null} for none
   */
  public NlpSemanticParsingDatetimeQuantity setModifier(java.lang.String modifier) {
    this.modifier = modifier;
    return this;
  }

  /**
   * = 3 in "3 milliseconds".
   * @return value or {@code null} for none
   */
  public java.lang.Double getNumber() {
    return number;
  }

  /**
   * = 3 in "3 milliseconds".
   * @param number number or {@code null} for none
   */
  public NlpSemanticParsingDatetimeQuantity setNumber(java.lang.Double number) {
    this.number = number;
    return this;
  }

  /**
   * This field keeps the span info of the number element in a quantity expression, which is useful
   * for downstream components to obtain the number annotations inside a quantity when necessary.
   * @return value or {@code null} for none
   */
  public NlpSemanticParsingAnnotationEvalData getNumberSpan() {
    return numberSpan;
  }

  /**
   * This field keeps the span info of the number element in a quantity expression, which is useful
   * for downstream components to obtain the number annotations inside a quantity when necessary.
   * @param numberSpan numberSpan or {@code null} for none
   */
  public NlpSemanticParsingDatetimeQuantity setNumberSpan(NlpSemanticParsingAnnotationEvalData numberSpan) {
    this.numberSpan = numberSpan;
    return this;
  }

  /**
   * Quantities are typically converted into milliseconds, regardless of the units the user used.
   * Sometimes this loses crucial information, e.g., "5 days" vs "5 nights". When quantities are
   * converted to milliseconds, 'symbolic_quantity' will contain the sequence of units that the user
   * actually supplied. This can be more than one element in cases like "one minute and 30 seconds".
   * In cases where 'symbolic_quantity' has more than one element, THERE IS NO GUARANTEED ORDER
   * between elements.
   * @return value or {@code null} for none
   */
  public java.util.List<NlpSemanticParsingDatetimeQuantity> getSymbolicQuantity() {
    return symbolicQuantity;
  }

  /**
   * Quantities are typically converted into milliseconds, regardless of the units the user used.
   * Sometimes this loses crucial information, e.g., "5 days" vs "5 nights". When quantities are
   * converted to milliseconds, 'symbolic_quantity' will contain the sequence of units that the user
   * actually supplied. This can be more than one element in cases like "one minute and 30 seconds".
   * In cases where 'symbolic_quantity' has more than one element, THERE IS NO GUARANTEED ORDER
   * between elements.
   * @param symbolicQuantity symbolicQuantity or {@code null} for none
   */
  public NlpSemanticParsingDatetimeQuantity setSymbolicQuantity(java.util.List<NlpSemanticParsingDatetimeQuantity> symbolicQuantity) {
    this.symbolicQuantity = symbolicQuantity;
    return this;
  }

  /**
   * = MILLISECOND in "3 milliseconds".
   * @return value or {@code null} for none
   */
  public java.lang.String getUnit() {
    return unit;
  }

  /**
   * = MILLISECOND in "3 milliseconds".
   * @param unit unit or {@code null} for none
   */
  public NlpSemanticParsingDatetimeQuantity setUnit(java.lang.String unit) {
    this.unit = unit;
    return this;
  }

  @Override
  public NlpSemanticParsingDatetimeQuantity set(String fieldName, Object value) {
    return (NlpSemanticParsingDatetimeQuantity) super.set(fieldName, value);
  }

  @Override
  public NlpSemanticParsingDatetimeQuantity clone() {
    return (NlpSemanticParsingDatetimeQuantity) super.clone();
  }

}
