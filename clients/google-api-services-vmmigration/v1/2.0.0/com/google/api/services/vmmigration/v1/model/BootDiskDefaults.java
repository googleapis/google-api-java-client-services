/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.vmmigration.v1.model;

/**
 * BootDiskDefaults hold information about the boot disk of a VM.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the VM Migration API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BootDiskDefaults extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk
   * /by-id/google-* tree of a Linux operating system running within the instance. If not specified,
   * the server chooses a default device name to apply to this disk, in the form persistent-disk-x,
   * where x is a number assigned by Google Compute Engine. This field is only applicable for
   * persistent disks.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String deviceName;

  /**
   * Optional. The name of the disk.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String diskName;

  /**
   * Optional. The type of disk provisioning to use for the VM.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String diskType;

  /**
   * Optional. The encryption to apply to the boot disk.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Encryption encryption;

  /**
   * The image to use when creating the disk.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DiskImageDefaults image;

  /**
   * Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk
   * /by-id/google-* tree of a Linux operating system running within the instance. If not specified,
   * the server chooses a default device name to apply to this disk, in the form persistent-disk-x,
   * where x is a number assigned by Google Compute Engine. This field is only applicable for
   * persistent disks.
   * @return value or {@code null} for none
   */
  public java.lang.String getDeviceName() {
    return deviceName;
  }

  /**
   * Optional. Specifies a unique device name of your choice that is reflected into the /dev/disk
   * /by-id/google-* tree of a Linux operating system running within the instance. If not specified,
   * the server chooses a default device name to apply to this disk, in the form persistent-disk-x,
   * where x is a number assigned by Google Compute Engine. This field is only applicable for
   * persistent disks.
   * @param deviceName deviceName or {@code null} for none
   */
  public BootDiskDefaults setDeviceName(java.lang.String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Optional. The name of the disk.
   * @return value or {@code null} for none
   */
  public java.lang.String getDiskName() {
    return diskName;
  }

  /**
   * Optional. The name of the disk.
   * @param diskName diskName or {@code null} for none
   */
  public BootDiskDefaults setDiskName(java.lang.String diskName) {
    this.diskName = diskName;
    return this;
  }

  /**
   * Optional. The type of disk provisioning to use for the VM.
   * @return value or {@code null} for none
   */
  public java.lang.String getDiskType() {
    return diskType;
  }

  /**
   * Optional. The type of disk provisioning to use for the VM.
   * @param diskType diskType or {@code null} for none
   */
  public BootDiskDefaults setDiskType(java.lang.String diskType) {
    this.diskType = diskType;
    return this;
  }

  /**
   * Optional. The encryption to apply to the boot disk.
   * @return value or {@code null} for none
   */
  public Encryption getEncryption() {
    return encryption;
  }

  /**
   * Optional. The encryption to apply to the boot disk.
   * @param encryption encryption or {@code null} for none
   */
  public BootDiskDefaults setEncryption(Encryption encryption) {
    this.encryption = encryption;
    return this;
  }

  /**
   * The image to use when creating the disk.
   * @return value or {@code null} for none
   */
  public DiskImageDefaults getImage() {
    return image;
  }

  /**
   * The image to use when creating the disk.
   * @param image image or {@code null} for none
   */
  public BootDiskDefaults setImage(DiskImageDefaults image) {
    this.image = image;
    return this;
  }

  @Override
  public BootDiskDefaults set(String fieldName, Object value) {
    return (BootDiskDefaults) super.set(fieldName, value);
  }

  @Override
  public BootDiskDefaults clone() {
    return (BootDiskDefaults) super.clone();
  }

}
