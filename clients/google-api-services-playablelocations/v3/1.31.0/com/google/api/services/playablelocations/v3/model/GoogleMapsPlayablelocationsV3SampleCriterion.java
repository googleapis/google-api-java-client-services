/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.playablelocations.v3.model;

/**
 * Encapsulates a filter criterion for searching for a set of playable locations.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Playable Locations API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleMapsPlayablelocationsV3SampleCriterion extends com.google.api.client.json.GenericJson {

  /**
   * Specifies which `PlayableLocation` fields are returned. `name` (which is used for logging
   * impressions), `center_point` and `place_id` (or `plus_code`) are always returned. The following
   * fields are omitted unless you specify them here: * snapped_point * types Note: The more fields
   * you include, the more expensive in terms of data and associated latency your query will be.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String fieldsToReturn;

  /**
   * Specifies filtering options, and specifies what will be included in the result set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsPlayablelocationsV3SampleFilter filter;

  /**
   * Required. An arbitrary, developer-defined identifier of the type of game object that the
   * playable location is used for. This field allows you to specify criteria per game object type
   * when searching for playable locations. You should assign a unique `game_object_type` ID across
   * all `request_criteria` to represent a distinct type of game object. For example, 1=monster
   * location, 2=powerup location. The response contains a map.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer gameObjectType;

  /**
   * Specifies which `PlayableLocation` fields are returned. `name` (which is used for logging
   * impressions), `center_point` and `place_id` (or `plus_code`) are always returned. The following
   * fields are omitted unless you specify them here: * snapped_point * types Note: The more fields
   * you include, the more expensive in terms of data and associated latency your query will be.
   * @return value or {@code null} for none
   */
  public String getFieldsToReturn() {
    return fieldsToReturn;
  }

  /**
   * Specifies which `PlayableLocation` fields are returned. `name` (which is used for logging
   * impressions), `center_point` and `place_id` (or `plus_code`) are always returned. The following
   * fields are omitted unless you specify them here: * snapped_point * types Note: The more fields
   * you include, the more expensive in terms of data and associated latency your query will be.
   * @param fieldsToReturn fieldsToReturn or {@code null} for none
   */
  public GoogleMapsPlayablelocationsV3SampleCriterion setFieldsToReturn(String fieldsToReturn) {
    this.fieldsToReturn = fieldsToReturn;
    return this;
  }

  /**
   * Specifies filtering options, and specifies what will be included in the result set.
   * @return value or {@code null} for none
   */
  public GoogleMapsPlayablelocationsV3SampleFilter getFilter() {
    return filter;
  }

  /**
   * Specifies filtering options, and specifies what will be included in the result set.
   * @param filter filter or {@code null} for none
   */
  public GoogleMapsPlayablelocationsV3SampleCriterion setFilter(GoogleMapsPlayablelocationsV3SampleFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Required. An arbitrary, developer-defined identifier of the type of game object that the
   * playable location is used for. This field allows you to specify criteria per game object type
   * when searching for playable locations. You should assign a unique `game_object_type` ID across
   * all `request_criteria` to represent a distinct type of game object. For example, 1=monster
   * location, 2=powerup location. The response contains a map.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGameObjectType() {
    return gameObjectType;
  }

  /**
   * Required. An arbitrary, developer-defined identifier of the type of game object that the
   * playable location is used for. This field allows you to specify criteria per game object type
   * when searching for playable locations. You should assign a unique `game_object_type` ID across
   * all `request_criteria` to represent a distinct type of game object. For example, 1=monster
   * location, 2=powerup location. The response contains a map.
   * @param gameObjectType gameObjectType or {@code null} for none
   */
  public GoogleMapsPlayablelocationsV3SampleCriterion setGameObjectType(java.lang.Integer gameObjectType) {
    this.gameObjectType = gameObjectType;
    return this;
  }

  @Override
  public GoogleMapsPlayablelocationsV3SampleCriterion set(String fieldName, Object value) {
    return (GoogleMapsPlayablelocationsV3SampleCriterion) super.set(fieldName, value);
  }

  @Override
  public GoogleMapsPlayablelocationsV3SampleCriterion clone() {
    return (GoogleMapsPlayablelocationsV3SampleCriterion) super.clone();
  }

}
