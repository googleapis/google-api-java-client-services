/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.migrationcenter.v1.model;

/**
 * Details of a database schema.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Migration Center API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DatabaseSchema extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Details of a Mysql schema.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MySqlSchemaDetails mysql;

  /**
   * Optional. List of details of objects by category.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<DatabaseObjects> objects;

  static {
    // hack to force ProGuard to consider DatabaseObjects used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(DatabaseObjects.class);
  }

  /**
   * Optional. Details of a PostgreSql schema.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PostgreSqlSchemaDetails postgresql;

  /**
   * Required. The name of the schema.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String schemaName;

  /**
   * Optional. Details of a SqlServer schema.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SqlServerSchemaDetails sqlServer;

  /**
   * Optional. The total size of tables in bytes.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long tablesSizeBytes;

  /**
   * Optional. Details of a Mysql schema.
   * @return value or {@code null} for none
   */
  public MySqlSchemaDetails getMysql() {
    return mysql;
  }

  /**
   * Optional. Details of a Mysql schema.
   * @param mysql mysql or {@code null} for none
   */
  public DatabaseSchema setMysql(MySqlSchemaDetails mysql) {
    this.mysql = mysql;
    return this;
  }

  /**
   * Optional. List of details of objects by category.
   * @return value or {@code null} for none
   */
  public java.util.List<DatabaseObjects> getObjects() {
    return objects;
  }

  /**
   * Optional. List of details of objects by category.
   * @param objects objects or {@code null} for none
   */
  public DatabaseSchema setObjects(java.util.List<DatabaseObjects> objects) {
    this.objects = objects;
    return this;
  }

  /**
   * Optional. Details of a PostgreSql schema.
   * @return value or {@code null} for none
   */
  public PostgreSqlSchemaDetails getPostgresql() {
    return postgresql;
  }

  /**
   * Optional. Details of a PostgreSql schema.
   * @param postgresql postgresql or {@code null} for none
   */
  public DatabaseSchema setPostgresql(PostgreSqlSchemaDetails postgresql) {
    this.postgresql = postgresql;
    return this;
  }

  /**
   * Required. The name of the schema.
   * @return value or {@code null} for none
   */
  public java.lang.String getSchemaName() {
    return schemaName;
  }

  /**
   * Required. The name of the schema.
   * @param schemaName schemaName or {@code null} for none
   */
  public DatabaseSchema setSchemaName(java.lang.String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * Optional. Details of a SqlServer schema.
   * @return value or {@code null} for none
   */
  public SqlServerSchemaDetails getSqlServer() {
    return sqlServer;
  }

  /**
   * Optional. Details of a SqlServer schema.
   * @param sqlServer sqlServer or {@code null} for none
   */
  public DatabaseSchema setSqlServer(SqlServerSchemaDetails sqlServer) {
    this.sqlServer = sqlServer;
    return this;
  }

  /**
   * Optional. The total size of tables in bytes.
   * @return value or {@code null} for none
   */
  public java.lang.Long getTablesSizeBytes() {
    return tablesSizeBytes;
  }

  /**
   * Optional. The total size of tables in bytes.
   * @param tablesSizeBytes tablesSizeBytes or {@code null} for none
   */
  public DatabaseSchema setTablesSizeBytes(java.lang.Long tablesSizeBytes) {
    this.tablesSizeBytes = tablesSizeBytes;
    return this;
  }

  @Override
  public DatabaseSchema set(String fieldName, Object value) {
    return (DatabaseSchema) super.set(fieldName, value);
  }

  @Override
  public DatabaseSchema clone() {
    return (DatabaseSchema) super.clone();
  }

}
