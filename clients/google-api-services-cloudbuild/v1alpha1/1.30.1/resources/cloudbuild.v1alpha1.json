{
  "title": "Cloud Build API",
  "id": "cloudbuild:v1alpha1",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "canonicalName": "Cloud Build",
  "ownerName": "Google",
  "kind": "discovery#restDescription",
  "basePath": "",
  "batchPath": "batch",
  "baseUrl": "https://cloudbuild.googleapis.com/",
  "version": "v1alpha1",
  "version_module": true,
  "revision": "20200801",
  "name": "cloudbuild",
  "fullyEncodeReservedExpansion": true,
  "rootUrl": "https://cloudbuild.googleapis.com/",
  "description": "Creates and manages builds on Google Cloud Platform.",
  "parameters": {
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "location": "query",
      "description": "Returns response with indentations and line breaks.",
      "default": "true"
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "alt": {
      "description": "Data format for response.",
      "type": "string",
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "default": "json"
    }
  },
  "documentationLink": "https://cloud.google.com/cloud-build/docs/",
  "schemas": {
    "CancelOperationRequest": {
      "properties": {},
      "type": "object",
      "description": "The request message for Operations.CancelOperation.",
      "id": "CancelOperationRequest"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "id": "Empty",
      "properties": {}
    },
    "WorkerPool": {
      "id": "WorkerPool",
      "properties": {
        "serviceAccountEmail": {
          "description": "Output only. The service account used to manage the `WorkerPool`. The service account must have the Compute Instance Admin (Beta) permission at the project level.",
          "type": "string"
        },
        "workerCount": {
          "type": "string",
          "format": "int64",
          "description": "Total number of workers to be created across all requested regions."
        },
        "name": {
          "description": "User-defined name of the `WorkerPool`.",
          "type": "string"
        },
        "regions": {
          "type": "array",
          "description": "List of regions to create the `WorkerPool`. Regions can't be empty. If Cloud Build adds a new GCP region in the future, the existing `WorkerPool` will not be enabled in the new region automatically; you must add the new region to the `regions` field to enable the `WorkerPool` in that region.",
          "items": {
            "enum": [
              "REGION_UNSPECIFIED",
              "us-central1",
              "us-west1",
              "us-east1",
              "us-east4"
            ],
            "enumDescriptions": [
              "no region",
              "us-central1 region",
              "us-west1 region",
              "us-east1 region",
              "us-east4 region"
            ],
            "type": "string"
          },
          "enumDescriptions": [
            "no region",
            "us-central1 region",
            "us-west1 region",
            "us-east1 region",
            "us-east4 region"
          ]
        },
        "updateTime": {
          "description": "Output only. Time at which the request to update the `WorkerPool` was received.",
          "type": "string",
          "format": "google-datetime"
        },
        "deleteTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. Time at which the request to delete the `WorkerPool` was received."
        },
        "createTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "Output only. Time at which the request to create the `WorkerPool` was received."
        },
        "status": {
          "enum": [
            "STATUS_UNSPECIFIED",
            "CREATING",
            "RUNNING",
            "DELETING",
            "DELETED"
          ],
          "enumDescriptions": [
            "Status of the `WorkerPool` is unknown.",
            "`WorkerPool` is being created.",
            "`WorkerPool` is running.",
            "`WorkerPool` is being deleted: cancelling builds and draining workers.",
            "`WorkerPool` is deleted."
          ],
          "description": "Output only. WorkerPool Status.",
          "type": "string"
        },
        "projectId": {
          "description": "The project ID of the GCP project for which the `WorkerPool` is created.",
          "type": "string"
        },
        "workerConfig": {
          "description": "Configuration to be used for a creating workers in the `WorkerPool`.",
          "$ref": "WorkerConfig"
        }
      },
      "description": "Configuration for a WorkerPool to run the builds. Workers are machines that Cloud Build uses to run your builds. By default, all workers run in a project owned by Cloud Build. To have full control over the workers that execute your builds -- such as enabling them to access private resources on your private network -- you can request Cloud Build to run the workers in your own project by creating a custom workers pool.",
      "type": "object"
    },
    "Network": {
      "id": "Network",
      "type": "object",
      "properties": {
        "network": {
          "description": "Network on which the workers are created. \"default\" network is used if empty.",
          "type": "string"
        },
        "subnetwork": {
          "type": "string",
          "description": "Subnetwork on which the workers are created. \"default\" subnetwork is used if empty."
        },
        "projectId": {
          "description": "Project id containing the defined network and subnetwork. For a peered VPC, this will be the same as the project_id in which the workers are created. For a shared VPC, this will be the project sharing the network with the project_id project in which workers will be created. For custom workers with no VPC, this will be the same as project_id.",
          "type": "string"
        }
      },
      "description": "Network describes the GCP network used to create workers in."
    },
    "RepoSource": {
      "description": "Location of the source in a Google Cloud Source Repository.",
      "type": "object",
      "properties": {
        "tagName": {
          "type": "string",
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "substitutions": {
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "commitSha": {
          "type": "string",
          "description": "Explicit commit SHA to build."
        },
        "dir": {
          "type": "string",
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution."
        },
        "projectId": {
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.",
          "type": "string"
        },
        "repoName": {
          "type": "string",
          "description": "Required. Name of the Cloud Source Repository."
        },
        "branchName": {
          "type": "string",
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "invertRegex": {
          "description": "Only trigger a build if the revision regex does NOT match the revision regex.",
          "type": "boolean"
        }
      },
      "id": "RepoSource"
    },
    "SlackDelivery": {
      "id": "SlackDelivery",
      "type": "object",
      "properties": {
        "webhookUri": {
          "$ref": "NotifierSecretRef",
          "description": "The secret reference for the Slack webhook URI for sending messages to a channel."
        }
      },
      "description": "SlackDelivery is the delivery configuration for delivering Slack messages via webhooks. See Slack webhook documentation at: https://api.slack.com/messaging/webhooks."
    },
    "Notification": {
      "id": "Notification",
      "description": "Notification is the container which holds the data that is relevant to this particular notification.",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter string to use for notification filtering. Currently, this is assumed to be a CEL program. See https://opensource.google/projects/cel for more."
        },
        "httpDelivery": {
          "description": "Configuration for HTTP delivery.",
          "$ref": "HTTPDelivery"
        },
        "smtpDelivery": {
          "description": "Configuration for SMTP (email) delivery.",
          "$ref": "SMTPDelivery"
        },
        "structDelivery": {
          "type": "object",
          "description": "Escape hatch for users to supply custom delivery configs.",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          }
        },
        "slackDelivery": {
          "$ref": "SlackDelivery",
          "description": "Configuration for Slack delivery."
        }
      },
      "type": "object"
    },
    "BuildOptions": {
      "properties": {
        "diskSizeGb": {
          "format": "int64",
          "type": "string",
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error."
        },
        "workerPool": {
          "type": "string",
          "description": "Option to specify a `WorkerPool` for the build. Format: projects/{project}/locations/{location}/workerPools/{workerPool} This field is experimental."
        },
        "sourceProvenanceHash": {
          "items": {
            "enum": [
              "NONE",
              "SHA256",
              "MD5"
            ],
            "type": "string",
            "enumDescriptions": [
              "No hash requested.",
              "Use a sha256 hash.",
              "Use a md5 hash."
            ]
          },
          "description": "Requested hash for SourceProvenance.",
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash."
          ],
          "type": "array"
        },
        "dynamicSubstitutions": {
          "type": "boolean",
          "description": "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file."
        },
        "substitutionOption": {
          "type": "string",
          "enumDescriptions": [
            "Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.",
            "Do not fail the build if error in substitutions checks."
          ],
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ],
          "description": "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file."
        },
        "secretEnv": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build."
        },
        "logging": {
          "type": "string",
          "description": "Option to specify the logging mode, which determines if and where build logs are stored.",
          "enumDescriptions": [
            "The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.",
            "Cloud Logging and Cloud Storage logging are enabled.",
            "Only Cloud Storage logging is enabled.",
            "This option is the same as CLOUD_LOGGING_ONLY.",
            "Only Cloud Logging is enabled. Note that logs for both the Cloud Console UI and Cloud SDK are based on Cloud Storage logs, so neither will provide logs if this option is chosen.",
            "Turn off all logging. No build logs will be captured. Next ID: 6"
          ],
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY",
            "STACKDRIVER_ONLY",
            "CLOUD_LOGGING_ONLY",
            "NONE"
          ]
        },
        "volumes": {
          "items": {
            "$ref": "Volume"
          },
          "type": "array",
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration."
        },
        "requestedVerifyOption": {
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ],
          "enumDescriptions": [
            "Not a verifiable build. (default)",
            "Verified build."
          ],
          "description": "Requested verifiability options.",
          "type": "string"
        },
        "logStreamingOption": {
          "enumDescriptions": [
            "Service may automatically determine build log streaming behavior.",
            "Build logs should be streamed to Google Cloud Storage.",
            "Build logs should not be streamed to Google Cloud Storage; they will be written when the build is completed."
          ],
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ],
          "description": "Option to define build log streaming behavior to Google Cloud Storage.",
          "type": "string"
        },
        "env": {
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machineType": {
          "enumDescriptions": [
            "Standard machine type.",
            "Highcpu machine with 8 CPUs.",
            "Highcpu machine with 32 CPUs."
          ],
          "type": "string",
          "description": "Compute Engine machine type on which to run the build.",
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32"
          ]
        }
      },
      "id": "BuildOptions",
      "description": "Optional arguments to enable specific features of builds.",
      "type": "object"
    },
    "HTTPDelivery": {
      "properties": {
        "uri": {
          "description": "The URI to which JSON-containing HTTP POST requests should be sent.",
          "type": "string"
        }
      },
      "description": "HTTPDelivery is the delivery configuration for an HTTP notification.",
      "id": "HTTPDelivery",
      "type": "object"
    },
    "Secret": {
      "id": "Secret",
      "type": "object",
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value.",
      "properties": {
        "secretEnv": {
          "type": "object",
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          }
        },
        "kmsKeyName": {
          "type": "string",
          "description": "Cloud KMS key name to use to decrypt these envs."
        }
      }
    },
    "SourceProvenance": {
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build.",
      "type": "object",
      "properties": {
        "resolvedStorageSource": {
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved.",
          "$ref": "StorageSource"
        },
        "fileHashes": {
          "description": "Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.",
          "type": "object",
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "readOnly": true
        },
        "resolvedRepoSource": {
          "$ref": "RepoSource",
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved."
        }
      },
      "id": "SourceProvenance"
    },
    "Volume": {
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.",
      "properties": {
        "path": {
          "type": "string",
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths."
        },
        "name": {
          "type": "string",
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps."
        }
      },
      "type": "object",
      "id": "Volume"
    },
    "SMTPDelivery": {
      "type": "object",
      "properties": {
        "fromAddress": {
          "description": "This is the SMTP account/email that appears in the `From:` of the email. If empty, it is assumed to be sender.",
          "type": "string"
        },
        "senderAddress": {
          "description": "This is the SMTP account/email that is used to send the message.",
          "type": "string"
        },
        "port": {
          "description": "The SMTP port of the server.",
          "type": "string"
        },
        "recipientAddresses": {
          "description": "This is the list of addresses to which we send the email (i.e. in the `To:` of the email).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "password": {
          "description": "The SMTP sender's password.",
          "$ref": "NotifierSecretRef"
        },
        "server": {
          "type": "string",
          "description": "The address of the SMTP server."
        }
      },
      "description": "SMTPDelivery is the delivery configuration for an SMTP (email) notification.",
      "id": "SMTPDelivery"
    },
    "Status": {
      "properties": {
        "details": {
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array"
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
        },
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        }
      },
      "type": "object",
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "NotifierMetadata": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The human-readable and user-given name for the notifier. For example: \"repo-merge-email-notifier\"."
        },
        "notifier": {
          "type": "string",
          "description": "The string representing the name and version of notifier to deploy. Expected to be of the form of \"/:\". For example: \"gcr.io/my-project/notifiers/smtp:1.2.34\"."
        }
      },
      "id": "NotifierMetadata",
      "type": "object",
      "description": "NotifierMetadata contains the data which can be used to reference or describe this notifier."
    },
    "TimeSpan": {
      "description": "Start and end times for a build execution phase.",
      "type": "object",
      "id": "TimeSpan",
      "properties": {
        "endTime": {
          "format": "google-datetime",
          "type": "string",
          "description": "End of time span."
        },
        "startTime": {
          "type": "string",
          "description": "Start of time span.",
          "format": "google-datetime"
        }
      }
    },
    "Build": {
      "type": "object",
      "id": "Build",
      "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.",
      "properties": {
        "secrets": {
          "items": {
            "$ref": "Secret"
          },
          "type": "array",
          "description": "Secrets to decrypt using Cloud Key Management Service."
        },
        "id": {
          "type": "string",
          "description": "Output only. Unique identifier of the build.",
          "readOnly": true
        },
        "status": {
          "enum": [
            "STATUS_UNKNOWN",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ],
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "description": "Output only. Status of the build.",
          "type": "string"
        },
        "logsBucket": {
          "description": "Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.",
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. Time at which the request to create the build was received.",
          "type": "string",
          "readOnly": true
        },
        "timeout": {
          "format": "google-duration",
          "type": "string",
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes."
        },
        "buildTriggerId": {
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.",
          "readOnly": true,
          "type": "string"
        },
        "options": {
          "$ref": "BuildOptions",
          "description": "Special options for this build."
        },
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sourceProvenance": {
          "$ref": "SourceProvenance",
          "description": "Output only. A permanent fixed identifier for source."
        },
        "startTime": {
          "description": "Output only. Time at which execution of the build was started.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "results": {
          "description": "Output only. Results of the build.",
          "readOnly": true,
          "$ref": "Results"
        },
        "logUrl": {
          "type": "string",
          "description": "Output only. URL to logs for this build in Google Cloud Console.",
          "readOnly": true
        },
        "finishTime": {
          "readOnly": true,
          "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.",
          "type": "string",
          "format": "google-datetime"
        },
        "substitutions": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Substitutions data for `Build` resource."
        },
        "projectId": {
          "description": "Output only. ID of the project.",
          "type": "string",
          "readOnly": true
        },
        "queueTtl": {
          "type": "string",
          "format": "google-duration",
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time."
        },
        "steps": {
          "description": "Required. The operations to be performed on the workspace.",
          "items": {
            "$ref": "BuildStep"
          },
          "type": "array"
        },
        "statusDetail": {
          "type": "string",
          "description": "Output only. Customer-readable message about the current status."
        },
        "timing": {
          "type": "object",
          "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. If the build does not specify source or images, these keys will not be included.",
          "additionalProperties": {
            "$ref": "TimeSpan"
          },
          "readOnly": true
        },
        "source": {
          "$ref": "Source",
          "description": "The location of the source files to build."
        },
        "tags": {
          "type": "array",
          "description": "Tags for annotation of a `Build`. These are not docker tags.",
          "items": {
            "type": "string"
          }
        },
        "artifacts": {
          "$ref": "Artifacts",
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps."
        }
      }
    },
    "FileHashes": {
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.",
      "type": "object",
      "id": "FileHashes",
      "properties": {
        "fileHash": {
          "type": "array",
          "description": "Collection of file hashes.",
          "items": {
            "$ref": "Hash"
          }
        }
      }
    },
    "BuildStep": {
      "properties": {
        "timing": {
          "description": "Output only. Stores timing information for executing this build step.",
          "readOnly": true,
          "$ref": "TimeSpan"
        },
        "status": {
          "description": "Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "type": "string",
          "enum": [
            "STATUS_UNKNOWN",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ]
        },
        "timeout": {
          "format": "google-duration",
          "type": "string",
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out."
        },
        "args": {
          "items": {
            "type": "string"
          },
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.",
          "type": "array"
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "Volume"
          },
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration."
        },
        "entrypoint": {
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.",
          "type": "string"
        },
        "name": {
          "description": "Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.",
          "type": "string"
        },
        "waitFor": {
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dir": {
          "type": "string",
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution."
        },
        "id": {
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.",
          "type": "string"
        },
        "pullTiming": {
          "readOnly": true,
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pulling this build step's builder image only."
        },
        "secretEnv": {
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "type": "object",
      "id": "BuildStep",
      "description": "A step in the build pipeline."
    },
    "BuiltImage": {
      "id": "BuiltImage",
      "type": "object",
      "description": "An image built by the pipeline.",
      "properties": {
        "digest": {
          "type": "string",
          "description": "Docker Registry 2.0 digest."
        },
        "pushTiming": {
          "readOnly": true,
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pushing the specified image."
        },
        "name": {
          "type": "string",
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`."
        }
      }
    },
    "BuildOperationMetadata": {
      "id": "BuildOperationMetadata",
      "description": "Metadata for build operations.",
      "type": "object",
      "properties": {
        "build": {
          "description": "The build that the operation is tracking.",
          "$ref": "Build"
        }
      }
    },
    "NotifierSecretRef": {
      "id": "NotifierSecretRef",
      "properties": {
        "secretRef": {
          "description": "The value of `secret_ref` should be a `name` that is registered in a `Secret` in the `secrets` list of the `Spec`.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "NotifierSecretRef contains the reference to a secret stored in the corresponding NotifierSpec."
    },
    "NotifierSpec": {
      "type": "object",
      "properties": {
        "secrets": {
          "items": {
            "$ref": "NotifierSecret"
          },
          "description": "Configurations for secret resources used by this particular notifier.",
          "type": "array"
        },
        "notification": {
          "description": "The configuration of this particular notifier.",
          "$ref": "Notification"
        }
      },
      "description": "NotifierSpec is the configuration container for notifications.",
      "id": "NotifierSpec"
    },
    "Operation": {
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "id": "Operation",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "response": {
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        }
      }
    },
    "ListWorkerPoolsResponse": {
      "id": "ListWorkerPoolsResponse",
      "properties": {
        "workerPools": {
          "description": "`WorkerPools` for the project.",
          "type": "array",
          "items": {
            "$ref": "WorkerPool"
          }
        }
      },
      "description": "Response containing existing `WorkerPools`.",
      "type": "object"
    },
    "Source": {
      "id": "Source",
      "description": "Location of the source in a supported storage service.",
      "type": "object",
      "properties": {
        "repoSource": {
          "$ref": "RepoSource",
          "description": "If provided, get the source from this location in a Cloud Source Repository."
        },
        "storageSource": {
          "$ref": "StorageSource",
          "description": "If provided, get the source from this location in Google Cloud Storage."
        }
      }
    },
    "Hash": {
      "description": "Container message for hash values.",
      "id": "Hash",
      "properties": {
        "type": {
          "enum": [
            "NONE",
            "SHA256",
            "MD5"
          ],
          "description": "The type of hash that was performed.",
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash."
          ],
          "type": "string"
        },
        "value": {
          "description": "The hash value.",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StorageSource": {
      "id": "StorageSource",
      "description": "Location of the source in an archive file in Google Cloud Storage.",
      "properties": {
        "generation": {
          "format": "int64",
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "type": "string"
        },
        "object": {
          "description": "Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build.",
          "type": "string"
        },
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        }
      },
      "type": "object"
    },
    "ArtifactResult": {
      "type": "object",
      "properties": {
        "fileHash": {
          "description": "The file hash of the artifact.",
          "items": {
            "$ref": "FileHashes"
          },
          "type": "array"
        },
        "location": {
          "type": "string",
          "description": "The path of an artifact in a Google Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`."
        }
      },
      "id": "ArtifactResult",
      "description": "An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file."
    },
    "NotifierConfig": {
      "description": "NotifierConfig is the top-level configuration message.",
      "properties": {
        "spec": {
          "description": "The actual configuration for this notifier.",
          "$ref": "NotifierSpec"
        },
        "apiVersion": {
          "type": "string",
          "description": "The API version of this configuration format."
        },
        "kind": {
          "description": "The type of notifier to use (e.g. SMTPNotifier).",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata for referring to/handling/deploying this notifier.",
          "$ref": "NotifierMetadata"
        }
      },
      "id": "NotifierConfig",
      "type": "object"
    },
    "Results": {
      "description": "Artifacts created by the build pipeline.",
      "properties": {
        "artifactManifest": {
          "description": "Path to the artifact manifest. Only populated when artifacts are uploaded.",
          "type": "string"
        },
        "numArtifacts": {
          "format": "int64",
          "type": "string",
          "description": "Number of artifacts uploaded. Only populated when artifacts are uploaded."
        },
        "buildStepImages": {
          "description": "List of build step digests, in the order corresponding to build step indices.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "images": {
          "description": "Container images that were built as a part of the build.",
          "items": {
            "$ref": "BuiltImage"
          },
          "type": "array"
        },
        "buildStepOutputs": {
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.",
          "type": "array",
          "items": {
            "format": "byte",
            "type": "string"
          }
        },
        "artifactTiming": {
          "$ref": "TimeSpan",
          "description": "Time to push all non-container artifacts."
        }
      },
      "type": "object",
      "id": "Results"
    },
    "NotifierSecret": {
      "description": "NotifierSecret is the container that maps a secret name (reference) to its Google Cloud Secret Manager resource path.",
      "properties": {
        "value": {
          "description": "Value is interpreted to be a resource path for fetching the actual (versioned) secret data for this secret. For example, this would be a Google Cloud Secret Manager secret version resource path like: \"projects/my-project/secrets/my-secret/versions/latest\".",
          "type": "string"
        },
        "name": {
          "description": "Name is the local name of the secret, such as the verbatim string \"my-smtp-password\".",
          "type": "string"
        }
      },
      "id": "NotifierSecret",
      "type": "object"
    },
    "Artifacts": {
      "type": "object",
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps.",
      "properties": {
        "objects": {
          "$ref": "ArtifactObjects",
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE."
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE."
        }
      },
      "id": "Artifacts"
    },
    "WorkerConfig": {
      "description": "WorkerConfig defines the configuration to be used for a creating workers in the pool.",
      "id": "WorkerConfig",
      "properties": {
        "diskSizeGb": {
          "format": "int64",
          "description": "Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/ If `0` is specified, Cloud Build will use a standard disk size. `disk_size` is overridden if you specify a different disk size in `build_options`. In this case, a VM with a disk size specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions",
          "type": "string"
        },
        "tag": {
          "description": "The tag applied to the worker, and the same tag used by the firewall rule. It is used to identify the Cloud Build workers among other VMs. The default value for tag is `worker`.",
          "type": "string"
        },
        "network": {
          "description": "The network definition used to create the worker. If this section is left empty, the workers will be created in WorkerPool.project_id on the default network.",
          "$ref": "Network"
        },
        "machineType": {
          "type": "string",
          "description": "Machine Type of the worker, such as n1-standard-1. See https://cloud.google.com/compute/docs/machine-types. If left blank, Cloud Build will use a standard unspecified machine to create the worker pool. `machine_type` is overridden if you specify a different machine type in `build_options`. In this case, the VM specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/speeding-up-builds#using_custom_virtual_machine_sizes"
        }
      },
      "type": "object"
    },
    "ArtifactObjects": {
      "id": "ArtifactObjects",
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.",
      "properties": {
        "paths": {
          "type": "array",
          "description": "Path globs used to match files in the build's workspace.",
          "items": {
            "type": "string"
          }
        },
        "timing": {
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pushing all artifact objects."
        },
        "location": {
          "type": "string",
          "description": "Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix."
        }
      },
      "type": "object"
    }
  },
  "servicePath": "",
  "ownerDomain": "google.com",
  "mtlsRootUrl": "https://cloudbuild.mtls.googleapis.com/",
  "discoveryVersion": "v1",
  "protocol": "rest",
  "resources": {
    "projects": {
      "resources": {
        "workerPools": {
          "methods": {
            "list": {
              "parameterOrder": [
                "parent"
              ],
              "description": "List project's `WorkerPool`s.",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+parent}/workerPools",
              "parameters": {
                "parent": {
                  "location": "path",
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "description": "ID of the parent project.",
                  "type": "string"
                }
              },
              "id": "cloudbuild.projects.workerPools.list",
              "response": {
                "$ref": "ListWorkerPoolsResponse"
              },
              "httpMethod": "GET",
              "flatPath": "v1alpha1/projects/{projectsId}/workerPools"
            },
            "get": {
              "id": "cloudbuild.projects.workerPools.get",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/workerPools/{workerPoolsId}",
              "path": "v1alpha1/{+name}",
              "description": "Returns information about a `WorkerPool`.",
              "response": {
                "$ref": "WorkerPool"
              },
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "type": "string",
                  "description": "The field will contain name of the resource requested, for example: \"projects/project-1/workerPools/workerpool-name\"",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects/[^/]+/workerPools/[^/]+$"
                }
              },
              "parameterOrder": [
                "name"
              ]
            },
            "delete": {
              "flatPath": "v1alpha1/projects/{projectsId}/workerPools/{workerPoolsId}",
              "id": "cloudbuild.projects.workerPools.delete",
              "httpMethod": "DELETE",
              "response": {
                "$ref": "Empty"
              },
              "description": "Deletes a `WorkerPool` by its project ID and WorkerPool name.",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "The field will contain name of the resource requested, for example: \"projects/project-1/workerPools/workerpool-name\"",
                  "type": "string",
                  "pattern": "^projects/[^/]+/workerPools/[^/]+$",
                  "required": true,
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1alpha1/{+name}"
            },
            "patch": {
              "httpMethod": "PATCH",
              "path": "v1alpha1/{+name}",
              "description": "Update a `WorkerPool`.",
              "id": "cloudbuild.projects.workerPools.patch",
              "parameters": {
                "name": {
                  "required": true,
                  "pattern": "^projects/[^/]+/workerPools/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "description": "The field will contain name of the resource requested, for example: \"projects/project-1/workerPools/workerpool-name\""
                }
              },
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "flatPath": "v1alpha1/projects/{projectsId}/workerPools/{workerPoolsId}",
              "request": {
                "$ref": "WorkerPool"
              },
              "response": {
                "$ref": "WorkerPool"
              }
            },
            "create": {
              "request": {
                "$ref": "WorkerPool"
              },
              "id": "cloudbuild.projects.workerPools.create",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Creates a `WorkerPool` to run the builds, and returns the new worker pool.",
              "parameters": {
                "parent": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "ID of the parent project.",
                  "pattern": "^projects/[^/]+$"
                }
              },
              "response": {
                "$ref": "WorkerPool"
              },
              "flatPath": "v1alpha1/projects/{projectsId}/workerPools",
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST",
              "path": "v1alpha1/{+parent}/workerPools"
            }
          }
        },
        "locations": {
          "resources": {
            "operations": {
              "methods": {
                "get": {
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource.",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "path": "v1alpha1/{+name}",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "httpMethod": "GET",
                  "id": "cloudbuild.projects.locations.operations.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "response": {
                    "$ref": "Operation"
                  }
                },
                "cancel": {
                  "path": "v1alpha1/{+name}:cancel",
                  "id": "cloudbuild.projects.locations.operations.cancel",
                  "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "description": "The name of the operation resource to be cancelled."
                    }
                  },
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "response": {
                    "$ref": "Empty"
                  },
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "parameterOrder": [
                    "name"
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}
