/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.managedkafka.v1.model;

/**
 * A Kafka topic in a given cluster.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Managed Service for Apache Kafka API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Topic extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Configurations for the topic that are overridden from the cluster defaults. The key
   * of the map is a Kafka topic property name, for example: `cleanup.policy`, `compression.type`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> configs;

  /**
   * Identifier. The name of the topic. The `topic` segment is used when connecting directly to the
   * cluster. Structured like:
   * projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Required. The number of partitions this topic has. The partition count can only be increased,
   * not decreased. Please note that if partitions are increased for a topic that has a key, the
   * partitioning logic or the ordering of the messages will be affected.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer partitionCount;

  /**
   * Required. Immutable. The number of replicas of each partition. A replication factor of 3 is
   * recommended for high availability.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer replicationFactor;

  /**
   * Optional. Configurations for the topic that are overridden from the cluster defaults. The key
   * of the map is a Kafka topic property name, for example: `cleanup.policy`, `compression.type`.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getConfigs() {
    return configs;
  }

  /**
   * Optional. Configurations for the topic that are overridden from the cluster defaults. The key
   * of the map is a Kafka topic property name, for example: `cleanup.policy`, `compression.type`.
   * @param configs configs or {@code null} for none
   */
  public Topic setConfigs(java.util.Map<String, java.lang.String> configs) {
    this.configs = configs;
    return this;
  }

  /**
   * Identifier. The name of the topic. The `topic` segment is used when connecting directly to the
   * cluster. Structured like:
   * projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The name of the topic. The `topic` segment is used when connecting directly to the
   * cluster. Structured like:
   * projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}
   * @param name name or {@code null} for none
   */
  public Topic setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The number of partitions this topic has. The partition count can only be increased,
   * not decreased. Please note that if partitions are increased for a topic that has a key, the
   * partitioning logic or the ordering of the messages will be affected.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPartitionCount() {
    return partitionCount;
  }

  /**
   * Required. The number of partitions this topic has. The partition count can only be increased,
   * not decreased. Please note that if partitions are increased for a topic that has a key, the
   * partitioning logic or the ordering of the messages will be affected.
   * @param partitionCount partitionCount or {@code null} for none
   */
  public Topic setPartitionCount(java.lang.Integer partitionCount) {
    this.partitionCount = partitionCount;
    return this;
  }

  /**
   * Required. Immutable. The number of replicas of each partition. A replication factor of 3 is
   * recommended for high availability.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getReplicationFactor() {
    return replicationFactor;
  }

  /**
   * Required. Immutable. The number of replicas of each partition. A replication factor of 3 is
   * recommended for high availability.
   * @param replicationFactor replicationFactor or {@code null} for none
   */
  public Topic setReplicationFactor(java.lang.Integer replicationFactor) {
    this.replicationFactor = replicationFactor;
    return this;
  }

  @Override
  public Topic set(String fieldName, Object value) {
    return (Topic) super.set(fieldName, value);
  }

  @Override
  public Topic clone() {
    return (Topic) super.clone();
  }

}
