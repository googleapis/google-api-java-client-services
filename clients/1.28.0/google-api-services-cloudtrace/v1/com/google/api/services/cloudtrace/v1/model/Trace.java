/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudtrace.v1.model;

/**
 * A trace describes how long it takes for an application to perform an operation. It consists of a
 * set of spans, each of which represent a single timed event within the operation.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Stackdriver Trace API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Trace extends com.google.api.client.json.GenericJson {

  /**
   * Project ID of the Cloud project where the trace data is stored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String projectId;

  /**
   * Collection of spans in the trace.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<TraceSpan> spans;

  /**
   * Globally unique identifier for the trace. This identifier is a 128-bit numeric value formatted
   * as a 32-byte hex string. For example, `382d4f4c6b7bb2f4a972559d9085001d`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String traceId;

  /**
   * Project ID of the Cloud project where the trace data is stored.
   * @return value or {@code null} for none
   */
  public java.lang.String getProjectId() {
    return projectId;
  }

  /**
   * Project ID of the Cloud project where the trace data is stored.
   * @param projectId projectId or {@code null} for none
   */
  public Trace setProjectId(java.lang.String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Collection of spans in the trace.
   * @return value or {@code null} for none
   */
  public java.util.List<TraceSpan> getSpans() {
    return spans;
  }

  /**
   * Collection of spans in the trace.
   * @param spans spans or {@code null} for none
   */
  public Trace setSpans(java.util.List<TraceSpan> spans) {
    this.spans = spans;
    return this;
  }

  /**
   * Globally unique identifier for the trace. This identifier is a 128-bit numeric value formatted
   * as a 32-byte hex string. For example, `382d4f4c6b7bb2f4a972559d9085001d`.
   * @return value or {@code null} for none
   */
  public java.lang.String getTraceId() {
    return traceId;
  }

  /**
   * Globally unique identifier for the trace. This identifier is a 128-bit numeric value formatted
   * as a 32-byte hex string. For example, `382d4f4c6b7bb2f4a972559d9085001d`.
   * @param traceId traceId or {@code null} for none
   */
  public Trace setTraceId(java.lang.String traceId) {
    this.traceId = traceId;
    return this;
  }

  @Override
  public Trace set(String fieldName, Object value) {
    return (Trace) super.set(fieldName, value);
  }

  @Override
  public Trace clone() {
    return (Trace) super.clone();
  }

}
