/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Representation of a single material that can describe a geometry surface. See technical
 * definitions of these fields via the description and link at https://www.cityjson.org/specs/2.0.0
 * /#material-object.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreCityJsonProtoAppearanceMaterial extends com.google.api.client.json.GenericJson {

  /**
   * The color that this material shows under pure white light when incoming light is reflected in
   * all directions equally.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeostoreCityJsonProtoAppearanceMaterialRgbColor diffuseColor;

  /**
   * Whether this material has an even, regular surface or consistency.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isSmooth;

  /**
   * The name of this material.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * The degree to which this material reflects light; value is [0,1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float shininess;

  /**
   * The degree to which this material allows light through; value is [0,1], with 1.0 being
   * completely transparent.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float transparency;

  /**
   * The color that this material shows under pure white light when incoming light is reflected in
   * all directions equally.
   * @return value or {@code null} for none
   */
  public GeostoreCityJsonProtoAppearanceMaterialRgbColor getDiffuseColor() {
    return diffuseColor;
  }

  /**
   * The color that this material shows under pure white light when incoming light is reflected in
   * all directions equally.
   * @param diffuseColor diffuseColor or {@code null} for none
   */
  public GeostoreCityJsonProtoAppearanceMaterial setDiffuseColor(GeostoreCityJsonProtoAppearanceMaterialRgbColor diffuseColor) {
    this.diffuseColor = diffuseColor;
    return this;
  }

  /**
   * Whether this material has an even, regular surface or consistency.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsSmooth() {
    return isSmooth;
  }

  /**
   * Whether this material has an even, regular surface or consistency.
   * @param isSmooth isSmooth or {@code null} for none
   */
  public GeostoreCityJsonProtoAppearanceMaterial setIsSmooth(java.lang.Boolean isSmooth) {
    this.isSmooth = isSmooth;
    return this;
  }

  /**
   * The name of this material.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The name of this material.
   * @param name name or {@code null} for none
   */
  public GeostoreCityJsonProtoAppearanceMaterial setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * The degree to which this material reflects light; value is [0,1].
   * @return value or {@code null} for none
   */
  public java.lang.Float getShininess() {
    return shininess;
  }

  /**
   * The degree to which this material reflects light; value is [0,1].
   * @param shininess shininess or {@code null} for none
   */
  public GeostoreCityJsonProtoAppearanceMaterial setShininess(java.lang.Float shininess) {
    this.shininess = shininess;
    return this;
  }

  /**
   * The degree to which this material allows light through; value is [0,1], with 1.0 being
   * completely transparent.
   * @return value or {@code null} for none
   */
  public java.lang.Float getTransparency() {
    return transparency;
  }

  /**
   * The degree to which this material allows light through; value is [0,1], with 1.0 being
   * completely transparent.
   * @param transparency transparency or {@code null} for none
   */
  public GeostoreCityJsonProtoAppearanceMaterial setTransparency(java.lang.Float transparency) {
    this.transparency = transparency;
    return this;
  }

  @Override
  public GeostoreCityJsonProtoAppearanceMaterial set(String fieldName, Object value) {
    return (GeostoreCityJsonProtoAppearanceMaterial) super.set(fieldName, value);
  }

  @Override
  public GeostoreCityJsonProtoAppearanceMaterial clone() {
    return (GeostoreCityJsonProtoAppearanceMaterial) super.clone();
  }

}
