/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.migrationcenter.v1alpha1.model;

/**
 * Preferences common to Cloud SQL databases.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Migration Center API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DatabasePreferencesCloudSqlCommon extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Preferences for database backups.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DatabasePreferencesCloudSqlCommonBackup backup;

  /**
   * Optional. Commitment plan to consider when calculating costs. Only regular CUDs (not flexible)
   * are currently available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String commitmentPlan;

  /**
   * Optional. Cloud SQL edition. For SQL Server, only Enterprise is available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String edition;

  /**
   * Optional. Persistent disk type to use. If unspecified, a disk type is recommended based on
   * available usage data. For SQL Server, only SSD is available. For MySQL and PostgreSQL, only
   * STANDARD (HDD) and SSD types are available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String persistentDiskType;

  /**
   * Optional. Sizing optimization strategy of the database. Currently supported for Cloud SQL are
   * just two values: SIZING_OPTIMIZATION_STRATEGY_MODERATE and
   * SIZING_OPTIMIZATION_STRATEGY_SAME_AS_SOURCE. SIZING_OPTIMIZATION_STRATEGY_UNSPECIFIED will
   * behave like SIZING_OPTIMIZATION_STRATEGY_MODERATE.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sizingOptimizationStrategy;

  /**
   * Optional. Preferred zone availability.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String zoneAvailability;

  /**
   * Optional. Preferences for database backups.
   * @return value or {@code null} for none
   */
  public DatabasePreferencesCloudSqlCommonBackup getBackup() {
    return backup;
  }

  /**
   * Optional. Preferences for database backups.
   * @param backup backup or {@code null} for none
   */
  public DatabasePreferencesCloudSqlCommon setBackup(DatabasePreferencesCloudSqlCommonBackup backup) {
    this.backup = backup;
    return this;
  }

  /**
   * Optional. Commitment plan to consider when calculating costs. Only regular CUDs (not flexible)
   * are currently available.
   * @return value or {@code null} for none
   */
  public java.lang.String getCommitmentPlan() {
    return commitmentPlan;
  }

  /**
   * Optional. Commitment plan to consider when calculating costs. Only regular CUDs (not flexible)
   * are currently available.
   * @param commitmentPlan commitmentPlan or {@code null} for none
   */
  public DatabasePreferencesCloudSqlCommon setCommitmentPlan(java.lang.String commitmentPlan) {
    this.commitmentPlan = commitmentPlan;
    return this;
  }

  /**
   * Optional. Cloud SQL edition. For SQL Server, only Enterprise is available.
   * @return value or {@code null} for none
   */
  public java.lang.String getEdition() {
    return edition;
  }

  /**
   * Optional. Cloud SQL edition. For SQL Server, only Enterprise is available.
   * @param edition edition or {@code null} for none
   */
  public DatabasePreferencesCloudSqlCommon setEdition(java.lang.String edition) {
    this.edition = edition;
    return this;
  }

  /**
   * Optional. Persistent disk type to use. If unspecified, a disk type is recommended based on
   * available usage data. For SQL Server, only SSD is available. For MySQL and PostgreSQL, only
   * STANDARD (HDD) and SSD types are available.
   * @return value or {@code null} for none
   */
  public java.lang.String getPersistentDiskType() {
    return persistentDiskType;
  }

  /**
   * Optional. Persistent disk type to use. If unspecified, a disk type is recommended based on
   * available usage data. For SQL Server, only SSD is available. For MySQL and PostgreSQL, only
   * STANDARD (HDD) and SSD types are available.
   * @param persistentDiskType persistentDiskType or {@code null} for none
   */
  public DatabasePreferencesCloudSqlCommon setPersistentDiskType(java.lang.String persistentDiskType) {
    this.persistentDiskType = persistentDiskType;
    return this;
  }

  /**
   * Optional. Sizing optimization strategy of the database. Currently supported for Cloud SQL are
   * just two values: SIZING_OPTIMIZATION_STRATEGY_MODERATE and
   * SIZING_OPTIMIZATION_STRATEGY_SAME_AS_SOURCE. SIZING_OPTIMIZATION_STRATEGY_UNSPECIFIED will
   * behave like SIZING_OPTIMIZATION_STRATEGY_MODERATE.
   * @return value or {@code null} for none
   */
  public java.lang.String getSizingOptimizationStrategy() {
    return sizingOptimizationStrategy;
  }

  /**
   * Optional. Sizing optimization strategy of the database. Currently supported for Cloud SQL are
   * just two values: SIZING_OPTIMIZATION_STRATEGY_MODERATE and
   * SIZING_OPTIMIZATION_STRATEGY_SAME_AS_SOURCE. SIZING_OPTIMIZATION_STRATEGY_UNSPECIFIED will
   * behave like SIZING_OPTIMIZATION_STRATEGY_MODERATE.
   * @param sizingOptimizationStrategy sizingOptimizationStrategy or {@code null} for none
   */
  public DatabasePreferencesCloudSqlCommon setSizingOptimizationStrategy(java.lang.String sizingOptimizationStrategy) {
    this.sizingOptimizationStrategy = sizingOptimizationStrategy;
    return this;
  }

  /**
   * Optional. Preferred zone availability.
   * @return value or {@code null} for none
   */
  public java.lang.String getZoneAvailability() {
    return zoneAvailability;
  }

  /**
   * Optional. Preferred zone availability.
   * @param zoneAvailability zoneAvailability or {@code null} for none
   */
  public DatabasePreferencesCloudSqlCommon setZoneAvailability(java.lang.String zoneAvailability) {
    this.zoneAvailability = zoneAvailability;
    return this;
  }

  @Override
  public DatabasePreferencesCloudSqlCommon set(String fieldName, Object value) {
    return (DatabasePreferencesCloudSqlCommon) super.set(fieldName, value);
  }

  @Override
  public DatabasePreferencesCloudSqlCommon clone() {
    return (DatabasePreferencesCloudSqlCommon) super.clone();
  }

}
