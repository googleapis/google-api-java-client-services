{
  "baseUrl": "https://people.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/userinfo.profile": {
          "description": "See your personal info, including any personal info you've made publicly available"
        },
        "https://www.googleapis.com/auth/user.organization.read": {
          "description": "See your education, work history and org info"
        },
        "https://www.googleapis.com/auth/user.addresses.read": {
          "description": "View your street addresses"
        },
        "https://www.googleapis.com/auth/contacts.readonly": {
          "description": "See and download your contacts"
        },
        "https://www.googleapis.com/auth/user.birthday.read": {
          "description": "See and download your exact date of birth"
        },
        "https://www.googleapis.com/auth/contacts.other.readonly": {
          "description": "See and download contact info automatically saved in your \"Other contacts\""
        },
        "https://www.googleapis.com/auth/user.phonenumbers.read": {
          "description": "See and download your personal phone numbers"
        },
        "https://www.googleapis.com/auth/user.emails.read": {
          "description": "See and download all of your Google Account email addresses"
        },
        "https://www.googleapis.com/auth/contacts": {
          "description": "See, edit, download, and permanently delete your contacts"
        },
        "https://www.googleapis.com/auth/directory.readonly": {
          "description": "See and download your organization's GSuite directory"
        },
        "https://www.googleapis.com/auth/userinfo.email": {
          "description": "View your email address"
        },
        "https://www.googleapis.com/auth/user.gender.read": {
          "description": "See your gender"
        }
      }
    }
  },
  "title": "People API",
  "ownerName": "Google",
  "resources": {
    "contactGroups": {
      "methods": {
        "update": {
          "parameters": {
            "resourceName": {
              "pattern": "^contactGroups/[^/]+$",
              "description": "The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "PUT",
          "parameterOrder": [
            "resourceName"
          ],
          "request": {
            "$ref": "UpdateContactGroupRequest"
          },
          "id": "people.contactGroups.update",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "description": "Update the name of an existing contact group owned by the authenticated user.",
          "path": "v1/{+resourceName}",
          "flatPath": "v1/contactGroups/{contactGroupsId}",
          "response": {
            "$ref": "ContactGroup"
          }
        },
        "batchGet": {
          "id": "people.contactGroups.batchGet",
          "flatPath": "v1/contactGroups:batchGet",
          "path": "v1/contactGroups:batchGet",
          "response": {
            "$ref": "BatchGetContactGroupsResponse"
          },
          "parameters": {
            "groupFields": {
              "format": "google-fieldmask",
              "description": "Optional. A field mask to restrict which fields on the group are returned. Defaults to `metadata`, `groupType`, `memberCount`, and `name` if not set or set to empty. Valid fields are: * clientData * groupType * memberCount * metadata * name",
              "type": "string",
              "location": "query"
            },
            "resourceNames": {
              "type": "string",
              "repeated": true,
              "description": "Required. The resource names of the contact groups to get.",
              "location": "query"
            },
            "maxMembers": {
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "Optional. Specifies the maximum number of members to return for each group. Defaults to 0 if not set, which will return zero members."
            }
          },
          "description": "Get a list of contact groups owned by the authenticated user by specifying a list of contact group resource names.",
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly"
          ],
          "parameterOrder": [],
          "httpMethod": "GET"
        },
        "delete": {
          "httpMethod": "DELETE",
          "parameterOrder": [
            "resourceName"
          ],
          "path": "v1/{+resourceName}",
          "description": "Delete an existing contact group owned by the authenticated user by specifying a contact group resource name.",
          "response": {
            "$ref": "Empty"
          },
          "parameters": {
            "resourceName": {
              "required": true,
              "type": "string",
              "pattern": "^contactGroups/[^/]+$",
              "description": "Required. The resource name of the contact group to delete.",
              "location": "path"
            },
            "deleteContacts": {
              "description": "Optional. Set to true to also delete the contacts in the specified group.",
              "location": "query",
              "type": "boolean"
            }
          },
          "id": "people.contactGroups.delete",
          "flatPath": "v1/contactGroups/{contactGroupsId}",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ]
        },
        "list": {
          "flatPath": "v1/contactGroups",
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly"
          ],
          "description": "List all contact groups owned by the authenticated user. Members of the contact groups are not populated.",
          "parameters": {
            "groupFields": {
              "type": "string",
              "description": "Optional. A field mask to restrict which fields on the group are returned. Defaults to `metadata`, `groupType`, `memberCount`, and `name` if not set or set to empty. Valid fields are: * clientData * groupType * memberCount * metadata * name",
              "format": "google-fieldmask",
              "location": "query"
            },
            "syncToken": {
              "location": "query",
              "type": "string",
              "description": "Optional. A sync token, returned by a previous call to `contactgroups.list`. Only resources changed since the sync token was created will be returned."
            },
            "pageSize": {
              "format": "int32",
              "description": "Optional. The maximum number of resources to return. Valid values are between 1 and 1000, inclusive. Defaults to 30 if not set or set to 0.",
              "type": "integer",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Optional. The next_page_token value returned from a previous call to [ListContactGroups](/people/api/rest/v1/contactgroups/list). Requests the next page of resources."
            }
          },
          "response": {
            "$ref": "ListContactGroupsResponse"
          },
          "path": "v1/contactGroups",
          "id": "people.contactGroups.list",
          "httpMethod": "GET",
          "parameterOrder": []
        },
        "get": {
          "parameterOrder": [
            "resourceName"
          ],
          "response": {
            "$ref": "ContactGroup"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly"
          ],
          "path": "v1/{+resourceName}",
          "parameters": {
            "resourceName": {
              "location": "path",
              "pattern": "^contactGroups/[^/]+$",
              "type": "string",
              "description": "Required. The resource name of the contact group to get.",
              "required": true
            },
            "groupFields": {
              "type": "string",
              "format": "google-fieldmask",
              "description": "Optional. A field mask to restrict which fields on the group are returned. Defaults to `metadata`, `groupType`, `memberCount`, and `name` if not set or set to empty. Valid fields are: * clientData * groupType * memberCount * metadata * name",
              "location": "query"
            },
            "maxMembers": {
              "description": "Optional. Specifies the maximum number of members to return. Defaults to 0 if not set, which will return zero members.",
              "format": "int32",
              "type": "integer",
              "location": "query"
            }
          },
          "flatPath": "v1/contactGroups/{contactGroupsId}",
          "description": "Get a specific contact group owned by the authenticated user by specifying a contact group resource name.",
          "id": "people.contactGroups.get"
        },
        "create": {
          "parameters": {},
          "httpMethod": "POST",
          "request": {
            "$ref": "CreateContactGroupRequest"
          },
          "parameterOrder": [],
          "description": "Create a new contact group owned by the authenticated user.",
          "id": "people.contactGroups.create",
          "response": {
            "$ref": "ContactGroup"
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "path": "v1/contactGroups",
          "flatPath": "v1/contactGroups"
        }
      },
      "resources": {
        "members": {
          "methods": {
            "modify": {
              "request": {
                "$ref": "ModifyContactGroupMembersRequest"
              },
              "parameters": {
                "resourceName": {
                  "pattern": "^contactGroups/[^/]+$",
                  "required": true,
                  "description": "Required. The resource name of the contact group to modify.",
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/contacts"
              ],
              "flatPath": "v1/contactGroups/{contactGroupsId}/members:modify",
              "id": "people.contactGroups.members.modify",
              "httpMethod": "POST",
              "description": "Modify the members of a contact group owned by the authenticated user. The only system contact groups that can have members added are `contactGroups/myContacts` and `contactGroups/starred`. Other system contact groups are deprecated and can only have contacts removed.",
              "response": {
                "$ref": "ModifyContactGroupMembersResponse"
              },
              "path": "v1/{+resourceName}/members:modify",
              "parameterOrder": [
                "resourceName"
              ]
            }
          }
        }
      }
    },
    "people": {
      "methods": {
        "deleteContact": {
          "path": "v1/{+resourceName}:deleteContact",
          "flatPath": "v1/people/{peopleId}:deleteContact",
          "response": {
            "$ref": "Empty"
          },
          "description": "Delete a contact person. Any non-contact data will not be deleted.",
          "parameters": {
            "resourceName": {
              "required": true,
              "pattern": "^people/[^/]+$",
              "location": "path",
              "type": "string",
              "description": "Required. The resource name of the contact to delete."
            }
          },
          "id": "people.people.deleteContact",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameterOrder": [
            "resourceName"
          ]
        },
        "searchDirectoryPeople": {
          "flatPath": "v1/people:searchDirectoryPeople",
          "description": "Provides a list of domain profiles and domain contacts in the authenticated user's domain directory that match the search query.",
          "id": "people.people.searchDirectoryPeople",
          "scopes": [
            "https://www.googleapis.com/auth/directory.readonly"
          ],
          "response": {
            "$ref": "SearchDirectoryPeopleResponse"
          },
          "httpMethod": "GET",
          "parameters": {
            "readMask": {
              "format": "google-fieldmask",
              "location": "query",
              "type": "string",
              "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined"
            },
            "mergeSources": {
              "repeated": true,
              "enumDescriptions": [
                "Unspecified.",
                "User owned contact."
              ],
              "enum": [
                "DIRECTORY_MERGE_SOURCE_TYPE_UNSPECIFIED",
                "DIRECTORY_MERGE_SOURCE_TYPE_CONTACT"
              ],
              "description": "Optional. Additional data to merge into the directory sources if they are connected through verified join keys such as email addresses or phone numbers.",
              "type": "string",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Optional. A page token, received from a previous `SearchDirectoryPeople` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchDirectoryPeople` must match the call that provided the page token."
            },
            "pageSize": {
              "description": "Optional. The number of people to include in the response. Valid values are between 1 and 500, inclusive. Defaults to 100 if not set or set to 0.",
              "type": "integer",
              "location": "query",
              "format": "int32"
            },
            "query": {
              "location": "query",
              "description": "Required. Prefix query that matches fields in the person. Does NOT use the read_mask for determining what fields to match.",
              "type": "string"
            },
            "sources": {
              "enumDescriptions": [
                "Unspecified.",
                "G Suite domain shared contact.",
                "G Suite domain profile."
              ],
              "repeated": true,
              "description": "Required. Directory sources to return.",
              "enum": [
                "DIRECTORY_SOURCE_TYPE_UNSPECIFIED",
                "DIRECTORY_SOURCE_TYPE_DOMAIN_CONTACT",
                "DIRECTORY_SOURCE_TYPE_DOMAIN_PROFILE"
              ],
              "type": "string",
              "location": "query"
            }
          },
          "parameterOrder": [],
          "path": "v1/people:searchDirectoryPeople"
        },
        "createContact": {
          "request": {
            "$ref": "Person"
          },
          "id": "people.people.createContact",
          "httpMethod": "POST",
          "path": "v1/people:createContact",
          "parameters": {
            "sources": {
              "location": "query",
              "description": "Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.",
              "type": "string",
              "repeated": true,
              "enum": [
                "READ_SOURCE_TYPE_UNSPECIFIED",
                "READ_SOURCE_TYPE_PROFILE",
                "READ_SOURCE_TYPE_CONTACT",
                "READ_SOURCE_TYPE_DOMAIN_CONTACT"
              ],
              "enumDescriptions": [
                "Unspecified.",
                "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
                "Returns SourceType.CONTACT.",
                "Returns SourceType.DOMAIN_CONTACT."
              ]
            },
            "personFields": {
              "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Defaults to all fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined",
              "type": "string",
              "format": "google-fieldmask",
              "location": "query"
            }
          },
          "parameterOrder": [],
          "flatPath": "v1/people:createContact",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "description": "Create a new contact and return the person resource for that contact. The request returns a 400 error if more than one field is specified on a field that is a singleton for contact sources: * biographies * birthdays * genders * names",
          "response": {
            "$ref": "Person"
          }
        },
        "getBatchGet": {
          "path": "v1/people:batchGet",
          "description": "Provides information about a list of specific people by specifying a list of requested resource names. Use `people/me` to indicate the authenticated user. The request returns a 400 error if 'personFields' is not specified.",
          "parameterOrder": [],
          "response": {
            "$ref": "GetPeopleResponse"
          },
          "parameters": {
            "personFields": {
              "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined",
              "type": "string",
              "format": "google-fieldmask",
              "location": "query"
            },
            "sources": {
              "repeated": true,
              "type": "string",
              "description": "Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.",
              "enum": [
                "READ_SOURCE_TYPE_UNSPECIFIED",
                "READ_SOURCE_TYPE_PROFILE",
                "READ_SOURCE_TYPE_CONTACT",
                "READ_SOURCE_TYPE_DOMAIN_CONTACT"
              ],
              "location": "query",
              "enumDescriptions": [
                "Unspecified.",
                "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
                "Returns SourceType.CONTACT.",
                "Returns SourceType.DOMAIN_CONTACT."
              ]
            },
            "requestMask.includeField": {
              "type": "string",
              "description": "Required. Comma-separated list of person fields to be included in the response. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
              "format": "google-fieldmask",
              "location": "query"
            },
            "resourceNames": {
              "type": "string",
              "location": "query",
              "description": "Required. The resource names of the people to provide information about. It's repeatable. The URL query parameter should be resourceNames=\u003cname1\u003e&resourceNames=\u003cname2\u003e&... - To get information about the authenticated user, specify `people/me`. - To get information about a google account, specify `people/{account_id}`. - To get information about a contact, specify the resource name that identifies the contact as returned by [`people.connections.list`](/people/api/rest/v1/people.connections/list). You can include up to 50 resource names in one request.",
              "repeated": true
            }
          },
          "id": "people.people.getBatchGet",
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly",
            "https://www.googleapis.com/auth/directory.readonly",
            "https://www.googleapis.com/auth/user.addresses.read",
            "https://www.googleapis.com/auth/user.birthday.read",
            "https://www.googleapis.com/auth/user.emails.read",
            "https://www.googleapis.com/auth/user.gender.read",
            "https://www.googleapis.com/auth/user.organization.read",
            "https://www.googleapis.com/auth/user.phonenumbers.read",
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile"
          ],
          "httpMethod": "GET",
          "flatPath": "v1/people:batchGet"
        },
        "searchContacts": {
          "httpMethod": "GET",
          "response": {
            "$ref": "SearchResponse"
          },
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly"
          ],
          "path": "v1/people:searchContacts",
          "id": "people.people.searchContacts",
          "flatPath": "v1/people:searchContacts",
          "description": "Provides a list of contacts in the authenticated user's grouped contacts that matches the search query.",
          "parameters": {
            "readMask": {
              "type": "string",
              "location": "query",
              "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined",
              "format": "google-fieldmask"
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Required. The plain-text query for the request. The query is used to match prefix phrases of the fields on a person. For example, a person with name \"foo name\" matches queries such as \"f\", \"fo\", \"foo\", \"foo n\", \"nam\", etc., but not \"oo n\"."
            },
            "pageSize": {
              "type": "integer",
              "description": "Optional. The number of results to return.",
              "location": "query",
              "format": "int32"
            }
          }
        },
        "updateContactPhoto": {
          "request": {
            "$ref": "UpdateContactPhotoRequest"
          },
          "flatPath": "v1/people/{peopleId}:updateContactPhoto",
          "id": "people.people.updateContactPhoto",
          "description": "Update a contact's photo.",
          "httpMethod": "PATCH",
          "response": {
            "$ref": "UpdateContactPhotoResponse"
          },
          "parameters": {
            "resourceName": {
              "required": true,
              "type": "string",
              "description": "Required. Person resource name",
              "location": "path",
              "pattern": "^people/[^/]+$"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "parameterOrder": [
            "resourceName"
          ],
          "path": "v1/{+resourceName}:updateContactPhoto"
        },
        "deleteContactPhoto": {
          "parameterOrder": [
            "resourceName"
          ],
          "parameters": {
            "sources": {
              "enum": [
                "READ_SOURCE_TYPE_UNSPECIFIED",
                "READ_SOURCE_TYPE_PROFILE",
                "READ_SOURCE_TYPE_CONTACT",
                "READ_SOURCE_TYPE_DOMAIN_CONTACT"
              ],
              "description": "Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.",
              "repeated": true,
              "location": "query",
              "enumDescriptions": [
                "Unspecified.",
                "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
                "Returns SourceType.CONTACT.",
                "Returns SourceType.DOMAIN_CONTACT."
              ],
              "type": "string"
            },
            "personFields": {
              "description": "Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to empty if not set, which will skip the post mutate get. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined",
              "location": "query",
              "format": "google-fieldmask",
              "type": "string"
            },
            "resourceName": {
              "type": "string",
              "description": "Required. The resource name of the contact whose photo will be deleted.",
              "required": true,
              "pattern": "^people/[^/]+$",
              "location": "path"
            }
          },
          "flatPath": "v1/people/{peopleId}:deleteContactPhoto",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "description": "Delete a contact's photo.",
          "response": {
            "$ref": "DeleteContactPhotoResponse"
          },
          "path": "v1/{+resourceName}:deleteContactPhoto",
          "id": "people.people.deleteContactPhoto",
          "httpMethod": "DELETE"
        },
        "updateContact": {
          "response": {
            "$ref": "Person"
          },
          "path": "v1/{+resourceName}:updateContact",
          "id": "people.people.updateContact",
          "httpMethod": "PATCH",
          "scopes": [
            "https://www.googleapis.com/auth/contacts"
          ],
          "flatPath": "v1/people/{peopleId}:updateContact",
          "parameters": {
            "personFields": {
              "description": "Optional. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Defaults to all fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined",
              "type": "string",
              "format": "google-fieldmask",
              "location": "query"
            },
            "updatePersonFields": {
              "format": "google-fieldmask",
              "location": "query",
              "type": "string",
              "description": "Required. A field mask to restrict which fields on the person are updated. Multiple fields can be specified by separating them with commas. All updated fields will be replaced. Valid values are: * addresses * biographies * birthdays * calendarUrls * clientData * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * relations * sipAddresses * urls * userDefined"
            },
            "sources": {
              "enumDescriptions": [
                "Unspecified.",
                "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
                "Returns SourceType.CONTACT.",
                "Returns SourceType.DOMAIN_CONTACT."
              ],
              "description": "Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.",
              "enum": [
                "READ_SOURCE_TYPE_UNSPECIFIED",
                "READ_SOURCE_TYPE_PROFILE",
                "READ_SOURCE_TYPE_CONTACT",
                "READ_SOURCE_TYPE_DOMAIN_CONTACT"
              ],
              "repeated": true,
              "type": "string",
              "location": "query"
            },
            "resourceName": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The resource name for the person, assigned by the server. An ASCII string with a max length of 27 characters, in the form of `people/{person_id}`.",
              "pattern": "^people/[^/]+$"
            }
          },
          "request": {
            "$ref": "Person"
          },
          "description": "Update contact data for an existing contact person. Any non-contact data will not be modified. Any non-contact data in the person to update will be ignored. All fields specified in the `update_mask` will be replaced. The server returns a 400 error if `person.metadata.sources` is not specified for the contact to be updated or if there is no contact source. The server returns a 400 error with reason `\"failedPrecondition\"` if `person.metadata.sources.etag` is different than the contact's etag, which indicates the contact has changed since its data was read. Clients should get the latest person and merge their updates into the latest person. The server returns a 400 error if `memberships` are being updated and there are no contact group memberships specified on the person. The server returns a 400 error if more than one field is specified on a field that is a singleton for contact sources: * biographies * birthdays * genders * names",
          "parameterOrder": [
            "resourceName"
          ]
        },
        "get": {
          "response": {
            "$ref": "Person"
          },
          "id": "people.people.get",
          "flatPath": "v1/people/{peopleId}",
          "path": "v1/{+resourceName}",
          "description": "Provides information about a person by specifying a resource name. Use `people/me` to indicate the authenticated user. The request returns a 400 error if 'personFields' is not specified.",
          "httpMethod": "GET",
          "parameterOrder": [
            "resourceName"
          ],
          "parameters": {
            "personFields": {
              "format": "google-fieldmask",
              "location": "query",
              "description": "Required. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined",
              "type": "string"
            },
            "resourceName": {
              "pattern": "^people/[^/]+$",
              "required": true,
              "description": "Required. The resource name of the person to provide information about. - To get information about the authenticated user, specify `people/me`. - To get information about a google account, specify `people/{account_id}`. - To get information about a contact, specify the resource name that identifies the contact as returned by [`people.connections.list`](/people/api/rest/v1/people.connections/list).",
              "type": "string",
              "location": "path"
            },
            "requestMask.includeField": {
              "type": "string",
              "location": "query",
              "description": "Required. Comma-separated list of person fields to be included in the response. Each path should start with `person.`: for example, `person.names` or `person.photos`.",
              "format": "google-fieldmask"
            },
            "sources": {
              "enum": [
                "READ_SOURCE_TYPE_UNSPECIFIED",
                "READ_SOURCE_TYPE_PROFILE",
                "READ_SOURCE_TYPE_CONTACT",
                "READ_SOURCE_TYPE_DOMAIN_CONTACT"
              ],
              "location": "query",
              "description": "Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_PROFILE and READ_SOURCE_TYPE_CONTACT if not set.",
              "repeated": true,
              "type": "string",
              "enumDescriptions": [
                "Unspecified.",
                "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
                "Returns SourceType.CONTACT.",
                "Returns SourceType.DOMAIN_CONTACT."
              ]
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.readonly",
            "https://www.googleapis.com/auth/directory.readonly",
            "https://www.googleapis.com/auth/user.addresses.read",
            "https://www.googleapis.com/auth/user.birthday.read",
            "https://www.googleapis.com/auth/user.emails.read",
            "https://www.googleapis.com/auth/user.gender.read",
            "https://www.googleapis.com/auth/user.organization.read",
            "https://www.googleapis.com/auth/user.phonenumbers.read",
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile"
          ]
        },
        "listDirectoryPeople": {
          "id": "people.people.listDirectoryPeople",
          "path": "v1/people:listDirectoryPeople",
          "scopes": [
            "https://www.googleapis.com/auth/directory.readonly"
          ],
          "flatPath": "v1/people:listDirectoryPeople",
          "parameters": {
            "syncToken": {
              "type": "string",
              "description": "Optional. A sync token, received from a previous `ListDirectoryPeople` call. Provide this to retrieve only the resources changed since the last request. When syncing, all other parameters provided to `ListDirectoryPeople` must match the call that provided the sync token.",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "description": "Optional. A page token, received from a previous `ListDirectoryPeople` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListDirectoryPeople` must match the call that provided the page token.",
              "location": "query"
            },
            "pageSize": {
              "description": "Optional. The number of people to include in the response. Valid values are between 1 and 1000, inclusive. Defaults to 100 if not set or set to 0.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "sources": {
              "enumDescriptions": [
                "Unspecified.",
                "G Suite domain shared contact.",
                "G Suite domain profile."
              ],
              "repeated": true,
              "location": "query",
              "type": "string",
              "enum": [
                "DIRECTORY_SOURCE_TYPE_UNSPECIFIED",
                "DIRECTORY_SOURCE_TYPE_DOMAIN_CONTACT",
                "DIRECTORY_SOURCE_TYPE_DOMAIN_PROFILE"
              ],
              "description": "Required. Directory sources to return."
            },
            "mergeSources": {
              "enum": [
                "DIRECTORY_MERGE_SOURCE_TYPE_UNSPECIFIED",
                "DIRECTORY_MERGE_SOURCE_TYPE_CONTACT"
              ],
              "description": "Optional. Additional data to merge into the directory sources if they are connected through verified join keys such as email addresses or phone numbers.",
              "repeated": true,
              "location": "query",
              "enumDescriptions": [
                "Unspecified.",
                "User owned contact."
              ],
              "type": "string"
            },
            "readMask": {
              "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined",
              "type": "string",
              "format": "google-fieldmask",
              "location": "query"
            },
            "requestSyncToken": {
              "type": "boolean",
              "location": "query",
              "description": "Optional. Whether the response should include `next_sync_token`, which can be used to get all changes since the last request. For subsequent sync requests use the `sync_token` param instead."
            }
          },
          "response": {
            "$ref": "ListDirectoryPeopleResponse"
          },
          "parameterOrder": [],
          "description": "Provides a list of domain profiles and domain contacts in the authenticated user's domain directory.",
          "httpMethod": "GET"
        }
      },
      "resources": {
        "connections": {
          "methods": {
            "list": {
              "flatPath": "v1/people/{peopleId}/connections",
              "parameterOrder": [
                "resourceName"
              ],
              "httpMethod": "GET",
              "parameters": {
                "pageToken": {
                  "description": "Optional. A page token, received from a previous `ListConnections` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListConnections` must match the call that provided the page token.",
                  "location": "query",
                  "type": "string"
                },
                "requestMask.includeField": {
                  "type": "string",
                  "location": "query",
                  "format": "google-fieldmask",
                  "description": "Required. Comma-separated list of person fields to be included in the response. Each path should start with `person.`: for example, `person.names` or `person.photos`."
                },
                "sources": {
                  "location": "query",
                  "description": "Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.",
                  "type": "string",
                  "enumDescriptions": [
                    "Unspecified.",
                    "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
                    "Returns SourceType.CONTACT.",
                    "Returns SourceType.DOMAIN_CONTACT."
                  ],
                  "enum": [
                    "READ_SOURCE_TYPE_UNSPECIFIED",
                    "READ_SOURCE_TYPE_PROFILE",
                    "READ_SOURCE_TYPE_CONTACT",
                    "READ_SOURCE_TYPE_DOMAIN_CONTACT"
                  ],
                  "repeated": true
                },
                "syncToken": {
                  "type": "string",
                  "description": "Optional. A sync token, received from a previous `ListConnections` call. Provide this to retrieve only the resources changed since the last request. When syncing, all other parameters provided to `ListConnections` except `page_size` and `page_token` must match the initial call that provided the sync token. Sync tokens expire after seven days, after which a full sync request without a `sync_token` should be made.",
                  "location": "query"
                },
                "requestSyncToken": {
                  "type": "boolean",
                  "location": "query",
                  "description": "Optional. Whether the response should include `next_sync_token` on the last page, which can be used to get all changes since the last request. For subsequent sync requests use the `sync_token` param instead. Initial full sync requests that specify `request_sync_token` and do not specify `sync_token` have an additional rate limit per user. Each client should generally only be doing a full sync once every few days per user and so should not hit this limit."
                },
                "sortOrder": {
                  "description": "Optional. The order in which the connections should be sorted. Defaults to `LAST_MODIFIED_ASCENDING`.",
                  "enum": [
                    "LAST_MODIFIED_ASCENDING",
                    "LAST_MODIFIED_DESCENDING",
                    "FIRST_NAME_ASCENDING",
                    "LAST_NAME_ASCENDING"
                  ],
                  "type": "string",
                  "enumDescriptions": [
                    "Sort people by when they were changed; older entries first.",
                    "Sort people by when they were changed; newer entries first.",
                    "Sort people by first name.",
                    "Sort people by last name."
                  ],
                  "location": "query"
                },
                "resourceName": {
                  "type": "string",
                  "pattern": "^people/[^/]+$",
                  "required": true,
                  "description": "Required. The resource name to return connections for. Only `people/me` is valid.",
                  "location": "path"
                },
                "personFields": {
                  "format": "google-fieldmask",
                  "type": "string",
                  "location": "query",
                  "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined"
                },
                "pageSize": {
                  "type": "integer",
                  "description": "Optional. The number of connections to include in the response. Valid values are between 1 and 1000, inclusive. Defaults to 100 if not set or set to 0.",
                  "location": "query",
                  "format": "int32"
                }
              },
              "description": "Provides a list of the authenticated user's contacts. The request returns a 400 error if `personFields` is not specified. The request returns a 410 error if `sync_token` is specified and is expired. Sync tokens expire after 7 days to prevent data drift between clients and the server. To handle a sync token expired error, a request should be sent without `sync_token` to get all contacts.",
              "id": "people.people.connections.list",
              "path": "v1/{+resourceName}/connections",
              "scopes": [
                "https://www.googleapis.com/auth/contacts",
                "https://www.googleapis.com/auth/contacts.readonly"
              ],
              "response": {
                "$ref": "ListConnectionsResponse"
              }
            }
          }
        }
      }
    },
    "otherContacts": {
      "methods": {
        "list": {
          "id": "people.otherContacts.list",
          "flatPath": "v1/otherContacts",
          "path": "v1/otherContacts",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/contacts.other.readonly"
          ],
          "response": {
            "$ref": "ListOtherContactsResponse"
          },
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Optional. A page token, received from a previous `ListOtherContacts` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListOtherContacts` must match the call that provided the page token."
            },
            "requestSyncToken": {
              "location": "query",
              "description": "Optional. Whether the response should include `next_sync_token`, which can be used to get all changes since the last request. For subsequent sync requests use the `sync_token` param instead. Initial sync requests that specify `request_sync_token` have an additional rate limit.",
              "type": "boolean"
            },
            "syncToken": {
              "location": "query",
              "type": "string",
              "description": "Optional. A sync token, received from a previous `ListOtherContacts` call. Provide this to retrieve only the resources changed since the last request. Sync requests that specify `sync_token` have an additional rate limit. When syncing, all other parameters provided to `ListOtherContacts` must match the call that provided the sync token."
            },
            "readMask": {
              "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * emailAddresses * names * phoneNumbers",
              "type": "string",
              "location": "query",
              "format": "google-fieldmask"
            },
            "pageSize": {
              "type": "integer",
              "location": "query",
              "format": "int32",
              "description": "Optional. The number of \"Other contacts\" to include in the response. Valid values are between 1 and 1000, inclusive. Defaults to 100 if not set or set to 0."
            }
          },
          "parameterOrder": [],
          "description": "List all \"Other contacts\", that is contacts that are not in a contact group. \"Other contacts\" are typically auto created contacts from interactions."
        },
        "copyOtherContactToMyContactsGroup": {
          "response": {
            "$ref": "Person"
          },
          "id": "people.otherContacts.copyOtherContactToMyContactsGroup",
          "httpMethod": "POST",
          "flatPath": "v1/otherContacts/{otherContactsId}:copyOtherContactToMyContactsGroup",
          "parameterOrder": [
            "resourceName"
          ],
          "description": "Copies an \"Other contact\" to a new contact in the user's \"myContacts\" group",
          "scopes": [
            "https://www.googleapis.com/auth/contacts",
            "https://www.googleapis.com/auth/contacts.other.readonly"
          ],
          "path": "v1/{+resourceName}:copyOtherContactToMyContactsGroup",
          "parameters": {
            "resourceName": {
              "type": "string",
              "pattern": "^otherContacts/[^/]+$",
              "description": "Required. The resource name of the \"Other contact\" to copy.",
              "location": "path",
              "required": true
            }
          },
          "request": {
            "$ref": "CopyOtherContactToMyContactsGroupRequest"
          }
        },
        "search": {
          "path": "v1/otherContacts:search",
          "flatPath": "v1/otherContacts:search",
          "parameters": {
            "readMask": {
              "format": "google-fieldmask",
              "description": "Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * emailAddresses * names * phoneNumbers",
              "type": "string",
              "location": "query"
            },
            "query": {
              "location": "query",
              "description": "Required. The plain-text query for the request. The query is used to match prefix phrases of the fields on a person. For example, a person with name \"foo name\" matches queries such as \"f\", \"fo\", \"foo\", \"foo n\", \"nam\", etc., but not \"oo n\".",
              "type": "string"
            },
            "pageSize": {
              "format": "int32",
              "description": "Optional. The number of results to return. Defaults to 10 if field is not set, or set to 0.",
              "type": "integer",
              "location": "query"
            }
          },
          "parameterOrder": [],
          "httpMethod": "GET",
          "description": "Provides a list of contacts in the authenticated user's other contacts that matches the search query.",
          "response": {
            "$ref": "SearchResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/contacts.other.readonly"
          ],
          "id": "people.otherContacts.search"
        }
      }
    }
  },
  "batchPath": "batch",
  "parameters": {
    "oauth_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth 2.0 token for the current user."
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "prettyPrint": {
      "location": "query",
      "default": "true",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks."
    },
    "$.xgafv": {
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "type": "string",
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ]
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "callback": {
      "description": "JSONP",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string",
      "location": "query"
    },
    "access_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth access token."
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "default": "json",
      "location": "query",
      "description": "Data format for response.",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    }
  },
  "mtlsRootUrl": "https://people.mtls.googleapis.com/",
  "ownerDomain": "google.com",
  "version": "v1",
  "basePath": "",
  "protocol": "rest",
  "id": "people:v1",
  "documentationLink": "https://developers.google.com/people/",
  "schemas": {
    "ContactGroupMembership": {
      "id": "ContactGroupMembership",
      "properties": {
        "contactGroupId": {
          "type": "string",
          "description": "Output only. The contact group ID for the contact group membership.",
          "readOnly": true
        },
        "contactGroupResourceName": {
          "description": "The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`. Only contact_group_resource_name can be used for modifying memberships. Any contact group membership can be removed, but only user group or \"myContacts\" or \"starred\" system groups memberships can be added. A contact must always have at least one contact group membership.",
          "type": "string"
        }
      },
      "description": "A Google contact group membership.",
      "type": "object"
    },
    "Locale": {
      "properties": {
        "metadata": {
          "description": "Metadata about the locale.",
          "$ref": "FieldMetadata"
        },
        "value": {
          "type": "string",
          "description": "The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language tag representing the locale."
        }
      },
      "type": "object",
      "id": "Locale",
      "description": "A person's locale preference."
    },
    "CoverPhoto": {
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the cover photo."
        },
        "default": {
          "description": "True if the cover photo is the default cover photo; false if the cover photo is a user-provided cover photo.",
          "type": "boolean"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the cover photo."
        }
      },
      "type": "object",
      "description": "A person's cover photo. A large image shown on the person's profile page that represents who they are or what they care about.",
      "id": "CoverPhoto"
    },
    "Event": {
      "id": "Event",
      "type": "object",
      "description": "An event related to the person.",
      "properties": {
        "date": {
          "description": "The date of the event.",
          "$ref": "Date"
        },
        "type": {
          "type": "string",
          "description": "The type of the event. The type can be custom or one of these predefined values: * `anniversary` * `other`"
        },
        "formattedType": {
          "readOnly": true,
          "description": "Output only. The type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the event.",
          "$ref": "FieldMetadata"
        }
      }
    },
    "Tagline": {
      "id": "Tagline",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the tagline."
        },
        "value": {
          "type": "string",
          "description": "The tagline."
        }
      },
      "type": "object",
      "description": "**DEPRECATED**: No data will be returned A brief one-line description of the person."
    },
    "ImClient": {
      "description": "A person's instant messaging client.",
      "type": "object",
      "id": "ImClient",
      "properties": {
        "username": {
          "description": "The user name used in the IM client.",
          "type": "string"
        },
        "formattedType": {
          "description": "Output only. The type of the IM client translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string",
          "readOnly": true
        },
        "protocol": {
          "type": "string",
          "description": "The protocol of the IM client. The protocol can be custom or one of these predefined values: * `aim` * `msn` * `yahoo` * `skype` * `qq` * `googleTalk` * `icq` * `jabber` * `netMeeting`"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the IM client."
        },
        "type": {
          "type": "string",
          "description": "The type of the IM client. The type can be custom or one of these predefined values: * `home` * `work` * `other`"
        },
        "formattedProtocol": {
          "readOnly": true,
          "description": "Output only. The protocol of the IM client formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        }
      }
    },
    "Name": {
      "id": "Name",
      "description": "A person's name. If the name is a mononym, the family name is empty.",
      "type": "object",
      "properties": {
        "phoneticFamilyName": {
          "description": "The family name spelled as it sounds.",
          "type": "string"
        },
        "givenName": {
          "type": "string",
          "description": "The given name."
        },
        "phoneticHonorificPrefix": {
          "description": "The honorific prefixes spelled as they sound.",
          "type": "string"
        },
        "phoneticHonorificSuffix": {
          "description": "The honorific suffixes spelled as they sound.",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the name.",
          "$ref": "FieldMetadata"
        },
        "phoneticFullName": {
          "description": "The full name spelled as it sounds.",
          "type": "string"
        },
        "displayNameLastFirst": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The display name with the last name first formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header."
        },
        "familyName": {
          "description": "The family name.",
          "type": "string"
        },
        "honorificPrefix": {
          "type": "string",
          "description": "The honorific prefixes, such as `Mrs.` or `Dr.`"
        },
        "unstructuredName": {
          "description": "The free form name value.",
          "type": "string"
        },
        "honorificSuffix": {
          "description": "The honorific suffixes, such as `Jr.`",
          "type": "string"
        },
        "phoneticMiddleName": {
          "description": "The middle name(s) spelled as they sound.",
          "type": "string"
        },
        "middleName": {
          "description": "The middle name(s).",
          "type": "string"
        },
        "phoneticGivenName": {
          "type": "string",
          "description": "The given name spelled as it sounds."
        },
        "displayName": {
          "description": "Output only. The display name formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Date": {
      "id": "Date",
      "type": "object",
      "properties": {
        "year": {
          "type": "integer",
          "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
          "format": "int32"
        },
        "month": {
          "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
          "format": "int32",
          "type": "integer"
        },
        "day": {
          "type": "integer",
          "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
          "format": "int32"
        }
      },
      "description": "Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date Related types are google.type.TimeOfDay and `google.protobuf.Timestamp`."
    },
    "ContactGroupResponse": {
      "properties": {
        "status": {
          "description": "The status of the response.",
          "$ref": "Status"
        },
        "contactGroup": {
          "$ref": "ContactGroup",
          "description": "The contact group."
        },
        "requestedResourceName": {
          "type": "string",
          "description": "The original requested resource name."
        }
      },
      "id": "ContactGroupResponse",
      "type": "object",
      "description": "The response for a specific contact group."
    },
    "Url": {
      "properties": {
        "value": {
          "description": "The URL.",
          "type": "string"
        },
        "formattedType": {
          "readOnly": true,
          "description": "Output only. The type of the URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the URL."
        },
        "type": {
          "description": "The type of the URL. The type can be custom or one of these predefined values: * `home` * `work` * `blog` * `profile` * `homePage` * `ftp` * `reservations` * `appInstallPage`: website for a Currents application. * `other`",
          "type": "string"
        }
      },
      "description": "A person's associated URLs.",
      "type": "object",
      "id": "Url"
    },
    "SearchResponse": {
      "description": "The response to a search request for the authenticated user, given a query.",
      "type": "object",
      "properties": {
        "results": {
          "items": {
            "$ref": "SearchResult"
          },
          "type": "array",
          "description": "The results of the request."
        }
      },
      "id": "SearchResponse"
    },
    "Birthday": {
      "id": "Birthday",
      "type": "object",
      "description": "A person's birthday. At least one of the `date` and `text` fields are specified. The `date` and `text` fields typically represent the same date, but are not guaranteed to.",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the birthday."
        },
        "text": {
          "type": "string",
          "description": "A free-form string representing the user's birthday."
        },
        "date": {
          "$ref": "Date",
          "description": "The date of the birthday."
        }
      }
    },
    "CalendarUrl": {
      "description": "A person's calendar URL.",
      "id": "CalendarUrl",
      "type": "object",
      "properties": {
        "formattedType": {
          "readOnly": true,
          "description": "Output only. The type of the calendar URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        },
        "type": {
          "description": "The type of the calendar URL. The type can be custom or one of these predefined values: * `home` * `freeBusy` * `work`",
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "The calendar URL."
        },
        "metadata": {
          "description": "Metadata about the calendar URL.",
          "$ref": "FieldMetadata"
        }
      }
    },
    "Skill": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The skill; for example, `underwater basket weaving`."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the skill."
        }
      },
      "type": "object",
      "description": "A skill that the person has.",
      "id": "Skill"
    },
    "CreateContactGroupRequest": {
      "properties": {
        "readGroupFields": {
          "description": "Optional. A field mask to restrict which fields on the group are returned. Defaults to `metadata`, `groupType`, and `name` if not set or set to empty. Valid fields are: * clientData * groupType * metadata * name",
          "type": "string",
          "format": "google-fieldmask"
        },
        "contactGroup": {
          "$ref": "ContactGroup",
          "description": "Required. The contact group to create."
        }
      },
      "description": "A request to create a new contact group.",
      "type": "object",
      "id": "CreateContactGroupRequest"
    },
    "SearchResult": {
      "type": "object",
      "properties": {
        "person": {
          "$ref": "Person",
          "description": "The matched Person."
        }
      },
      "id": "SearchResult",
      "description": "A result of a search query."
    },
    "CopyOtherContactToMyContactsGroupRequest": {
      "id": "CopyOtherContactToMyContactsGroupRequest",
      "properties": {
        "sources": {
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Unspecified.",
              "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
              "Returns SourceType.CONTACT.",
              "Returns SourceType.DOMAIN_CONTACT."
            ],
            "enum": [
              "READ_SOURCE_TYPE_UNSPECIFIED",
              "READ_SOURCE_TYPE_PROFILE",
              "READ_SOURCE_TYPE_CONTACT",
              "READ_SOURCE_TYPE_DOMAIN_CONTACT"
            ]
          },
          "type": "array",
          "description": "Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set."
        },
        "readMask": {
          "description": "Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to the copy mask with metadata and membership fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined",
          "type": "string",
          "format": "google-fieldmask"
        },
        "copyMask": {
          "description": "Required. A field mask to restrict which fields are copied into the new contact. Valid values are: * emailAddresses * names * phoneNumbers",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "description": "A request to copy an \"Other contact\" to my contacts group.",
      "type": "object"
    },
    "ContactGroup": {
      "properties": {
        "etag": {
          "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.",
          "type": "string"
        },
        "formattedName": {
          "description": "Output only. The name translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale for system groups names. Group names set by the owner are the same as name.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "The contact group name set by the group owner or a system provided name for system groups.",
          "type": "string"
        },
        "memberResourceNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. The list of contact person resource names that are members of the contact group. The field is only populated for GET requests and will only return as many members as `maxMembers` in the get request.",
          "readOnly": true
        },
        "memberCount": {
          "description": "Output only. The total number of contacts in the group irrespective of max members in specified in the request.",
          "readOnly": true,
          "format": "int32",
          "type": "integer"
        },
        "metadata": {
          "readOnly": true,
          "$ref": "ContactGroupMetadata",
          "description": "Output only. Metadata about the contact group."
        },
        "groupType": {
          "enum": [
            "GROUP_TYPE_UNSPECIFIED",
            "USER_CONTACT_GROUP",
            "SYSTEM_CONTACT_GROUP"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "User defined contact group.",
            "System defined contact group."
          ],
          "type": "string",
          "description": "Output only. The contact group type.",
          "readOnly": true
        },
        "clientData": {
          "items": {
            "$ref": "GroupClientData"
          },
          "type": "array",
          "description": "The group's client data."
        },
        "resourceName": {
          "description": "The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`.",
          "type": "string"
        }
      },
      "description": "A contact group.",
      "type": "object",
      "id": "ContactGroup"
    },
    "Organization": {
      "properties": {
        "symbol": {
          "description": "The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym.",
          "type": "string"
        },
        "formattedType": {
          "description": "Output only. The type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "readOnly": true,
          "type": "string"
        },
        "startDate": {
          "$ref": "Date",
          "description": "The start date when the person joined the organization."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the organization."
        },
        "jobDescription": {
          "type": "string",
          "description": "The person's job description at the organization."
        },
        "location": {
          "type": "string",
          "description": "The location of the organization office the person works at."
        },
        "domain": {
          "type": "string",
          "description": "The domain name associated with the organization; for example, `google.com`."
        },
        "name": {
          "description": "The name of the organization.",
          "type": "string"
        },
        "phoneticName": {
          "description": "The phonetic name of the organization.",
          "type": "string"
        },
        "endDate": {
          "$ref": "Date",
          "description": "The end date when the person left the organization."
        },
        "current": {
          "type": "boolean",
          "description": "True if the organization is the person's current organization; false if the organization is a past organization."
        },
        "department": {
          "description": "The person's department at the organization.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "The person's job title at the organization."
        },
        "type": {
          "description": "The type of the organization. The type can be custom or one of these predefined values: * `work` * `school`",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Organization",
      "description": "A person's past or current organization. Overlapping date ranges are permitted."
    },
    "BatchGetContactGroupsResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "ContactGroupResponse"
          },
          "description": "The list of responses for each requested contact group resource."
        }
      },
      "id": "BatchGetContactGroupsResponse",
      "description": "The response to a batch get contact groups request."
    },
    "Biography": {
      "type": "object",
      "description": "A person's short biography.",
      "id": "Biography",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the biography."
        },
        "value": {
          "description": "The short biography.",
          "type": "string"
        },
        "contentType": {
          "type": "string",
          "description": "The content type of the biography.",
          "enumDescriptions": [
            "Unspecified.",
            "Plain text.",
            "HTML text."
          ],
          "enum": [
            "CONTENT_TYPE_UNSPECIFIED",
            "TEXT_PLAIN",
            "TEXT_HTML"
          ]
        }
      }
    },
    "ListOtherContactsResponse": {
      "description": "The response to a request for the authenticated user's \"Other contacts\".",
      "type": "object",
      "id": "ListOtherContactsResponse",
      "properties": {
        "nextSyncToken": {
          "type": "string",
          "description": "A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token."
        },
        "otherContacts": {
          "items": {
            "$ref": "Person"
          },
          "type": "array",
          "description": "The list of \"Other contacts\" returned as Person resources. \"Other contacts\" support a limited subset of fields. See ListOtherContactsRequest.request_mask for more detailed information."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        }
      }
    },
    "ContactGroupMetadata": {
      "id": "ContactGroupMetadata",
      "description": "The metadata about a contact group.",
      "type": "object",
      "properties": {
        "updateTime": {
          "readOnly": true,
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. The time the group was last updated."
        },
        "deleted": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. True if the contact group resource has been deleted. Populated only for [`ListContactGroups`](/people/api/rest/v1/contactgroups/list) requests that include a sync token."
        }
      }
    },
    "FieldMetadata": {
      "type": "object",
      "properties": {
        "primary": {
          "description": "True if the field is the primary field; false if the field is a secondary field.",
          "type": "boolean"
        },
        "verified": {
          "readOnly": true,
          "description": "Output only. True if the field is verified; false if the field is unverified. A verified field is typically a name, email address, phone number, or website that has been confirmed to be owned by the person.",
          "type": "boolean"
        },
        "source": {
          "$ref": "Source",
          "description": "The source of the field."
        }
      },
      "description": "Metadata about a field.",
      "id": "FieldMetadata"
    },
    "SipAddress": {
      "type": "object",
      "properties": {
        "formattedType": {
          "description": "Output only. The type of the SIP address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string",
          "readOnly": true
        },
        "metadata": {
          "description": "Metadata about the SIP address.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "description": "The type of the SIP address. The type can be custom or or one of these predefined values: * `home` * `work` * `mobile` * `other`",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The SIP address in the [RFC 3261 19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI format."
        }
      },
      "description": "A person's SIP address. Session Initial Protocol addresses are used for VoIP communications to make voice or video calls over the internet.",
      "id": "SipAddress"
    },
    "Person": {
      "type": "object",
      "description": "Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.",
      "id": "Person",
      "properties": {
        "memberships": {
          "type": "array",
          "description": "The person's group memberships.",
          "items": {
            "$ref": "Membership"
          }
        },
        "phoneNumbers": {
          "items": {
            "$ref": "PhoneNumber"
          },
          "description": "The person's phone numbers.",
          "type": "array"
        },
        "ageRange": {
          "enumDescriptions": [
            "Unspecified.",
            "Younger than eighteen.",
            "Between eighteen and twenty.",
            "Twenty-one and older."
          ],
          "description": "Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.",
          "type": "string",
          "readOnly": true,
          "enum": [
            "AGE_RANGE_UNSPECIFIED",
            "LESS_THAN_EIGHTEEN",
            "EIGHTEEN_TO_TWENTY",
            "TWENTY_ONE_OR_OLDER"
          ]
        },
        "residences": {
          "description": "**DEPRECATED**: (Please use `person.locations` instead) The person's residences.",
          "items": {
            "$ref": "Residence"
          },
          "type": "array"
        },
        "metadata": {
          "description": "Output only. Metadata about the person.",
          "$ref": "PersonMetadata",
          "readOnly": true
        },
        "userDefined": {
          "description": "The person's user defined data.",
          "items": {
            "$ref": "UserDefined"
          },
          "type": "array"
        },
        "events": {
          "description": "The person's events.",
          "items": {
            "$ref": "Event"
          },
          "type": "array"
        },
        "organizations": {
          "description": "The person's past or current organizations.",
          "items": {
            "$ref": "Organization"
          },
          "type": "array"
        },
        "relationshipInterests": {
          "description": "Output only. **DEPRECATED**: No data will be returned The person's relationship interests.",
          "items": {
            "$ref": "RelationshipInterest"
          },
          "type": "array",
          "readOnly": true
        },
        "genders": {
          "type": "array",
          "items": {
            "$ref": "Gender"
          },
          "description": "The person's genders. This field is a singleton for contact sources."
        },
        "interests": {
          "items": {
            "$ref": "Interest"
          },
          "type": "array",
          "description": "The person's interests."
        },
        "nicknames": {
          "type": "array",
          "description": "The person's nicknames.",
          "items": {
            "$ref": "Nickname"
          }
        },
        "skills": {
          "description": "The person's skills.",
          "type": "array",
          "items": {
            "$ref": "Skill"
          }
        },
        "urls": {
          "items": {
            "$ref": "Url"
          },
          "type": "array",
          "description": "The person's associated URLs."
        },
        "names": {
          "type": "array",
          "items": {
            "$ref": "Name"
          },
          "description": "The person's names. This field is a singleton for contact sources."
        },
        "addresses": {
          "items": {
            "$ref": "Address"
          },
          "description": "The person's street addresses.",
          "type": "array"
        },
        "emailAddresses": {
          "items": {
            "$ref": "EmailAddress"
          },
          "type": "array",
          "description": "The person's email addresses."
        },
        "fileAses": {
          "description": "The person's file-ases.",
          "items": {
            "$ref": "FileAs"
          },
          "type": "array"
        },
        "relations": {
          "description": "The person's relations.",
          "items": {
            "$ref": "Relation"
          },
          "type": "array"
        },
        "clientData": {
          "type": "array",
          "items": {
            "$ref": "ClientData"
          },
          "description": "The person's client data."
        },
        "miscKeywords": {
          "type": "array",
          "description": "The person's miscellaneous keywords.",
          "items": {
            "$ref": "MiscKeyword"
          }
        },
        "biographies": {
          "items": {
            "$ref": "Biography"
          },
          "description": "The person's biographies. This field is a singleton for contact sources.",
          "type": "array"
        },
        "etag": {
          "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.",
          "type": "string"
        },
        "sipAddresses": {
          "type": "array",
          "items": {
            "$ref": "SipAddress"
          },
          "description": "The person's SIP addresses."
        },
        "locations": {
          "description": "The person's locations.",
          "type": "array",
          "items": {
            "$ref": "Location"
          }
        },
        "braggingRights": {
          "description": "**DEPRECATED**: No data will be returned The person's bragging rights.",
          "type": "array",
          "items": {
            "$ref": "BraggingRights"
          }
        },
        "imClients": {
          "type": "array",
          "description": "The person's instant messaging clients.",
          "items": {
            "$ref": "ImClient"
          }
        },
        "photos": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "Photo"
          },
          "description": "Output only. The person's photos."
        },
        "relationshipStatuses": {
          "readOnly": true,
          "type": "array",
          "description": "Output only. **DEPRECATED**: No data will be returned The person's relationship statuses.",
          "items": {
            "$ref": "RelationshipStatus"
          }
        },
        "resourceName": {
          "type": "string",
          "description": "The resource name for the person, assigned by the server. An ASCII string with a max length of 27 characters, in the form of `people/{person_id}`."
        },
        "coverPhotos": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "CoverPhoto"
          },
          "description": "Output only. The person's cover photos."
        },
        "taglines": {
          "description": "Output only. **DEPRECATED**: No data will be returned The person's taglines.",
          "items": {
            "$ref": "Tagline"
          },
          "readOnly": true,
          "type": "array"
        },
        "externalIds": {
          "items": {
            "$ref": "ExternalId"
          },
          "type": "array",
          "description": "The person's external IDs."
        },
        "calendarUrls": {
          "items": {
            "$ref": "CalendarUrl"
          },
          "type": "array",
          "description": "The person's calendar URLs."
        },
        "locales": {
          "description": "The person's locale preferences.",
          "items": {
            "$ref": "Locale"
          },
          "type": "array"
        },
        "occupations": {
          "type": "array",
          "description": "The person's occupations.",
          "items": {
            "$ref": "Occupation"
          }
        },
        "birthdays": {
          "items": {
            "$ref": "Birthday"
          },
          "description": "The person's birthdays. This field is a singleton for contact sources.",
          "type": "array"
        },
        "ageRanges": {
          "description": "Output only. The person's age ranges.",
          "type": "array",
          "items": {
            "$ref": "AgeRangeType"
          },
          "readOnly": true
        }
      }
    },
    "ClientData": {
      "properties": {
        "key": {
          "description": "The client specified key of the client data.",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the client data.",
          "$ref": "FieldMetadata"
        },
        "value": {
          "description": "The client specified value of the client data.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ClientData",
      "description": "Arbitrary client data that is populated by clients. Duplicate keys and values are allowed."
    },
    "Occupation": {
      "description": "A person's occupation.",
      "id": "Occupation",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the occupation."
        },
        "value": {
          "type": "string",
          "description": "The occupation; for example, `carpenter`."
        }
      }
    },
    "BraggingRights": {
      "description": "**DEPRECATED**: No data will be returned A person's bragging rights.",
      "type": "object",
      "id": "BraggingRights",
      "properties": {
        "value": {
          "description": "The bragging rights; for example, `climbed mount everest`.",
          "type": "string"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the bragging rights."
        }
      }
    },
    "UpdateContactPhotoResponse": {
      "description": "The response for updating a contact's photo.",
      "properties": {
        "person": {
          "$ref": "Person",
          "description": "The updated person, if person_fields is set in the UpdateContactPhotoRequest; otherwise this will be unset."
        }
      },
      "type": "object",
      "id": "UpdateContactPhotoResponse"
    },
    "SearchDirectoryPeopleResponse": {
      "id": "SearchDirectoryPeopleResponse",
      "properties": {
        "people": {
          "type": "array",
          "description": "The list of people in the domain directory that match the query.",
          "items": {
            "$ref": "Person"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of items in the list without pagination."
        }
      },
      "type": "object",
      "description": "The response to a request for people in the authenticated user's domain directory that match the specified query."
    },
    "ExternalId": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the external ID."
        },
        "type": {
          "type": "string",
          "description": "The type of the external ID. The type can be custom or one of these predefined values: * `account` * `customer` * `loginId` * `network` * `organization`"
        },
        "value": {
          "description": "The value of the external ID.",
          "type": "string"
        },
        "formattedType": {
          "type": "string",
          "description": "Output only. The type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "readOnly": true
        }
      },
      "description": "An identifier from an external entity related to the person.",
      "id": "ExternalId"
    },
    "Status": {
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          }
        },
        "code": {
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer"
        }
      },
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "id": "Status"
    },
    "ProfileMetadata": {
      "properties": {
        "userTypes": {
          "readOnly": true,
          "description": "Output only. The user types.",
          "type": "array",
          "items": {
            "enum": [
              "USER_TYPE_UNKNOWN",
              "GOOGLE_USER",
              "GPLUS_USER",
              "GOOGLE_APPS_USER"
            ],
            "type": "string",
            "enumDescriptions": [
              "The user type is not known.",
              "The user is a Google user.",
              "The user is a Currents user.",
              "The user is a G Suite user."
            ]
          }
        },
        "objectType": {
          "readOnly": true,
          "enum": [
            "OBJECT_TYPE_UNSPECIFIED",
            "PERSON",
            "PAGE"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Person.",
            "[Currents Page.](https://gsuite.google.com/products/currents/)"
          ],
          "description": "Output only. The profile object type.",
          "type": "string"
        }
      },
      "id": "ProfileMetadata",
      "type": "object",
      "description": "The metadata about a profile."
    },
    "DeleteContactPhotoResponse": {
      "type": "object",
      "properties": {
        "person": {
          "$ref": "Person",
          "description": "The updated person, if person_fields is set in the DeleteContactPhotoRequest; otherwise this will be unset."
        }
      },
      "id": "DeleteContactPhotoResponse",
      "description": "The response for deleting a contact's photo."
    },
    "ListContactGroupsResponse": {
      "id": "ListContactGroupsResponse",
      "description": "The response to a list contact groups request.",
      "type": "object",
      "properties": {
        "totalItems": {
          "format": "int32",
          "type": "integer",
          "description": "The total number of items in the list without pagination."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token that can be used to retrieve the next page of results."
        },
        "nextSyncToken": {
          "description": "The token that can be used to retrieve changes since the last request.",
          "type": "string"
        },
        "contactGroups": {
          "items": {
            "$ref": "ContactGroup"
          },
          "type": "array",
          "description": "The list of contact groups. Members of the contact groups are not populated."
        }
      }
    },
    "MiscKeyword": {
      "id": "MiscKeyword",
      "description": "A person's miscellaneous keyword.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the miscellaneous keyword."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the miscellaneous keyword."
        },
        "formattedType": {
          "type": "string",
          "description": "Output only. The type of the miscellaneous keyword translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The miscellaneous keyword type.",
          "enum": [
            "TYPE_UNSPECIFIED",
            "OUTLOOK_BILLING_INFORMATION",
            "OUTLOOK_DIRECTORY_SERVER",
            "OUTLOOK_KEYWORD",
            "OUTLOOK_MILEAGE",
            "OUTLOOK_PRIORITY",
            "OUTLOOK_SENSITIVITY",
            "OUTLOOK_SUBJECT",
            "OUTLOOK_USER",
            "HOME",
            "WORK",
            "OTHER"
          ],
          "enumDescriptions": [
            "Unspecified.",
            "Outlook field for billing information.",
            "Outlook field for directory server.",
            "Outlook field for keyword.",
            "Outlook field for mileage.",
            "Outlook field for priority.",
            "Outlook field for sensitivity.",
            "Outlook field for subject.",
            "Outlook field for user.",
            "Home.",
            "Work.",
            "Other."
          ]
        }
      },
      "type": "object"
    },
    "PersonMetadata": {
      "description": "The metadata about a person.",
      "id": "PersonMetadata",
      "properties": {
        "sources": {
          "description": "The sources of data for the person.",
          "items": {
            "$ref": "Source"
          },
          "type": "array"
        },
        "linkedPeopleResourceNames": {
          "readOnly": true,
          "description": "Output only. Resource names of people linked to this resource.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "objectType": {
          "readOnly": true,
          "description": "Output only. **DEPRECATED** (Please use `person.metadata.sources.profileMetadata.objectType` instead) The type of the person object.",
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "Person.",
            "[Currents Page.](https://gsuite.google.com/products/currents/)"
          ],
          "enum": [
            "OBJECT_TYPE_UNSPECIFIED",
            "PERSON",
            "PAGE"
          ]
        },
        "previousResourceNames": {
          "items": {
            "type": "string"
          },
          "description": "Output only. Any former resource names this person has had. Populated only for [`connections.list`](/people/api/rest/v1/people.connections/list) requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.",
          "type": "array",
          "readOnly": true
        },
        "deleted": {
          "readOnly": true,
          "description": "Output only. True if the person resource has been deleted. Populated only for [`connections.list`](/people/api/rest/v1/people.connections/list) requests that include a sync token.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Photo": {
      "type": "object",
      "id": "Photo",
      "description": "A person's photo. A picture shown next to the person's name to help others recognize the person.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the photo. You can change the desired size by appending a query parameter `sz={size}` at the end of the url, where {size} is the size in pixels. Example: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50"
        },
        "default": {
          "description": "True if the photo is a default photo; false if the photo is a user-provided photo.",
          "type": "boolean"
        },
        "metadata": {
          "description": "Metadata about the photo.",
          "$ref": "FieldMetadata"
        }
      }
    },
    "ModifyContactGroupMembersResponse": {
      "id": "ModifyContactGroupMembersResponse",
      "description": "The response to a modify contact group members request.",
      "properties": {
        "notFoundResourceNames": {
          "description": "The contact people resource names that were not found.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "canNotRemoveLastContactGroupResourceNames": {
          "description": "The contact people resource names that cannot be removed from their last contact group.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserDefined": {
      "type": "object",
      "properties": {
        "value": {
          "description": "The end user specified value of the user defined data.",
          "type": "string"
        },
        "key": {
          "type": "string",
          "description": "The end user specified key of the user defined data."
        },
        "metadata": {
          "description": "Metadata about the user defined data.",
          "$ref": "FieldMetadata"
        }
      },
      "id": "UserDefined",
      "description": "Arbitrary user data that is populated by the end users."
    },
    "RelationshipInterest": {
      "id": "RelationshipInterest",
      "properties": {
        "value": {
          "type": "string",
          "description": "The kind of relationship the person is looking for. The value can be custom or one of these predefined values: * `friend` * `date` * `relationship` * `networking`"
        },
        "formattedValue": {
          "description": "Output only. The value of the relationship interest translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.",
          "readOnly": true,
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the relationship interest.",
          "$ref": "FieldMetadata"
        }
      },
      "type": "object",
      "description": "**DEPRECATED**: No data will be returned A person's relationship interest ."
    },
    "Relation": {
      "description": "A person's relation to another person.",
      "id": "Relation",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The person's relation to the other person. The type can be custom or one of these predefined values: * `spouse` * `child` * `mother` * `father` * `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner` * `manager` * `assistant` * `referredBy` * `partner`"
        },
        "person": {
          "description": "The name of the other person this relation refers to.",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the relation.",
          "$ref": "FieldMetadata"
        },
        "formattedType": {
          "description": "Output only. The type of the relation translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "GetPeopleResponse": {
      "description": "The response to a get request for a list of people by resource name.",
      "id": "GetPeopleResponse",
      "properties": {
        "responses": {
          "description": "The response for each requested resource name.",
          "type": "array",
          "items": {
            "$ref": "PersonResponse"
          }
        }
      },
      "type": "object"
    },
    "ListDirectoryPeopleResponse": {
      "description": "The response to a request for the authenticated user's domain directory.",
      "properties": {
        "people": {
          "type": "array",
          "description": "The list of people in the domain directory.",
          "items": {
            "$ref": "Person"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
        },
        "nextSyncToken": {
          "description": "A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token.",
          "type": "string"
        }
      },
      "id": "ListDirectoryPeopleResponse",
      "type": "object"
    },
    "FileAs": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The file-as value"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the file-as."
        }
      },
      "description": "The name that should be used to sort the person in a list.",
      "id": "FileAs",
      "type": "object"
    },
    "EmailAddress": {
      "description": "A person's email address.",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the email address."
        },
        "type": {
          "type": "string",
          "description": "The type of the email address. The type can be custom or one of these predefined values: * `home` * `work` * `other`"
        },
        "value": {
          "type": "string",
          "description": "The email address."
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the email."
        },
        "formattedType": {
          "readOnly": true,
          "description": "Output only. The type of the email address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        }
      },
      "id": "EmailAddress"
    },
    "Nickname": {
      "id": "Nickname",
      "type": "object",
      "properties": {
        "metadata": {
          "description": "Metadata about the nickname.",
          "$ref": "FieldMetadata"
        },
        "type": {
          "enumDescriptions": [
            "Generic nickname.",
            "Maiden name or birth family name. Used when the person's family name has changed as a result of marriage.",
            "Initials.",
            "Google+ profile nickname.",
            "A professional affiliation or other name; for example, `Dr. Smith.`",
            "Alternate name person is known by.",
            "A shorter version of the person's name."
          ],
          "description": "The type of the nickname.",
          "enum": [
            "DEFAULT",
            "MAIDEN_NAME",
            "INITIALS",
            "GPLUS",
            "OTHER_NAME",
            "ALTERNATE_NAME",
            "SHORT_NAME"
          ],
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The nickname."
        }
      },
      "description": "A person's nickname."
    },
    "UpdateContactGroupRequest": {
      "id": "UpdateContactGroupRequest",
      "type": "object",
      "description": "A request to update an existing user contact group. All updated fields will be replaced.",
      "properties": {
        "readGroupFields": {
          "description": "Optional. A field mask to restrict which fields on the group are returned. Defaults to `metadata`, `groupType`, and `name` if not set or set to empty. Valid fields are: * clientData * groupType * memberCount * metadata * name",
          "type": "string",
          "format": "google-fieldmask"
        },
        "contactGroup": {
          "$ref": "ContactGroup",
          "description": "Required. The contact group to update."
        },
        "updateGroupFields": {
          "description": "Optional. A field mask to restrict which fields on the group are updated. Multiple fields can be specified by separating them with commas. Defaults to `name` if not set or set to empty. Updated fields are replaced. Valid values are: * clientData * name",
          "format": "google-fieldmask",
          "type": "string"
        }
      }
    },
    "Location": {
      "id": "Location",
      "description": "A person's location.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The free-form value of the location.",
          "type": "string"
        },
        "deskCode": {
          "description": "The individual desk location.",
          "type": "string"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the location."
        },
        "current": {
          "description": "Whether the location is the current location.",
          "type": "boolean"
        },
        "floorSection": {
          "type": "string",
          "description": "The floor section in `floor_name`."
        },
        "type": {
          "type": "string",
          "description": "The type of the location. The type can be custom or one of these predefined values: * `desk` * `grewUp`"
        },
        "buildingId": {
          "type": "string",
          "description": "The building identifier."
        },
        "floor": {
          "description": "The floor name or number.",
          "type": "string"
        }
      }
    },
    "UpdateContactPhotoRequest": {
      "type": "object",
      "description": "A request to update an existing contact's photo. All requests must have a valid photo format: JPEG or PNG.",
      "properties": {
        "sources": {
          "description": "Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.",
          "type": "array",
          "items": {
            "enumDescriptions": [
              "Unspecified.",
              "Returns SourceType.ACCOUNT, SourceType.DOMAIN_PROFILE, and SourceType.PROFILE.",
              "Returns SourceType.CONTACT.",
              "Returns SourceType.DOMAIN_CONTACT."
            ],
            "type": "string",
            "enum": [
              "READ_SOURCE_TYPE_UNSPECIFIED",
              "READ_SOURCE_TYPE_PROFILE",
              "READ_SOURCE_TYPE_CONTACT",
              "READ_SOURCE_TYPE_DOMAIN_CONTACT"
            ]
          }
        },
        "personFields": {
          "description": "Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to empty if not set, which will skip the post mutate get. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined",
          "type": "string",
          "format": "google-fieldmask"
        },
        "photoBytes": {
          "description": "Required. Raw photo bytes",
          "type": "string",
          "format": "byte"
        }
      },
      "id": "UpdateContactPhotoRequest"
    },
    "Address": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of the address. The type can be custom or one of these predefined values: * `home` * `work` * `other`"
        },
        "postalCode": {
          "description": "The postal code of the address.",
          "type": "string"
        },
        "country": {
          "type": "string",
          "description": "The country of the address."
        },
        "countryCode": {
          "description": "The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country code of the address.",
          "type": "string"
        },
        "city": {
          "type": "string",
          "description": "The city of the address."
        },
        "formattedType": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The type of the address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
        },
        "region": {
          "type": "string",
          "description": "The region of the address; for example, the state or province."
        },
        "streetAddress": {
          "description": "The street address.",
          "type": "string"
        },
        "poBox": {
          "type": "string",
          "description": "The P.O. box of the address."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the address."
        },
        "extendedAddress": {
          "type": "string",
          "description": "The extended address of the address; for example, the apartment number."
        },
        "formattedValue": {
          "type": "string",
          "description": "The unstructured value of the address. If this is not set by the user it will be automatically constructed from structured values."
        }
      },
      "id": "Address",
      "description": "A person's physical address. May be a P.O. box or street address. All fields are optional."
    },
    "Gender": {
      "properties": {
        "addressMeAs": {
          "description": "The type of pronouns that should be used to address the person. The value can be custom or one of these predefined values: * `male` * `female` * `other`",
          "type": "string"
        },
        "formattedValue": {
          "type": "string",
          "description": "Output only. The value of the gender translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale. Unspecified or custom value are not localized.",
          "readOnly": true
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the gender."
        },
        "value": {
          "description": "The gender for the person. The gender can be custom or one of these predefined values: * `male` * `female` * `unspecified`",
          "type": "string"
        }
      },
      "type": "object",
      "description": "A person's gender.",
      "id": "Gender"
    },
    "PhoneNumber": {
      "type": "object",
      "id": "PhoneNumber",
      "properties": {
        "canonicalForm": {
          "description": "Output only. The canonicalized [ITU-T E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf) form of the phone number.",
          "readOnly": true,
          "type": "string"
        },
        "metadata": {
          "description": "Metadata about the phone number.",
          "$ref": "FieldMetadata"
        },
        "formattedType": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The type of the phone number translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale."
        },
        "type": {
          "type": "string",
          "description": "The type of the phone number. The type can be custom or one of these predefined values: * `home` * `work` * `mobile` * `homeFax` * `workFax` * `otherFax` * `pager` * `workMobile` * `workPager` * `main` * `googleVoice` * `other`"
        },
        "value": {
          "description": "The phone number.",
          "type": "string"
        }
      },
      "description": "A person's phone number."
    },
    "Interest": {
      "description": "One of the person's interests.",
      "properties": {
        "value": {
          "description": "The interest; for example, `stargazing`.",
          "type": "string"
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the interest."
        }
      },
      "id": "Interest",
      "type": "object"
    },
    "Membership": {
      "id": "Membership",
      "type": "object",
      "description": "A person's membership in a group. Only contact group memberships can be modified.",
      "properties": {
        "contactGroupMembership": {
          "$ref": "ContactGroupMembership",
          "description": "The contact group membership."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the membership."
        },
        "domainMembership": {
          "description": "Output only. The domain membership.",
          "readOnly": true,
          "$ref": "DomainMembership"
        }
      }
    },
    "Residence": {
      "type": "object",
      "description": "**DEPRECATED**: Please use `person.locations` instead. A person's past or current residence.",
      "id": "Residence",
      "properties": {
        "current": {
          "description": "True if the residence is the person's current residence; false if the residence is a past residence.",
          "type": "boolean"
        },
        "value": {
          "type": "string",
          "description": "The address of the residence."
        },
        "metadata": {
          "$ref": "FieldMetadata",
          "description": "Metadata about the residence."
        }
      }
    },
    "AgeRangeType": {
      "id": "AgeRangeType",
      "type": "object",
      "properties": {
        "ageRange": {
          "enumDescriptions": [
            "Unspecified.",
            "Younger than eighteen.",
            "Between eighteen and twenty.",
            "Twenty-one and older."
          ],
          "description": "The age range.",
          "type": "string",
          "enum": [
            "AGE_RANGE_UNSPECIFIED",
            "LESS_THAN_EIGHTEEN",
            "EIGHTEEN_TO_TWENTY",
            "TWENTY_ONE_OR_OLDER"
          ]
        },
        "metadata": {
          "description": "Metadata about the age range.",
          "$ref": "FieldMetadata"
        }
      },
      "description": "A person's age range."
    },
    "Source": {
      "description": "The source of a field.",
      "id": "Source",
      "type": "object",
      "properties": {
        "etag": {
          "description": "**Only populated in `person.metadata.sources`.** The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the source. Used for web cache validation.",
          "type": "string"
        },
        "id": {
          "description": "The unique identifier within the source type generated by the server.",
          "type": "string"
        },
        "profileMetadata": {
          "$ref": "ProfileMetadata",
          "readOnly": true,
          "description": "Output only. **Only populated in `person.metadata.sources`.** Metadata about a source of type PROFILE."
        },
        "type": {
          "description": "The source type.",
          "enum": [
            "SOURCE_TYPE_UNSPECIFIED",
            "ACCOUNT",
            "PROFILE",
            "DOMAIN_PROFILE",
            "CONTACT",
            "OTHER_CONTACT",
            "DOMAIN_CONTACT"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unspecified.",
            "[Google Account](https://accounts.google.com).",
            "[Google profile](https://profiles.google.com). You can view the profile at [https://profiles.google.com/](https://profiles.google.com/){id}, where {id} is the source id.",
            "[G Suite domain profile](https://support.google.com/a/answer/1628008).",
            "[Google contact](https://contacts.google.com). You can view the contact at [https://contact.google.com/](https://contact.google.com/){id}, where {id} is the source id.",
            "[Google \"Other contact\"](https://contacts.google.com/other).",
            "[G Suite domain shared contact](https://support.google.com/a/answer/9281635)."
          ]
        },
        "updateTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. **Only populated in `person.metadata.sources`.** Last update timestamp of this source.",
          "readOnly": true
        }
      }
    },
    "GroupClientData": {
      "type": "object",
      "id": "GroupClientData",
      "description": "Arbitrary client data that is populated by clients. Duplicate keys and values are allowed.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The client specified value of the client data."
        },
        "key": {
          "description": "The client specified key of the client data.",
          "type": "string"
        }
      }
    },
    "PersonResponse": {
      "type": "object",
      "properties": {
        "requestedResourceName": {
          "description": "The original requested resource name. May be different than the resource name on the returned person. The resource name can change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or a profile URL.",
          "type": "string"
        },
        "httpStatusCode": {
          "type": "integer",
          "description": "**DEPRECATED** (Please use status instead) [HTTP 1.1 status code] (http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).",
          "format": "int32"
        },
        "status": {
          "$ref": "Status",
          "description": "The status of the response."
        },
        "person": {
          "description": "The person.",
          "$ref": "Person"
        }
      },
      "description": "The response for a single person",
      "id": "PersonResponse"
    },
    "ModifyContactGroupMembersRequest": {
      "type": "object",
      "id": "ModifyContactGroupMembersRequest",
      "properties": {
        "resourceNamesToRemove": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional. The resource names of the contact people to remove in the form of `people/{person_id}`. The total number of resource names in `resource_names_to_add` and `resource_names_to_remove` must be less than or equal to 1000."
        },
        "resourceNamesToAdd": {
          "items": {
            "type": "string"
          },
          "description": "Optional. The resource names of the contact people to add in the form of `people/{person_id}`. The total number of resource names in `resource_names_to_add` and `resource_names_to_remove` must be less than or equal to 1000.",
          "type": "array"
        }
      },
      "description": "A request to modify an existing contact group's members. Contacts can be removed from any group but they can only be added to a user group or \"myContacts\" or \"starred\" system groups."
    },
    "RelationshipStatus": {
      "type": "object",
      "description": "**DEPRECATED**: No data will be returned A person's relationship status.",
      "id": "RelationshipStatus",
      "properties": {
        "value": {
          "type": "string",
          "description": "The relationship status. The value can be custom or one of these predefined values: * `single` * `inARelationship` * `engaged` * `married` * `itsComplicated` * `openRelationship` * `widowed` * `inDomesticPartnership` * `inCivilUnion`"
        },
        "metadata": {
          "description": "Metadata about the relationship status.",
          "$ref": "FieldMetadata"
        },
        "formattedValue": {
          "readOnly": true,
          "description": "Output only. The value of the relationship status translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
          "type": "string"
        }
      }
    },
    "Empty": {
      "properties": {},
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "id": "Empty"
    },
    "DomainMembership": {
      "id": "DomainMembership",
      "description": "A G Suite Domain membership.",
      "type": "object",
      "properties": {
        "inViewerDomain": {
          "description": "True if the person is in the viewer's G Suite domain.",
          "type": "boolean"
        }
      }
    },
    "ListConnectionsResponse": {
      "properties": {
        "totalPeople": {
          "format": "int32",
          "description": "**DEPRECATED** (Please use totalItems) The total number of people in the list without pagination.",
          "type": "integer"
        },
        "totalItems": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of items in the list without pagination."
        },
        "connections": {
          "type": "array",
          "description": "The list of people that the requestor is connected to.",
          "items": {
            "$ref": "Person"
          }
        },
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.",
          "type": "string"
        },
        "nextSyncToken": {
          "description": "A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token. When the response is paginated, only the last page will contain `nextSyncToken`.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "ListConnectionsResponse",
      "description": "The response to a request for the authenticated user's connections."
    }
  },
  "version_module": true,
  "revision": "20210302",
  "name": "people",
  "discoveryVersion": "v1",
  "kind": "discovery#restDescription",
  "servicePath": "",
  "description": "Provides access to information about profiles and contacts.",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "canonicalName": "People Service",
  "rootUrl": "https://people.googleapis.com/"
}
