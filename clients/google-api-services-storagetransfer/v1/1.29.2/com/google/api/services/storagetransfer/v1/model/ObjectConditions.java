/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.storagetransfer.v1.model;

/**
 * Conditions that determine which objects will be transferred. Applies only to S3 and GCS objects.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Storage Transfer API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ObjectConditions extends com.google.api.client.json.GenericJson {

  /**
   * `excludePrefixes` must follow the requirements described for `includePrefixes`.
   *
   * The max size of `excludePrefixes` is 1000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> excludePrefixes;

  /**
   * If `includePrefixes` is specified, objects that satisfy the object conditions must have names
   * that start with one of the `includePrefixes` and that do not start with any of the
   * `excludePrefixes`. If `includePrefixes` is not specified, all objects except those that have
   * names starting with one of the `excludePrefixes` must satisfy the object conditions.
   *
   * Requirements:
   *
   *   * Each include-prefix and exclude-prefix can contain any sequence of     Unicode characters,
   * of max length 1024 bytes when UTF8-encoded, and     must not contain Carriage Return or Line
   * Feed characters.  Wildcard     matching and regular expression matching are not supported.
   *
   *   * Each include-prefix and exclude-prefix must omit the leading slash.     For example, to
   * include the `requests.gz` object in a transfer from     `s3://my-aws-
   * bucket/logs/y=2015/requests.gz`, specify the include     prefix as `logs/y=2015/requests.gz`.
   *
   *   * None of the include-prefix or the exclude-prefix values can be empty,     if specified.
   *
   *   * Each include-prefix must include a distinct portion of the object     namespace, i.e., no
   * include-prefix may be a prefix of another     include-prefix.
   *
   *   * Each exclude-prefix must exclude a distinct portion of the object     namespace, i.e., no
   * exclude-prefix may be a prefix of another     exclude-prefix.
   *
   *   * If `includePrefixes` is specified, then each exclude-prefix must start     with the value
   * of a path explicitly included by `includePrefixes`.
   *
   * The max size of `includePrefixes` is 1000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> includePrefixes;

  /**
   * If specified, only objects with a `lastModificationTime` on or after `NOW` -
   * `maxTimeElapsedSinceLastModification` and objects that don't have a `lastModificationTime` are
   * transferred.
   *
   * Note that, for each `TransferOperation` started by this `TransferJob`, `NOW` refers to the
   * `start_time` of the 'TransferOperation`. Also, `lastModificationTime` refers to the time of the
   * last change to the object's content or metadata - specifically, this would be the `updated`
   * property of GCS objects and the `LastModified` field of S3 objects.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String maxTimeElapsedSinceLastModification;

  /**
   * If specified, only objects with a `lastModificationTime` before `NOW` -
   * `minTimeElapsedSinceLastModification` and objects that don't have a `lastModificationTime` are
   * transferred.
   *
   * Note that, for each `TransferOperation` started by this `TransferJob`, `NOW` refers to the
   * `start_time` of the 'TransferOperation`. Also, `lastModificationTime` refers to the time of the
   * last change to the object's content or metadata - specifically, this would be the `updated`
   * property of GCS objects and the `LastModified` field of S3 objects.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String minTimeElapsedSinceLastModification;

  /**
   * `excludePrefixes` must follow the requirements described for `includePrefixes`.
   *
   * The max size of `excludePrefixes` is 1000.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getExcludePrefixes() {
    return excludePrefixes;
  }

  /**
   * `excludePrefixes` must follow the requirements described for `includePrefixes`.
   *
   * The max size of `excludePrefixes` is 1000.
   * @param excludePrefixes excludePrefixes or {@code null} for none
   */
  public ObjectConditions setExcludePrefixes(java.util.List<java.lang.String> excludePrefixes) {
    this.excludePrefixes = excludePrefixes;
    return this;
  }

  /**
   * If `includePrefixes` is specified, objects that satisfy the object conditions must have names
   * that start with one of the `includePrefixes` and that do not start with any of the
   * `excludePrefixes`. If `includePrefixes` is not specified, all objects except those that have
   * names starting with one of the `excludePrefixes` must satisfy the object conditions.
   *
   * Requirements:
   *
   *   * Each include-prefix and exclude-prefix can contain any sequence of     Unicode characters,
   * of max length 1024 bytes when UTF8-encoded, and     must not contain Carriage Return or Line
   * Feed characters.  Wildcard     matching and regular expression matching are not supported.
   *
   *   * Each include-prefix and exclude-prefix must omit the leading slash.     For example, to
   * include the `requests.gz` object in a transfer from     `s3://my-aws-
   * bucket/logs/y=2015/requests.gz`, specify the include     prefix as `logs/y=2015/requests.gz`.
   *
   *   * None of the include-prefix or the exclude-prefix values can be empty,     if specified.
   *
   *   * Each include-prefix must include a distinct portion of the object     namespace, i.e., no
   * include-prefix may be a prefix of another     include-prefix.
   *
   *   * Each exclude-prefix must exclude a distinct portion of the object     namespace, i.e., no
   * exclude-prefix may be a prefix of another     exclude-prefix.
   *
   *   * If `includePrefixes` is specified, then each exclude-prefix must start     with the value
   * of a path explicitly included by `includePrefixes`.
   *
   * The max size of `includePrefixes` is 1000.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getIncludePrefixes() {
    return includePrefixes;
  }

  /**
   * If `includePrefixes` is specified, objects that satisfy the object conditions must have names
   * that start with one of the `includePrefixes` and that do not start with any of the
   * `excludePrefixes`. If `includePrefixes` is not specified, all objects except those that have
   * names starting with one of the `excludePrefixes` must satisfy the object conditions.
   *
   * Requirements:
   *
   *   * Each include-prefix and exclude-prefix can contain any sequence of     Unicode characters,
   * of max length 1024 bytes when UTF8-encoded, and     must not contain Carriage Return or Line
   * Feed characters.  Wildcard     matching and regular expression matching are not supported.
   *
   *   * Each include-prefix and exclude-prefix must omit the leading slash.     For example, to
   * include the `requests.gz` object in a transfer from     `s3://my-aws-
   * bucket/logs/y=2015/requests.gz`, specify the include     prefix as `logs/y=2015/requests.gz`.
   *
   *   * None of the include-prefix or the exclude-prefix values can be empty,     if specified.
   *
   *   * Each include-prefix must include a distinct portion of the object     namespace, i.e., no
   * include-prefix may be a prefix of another     include-prefix.
   *
   *   * Each exclude-prefix must exclude a distinct portion of the object     namespace, i.e., no
   * exclude-prefix may be a prefix of another     exclude-prefix.
   *
   *   * If `includePrefixes` is specified, then each exclude-prefix must start     with the value
   * of a path explicitly included by `includePrefixes`.
   *
   * The max size of `includePrefixes` is 1000.
   * @param includePrefixes includePrefixes or {@code null} for none
   */
  public ObjectConditions setIncludePrefixes(java.util.List<java.lang.String> includePrefixes) {
    this.includePrefixes = includePrefixes;
    return this;
  }

  /**
   * If specified, only objects with a `lastModificationTime` on or after `NOW` -
   * `maxTimeElapsedSinceLastModification` and objects that don't have a `lastModificationTime` are
   * transferred.
   *
   * Note that, for each `TransferOperation` started by this `TransferJob`, `NOW` refers to the
   * `start_time` of the 'TransferOperation`. Also, `lastModificationTime` refers to the time of the
   * last change to the object's content or metadata - specifically, this would be the `updated`
   * property of GCS objects and the `LastModified` field of S3 objects.
   * @return value or {@code null} for none
   */
  public String getMaxTimeElapsedSinceLastModification() {
    return maxTimeElapsedSinceLastModification;
  }

  /**
   * If specified, only objects with a `lastModificationTime` on or after `NOW` -
   * `maxTimeElapsedSinceLastModification` and objects that don't have a `lastModificationTime` are
   * transferred.
   *
   * Note that, for each `TransferOperation` started by this `TransferJob`, `NOW` refers to the
   * `start_time` of the 'TransferOperation`. Also, `lastModificationTime` refers to the time of the
   * last change to the object's content or metadata - specifically, this would be the `updated`
   * property of GCS objects and the `LastModified` field of S3 objects.
   * @param maxTimeElapsedSinceLastModification maxTimeElapsedSinceLastModification or {@code null} for none
   */
  public ObjectConditions setMaxTimeElapsedSinceLastModification(String maxTimeElapsedSinceLastModification) {
    this.maxTimeElapsedSinceLastModification = maxTimeElapsedSinceLastModification;
    return this;
  }

  /**
   * If specified, only objects with a `lastModificationTime` before `NOW` -
   * `minTimeElapsedSinceLastModification` and objects that don't have a `lastModificationTime` are
   * transferred.
   *
   * Note that, for each `TransferOperation` started by this `TransferJob`, `NOW` refers to the
   * `start_time` of the 'TransferOperation`. Also, `lastModificationTime` refers to the time of the
   * last change to the object's content or metadata - specifically, this would be the `updated`
   * property of GCS objects and the `LastModified` field of S3 objects.
   * @return value or {@code null} for none
   */
  public String getMinTimeElapsedSinceLastModification() {
    return minTimeElapsedSinceLastModification;
  }

  /**
   * If specified, only objects with a `lastModificationTime` before `NOW` -
   * `minTimeElapsedSinceLastModification` and objects that don't have a `lastModificationTime` are
   * transferred.
   *
   * Note that, for each `TransferOperation` started by this `TransferJob`, `NOW` refers to the
   * `start_time` of the 'TransferOperation`. Also, `lastModificationTime` refers to the time of the
   * last change to the object's content or metadata - specifically, this would be the `updated`
   * property of GCS objects and the `LastModified` field of S3 objects.
   * @param minTimeElapsedSinceLastModification minTimeElapsedSinceLastModification or {@code null} for none
   */
  public ObjectConditions setMinTimeElapsedSinceLastModification(String minTimeElapsedSinceLastModification) {
    this.minTimeElapsedSinceLastModification = minTimeElapsedSinceLastModification;
    return this;
  }

  @Override
  public ObjectConditions set(String fieldName, Object value) {
    return (ObjectConditions) super.set(fieldName, value);
  }

  @Override
  public ObjectConditions clone() {
    return (ObjectConditions) super.clone();
  }

}
