/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.safebrowsing.model;

/**
 * Request to return full hashes matched by the provided hash prefixes.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Safe Browsing API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FindFullHashesRequest extends com.google.api.client.json.GenericJson {

  /**
   * Client metadata associated with callers of higher-level APIs built on top of the client's
   * implementation.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ClientInfo apiClient;

  /**
   * The client metadata.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ClientInfo client;

  /**
   * The current client states for each of the client's local threat lists.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> clientStates;

  /**
   * The lists and hashes to be checked.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ThreatInfo threatInfo;

  /**
   * Client metadata associated with callers of higher-level APIs built on top of the client's
   * implementation.
   * @return value or {@code null} for none
   */
  public ClientInfo getApiClient() {
    return apiClient;
  }

  /**
   * Client metadata associated with callers of higher-level APIs built on top of the client's
   * implementation.
   * @param apiClient apiClient or {@code null} for none
   */
  public FindFullHashesRequest setApiClient(ClientInfo apiClient) {
    this.apiClient = apiClient;
    return this;
  }

  /**
   * The client metadata.
   * @return value or {@code null} for none
   */
  public ClientInfo getClient() {
    return client;
  }

  /**
   * The client metadata.
   * @param client client or {@code null} for none
   */
  public FindFullHashesRequest setClient(ClientInfo client) {
    this.client = client;
    return this;
  }

  /**
   * The current client states for each of the client's local threat lists.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getClientStates() {
    return clientStates;
  }

  /**
   * The current client states for each of the client's local threat lists.
   * @param clientStates clientStates or {@code null} for none
   */
  public FindFullHashesRequest setClientStates(java.util.List<java.lang.String> clientStates) {
    this.clientStates = clientStates;
    return this;
  }

  /**
   * The lists and hashes to be checked.
   * @return value or {@code null} for none
   */
  public ThreatInfo getThreatInfo() {
    return threatInfo;
  }

  /**
   * The lists and hashes to be checked.
   * @param threatInfo threatInfo or {@code null} for none
   */
  public FindFullHashesRequest setThreatInfo(ThreatInfo threatInfo) {
    this.threatInfo = threatInfo;
    return this;
  }

  @Override
  public FindFullHashesRequest set(String fieldName, Object value) {
    return (FindFullHashesRequest) super.set(fieldName, value);
  }

  @Override
  public FindFullHashesRequest clone() {
    return (FindFullHashesRequest) super.clone();
  }

}
