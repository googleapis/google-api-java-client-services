/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.doubleclickbidmanager;

/**
 * Service definition for DoubleClickBidManager (v2).
 *
 * <p>
 * DoubleClick Bid Manager API allows users to manage and create campaigns and reports.
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://developers.google.com/bid-manager/" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link DoubleClickBidManagerRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class DoubleClickBidManager extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the DoubleClick Bid Manager API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://doubleclickbidmanager.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://doubleclickbidmanager.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "v2/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public DoubleClickBidManager(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  DoubleClickBidManager(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Queries collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code DoubleClickBidManager doubleclickbidmanager = new DoubleClickBidManager(...);}
   *   {@code DoubleClickBidManager.Queries.List request = doubleclickbidmanager.queries().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Queries queries() {
    return new Queries();
  }

  /**
   * The "queries" collection of methods.
   */
  public class Queries {

    /**
     * Creates a query.
     *
     * Create a request for the method "queries.create".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.doubleclickbidmanager.model.Query}
     * @return the request
     */
    public Create create(com.google.api.services.doubleclickbidmanager.model.Query content) throws java.io.IOException {
      Create result = new Create(content);
      initialize(result);
      return result;
    }

    public class Create extends DoubleClickBidManagerRequest<com.google.api.services.doubleclickbidmanager.model.Query> {

      private static final String REST_PATH = "queries";

      /**
       * Creates a query.
       *
       * Create a request for the method "queries.create".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link Create#execute()} method to invoke the remote
       * operation. <p> {@link
       * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.doubleclickbidmanager.model.Query}
       * @since 1.13
       */
      protected Create(com.google.api.services.doubleclickbidmanager.model.Query content) {
        super(DoubleClickBidManager.this, "POST", REST_PATH, content, com.google.api.services.doubleclickbidmanager.model.Query.class);
      }

      @Override
      public Create set$Xgafv(java.lang.String $Xgafv) {
        return (Create) super.set$Xgafv($Xgafv);
      }

      @Override
      public Create setAccessToken(java.lang.String accessToken) {
        return (Create) super.setAccessToken(accessToken);
      }

      @Override
      public Create setAlt(java.lang.String alt) {
        return (Create) super.setAlt(alt);
      }

      @Override
      public Create setCallback(java.lang.String callback) {
        return (Create) super.setCallback(callback);
      }

      @Override
      public Create setFields(java.lang.String fields) {
        return (Create) super.setFields(fields);
      }

      @Override
      public Create setKey(java.lang.String key) {
        return (Create) super.setKey(key);
      }

      @Override
      public Create setOauthToken(java.lang.String oauthToken) {
        return (Create) super.setOauthToken(oauthToken);
      }

      @Override
      public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Create) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Create setQuotaUser(java.lang.String quotaUser) {
        return (Create) super.setQuotaUser(quotaUser);
      }

      @Override
      public Create setUploadType(java.lang.String uploadType) {
        return (Create) super.setUploadType(uploadType);
      }

      @Override
      public Create setUploadProtocol(java.lang.String uploadProtocol) {
        return (Create) super.setUploadProtocol(uploadProtocol);
      }

      @Override
      public Create set(String parameterName, Object value) {
        return (Create) super.set(parameterName, value);
      }
    }
    /**
     * Deletes a query as well as the associated reports.
     *
     * Create a request for the method "queries.delete".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param queryId Required. ID of query to delete.
     * @return the request
     */
    public Delete delete(java.lang.Long queryId) throws java.io.IOException {
      Delete result = new Delete(queryId);
      initialize(result);
      return result;
    }

    public class Delete extends DoubleClickBidManagerRequest<Void> {

      private static final String REST_PATH = "queries/{queryId}";

      /**
       * Deletes a query as well as the associated reports.
       *
       * Create a request for the method "queries.delete".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link Delete#execute()} method to invoke the remote
       * operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param queryId Required. ID of query to delete.
       * @since 1.13
       */
      protected Delete(java.lang.Long queryId) {
        super(DoubleClickBidManager.this, "DELETE", REST_PATH, null, Void.class);
        this.queryId = com.google.api.client.util.Preconditions.checkNotNull(queryId, "Required parameter queryId must be specified.");
      }

      @Override
      public Delete set$Xgafv(java.lang.String $Xgafv) {
        return (Delete) super.set$Xgafv($Xgafv);
      }

      @Override
      public Delete setAccessToken(java.lang.String accessToken) {
        return (Delete) super.setAccessToken(accessToken);
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setCallback(java.lang.String callback) {
        return (Delete) super.setCallback(callback);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUploadType(java.lang.String uploadType) {
        return (Delete) super.setUploadType(uploadType);
      }

      @Override
      public Delete setUploadProtocol(java.lang.String uploadProtocol) {
        return (Delete) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. ID of query to delete. */
      @com.google.api.client.util.Key
      private java.lang.Long queryId;

      /** Required. ID of query to delete.
       */
      public java.lang.Long getQueryId() {
        return queryId;
      }

      /** Required. ID of query to delete. */
      public Delete setQueryId(java.lang.Long queryId) {
        this.queryId = queryId;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Retrieves a query.
     *
     * Create a request for the method "queries.get".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param queryId Required. ID of query to retrieve.
     * @return the request
     */
    public Get get(java.lang.Long queryId) throws java.io.IOException {
      Get result = new Get(queryId);
      initialize(result);
      return result;
    }

    public class Get extends DoubleClickBidManagerRequest<com.google.api.services.doubleclickbidmanager.model.Query> {

      private static final String REST_PATH = "queries/{queryId}";

      /**
       * Retrieves a query.
       *
       * Create a request for the method "queries.get".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link Get#execute()} method to invoke the remote
       * operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param queryId Required. ID of query to retrieve.
       * @since 1.13
       */
      protected Get(java.lang.Long queryId) {
        super(DoubleClickBidManager.this, "GET", REST_PATH, null, com.google.api.services.doubleclickbidmanager.model.Query.class);
        this.queryId = com.google.api.client.util.Preconditions.checkNotNull(queryId, "Required parameter queryId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get set$Xgafv(java.lang.String $Xgafv) {
        return (Get) super.set$Xgafv($Xgafv);
      }

      @Override
      public Get setAccessToken(java.lang.String accessToken) {
        return (Get) super.setAccessToken(accessToken);
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setCallback(java.lang.String callback) {
        return (Get) super.setCallback(callback);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUploadType(java.lang.String uploadType) {
        return (Get) super.setUploadType(uploadType);
      }

      @Override
      public Get setUploadProtocol(java.lang.String uploadProtocol) {
        return (Get) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. ID of query to retrieve. */
      @com.google.api.client.util.Key
      private java.lang.Long queryId;

      /** Required. ID of query to retrieve.
       */
      public java.lang.Long getQueryId() {
        return queryId;
      }

      /** Required. ID of query to retrieve. */
      public Get setQueryId(java.lang.Long queryId) {
        this.queryId = queryId;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Lists queries created by the current user.
     *
     * Create a request for the method "queries.list".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends DoubleClickBidManagerRequest<com.google.api.services.doubleclickbidmanager.model.ListQueriesResponse> {

      private static final String REST_PATH = "queries";

      /**
       * Lists queries created by the current user.
       *
       * Create a request for the method "queries.list".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link List#execute()} method to invoke the remote
       * operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(DoubleClickBidManager.this, "GET", REST_PATH, null, com.google.api.services.doubleclickbidmanager.model.ListQueriesResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List set$Xgafv(java.lang.String $Xgafv) {
        return (List) super.set$Xgafv($Xgafv);
      }

      @Override
      public List setAccessToken(java.lang.String accessToken) {
        return (List) super.setAccessToken(accessToken);
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setCallback(java.lang.String callback) {
        return (List) super.setCallback(callback);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUploadType(java.lang.String uploadType) {
        return (List) super.setUploadType(uploadType);
      }

      @Override
      public List setUploadProtocol(java.lang.String uploadProtocol) {
        return (List) super.setUploadProtocol(uploadProtocol);
      }

      /**
       * Name of a field used to order results. The default sorting order is ascending. To specify
       * descending order for a field, append a " desc" suffix. For example "metadata.title desc".
       * Sorting is only supported for the following fields: * `queryId` * `metadata.title`
       */
      @com.google.api.client.util.Key
      private java.lang.String orderBy;

      /** Name of a field used to order results. The default sorting order is ascending. To specify
     descending order for a field, append a " desc" suffix. For example "metadata.title desc". Sorting
     is only supported for the following fields: * `queryId` * `metadata.title`
       */
      public java.lang.String getOrderBy() {
        return orderBy;
      }

      /**
       * Name of a field used to order results. The default sorting order is ascending. To specify
       * descending order for a field, append a " desc" suffix. For example "metadata.title desc".
       * Sorting is only supported for the following fields: * `queryId` * `metadata.title`
       */
      public List setOrderBy(java.lang.String orderBy) {
        this.orderBy = orderBy;
        return this;
      }

      /**
       * Maximum number of results per page. Must be between `1` and `100`. Defaults to `100` if
       * unspecified.
       */
      @com.google.api.client.util.Key
      private java.lang.Integer pageSize;

      /** Maximum number of results per page. Must be between `1` and `100`. Defaults to `100` if
     unspecified.
       */
      public java.lang.Integer getPageSize() {
        return pageSize;
      }

      /**
       * Maximum number of results per page. Must be between `1` and `100`. Defaults to `100` if
       * unspecified.
       */
      public List setPageSize(java.lang.Integer pageSize) {
        this.pageSize = pageSize;
        return this;
      }

      /**
       * A page token, received from a previous list call. Provide this to retrieve the subsequent
       * page of queries.
       */
      @com.google.api.client.util.Key
      private java.lang.String pageToken;

      /** A page token, received from a previous list call. Provide this to retrieve the subsequent page of
     queries.
       */
      public java.lang.String getPageToken() {
        return pageToken;
      }

      /**
       * A page token, received from a previous list call. Provide this to retrieve the subsequent
       * page of queries.
       */
      public List setPageToken(java.lang.String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Runs a stored query to generate a report.
     *
     * Create a request for the method "queries.run".
     *
     * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
     * optional parameters, call the {@link Run#execute()} method to invoke the remote operation.
     *
     * @param queryId Required. ID of query to run.
     * @param content the {@link com.google.api.services.doubleclickbidmanager.model.RunQueryRequest}
     * @return the request
     */
    public Run run(java.lang.Long queryId, com.google.api.services.doubleclickbidmanager.model.RunQueryRequest content) throws java.io.IOException {
      Run result = new Run(queryId, content);
      initialize(result);
      return result;
    }

    public class Run extends DoubleClickBidManagerRequest<com.google.api.services.doubleclickbidmanager.model.Report> {

      private static final String REST_PATH = "queries/{queryId}:run";

      /**
       * Runs a stored query to generate a report.
       *
       * Create a request for the method "queries.run".
       *
       * This request holds the parameters needed by the the doubleclickbidmanager server.  After
       * setting any optional parameters, call the {@link Run#execute()} method to invoke the remote
       * operation. <p> {@link
       * Run#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param queryId Required. ID of query to run.
       * @param content the {@link com.google.api.services.doubleclickbidmanager.model.RunQueryRequest}
       * @since 1.13
       */
      protected Run(java.lang.Long queryId, com.google.api.services.doubleclickbidmanager.model.RunQueryRequest content) {
        super(DoubleClickBidManager.this, "POST", REST_PATH, content, com.google.api.services.doubleclickbidmanager.model.Report.class);
        this.queryId = com.google.api.client.util.Preconditions.checkNotNull(queryId, "Required parameter queryId must be specified.");
      }

      @Override
      public Run set$Xgafv(java.lang.String $Xgafv) {
        return (Run) super.set$Xgafv($Xgafv);
      }

      @Override
      public Run setAccessToken(java.lang.String accessToken) {
        return (Run) super.setAccessToken(accessToken);
      }

      @Override
      public Run setAlt(java.lang.String alt) {
        return (Run) super.setAlt(alt);
      }

      @Override
      public Run setCallback(java.lang.String callback) {
        return (Run) super.setCallback(callback);
      }

      @Override
      public Run setFields(java.lang.String fields) {
        return (Run) super.setFields(fields);
      }

      @Override
      public Run setKey(java.lang.String key) {
        return (Run) super.setKey(key);
      }

      @Override
      public Run setOauthToken(java.lang.String oauthToken) {
        return (Run) super.setOauthToken(oauthToken);
      }

      @Override
      public Run setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Run) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Run setQuotaUser(java.lang.String quotaUser) {
        return (Run) super.setQuotaUser(quotaUser);
      }

      @Override
      public Run setUploadType(java.lang.String uploadType) {
        return (Run) super.setUploadType(uploadType);
      }

      @Override
      public Run setUploadProtocol(java.lang.String uploadProtocol) {
        return (Run) super.setUploadProtocol(uploadProtocol);
      }

      /** Required. ID of query to run. */
      @com.google.api.client.util.Key
      private java.lang.Long queryId;

      /** Required. ID of query to run.
       */
      public java.lang.Long getQueryId() {
        return queryId;
      }

      /** Required. ID of query to run. */
      public Run setQueryId(java.lang.Long queryId) {
        this.queryId = queryId;
        return this;
      }

      /**
       * Whether the query should be run synchronously. When true, this method will not return until
       * the query has finished running. When false or not specified, this method will return
       * immediately.
       */
      @com.google.api.client.util.Key
      private java.lang.Boolean synchronous;

      /** Whether the query should be run synchronously. When true, this method will not return until the
     query has finished running. When false or not specified, this method will return immediately.
       */
      public java.lang.Boolean getSynchronous() {
        return synchronous;
      }

      /**
       * Whether the query should be run synchronously. When true, this method will not return until
       * the query has finished running. When false or not specified, this method will return
       * immediately.
       */
      public Run setSynchronous(java.lang.Boolean synchronous) {
        this.synchronous = synchronous;
        return this;
      }

      @Override
      public Run set(String parameterName, Object value) {
        return (Run) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Reports collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code DoubleClickBidManager doubleclickbidmanager = new DoubleClickBidManager(...);}
     *   {@code DoubleClickBidManager.Reports.List request = doubleclickbidmanager.reports().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Reports reports() {
      return new Reports();
    }

    /**
     * The "reports" collection of methods.
     */
    public class Reports {

      /**
       * Retrieves a report.
       *
       * Create a request for the method "reports.get".
       *
       * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param queryId Required. ID of the query the report is associated with.
       * @param reportId Required. ID of the report to retrieve.
       * @return the request
       */
      public Get get(java.lang.Long queryId, java.lang.Long reportId) throws java.io.IOException {
        Get result = new Get(queryId, reportId);
        initialize(result);
        return result;
      }

      public class Get extends DoubleClickBidManagerRequest<com.google.api.services.doubleclickbidmanager.model.Report> {

        private static final String REST_PATH = "queries/{queryId}/reports/{reportId}";

        /**
         * Retrieves a report.
         *
         * Create a request for the method "reports.get".
         *
         * This request holds the parameters needed by the the doubleclickbidmanager server.  After
         * setting any optional parameters, call the {@link Get#execute()} method to invoke the remote
         * operation. <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param queryId Required. ID of the query the report is associated with.
         * @param reportId Required. ID of the report to retrieve.
         * @since 1.13
         */
        protected Get(java.lang.Long queryId, java.lang.Long reportId) {
          super(DoubleClickBidManager.this, "GET", REST_PATH, null, com.google.api.services.doubleclickbidmanager.model.Report.class);
          this.queryId = com.google.api.client.util.Preconditions.checkNotNull(queryId, "Required parameter queryId must be specified.");
          this.reportId = com.google.api.client.util.Preconditions.checkNotNull(reportId, "Required parameter reportId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get set$Xgafv(java.lang.String $Xgafv) {
          return (Get) super.set$Xgafv($Xgafv);
        }

        @Override
        public Get setAccessToken(java.lang.String accessToken) {
          return (Get) super.setAccessToken(accessToken);
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setCallback(java.lang.String callback) {
          return (Get) super.setCallback(callback);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUploadType(java.lang.String uploadType) {
          return (Get) super.setUploadType(uploadType);
        }

        @Override
        public Get setUploadProtocol(java.lang.String uploadProtocol) {
          return (Get) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. ID of the query the report is associated with. */
        @com.google.api.client.util.Key
        private java.lang.Long queryId;

        /** Required. ID of the query the report is associated with.
         */
        public java.lang.Long getQueryId() {
          return queryId;
        }

        /** Required. ID of the query the report is associated with. */
        public Get setQueryId(java.lang.Long queryId) {
          this.queryId = queryId;
          return this;
        }

        /** Required. ID of the report to retrieve. */
        @com.google.api.client.util.Key
        private java.lang.Long reportId;

        /** Required. ID of the report to retrieve.
         */
        public java.lang.Long getReportId() {
          return reportId;
        }

        /** Required. ID of the report to retrieve. */
        public Get setReportId(java.lang.Long reportId) {
          this.reportId = reportId;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Lists reports associated with a query.
       *
       * Create a request for the method "reports.list".
       *
       * This request holds the parameters needed by the doubleclickbidmanager server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param queryId Required. ID of the query with which the reports are associated.
       * @return the request
       */
      public List list(java.lang.Long queryId) throws java.io.IOException {
        List result = new List(queryId);
        initialize(result);
        return result;
      }

      public class List extends DoubleClickBidManagerRequest<com.google.api.services.doubleclickbidmanager.model.ListReportsResponse> {

        private static final String REST_PATH = "queries/{queryId}/reports";

        /**
         * Lists reports associated with a query.
         *
         * Create a request for the method "reports.list".
         *
         * This request holds the parameters needed by the the doubleclickbidmanager server.  After
         * setting any optional parameters, call the {@link List#execute()} method to invoke the remote
         * operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param queryId Required. ID of the query with which the reports are associated.
         * @since 1.13
         */
        protected List(java.lang.Long queryId) {
          super(DoubleClickBidManager.this, "GET", REST_PATH, null, com.google.api.services.doubleclickbidmanager.model.ListReportsResponse.class);
          this.queryId = com.google.api.client.util.Preconditions.checkNotNull(queryId, "Required parameter queryId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List set$Xgafv(java.lang.String $Xgafv) {
          return (List) super.set$Xgafv($Xgafv);
        }

        @Override
        public List setAccessToken(java.lang.String accessToken) {
          return (List) super.setAccessToken(accessToken);
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setCallback(java.lang.String callback) {
          return (List) super.setCallback(callback);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUploadType(java.lang.String uploadType) {
          return (List) super.setUploadType(uploadType);
        }

        @Override
        public List setUploadProtocol(java.lang.String uploadProtocol) {
          return (List) super.setUploadProtocol(uploadProtocol);
        }

        /** Required. ID of the query with which the reports are associated. */
        @com.google.api.client.util.Key
        private java.lang.Long queryId;

        /** Required. ID of the query with which the reports are associated.
         */
        public java.lang.Long getQueryId() {
          return queryId;
        }

        /** Required. ID of the query with which the reports are associated. */
        public List setQueryId(java.lang.Long queryId) {
          this.queryId = queryId;
          return this;
        }

        /**
         * Name of a field used to order results. The default sorting order is ascending. To specify
         * descending order for a field, append a " desc" suffix. For example "key.reportId desc".
         * Sorting is only supported for the following fields: * `key.reportId`
         */
        @com.google.api.client.util.Key
        private java.lang.String orderBy;

        /** Name of a field used to order results. The default sorting order is ascending. To specify
       descending order for a field, append a " desc" suffix. For example "key.reportId desc". Sorting is
       only supported for the following fields: * `key.reportId`
         */
        public java.lang.String getOrderBy() {
          return orderBy;
        }

        /**
         * Name of a field used to order results. The default sorting order is ascending. To specify
         * descending order for a field, append a " desc" suffix. For example "key.reportId desc".
         * Sorting is only supported for the following fields: * `key.reportId`
         */
        public List setOrderBy(java.lang.String orderBy) {
          this.orderBy = orderBy;
          return this;
        }

        /**
         * Maximum number of results per page. Must be between `1` and `100`. Defaults to `100` if
         * unspecified.
         */
        @com.google.api.client.util.Key
        private java.lang.Integer pageSize;

        /** Maximum number of results per page. Must be between `1` and `100`. Defaults to `100` if
       unspecified.
         */
        public java.lang.Integer getPageSize() {
          return pageSize;
        }

        /**
         * Maximum number of results per page. Must be between `1` and `100`. Defaults to `100` if
         * unspecified.
         */
        public List setPageSize(java.lang.Integer pageSize) {
          this.pageSize = pageSize;
          return this;
        }

        /**
         * A page token, received from a previous list call. Provide this to retrieve the subsequent
         * page of reports.
         */
        @com.google.api.client.util.Key
        private java.lang.String pageToken;

        /** A page token, received from a previous list call. Provide this to retrieve the subsequent page of
       reports.
         */
        public java.lang.String getPageToken() {
          return pageToken;
        }

        /**
         * A page token, received from a previous list call. Provide this to retrieve the subsequent
         * page of reports.
         */
        public List setPageToken(java.lang.String pageToken) {
          this.pageToken = pageToken;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link DoubleClickBidManager}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link DoubleClickBidManager}. */
    @Override
    public DoubleClickBidManager build() {
      return new DoubleClickBidManager(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link DoubleClickBidManagerRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setDoubleClickBidManagerRequestInitializer(
        DoubleClickBidManagerRequestInitializer doubleclickbidmanagerRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(doubleclickbidmanagerRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
