{
  "canonicalName": "Cloud Memorystore for Memcached",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "protocol": "rest",
  "title": "Cloud Memorystore for Memcached API",
  "rootUrl": "https://memcache.googleapis.com/",
  "servicePath": "",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "mtlsRootUrl": "https://memcache.mtls.googleapis.com/",
  "description": "Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.",
  "revision": "20200817",
  "version": "v1beta2",
  "discoveryVersion": "v1",
  "id": "memcache:v1beta2",
  "name": "memcache",
  "documentationLink": "https://cloud.google.com/memorystore/",
  "batchPath": "batch",
  "kind": "discovery#restDescription",
  "parameters": {
    "alt": {
      "description": "Data format for response.",
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "$.xgafv": {
      "location": "query",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ]
    },
    "key": {
      "location": "query",
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "uploadType": {
      "type": "string",
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "baseUrl": "https://memcache.googleapis.com/",
  "basePath": "",
  "schemas": {
    "GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility": {
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility",
      "properties": {
        "eligible": {
          "type": "boolean",
          "description": "Whether an instance is eligible or ineligible."
        },
        "reason": {
          "type": "string",
          "description": "User-defined reason for the current value of instance eligibility. Usually, this can be directly mapped to the internal state. An empty reason is allowed."
        }
      },
      "description": "SloEligibility is a tuple containing eligibility value: true if an instance is eligible for SLO calculation or false if it should be excluded from all SLO-related calculations along with a user-defined reason.",
      "type": "object"
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings": {
      "properties": {
        "exclude": {
          "description": "Optional. Exclude instance from maintenance. When true, rollout service will not attempt maintenance on the instance. Rollout service will include the instance in reported rollout progress as not attempted.",
          "type": "boolean"
        }
      },
      "description": "Maintenance settings associated with instance. Allows service producers and end users to assign settings that controls maintenance on this instance.",
      "type": "object",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings"
    },
    "OperationMetadata": {
      "type": "object",
      "properties": {
        "verb": {
          "readOnly": true,
          "description": "Output only. Name of the verb executed by the operation.",
          "type": "string"
        },
        "endTime": {
          "description": "Output only. Time when the operation finished running.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "cancelRequested": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
        },
        "createTime": {
          "type": "string",
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. Time when the operation was created."
        },
        "statusDetail": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Human-readable status of the operation, if any."
        },
        "apiVersion": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. API version used to start the operation."
        },
        "target": {
          "type": "string",
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true
        }
      },
      "id": "OperationMetadata",
      "description": "Represents the metadata of a long-running operation."
    },
    "GoogleCloudMemcacheV1beta2OperationMetadata": {
      "id": "GoogleCloudMemcacheV1beta2OperationMetadata",
      "description": "Represents the metadata of a long-running operation.",
      "type": "object",
      "properties": {
        "createTime": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Time when the operation was created.",
          "format": "google-datetime"
        },
        "statusDetail": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Human-readable status of the operation, if any."
        },
        "cancelRequested": {
          "type": "boolean",
          "description": "Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "readOnly": true
        },
        "endTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Time when the operation finished running.",
          "format": "google-datetime"
        },
        "verb": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Name of the verb executed by the operation."
        },
        "target": {
          "description": "Output only. Server-defined resource path for the target of the operation.",
          "readOnly": true,
          "type": "string"
        },
        "apiVersion": {
          "type": "string",
          "description": "Output only. API version used to start the operation.",
          "readOnly": true
        }
      }
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule": {
      "properties": {
        "canReschedule": {
          "description": "Can this scheduled update be rescheduled? By default, it's true and API needs to do explicitly check whether it's set, if it's set as false explicitly, it's false",
          "type": "boolean"
        },
        "endTime": {
          "format": "google-datetime",
          "description": "The scheduled end time for the maintenance.",
          "type": "string"
        },
        "rolloutManagementPolicy": {
          "description": "The rollout management policy this maintenance schedule is associated with. When doing reschedule update request, the reschedule should be against this given policy.",
          "type": "string"
        },
        "startTime": {
          "format": "google-datetime",
          "description": "The scheduled start time for the maintenance.",
          "type": "string"
        }
      },
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule",
      "description": "Maintenance schedule which is exposed to customer and potentially end user, indicating published upcoming future maintenance schedule",
      "type": "object"
    },
    "Instance": {
      "id": "Instance",
      "type": "object",
      "properties": {
        "nodeConfig": {
          "$ref": "NodeConfig",
          "description": "Required. Configuration for Memcached nodes."
        },
        "instanceMessages": {
          "items": {
            "$ref": "InstanceMessage"
          },
          "type": "array",
          "description": "List of messages that describe current statuses of memcached instance."
        },
        "zones": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Zones where Memcached nodes should be provisioned in. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources",
          "type": "object"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "Output only. The time the instance was created.",
          "type": "string",
          "readOnly": true
        },
        "memcacheFullVersion": {
          "type": "string",
          "description": "Output only. The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be \"memcached-1.5.16\".",
          "readOnly": true
        },
        "memcacheNodes": {
          "type": "array",
          "items": {
            "$ref": "Node"
          },
          "readOnly": true,
          "description": "Output only. List of Memcached nodes. Refer to [Node] message for more details."
        },
        "nodeCount": {
          "description": "Required. Number of nodes in the Memcached instance.",
          "format": "int32",
          "type": "integer"
        },
        "parameters": {
          "description": "Optional: User defined parameters to apply to the memcached process on each node.",
          "$ref": "MemcacheParameters"
        },
        "authorizedNetwork": {
          "description": "The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used.",
          "type": "string"
        },
        "name": {
          "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at regional level so location_id here refers to a GCP region; however, users may choose which zones Memcached nodes within an instances should be provisioned in. Refer to [zones] field for more details.",
          "type": "string"
        },
        "state": {
          "description": "Output only. The state of this Memcached instance.",
          "readOnly": true,
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "DELETING",
            "PERFORMING_MAINTENANCE"
          ],
          "enumDescriptions": [
            "State not set.",
            "Memcached instance is being created.",
            "Memcached instance has been created and ready to be used.",
            "Memcached instance is being deleted.",
            "Memcached instance is going through maintenance, e.g. data plane rollout."
          ],
          "type": "string"
        },
        "updateTime": {
          "description": "Output only. The time the instance was updated.",
          "readOnly": true,
          "type": "string",
          "format": "google-datetime"
        },
        "memcacheVersion": {
          "enum": [
            "MEMCACHE_VERSION_UNSPECIFIED",
            "MEMCACHE_1_5"
          ],
          "description": "The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically determined by our system based on the latest supported minor version.",
          "type": "string",
          "enumDescriptions": [
            "",
            "Memcached 1.5 version."
          ]
        },
        "displayName": {
          "type": "string",
          "description": "User provided name for the instance only used for display purposes. Cannot be more than 80 characters."
        },
        "discoveryEndpoint": {
          "description": "Output only. Endpoint for Discovery API",
          "readOnly": true,
          "type": "string"
        }
      }
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource": {
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource",
      "type": "object",
      "description": "Describes provisioned dataplane resources.",
      "properties": {
        "resourceUrl": {
          "description": "URL identifying the resource, e.g. \"https://www.googleapis.com/compute/v1/projects/...)\".",
          "type": "string"
        },
        "resourceType": {
          "description": "Type of the resource. This can be either a GCP resource or a custom one (e.g. another cloud provider's VM). For GCP compute resources use singular form of the names listed in GCP compute API documentation (https://cloud.google.com/compute/docs/reference/rest/v1/), prefixed with 'compute-', for example: 'compute-instance', 'compute-disk', 'compute-autoscaler'.",
          "type": "string"
        }
      }
    },
    "Node": {
      "properties": {
        "parameters": {
          "$ref": "MemcacheParameters",
          "description": "User defined parameters currently applied to the node."
        },
        "state": {
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "Node state is not set.",
            "Node is being created.",
            "Node has been created and ready to be used.",
            "Node is being deleted.",
            "Node is being updated."
          ],
          "description": "Output only. Current state of the Memcached node.",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "DELETING",
            "UPDATING"
          ]
        },
        "port": {
          "readOnly": true,
          "type": "integer",
          "description": "Output only. The port number of the Memcached server on this node.",
          "format": "int32"
        },
        "nodeId": {
          "type": "string",
          "description": "Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.",
          "readOnly": true
        },
        "host": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node."
        },
        "zone": {
          "readOnly": true,
          "description": "Output only. Location (GCP Zone) for the Memcached node.",
          "type": "string"
        }
      },
      "id": "Node",
      "type": "object"
    },
    "ListLocationsResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        },
        "locations": {
          "type": "array",
          "description": "A list of locations that matches the specified filter in the request.",
          "items": {
            "$ref": "Location"
          }
        }
      },
      "id": "ListLocationsResponse",
      "description": "The response message for Locations.ListLocations.",
      "type": "object"
    },
    "Operation": {
      "properties": {
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          }
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        }
      },
      "type": "object",
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a network API call."
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion": {
      "description": "SloExclusion represents an exclusion in SLI calculation applies to all SLOs.",
      "type": "object",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion",
      "properties": {
        "startTime": {
          "description": "Start time of the exclusion. No alignment (e.g. to a full minute) needed.",
          "format": "google-datetime",
          "type": "string"
        },
        "sliName": {
          "type": "string",
          "description": "Name of an SLI that this exclusion applies to. Can be left empty, signaling that the instance should be excluded from all SLIs defined in the service SLO configuration."
        },
        "reason": {
          "type": "string",
          "description": "Human-readable reason for the exclusion. This should be a static string (e.g. \"Disruptive update in progress\") and should not contain dynamically generated data (e.g. instance name). Can be left empty."
        },
        "duration": {
          "format": "google-duration",
          "type": "string",
          "description": "Exclusion duration. No restrictions on the possible values. When an ongoing operation is taking longer than initially expected, an existing entry in the exclusion list can be updated by extending the duration. This is supported by the subsystem exporting eligibility data as long as such extension is committed at least 10 minutes before the original exclusion expiration - otherwise it is possible that there will be \"gaps\" in the exclusion application in the exported timeseries."
        }
      }
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1Instance": {
      "type": "object",
      "properties": {
        "tenantProjectId": {
          "description": "Output only. ID of the associated GCP tenant project. See go/get-instance-metadata.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Unique name of the resource. It uses the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}`"
        },
        "labels": {
          "description": "Optional. Resource labels to represent user provided metadata. Each label is a key-value pair, where both the key and the value are arbitrary strings provided by the user.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "consumerDefinedName": {
          "description": "consumer_defined_name is the name that is set by the consumer. On the other hand Name field represents system-assigned id of an instance so consumers are not necessarily aware of it. consumer_defined_name is used for notification/UI purposes for consumer to recognize their instances.",
          "type": "string"
        },
        "provisionedResources": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource"
          },
          "readOnly": true,
          "description": "Output only. The list of data plane resources provisioned for this instance, e.g. compute VMs. See go/get-instance-metadata."
        },
        "producerMetadata": {
          "description": "Output only. Custom string attributes used primarily to expose producer-specific information in monitoring dashboards. See go/get-instance-metadata.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "updateTime": {
          "description": "Output only. Timestamp when the resource was last modified.",
          "type": "string",
          "format": "google-datetime",
          "readOnly": true
        },
        "maintenanceSchedules": {
          "type": "object",
          "additionalProperties": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule"
          },
          "description": "The MaintenanceSchedule contains the scheduling information of published maintenance schedule."
        },
        "softwareVersions": {
          "type": "object",
          "description": "Software versions that are used to deploy this instance. This can be mutated by rollout services.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "slmInstanceTemplate": {
          "type": "string",
          "description": "Link to the SLM instance template. Only populated when updating SLM instances via SSA's Actuation service adaptor. Service producers with custom control plane (e.g. Cloud SQL) doesn't need to populate this field. Instead they should use software_versions."
        },
        "maintenanceSettings": {
          "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings",
          "description": "Optional. The MaintenanceSettings associated with instance."
        },
        "maintenancePolicyNames": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The MaintenancePolicies that have been attached to the instance. The key must be of the type name of the oneof policy name defined in MaintenancePolicy, and the referenced policy must define the same policy type. For complete details of MaintenancePolicy, please refer to go/cloud-saas-mw-ug.",
          "type": "object"
        },
        "state": {
          "enumDescriptions": [
            "Unspecified state.",
            "Instance is being created.",
            "Instance has been created and is ready to use.",
            "Instance is being updated.",
            "Instance is unheathy and under repair.",
            "Instance is being deleted.",
            "Instance encountered an error and is in indeterministic state."
          ],
          "description": "Output only. Current lifecycle state of the resource (e.g. if it's being created or ready to use).",
          "enum": [
            "STATE_UNSPECIFIED",
            "CREATING",
            "READY",
            "UPDATING",
            "REPAIRING",
            "DELETING",
            "ERROR"
          ],
          "type": "string",
          "readOnly": true
        },
        "sloMetadata": {
          "description": "Output only. SLO metadata for instance classification in the Standardized dataplane SLO platform. See go/cloud-ssa-standard-slo for feature description.",
          "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata",
          "readOnly": true
        },
        "createTime": {
          "readOnly": true,
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. Timestamp when the resource was created."
        }
      },
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1Instance"
    },
    "NodeConfig": {
      "id": "NodeConfig",
      "description": "Configuration for a Memcached Node.",
      "type": "object",
      "properties": {
        "memorySizeMb": {
          "type": "integer",
          "description": "Required. Memory size in MiB for each Memcached node.",
          "format": "int32"
        },
        "cpuCount": {
          "description": "Required. Number of cpus per Memcached node.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "MemcacheParameters": {
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes and any action needs to be taken to apply parameters on nodes."
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "User defined set of parameters to use in the memcached process."
        }
      },
      "id": "MemcacheParameters",
      "type": "object"
    },
    "ZoneMetadata": {
      "type": "object",
      "properties": {},
      "id": "ZoneMetadata"
    },
    "Empty": {
      "type": "object",
      "properties": {},
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`."
    },
    "InstanceMessage": {
      "id": "InstanceMessage",
      "properties": {
        "message": {
          "type": "string",
          "description": "Message on memcached instance which will be exposed to users."
        },
        "code": {
          "type": "string",
          "description": "A code that correspond to one type of user-facing message.",
          "enumDescriptions": [
            "Message Code not set.",
            "Memcached nodes are distributed unevenly."
          ],
          "enum": [
            "CODE_UNSPECIFIED",
            "ZONE_DISTRIBUTION_UNBALANCED"
          ]
        }
      },
      "type": "object"
    },
    "GoogleCloudMemcacheV1beta2LocationMetadata": {
      "type": "object",
      "description": "Metadata for the given google.cloud.location.Location.",
      "properties": {
        "availableZones": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "ZoneMetadata"
          },
          "description": "Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by GCE. These keys can be specified in the `zones` field when creating a Memcached instance."
        }
      },
      "id": "GoogleCloudMemcacheV1beta2LocationMetadata"
    },
    "Location": {
      "properties": {
        "name": {
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "description": "Service-specific metadata. For example the available capacity at the given location."
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\".",
          "type": "string"
        }
      },
      "description": "A resource that represents Google Cloud Platform location.",
      "id": "Location",
      "type": "object"
    },
    "ListInstancesResponse": {
      "id": "ListInstancesResponse",
      "properties": {
        "unreachable": {
          "description": "Locations that could not be reached.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results, or empty if there are no more results in the list."
        },
        "resources": {
          "type": "array",
          "description": "A list of Memcached instances in the project in the specified location, or across all locations. If the `location_id` in the parent field of the request is \"-\", all regions available to the project are queried, and the results aggregated.",
          "items": {
            "$ref": "Instance"
          }
        }
      },
      "type": "object",
      "description": "Response for ListInstances."
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata": {
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata"
          },
          "description": "Optional. List of nodes. Some producers need to use per-node metadata to calculate SLO. This field allows such producers to publish per-node SLO meta data, which will be consumed by SSA Eligibility Exporter and published in the form of per node metric to Monarch."
        },
        "eligibility": {
          "description": "Optional. User-defined instance eligibility.",
          "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility"
        },
        "exclusions": {
          "items": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion"
          },
          "description": "List of SLO exclusion windows. When multiple entries in the list match (matching the exclusion time-window against current time point) the exclusion reason used in the first matching entry will be published. It is not needed to include expired exclusion in this list, as only the currently applicable exclusions are taken into account by the eligibility exporting subsystem (the historical state of exclusions will be reflected in the historically produced timeseries regardless of the current state). This field can be used to mark the instance as temporary ineligible for the purpose of SLO calculation. For permanent instance SLO exclusion, use of custom instance eligibility is recommended. See 'eligibility' field below.",
          "type": "array"
        },
        "tier": {
          "description": "Name of the SLO tier the Instance belongs to. This name will be expected to match the tiers specified in the service SLO configuration. Field is mandatory and must not be empty.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "SloMetadata contains resources required for proper SLO classification of the instance.",
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata"
    },
    "ApplyParametersRequest": {
      "id": "ApplyParametersRequest",
      "type": "object",
      "description": "Request for ApplyParameters.",
      "properties": {
        "nodeIds": {
          "description": "Nodes to which we should apply the instance-level parameter group.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "applyAll": {
          "type": "boolean",
          "description": "Whether to apply instance-level parameter group to all nodes. If set to true, will explicitly restrict users from specifying any nodes, and apply parameter group updates to all nodes within the instance."
        }
      }
    },
    "CancelOperationRequest": {
      "description": "The request message for Operations.CancelOperation.",
      "properties": {},
      "id": "CancelOperationRequest",
      "type": "object"
    },
    "ListOperationsResponse": {
      "properties": {
        "operations": {
          "type": "array",
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "Operation"
          }
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "The response message for Operations.ListOperations.",
      "id": "ListOperationsResponse"
    },
    "UpdateParametersRequest": {
      "properties": {
        "parameters": {
          "$ref": "MemcacheParameters",
          "description": "The parameters to apply to the instance."
        },
        "updateMask": {
          "description": "Required. Mask of fields to update.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "id": "UpdateParametersRequest",
      "type": "object",
      "description": "Request for UpdateParameters."
    },
    "Status": {
      "properties": {
        "details": {
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        },
        "code": {
          "type": "integer",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata": {
      "properties": {
        "exclusions": {
          "items": {
            "$ref": "GoogleCloudSaasacceleratorManagementProvidersV1SloExclusion"
          },
          "description": "By default node is eligible if instance is eligible. But individual node might be excluded from SLO by adding entry here. For semantic see SloMetadata.exclusions. If both instance and node level exclusions are present for time period, the node level's reason will be reported by Eligibility Exporter.",
          "type": "array"
        },
        "nodeId": {
          "description": "The id of the node. This should be equal to SaasInstanceNode.node_id.",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "The location of the node, if different from instance location."
        }
      },
      "id": "GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata",
      "type": "object",
      "description": "Node information for custom per-node SLO implementations. SSA does not support per-node SLO, but producers can populate per-node information in SloMetadata for custom precomputations. SSA Eligibility Exporter will emit per-node metric based on this information."
    }
  },
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "methods": {
            "list": {
              "description": "Lists information about the supported locations for this service.",
              "httpMethod": "GET",
              "path": "v1beta2/{+name}/locations",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "memcache.projects.locations.list",
              "flatPath": "v1beta2/projects/{projectsId}/locations",
              "parameters": {
                "filter": {
                  "location": "query",
                  "type": "string",
                  "description": "The standard list filter."
                },
                "pageSize": {
                  "format": "int32",
                  "location": "query",
                  "description": "The standard list page size.",
                  "type": "integer"
                },
                "pageToken": {
                  "type": "string",
                  "description": "The standard list page token.",
                  "location": "query"
                },
                "name": {
                  "pattern": "^projects/[^/]+$",
                  "type": "string",
                  "description": "The resource that owns the locations collection, if applicable.",
                  "required": true,
                  "location": "path"
                }
              },
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "parameterOrder": [
                "name"
              ]
            },
            "get": {
              "response": {
                "$ref": "Location"
              },
              "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets information about a location.",
              "id": "memcache.projects.locations.get",
              "httpMethod": "GET",
              "parameterOrder": [
                "name"
              ],
              "path": "v1beta2/{+name}",
              "parameters": {
                "name": {
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "type": "string",
                  "location": "path",
                  "description": "Resource name for the location.",
                  "required": true
                }
              }
            }
          },
          "resources": {
            "instances": {
              "methods": {
                "delete": {
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Deletes a single Instance.",
                  "id": "memcache.projects.locations.instances.delete",
                  "httpMethod": "DELETE",
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "location": "path",
                      "required": true,
                      "description": "Required. Memcached instance resource name in the format: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` where `location_id` refers to a GCP region",
                      "type": "string"
                    }
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1beta2/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "patch": {
                  "parameters": {
                    "updateMask": {
                      "format": "google-fieldmask",
                      "location": "query",
                      "description": "Required. Mask of fields to update. * `displayName`",
                      "type": "string"
                    },
                    "name": {
                      "type": "string",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at regional level so location_id here refers to a GCP region; however, users may choose which zones Memcached nodes within an instances should be provisioned in. Refer to [zones] field for more details.",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "memcache.projects.locations.instances.patch",
                  "httpMethod": "PATCH",
                  "path": "v1beta2/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "request": {
                    "$ref": "Instance"
                  },
                  "description": "Updates an existing Instance in a given project and location."
                },
                "create": {
                  "description": "Creates a new Instance in a given project and location.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "request": {
                    "$ref": "Instance"
                  },
                  "parameters": {
                    "instanceId": {
                      "location": "query",
                      "type": "string",
                      "description": "Required. The logical name of the Memcached instance in the user project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-40 characters. * Must end with a number or a letter. * Must be unique within the user project / location"
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. The resource name of the instance location using the form: `projects/{project_id}/locations/{location_id}` where `location_id` refers to a GCP region",
                      "required": true,
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "path": "v1beta2/{+parent}/instances",
                  "id": "memcache.projects.locations.instances.create",
                  "httpMethod": "POST",
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances"
                },
                "updateParameters": {
                  "path": "v1beta2/{+name}:updateParameters",
                  "id": "memcache.projects.locations.instances.updateParameters",
                  "httpMethod": "PATCH",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "description": "Required. Resource name of the Memcached instance for which the parameters should be updated."
                    }
                  },
                  "request": {
                    "$ref": "UpdateParametersRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:updateParameters",
                  "description": "Updates the defined Memcached Parameters for an existing Instance. This method only stages the parameters, it must be followed by ApplyParameters to apply the parameters to nodes of the Memcached Instance."
                },
                "get": {
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "required": true,
                      "description": "Required. Memcached instance resource name in the format: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` where `location_id` refers to a GCP region"
                    }
                  },
                  "path": "v1beta2/{+name}",
                  "httpMethod": "GET",
                  "id": "memcache.projects.locations.instances.get",
                  "response": {
                    "$ref": "Instance"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets details of a single Instance."
                },
                "applyParameters": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "description": "Required. Resource name of the Memcached instance for which parameter group updates should be applied.",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:applyParameters",
                  "id": "memcache.projects.locations.instances.applyParameters",
                  "path": "v1beta2/{+name}:applyParameters",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "ApplyParametersRequest"
                  },
                  "description": "ApplyParameters will update current set of Parameters to the set of specified nodes of the Memcached Instance.",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  }
                },
                "list": {
                  "httpMethod": "GET",
                  "description": "Lists Instances in a given project and location.",
                  "id": "memcache.projects.locations.instances.list",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1beta2/{+parent}/instances",
                  "response": {
                    "$ref": "ListInstancesResponse"
                  },
                  "parameters": {
                    "orderBy": {
                      "type": "string",
                      "location": "query",
                      "description": "Sort results. Supported values are \"name\", \"name desc\" or \"\" (unsorted)."
                    },
                    "parent": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "description": "Required. The resource name of the instance location using the form: `projects/{project_id}/locations/{location_id}` where `location_id` refers to a GCP region"
                    },
                    "filter": {
                      "location": "query",
                      "type": "string",
                      "description": "List filter. For example, exclude all Memcached instances with name as my-instance by specifying \"name != my-instance\"."
                    },
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "The next_page_token value returned from a previous List request, if any."
                    },
                    "pageSize": {
                      "location": "query",
                      "format": "int32",
                      "description": "The maximum number of items to return. If not specified, a default value of 1000 will be used by the service. Regardless of the page_size value, the response may include a partial list and a caller should only rely on response's next_page_token to determine if there are more instances left to be queried.",
                      "type": "integer"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances"
                }
              }
            },
            "operations": {
              "methods": {
                "delete": {
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
                  "id": "memcache.projects.locations.operations.delete",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be deleted.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "type": "string",
                      "required": true
                    }
                  },
                  "httpMethod": "DELETE",
                  "response": {
                    "$ref": "Empty"
                  },
                  "path": "v1beta2/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ]
                },
                "get": {
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "memcache.projects.locations.operations.get",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "description": "The name of the operation resource.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$"
                    }
                  },
                  "path": "v1beta2/{+name}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET"
                },
                "cancel": {
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource to be cancelled.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "required": true
                    }
                  },
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "path": "v1beta2/{+name}:cancel",
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "id": "memcache.projects.locations.operations.cancel",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "name"
                  ]
                },
                "list": {
                  "parameters": {
                    "filter": {
                      "type": "string",
                      "description": "The standard list filter.",
                      "location": "query"
                    },
                    "name": {
                      "description": "The name of the operation's parent resource.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string"
                    },
                    "pageToken": {
                      "description": "The standard list page token.",
                      "type": "string",
                      "location": "query"
                    },
                    "pageSize": {
                      "location": "query",
                      "format": "int32",
                      "type": "integer",
                      "description": "The standard list page size."
                    }
                  },
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
                  "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/operations",
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1beta2/{+name}/operations",
                  "id": "memcache.projects.locations.operations.list"
                }
              }
            }
          }
        }
      }
    }
  },
  "fullyEncodeReservedExpansion": true,
  "version_module": true
}
