/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * Meta data for drive documents.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata extends com.google.api.client.json.GenericJson {

  /**
   * The drive document cosmo id. Client could use the id to build a URL to open a document. Please
   * use Document.document_id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String documentId;

  /**
   * Additional field to identify whether a document is private since scope set to LIMITED can mean
   * both that the doc is private or that it's shared with others. is_private indicates whether the
   * doc is not shared with anyone except for the owner.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isPrivate;

  /**
   * Timestamp of the most recent comment added to the document in milliseconds since epoch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger lastCommentTimeMs;

  /**
   * Timestamp of the most recent edit from the current user in milliseconds since epoch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger lastEditTimeMs;

  /**
   * Last modification time of the document (independent of the user that modified it).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long lastModificationTimeMillis;

  /**
   * Timestamp of the last updated time of the document in milliseconds since epoch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger lastUpdatedTimeMs;

  /**
   * Timestamp of the most recent view from the current user in milliseconds since epoch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger lastViewTimeMs;

  /**
   * The owner of the document.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private EnterpriseTopazSidekickCommonPerson owner;

  /**
   * ACL scope of the document which identifies the sharing status of the doc (e.g., limited, shared
   * with link, team drive, ...).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String scope;

  /**
   * The drive document cosmo id. Client could use the id to build a URL to open a document. Please
   * use Document.document_id.
   * @return value or {@code null} for none
   */
  public java.lang.String getDocumentId() {
    return documentId;
  }

  /**
   * The drive document cosmo id. Client could use the id to build a URL to open a document. Please
   * use Document.document_id.
   * @param documentId documentId or {@code null} for none
   */
  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata setDocumentId(java.lang.String documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * Additional field to identify whether a document is private since scope set to LIMITED can mean
   * both that the doc is private or that it's shared with others. is_private indicates whether the
   * doc is not shared with anyone except for the owner.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsPrivate() {
    return isPrivate;
  }

  /**
   * Additional field to identify whether a document is private since scope set to LIMITED can mean
   * both that the doc is private or that it's shared with others. is_private indicates whether the
   * doc is not shared with anyone except for the owner.
   * @param isPrivate isPrivate or {@code null} for none
   */
  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata setIsPrivate(java.lang.Boolean isPrivate) {
    this.isPrivate = isPrivate;
    return this;
  }

  /**
   * Timestamp of the most recent comment added to the document in milliseconds since epoch.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getLastCommentTimeMs() {
    return lastCommentTimeMs;
  }

  /**
   * Timestamp of the most recent comment added to the document in milliseconds since epoch.
   * @param lastCommentTimeMs lastCommentTimeMs or {@code null} for none
   */
  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata setLastCommentTimeMs(java.math.BigInteger lastCommentTimeMs) {
    this.lastCommentTimeMs = lastCommentTimeMs;
    return this;
  }

  /**
   * Timestamp of the most recent edit from the current user in milliseconds since epoch.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getLastEditTimeMs() {
    return lastEditTimeMs;
  }

  /**
   * Timestamp of the most recent edit from the current user in milliseconds since epoch.
   * @param lastEditTimeMs lastEditTimeMs or {@code null} for none
   */
  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata setLastEditTimeMs(java.math.BigInteger lastEditTimeMs) {
    this.lastEditTimeMs = lastEditTimeMs;
    return this;
  }

  /**
   * Last modification time of the document (independent of the user that modified it).
   * @return value or {@code null} for none
   */
  public java.lang.Long getLastModificationTimeMillis() {
    return lastModificationTimeMillis;
  }

  /**
   * Last modification time of the document (independent of the user that modified it).
   * @param lastModificationTimeMillis lastModificationTimeMillis or {@code null} for none
   */
  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata setLastModificationTimeMillis(java.lang.Long lastModificationTimeMillis) {
    this.lastModificationTimeMillis = lastModificationTimeMillis;
    return this;
  }

  /**
   * Timestamp of the last updated time of the document in milliseconds since epoch.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getLastUpdatedTimeMs() {
    return lastUpdatedTimeMs;
  }

  /**
   * Timestamp of the last updated time of the document in milliseconds since epoch.
   * @param lastUpdatedTimeMs lastUpdatedTimeMs or {@code null} for none
   */
  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata setLastUpdatedTimeMs(java.math.BigInteger lastUpdatedTimeMs) {
    this.lastUpdatedTimeMs = lastUpdatedTimeMs;
    return this;
  }

  /**
   * Timestamp of the most recent view from the current user in milliseconds since epoch.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getLastViewTimeMs() {
    return lastViewTimeMs;
  }

  /**
   * Timestamp of the most recent view from the current user in milliseconds since epoch.
   * @param lastViewTimeMs lastViewTimeMs or {@code null} for none
   */
  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata setLastViewTimeMs(java.math.BigInteger lastViewTimeMs) {
    this.lastViewTimeMs = lastViewTimeMs;
    return this;
  }

  /**
   * The owner of the document.
   * @return value or {@code null} for none
   */
  public EnterpriseTopazSidekickCommonPerson getOwner() {
    return owner;
  }

  /**
   * The owner of the document.
   * @param owner owner or {@code null} for none
   */
  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata setOwner(EnterpriseTopazSidekickCommonPerson owner) {
    this.owner = owner;
    return this;
  }

  /**
   * ACL scope of the document which identifies the sharing status of the doc (e.g., limited, shared
   * with link, team drive, ...).
   * @return value or {@code null} for none
   */
  public java.lang.String getScope() {
    return scope;
  }

  /**
   * ACL scope of the document which identifies the sharing status of the doc (e.g., limited, shared
   * with link, team drive, ...).
   * @param scope scope or {@code null} for none
   */
  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata setScope(java.lang.String scope) {
    this.scope = scope;
    return this;
  }

  @Override
  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata set(String fieldName, Object value) {
    return (EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata) super.set(fieldName, value);
  }

  @Override
  public EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata clone() {
    return (EnterpriseTopazSidekickCommonDocumentDriveDocumentMetadata) super.clone();
  }

}
