/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * A collection of information that applies to a toll cluster.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GeostoreTollClusterProto extends com.google.api.client.json.GenericJson {

  /**
   * The list of TYPE_INTERSECTION features that are toll points and form this toll cluster. A toll
   * cluser can consist of either a single or a group of intersection points called toll points at
   * the end of various road segments in MapFacts that represent one or more lanes passing through a
   * toll fixture that all go to the same routing destination. This relationship is reciprocal, as a
   * toll point intersection also stores a reference to the toll cluster it belongs to. A toll
   * cluster must have reference to one or more toll points i.e. toll_cluster.intersection should
   * always be populated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GeostoreFeatureIdProto> intersection;

  static {
    // hack to force ProGuard to consider GeostoreFeatureIdProto used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GeostoreFeatureIdProto.class);
  }

  /**
   * The list of TYPE_INTERSECTION features that are toll points and form this toll cluster. A toll
   * cluser can consist of either a single or a group of intersection points called toll points at
   * the end of various road segments in MapFacts that represent one or more lanes passing through a
   * toll fixture that all go to the same routing destination. This relationship is reciprocal, as a
   * toll point intersection also stores a reference to the toll cluster it belongs to. A toll
   * cluster must have reference to one or more toll points i.e. toll_cluster.intersection should
   * always be populated.
   * @return value or {@code null} for none
   */
  public java.util.List<GeostoreFeatureIdProto> getIntersection() {
    return intersection;
  }

  /**
   * The list of TYPE_INTERSECTION features that are toll points and form this toll cluster. A toll
   * cluser can consist of either a single or a group of intersection points called toll points at
   * the end of various road segments in MapFacts that represent one or more lanes passing through a
   * toll fixture that all go to the same routing destination. This relationship is reciprocal, as a
   * toll point intersection also stores a reference to the toll cluster it belongs to. A toll
   * cluster must have reference to one or more toll points i.e. toll_cluster.intersection should
   * always be populated.
   * @param intersection intersection or {@code null} for none
   */
  public GeostoreTollClusterProto setIntersection(java.util.List<GeostoreFeatureIdProto> intersection) {
    this.intersection = intersection;
    return this;
  }

  @Override
  public GeostoreTollClusterProto set(String fieldName, Object value) {
    return (GeostoreTollClusterProto) super.set(fieldName, value);
  }

  @Override
  public GeostoreTollClusterProto clone() {
    return (GeostoreTollClusterProto) super.clone();
  }

}
