/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.serviceusage.v1.model;

/**
 * Settings for Java client libraries.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Service Usage API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class JavaSettings extends com.google.api.client.json.GenericJson {

  /**
   * Some settings.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CommonLanguageSettings common;

  /**
   * The package name to use in Java. Clobbers the java_package option set in the protobuf. This
   * should be used **only** by APIs who have already set the language_settings.java.package_name"
   * field in gapic.yaml. API teams should use the protobuf java_package option where possible.
   * Example of a YAML configuration:: publishing: java_settings: library_package:
   * com.google.cloud.pubsub.v1
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String libraryPackage;

  /**
   * Configure the Java class name to use instead of the service's for its corresponding generated
   * GAPIC client. Keys are fully-qualified service names as they appear in the protobuf (including
   * the full the language_settings.java.interface_names" field in gapic.yaml. API teams should
   * otherwise use the service name as it appears in the protobuf. Example of a YAML configuration::
   * publishing: java_settings: service_class_names: - google.pubsub.v1.Publisher: TopicAdmin -
   * google.pubsub.v1.Subscriber: SubscriptionAdmin
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> serviceClassNames;

  /**
   * Some settings.
   * @return value or {@code null} for none
   */
  public CommonLanguageSettings getCommon() {
    return common;
  }

  /**
   * Some settings.
   * @param common common or {@code null} for none
   */
  public JavaSettings setCommon(CommonLanguageSettings common) {
    this.common = common;
    return this;
  }

  /**
   * The package name to use in Java. Clobbers the java_package option set in the protobuf. This
   * should be used **only** by APIs who have already set the language_settings.java.package_name"
   * field in gapic.yaml. API teams should use the protobuf java_package option where possible.
   * Example of a YAML configuration:: publishing: java_settings: library_package:
   * com.google.cloud.pubsub.v1
   * @return value or {@code null} for none
   */
  public java.lang.String getLibraryPackage() {
    return libraryPackage;
  }

  /**
   * The package name to use in Java. Clobbers the java_package option set in the protobuf. This
   * should be used **only** by APIs who have already set the language_settings.java.package_name"
   * field in gapic.yaml. API teams should use the protobuf java_package option where possible.
   * Example of a YAML configuration:: publishing: java_settings: library_package:
   * com.google.cloud.pubsub.v1
   * @param libraryPackage libraryPackage or {@code null} for none
   */
  public JavaSettings setLibraryPackage(java.lang.String libraryPackage) {
    this.libraryPackage = libraryPackage;
    return this;
  }

  /**
   * Configure the Java class name to use instead of the service's for its corresponding generated
   * GAPIC client. Keys are fully-qualified service names as they appear in the protobuf (including
   * the full the language_settings.java.interface_names" field in gapic.yaml. API teams should
   * otherwise use the service name as it appears in the protobuf. Example of a YAML configuration::
   * publishing: java_settings: service_class_names: - google.pubsub.v1.Publisher: TopicAdmin -
   * google.pubsub.v1.Subscriber: SubscriptionAdmin
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getServiceClassNames() {
    return serviceClassNames;
  }

  /**
   * Configure the Java class name to use instead of the service's for its corresponding generated
   * GAPIC client. Keys are fully-qualified service names as they appear in the protobuf (including
   * the full the language_settings.java.interface_names" field in gapic.yaml. API teams should
   * otherwise use the service name as it appears in the protobuf. Example of a YAML configuration::
   * publishing: java_settings: service_class_names: - google.pubsub.v1.Publisher: TopicAdmin -
   * google.pubsub.v1.Subscriber: SubscriptionAdmin
   * @param serviceClassNames serviceClassNames or {@code null} for none
   */
  public JavaSettings setServiceClassNames(java.util.Map<String, java.lang.String> serviceClassNames) {
    this.serviceClassNames = serviceClassNames;
    return this;
  }

  @Override
  public JavaSettings set(String fieldName, Object value) {
    return (JavaSettings) super.set(fieldName, value);
  }

  @Override
  public JavaSettings clone() {
    return (JavaSettings) super.clone();
  }

}
