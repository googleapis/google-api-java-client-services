/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.pubsublite.v1;

/**
 * Service definition for PubsubLite (v1).
 *
 * <p>
 * 
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="https://cloud.google.com/pubsub/lite/docs" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link PubsubLiteRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class PubsubLite extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        (com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 32 ||
        (com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION == 31 &&
        com.google.api.client.googleapis.GoogleUtils.BUGFIX_VERSION >= 1))) ||
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION >= 2,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.31.1 of google-api-client to run version " +
        "2.0.0 of the Pub/Sub Lite API library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://pubsublite.googleapis.com/";

  /**
   * The default encoded mTLS root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.31
   */
  public static final String DEFAULT_MTLS_ROOT_URL = "https://pubsublite.mtls.googleapis.com/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public PubsubLite(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  PubsubLite(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Admin collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code PubsubLite pubsublite = new PubsubLite(...);}
   *   {@code PubsubLite.Admin.List request = pubsublite.admin().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Admin admin() {
    return new Admin();
  }

  /**
   * The "admin" collection of methods.
   */
  public class Admin {

    /**
     * An accessor for creating requests from the Projects collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code PubsubLite pubsublite = new PubsubLite(...);}
     *   {@code PubsubLite.Projects.List request = pubsublite.projects().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Projects projects() {
      return new Projects();
    }

    /**
     * The "projects" collection of methods.
     */
    public class Projects {

      /**
       * An accessor for creating requests from the Locations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code PubsubLite pubsublite = new PubsubLite(...);}
       *   {@code PubsubLite.Locations.List request = pubsublite.locations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Locations locations() {
        return new Locations();
      }

      /**
       * The "locations" collection of methods.
       */
      public class Locations {

        /**
         * An accessor for creating requests from the Operations collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code PubsubLite pubsublite = new PubsubLite(...);}
         *   {@code PubsubLite.Operations.List request = pubsublite.operations().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Operations operations() {
          return new Operations();
        }

        /**
         * The "operations" collection of methods.
         */
        public class Operations {

          /**
           * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
           * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
           * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
           * methods to check whether the cancellation succeeded or whether the operation completed despite
           * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
           * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
           * `Code.CANCELLED`.
           *
           * Create a request for the method "operations.cancel".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
           *
           * @param name The name of the operation resource to be cancelled.
           * @param content the {@link com.google.api.services.pubsublite.v1.model.CancelOperationRequest}
           * @return the request
           */
          public Cancel cancel(java.lang.String name, com.google.api.services.pubsublite.v1.model.CancelOperationRequest content) throws java.io.IOException {
            Cancel result = new Cancel(name, content);
            initialize(result);
            return result;
          }

          public class Cancel extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Empty> {

            private static final String REST_PATH = "v1/admin/{+name}:cancel";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

            /**
             * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to
             * cancel the operation, but success is not guaranteed. If the server doesn't support this method,
             * it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other
             * methods to check whether the cancellation succeeded or whether the operation completed despite
             * cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an
             * operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to
             * `Code.CANCELLED`.
             *
             * Create a request for the method "operations.cancel".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Cancel#execute()} method to invoke the remote operation.
             * <p> {@link
             * Cancel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the operation resource to be cancelled.
             * @param content the {@link com.google.api.services.pubsublite.v1.model.CancelOperationRequest}
             * @since 1.13
             */
            protected Cancel(java.lang.String name, com.google.api.services.pubsublite.v1.model.CancelOperationRequest content) {
              super(PubsubLite.this, "POST", REST_PATH, content, com.google.api.services.pubsublite.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
              }
            }

            @Override
            public Cancel set$Xgafv(java.lang.String $Xgafv) {
              return (Cancel) super.set$Xgafv($Xgafv);
            }

            @Override
            public Cancel setAccessToken(java.lang.String accessToken) {
              return (Cancel) super.setAccessToken(accessToken);
            }

            @Override
            public Cancel setAlt(java.lang.String alt) {
              return (Cancel) super.setAlt(alt);
            }

            @Override
            public Cancel setCallback(java.lang.String callback) {
              return (Cancel) super.setCallback(callback);
            }

            @Override
            public Cancel setFields(java.lang.String fields) {
              return (Cancel) super.setFields(fields);
            }

            @Override
            public Cancel setKey(java.lang.String key) {
              return (Cancel) super.setKey(key);
            }

            @Override
            public Cancel setOauthToken(java.lang.String oauthToken) {
              return (Cancel) super.setOauthToken(oauthToken);
            }

            @Override
            public Cancel setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Cancel) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Cancel setQuotaUser(java.lang.String quotaUser) {
              return (Cancel) super.setQuotaUser(quotaUser);
            }

            @Override
            public Cancel setUploadType(java.lang.String uploadType) {
              return (Cancel) super.setUploadType(uploadType);
            }

            @Override
            public Cancel setUploadProtocol(java.lang.String uploadProtocol) {
              return (Cancel) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the operation resource to be cancelled. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the operation resource to be cancelled.
             */
            public java.lang.String getName() {
              return name;
            }

            /** The name of the operation resource to be cancelled. */
            public Cancel setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Cancel set(String parameterName, Object value) {
              return (Cancel) super.set(parameterName, value);
            }
          }
          /**
           * Deletes a long-running operation. This method indicates that the client is no longer interested
           * in the operation result. It does not cancel the operation. If the server doesn't support this
           * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.delete".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name The name of the operation resource to be deleted.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Empty> {

            private static final String REST_PATH = "v1/admin/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

            /**
             * Deletes a long-running operation. This method indicates that the client is no longer interested
             * in the operation result. It does not cancel the operation. If the server doesn't support this
             * method, it returns `google.rpc.Code.UNIMPLEMENTED`.
             *
             * Create a request for the method "operations.delete".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the operation resource to be deleted.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(PubsubLite.this, "DELETE", REST_PATH, null, com.google.api.services.pubsublite.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the operation resource to be deleted. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the operation resource to be deleted.
             */
            public java.lang.String getName() {
              return name;
            }

            /** The name of the operation resource to be deleted. */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Gets the latest state of a long-running operation. Clients can use this method to poll the
           * operation result at intervals as recommended by the API service.
           *
           * Create a request for the method "operations.get".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name The name of the operation resource.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Operation> {

            private static final String REST_PATH = "v1/admin/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/operations/[^/]+$");

            /**
             * Gets the latest state of a long-running operation. Clients can use this method to poll the
             * operation result at intervals as recommended by the API service.
             *
             * Create a request for the method "operations.get".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the operation resource.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(PubsubLite.this, "GET", REST_PATH, null, com.google.api.services.pubsublite.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the operation resource. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the operation resource.
             */
            public java.lang.String getName() {
              return name;
            }

            /** The name of the operation resource. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/operations/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Lists operations that match the specified filter in the request. If the server doesn't support
           * this method, it returns `UNIMPLEMENTED`.
           *
           * Create a request for the method "operations.list".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param name The name of the operation's parent resource.
           * @return the request
           */
          public List list(java.lang.String name) throws java.io.IOException {
            List result = new List(name);
            initialize(result);
            return result;
          }

          public class List extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.ListOperationsResponse> {

            private static final String REST_PATH = "v1/admin/{+name}/operations";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

            /**
             * Lists operations that match the specified filter in the request. If the server doesn't support
             * this method, it returns `UNIMPLEMENTED`.
             *
             * Create a request for the method "operations.list".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the operation's parent resource.
             * @since 1.13
             */
            protected List(java.lang.String name) {
              super(PubsubLite.this, "GET", REST_PATH, null, com.google.api.services.pubsublite.v1.model.ListOperationsResponse.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /** The name of the operation's parent resource. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the operation's parent resource.
             */
            public java.lang.String getName() {
              return name;
            }

            /** The name of the operation's parent resource. */
            public List setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /** The standard list filter. */
            @com.google.api.client.util.Key
            private java.lang.String filter;

            /** The standard list filter.
             */
            public java.lang.String getFilter() {
              return filter;
            }

            /** The standard list filter. */
            public List setFilter(java.lang.String filter) {
              this.filter = filter;
              return this;
            }

            /** The standard list page size. */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The standard list page size.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /** The standard list page size. */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /** The standard list page token. */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** The standard list page token.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /** The standard list page token. */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Reservations collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code PubsubLite pubsublite = new PubsubLite(...);}
         *   {@code PubsubLite.Reservations.List request = pubsublite.reservations().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Reservations reservations() {
          return new Reservations();
        }

        /**
         * The "reservations" collection of methods.
         */
        public class Reservations {

          /**
           * Creates a new reservation.
           *
           * Create a request for the method "reservations.create".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent location in which to create the reservation. Structured like
           *        `projects/{project_number}/locations/{location}`.
           * @param content the {@link com.google.api.services.pubsublite.v1.model.Reservation}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.pubsublite.v1.model.Reservation content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Reservation> {

            private static final String REST_PATH = "v1/admin/{+parent}/reservations";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

            /**
             * Creates a new reservation.
             *
             * Create a request for the method "reservations.create".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             * <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent location in which to create the reservation. Structured like
           *        `projects/{project_number}/locations/{location}`.
             * @param content the {@link com.google.api.services.pubsublite.v1.model.Reservation}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.pubsublite.v1.model.Reservation content) {
              super(PubsubLite.this, "POST", REST_PATH, content, com.google.api.services.pubsublite.v1.model.Reservation.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent location in which to create the reservation. Structured like
             * `projects/{project_number}/locations/{location}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent location in which to create the reservation. Structured like
           `projects/{project_number}/locations/{location}`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent location in which to create the reservation. Structured like
             * `projects/{project_number}/locations/{location}`.
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Required. The ID to use for the reservation, which will become the final component of
             * the reservation's name. This value is structured like: `my-reservation-name`.
             */
            @com.google.api.client.util.Key
            private java.lang.String reservationId;

            /** Required. The ID to use for the reservation, which will become the final component of the
           reservation's name. This value is structured like: `my-reservation-name`.
             */
            public java.lang.String getReservationId() {
              return reservationId;
            }

            /**
             * Required. The ID to use for the reservation, which will become the final component of
             * the reservation's name. This value is structured like: `my-reservation-name`.
             */
            public Create setReservationId(java.lang.String reservationId) {
              this.reservationId = reservationId;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes the specified reservation.
           *
           * Create a request for the method "reservations.delete".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the reservation to delete. Structured like:
           *        projects/{project_number}/locations/{location}/reservations/{reservation_id}
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Empty> {

            private static final String REST_PATH = "v1/admin/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/reservations/[^/]+$");

            /**
             * Deletes the specified reservation.
             *
             * Create a request for the method "reservations.delete".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the reservation to delete. Structured like:
           *        projects/{project_number}/locations/{location}/reservations/{reservation_id}
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(PubsubLite.this, "DELETE", REST_PATH, null, com.google.api.services.pubsublite.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/reservations/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the reservation to delete. Structured like:
             * projects/{project_number}/locations/{location}/reservations/{reservation_id}
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the reservation to delete. Structured like:
           projects/{project_number}/locations/{location}/reservations/{reservation_id}
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The name of the reservation to delete. Structured like:
             * projects/{project_number}/locations/{location}/reservations/{reservation_id}
             */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/reservations/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Returns the reservation configuration.
           *
           * Create a request for the method "reservations.get".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the reservation whose configuration to return. Structured like:
           *        projects/{project_number}/locations/{location}/reservations/{reservation_id}
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Reservation> {

            private static final String REST_PATH = "v1/admin/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/reservations/[^/]+$");

            /**
             * Returns the reservation configuration.
             *
             * Create a request for the method "reservations.get".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the reservation whose configuration to return. Structured like:
           *        projects/{project_number}/locations/{location}/reservations/{reservation_id}
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(PubsubLite.this, "GET", REST_PATH, null, com.google.api.services.pubsublite.v1.model.Reservation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/reservations/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The name of the reservation whose configuration to return. Structured like:
             * projects/{project_number}/locations/{location}/reservations/{reservation_id}
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the reservation whose configuration to return. Structured like:
           projects/{project_number}/locations/{location}/reservations/{reservation_id}
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * Required. The name of the reservation whose configuration to return. Structured like:
             * projects/{project_number}/locations/{location}/reservations/{reservation_id}
             */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/reservations/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Returns the list of reservations for the given project.
           *
           * Create a request for the method "reservations.list".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent whose reservations are to be listed. Structured like
           *        `projects/{project_number}/locations/{location}`.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.ListReservationsResponse> {

            private static final String REST_PATH = "v1/admin/{+parent}/reservations";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

            /**
             * Returns the list of reservations for the given project.
             *
             * Create a request for the method "reservations.list".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent whose reservations are to be listed. Structured like
           *        `projects/{project_number}/locations/{location}`.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(PubsubLite.this, "GET", REST_PATH, null, com.google.api.services.pubsublite.v1.model.ListReservationsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent whose reservations are to be listed. Structured like
             * `projects/{project_number}/locations/{location}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent whose reservations are to be listed. Structured like
           `projects/{project_number}/locations/{location}`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent whose reservations are to be listed. Structured like
             * `projects/{project_number}/locations/{location}`.
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * The maximum number of reservations to return. The service may return fewer than this
             * value. If unset or zero, all reservations for the parent will be returned.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of reservations to return. The service may return fewer than this value. If
           unset or zero, all reservations for the parent will be returned.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * The maximum number of reservations to return. The service may return fewer than this
             * value. If unset or zero, all reservations for the parent will be returned.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * A page token, received from a previous `ListReservations` call. Provide this to
             * retrieve the subsequent page. When paginating, all other parameters provided to
             * `ListReservations` must match the call that provided the page token.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** A page token, received from a previous `ListReservations` call. Provide this to retrieve the
           subsequent page. When paginating, all other parameters provided to `ListReservations` must match
           the call that provided the page token.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * A page token, received from a previous `ListReservations` call. Provide this to
             * retrieve the subsequent page. When paginating, all other parameters provided to
             * `ListReservations` must match the call that provided the page token.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates properties of the specified reservation.
           *
           * Create a request for the method "reservations.patch".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name The name of the reservation. Structured like:
           *        projects/{project_number}/locations/{location}/reservations/{reservation_id}
           * @param content the {@link com.google.api.services.pubsublite.v1.model.Reservation}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.pubsublite.v1.model.Reservation content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Reservation> {

            private static final String REST_PATH = "v1/admin/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/reservations/[^/]+$");

            /**
             * Updates properties of the specified reservation.
             *
             * Create a request for the method "reservations.patch".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             * <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the reservation. Structured like:
           *        projects/{project_number}/locations/{location}/reservations/{reservation_id}
             * @param content the {@link com.google.api.services.pubsublite.v1.model.Reservation}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.pubsublite.v1.model.Reservation content) {
              super(PubsubLite.this, "PATCH", REST_PATH, content, com.google.api.services.pubsublite.v1.model.Reservation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/reservations/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * The name of the reservation. Structured like:
             * projects/{project_number}/locations/{location}/reservations/{reservation_id}
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the reservation. Structured like:
           projects/{project_number}/locations/{location}/reservations/{reservation_id}
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * The name of the reservation. Structured like:
             * projects/{project_number}/locations/{location}/reservations/{reservation_id}
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/reservations/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /** Required. A mask specifying the reservation fields to change. */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Required. A mask specifying the reservation fields to change.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /** Required. A mask specifying the reservation fields to change. */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

          /**
           * An accessor for creating requests from the Topics collection.
           *
           * <p>The typical use is:</p>
           * <pre>
           *   {@code PubsubLite pubsublite = new PubsubLite(...);}
           *   {@code PubsubLite.Topics.List request = pubsublite.topics().list(parameters ...)}
           * </pre>
           *
           * @return the resource collection
           */
          public Topics topics() {
            return new Topics();
          }

          /**
           * The "topics" collection of methods.
           */
          public class Topics {

            /**
             * Lists the topics attached to the specified reservation.
             *
             * Create a request for the method "topics.list".
             *
             * This request holds the parameters needed by the pubsublite server.  After setting any optional
             * parameters, call the {@link List#execute()} method to invoke the remote operation.
             *
             * @param name Required. The name of the reservation whose topics to list. Structured like:
             *        projects/{project_number}/locations/{location}/reservations/{reservation_id}
             * @return the request
             */
            public List list(java.lang.String name) throws java.io.IOException {
              List result = new List(name);
              initialize(result);
              return result;
            }

            public class List extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.ListReservationTopicsResponse> {

              private static final String REST_PATH = "v1/admin/{+name}/topics";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/reservations/[^/]+$");

              /**
               * Lists the topics attached to the specified reservation.
               *
               * Create a request for the method "topics.list".
               *
               * This request holds the parameters needed by the the pubsublite server.  After setting any
               * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
               * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Required. The name of the reservation whose topics to list. Structured like:
             *        projects/{project_number}/locations/{location}/reservations/{reservation_id}
               * @since 1.13
               */
              protected List(java.lang.String name) {
                super(PubsubLite.this, "GET", REST_PATH, null, com.google.api.services.pubsublite.v1.model.ListReservationTopicsResponse.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/reservations/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public List set$Xgafv(java.lang.String $Xgafv) {
                return (List) super.set$Xgafv($Xgafv);
              }

              @Override
              public List setAccessToken(java.lang.String accessToken) {
                return (List) super.setAccessToken(accessToken);
              }

              @Override
              public List setAlt(java.lang.String alt) {
                return (List) super.setAlt(alt);
              }

              @Override
              public List setCallback(java.lang.String callback) {
                return (List) super.setCallback(callback);
              }

              @Override
              public List setFields(java.lang.String fields) {
                return (List) super.setFields(fields);
              }

              @Override
              public List setKey(java.lang.String key) {
                return (List) super.setKey(key);
              }

              @Override
              public List setOauthToken(java.lang.String oauthToken) {
                return (List) super.setOauthToken(oauthToken);
              }

              @Override
              public List setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (List) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public List setQuotaUser(java.lang.String quotaUser) {
                return (List) super.setQuotaUser(quotaUser);
              }

              @Override
              public List setUploadType(java.lang.String uploadType) {
                return (List) super.setUploadType(uploadType);
              }

              @Override
              public List setUploadProtocol(java.lang.String uploadProtocol) {
                return (List) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The name of the reservation whose topics to list. Structured like:
               * projects/{project_number}/locations/{location}/reservations/{reservation_id}
               */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Required. The name of the reservation whose topics to list. Structured like:
             projects/{project_number}/locations/{location}/reservations/{reservation_id}
               */
              public java.lang.String getName() {
                return name;
              }

              /**
               * Required. The name of the reservation whose topics to list. Structured like:
               * projects/{project_number}/locations/{location}/reservations/{reservation_id}
               */
              public List setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/reservations/[^/]+$");
                }
                this.name = name;
                return this;
              }

              /**
               * The maximum number of topics to return. The service may return fewer than this
               * value. If unset or zero, all topics for the given reservation will be returned.
               */
              @com.google.api.client.util.Key
              private java.lang.Integer pageSize;

              /** The maximum number of topics to return. The service may return fewer than this value. If unset or
             zero, all topics for the given reservation will be returned.
               */
              public java.lang.Integer getPageSize() {
                return pageSize;
              }

              /**
               * The maximum number of topics to return. The service may return fewer than this
               * value. If unset or zero, all topics for the given reservation will be returned.
               */
              public List setPageSize(java.lang.Integer pageSize) {
                this.pageSize = pageSize;
                return this;
              }

              /**
               * A page token, received from a previous `ListReservationTopics` call. Provide this
               * to retrieve the subsequent page. When paginating, all other parameters provided to
               * `ListReservationTopics` must match the call that provided the page token.
               */
              @com.google.api.client.util.Key
              private java.lang.String pageToken;

              /** A page token, received from a previous `ListReservationTopics` call. Provide this to retrieve the
             subsequent page. When paginating, all other parameters provided to `ListReservationTopics` must
             match the call that provided the page token.
               */
              public java.lang.String getPageToken() {
                return pageToken;
              }

              /**
               * A page token, received from a previous `ListReservationTopics` call. Provide this
               * to retrieve the subsequent page. When paginating, all other parameters provided to
               * `ListReservationTopics` must match the call that provided the page token.
               */
              public List setPageToken(java.lang.String pageToken) {
                this.pageToken = pageToken;
                return this;
              }

              @Override
              public List set(String parameterName, Object value) {
                return (List) super.set(parameterName, value);
              }
            }

          }
        }
        /**
         * An accessor for creating requests from the Subscriptions collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code PubsubLite pubsublite = new PubsubLite(...);}
         *   {@code PubsubLite.Subscriptions.List request = pubsublite.subscriptions().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Subscriptions subscriptions() {
          return new Subscriptions();
        }

        /**
         * The "subscriptions" collection of methods.
         */
        public class Subscriptions {

          /**
           * Creates a new subscription.
           *
           * Create a request for the method "subscriptions.create".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent location in which to create the subscription. Structured like
           *        `projects/{project_number}/locations/{location}`.
           * @param content the {@link com.google.api.services.pubsublite.v1.model.Subscription}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.pubsublite.v1.model.Subscription content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Subscription> {

            private static final String REST_PATH = "v1/admin/{+parent}/subscriptions";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

            /**
             * Creates a new subscription.
             *
             * Create a request for the method "subscriptions.create".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             * <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent location in which to create the subscription. Structured like
           *        `projects/{project_number}/locations/{location}`.
             * @param content the {@link com.google.api.services.pubsublite.v1.model.Subscription}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.pubsublite.v1.model.Subscription content) {
              super(PubsubLite.this, "POST", REST_PATH, content, com.google.api.services.pubsublite.v1.model.Subscription.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent location in which to create the subscription. Structured like
             * `projects/{project_number}/locations/{location}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent location in which to create the subscription. Structured like
           `projects/{project_number}/locations/{location}`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent location in which to create the subscription. Structured like
             * `projects/{project_number}/locations/{location}`.
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * If true, the newly created subscription will only receive messages published after
             * the subscription was created. Otherwise, the entire message backlog will be received
             * on the subscription. Defaults to false.
             */
            @com.google.api.client.util.Key
            private java.lang.Boolean skipBacklog;

            /** If true, the newly created subscription will only receive messages published after the subscription
           was created. Otherwise, the entire message backlog will be received on the subscription. Defaults
           to false.
             */
            public java.lang.Boolean getSkipBacklog() {
              return skipBacklog;
            }

            /**
             * If true, the newly created subscription will only receive messages published after
             * the subscription was created. Otherwise, the entire message backlog will be received
             * on the subscription. Defaults to false.
             */
            public Create setSkipBacklog(java.lang.Boolean skipBacklog) {
              this.skipBacklog = skipBacklog;
              return this;
            }

            /**
             * Required. The ID to use for the subscription, which will become the final component
             * of the subscription's name. This value is structured like: `my-sub-name`.
             */
            @com.google.api.client.util.Key
            private java.lang.String subscriptionId;

            /** Required. The ID to use for the subscription, which will become the final component of the
           subscription's name. This value is structured like: `my-sub-name`.
             */
            public java.lang.String getSubscriptionId() {
              return subscriptionId;
            }

            /**
             * Required. The ID to use for the subscription, which will become the final component
             * of the subscription's name. This value is structured like: `my-sub-name`.
             */
            public Create setSubscriptionId(java.lang.String subscriptionId) {
              this.subscriptionId = subscriptionId;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes the specified subscription.
           *
           * Create a request for the method "subscriptions.delete".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the subscription to delete.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Empty> {

            private static final String REST_PATH = "v1/admin/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");

            /**
             * Deletes the specified subscription.
             *
             * Create a request for the method "subscriptions.delete".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the subscription to delete.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(PubsubLite.this, "DELETE", REST_PATH, null, com.google.api.services.pubsublite.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the subscription to delete. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the subscription to delete.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the subscription to delete. */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Returns the subscription configuration.
           *
           * Create a request for the method "subscriptions.get".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the subscription whose configuration to return.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Subscription> {

            private static final String REST_PATH = "v1/admin/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");

            /**
             * Returns the subscription configuration.
             *
             * Create a request for the method "subscriptions.get".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the subscription whose configuration to return.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(PubsubLite.this, "GET", REST_PATH, null, com.google.api.services.pubsublite.v1.model.Subscription.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the subscription whose configuration to return. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the subscription whose configuration to return.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the subscription whose configuration to return. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Returns the list of subscriptions for the given project.
           *
           * Create a request for the method "subscriptions.list".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent whose subscriptions are to be listed. Structured like
           *        `projects/{project_number}/locations/{location}`.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.ListSubscriptionsResponse> {

            private static final String REST_PATH = "v1/admin/{+parent}/subscriptions";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

            /**
             * Returns the list of subscriptions for the given project.
             *
             * Create a request for the method "subscriptions.list".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent whose subscriptions are to be listed. Structured like
           *        `projects/{project_number}/locations/{location}`.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(PubsubLite.this, "GET", REST_PATH, null, com.google.api.services.pubsublite.v1.model.ListSubscriptionsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent whose subscriptions are to be listed. Structured like
             * `projects/{project_number}/locations/{location}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent whose subscriptions are to be listed. Structured like
           `projects/{project_number}/locations/{location}`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent whose subscriptions are to be listed. Structured like
             * `projects/{project_number}/locations/{location}`.
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * The maximum number of subscriptions to return. The service may return fewer than this
             * value. If unset or zero, all subscriptions for the parent will be returned.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of subscriptions to return. The service may return fewer than this value. If
           unset or zero, all subscriptions for the parent will be returned.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * The maximum number of subscriptions to return. The service may return fewer than this
             * value. If unset or zero, all subscriptions for the parent will be returned.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * A page token, received from a previous `ListSubscriptions` call. Provide this to
             * retrieve the subsequent page. When paginating, all other parameters provided to
             * `ListSubscriptions` must match the call that provided the page token.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** A page token, received from a previous `ListSubscriptions` call. Provide this to retrieve the
           subsequent page. When paginating, all other parameters provided to `ListSubscriptions` must match
           the call that provided the page token.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * A page token, received from a previous `ListSubscriptions` call. Provide this to
             * retrieve the subsequent page. When paginating, all other parameters provided to
             * `ListSubscriptions` must match the call that provided the page token.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates properties of the specified subscription.
           *
           * Create a request for the method "subscriptions.patch".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name The name of the subscription. Structured like:
           *        projects/{project_number}/locations/{location}/subscriptions/{subscription_id}
           * @param content the {@link com.google.api.services.pubsublite.v1.model.Subscription}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.pubsublite.v1.model.Subscription content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Subscription> {

            private static final String REST_PATH = "v1/admin/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");

            /**
             * Updates properties of the specified subscription.
             *
             * Create a request for the method "subscriptions.patch".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             * <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the subscription. Structured like:
           *        projects/{project_number}/locations/{location}/subscriptions/{subscription_id}
             * @param content the {@link com.google.api.services.pubsublite.v1.model.Subscription}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.pubsublite.v1.model.Subscription content) {
              super(PubsubLite.this, "PATCH", REST_PATH, content, com.google.api.services.pubsublite.v1.model.Subscription.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * The name of the subscription. Structured like:
             * projects/{project_number}/locations/{location}/subscriptions/{subscription_id}
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the subscription. Structured like:
           projects/{project_number}/locations/{location}/subscriptions/{subscription_id}
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * The name of the subscription. Structured like:
             * projects/{project_number}/locations/{location}/subscriptions/{subscription_id}
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /** Required. A mask specifying the subscription fields to change. */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Required. A mask specifying the subscription fields to change.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /** Required. A mask specifying the subscription fields to change. */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }
          /**
           * Performs an out-of-band seek for a subscription to a specified target, which may be timestamps or
           * named positions within the message backlog. Seek translates these targets to cursors for each
           * partition and orchestrates subscribers to start consuming messages from these seek cursors. If an
           * operation is returned, the seek has been registered and subscribers will eventually receive
           * messages from the seek cursors (i.e. eventual consistency), as long as they are using a minimum
           * supported client library version and not a system that tracks cursors independently of Pub/Sub
           * Lite (e.g. Apache Beam, Dataflow, Spark). The seek operation will fail for unsupported clients.
           * If clients would like to know when subscribers react to the seek (or not), they can poll the
           * operation. The seek operation will succeed and complete once subscribers are ready to receive
           * messages from the seek cursors for all partitions of the topic. This means that the seek
           * operation will not complete until all subscribers come online. If the previous seek operation has
           * not yet completed, it will be aborted and the new invocation of seek will supersede it.
           *
           * Create a request for the method "subscriptions.seek".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Seek#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the subscription to seek.
           * @param content the {@link com.google.api.services.pubsublite.v1.model.SeekSubscriptionRequest}
           * @return the request
           */
          public Seek seek(java.lang.String name, com.google.api.services.pubsublite.v1.model.SeekSubscriptionRequest content) throws java.io.IOException {
            Seek result = new Seek(name, content);
            initialize(result);
            return result;
          }

          public class Seek extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Operation> {

            private static final String REST_PATH = "v1/admin/{+name}:seek";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");

            /**
             * Performs an out-of-band seek for a subscription to a specified target, which may be timestamps
             * or named positions within the message backlog. Seek translates these targets to cursors for
             * each partition and orchestrates subscribers to start consuming messages from these seek
             * cursors. If an operation is returned, the seek has been registered and subscribers will
             * eventually receive messages from the seek cursors (i.e. eventual consistency), as long as they
             * are using a minimum supported client library version and not a system that tracks cursors
             * independently of Pub/Sub Lite (e.g. Apache Beam, Dataflow, Spark). The seek operation will fail
             * for unsupported clients. If clients would like to know when subscribers react to the seek (or
             * not), they can poll the operation. The seek operation will succeed and complete once
             * subscribers are ready to receive messages from the seek cursors for all partitions of the
             * topic. This means that the seek operation will not complete until all subscribers come online.
             * If the previous seek operation has not yet completed, it will be aborted and the new invocation
             * of seek will supersede it.
             *
             * Create a request for the method "subscriptions.seek".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Seek#execute()} method to invoke the remote operation. <p>
             * {@link Seek#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the subscription to seek.
             * @param content the {@link com.google.api.services.pubsublite.v1.model.SeekSubscriptionRequest}
             * @since 1.13
             */
            protected Seek(java.lang.String name, com.google.api.services.pubsublite.v1.model.SeekSubscriptionRequest content) {
              super(PubsubLite.this, "POST", REST_PATH, content, com.google.api.services.pubsublite.v1.model.Operation.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");
              }
            }

            @Override
            public Seek set$Xgafv(java.lang.String $Xgafv) {
              return (Seek) super.set$Xgafv($Xgafv);
            }

            @Override
            public Seek setAccessToken(java.lang.String accessToken) {
              return (Seek) super.setAccessToken(accessToken);
            }

            @Override
            public Seek setAlt(java.lang.String alt) {
              return (Seek) super.setAlt(alt);
            }

            @Override
            public Seek setCallback(java.lang.String callback) {
              return (Seek) super.setCallback(callback);
            }

            @Override
            public Seek setFields(java.lang.String fields) {
              return (Seek) super.setFields(fields);
            }

            @Override
            public Seek setKey(java.lang.String key) {
              return (Seek) super.setKey(key);
            }

            @Override
            public Seek setOauthToken(java.lang.String oauthToken) {
              return (Seek) super.setOauthToken(oauthToken);
            }

            @Override
            public Seek setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Seek) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Seek setQuotaUser(java.lang.String quotaUser) {
              return (Seek) super.setQuotaUser(quotaUser);
            }

            @Override
            public Seek setUploadType(java.lang.String uploadType) {
              return (Seek) super.setUploadType(uploadType);
            }

            @Override
            public Seek setUploadProtocol(java.lang.String uploadProtocol) {
              return (Seek) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the subscription to seek. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the subscription to seek.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the subscription to seek. */
            public Seek setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Seek set(String parameterName, Object value) {
              return (Seek) super.set(parameterName, value);
            }
          }

        }
        /**
         * An accessor for creating requests from the Topics collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code PubsubLite pubsublite = new PubsubLite(...);}
         *   {@code PubsubLite.Topics.List request = pubsublite.topics().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Topics topics() {
          return new Topics();
        }

        /**
         * The "topics" collection of methods.
         */
        public class Topics {

          /**
           * Creates a new topic.
           *
           * Create a request for the method "topics.create".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Create#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent location in which to create the topic. Structured like
           *        `projects/{project_number}/locations/{location}`.
           * @param content the {@link com.google.api.services.pubsublite.v1.model.Topic}
           * @return the request
           */
          public Create create(java.lang.String parent, com.google.api.services.pubsublite.v1.model.Topic content) throws java.io.IOException {
            Create result = new Create(parent, content);
            initialize(result);
            return result;
          }

          public class Create extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Topic> {

            private static final String REST_PATH = "v1/admin/{+parent}/topics";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

            /**
             * Creates a new topic.
             *
             * Create a request for the method "topics.create".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Create#execute()} method to invoke the remote operation.
             * <p> {@link
             * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent location in which to create the topic. Structured like
           *        `projects/{project_number}/locations/{location}`.
             * @param content the {@link com.google.api.services.pubsublite.v1.model.Topic}
             * @since 1.13
             */
            protected Create(java.lang.String parent, com.google.api.services.pubsublite.v1.model.Topic content) {
              super(PubsubLite.this, "POST", REST_PATH, content, com.google.api.services.pubsublite.v1.model.Topic.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
            }

            @Override
            public Create set$Xgafv(java.lang.String $Xgafv) {
              return (Create) super.set$Xgafv($Xgafv);
            }

            @Override
            public Create setAccessToken(java.lang.String accessToken) {
              return (Create) super.setAccessToken(accessToken);
            }

            @Override
            public Create setAlt(java.lang.String alt) {
              return (Create) super.setAlt(alt);
            }

            @Override
            public Create setCallback(java.lang.String callback) {
              return (Create) super.setCallback(callback);
            }

            @Override
            public Create setFields(java.lang.String fields) {
              return (Create) super.setFields(fields);
            }

            @Override
            public Create setKey(java.lang.String key) {
              return (Create) super.setKey(key);
            }

            @Override
            public Create setOauthToken(java.lang.String oauthToken) {
              return (Create) super.setOauthToken(oauthToken);
            }

            @Override
            public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Create) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Create setQuotaUser(java.lang.String quotaUser) {
              return (Create) super.setQuotaUser(quotaUser);
            }

            @Override
            public Create setUploadType(java.lang.String uploadType) {
              return (Create) super.setUploadType(uploadType);
            }

            @Override
            public Create setUploadProtocol(java.lang.String uploadProtocol) {
              return (Create) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent location in which to create the topic. Structured like
             * `projects/{project_number}/locations/{location}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent location in which to create the topic. Structured like
           `projects/{project_number}/locations/{location}`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent location in which to create the topic. Structured like
             * `projects/{project_number}/locations/{location}`.
             */
            public Create setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * Required. The ID to use for the topic, which will become the final component of the
             * topic's name. This value is structured like: `my-topic-name`.
             */
            @com.google.api.client.util.Key
            private java.lang.String topicId;

            /** Required. The ID to use for the topic, which will become the final component of the topic's name.
           This value is structured like: `my-topic-name`.
             */
            public java.lang.String getTopicId() {
              return topicId;
            }

            /**
             * Required. The ID to use for the topic, which will become the final component of the
             * topic's name. This value is structured like: `my-topic-name`.
             */
            public Create setTopicId(java.lang.String topicId) {
              this.topicId = topicId;
              return this;
            }

            @Override
            public Create set(String parameterName, Object value) {
              return (Create) super.set(parameterName, value);
            }
          }
          /**
           * Deletes the specified topic.
           *
           * Create a request for the method "topics.delete".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the topic to delete.
           * @return the request
           */
          public Delete delete(java.lang.String name) throws java.io.IOException {
            Delete result = new Delete(name);
            initialize(result);
            return result;
          }

          public class Delete extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Empty> {

            private static final String REST_PATH = "v1/admin/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/topics/[^/]+$");

            /**
             * Deletes the specified topic.
             *
             * Create a request for the method "topics.delete".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
             * <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the topic to delete.
             * @since 1.13
             */
            protected Delete(java.lang.String name) {
              super(PubsubLite.this, "DELETE", REST_PATH, null, com.google.api.services.pubsublite.v1.model.Empty.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
            }

            @Override
            public Delete set$Xgafv(java.lang.String $Xgafv) {
              return (Delete) super.set$Xgafv($Xgafv);
            }

            @Override
            public Delete setAccessToken(java.lang.String accessToken) {
              return (Delete) super.setAccessToken(accessToken);
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setCallback(java.lang.String callback) {
              return (Delete) super.setCallback(callback);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUploadType(java.lang.String uploadType) {
              return (Delete) super.setUploadType(uploadType);
            }

            @Override
            public Delete setUploadProtocol(java.lang.String uploadProtocol) {
              return (Delete) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the topic to delete. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the topic to delete.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the topic to delete. */
            public Delete setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Returns the topic configuration.
           *
           * Create a request for the method "topics.get".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param name Required. The name of the topic whose configuration to return.
           * @return the request
           */
          public Get get(java.lang.String name) throws java.io.IOException {
            Get result = new Get(name);
            initialize(result);
            return result;
          }

          public class Get extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Topic> {

            private static final String REST_PATH = "v1/admin/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/topics/[^/]+$");

            /**
             * Returns the topic configuration.
             *
             * Create a request for the method "topics.get".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Get#execute()} method to invoke the remote operation. <p>
             * {@link Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name Required. The name of the topic whose configuration to return.
             * @since 1.13
             */
            protected Get(java.lang.String name) {
              super(PubsubLite.this, "GET", REST_PATH, null, com.google.api.services.pubsublite.v1.model.Topic.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get set$Xgafv(java.lang.String $Xgafv) {
              return (Get) super.set$Xgafv($Xgafv);
            }

            @Override
            public Get setAccessToken(java.lang.String accessToken) {
              return (Get) super.setAccessToken(accessToken);
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setCallback(java.lang.String callback) {
              return (Get) super.setCallback(callback);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUploadType(java.lang.String uploadType) {
              return (Get) super.setUploadType(uploadType);
            }

            @Override
            public Get setUploadProtocol(java.lang.String uploadProtocol) {
              return (Get) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The name of the topic whose configuration to return. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The name of the topic whose configuration to return.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The name of the topic whose configuration to return. */
            public Get setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Returns the partition information for the requested topic.
           *
           * Create a request for the method "topics.getPartitions".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link GetPartitions#execute()} method to invoke the remote operation.
           *
           * @param name Required. The topic whose partition information to return.
           * @return the request
           */
          public GetPartitions getPartitions(java.lang.String name) throws java.io.IOException {
            GetPartitions result = new GetPartitions(name);
            initialize(result);
            return result;
          }

          public class GetPartitions extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.TopicPartitions> {

            private static final String REST_PATH = "v1/admin/{+name}/partitions";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/topics/[^/]+$");

            /**
             * Returns the partition information for the requested topic.
             *
             * Create a request for the method "topics.getPartitions".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link GetPartitions#execute()} method to invoke the remote
             * operation. <p> {@link GetPartitions#initialize(com.google.api.client.googleapis.services.Abstra
             * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
             * the constructor. </p>
             *
             * @param name Required. The topic whose partition information to return.
             * @since 1.13
             */
            protected GetPartitions(java.lang.String name) {
              super(PubsubLite.this, "GET", REST_PATH, null, com.google.api.services.pubsublite.v1.model.TopicPartitions.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public GetPartitions set$Xgafv(java.lang.String $Xgafv) {
              return (GetPartitions) super.set$Xgafv($Xgafv);
            }

            @Override
            public GetPartitions setAccessToken(java.lang.String accessToken) {
              return (GetPartitions) super.setAccessToken(accessToken);
            }

            @Override
            public GetPartitions setAlt(java.lang.String alt) {
              return (GetPartitions) super.setAlt(alt);
            }

            @Override
            public GetPartitions setCallback(java.lang.String callback) {
              return (GetPartitions) super.setCallback(callback);
            }

            @Override
            public GetPartitions setFields(java.lang.String fields) {
              return (GetPartitions) super.setFields(fields);
            }

            @Override
            public GetPartitions setKey(java.lang.String key) {
              return (GetPartitions) super.setKey(key);
            }

            @Override
            public GetPartitions setOauthToken(java.lang.String oauthToken) {
              return (GetPartitions) super.setOauthToken(oauthToken);
            }

            @Override
            public GetPartitions setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (GetPartitions) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public GetPartitions setQuotaUser(java.lang.String quotaUser) {
              return (GetPartitions) super.setQuotaUser(quotaUser);
            }

            @Override
            public GetPartitions setUploadType(java.lang.String uploadType) {
              return (GetPartitions) super.setUploadType(uploadType);
            }

            @Override
            public GetPartitions setUploadProtocol(java.lang.String uploadProtocol) {
              return (GetPartitions) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The topic whose partition information to return. */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** Required. The topic whose partition information to return.
             */
            public java.lang.String getName() {
              return name;
            }

            /** Required. The topic whose partition information to return. */
            public GetPartitions setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
              this.name = name;
              return this;
            }

            @Override
            public GetPartitions set(String parameterName, Object value) {
              return (GetPartitions) super.set(parameterName, value);
            }
          }
          /**
           * Returns the list of topics for the given project.
           *
           * Create a request for the method "topics.list".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param parent Required. The parent whose topics are to be listed. Structured like
           *        `projects/{project_number}/locations/{location}`.
           * @return the request
           */
          public List list(java.lang.String parent) throws java.io.IOException {
            List result = new List(parent);
            initialize(result);
            return result;
          }

          public class List extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.ListTopicsResponse> {

            private static final String REST_PATH = "v1/admin/{+parent}/topics";

            private final java.util.regex.Pattern PARENT_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+$");

            /**
             * Returns the list of topics for the given project.
             *
             * Create a request for the method "topics.list".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
             * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param parent Required. The parent whose topics are to be listed. Structured like
           *        `projects/{project_number}/locations/{location}`.
             * @since 1.13
             */
            protected List(java.lang.String parent) {
              super(PubsubLite.this, "GET", REST_PATH, null, com.google.api.services.pubsublite.v1.model.ListTopicsResponse.class);
              this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List set$Xgafv(java.lang.String $Xgafv) {
              return (List) super.set$Xgafv($Xgafv);
            }

            @Override
            public List setAccessToken(java.lang.String accessToken) {
              return (List) super.setAccessToken(accessToken);
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setCallback(java.lang.String callback) {
              return (List) super.setCallback(callback);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUploadType(java.lang.String uploadType) {
              return (List) super.setUploadType(uploadType);
            }

            @Override
            public List setUploadProtocol(java.lang.String uploadProtocol) {
              return (List) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * Required. The parent whose topics are to be listed. Structured like
             * `projects/{project_number}/locations/{location}`.
             */
            @com.google.api.client.util.Key
            private java.lang.String parent;

            /** Required. The parent whose topics are to be listed. Structured like
           `projects/{project_number}/locations/{location}`.
             */
            public java.lang.String getParent() {
              return parent;
            }

            /**
             * Required. The parent whose topics are to be listed. Structured like
             * `projects/{project_number}/locations/{location}`.
             */
            public List setParent(java.lang.String parent) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                    "Parameter parent must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+$");
              }
              this.parent = parent;
              return this;
            }

            /**
             * The maximum number of topics to return. The service may return fewer than this value.
             * If unset or zero, all topics for the parent will be returned.
             */
            @com.google.api.client.util.Key
            private java.lang.Integer pageSize;

            /** The maximum number of topics to return. The service may return fewer than this value. If unset or
           zero, all topics for the parent will be returned.
             */
            public java.lang.Integer getPageSize() {
              return pageSize;
            }

            /**
             * The maximum number of topics to return. The service may return fewer than this value.
             * If unset or zero, all topics for the parent will be returned.
             */
            public List setPageSize(java.lang.Integer pageSize) {
              this.pageSize = pageSize;
              return this;
            }

            /**
             * A page token, received from a previous `ListTopics` call. Provide this to retrieve
             * the subsequent page. When paginating, all other parameters provided to `ListTopics`
             * must match the call that provided the page token.
             */
            @com.google.api.client.util.Key
            private java.lang.String pageToken;

            /** A page token, received from a previous `ListTopics` call. Provide this to retrieve the subsequent
           page. When paginating, all other parameters provided to `ListTopics` must match the call that
           provided the page token.
             */
            public java.lang.String getPageToken() {
              return pageToken;
            }

            /**
             * A page token, received from a previous `ListTopics` call. Provide this to retrieve
             * the subsequent page. When paginating, all other parameters provided to `ListTopics`
             * must match the call that provided the page token.
             */
            public List setPageToken(java.lang.String pageToken) {
              this.pageToken = pageToken;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Updates properties of the specified topic.
           *
           * Create a request for the method "topics.patch".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param name The name of the topic. Structured like:
           *        projects/{project_number}/locations/{location}/topics/{topic_id}
           * @param content the {@link com.google.api.services.pubsublite.v1.model.Topic}
           * @return the request
           */
          public Patch patch(java.lang.String name, com.google.api.services.pubsublite.v1.model.Topic content) throws java.io.IOException {
            Patch result = new Patch(name, content);
            initialize(result);
            return result;
          }

          public class Patch extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.Topic> {

            private static final String REST_PATH = "v1/admin/{+name}";

            private final java.util.regex.Pattern NAME_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/topics/[^/]+$");

            /**
             * Updates properties of the specified topic.
             *
             * Create a request for the method "topics.patch".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
             * <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param name The name of the topic. Structured like:
           *        projects/{project_number}/locations/{location}/topics/{topic_id}
             * @param content the {@link com.google.api.services.pubsublite.v1.model.Topic}
             * @since 1.13
             */
            protected Patch(java.lang.String name, com.google.api.services.pubsublite.v1.model.Topic content) {
              super(PubsubLite.this, "PATCH", REST_PATH, content, com.google.api.services.pubsublite.v1.model.Topic.class);
              this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
            }

            @Override
            public Patch set$Xgafv(java.lang.String $Xgafv) {
              return (Patch) super.set$Xgafv($Xgafv);
            }

            @Override
            public Patch setAccessToken(java.lang.String accessToken) {
              return (Patch) super.setAccessToken(accessToken);
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setCallback(java.lang.String callback) {
              return (Patch) super.setCallback(callback);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUploadType(java.lang.String uploadType) {
              return (Patch) super.setUploadType(uploadType);
            }

            @Override
            public Patch setUploadProtocol(java.lang.String uploadProtocol) {
              return (Patch) super.setUploadProtocol(uploadProtocol);
            }

            /**
             * The name of the topic. Structured like:
             * projects/{project_number}/locations/{location}/topics/{topic_id}
             */
            @com.google.api.client.util.Key
            private java.lang.String name;

            /** The name of the topic. Structured like:
           projects/{project_number}/locations/{location}/topics/{topic_id}
             */
            public java.lang.String getName() {
              return name;
            }

            /**
             * The name of the topic. Structured like:
             * projects/{project_number}/locations/{location}/topics/{topic_id}
             */
            public Patch setName(java.lang.String name) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                    "Parameter name must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
              this.name = name;
              return this;
            }

            /** Required. A mask specifying the topic fields to change. */
            @com.google.api.client.util.Key
            private String updateMask;

            /** Required. A mask specifying the topic fields to change.
             */
            public String getUpdateMask() {
              return updateMask;
            }

            /** Required. A mask specifying the topic fields to change. */
            public Patch setUpdateMask(String updateMask) {
              this.updateMask = updateMask;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }

          /**
           * An accessor for creating requests from the Subscriptions collection.
           *
           * <p>The typical use is:</p>
           * <pre>
           *   {@code PubsubLite pubsublite = new PubsubLite(...);}
           *   {@code PubsubLite.Subscriptions.List request = pubsublite.subscriptions().list(parameters ...)}
           * </pre>
           *
           * @return the resource collection
           */
          public Subscriptions subscriptions() {
            return new Subscriptions();
          }

          /**
           * The "subscriptions" collection of methods.
           */
          public class Subscriptions {

            /**
             * Lists the subscriptions attached to the specified topic.
             *
             * Create a request for the method "subscriptions.list".
             *
             * This request holds the parameters needed by the pubsublite server.  After setting any optional
             * parameters, call the {@link List#execute()} method to invoke the remote operation.
             *
             * @param name Required. The name of the topic whose subscriptions to list.
             * @return the request
             */
            public List list(java.lang.String name) throws java.io.IOException {
              List result = new List(name);
              initialize(result);
              return result;
            }

            public class List extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.ListTopicSubscriptionsResponse> {

              private static final String REST_PATH = "v1/admin/{+name}/subscriptions";

              private final java.util.regex.Pattern NAME_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/topics/[^/]+$");

              /**
               * Lists the subscriptions attached to the specified topic.
               *
               * Create a request for the method "subscriptions.list".
               *
               * This request holds the parameters needed by the the pubsublite server.  After setting any
               * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
               * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param name Required. The name of the topic whose subscriptions to list.
               * @since 1.13
               */
              protected List(java.lang.String name) {
                super(PubsubLite.this, "GET", REST_PATH, null, com.google.api.services.pubsublite.v1.model.ListTopicSubscriptionsResponse.class);
                this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public List set$Xgafv(java.lang.String $Xgafv) {
                return (List) super.set$Xgafv($Xgafv);
              }

              @Override
              public List setAccessToken(java.lang.String accessToken) {
                return (List) super.setAccessToken(accessToken);
              }

              @Override
              public List setAlt(java.lang.String alt) {
                return (List) super.setAlt(alt);
              }

              @Override
              public List setCallback(java.lang.String callback) {
                return (List) super.setCallback(callback);
              }

              @Override
              public List setFields(java.lang.String fields) {
                return (List) super.setFields(fields);
              }

              @Override
              public List setKey(java.lang.String key) {
                return (List) super.setKey(key);
              }

              @Override
              public List setOauthToken(java.lang.String oauthToken) {
                return (List) super.setOauthToken(oauthToken);
              }

              @Override
              public List setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (List) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public List setQuotaUser(java.lang.String quotaUser) {
                return (List) super.setQuotaUser(quotaUser);
              }

              @Override
              public List setUploadType(java.lang.String uploadType) {
                return (List) super.setUploadType(uploadType);
              }

              @Override
              public List setUploadProtocol(java.lang.String uploadProtocol) {
                return (List) super.setUploadProtocol(uploadProtocol);
              }

              /** Required. The name of the topic whose subscriptions to list. */
              @com.google.api.client.util.Key
              private java.lang.String name;

              /** Required. The name of the topic whose subscriptions to list.
               */
              public java.lang.String getName() {
                return name;
              }

              /** Required. The name of the topic whose subscriptions to list. */
              public List setName(java.lang.String name) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(NAME_PATTERN.matcher(name).matches(),
                      "Parameter name must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
                }
                this.name = name;
                return this;
              }

              /**
               * The maximum number of subscriptions to return. The service may return fewer than
               * this value. If unset or zero, all subscriptions for the given topic will be
               * returned.
               */
              @com.google.api.client.util.Key
              private java.lang.Integer pageSize;

              /** The maximum number of subscriptions to return. The service may return fewer than this value. If
             unset or zero, all subscriptions for the given topic will be returned.
               */
              public java.lang.Integer getPageSize() {
                return pageSize;
              }

              /**
               * The maximum number of subscriptions to return. The service may return fewer than
               * this value. If unset or zero, all subscriptions for the given topic will be
               * returned.
               */
              public List setPageSize(java.lang.Integer pageSize) {
                this.pageSize = pageSize;
                return this;
              }

              /**
               * A page token, received from a previous `ListTopicSubscriptions` call. Provide this
               * to retrieve the subsequent page. When paginating, all other parameters provided to
               * `ListTopicSubscriptions` must match the call that provided the page token.
               */
              @com.google.api.client.util.Key
              private java.lang.String pageToken;

              /** A page token, received from a previous `ListTopicSubscriptions` call. Provide this to retrieve the
             subsequent page. When paginating, all other parameters provided to `ListTopicSubscriptions` must
             match the call that provided the page token.
               */
              public java.lang.String getPageToken() {
                return pageToken;
              }

              /**
               * A page token, received from a previous `ListTopicSubscriptions` call. Provide this
               * to retrieve the subsequent page. When paginating, all other parameters provided to
               * `ListTopicSubscriptions` must match the call that provided the page token.
               */
              public List setPageToken(java.lang.String pageToken) {
                this.pageToken = pageToken;
                return this;
              }

              @Override
              public List set(String parameterName, Object value) {
                return (List) super.set(parameterName, value);
              }
            }

          }
        }
      }
    }
  }

  /**
   * An accessor for creating requests from the Cursor collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code PubsubLite pubsublite = new PubsubLite(...);}
   *   {@code PubsubLite.Cursor.List request = pubsublite.cursor().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Cursor cursor() {
    return new Cursor();
  }

  /**
   * The "cursor" collection of methods.
   */
  public class Cursor {

    /**
     * An accessor for creating requests from the Projects collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code PubsubLite pubsublite = new PubsubLite(...);}
     *   {@code PubsubLite.Projects.List request = pubsublite.projects().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Projects projects() {
      return new Projects();
    }

    /**
     * The "projects" collection of methods.
     */
    public class Projects {

      /**
       * An accessor for creating requests from the Locations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code PubsubLite pubsublite = new PubsubLite(...);}
       *   {@code PubsubLite.Locations.List request = pubsublite.locations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Locations locations() {
        return new Locations();
      }

      /**
       * The "locations" collection of methods.
       */
      public class Locations {

        /**
         * An accessor for creating requests from the Subscriptions collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code PubsubLite pubsublite = new PubsubLite(...);}
         *   {@code PubsubLite.Subscriptions.List request = pubsublite.subscriptions().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Subscriptions subscriptions() {
          return new Subscriptions();
        }

        /**
         * The "subscriptions" collection of methods.
         */
        public class Subscriptions {

          /**
           * Updates the committed cursor.
           *
           * Create a request for the method "subscriptions.commitCursor".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link CommitCursor#execute()} method to invoke the remote operation.
           *
           * @param subscription The subscription for which to update the cursor.
           * @param content the {@link com.google.api.services.pubsublite.v1.model.CommitCursorRequest}
           * @return the request
           */
          public CommitCursor commitCursor(java.lang.String subscription, com.google.api.services.pubsublite.v1.model.CommitCursorRequest content) throws java.io.IOException {
            CommitCursor result = new CommitCursor(subscription, content);
            initialize(result);
            return result;
          }

          public class CommitCursor extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.CommitCursorResponse> {

            private static final String REST_PATH = "v1/cursor/{+subscription}:commitCursor";

            private final java.util.regex.Pattern SUBSCRIPTION_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");

            /**
             * Updates the committed cursor.
             *
             * Create a request for the method "subscriptions.commitCursor".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link CommitCursor#execute()} method to invoke the remote
             * operation. <p> {@link
             * CommitCursor#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
             * must be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param subscription The subscription for which to update the cursor.
             * @param content the {@link com.google.api.services.pubsublite.v1.model.CommitCursorRequest}
             * @since 1.13
             */
            protected CommitCursor(java.lang.String subscription, com.google.api.services.pubsublite.v1.model.CommitCursorRequest content) {
              super(PubsubLite.this, "POST", REST_PATH, content, com.google.api.services.pubsublite.v1.model.CommitCursorResponse.class);
              this.subscription = com.google.api.client.util.Preconditions.checkNotNull(subscription, "Required parameter subscription must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SUBSCRIPTION_PATTERN.matcher(subscription).matches(),
                    "Parameter subscription must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");
              }
            }

            @Override
            public CommitCursor set$Xgafv(java.lang.String $Xgafv) {
              return (CommitCursor) super.set$Xgafv($Xgafv);
            }

            @Override
            public CommitCursor setAccessToken(java.lang.String accessToken) {
              return (CommitCursor) super.setAccessToken(accessToken);
            }

            @Override
            public CommitCursor setAlt(java.lang.String alt) {
              return (CommitCursor) super.setAlt(alt);
            }

            @Override
            public CommitCursor setCallback(java.lang.String callback) {
              return (CommitCursor) super.setCallback(callback);
            }

            @Override
            public CommitCursor setFields(java.lang.String fields) {
              return (CommitCursor) super.setFields(fields);
            }

            @Override
            public CommitCursor setKey(java.lang.String key) {
              return (CommitCursor) super.setKey(key);
            }

            @Override
            public CommitCursor setOauthToken(java.lang.String oauthToken) {
              return (CommitCursor) super.setOauthToken(oauthToken);
            }

            @Override
            public CommitCursor setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (CommitCursor) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public CommitCursor setQuotaUser(java.lang.String quotaUser) {
              return (CommitCursor) super.setQuotaUser(quotaUser);
            }

            @Override
            public CommitCursor setUploadType(java.lang.String uploadType) {
              return (CommitCursor) super.setUploadType(uploadType);
            }

            @Override
            public CommitCursor setUploadProtocol(java.lang.String uploadProtocol) {
              return (CommitCursor) super.setUploadProtocol(uploadProtocol);
            }

            /** The subscription for which to update the cursor. */
            @com.google.api.client.util.Key
            private java.lang.String subscription;

            /** The subscription for which to update the cursor.
             */
            public java.lang.String getSubscription() {
              return subscription;
            }

            /** The subscription for which to update the cursor. */
            public CommitCursor setSubscription(java.lang.String subscription) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(SUBSCRIPTION_PATTERN.matcher(subscription).matches(),
                    "Parameter subscription must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");
              }
              this.subscription = subscription;
              return this;
            }

            @Override
            public CommitCursor set(String parameterName, Object value) {
              return (CommitCursor) super.set(parameterName, value);
            }
          }

          /**
           * An accessor for creating requests from the Cursors collection.
           *
           * <p>The typical use is:</p>
           * <pre>
           *   {@code PubsubLite pubsublite = new PubsubLite(...);}
           *   {@code PubsubLite.Cursors.List request = pubsublite.cursors().list(parameters ...)}
           * </pre>
           *
           * @return the resource collection
           */
          public Cursors cursors() {
            return new Cursors();
          }

          /**
           * The "cursors" collection of methods.
           */
          public class Cursors {

            /**
             * Returns all committed cursor information for a subscription.
             *
             * Create a request for the method "cursors.list".
             *
             * This request holds the parameters needed by the pubsublite server.  After setting any optional
             * parameters, call the {@link List#execute()} method to invoke the remote operation.
             *
             * @param parent Required. The subscription for which to retrieve cursors. Structured like
             *        `projects/{project_number}/locations/{location}/subscriptions/{subscription_id}`.
             * @return the request
             */
            public List list(java.lang.String parent) throws java.io.IOException {
              List result = new List(parent);
              initialize(result);
              return result;
            }

            public class List extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.ListPartitionCursorsResponse> {

              private static final String REST_PATH = "v1/cursor/{+parent}/cursors";

              private final java.util.regex.Pattern PARENT_PATTERN =
                  java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");

              /**
               * Returns all committed cursor information for a subscription.
               *
               * Create a request for the method "cursors.list".
               *
               * This request holds the parameters needed by the the pubsublite server.  After setting any
               * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
               * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
               * must be called to initialize this instance immediately after invoking the constructor. </p>
               *
               * @param parent Required. The subscription for which to retrieve cursors. Structured like
             *        `projects/{project_number}/locations/{location}/subscriptions/{subscription_id}`.
               * @since 1.13
               */
              protected List(java.lang.String parent) {
                super(PubsubLite.this, "GET", REST_PATH, null, com.google.api.services.pubsublite.v1.model.ListPartitionCursorsResponse.class);
                this.parent = com.google.api.client.util.Preconditions.checkNotNull(parent, "Required parameter parent must be specified.");
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");
                }
              }

              @Override
              public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
                return super.executeUsingHead();
              }

              @Override
              public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
                return super.buildHttpRequestUsingHead();
              }

              @Override
              public List set$Xgafv(java.lang.String $Xgafv) {
                return (List) super.set$Xgafv($Xgafv);
              }

              @Override
              public List setAccessToken(java.lang.String accessToken) {
                return (List) super.setAccessToken(accessToken);
              }

              @Override
              public List setAlt(java.lang.String alt) {
                return (List) super.setAlt(alt);
              }

              @Override
              public List setCallback(java.lang.String callback) {
                return (List) super.setCallback(callback);
              }

              @Override
              public List setFields(java.lang.String fields) {
                return (List) super.setFields(fields);
              }

              @Override
              public List setKey(java.lang.String key) {
                return (List) super.setKey(key);
              }

              @Override
              public List setOauthToken(java.lang.String oauthToken) {
                return (List) super.setOauthToken(oauthToken);
              }

              @Override
              public List setPrettyPrint(java.lang.Boolean prettyPrint) {
                return (List) super.setPrettyPrint(prettyPrint);
              }

              @Override
              public List setQuotaUser(java.lang.String quotaUser) {
                return (List) super.setQuotaUser(quotaUser);
              }

              @Override
              public List setUploadType(java.lang.String uploadType) {
                return (List) super.setUploadType(uploadType);
              }

              @Override
              public List setUploadProtocol(java.lang.String uploadProtocol) {
                return (List) super.setUploadProtocol(uploadProtocol);
              }

              /**
               * Required. The subscription for which to retrieve cursors. Structured like
               * `projects/{project_number}/locations/{location}/subscriptions/{subscription_id}`.
               */
              @com.google.api.client.util.Key
              private java.lang.String parent;

              /** Required. The subscription for which to retrieve cursors. Structured like
             `projects/{project_number}/locations/{location}/subscriptions/{subscription_id}`.
               */
              public java.lang.String getParent() {
                return parent;
              }

              /**
               * Required. The subscription for which to retrieve cursors. Structured like
               * `projects/{project_number}/locations/{location}/subscriptions/{subscription_id}`.
               */
              public List setParent(java.lang.String parent) {
                if (!getSuppressPatternChecks()) {
                  com.google.api.client.util.Preconditions.checkArgument(PARENT_PATTERN.matcher(parent).matches(),
                      "Parameter parent must conform to the pattern " +
                      "^projects/[^/]+/locations/[^/]+/subscriptions/[^/]+$");
                }
                this.parent = parent;
                return this;
              }

              /**
               * The maximum number of cursors to return. The service may return fewer than this
               * value. If unset or zero, all cursors for the parent will be returned.
               */
              @com.google.api.client.util.Key
              private java.lang.Integer pageSize;

              /** The maximum number of cursors to return. The service may return fewer than this value. If unset or
             zero, all cursors for the parent will be returned.
               */
              public java.lang.Integer getPageSize() {
                return pageSize;
              }

              /**
               * The maximum number of cursors to return. The service may return fewer than this
               * value. If unset or zero, all cursors for the parent will be returned.
               */
              public List setPageSize(java.lang.Integer pageSize) {
                this.pageSize = pageSize;
                return this;
              }

              /**
               * A page token, received from a previous `ListPartitionCursors` call. Provide this to
               * retrieve the subsequent page. When paginating, all other parameters provided to
               * `ListPartitionCursors` must match the call that provided the page token.
               */
              @com.google.api.client.util.Key
              private java.lang.String pageToken;

              /** A page token, received from a previous `ListPartitionCursors` call. Provide this to retrieve the
             subsequent page. When paginating, all other parameters provided to `ListPartitionCursors` must
             match the call that provided the page token.
               */
              public java.lang.String getPageToken() {
                return pageToken;
              }

              /**
               * A page token, received from a previous `ListPartitionCursors` call. Provide this to
               * retrieve the subsequent page. When paginating, all other parameters provided to
               * `ListPartitionCursors` must match the call that provided the page token.
               */
              public List setPageToken(java.lang.String pageToken) {
                this.pageToken = pageToken;
                return this;
              }

              @Override
              public List set(String parameterName, Object value) {
                return (List) super.set(parameterName, value);
              }
            }

          }
        }
      }
    }
  }

  /**
   * An accessor for creating requests from the TopicStats collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code PubsubLite pubsublite = new PubsubLite(...);}
   *   {@code PubsubLite.TopicStats.List request = pubsublite.topicStats().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public TopicStats topicStats() {
    return new TopicStats();
  }

  /**
   * The "topicStats" collection of methods.
   */
  public class TopicStats {

    /**
     * An accessor for creating requests from the Projects collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code PubsubLite pubsublite = new PubsubLite(...);}
     *   {@code PubsubLite.Projects.List request = pubsublite.projects().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Projects projects() {
      return new Projects();
    }

    /**
     * The "projects" collection of methods.
     */
    public class Projects {

      /**
       * An accessor for creating requests from the Locations collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code PubsubLite pubsublite = new PubsubLite(...);}
       *   {@code PubsubLite.Locations.List request = pubsublite.locations().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Locations locations() {
        return new Locations();
      }

      /**
       * The "locations" collection of methods.
       */
      public class Locations {

        /**
         * An accessor for creating requests from the Topics collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code PubsubLite pubsublite = new PubsubLite(...);}
         *   {@code PubsubLite.Topics.List request = pubsublite.topics().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Topics topics() {
          return new Topics();
        }

        /**
         * The "topics" collection of methods.
         */
        public class Topics {

          /**
           * Compute the head cursor for the partition. The head cursor's offset is guaranteed to be less than
           * or equal to all messages which have not yet been acknowledged as published, and greater than the
           * offset of any message whose publish has already been acknowledged. It is zero if there have never
           * been messages in the partition.
           *
           * Create a request for the method "topics.computeHeadCursor".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link ComputeHeadCursor#execute()} method to invoke the remote operation.
           *
           * @param topic Required. The topic for which we should compute the head cursor.
           * @param content the {@link com.google.api.services.pubsublite.v1.model.ComputeHeadCursorRequest}
           * @return the request
           */
          public ComputeHeadCursor computeHeadCursor(java.lang.String topic, com.google.api.services.pubsublite.v1.model.ComputeHeadCursorRequest content) throws java.io.IOException {
            ComputeHeadCursor result = new ComputeHeadCursor(topic, content);
            initialize(result);
            return result;
          }

          public class ComputeHeadCursor extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.ComputeHeadCursorResponse> {

            private static final String REST_PATH = "v1/topicStats/{+topic}:computeHeadCursor";

            private final java.util.regex.Pattern TOPIC_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/topics/[^/]+$");

            /**
             * Compute the head cursor for the partition. The head cursor's offset is guaranteed to be less
             * than or equal to all messages which have not yet been acknowledged as published, and greater
             * than the offset of any message whose publish has already been acknowledged. It is zero if there
             * have never been messages in the partition.
             *
             * Create a request for the method "topics.computeHeadCursor".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link ComputeHeadCursor#execute()} method to invoke the remote
             * operation. <p> {@link ComputeHeadCursor#initialize(com.google.api.client.googleapis.services.Ab
             * stractGoogleClientRequest)} must be called to initialize this instance immediately after
             * invoking the constructor. </p>
             *
             * @param topic Required. The topic for which we should compute the head cursor.
             * @param content the {@link com.google.api.services.pubsublite.v1.model.ComputeHeadCursorRequest}
             * @since 1.13
             */
            protected ComputeHeadCursor(java.lang.String topic, com.google.api.services.pubsublite.v1.model.ComputeHeadCursorRequest content) {
              super(PubsubLite.this, "POST", REST_PATH, content, com.google.api.services.pubsublite.v1.model.ComputeHeadCursorResponse.class);
              this.topic = com.google.api.client.util.Preconditions.checkNotNull(topic, "Required parameter topic must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(TOPIC_PATTERN.matcher(topic).matches(),
                    "Parameter topic must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
            }

            @Override
            public ComputeHeadCursor set$Xgafv(java.lang.String $Xgafv) {
              return (ComputeHeadCursor) super.set$Xgafv($Xgafv);
            }

            @Override
            public ComputeHeadCursor setAccessToken(java.lang.String accessToken) {
              return (ComputeHeadCursor) super.setAccessToken(accessToken);
            }

            @Override
            public ComputeHeadCursor setAlt(java.lang.String alt) {
              return (ComputeHeadCursor) super.setAlt(alt);
            }

            @Override
            public ComputeHeadCursor setCallback(java.lang.String callback) {
              return (ComputeHeadCursor) super.setCallback(callback);
            }

            @Override
            public ComputeHeadCursor setFields(java.lang.String fields) {
              return (ComputeHeadCursor) super.setFields(fields);
            }

            @Override
            public ComputeHeadCursor setKey(java.lang.String key) {
              return (ComputeHeadCursor) super.setKey(key);
            }

            @Override
            public ComputeHeadCursor setOauthToken(java.lang.String oauthToken) {
              return (ComputeHeadCursor) super.setOauthToken(oauthToken);
            }

            @Override
            public ComputeHeadCursor setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ComputeHeadCursor) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ComputeHeadCursor setQuotaUser(java.lang.String quotaUser) {
              return (ComputeHeadCursor) super.setQuotaUser(quotaUser);
            }

            @Override
            public ComputeHeadCursor setUploadType(java.lang.String uploadType) {
              return (ComputeHeadCursor) super.setUploadType(uploadType);
            }

            @Override
            public ComputeHeadCursor setUploadProtocol(java.lang.String uploadProtocol) {
              return (ComputeHeadCursor) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The topic for which we should compute the head cursor. */
            @com.google.api.client.util.Key
            private java.lang.String topic;

            /** Required. The topic for which we should compute the head cursor.
             */
            public java.lang.String getTopic() {
              return topic;
            }

            /** Required. The topic for which we should compute the head cursor. */
            public ComputeHeadCursor setTopic(java.lang.String topic) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(TOPIC_PATTERN.matcher(topic).matches(),
                    "Parameter topic must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
              this.topic = topic;
              return this;
            }

            @Override
            public ComputeHeadCursor set(String parameterName, Object value) {
              return (ComputeHeadCursor) super.set(parameterName, value);
            }
          }
          /**
           * Compute statistics about a range of messages in a given topic and partition.
           *
           * Create a request for the method "topics.computeMessageStats".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link ComputeMessageStats#execute()} method to invoke the remote operation.
           *
           * @param topic Required. The topic for which we should compute message stats.
           * @param content the {@link com.google.api.services.pubsublite.v1.model.ComputeMessageStatsRequest}
           * @return the request
           */
          public ComputeMessageStats computeMessageStats(java.lang.String topic, com.google.api.services.pubsublite.v1.model.ComputeMessageStatsRequest content) throws java.io.IOException {
            ComputeMessageStats result = new ComputeMessageStats(topic, content);
            initialize(result);
            return result;
          }

          public class ComputeMessageStats extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.ComputeMessageStatsResponse> {

            private static final String REST_PATH = "v1/topicStats/{+topic}:computeMessageStats";

            private final java.util.regex.Pattern TOPIC_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/topics/[^/]+$");

            /**
             * Compute statistics about a range of messages in a given topic and partition.
             *
             * Create a request for the method "topics.computeMessageStats".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link ComputeMessageStats#execute()} method to invoke the remote
             * operation. <p> {@link ComputeMessageStats#initialize(com.google.api.client.googleapis.services.
             * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
             * invoking the constructor. </p>
             *
             * @param topic Required. The topic for which we should compute message stats.
             * @param content the {@link com.google.api.services.pubsublite.v1.model.ComputeMessageStatsRequest}
             * @since 1.13
             */
            protected ComputeMessageStats(java.lang.String topic, com.google.api.services.pubsublite.v1.model.ComputeMessageStatsRequest content) {
              super(PubsubLite.this, "POST", REST_PATH, content, com.google.api.services.pubsublite.v1.model.ComputeMessageStatsResponse.class);
              this.topic = com.google.api.client.util.Preconditions.checkNotNull(topic, "Required parameter topic must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(TOPIC_PATTERN.matcher(topic).matches(),
                    "Parameter topic must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
            }

            @Override
            public ComputeMessageStats set$Xgafv(java.lang.String $Xgafv) {
              return (ComputeMessageStats) super.set$Xgafv($Xgafv);
            }

            @Override
            public ComputeMessageStats setAccessToken(java.lang.String accessToken) {
              return (ComputeMessageStats) super.setAccessToken(accessToken);
            }

            @Override
            public ComputeMessageStats setAlt(java.lang.String alt) {
              return (ComputeMessageStats) super.setAlt(alt);
            }

            @Override
            public ComputeMessageStats setCallback(java.lang.String callback) {
              return (ComputeMessageStats) super.setCallback(callback);
            }

            @Override
            public ComputeMessageStats setFields(java.lang.String fields) {
              return (ComputeMessageStats) super.setFields(fields);
            }

            @Override
            public ComputeMessageStats setKey(java.lang.String key) {
              return (ComputeMessageStats) super.setKey(key);
            }

            @Override
            public ComputeMessageStats setOauthToken(java.lang.String oauthToken) {
              return (ComputeMessageStats) super.setOauthToken(oauthToken);
            }

            @Override
            public ComputeMessageStats setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ComputeMessageStats) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ComputeMessageStats setQuotaUser(java.lang.String quotaUser) {
              return (ComputeMessageStats) super.setQuotaUser(quotaUser);
            }

            @Override
            public ComputeMessageStats setUploadType(java.lang.String uploadType) {
              return (ComputeMessageStats) super.setUploadType(uploadType);
            }

            @Override
            public ComputeMessageStats setUploadProtocol(java.lang.String uploadProtocol) {
              return (ComputeMessageStats) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The topic for which we should compute message stats. */
            @com.google.api.client.util.Key
            private java.lang.String topic;

            /** Required. The topic for which we should compute message stats.
             */
            public java.lang.String getTopic() {
              return topic;
            }

            /** Required. The topic for which we should compute message stats. */
            public ComputeMessageStats setTopic(java.lang.String topic) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(TOPIC_PATTERN.matcher(topic).matches(),
                    "Parameter topic must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
              this.topic = topic;
              return this;
            }

            @Override
            public ComputeMessageStats set(String parameterName, Object value) {
              return (ComputeMessageStats) super.set(parameterName, value);
            }
          }
          /**
           * Compute the corresponding cursor for a publish or event time in a topic partition.
           *
           * Create a request for the method "topics.computeTimeCursor".
           *
           * This request holds the parameters needed by the pubsublite server.  After setting any optional
           * parameters, call the {@link ComputeTimeCursor#execute()} method to invoke the remote operation.
           *
           * @param topic Required. The topic for which we should compute the cursor.
           * @param content the {@link com.google.api.services.pubsublite.v1.model.ComputeTimeCursorRequest}
           * @return the request
           */
          public ComputeTimeCursor computeTimeCursor(java.lang.String topic, com.google.api.services.pubsublite.v1.model.ComputeTimeCursorRequest content) throws java.io.IOException {
            ComputeTimeCursor result = new ComputeTimeCursor(topic, content);
            initialize(result);
            return result;
          }

          public class ComputeTimeCursor extends PubsubLiteRequest<com.google.api.services.pubsublite.v1.model.ComputeTimeCursorResponse> {

            private static final String REST_PATH = "v1/topicStats/{+topic}:computeTimeCursor";

            private final java.util.regex.Pattern TOPIC_PATTERN =
                java.util.regex.Pattern.compile("^projects/[^/]+/locations/[^/]+/topics/[^/]+$");

            /**
             * Compute the corresponding cursor for a publish or event time in a topic partition.
             *
             * Create a request for the method "topics.computeTimeCursor".
             *
             * This request holds the parameters needed by the the pubsublite server.  After setting any
             * optional parameters, call the {@link ComputeTimeCursor#execute()} method to invoke the remote
             * operation. <p> {@link ComputeTimeCursor#initialize(com.google.api.client.googleapis.services.Ab
             * stractGoogleClientRequest)} must be called to initialize this instance immediately after
             * invoking the constructor. </p>
             *
             * @param topic Required. The topic for which we should compute the cursor.
             * @param content the {@link com.google.api.services.pubsublite.v1.model.ComputeTimeCursorRequest}
             * @since 1.13
             */
            protected ComputeTimeCursor(java.lang.String topic, com.google.api.services.pubsublite.v1.model.ComputeTimeCursorRequest content) {
              super(PubsubLite.this, "POST", REST_PATH, content, com.google.api.services.pubsublite.v1.model.ComputeTimeCursorResponse.class);
              this.topic = com.google.api.client.util.Preconditions.checkNotNull(topic, "Required parameter topic must be specified.");
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(TOPIC_PATTERN.matcher(topic).matches(),
                    "Parameter topic must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
            }

            @Override
            public ComputeTimeCursor set$Xgafv(java.lang.String $Xgafv) {
              return (ComputeTimeCursor) super.set$Xgafv($Xgafv);
            }

            @Override
            public ComputeTimeCursor setAccessToken(java.lang.String accessToken) {
              return (ComputeTimeCursor) super.setAccessToken(accessToken);
            }

            @Override
            public ComputeTimeCursor setAlt(java.lang.String alt) {
              return (ComputeTimeCursor) super.setAlt(alt);
            }

            @Override
            public ComputeTimeCursor setCallback(java.lang.String callback) {
              return (ComputeTimeCursor) super.setCallback(callback);
            }

            @Override
            public ComputeTimeCursor setFields(java.lang.String fields) {
              return (ComputeTimeCursor) super.setFields(fields);
            }

            @Override
            public ComputeTimeCursor setKey(java.lang.String key) {
              return (ComputeTimeCursor) super.setKey(key);
            }

            @Override
            public ComputeTimeCursor setOauthToken(java.lang.String oauthToken) {
              return (ComputeTimeCursor) super.setOauthToken(oauthToken);
            }

            @Override
            public ComputeTimeCursor setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (ComputeTimeCursor) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public ComputeTimeCursor setQuotaUser(java.lang.String quotaUser) {
              return (ComputeTimeCursor) super.setQuotaUser(quotaUser);
            }

            @Override
            public ComputeTimeCursor setUploadType(java.lang.String uploadType) {
              return (ComputeTimeCursor) super.setUploadType(uploadType);
            }

            @Override
            public ComputeTimeCursor setUploadProtocol(java.lang.String uploadProtocol) {
              return (ComputeTimeCursor) super.setUploadProtocol(uploadProtocol);
            }

            /** Required. The topic for which we should compute the cursor. */
            @com.google.api.client.util.Key
            private java.lang.String topic;

            /** Required. The topic for which we should compute the cursor.
             */
            public java.lang.String getTopic() {
              return topic;
            }

            /** Required. The topic for which we should compute the cursor. */
            public ComputeTimeCursor setTopic(java.lang.String topic) {
              if (!getSuppressPatternChecks()) {
                com.google.api.client.util.Preconditions.checkArgument(TOPIC_PATTERN.matcher(topic).matches(),
                    "Parameter topic must conform to the pattern " +
                    "^projects/[^/]+/locations/[^/]+/topics/[^/]+$");
              }
              this.topic = topic;
              return this;
            }

            @Override
            public ComputeTimeCursor set(String parameterName, Object value) {
              return (ComputeTimeCursor) super.set(parameterName, value);
            }
          }

        }
      }
    }
  }

  /**
   * Builder for {@link PubsubLite}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    private static String chooseEndpoint(com.google.api.client.http.HttpTransport transport) {
      // If the GOOGLE_API_USE_MTLS_ENDPOINT environment variable value is "always", use mTLS endpoint.
      // If the env variable is "auto", use mTLS endpoint if and only if the transport is mTLS.
      // Use the regular endpoint for all other cases.
      String useMtlsEndpoint = System.getenv("GOOGLE_API_USE_MTLS_ENDPOINT");
      useMtlsEndpoint = useMtlsEndpoint == null ? "auto" : useMtlsEndpoint;
      if ("always".equals(useMtlsEndpoint) || ("auto".equals(useMtlsEndpoint) && transport != null && transport.isMtls())) {
        return DEFAULT_MTLS_ROOT_URL;
      }
      return DEFAULT_ROOT_URL;
    }

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          Builder.chooseEndpoint(transport),
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link PubsubLite}. */
    @Override
    public PubsubLite build() {
      return new PubsubLite(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link PubsubLiteRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setPubsubLiteRequestInitializer(
        PubsubLiteRequestInitializer pubsubliteRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(pubsubliteRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }

    @Override
    public Builder setUniverseDomain(String universeDomain) {
      return (Builder) super.setUniverseDomain(universeDomain);
    }
  }
}
