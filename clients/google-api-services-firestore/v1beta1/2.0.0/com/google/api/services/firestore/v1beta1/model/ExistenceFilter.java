/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firestore.v1beta1.model;

/**
 * A digest of all the documents that match a given target.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Firestore API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ExistenceFilter extends com.google.api.client.json.GenericJson {

  /**
   * The total count of documents that match target_id. If different from the count of documents in
   * the client that match, the client must manually determine which documents no longer match the
   * target.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer count;

  /**
   * The target ID to which this filter applies.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer targetId;

  /**
   * A bloom filter that contains the UTF-8 byte encodings of the resource names of the documents
   * that match target_id, in the form
   * `projects/{project_id}/databases/{database_id}/documents/{document_path}` that have NOT changed
   * since the query results indicated by the resume token or timestamp given in
   * `Target.resume_type`. This bloom filter may be omitted at the server's discretion, such as if
   * it is deemed that the client will not make use of it or if it is too computationally expensive
   * to calculate or transmit. Clients must gracefully handle this field being absent by falling
   * back to the logic used before this field existed; that is, re-add the target without a resume
   * token to figure out which documents in the client's cache are out of sync.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BloomFilter unchangedNames;

  /**
   * The total count of documents that match target_id. If different from the count of documents in
   * the client that match, the client must manually determine which documents no longer match the
   * target.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCount() {
    return count;
  }

  /**
   * The total count of documents that match target_id. If different from the count of documents in
   * the client that match, the client must manually determine which documents no longer match the
   * target.
   * @param count count or {@code null} for none
   */
  public ExistenceFilter setCount(java.lang.Integer count) {
    this.count = count;
    return this;
  }

  /**
   * The target ID to which this filter applies.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTargetId() {
    return targetId;
  }

  /**
   * The target ID to which this filter applies.
   * @param targetId targetId or {@code null} for none
   */
  public ExistenceFilter setTargetId(java.lang.Integer targetId) {
    this.targetId = targetId;
    return this;
  }

  /**
   * A bloom filter that contains the UTF-8 byte encodings of the resource names of the documents
   * that match target_id, in the form
   * `projects/{project_id}/databases/{database_id}/documents/{document_path}` that have NOT changed
   * since the query results indicated by the resume token or timestamp given in
   * `Target.resume_type`. This bloom filter may be omitted at the server's discretion, such as if
   * it is deemed that the client will not make use of it or if it is too computationally expensive
   * to calculate or transmit. Clients must gracefully handle this field being absent by falling
   * back to the logic used before this field existed; that is, re-add the target without a resume
   * token to figure out which documents in the client's cache are out of sync.
   * @return value or {@code null} for none
   */
  public BloomFilter getUnchangedNames() {
    return unchangedNames;
  }

  /**
   * A bloom filter that contains the UTF-8 byte encodings of the resource names of the documents
   * that match target_id, in the form
   * `projects/{project_id}/databases/{database_id}/documents/{document_path}` that have NOT changed
   * since the query results indicated by the resume token or timestamp given in
   * `Target.resume_type`. This bloom filter may be omitted at the server's discretion, such as if
   * it is deemed that the client will not make use of it or if it is too computationally expensive
   * to calculate or transmit. Clients must gracefully handle this field being absent by falling
   * back to the logic used before this field existed; that is, re-add the target without a resume
   * token to figure out which documents in the client's cache are out of sync.
   * @param unchangedNames unchangedNames or {@code null} for none
   */
  public ExistenceFilter setUnchangedNames(BloomFilter unchangedNames) {
    this.unchangedNames = unchangedNames;
    return this;
  }

  @Override
  public ExistenceFilter set(String fieldName, Object value) {
    return (ExistenceFilter) super.set(fieldName, value);
  }

  @Override
  public ExistenceFilter clone() {
    return (ExistenceFilter) super.clone();
  }

}
