/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.jobs.v2.model;

/**
 * A Job resource represents a job posting (also referred to as a "job listing" or "job
 * requisition"). A job belongs to a Company, which is the hiring entity responsible for the job.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Talent Solution API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Job extends com.google.api.client.json.GenericJson {

  /**
   * Optional but at least one of application_urls, application_email_list or
   * application_instruction must be specified.
   *
   * Use this field to specify email address(es) to which resumes or applications can be sent.
   *
   * The maximum number of allowed characters is 255.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> applicationEmailList;

  /**
   * Optional but at least one of application_urls, application_email_list or
   * application_instruction must be specified.
   *
   * Use this field to provide instructions, such as "Mail your application to ...", that a
   * candidate can follow to apply for the job.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 3,000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String applicationInstruction;

  /**
   * Optional but at least one of application_urls, application_email_list or
   * application_instruction must be specified.
   *
   * Use this URL field to direct an applicant to a website, for example to link to an online
   * application form.
   *
   * The maximum number of allowed characters is 2,000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> applicationUrls;

  /**
   * Optional. The benefits included with the job.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> benefits;

  /**
   * Output only. The name of the company listing the job.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String companyDisplayName;

  /**
   * Optional but one of company_name or distributor_company_id must be provided.
   *
   * The resource name of the company listing the job, such as /companies/foo. This field takes
   * precedence over the distributor-assigned company identifier, distributor_company_id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String companyName;

  /**
   * Deprecated. Use company_display_name instead.
   *
   * Output only.
   *
   * The name of the company listing the job.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String companyTitle;

  /**
   * Optional. Job compensation information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CompensationInfo compensationInfo;

  /**
   * Output only. The timestamp when this job was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. A map of fields to hold both filterable and non-filterable custom job attributes that
   * are not covered by the provided structured fields.
   *
   * This field is a more general combination of the deprecated id-based filterable_custom_fields
   * and string-based non_filterable_custom_fields.
   *
   * The keys of the map are strings up to 64 bytes and must match the pattern: a-zA-Z*.
   *
   * At most 100 filterable and at most 100 unfilterable keys are supported. For filterable
   * `string_values`, across all keys at most 200 values are allowed, with each string no more than
   * 255 characters. For unfilterable `string_values`, the maximum total size of `string_values`
   * across all keys is 50KB.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, CustomAttribute> customAttributes;

  static {
    // hack to force ProGuard to consider CustomAttribute used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CustomAttribute.class);
  }

  /**
   * Optional. The department or functional area within the company with the open position.
   *
   * The maximum number of allowed characters is 255.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String department;

  /**
   * Required. The description of the job, which typically includes a multi-paragraph description of
   * the company and related information. Separate fields are provided on the job object for
   * responsibilities, qualifications, and other job characteristics. Use of these separate job
   * fields is recommended.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 100,000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Optional but one of company_name or distributor_company_id must be provided.
   *
   * A unique company identifier used by job distributors to identify an employer's company entity.
   * company_name takes precedence over this field, and is the recommended field to use to identify
   * companies.
   *
   * The maximum number of allowed characters is 255.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String distributorCompanyId;

  /**
   * Optional. The desired education level for the job, such as "Bachelors", "Masters", "Doctorate".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> educationLevels;

  /**
   * Optional. The employment type(s) of a job, for example, full time or part time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> employmentTypes;

  /**
   * Optional. The end date of the job in UTC time zone. Typically this field is used for
   * contracting engagements. Dates prior to 1970/1/1 and invalid date formats are ignored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Date endDate;

  /**
   * Optional but strongly recommended for the best service experience.
   *
   * The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it
   * no longer appears in search results. The expired job can't be deleted or listed by the
   * DeleteJob and ListJobs APIs, but it can be retrieved with the GetJob API or updated with the
   * UpdateJob API. An expired job can be updated and opened again by using a future expiration
   * timestamp. Updating an expired job fails if there is another existing open job with same
   * requisition_id, company_name and language_code.
   *
   * The expired jobs are retained in our system for 90 days. However, the overall expired job count
   * cannot exceed 3 times the maximum of open jobs count over the past week, otherwise jobs with
   * earlier expire time are cleaned first. Expired jobs are no longer accessible after they are
   * cleaned out. The format of this field is RFC 3339 date strings. Example:
   * 2000-01-01T00:00:00.999999999Z See
   * [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).
   *
   * A valid date range is between 1970-01-01T00:00:00.0Z and 2100-12-31T23:59:59.999Z. Invalid
   * dates are ignored and treated as expire time not provided.
   *
   * If this value is not provided at the time of job creation or is invalid, the job posting
   * expires after 30 days from the job's creation time. For example, if the job was created on
   * 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31
   * 13:00AM UTC.
   *
   * If this value is not provided but expiry_date is, expiry_date is used.
   *
   * If this value is not provided on job update, it depends on the field masks set by
   * UpdateJobRequest.update_job_fields. If the field masks include expiry_time, or the masks are
   * empty meaning that every field is updated, the job posting expires after 30 days from the job's
   * last update time. Otherwise the expiration date isn't updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String expireTime;

  /**
   * Deprecated. Use expire_time instead.
   *
   * Optional but strongly recommended to be provided for the best service experience.
   *
   * The expiration date of the job in UTC time. After 12 am on this date, the job is marked as
   * expired, and it no longer appears in search results. The expired job can't be deleted or listed
   * by the DeleteJob and ListJobs APIs, but it can be retrieved with the GetJob API or updated with
   * the UpdateJob API. An expired job can be updated and opened again by using a future expiration
   * date. It can also remain expired. Updating an expired job to be open fails if there is another
   * existing open job with same requisition_id, company_name and language_code.
   *
   * The expired jobs are retained in our system for 90 days. However, the overall expired job count
   * cannot exceed 3 times the maximum of open jobs count over the past week, otherwise jobs with
   * earlier expire time are removed first. Expired jobs are no longer accessible after they are
   * cleaned out.
   *
   * A valid date range is between 1970/1/1 and 2100/12/31. Invalid dates are ignored and treated as
   * expiry date not provided.
   *
   * If this value is not provided on job creation or is invalid, the job posting expires after 30
   * days from the job's creation time. For example, if the job was created on 2017/01/01 13:00AM
   * UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC.
   *
   * If this value is not provided on job update, it depends on the field masks set by
   * UpdateJobRequest.update_job_fields. If the field masks include expiry_date, or the masks are
   * empty meaning that every field is updated, the job expires after 30 days from the job's last
   * update time. Otherwise the expiration date isn't updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Date expiryDate;

  /**
   * Deprecated. Always use compensation_info.
   *
   * Optional.
   *
   * Job compensation information.
   *
   * This field replaces compensation_info. Only CompensationInfo.entries or
   * extended_compensation_info can be set, otherwise an exception is thrown.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ExtendedCompensationInfo extendedCompensationInfo;

  /**
   * Deprecated. Use custom_attributes instead.
   *
   * Optional.
   *
   * A map of fields to hold filterable custom job attributes not captured by the standard fields
   * such as job_title, company_name, or level. These custom fields store arbitrary string values,
   * and can be used for purposes not covered by the structured fields. For the best search
   * experience, use of the structured rather than custom fields is recommended.
   *
   * Data stored in these custom fields fields are indexed and searched against by keyword searches
   * (see SearchJobsRequest.custom_field_filters][]).
   *
   * The map key must be a number between 1-20. If an invalid key is provided on job create or
   * update, an error is returned.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, CustomField> filterableCustomFields;

  static {
    // hack to force ProGuard to consider CustomField used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CustomField.class);
  }

  /**
   * Optional. A description of bonus, commission, and other compensation incentives associated with
   * the job not including salary or pay.
   *
   * The maximum number of allowed characters is 10,000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String incentives;

  /**
   * Output only. Structured locations of the job, resolved from locations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<JobLocation> jobLocations;

  /**
   * Required. The title of the job, such as "Software Engineer"
   *
   * The maximum number of allowed characters is 500.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String jobTitle;

  /**
   * Optional. The language of the posting. This field is distinct from any requirements for fluency
   * that are associated with the job.
   *
   * Language codes must be in BCP-47 format, such as "en-US" or "sr-Latn". For more information,
   * see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class="external"
   * target="_blank" }.
   *
   * If this field is unspecified and Job.description is present, detected language code based on
   * Job.description is assigned, otherwise defaults to 'en_US'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String languageCode;

  /**
   * Optional. The experience level associated with the job, such as "Entry Level".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String level;

  /**
   * Optional but strongly recommended for the best service experience.
   *
   * Location(s) where the emploeyer is looking to hire for this job posting.
   *
   * Specifying the full street address(es) of the hiring location enables better API results,
   * especially job searches by commute time.
   *
   * At most 50 locations are allowed for best search performance. If a job has more locations, it
   * is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes
   * 'ReqA-1', 'ReqA-2', etc.) as multiple jobs with the same requisition_id, company_name and
   * language_code are not allowed. If the original requisition_id must be preserved, a custom field
   * should be used for storage. It is also suggested to group the locations that close to each
   * other in the same job for better search experience.
   *
   * The maximum number of allowed characters is 500.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> locations;

  /**
   * Required during job update.
   *
   * Resource name assigned to a job by the API, for example, "/jobs/foo". Use of this field in job
   * queries and API calls is preferred over the use of requisition_id since this value is unique.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. A promotion value of the job, as determined by the client. The value determines the
   * sort order of the jobs returned when searching for jobs using the featured jobs search call,
   * with higher promotional values being returned first and ties being resolved by relevance sort.
   * Only the jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH.
   *
   * Default value is 0, and negative values are treated as 0.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer promotionValue;

  /**
   * Optional. The date this job was most recently published in UTC format. The default value is the
   * time the request arrives at the server.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Date publishDate;

  /**
   * Optional. A description of the qualifications required to perform the job. The use of this
   * field is recommended as an alternative to using the more general description field.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 10,000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String qualifications;

  /**
   * Output only. The URL of a web page that displays job details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String referenceUrl;

  /**
   * Optional. The job Region (for example, state, country) throughout which the job is available.
   * If this field is set, a LocationFilter in a search query within the job region finds this job
   * if an exact location match is not specified. If this field is set, setting job locations to the
   * same location level as this field is strongly recommended.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String region;

  /**
   * Required. The requisition ID, also referred to as the posting ID, assigned by the client to
   * identify a job. This field is intended to be used by clients for client identification and
   * tracking of listings. A job is not allowed to be created if there is another job with the same
   * requisition_id, company_name and language_code.
   *
   * The maximum number of allowed characters is 255.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String requisitionId;

  /**
   * Optional. A description of job responsibilities. The use of this field is recommended as an
   * alternative to using the more general description field.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 10,000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String responsibilities;

  /**
   * Optional. The start date of the job in UTC time zone. Typically this field is used for
   * contracting engagements. Dates prior to 1970/1/1 and invalid date formats are ignored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Date startDate;

  /**
   * Deprecated. Use custom_attributes instead.
   *
   * Optional.
   *
   * A map of fields to hold non-filterable custom job attributes, similar to
   * filterable_custom_fields. These fields are distinct in that the data in these fields are not
   * indexed. Therefore, the client cannot search against them, nor can the client use them to list
   * jobs.
   *
   * The key of the map can be any valid string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, CustomField> unindexedCustomFields;

  static {
    // hack to force ProGuard to consider CustomField used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CustomField.class);
  }

  /**
   * Output only. The timestamp when this job was last updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Optional. The visibility of the job. Defaults to JobVisibility.PRIVATE if not specified.
   * Currently only JobVisibility.PRIVATE is supported.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String visibility;

  /**
   * Optional but at least one of application_urls, application_email_list or
   * application_instruction must be specified.
   *
   * Use this field to specify email address(es) to which resumes or applications can be sent.
   *
   * The maximum number of allowed characters is 255.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getApplicationEmailList() {
    return applicationEmailList;
  }

  /**
   * Optional but at least one of application_urls, application_email_list or
   * application_instruction must be specified.
   *
   * Use this field to specify email address(es) to which resumes or applications can be sent.
   *
   * The maximum number of allowed characters is 255.
   * @param applicationEmailList applicationEmailList or {@code null} for none
   */
  public Job setApplicationEmailList(java.util.List<java.lang.String> applicationEmailList) {
    this.applicationEmailList = applicationEmailList;
    return this;
  }

  /**
   * Optional but at least one of application_urls, application_email_list or
   * application_instruction must be specified.
   *
   * Use this field to provide instructions, such as "Mail your application to ...", that a
   * candidate can follow to apply for the job.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 3,000.
   * @return value or {@code null} for none
   */
  public java.lang.String getApplicationInstruction() {
    return applicationInstruction;
  }

  /**
   * Optional but at least one of application_urls, application_email_list or
   * application_instruction must be specified.
   *
   * Use this field to provide instructions, such as "Mail your application to ...", that a
   * candidate can follow to apply for the job.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 3,000.
   * @param applicationInstruction applicationInstruction or {@code null} for none
   */
  public Job setApplicationInstruction(java.lang.String applicationInstruction) {
    this.applicationInstruction = applicationInstruction;
    return this;
  }

  /**
   * Optional but at least one of application_urls, application_email_list or
   * application_instruction must be specified.
   *
   * Use this URL field to direct an applicant to a website, for example to link to an online
   * application form.
   *
   * The maximum number of allowed characters is 2,000.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getApplicationUrls() {
    return applicationUrls;
  }

  /**
   * Optional but at least one of application_urls, application_email_list or
   * application_instruction must be specified.
   *
   * Use this URL field to direct an applicant to a website, for example to link to an online
   * application form.
   *
   * The maximum number of allowed characters is 2,000.
   * @param applicationUrls applicationUrls or {@code null} for none
   */
  public Job setApplicationUrls(java.util.List<java.lang.String> applicationUrls) {
    this.applicationUrls = applicationUrls;
    return this;
  }

  /**
   * Optional. The benefits included with the job.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getBenefits() {
    return benefits;
  }

  /**
   * Optional. The benefits included with the job.
   * @param benefits benefits or {@code null} for none
   */
  public Job setBenefits(java.util.List<java.lang.String> benefits) {
    this.benefits = benefits;
    return this;
  }

  /**
   * Output only. The name of the company listing the job.
   * @return value or {@code null} for none
   */
  public java.lang.String getCompanyDisplayName() {
    return companyDisplayName;
  }

  /**
   * Output only. The name of the company listing the job.
   * @param companyDisplayName companyDisplayName or {@code null} for none
   */
  public Job setCompanyDisplayName(java.lang.String companyDisplayName) {
    this.companyDisplayName = companyDisplayName;
    return this;
  }

  /**
   * Optional but one of company_name or distributor_company_id must be provided.
   *
   * The resource name of the company listing the job, such as /companies/foo. This field takes
   * precedence over the distributor-assigned company identifier, distributor_company_id.
   * @return value or {@code null} for none
   */
  public java.lang.String getCompanyName() {
    return companyName;
  }

  /**
   * Optional but one of company_name or distributor_company_id must be provided.
   *
   * The resource name of the company listing the job, such as /companies/foo. This field takes
   * precedence over the distributor-assigned company identifier, distributor_company_id.
   * @param companyName companyName or {@code null} for none
   */
  public Job setCompanyName(java.lang.String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Deprecated. Use company_display_name instead.
   *
   * Output only.
   *
   * The name of the company listing the job.
   * @return value or {@code null} for none
   */
  public java.lang.String getCompanyTitle() {
    return companyTitle;
  }

  /**
   * Deprecated. Use company_display_name instead.
   *
   * Output only.
   *
   * The name of the company listing the job.
   * @param companyTitle companyTitle or {@code null} for none
   */
  public Job setCompanyTitle(java.lang.String companyTitle) {
    this.companyTitle = companyTitle;
    return this;
  }

  /**
   * Optional. Job compensation information.
   * @return value or {@code null} for none
   */
  public CompensationInfo getCompensationInfo() {
    return compensationInfo;
  }

  /**
   * Optional. Job compensation information.
   * @param compensationInfo compensationInfo or {@code null} for none
   */
  public Job setCompensationInfo(CompensationInfo compensationInfo) {
    this.compensationInfo = compensationInfo;
    return this;
  }

  /**
   * Output only. The timestamp when this job was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The timestamp when this job was created.
   * @param createTime createTime or {@code null} for none
   */
  public Job setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. A map of fields to hold both filterable and non-filterable custom job attributes that
   * are not covered by the provided structured fields.
   *
   * This field is a more general combination of the deprecated id-based filterable_custom_fields
   * and string-based non_filterable_custom_fields.
   *
   * The keys of the map are strings up to 64 bytes and must match the pattern: a-zA-Z*.
   *
   * At most 100 filterable and at most 100 unfilterable keys are supported. For filterable
   * `string_values`, across all keys at most 200 values are allowed, with each string no more than
   * 255 characters. For unfilterable `string_values`, the maximum total size of `string_values`
   * across all keys is 50KB.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, CustomAttribute> getCustomAttributes() {
    return customAttributes;
  }

  /**
   * Optional. A map of fields to hold both filterable and non-filterable custom job attributes that
   * are not covered by the provided structured fields.
   *
   * This field is a more general combination of the deprecated id-based filterable_custom_fields
   * and string-based non_filterable_custom_fields.
   *
   * The keys of the map are strings up to 64 bytes and must match the pattern: a-zA-Z*.
   *
   * At most 100 filterable and at most 100 unfilterable keys are supported. For filterable
   * `string_values`, across all keys at most 200 values are allowed, with each string no more than
   * 255 characters. For unfilterable `string_values`, the maximum total size of `string_values`
   * across all keys is 50KB.
   * @param customAttributes customAttributes or {@code null} for none
   */
  public Job setCustomAttributes(java.util.Map<String, CustomAttribute> customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  /**
   * Optional. The department or functional area within the company with the open position.
   *
   * The maximum number of allowed characters is 255.
   * @return value or {@code null} for none
   */
  public java.lang.String getDepartment() {
    return department;
  }

  /**
   * Optional. The department or functional area within the company with the open position.
   *
   * The maximum number of allowed characters is 255.
   * @param department department or {@code null} for none
   */
  public Job setDepartment(java.lang.String department) {
    this.department = department;
    return this;
  }

  /**
   * Required. The description of the job, which typically includes a multi-paragraph description of
   * the company and related information. Separate fields are provided on the job object for
   * responsibilities, qualifications, and other job characteristics. Use of these separate job
   * fields is recommended.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 100,000.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Required. The description of the job, which typically includes a multi-paragraph description of
   * the company and related information. Separate fields are provided on the job object for
   * responsibilities, qualifications, and other job characteristics. Use of these separate job
   * fields is recommended.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 100,000.
   * @param description description or {@code null} for none
   */
  public Job setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional but one of company_name or distributor_company_id must be provided.
   *
   * A unique company identifier used by job distributors to identify an employer's company entity.
   * company_name takes precedence over this field, and is the recommended field to use to identify
   * companies.
   *
   * The maximum number of allowed characters is 255.
   * @return value or {@code null} for none
   */
  public java.lang.String getDistributorCompanyId() {
    return distributorCompanyId;
  }

  /**
   * Optional but one of company_name or distributor_company_id must be provided.
   *
   * A unique company identifier used by job distributors to identify an employer's company entity.
   * company_name takes precedence over this field, and is the recommended field to use to identify
   * companies.
   *
   * The maximum number of allowed characters is 255.
   * @param distributorCompanyId distributorCompanyId or {@code null} for none
   */
  public Job setDistributorCompanyId(java.lang.String distributorCompanyId) {
    this.distributorCompanyId = distributorCompanyId;
    return this;
  }

  /**
   * Optional. The desired education level for the job, such as "Bachelors", "Masters", "Doctorate".
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getEducationLevels() {
    return educationLevels;
  }

  /**
   * Optional. The desired education level for the job, such as "Bachelors", "Masters", "Doctorate".
   * @param educationLevels educationLevels or {@code null} for none
   */
  public Job setEducationLevels(java.util.List<java.lang.String> educationLevels) {
    this.educationLevels = educationLevels;
    return this;
  }

  /**
   * Optional. The employment type(s) of a job, for example, full time or part time.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getEmploymentTypes() {
    return employmentTypes;
  }

  /**
   * Optional. The employment type(s) of a job, for example, full time or part time.
   * @param employmentTypes employmentTypes or {@code null} for none
   */
  public Job setEmploymentTypes(java.util.List<java.lang.String> employmentTypes) {
    this.employmentTypes = employmentTypes;
    return this;
  }

  /**
   * Optional. The end date of the job in UTC time zone. Typically this field is used for
   * contracting engagements. Dates prior to 1970/1/1 and invalid date formats are ignored.
   * @return value or {@code null} for none
   */
  public Date getEndDate() {
    return endDate;
  }

  /**
   * Optional. The end date of the job in UTC time zone. Typically this field is used for
   * contracting engagements. Dates prior to 1970/1/1 and invalid date formats are ignored.
   * @param endDate endDate or {@code null} for none
   */
  public Job setEndDate(Date endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Optional but strongly recommended for the best service experience.
   *
   * The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it
   * no longer appears in search results. The expired job can't be deleted or listed by the
   * DeleteJob and ListJobs APIs, but it can be retrieved with the GetJob API or updated with the
   * UpdateJob API. An expired job can be updated and opened again by using a future expiration
   * timestamp. Updating an expired job fails if there is another existing open job with same
   * requisition_id, company_name and language_code.
   *
   * The expired jobs are retained in our system for 90 days. However, the overall expired job count
   * cannot exceed 3 times the maximum of open jobs count over the past week, otherwise jobs with
   * earlier expire time are cleaned first. Expired jobs are no longer accessible after they are
   * cleaned out. The format of this field is RFC 3339 date strings. Example:
   * 2000-01-01T00:00:00.999999999Z See
   * [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).
   *
   * A valid date range is between 1970-01-01T00:00:00.0Z and 2100-12-31T23:59:59.999Z. Invalid
   * dates are ignored and treated as expire time not provided.
   *
   * If this value is not provided at the time of job creation or is invalid, the job posting
   * expires after 30 days from the job's creation time. For example, if the job was created on
   * 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31
   * 13:00AM UTC.
   *
   * If this value is not provided but expiry_date is, expiry_date is used.
   *
   * If this value is not provided on job update, it depends on the field masks set by
   * UpdateJobRequest.update_job_fields. If the field masks include expiry_time, or the masks are
   * empty meaning that every field is updated, the job posting expires after 30 days from the job's
   * last update time. Otherwise the expiration date isn't updated.
   * @return value or {@code null} for none
   */
  public String getExpireTime() {
    return expireTime;
  }

  /**
   * Optional but strongly recommended for the best service experience.
   *
   * The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it
   * no longer appears in search results. The expired job can't be deleted or listed by the
   * DeleteJob and ListJobs APIs, but it can be retrieved with the GetJob API or updated with the
   * UpdateJob API. An expired job can be updated and opened again by using a future expiration
   * timestamp. Updating an expired job fails if there is another existing open job with same
   * requisition_id, company_name and language_code.
   *
   * The expired jobs are retained in our system for 90 days. However, the overall expired job count
   * cannot exceed 3 times the maximum of open jobs count over the past week, otherwise jobs with
   * earlier expire time are cleaned first. Expired jobs are no longer accessible after they are
   * cleaned out. The format of this field is RFC 3339 date strings. Example:
   * 2000-01-01T00:00:00.999999999Z See
   * [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).
   *
   * A valid date range is between 1970-01-01T00:00:00.0Z and 2100-12-31T23:59:59.999Z. Invalid
   * dates are ignored and treated as expire time not provided.
   *
   * If this value is not provided at the time of job creation or is invalid, the job posting
   * expires after 30 days from the job's creation time. For example, if the job was created on
   * 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31
   * 13:00AM UTC.
   *
   * If this value is not provided but expiry_date is, expiry_date is used.
   *
   * If this value is not provided on job update, it depends on the field masks set by
   * UpdateJobRequest.update_job_fields. If the field masks include expiry_time, or the masks are
   * empty meaning that every field is updated, the job posting expires after 30 days from the job's
   * last update time. Otherwise the expiration date isn't updated.
   * @param expireTime expireTime or {@code null} for none
   */
  public Job setExpireTime(String expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * Deprecated. Use expire_time instead.
   *
   * Optional but strongly recommended to be provided for the best service experience.
   *
   * The expiration date of the job in UTC time. After 12 am on this date, the job is marked as
   * expired, and it no longer appears in search results. The expired job can't be deleted or listed
   * by the DeleteJob and ListJobs APIs, but it can be retrieved with the GetJob API or updated with
   * the UpdateJob API. An expired job can be updated and opened again by using a future expiration
   * date. It can also remain expired. Updating an expired job to be open fails if there is another
   * existing open job with same requisition_id, company_name and language_code.
   *
   * The expired jobs are retained in our system for 90 days. However, the overall expired job count
   * cannot exceed 3 times the maximum of open jobs count over the past week, otherwise jobs with
   * earlier expire time are removed first. Expired jobs are no longer accessible after they are
   * cleaned out.
   *
   * A valid date range is between 1970/1/1 and 2100/12/31. Invalid dates are ignored and treated as
   * expiry date not provided.
   *
   * If this value is not provided on job creation or is invalid, the job posting expires after 30
   * days from the job's creation time. For example, if the job was created on 2017/01/01 13:00AM
   * UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC.
   *
   * If this value is not provided on job update, it depends on the field masks set by
   * UpdateJobRequest.update_job_fields. If the field masks include expiry_date, or the masks are
   * empty meaning that every field is updated, the job expires after 30 days from the job's last
   * update time. Otherwise the expiration date isn't updated.
   * @return value or {@code null} for none
   */
  public Date getExpiryDate() {
    return expiryDate;
  }

  /**
   * Deprecated. Use expire_time instead.
   *
   * Optional but strongly recommended to be provided for the best service experience.
   *
   * The expiration date of the job in UTC time. After 12 am on this date, the job is marked as
   * expired, and it no longer appears in search results. The expired job can't be deleted or listed
   * by the DeleteJob and ListJobs APIs, but it can be retrieved with the GetJob API or updated with
   * the UpdateJob API. An expired job can be updated and opened again by using a future expiration
   * date. It can also remain expired. Updating an expired job to be open fails if there is another
   * existing open job with same requisition_id, company_name and language_code.
   *
   * The expired jobs are retained in our system for 90 days. However, the overall expired job count
   * cannot exceed 3 times the maximum of open jobs count over the past week, otherwise jobs with
   * earlier expire time are removed first. Expired jobs are no longer accessible after they are
   * cleaned out.
   *
   * A valid date range is between 1970/1/1 and 2100/12/31. Invalid dates are ignored and treated as
   * expiry date not provided.
   *
   * If this value is not provided on job creation or is invalid, the job posting expires after 30
   * days from the job's creation time. For example, if the job was created on 2017/01/01 13:00AM
   * UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC.
   *
   * If this value is not provided on job update, it depends on the field masks set by
   * UpdateJobRequest.update_job_fields. If the field masks include expiry_date, or the masks are
   * empty meaning that every field is updated, the job expires after 30 days from the job's last
   * update time. Otherwise the expiration date isn't updated.
   * @param expiryDate expiryDate or {@code null} for none
   */
  public Job setExpiryDate(Date expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * Deprecated. Always use compensation_info.
   *
   * Optional.
   *
   * Job compensation information.
   *
   * This field replaces compensation_info. Only CompensationInfo.entries or
   * extended_compensation_info can be set, otherwise an exception is thrown.
   * @return value or {@code null} for none
   */
  public ExtendedCompensationInfo getExtendedCompensationInfo() {
    return extendedCompensationInfo;
  }

  /**
   * Deprecated. Always use compensation_info.
   *
   * Optional.
   *
   * Job compensation information.
   *
   * This field replaces compensation_info. Only CompensationInfo.entries or
   * extended_compensation_info can be set, otherwise an exception is thrown.
   * @param extendedCompensationInfo extendedCompensationInfo or {@code null} for none
   */
  public Job setExtendedCompensationInfo(ExtendedCompensationInfo extendedCompensationInfo) {
    this.extendedCompensationInfo = extendedCompensationInfo;
    return this;
  }

  /**
   * Deprecated. Use custom_attributes instead.
   *
   * Optional.
   *
   * A map of fields to hold filterable custom job attributes not captured by the standard fields
   * such as job_title, company_name, or level. These custom fields store arbitrary string values,
   * and can be used for purposes not covered by the structured fields. For the best search
   * experience, use of the structured rather than custom fields is recommended.
   *
   * Data stored in these custom fields fields are indexed and searched against by keyword searches
   * (see SearchJobsRequest.custom_field_filters][]).
   *
   * The map key must be a number between 1-20. If an invalid key is provided on job create or
   * update, an error is returned.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, CustomField> getFilterableCustomFields() {
    return filterableCustomFields;
  }

  /**
   * Deprecated. Use custom_attributes instead.
   *
   * Optional.
   *
   * A map of fields to hold filterable custom job attributes not captured by the standard fields
   * such as job_title, company_name, or level. These custom fields store arbitrary string values,
   * and can be used for purposes not covered by the structured fields. For the best search
   * experience, use of the structured rather than custom fields is recommended.
   *
   * Data stored in these custom fields fields are indexed and searched against by keyword searches
   * (see SearchJobsRequest.custom_field_filters][]).
   *
   * The map key must be a number between 1-20. If an invalid key is provided on job create or
   * update, an error is returned.
   * @param filterableCustomFields filterableCustomFields or {@code null} for none
   */
  public Job setFilterableCustomFields(java.util.Map<String, CustomField> filterableCustomFields) {
    this.filterableCustomFields = filterableCustomFields;
    return this;
  }

  /**
   * Optional. A description of bonus, commission, and other compensation incentives associated with
   * the job not including salary or pay.
   *
   * The maximum number of allowed characters is 10,000.
   * @return value or {@code null} for none
   */
  public java.lang.String getIncentives() {
    return incentives;
  }

  /**
   * Optional. A description of bonus, commission, and other compensation incentives associated with
   * the job not including salary or pay.
   *
   * The maximum number of allowed characters is 10,000.
   * @param incentives incentives or {@code null} for none
   */
  public Job setIncentives(java.lang.String incentives) {
    this.incentives = incentives;
    return this;
  }

  /**
   * Output only. Structured locations of the job, resolved from locations.
   * @return value or {@code null} for none
   */
  public java.util.List<JobLocation> getJobLocations() {
    return jobLocations;
  }

  /**
   * Output only. Structured locations of the job, resolved from locations.
   * @param jobLocations jobLocations or {@code null} for none
   */
  public Job setJobLocations(java.util.List<JobLocation> jobLocations) {
    this.jobLocations = jobLocations;
    return this;
  }

  /**
   * Required. The title of the job, such as "Software Engineer"
   *
   * The maximum number of allowed characters is 500.
   * @return value or {@code null} for none
   */
  public java.lang.String getJobTitle() {
    return jobTitle;
  }

  /**
   * Required. The title of the job, such as "Software Engineer"
   *
   * The maximum number of allowed characters is 500.
   * @param jobTitle jobTitle or {@code null} for none
   */
  public Job setJobTitle(java.lang.String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * Optional. The language of the posting. This field is distinct from any requirements for fluency
   * that are associated with the job.
   *
   * Language codes must be in BCP-47 format, such as "en-US" or "sr-Latn". For more information,
   * see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class="external"
   * target="_blank" }.
   *
   * If this field is unspecified and Job.description is present, detected language code based on
   * Job.description is assigned, otherwise defaults to 'en_US'.
   * @return value or {@code null} for none
   */
  public java.lang.String getLanguageCode() {
    return languageCode;
  }

  /**
   * Optional. The language of the posting. This field is distinct from any requirements for fluency
   * that are associated with the job.
   *
   * Language codes must be in BCP-47 format, such as "en-US" or "sr-Latn". For more information,
   * see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class="external"
   * target="_blank" }.
   *
   * If this field is unspecified and Job.description is present, detected language code based on
   * Job.description is assigned, otherwise defaults to 'en_US'.
   * @param languageCode languageCode or {@code null} for none
   */
  public Job setLanguageCode(java.lang.String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Optional. The experience level associated with the job, such as "Entry Level".
   * @return value or {@code null} for none
   */
  public java.lang.String getLevel() {
    return level;
  }

  /**
   * Optional. The experience level associated with the job, such as "Entry Level".
   * @param level level or {@code null} for none
   */
  public Job setLevel(java.lang.String level) {
    this.level = level;
    return this;
  }

  /**
   * Optional but strongly recommended for the best service experience.
   *
   * Location(s) where the emploeyer is looking to hire for this job posting.
   *
   * Specifying the full street address(es) of the hiring location enables better API results,
   * especially job searches by commute time.
   *
   * At most 50 locations are allowed for best search performance. If a job has more locations, it
   * is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes
   * 'ReqA-1', 'ReqA-2', etc.) as multiple jobs with the same requisition_id, company_name and
   * language_code are not allowed. If the original requisition_id must be preserved, a custom field
   * should be used for storage. It is also suggested to group the locations that close to each
   * other in the same job for better search experience.
   *
   * The maximum number of allowed characters is 500.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLocations() {
    return locations;
  }

  /**
   * Optional but strongly recommended for the best service experience.
   *
   * Location(s) where the emploeyer is looking to hire for this job posting.
   *
   * Specifying the full street address(es) of the hiring location enables better API results,
   * especially job searches by commute time.
   *
   * At most 50 locations are allowed for best search performance. If a job has more locations, it
   * is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes
   * 'ReqA-1', 'ReqA-2', etc.) as multiple jobs with the same requisition_id, company_name and
   * language_code are not allowed. If the original requisition_id must be preserved, a custom field
   * should be used for storage. It is also suggested to group the locations that close to each
   * other in the same job for better search experience.
   *
   * The maximum number of allowed characters is 500.
   * @param locations locations or {@code null} for none
   */
  public Job setLocations(java.util.List<java.lang.String> locations) {
    this.locations = locations;
    return this;
  }

  /**
   * Required during job update.
   *
   * Resource name assigned to a job by the API, for example, "/jobs/foo". Use of this field in job
   * queries and API calls is preferred over the use of requisition_id since this value is unique.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Required during job update.
   *
   * Resource name assigned to a job by the API, for example, "/jobs/foo". Use of this field in job
   * queries and API calls is preferred over the use of requisition_id since this value is unique.
   * @param name name or {@code null} for none
   */
  public Job setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. A promotion value of the job, as determined by the client. The value determines the
   * sort order of the jobs returned when searching for jobs using the featured jobs search call,
   * with higher promotional values being returned first and ties being resolved by relevance sort.
   * Only the jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH.
   *
   * Default value is 0, and negative values are treated as 0.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPromotionValue() {
    return promotionValue;
  }

  /**
   * Optional. A promotion value of the job, as determined by the client. The value determines the
   * sort order of the jobs returned when searching for jobs using the featured jobs search call,
   * with higher promotional values being returned first and ties being resolved by relevance sort.
   * Only the jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH.
   *
   * Default value is 0, and negative values are treated as 0.
   * @param promotionValue promotionValue or {@code null} for none
   */
  public Job setPromotionValue(java.lang.Integer promotionValue) {
    this.promotionValue = promotionValue;
    return this;
  }

  /**
   * Optional. The date this job was most recently published in UTC format. The default value is the
   * time the request arrives at the server.
   * @return value or {@code null} for none
   */
  public Date getPublishDate() {
    return publishDate;
  }

  /**
   * Optional. The date this job was most recently published in UTC format. The default value is the
   * time the request arrives at the server.
   * @param publishDate publishDate or {@code null} for none
   */
  public Job setPublishDate(Date publishDate) {
    this.publishDate = publishDate;
    return this;
  }

  /**
   * Optional. A description of the qualifications required to perform the job. The use of this
   * field is recommended as an alternative to using the more general description field.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 10,000.
   * @return value or {@code null} for none
   */
  public java.lang.String getQualifications() {
    return qualifications;
  }

  /**
   * Optional. A description of the qualifications required to perform the job. The use of this
   * field is recommended as an alternative to using the more general description field.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 10,000.
   * @param qualifications qualifications or {@code null} for none
   */
  public Job setQualifications(java.lang.String qualifications) {
    this.qualifications = qualifications;
    return this;
  }

  /**
   * Output only. The URL of a web page that displays job details.
   * @return value or {@code null} for none
   */
  public java.lang.String getReferenceUrl() {
    return referenceUrl;
  }

  /**
   * Output only. The URL of a web page that displays job details.
   * @param referenceUrl referenceUrl or {@code null} for none
   */
  public Job setReferenceUrl(java.lang.String referenceUrl) {
    this.referenceUrl = referenceUrl;
    return this;
  }

  /**
   * Optional. The job Region (for example, state, country) throughout which the job is available.
   * If this field is set, a LocationFilter in a search query within the job region finds this job
   * if an exact location match is not specified. If this field is set, setting job locations to the
   * same location level as this field is strongly recommended.
   * @return value or {@code null} for none
   */
  public java.lang.String getRegion() {
    return region;
  }

  /**
   * Optional. The job Region (for example, state, country) throughout which the job is available.
   * If this field is set, a LocationFilter in a search query within the job region finds this job
   * if an exact location match is not specified. If this field is set, setting job locations to the
   * same location level as this field is strongly recommended.
   * @param region region or {@code null} for none
   */
  public Job setRegion(java.lang.String region) {
    this.region = region;
    return this;
  }

  /**
   * Required. The requisition ID, also referred to as the posting ID, assigned by the client to
   * identify a job. This field is intended to be used by clients for client identification and
   * tracking of listings. A job is not allowed to be created if there is another job with the same
   * requisition_id, company_name and language_code.
   *
   * The maximum number of allowed characters is 255.
   * @return value or {@code null} for none
   */
  public java.lang.String getRequisitionId() {
    return requisitionId;
  }

  /**
   * Required. The requisition ID, also referred to as the posting ID, assigned by the client to
   * identify a job. This field is intended to be used by clients for client identification and
   * tracking of listings. A job is not allowed to be created if there is another job with the same
   * requisition_id, company_name and language_code.
   *
   * The maximum number of allowed characters is 255.
   * @param requisitionId requisitionId or {@code null} for none
   */
  public Job setRequisitionId(java.lang.String requisitionId) {
    this.requisitionId = requisitionId;
    return this;
  }

  /**
   * Optional. A description of job responsibilities. The use of this field is recommended as an
   * alternative to using the more general description field.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 10,000.
   * @return value or {@code null} for none
   */
  public java.lang.String getResponsibilities() {
    return responsibilities;
  }

  /**
   * Optional. A description of job responsibilities. The use of this field is recommended as an
   * alternative to using the more general description field.
   *
   * This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and
   * unordered list markup tags.
   *
   * The maximum number of allowed characters is 10,000.
   * @param responsibilities responsibilities or {@code null} for none
   */
  public Job setResponsibilities(java.lang.String responsibilities) {
    this.responsibilities = responsibilities;
    return this;
  }

  /**
   * Optional. The start date of the job in UTC time zone. Typically this field is used for
   * contracting engagements. Dates prior to 1970/1/1 and invalid date formats are ignored.
   * @return value or {@code null} for none
   */
  public Date getStartDate() {
    return startDate;
  }

  /**
   * Optional. The start date of the job in UTC time zone. Typically this field is used for
   * contracting engagements. Dates prior to 1970/1/1 and invalid date formats are ignored.
   * @param startDate startDate or {@code null} for none
   */
  public Job setStartDate(Date startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Deprecated. Use custom_attributes instead.
   *
   * Optional.
   *
   * A map of fields to hold non-filterable custom job attributes, similar to
   * filterable_custom_fields. These fields are distinct in that the data in these fields are not
   * indexed. Therefore, the client cannot search against them, nor can the client use them to list
   * jobs.
   *
   * The key of the map can be any valid string.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, CustomField> getUnindexedCustomFields() {
    return unindexedCustomFields;
  }

  /**
   * Deprecated. Use custom_attributes instead.
   *
   * Optional.
   *
   * A map of fields to hold non-filterable custom job attributes, similar to
   * filterable_custom_fields. These fields are distinct in that the data in these fields are not
   * indexed. Therefore, the client cannot search against them, nor can the client use them to list
   * jobs.
   *
   * The key of the map can be any valid string.
   * @param unindexedCustomFields unindexedCustomFields or {@code null} for none
   */
  public Job setUnindexedCustomFields(java.util.Map<String, CustomField> unindexedCustomFields) {
    this.unindexedCustomFields = unindexedCustomFields;
    return this;
  }

  /**
   * Output only. The timestamp when this job was last updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The timestamp when this job was last updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public Job setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Optional. The visibility of the job. Defaults to JobVisibility.PRIVATE if not specified.
   * Currently only JobVisibility.PRIVATE is supported.
   * @return value or {@code null} for none
   */
  public java.lang.String getVisibility() {
    return visibility;
  }

  /**
   * Optional. The visibility of the job. Defaults to JobVisibility.PRIVATE if not specified.
   * Currently only JobVisibility.PRIVATE is supported.
   * @param visibility visibility or {@code null} for none
   */
  public Job setVisibility(java.lang.String visibility) {
    this.visibility = visibility;
    return this;
  }

  @Override
  public Job set(String fieldName, Object value) {
    return (Job) super.set(fieldName, value);
  }

  @Override
  public Job clone() {
    return (Job) super.clone();
  }

}
