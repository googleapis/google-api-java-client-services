/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebaseapphosting.v1beta.model;

/**
 * A codebase source, representing the state of the codebase that the build will be created at.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase App Hosting API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CodebaseSource extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The author contained in the metadata of a version control change.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private UserMetadata author;

  /**
   * The branch in the codebase to build from, using the latest commit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String branch;

  /**
   * The commit in the codebase to build from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String commit;

  /**
   * Output only. The message of a codebase change.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String commitMessage;

  /**
   * Output only. The time the change was made.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String commitTime;

  /**
   * Output only. The human-friendly name to use for this Codebase when displaying a build. We use
   * the first eight characters of the SHA-1 hash for GitHub.com.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Output only. The full SHA-1 hash of a Git commit, if available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hash;

  /**
   * Output only. A URI linking to the codebase on an hosting provider's website. May not be valid
   * if the commit has been rebased or force-pushed out of existence in the linked repository.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uri;

  /**
   * Output only. The author contained in the metadata of a version control change.
   * @return value or {@code null} for none
   */
  public UserMetadata getAuthor() {
    return author;
  }

  /**
   * Output only. The author contained in the metadata of a version control change.
   * @param author author or {@code null} for none
   */
  public CodebaseSource setAuthor(UserMetadata author) {
    this.author = author;
    return this;
  }

  /**
   * The branch in the codebase to build from, using the latest commit.
   * @return value or {@code null} for none
   */
  public java.lang.String getBranch() {
    return branch;
  }

  /**
   * The branch in the codebase to build from, using the latest commit.
   * @param branch branch or {@code null} for none
   */
  public CodebaseSource setBranch(java.lang.String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * The commit in the codebase to build from.
   * @return value or {@code null} for none
   */
  public java.lang.String getCommit() {
    return commit;
  }

  /**
   * The commit in the codebase to build from.
   * @param commit commit or {@code null} for none
   */
  public CodebaseSource setCommit(java.lang.String commit) {
    this.commit = commit;
    return this;
  }

  /**
   * Output only. The message of a codebase change.
   * @return value or {@code null} for none
   */
  public java.lang.String getCommitMessage() {
    return commitMessage;
  }

  /**
   * Output only. The message of a codebase change.
   * @param commitMessage commitMessage or {@code null} for none
   */
  public CodebaseSource setCommitMessage(java.lang.String commitMessage) {
    this.commitMessage = commitMessage;
    return this;
  }

  /**
   * Output only. The time the change was made.
   * @return value or {@code null} for none
   */
  public String getCommitTime() {
    return commitTime;
  }

  /**
   * Output only. The time the change was made.
   * @param commitTime commitTime or {@code null} for none
   */
  public CodebaseSource setCommitTime(String commitTime) {
    this.commitTime = commitTime;
    return this;
  }

  /**
   * Output only. The human-friendly name to use for this Codebase when displaying a build. We use
   * the first eight characters of the SHA-1 hash for GitHub.com.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Output only. The human-friendly name to use for this Codebase when displaying a build. We use
   * the first eight characters of the SHA-1 hash for GitHub.com.
   * @param displayName displayName or {@code null} for none
   */
  public CodebaseSource setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Output only. The full SHA-1 hash of a Git commit, if available.
   * @return value or {@code null} for none
   */
  public java.lang.String getHash() {
    return hash;
  }

  /**
   * Output only. The full SHA-1 hash of a Git commit, if available.
   * @param hash hash or {@code null} for none
   */
  public CodebaseSource setHash(java.lang.String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * Output only. A URI linking to the codebase on an hosting provider's website. May not be valid
   * if the commit has been rebased or force-pushed out of existence in the linked repository.
   * @return value or {@code null} for none
   */
  public java.lang.String getUri() {
    return uri;
  }

  /**
   * Output only. A URI linking to the codebase on an hosting provider's website. May not be valid
   * if the commit has been rebased or force-pushed out of existence in the linked repository.
   * @param uri uri or {@code null} for none
   */
  public CodebaseSource setUri(java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  @Override
  public CodebaseSource set(String fieldName, Object value) {
    return (CodebaseSource) super.set(fieldName, value);
  }

  @Override
  public CodebaseSource clone() {
    return (CodebaseSource) super.clone();
  }

}
