/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.migrationcenter.v1alpha1.model;

/**
 * Summary Findings for a specific Group/PreferenceSet combination.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Migration Center API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ReportSummaryGroupPreferenceSetFinding extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Details about databases in this finding. Only present for databases.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ReportSummaryDatabaseFinding databaseFinding;

  /**
   * Description for the Preference Set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Display Name of the Preference Set
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Output only. A set of findings that applies to all virtual machines in the input. Only present
   * for virtual machines.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ReportSummaryMachineFinding machineFinding;

  /**
   * A set of preferences that applies to all machines in the context.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private VirtualMachinePreferences machinePreferences;

  /**
   * Output only. Compute monthly cost for this preference set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Money monthlyCostCompute;

  /**
   * Output only. Backup monthly cost for this preference set. Only present for databases.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Money monthlyCostDatabaseBackup;

  /**
   * Output only. Database licensing monthly cost for this preference set. Only present for
   * databases.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Money monthlyCostDatabaseLicensing;

  /**
   * Output only. GCVE Protected nodes cost for this preference set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Money monthlyCostGcveProtected;

  /**
   * Output only. Network Egress monthly cost for this preference set. Only present for virtual
   * machines.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Money monthlyCostNetworkEgress;

  /**
   * Output only. All operating systems licensing monthly cost for this preference set. Only present
   * for virtual machines.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Money monthlyCostOsLicense;

  /**
   * Output only. Miscellaneous monthly cost for this preference set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Money monthlyCostOther;

  /**
   * Output only. VMware portable license monthly cost for this preference set. Only present for
   * VMware target with portable license service type. This cost is not paid to google, but is an
   * estimate of license costs paid to VMware.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Money monthlyCostPortableVmwareLicense;

  /**
   * Output only. Storage monthly cost for this preference set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Money monthlyCostStorage;

  /**
   * Output only. Total monthly cost for this preference set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Money monthlyCostTotal;

  /**
   * Output only. A copy of the preference set used for this finding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private PreferenceSet preferenceSet;

  /**
   * Target region for this Preference Set
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String preferredRegion;

  /**
   * Text describing the pricing track specified for this Preference Set
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pricingTrack;

  /**
   * A set of findings that applies to Stole-Tenant machines in the input. Only present for virtual
   * machines.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ReportSummarySoleTenantFinding soleTenantFinding;

  /**
   * Text describing the business priority specified for this Preference Set
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String topPriority;

  /**
   * A set of findings that applies to VMWare machines in the input. Only present for virtual
   * machines.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ReportSummaryVMWareEngineFinding vmwareEngineFinding;

  /**
   * Output only. Details about databases in this finding. Only present for databases.
   * @return value or {@code null} for none
   */
  public ReportSummaryDatabaseFinding getDatabaseFinding() {
    return databaseFinding;
  }

  /**
   * Output only. Details about databases in this finding. Only present for databases.
   * @param databaseFinding databaseFinding or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setDatabaseFinding(ReportSummaryDatabaseFinding databaseFinding) {
    this.databaseFinding = databaseFinding;
    return this;
  }

  /**
   * Description for the Preference Set.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Description for the Preference Set.
   * @param description description or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Display Name of the Preference Set
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Display Name of the Preference Set
   * @param displayName displayName or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Output only. A set of findings that applies to all virtual machines in the input. Only present
   * for virtual machines.
   * @return value or {@code null} for none
   */
  public ReportSummaryMachineFinding getMachineFinding() {
    return machineFinding;
  }

  /**
   * Output only. A set of findings that applies to all virtual machines in the input. Only present
   * for virtual machines.
   * @param machineFinding machineFinding or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setMachineFinding(ReportSummaryMachineFinding machineFinding) {
    this.machineFinding = machineFinding;
    return this;
  }

  /**
   * A set of preferences that applies to all machines in the context.
   * @return value or {@code null} for none
   */
  public VirtualMachinePreferences getMachinePreferences() {
    return machinePreferences;
  }

  /**
   * A set of preferences that applies to all machines in the context.
   * @param machinePreferences machinePreferences or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setMachinePreferences(VirtualMachinePreferences machinePreferences) {
    this.machinePreferences = machinePreferences;
    return this;
  }

  /**
   * Output only. Compute monthly cost for this preference set.
   * @return value or {@code null} for none
   */
  public Money getMonthlyCostCompute() {
    return monthlyCostCompute;
  }

  /**
   * Output only. Compute monthly cost for this preference set.
   * @param monthlyCostCompute monthlyCostCompute or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setMonthlyCostCompute(Money monthlyCostCompute) {
    this.monthlyCostCompute = monthlyCostCompute;
    return this;
  }

  /**
   * Output only. Backup monthly cost for this preference set. Only present for databases.
   * @return value or {@code null} for none
   */
  public Money getMonthlyCostDatabaseBackup() {
    return monthlyCostDatabaseBackup;
  }

  /**
   * Output only. Backup monthly cost for this preference set. Only present for databases.
   * @param monthlyCostDatabaseBackup monthlyCostDatabaseBackup or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setMonthlyCostDatabaseBackup(Money monthlyCostDatabaseBackup) {
    this.monthlyCostDatabaseBackup = monthlyCostDatabaseBackup;
    return this;
  }

  /**
   * Output only. Database licensing monthly cost for this preference set. Only present for
   * databases.
   * @return value or {@code null} for none
   */
  public Money getMonthlyCostDatabaseLicensing() {
    return monthlyCostDatabaseLicensing;
  }

  /**
   * Output only. Database licensing monthly cost for this preference set. Only present for
   * databases.
   * @param monthlyCostDatabaseLicensing monthlyCostDatabaseLicensing or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setMonthlyCostDatabaseLicensing(Money monthlyCostDatabaseLicensing) {
    this.monthlyCostDatabaseLicensing = monthlyCostDatabaseLicensing;
    return this;
  }

  /**
   * Output only. GCVE Protected nodes cost for this preference set.
   * @return value or {@code null} for none
   */
  public Money getMonthlyCostGcveProtected() {
    return monthlyCostGcveProtected;
  }

  /**
   * Output only. GCVE Protected nodes cost for this preference set.
   * @param monthlyCostGcveProtected monthlyCostGcveProtected or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setMonthlyCostGcveProtected(Money monthlyCostGcveProtected) {
    this.monthlyCostGcveProtected = monthlyCostGcveProtected;
    return this;
  }

  /**
   * Output only. Network Egress monthly cost for this preference set. Only present for virtual
   * machines.
   * @return value or {@code null} for none
   */
  public Money getMonthlyCostNetworkEgress() {
    return monthlyCostNetworkEgress;
  }

  /**
   * Output only. Network Egress monthly cost for this preference set. Only present for virtual
   * machines.
   * @param monthlyCostNetworkEgress monthlyCostNetworkEgress or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setMonthlyCostNetworkEgress(Money monthlyCostNetworkEgress) {
    this.monthlyCostNetworkEgress = monthlyCostNetworkEgress;
    return this;
  }

  /**
   * Output only. All operating systems licensing monthly cost for this preference set. Only present
   * for virtual machines.
   * @return value or {@code null} for none
   */
  public Money getMonthlyCostOsLicense() {
    return monthlyCostOsLicense;
  }

  /**
   * Output only. All operating systems licensing monthly cost for this preference set. Only present
   * for virtual machines.
   * @param monthlyCostOsLicense monthlyCostOsLicense or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setMonthlyCostOsLicense(Money monthlyCostOsLicense) {
    this.monthlyCostOsLicense = monthlyCostOsLicense;
    return this;
  }

  /**
   * Output only. Miscellaneous monthly cost for this preference set.
   * @return value or {@code null} for none
   */
  public Money getMonthlyCostOther() {
    return monthlyCostOther;
  }

  /**
   * Output only. Miscellaneous monthly cost for this preference set.
   * @param monthlyCostOther monthlyCostOther or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setMonthlyCostOther(Money monthlyCostOther) {
    this.monthlyCostOther = monthlyCostOther;
    return this;
  }

  /**
   * Output only. VMware portable license monthly cost for this preference set. Only present for
   * VMware target with portable license service type. This cost is not paid to google, but is an
   * estimate of license costs paid to VMware.
   * @return value or {@code null} for none
   */
  public Money getMonthlyCostPortableVmwareLicense() {
    return monthlyCostPortableVmwareLicense;
  }

  /**
   * Output only. VMware portable license monthly cost for this preference set. Only present for
   * VMware target with portable license service type. This cost is not paid to google, but is an
   * estimate of license costs paid to VMware.
   * @param monthlyCostPortableVmwareLicense monthlyCostPortableVmwareLicense or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setMonthlyCostPortableVmwareLicense(Money monthlyCostPortableVmwareLicense) {
    this.monthlyCostPortableVmwareLicense = monthlyCostPortableVmwareLicense;
    return this;
  }

  /**
   * Output only. Storage monthly cost for this preference set.
   * @return value or {@code null} for none
   */
  public Money getMonthlyCostStorage() {
    return monthlyCostStorage;
  }

  /**
   * Output only. Storage monthly cost for this preference set.
   * @param monthlyCostStorage monthlyCostStorage or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setMonthlyCostStorage(Money monthlyCostStorage) {
    this.monthlyCostStorage = monthlyCostStorage;
    return this;
  }

  /**
   * Output only. Total monthly cost for this preference set.
   * @return value or {@code null} for none
   */
  public Money getMonthlyCostTotal() {
    return monthlyCostTotal;
  }

  /**
   * Output only. Total monthly cost for this preference set.
   * @param monthlyCostTotal monthlyCostTotal or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setMonthlyCostTotal(Money monthlyCostTotal) {
    this.monthlyCostTotal = monthlyCostTotal;
    return this;
  }

  /**
   * Output only. A copy of the preference set used for this finding.
   * @return value or {@code null} for none
   */
  public PreferenceSet getPreferenceSet() {
    return preferenceSet;
  }

  /**
   * Output only. A copy of the preference set used for this finding.
   * @param preferenceSet preferenceSet or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setPreferenceSet(PreferenceSet preferenceSet) {
    this.preferenceSet = preferenceSet;
    return this;
  }

  /**
   * Target region for this Preference Set
   * @return value or {@code null} for none
   */
  public java.lang.String getPreferredRegion() {
    return preferredRegion;
  }

  /**
   * Target region for this Preference Set
   * @param preferredRegion preferredRegion or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setPreferredRegion(java.lang.String preferredRegion) {
    this.preferredRegion = preferredRegion;
    return this;
  }

  /**
   * Text describing the pricing track specified for this Preference Set
   * @return value or {@code null} for none
   */
  public java.lang.String getPricingTrack() {
    return pricingTrack;
  }

  /**
   * Text describing the pricing track specified for this Preference Set
   * @param pricingTrack pricingTrack or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setPricingTrack(java.lang.String pricingTrack) {
    this.pricingTrack = pricingTrack;
    return this;
  }

  /**
   * A set of findings that applies to Stole-Tenant machines in the input. Only present for virtual
   * machines.
   * @return value or {@code null} for none
   */
  public ReportSummarySoleTenantFinding getSoleTenantFinding() {
    return soleTenantFinding;
  }

  /**
   * A set of findings that applies to Stole-Tenant machines in the input. Only present for virtual
   * machines.
   * @param soleTenantFinding soleTenantFinding or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setSoleTenantFinding(ReportSummarySoleTenantFinding soleTenantFinding) {
    this.soleTenantFinding = soleTenantFinding;
    return this;
  }

  /**
   * Text describing the business priority specified for this Preference Set
   * @return value or {@code null} for none
   */
  public java.lang.String getTopPriority() {
    return topPriority;
  }

  /**
   * Text describing the business priority specified for this Preference Set
   * @param topPriority topPriority or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setTopPriority(java.lang.String topPriority) {
    this.topPriority = topPriority;
    return this;
  }

  /**
   * A set of findings that applies to VMWare machines in the input. Only present for virtual
   * machines.
   * @return value or {@code null} for none
   */
  public ReportSummaryVMWareEngineFinding getVmwareEngineFinding() {
    return vmwareEngineFinding;
  }

  /**
   * A set of findings that applies to VMWare machines in the input. Only present for virtual
   * machines.
   * @param vmwareEngineFinding vmwareEngineFinding or {@code null} for none
   */
  public ReportSummaryGroupPreferenceSetFinding setVmwareEngineFinding(ReportSummaryVMWareEngineFinding vmwareEngineFinding) {
    this.vmwareEngineFinding = vmwareEngineFinding;
    return this;
  }

  @Override
  public ReportSummaryGroupPreferenceSetFinding set(String fieldName, Object value) {
    return (ReportSummaryGroupPreferenceSetFinding) super.set(fieldName, value);
  }

  @Override
  public ReportSummaryGroupPreferenceSetFinding clone() {
    return (ReportSummaryGroupPreferenceSetFinding) super.clone();
  }

}
