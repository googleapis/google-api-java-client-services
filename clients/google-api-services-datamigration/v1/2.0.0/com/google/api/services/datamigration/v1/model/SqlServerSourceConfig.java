/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.datamigration.v1.model;

/**
 * Configuration for SQL Server as a source in a migration.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Database Migration API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SqlServerSourceConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. The log sequence number (LSN) to start CDC data migration from.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String cdcStartPosition;

  /**
   * Optional. Maximum number of connections Database Migration Service will open to the source for
   * CDC phase.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxConcurrentCdcConnections;

  /**
   * Optional. Maximum number of connections Database Migration Service will open to the source for
   * full dump phase.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxConcurrentFullDumpConnections;

  /**
   * Optional. Whether to skip full dump or not.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean skipFullDump;

  /**
   * Optional. The log sequence number (LSN) to start CDC data migration from.
   * @return value or {@code null} for none
   */
  public java.lang.String getCdcStartPosition() {
    return cdcStartPosition;
  }

  /**
   * Optional. The log sequence number (LSN) to start CDC data migration from.
   * @param cdcStartPosition cdcStartPosition or {@code null} for none
   */
  public SqlServerSourceConfig setCdcStartPosition(java.lang.String cdcStartPosition) {
    this.cdcStartPosition = cdcStartPosition;
    return this;
  }

  /**
   * Optional. Maximum number of connections Database Migration Service will open to the source for
   * CDC phase.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxConcurrentCdcConnections() {
    return maxConcurrentCdcConnections;
  }

  /**
   * Optional. Maximum number of connections Database Migration Service will open to the source for
   * CDC phase.
   * @param maxConcurrentCdcConnections maxConcurrentCdcConnections or {@code null} for none
   */
  public SqlServerSourceConfig setMaxConcurrentCdcConnections(java.lang.Integer maxConcurrentCdcConnections) {
    this.maxConcurrentCdcConnections = maxConcurrentCdcConnections;
    return this;
  }

  /**
   * Optional. Maximum number of connections Database Migration Service will open to the source for
   * full dump phase.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxConcurrentFullDumpConnections() {
    return maxConcurrentFullDumpConnections;
  }

  /**
   * Optional. Maximum number of connections Database Migration Service will open to the source for
   * full dump phase.
   * @param maxConcurrentFullDumpConnections maxConcurrentFullDumpConnections or {@code null} for none
   */
  public SqlServerSourceConfig setMaxConcurrentFullDumpConnections(java.lang.Integer maxConcurrentFullDumpConnections) {
    this.maxConcurrentFullDumpConnections = maxConcurrentFullDumpConnections;
    return this;
  }

  /**
   * Optional. Whether to skip full dump or not.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSkipFullDump() {
    return skipFullDump;
  }

  /**
   * Optional. Whether to skip full dump or not.
   * @param skipFullDump skipFullDump or {@code null} for none
   */
  public SqlServerSourceConfig setSkipFullDump(java.lang.Boolean skipFullDump) {
    this.skipFullDump = skipFullDump;
    return this;
  }

  @Override
  public SqlServerSourceConfig set(String fieldName, Object value) {
    return (SqlServerSourceConfig) super.set(fieldName, value);
  }

  @Override
  public SqlServerSourceConfig clone() {
    return (SqlServerSourceConfig) super.clone();
  }

}
