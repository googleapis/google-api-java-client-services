/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.containeranalysis.v1beta1.model;

/**
 * This defines the format used to record keys used in the software supply chain. An in-toto link is
 * attested using one or more keys defined in the in-toto layout. An example of this is: { "key_id":
 * "776a00e29f3559e0141b3b096f696abc6cfb0c657ab40f441132b345b0...", "key_type": "rsa",
 * "public_key_value": "-----BEGIN PUBLIC KEY-----\nMIIBojANBgkqhkiG9w0B...", "key_scheme": "rsassa-
 * pss-sha256" } The format for in-toto's key definition can be found in section 4.2 of the in-toto
 * specification.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Container Analysis API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SigningKey extends com.google.api.client.json.GenericJson {

  /**
   * key_id is an identifier for the signing key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String keyId;

  /**
   * This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String keyScheme;

  /**
   * This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String keyType;

  /**
   * This field contains the actual public key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String publicKeyValue;

  /**
   * key_id is an identifier for the signing key.
   * @return value or {@code null} for none
   */
  public java.lang.String getKeyId() {
    return keyId;
  }

  /**
   * key_id is an identifier for the signing key.
   * @param keyId keyId or {@code null} for none
   */
  public SigningKey setKeyId(java.lang.String keyId) {
    this.keyId = keyId;
    return this;
  }

  /**
   * This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
   * @return value or {@code null} for none
   */
  public java.lang.String getKeyScheme() {
    return keyScheme;
  }

  /**
   * This field contains the corresponding signature scheme. Eg: "rsassa-pss-sha256".
   * @param keyScheme keyScheme or {@code null} for none
   */
  public SigningKey setKeyScheme(java.lang.String keyScheme) {
    this.keyScheme = keyScheme;
    return this;
  }

  /**
   * This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
   * @return value or {@code null} for none
   */
  public java.lang.String getKeyType() {
    return keyType;
  }

  /**
   * This field identifies the specific signing method. Eg: "rsa", "ed25519", and "ecdsa".
   * @param keyType keyType or {@code null} for none
   */
  public SigningKey setKeyType(java.lang.String keyType) {
    this.keyType = keyType;
    return this;
  }

  /**
   * This field contains the actual public key.
   * @return value or {@code null} for none
   */
  public java.lang.String getPublicKeyValue() {
    return publicKeyValue;
  }

  /**
   * This field contains the actual public key.
   * @param publicKeyValue publicKeyValue or {@code null} for none
   */
  public SigningKey setPublicKeyValue(java.lang.String publicKeyValue) {
    this.publicKeyValue = publicKeyValue;
    return this;
  }

  @Override
  public SigningKey set(String fieldName, Object value) {
    return (SigningKey) super.set(fieldName, value);
  }

  @Override
  public SigningKey clone() {
    return (SigningKey) super.clone();
  }

}
