/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.networkmanagement.v1.model;

/**
 * Message describing MonitoringPoint resource.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Network Management API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MonitoringPoint extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Indicates if automaitic geographic location is enabled for the MonitoringPoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean autoGeoLocationEnabled;

  /**
   * Output only. Connection status of the MonitoringPoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String connectionStatus;

  /**
   * Output only. The time the MonitoringPoint was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Output only. Display name of the MonitoringPoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Output only. The codes of errors detected in the MonitoringPoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> errors;

  /**
   * Output only. The geographical location of the MonitoringPoint. ;
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GeoLocation geoLocation;

  /**
   * Output only. The host information of the MonitoringPoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Host host;

  /**
   * Output only. The hostname of the MonitoringPoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostname;

  /**
   * Identifier. Name of the resource. Format: `projects/{project}/locations/{location}/networkMonit
   * oringProviders/{network_monitoring_provider}/monitoringPoints/{monitoring_point}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. The network interfaces of the MonitoringPoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<NetworkInterface> networkInterfaces;

  /**
   * Output only. IP address visible when MonitoringPoint connects to the provider.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String originatingIp;

  /**
   * Output only. The provider tags of the MonitoringPoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<ProviderTag> providerTags;

  /**
   * Output only. Deployment type of the MonitoringPoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String type;

  /**
   * Output only. The time the MonitoringPoint was updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Output only. Indicates if an upgrade is available for the MonitoringPoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean upgradeAvailable;

  /**
   * Output only. The type of upgrade available for the MonitoringPoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String upgradeType;

  /**
   * Output only. Version of the software running on the MonitoringPoint.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String version;

  /**
   * Output only. Indicates if automaitic geographic location is enabled for the MonitoringPoint.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAutoGeoLocationEnabled() {
    return autoGeoLocationEnabled;
  }

  /**
   * Output only. Indicates if automaitic geographic location is enabled for the MonitoringPoint.
   * @param autoGeoLocationEnabled autoGeoLocationEnabled or {@code null} for none
   */
  public MonitoringPoint setAutoGeoLocationEnabled(java.lang.Boolean autoGeoLocationEnabled) {
    this.autoGeoLocationEnabled = autoGeoLocationEnabled;
    return this;
  }

  /**
   * Output only. Connection status of the MonitoringPoint.
   * @return value or {@code null} for none
   */
  public java.lang.String getConnectionStatus() {
    return connectionStatus;
  }

  /**
   * Output only. Connection status of the MonitoringPoint.
   * @param connectionStatus connectionStatus or {@code null} for none
   */
  public MonitoringPoint setConnectionStatus(java.lang.String connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

  /**
   * Output only. The time the MonitoringPoint was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The time the MonitoringPoint was created.
   * @param createTime createTime or {@code null} for none
   */
  public MonitoringPoint setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. Display name of the MonitoringPoint.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Output only. Display name of the MonitoringPoint.
   * @param displayName displayName or {@code null} for none
   */
  public MonitoringPoint setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Output only. The codes of errors detected in the MonitoringPoint.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getErrors() {
    return errors;
  }

  /**
   * Output only. The codes of errors detected in the MonitoringPoint.
   * @param errors errors or {@code null} for none
   */
  public MonitoringPoint setErrors(java.util.List<java.lang.String> errors) {
    this.errors = errors;
    return this;
  }

  /**
   * Output only. The geographical location of the MonitoringPoint. ;
   * @return value or {@code null} for none
   */
  public GeoLocation getGeoLocation() {
    return geoLocation;
  }

  /**
   * Output only. The geographical location of the MonitoringPoint. ;
   * @param geoLocation geoLocation or {@code null} for none
   */
  public MonitoringPoint setGeoLocation(GeoLocation geoLocation) {
    this.geoLocation = geoLocation;
    return this;
  }

  /**
   * Output only. The host information of the MonitoringPoint.
   * @return value or {@code null} for none
   */
  public Host getHost() {
    return host;
  }

  /**
   * Output only. The host information of the MonitoringPoint.
   * @param host host or {@code null} for none
   */
  public MonitoringPoint setHost(Host host) {
    this.host = host;
    return this;
  }

  /**
   * Output only. The hostname of the MonitoringPoint.
   * @return value or {@code null} for none
   */
  public java.lang.String getHostname() {
    return hostname;
  }

  /**
   * Output only. The hostname of the MonitoringPoint.
   * @param hostname hostname or {@code null} for none
   */
  public MonitoringPoint setHostname(java.lang.String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Identifier. Name of the resource. Format: `projects/{project}/locations/{location}/networkMonit
   * oringProviders/{network_monitoring_provider}/monitoringPoints/{monitoring_point}`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. Name of the resource. Format: `projects/{project}/locations/{location}/networkMonit
   * oringProviders/{network_monitoring_provider}/monitoringPoints/{monitoring_point}`
   * @param name name or {@code null} for none
   */
  public MonitoringPoint setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The network interfaces of the MonitoringPoint.
   * @return value or {@code null} for none
   */
  public java.util.List<NetworkInterface> getNetworkInterfaces() {
    return networkInterfaces;
  }

  /**
   * Output only. The network interfaces of the MonitoringPoint.
   * @param networkInterfaces networkInterfaces or {@code null} for none
   */
  public MonitoringPoint setNetworkInterfaces(java.util.List<NetworkInterface> networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
    return this;
  }

  /**
   * Output only. IP address visible when MonitoringPoint connects to the provider.
   * @return value or {@code null} for none
   */
  public java.lang.String getOriginatingIp() {
    return originatingIp;
  }

  /**
   * Output only. IP address visible when MonitoringPoint connects to the provider.
   * @param originatingIp originatingIp or {@code null} for none
   */
  public MonitoringPoint setOriginatingIp(java.lang.String originatingIp) {
    this.originatingIp = originatingIp;
    return this;
  }

  /**
   * Output only. The provider tags of the MonitoringPoint.
   * @return value or {@code null} for none
   */
  public java.util.List<ProviderTag> getProviderTags() {
    return providerTags;
  }

  /**
   * Output only. The provider tags of the MonitoringPoint.
   * @param providerTags providerTags or {@code null} for none
   */
  public MonitoringPoint setProviderTags(java.util.List<ProviderTag> providerTags) {
    this.providerTags = providerTags;
    return this;
  }

  /**
   * Output only. Deployment type of the MonitoringPoint.
   * @return value or {@code null} for none
   */
  public java.lang.String getType() {
    return type;
  }

  /**
   * Output only. Deployment type of the MonitoringPoint.
   * @param type type or {@code null} for none
   */
  public MonitoringPoint setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  /**
   * Output only. The time the MonitoringPoint was updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The time the MonitoringPoint was updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public MonitoringPoint setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Output only. Indicates if an upgrade is available for the MonitoringPoint.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getUpgradeAvailable() {
    return upgradeAvailable;
  }

  /**
   * Output only. Indicates if an upgrade is available for the MonitoringPoint.
   * @param upgradeAvailable upgradeAvailable or {@code null} for none
   */
  public MonitoringPoint setUpgradeAvailable(java.lang.Boolean upgradeAvailable) {
    this.upgradeAvailable = upgradeAvailable;
    return this;
  }

  /**
   * Output only. The type of upgrade available for the MonitoringPoint.
   * @return value or {@code null} for none
   */
  public java.lang.String getUpgradeType() {
    return upgradeType;
  }

  /**
   * Output only. The type of upgrade available for the MonitoringPoint.
   * @param upgradeType upgradeType or {@code null} for none
   */
  public MonitoringPoint setUpgradeType(java.lang.String upgradeType) {
    this.upgradeType = upgradeType;
    return this;
  }

  /**
   * Output only. Version of the software running on the MonitoringPoint.
   * @return value or {@code null} for none
   */
  public java.lang.String getVersion() {
    return version;
  }

  /**
   * Output only. Version of the software running on the MonitoringPoint.
   * @param version version or {@code null} for none
   */
  public MonitoringPoint setVersion(java.lang.String version) {
    this.version = version;
    return this;
  }

  @Override
  public MonitoringPoint set(String fieldName, Object value) {
    return (MonitoringPoint) super.set(fieldName, value);
  }

  @Override
  public MonitoringPoint clone() {
    return (MonitoringPoint) super.clone();
  }

}
