/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.sqladmin.model;

/**
 * The request payload used to execute SQL statements.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud SQL Admin API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ExecuteSqlPayload extends com.google.api.client.json.GenericJson {

  /**
   * Optional. When set to true, the API caller identity associated with the request is used for
   * database authentication. The API caller must be an IAM user in the database.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean autoIamAuthn;

  /**
   * Optional. Name of the database on which the statement will be executed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String database;

  /**
   * Optional. Controls how the API should respond when the SQL execution result is incomplete due
   * to the size limit or another error. The default mode is to throw an error.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String partialResultMode;

  /**
   * Optional. The maximum number of rows returned per SQL statement.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long rowLimit;

  /**
   * Required. SQL statements to run on the database. It can be a single statement or a sequence of
   * statements separated by semicolons.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sqlStatement;

  /**
   * Optional. The name of an existing database user to connect to the database. When
   * `auto_iam_authn` is set to true, this field is ignored and the API caller's IAM user is used.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String user;

  /**
   * Optional. When set to true, the API caller identity associated with the request is used for
   * database authentication. The API caller must be an IAM user in the database.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAutoIamAuthn() {
    return autoIamAuthn;
  }

  /**
   * Optional. When set to true, the API caller identity associated with the request is used for
   * database authentication. The API caller must be an IAM user in the database.
   * @param autoIamAuthn autoIamAuthn or {@code null} for none
   */
  public ExecuteSqlPayload setAutoIamAuthn(java.lang.Boolean autoIamAuthn) {
    this.autoIamAuthn = autoIamAuthn;
    return this;
  }

  /**
   * Optional. Name of the database on which the statement will be executed.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabase() {
    return database;
  }

  /**
   * Optional. Name of the database on which the statement will be executed.
   * @param database database or {@code null} for none
   */
  public ExecuteSqlPayload setDatabase(java.lang.String database) {
    this.database = database;
    return this;
  }

  /**
   * Optional. Controls how the API should respond when the SQL execution result is incomplete due
   * to the size limit or another error. The default mode is to throw an error.
   * @return value or {@code null} for none
   */
  public java.lang.String getPartialResultMode() {
    return partialResultMode;
  }

  /**
   * Optional. Controls how the API should respond when the SQL execution result is incomplete due
   * to the size limit or another error. The default mode is to throw an error.
   * @param partialResultMode partialResultMode or {@code null} for none
   */
  public ExecuteSqlPayload setPartialResultMode(java.lang.String partialResultMode) {
    this.partialResultMode = partialResultMode;
    return this;
  }

  /**
   * Optional. The maximum number of rows returned per SQL statement.
   * @return value or {@code null} for none
   */
  public java.lang.Long getRowLimit() {
    return rowLimit;
  }

  /**
   * Optional. The maximum number of rows returned per SQL statement.
   * @param rowLimit rowLimit or {@code null} for none
   */
  public ExecuteSqlPayload setRowLimit(java.lang.Long rowLimit) {
    this.rowLimit = rowLimit;
    return this;
  }

  /**
   * Required. SQL statements to run on the database. It can be a single statement or a sequence of
   * statements separated by semicolons.
   * @return value or {@code null} for none
   */
  public java.lang.String getSqlStatement() {
    return sqlStatement;
  }

  /**
   * Required. SQL statements to run on the database. It can be a single statement or a sequence of
   * statements separated by semicolons.
   * @param sqlStatement sqlStatement or {@code null} for none
   */
  public ExecuteSqlPayload setSqlStatement(java.lang.String sqlStatement) {
    this.sqlStatement = sqlStatement;
    return this;
  }

  /**
   * Optional. The name of an existing database user to connect to the database. When
   * `auto_iam_authn` is set to true, this field is ignored and the API caller's IAM user is used.
   * @return value or {@code null} for none
   */
  public java.lang.String getUser() {
    return user;
  }

  /**
   * Optional. The name of an existing database user to connect to the database. When
   * `auto_iam_authn` is set to true, this field is ignored and the API caller's IAM user is used.
   * @param user user or {@code null} for none
   */
  public ExecuteSqlPayload setUser(java.lang.String user) {
    this.user = user;
    return this;
  }

  @Override
  public ExecuteSqlPayload set(String fieldName, Object value) {
    return (ExecuteSqlPayload) super.set(fieldName, value);
  }

  @Override
  public ExecuteSqlPayload clone() {
    return (ExecuteSqlPayload) super.clone();
  }

}
