/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for SnapshotSnapshotMetadata.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SnapshotSnapshotMetadata extends com.google.api.client.json.GenericJson {

  /**
   * The number of distinct resources fetched to render the content. This may aid the calculation of
   * total page load time for user experience. For example, if total_content_length is only a few
   * dozen kilobytes, but that is from fetching 100 distinct resources, total page load time might
   * be much higher than the total_content_length would otherwise infer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long countDistinctResources;

  /**
   * The time at which the main resource of the Snapshot was fetched, in seconds since epoch. Note
   * that the various page dependencies may have been fetched at much earlier points in time (hours,
   * maybe days) and that this could be off from the actual rendering time.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger crawlTimestamp;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private SnapshotSnapshotDocument snapshotDocument;

  /**
   * The score here corresponds to the score in Snapshot, a number between 0.0 and 1.0 (higher the
   * better).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float snapshotQualityScore;

  /**
   * Number of bytes fetched to render the content. For example, to render a web page, this value
   * would include the HTML, stylesheets, images, and all other dependencies. This can be used to
   * calculate a coarse estimate of the total page load time a user might experience.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger totalContentSize;

  /**
   * The number of distinct resources fetched to render the content. This may aid the calculation of
   * total page load time for user experience. For example, if total_content_length is only a few
   * dozen kilobytes, but that is from fetching 100 distinct resources, total page load time might
   * be much higher than the total_content_length would otherwise infer.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCountDistinctResources() {
    return countDistinctResources;
  }

  /**
   * The number of distinct resources fetched to render the content. This may aid the calculation of
   * total page load time for user experience. For example, if total_content_length is only a few
   * dozen kilobytes, but that is from fetching 100 distinct resources, total page load time might
   * be much higher than the total_content_length would otherwise infer.
   * @param countDistinctResources countDistinctResources or {@code null} for none
   */
  public SnapshotSnapshotMetadata setCountDistinctResources(java.lang.Long countDistinctResources) {
    this.countDistinctResources = countDistinctResources;
    return this;
  }

  /**
   * The time at which the main resource of the Snapshot was fetched, in seconds since epoch. Note
   * that the various page dependencies may have been fetched at much earlier points in time (hours,
   * maybe days) and that this could be off from the actual rendering time.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getCrawlTimestamp() {
    return crawlTimestamp;
  }

  /**
   * The time at which the main resource of the Snapshot was fetched, in seconds since epoch. Note
   * that the various page dependencies may have been fetched at much earlier points in time (hours,
   * maybe days) and that this could be off from the actual rendering time.
   * @param crawlTimestamp crawlTimestamp or {@code null} for none
   */
  public SnapshotSnapshotMetadata setCrawlTimestamp(java.math.BigInteger crawlTimestamp) {
    this.crawlTimestamp = crawlTimestamp;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public SnapshotSnapshotDocument getSnapshotDocument() {
    return snapshotDocument;
  }

  /**
   * @param snapshotDocument snapshotDocument or {@code null} for none
   */
  public SnapshotSnapshotMetadata setSnapshotDocument(SnapshotSnapshotDocument snapshotDocument) {
    this.snapshotDocument = snapshotDocument;
    return this;
  }

  /**
   * The score here corresponds to the score in Snapshot, a number between 0.0 and 1.0 (higher the
   * better).
   * @return value or {@code null} for none
   */
  public java.lang.Float getSnapshotQualityScore() {
    return snapshotQualityScore;
  }

  /**
   * The score here corresponds to the score in Snapshot, a number between 0.0 and 1.0 (higher the
   * better).
   * @param snapshotQualityScore snapshotQualityScore or {@code null} for none
   */
  public SnapshotSnapshotMetadata setSnapshotQualityScore(java.lang.Float snapshotQualityScore) {
    this.snapshotQualityScore = snapshotQualityScore;
    return this;
  }

  /**
   * Number of bytes fetched to render the content. For example, to render a web page, this value
   * would include the HTML, stylesheets, images, and all other dependencies. This can be used to
   * calculate a coarse estimate of the total page load time a user might experience.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getTotalContentSize() {
    return totalContentSize;
  }

  /**
   * Number of bytes fetched to render the content. For example, to render a web page, this value
   * would include the HTML, stylesheets, images, and all other dependencies. This can be used to
   * calculate a coarse estimate of the total page load time a user might experience.
   * @param totalContentSize totalContentSize or {@code null} for none
   */
  public SnapshotSnapshotMetadata setTotalContentSize(java.math.BigInteger totalContentSize) {
    this.totalContentSize = totalContentSize;
    return this;
  }

  @Override
  public SnapshotSnapshotMetadata set(String fieldName, Object value) {
    return (SnapshotSnapshotMetadata) super.set(fieldName, value);
  }

  @Override
  public SnapshotSnapshotMetadata clone() {
    return (SnapshotSnapshotMetadata) super.clone();
  }

}
