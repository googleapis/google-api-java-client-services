/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.transcoder.v1beta1.model;

/**
 * Sprite sheet configuration.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Transcoder API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SpriteSheet extends com.google.api.client.json.GenericJson {

  /**
   * The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no
   * maximum limit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer columnCount;

  /**
   * End time in seconds, relative to the output file timeline. When `end_time_offset` is not
   * specified, the sprites are generated until the end of the output file.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String endTimeOffset;

  /**
   * Required. File name prefix for the generated sprite sheets. Each sprite sheet has an
   * incremental 10-digit zero-padded suffix starting from 0 before the extension, such as
   * `"sprite_sheet0000000123.jpeg"`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String filePrefix;

  /**
   * Format type. The default is `"jpeg"`. Supported formats: - 'jpeg'
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String format;

  /**
   * Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String interval;

  /**
   * The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet
   * is created. The default is 0, which indicates no maximum limit.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rowCount;

  /**
   * Required. The height of sprite in pixels. Must be an even integer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer spriteHeightPixels;

  /**
   * Required. The width of sprite in pixels. Must be an even integer.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer spriteWidthPixels;

  /**
   * Start time in seconds, relative to the output file timeline. Determines the first sprite to
   * pick. The default is `0s`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String startTimeOffset;

  /**
   * Total number of sprites. Create the specified number of sprites distributed evenly across the
   * timeline of the output media. The default is 100.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer totalCount;

  /**
   * The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no
   * maximum limit.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getColumnCount() {
    return columnCount;
  }

  /**
   * The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no
   * maximum limit.
   * @param columnCount columnCount or {@code null} for none
   */
  public SpriteSheet setColumnCount(java.lang.Integer columnCount) {
    this.columnCount = columnCount;
    return this;
  }

  /**
   * End time in seconds, relative to the output file timeline. When `end_time_offset` is not
   * specified, the sprites are generated until the end of the output file.
   * @return value or {@code null} for none
   */
  public String getEndTimeOffset() {
    return endTimeOffset;
  }

  /**
   * End time in seconds, relative to the output file timeline. When `end_time_offset` is not
   * specified, the sprites are generated until the end of the output file.
   * @param endTimeOffset endTimeOffset or {@code null} for none
   */
  public SpriteSheet setEndTimeOffset(String endTimeOffset) {
    this.endTimeOffset = endTimeOffset;
    return this;
  }

  /**
   * Required. File name prefix for the generated sprite sheets. Each sprite sheet has an
   * incremental 10-digit zero-padded suffix starting from 0 before the extension, such as
   * `"sprite_sheet0000000123.jpeg"`.
   * @return value or {@code null} for none
   */
  public java.lang.String getFilePrefix() {
    return filePrefix;
  }

  /**
   * Required. File name prefix for the generated sprite sheets. Each sprite sheet has an
   * incremental 10-digit zero-padded suffix starting from 0 before the extension, such as
   * `"sprite_sheet0000000123.jpeg"`.
   * @param filePrefix filePrefix or {@code null} for none
   */
  public SpriteSheet setFilePrefix(java.lang.String filePrefix) {
    this.filePrefix = filePrefix;
    return this;
  }

  /**
   * Format type. The default is `"jpeg"`. Supported formats: - 'jpeg'
   * @return value or {@code null} for none
   */
  public java.lang.String getFormat() {
    return format;
  }

  /**
   * Format type. The default is `"jpeg"`. Supported formats: - 'jpeg'
   * @param format format or {@code null} for none
   */
  public SpriteSheet setFormat(java.lang.String format) {
    this.format = format;
    return this;
  }

  /**
   * Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
   * @return value or {@code null} for none
   */
  public String getInterval() {
    return interval;
  }

  /**
   * Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
   * @param interval interval or {@code null} for none
   */
  public SpriteSheet setInterval(String interval) {
    this.interval = interval;
    return this;
  }

  /**
   * The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet
   * is created. The default is 0, which indicates no maximum limit.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRowCount() {
    return rowCount;
  }

  /**
   * The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet
   * is created. The default is 0, which indicates no maximum limit.
   * @param rowCount rowCount or {@code null} for none
   */
  public SpriteSheet setRowCount(java.lang.Integer rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  /**
   * Required. The height of sprite in pixels. Must be an even integer.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSpriteHeightPixels() {
    return spriteHeightPixels;
  }

  /**
   * Required. The height of sprite in pixels. Must be an even integer.
   * @param spriteHeightPixels spriteHeightPixels or {@code null} for none
   */
  public SpriteSheet setSpriteHeightPixels(java.lang.Integer spriteHeightPixels) {
    this.spriteHeightPixels = spriteHeightPixels;
    return this;
  }

  /**
   * Required. The width of sprite in pixels. Must be an even integer.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getSpriteWidthPixels() {
    return spriteWidthPixels;
  }

  /**
   * Required. The width of sprite in pixels. Must be an even integer.
   * @param spriteWidthPixels spriteWidthPixels or {@code null} for none
   */
  public SpriteSheet setSpriteWidthPixels(java.lang.Integer spriteWidthPixels) {
    this.spriteWidthPixels = spriteWidthPixels;
    return this;
  }

  /**
   * Start time in seconds, relative to the output file timeline. Determines the first sprite to
   * pick. The default is `0s`.
   * @return value or {@code null} for none
   */
  public String getStartTimeOffset() {
    return startTimeOffset;
  }

  /**
   * Start time in seconds, relative to the output file timeline. Determines the first sprite to
   * pick. The default is `0s`.
   * @param startTimeOffset startTimeOffset or {@code null} for none
   */
  public SpriteSheet setStartTimeOffset(String startTimeOffset) {
    this.startTimeOffset = startTimeOffset;
    return this;
  }

  /**
   * Total number of sprites. Create the specified number of sprites distributed evenly across the
   * timeline of the output media. The default is 100.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getTotalCount() {
    return totalCount;
  }

  /**
   * Total number of sprites. Create the specified number of sprites distributed evenly across the
   * timeline of the output media. The default is 100.
   * @param totalCount totalCount or {@code null} for none
   */
  public SpriteSheet setTotalCount(java.lang.Integer totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  @Override
  public SpriteSheet set(String fieldName, Object value) {
    return (SpriteSheet) super.set(fieldName, value);
  }

  @Override
  public SpriteSheet clone() {
    return (SpriteSheet) super.clone();
  }

}
