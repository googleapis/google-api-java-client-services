/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.discoveryengine.v1beta.model;

/**
 * Manages the connection to external data sources for all data stores grouped under a Collection.
 * It's a singleton resource of Collection. The initialization is only supported through
 * DataConnectorService.SetUpDataConnector method, which will create a new Collection and initialize
 * its DataConnector.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Discovery Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudDiscoveryengineV1DataConnector extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Whether the connector will be created with an ACL config. Currently this field only
   * affects Cloud Storage and BigQuery connectors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean aclEnabled;

  /**
   * Optional. Action configurations to make the connector support actions.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1ActionConfig actionConfig;

  /**
   * Output only. State of the action connector. This reflects whether the action connector is
   * initializing, active or has encountered errors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String actionState;

  /**
   * Optional. The connector level alert config.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudDiscoveryengineV1AlertPolicyConfig> alertPolicyConfigs;

  static {
    // hack to force ProGuard to consider GoogleCloudDiscoveryengineV1AlertPolicyConfig used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GoogleCloudDiscoveryengineV1AlertPolicyConfig.class);
  }

  /**
   * Optional. Indicates whether the connector is disabled for auto run. It can be used to pause
   * periodical and real time sync. Update: with the introduction of incremental_sync_disabled,
   * auto_run_disabled is used to pause/disable only full syncs
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean autoRunDisabled;

  /**
   * Optional. The configuration for establishing a BAP connection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1BAPConfig bapConfig;

  /**
   * Output only. User actions that must be completed before the connector can start syncing data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> blockingReasons;

  /**
   * Optional. The modes enabled for this connector. Default state is CONNECTOR_MODE_UNSPECIFIED.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> connectorModes;

  /**
   * Output only. The type of connector. Each source can only map to one type. For example,
   * salesforce, confluence and jira have THIRD_PARTY connector type. It is not mutable once set by
   * system.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String connectorType;

  /**
   * Optional. Whether the END USER AUTHENTICATION connector is created in SaaS.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean createEuaSaas;

  /**
   * Output only. Timestamp the DataConnector was created at.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Required. The name of the data source. Supported values: `salesforce`, `jira`, `confluence`,
   * `bigquery`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String dataSource;

  /**
   * Optional. Any target destinations used to connect to third-party services.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudDiscoveryengineV1DestinationConfig> destinationConfigs;

  /**
   * Optional. Any params and credentials used specifically for EUA connectors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1DataConnectorEndUserConfig endUserConfig;

  /**
   * List of entities from the connected data source to ingest.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleCloudDiscoveryengineV1DataConnectorSourceEntity> entities;

  /**
   * Output only. The errors from initialization or from the latest connector run.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GoogleRpcStatus> errors;

  /**
   * Optional. Any params and credentials used specifically for hybrid connectors supporting
   * FEDERATED mode. This field should only be set if the connector is a hybrid connector and we
   * want to enable FEDERATED mode.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1DataConnectorFederatedConfig federatedConfig;

  /**
   * Optional. If the connector is a hybrid connector, determines whether ingestion is enabled and
   * appropriate resources are provisioned during connector creation. If the connector is not a
   * hybrid connector, this field is ignored.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean hybridIngestionDisabled;

  /**
   * The refresh interval to sync the Access Control List information for the documents ingested by
   * this connector. If not set, the access control list will be refreshed at the default interval
   * of 30 minutes. The identity refresh interval can be at least 30 minutes and at most 7 days.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String identityRefreshInterval;

  /**
   * The configuration for the identity data synchronization runs. This contains the refresh
   * interval to sync the Access Control List information for the documents ingested by this
   * connector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1IdentityScheduleConfig identityScheduleConfig;

  /**
   * Optional. The refresh interval specifically for incremental data syncs. If unset, incremental
   * syncs will use the default from env, set to 3hrs. The minimum is 30 minutes and maximum is 7
   * days. Applicable to only 3P connectors. When the refresh interval is set to the same value as
   * the incremental refresh interval, incremental sync will be disabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String incrementalRefreshInterval;

  /**
   * Optional. Indicates whether incremental syncs are paused for this connector. This is
   * independent of auto_run_disabled. Applicable to only 3P connectors. When the refresh interval
   * is set to the same value as the incremental refresh interval, incremental sync will be
   * disabled, i.e. set to true.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean incrementalSyncDisabled;

  /**
   * Required data connector parameters in json string format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String jsonParams;

  /**
   * Input only. The KMS key to be used to protect the DataStores managed by this connector. Must be
   * set for requests that need to comply with CMEK Org Policy protections. If this field is set and
   * processed successfully, the DataStores created by this connector will be protected by the KMS
   * key.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String kmsKeyName;

  /**
   * Output only. For periodic connectors only, the last time a data sync was completed.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lastSyncTime;

  /**
   * Output only. The most recent timestamp when this DataConnector was paused, affecting all
   * functionalities such as data synchronization. Pausing a connector has the following effects: -
   * All functionalities, including data synchronization, are halted. - Any ongoing data
   * synchronization job will be canceled. - No future data synchronization runs will be scheduled
   * nor can be triggered.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String latestPauseTime;

  /**
   * Output only. The full resource name of the Data Connector. Format:
   * `projects/locations/collections/dataConnector`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Defines the scheduled time for the next data synchronization. This field requires hour ,
   * minute, and time_zone from the [IANA Time Zone Database](https://www.iana.org/time-zones). This
   * is utilized when the data connector has a refresh interval greater than 1 day. When the hours
   * or minutes are not specified, we will assume a sync time of 0:00. The user must provide a time
   * zone to avoid ambiguity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeDateTime nextSyncTime;

  /**
   * Required data connector parameters in structured json format.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.Object> params;

  /**
   * Output only. The tenant project ID associated with private connectivity connectors. This
   * project must be allowlisted by in order for the connector to function.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String privateConnectivityProjectId;

  /**
   * Output only. real-time sync state
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String realtimeState;

  /**
   * Optional. The configuration for realtime sync.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudDiscoveryengineV1DataConnectorRealtimeSyncConfig realtimeSyncConfig;

  /**
   * Required. The refresh interval for data sync. If duration is set to 0, the data will be synced
   * in real time. The streaming feature is not supported yet. The minimum is 30 minutes and maximum
   * is 7 days. When the refresh interval is set to the same value as the incremental refresh
   * interval, incremental sync will be disabled.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String refreshInterval;

  /**
   * Optional. Specifies keys to be removed from the 'params' field. This is only active when
   * 'params' is included in the 'update_mask' in an UpdateDataConnectorRequest. Deletion takes
   * precedence if a key is both in 'remove_param_keys' and present in the 'params' field of the
   * request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> removeParamKeys;

  /**
   * Output only. State of the connector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. The static IP addresses used by this connector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> staticIpAddresses;

  /**
   * Optional. Whether customer has enabled static IP addresses for this connector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean staticIpEnabled;

  /**
   * The data synchronization mode supported by the data connector.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String syncMode;

  /**
   * Output only. Timestamp the DataConnector was last updated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Optional. Whether the connector will be created with an ACL config. Currently this field only
   * affects Cloud Storage and BigQuery connectors.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAclEnabled() {
    return aclEnabled;
  }

  /**
   * Optional. Whether the connector will be created with an ACL config. Currently this field only
   * affects Cloud Storage and BigQuery connectors.
   * @param aclEnabled aclEnabled or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setAclEnabled(java.lang.Boolean aclEnabled) {
    this.aclEnabled = aclEnabled;
    return this;
  }

  /**
   * Optional. Action configurations to make the connector support actions.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1ActionConfig getActionConfig() {
    return actionConfig;
  }

  /**
   * Optional. Action configurations to make the connector support actions.
   * @param actionConfig actionConfig or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setActionConfig(GoogleCloudDiscoveryengineV1ActionConfig actionConfig) {
    this.actionConfig = actionConfig;
    return this;
  }

  /**
   * Output only. State of the action connector. This reflects whether the action connector is
   * initializing, active or has encountered errors.
   * @return value or {@code null} for none
   */
  public java.lang.String getActionState() {
    return actionState;
  }

  /**
   * Output only. State of the action connector. This reflects whether the action connector is
   * initializing, active or has encountered errors.
   * @param actionState actionState or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setActionState(java.lang.String actionState) {
    this.actionState = actionState;
    return this;
  }

  /**
   * Optional. The connector level alert config.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudDiscoveryengineV1AlertPolicyConfig> getAlertPolicyConfigs() {
    return alertPolicyConfigs;
  }

  /**
   * Optional. The connector level alert config.
   * @param alertPolicyConfigs alertPolicyConfigs or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setAlertPolicyConfigs(java.util.List<GoogleCloudDiscoveryengineV1AlertPolicyConfig> alertPolicyConfigs) {
    this.alertPolicyConfigs = alertPolicyConfigs;
    return this;
  }

  /**
   * Optional. Indicates whether the connector is disabled for auto run. It can be used to pause
   * periodical and real time sync. Update: with the introduction of incremental_sync_disabled,
   * auto_run_disabled is used to pause/disable only full syncs
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getAutoRunDisabled() {
    return autoRunDisabled;
  }

  /**
   * Optional. Indicates whether the connector is disabled for auto run. It can be used to pause
   * periodical and real time sync. Update: with the introduction of incremental_sync_disabled,
   * auto_run_disabled is used to pause/disable only full syncs
   * @param autoRunDisabled autoRunDisabled or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setAutoRunDisabled(java.lang.Boolean autoRunDisabled) {
    this.autoRunDisabled = autoRunDisabled;
    return this;
  }

  /**
   * Optional. The configuration for establishing a BAP connection.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1BAPConfig getBapConfig() {
    return bapConfig;
  }

  /**
   * Optional. The configuration for establishing a BAP connection.
   * @param bapConfig bapConfig or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setBapConfig(GoogleCloudDiscoveryengineV1BAPConfig bapConfig) {
    this.bapConfig = bapConfig;
    return this;
  }

  /**
   * Output only. User actions that must be completed before the connector can start syncing data.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getBlockingReasons() {
    return blockingReasons;
  }

  /**
   * Output only. User actions that must be completed before the connector can start syncing data.
   * @param blockingReasons blockingReasons or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setBlockingReasons(java.util.List<java.lang.String> blockingReasons) {
    this.blockingReasons = blockingReasons;
    return this;
  }

  /**
   * Optional. The modes enabled for this connector. Default state is CONNECTOR_MODE_UNSPECIFIED.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getConnectorModes() {
    return connectorModes;
  }

  /**
   * Optional. The modes enabled for this connector. Default state is CONNECTOR_MODE_UNSPECIFIED.
   * @param connectorModes connectorModes or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setConnectorModes(java.util.List<java.lang.String> connectorModes) {
    this.connectorModes = connectorModes;
    return this;
  }

  /**
   * Output only. The type of connector. Each source can only map to one type. For example,
   * salesforce, confluence and jira have THIRD_PARTY connector type. It is not mutable once set by
   * system.
   * @return value or {@code null} for none
   */
  public java.lang.String getConnectorType() {
    return connectorType;
  }

  /**
   * Output only. The type of connector. Each source can only map to one type. For example,
   * salesforce, confluence and jira have THIRD_PARTY connector type. It is not mutable once set by
   * system.
   * @param connectorType connectorType or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setConnectorType(java.lang.String connectorType) {
    this.connectorType = connectorType;
    return this;
  }

  /**
   * Optional. Whether the END USER AUTHENTICATION connector is created in SaaS.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getCreateEuaSaas() {
    return createEuaSaas;
  }

  /**
   * Optional. Whether the END USER AUTHENTICATION connector is created in SaaS.
   * @param createEuaSaas createEuaSaas or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setCreateEuaSaas(java.lang.Boolean createEuaSaas) {
    this.createEuaSaas = createEuaSaas;
    return this;
  }

  /**
   * Output only. Timestamp the DataConnector was created at.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Timestamp the DataConnector was created at.
   * @param createTime createTime or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Required. The name of the data source. Supported values: `salesforce`, `jira`, `confluence`,
   * `bigquery`.
   * @return value or {@code null} for none
   */
  public java.lang.String getDataSource() {
    return dataSource;
  }

  /**
   * Required. The name of the data source. Supported values: `salesforce`, `jira`, `confluence`,
   * `bigquery`.
   * @param dataSource dataSource or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setDataSource(java.lang.String dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Optional. Any target destinations used to connect to third-party services.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudDiscoveryengineV1DestinationConfig> getDestinationConfigs() {
    return destinationConfigs;
  }

  /**
   * Optional. Any target destinations used to connect to third-party services.
   * @param destinationConfigs destinationConfigs or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setDestinationConfigs(java.util.List<GoogleCloudDiscoveryengineV1DestinationConfig> destinationConfigs) {
    this.destinationConfigs = destinationConfigs;
    return this;
  }

  /**
   * Optional. Any params and credentials used specifically for EUA connectors.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnectorEndUserConfig getEndUserConfig() {
    return endUserConfig;
  }

  /**
   * Optional. Any params and credentials used specifically for EUA connectors.
   * @param endUserConfig endUserConfig or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setEndUserConfig(GoogleCloudDiscoveryengineV1DataConnectorEndUserConfig endUserConfig) {
    this.endUserConfig = endUserConfig;
    return this;
  }

  /**
   * List of entities from the connected data source to ingest.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleCloudDiscoveryengineV1DataConnectorSourceEntity> getEntities() {
    return entities;
  }

  /**
   * List of entities from the connected data source to ingest.
   * @param entities entities or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setEntities(java.util.List<GoogleCloudDiscoveryengineV1DataConnectorSourceEntity> entities) {
    this.entities = entities;
    return this;
  }

  /**
   * Output only. The errors from initialization or from the latest connector run.
   * @return value or {@code null} for none
   */
  public java.util.List<GoogleRpcStatus> getErrors() {
    return errors;
  }

  /**
   * Output only. The errors from initialization or from the latest connector run.
   * @param errors errors or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setErrors(java.util.List<GoogleRpcStatus> errors) {
    this.errors = errors;
    return this;
  }

  /**
   * Optional. Any params and credentials used specifically for hybrid connectors supporting
   * FEDERATED mode. This field should only be set if the connector is a hybrid connector and we
   * want to enable FEDERATED mode.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnectorFederatedConfig getFederatedConfig() {
    return federatedConfig;
  }

  /**
   * Optional. Any params and credentials used specifically for hybrid connectors supporting
   * FEDERATED mode. This field should only be set if the connector is a hybrid connector and we
   * want to enable FEDERATED mode.
   * @param federatedConfig federatedConfig or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setFederatedConfig(GoogleCloudDiscoveryengineV1DataConnectorFederatedConfig federatedConfig) {
    this.federatedConfig = federatedConfig;
    return this;
  }

  /**
   * Optional. If the connector is a hybrid connector, determines whether ingestion is enabled and
   * appropriate resources are provisioned during connector creation. If the connector is not a
   * hybrid connector, this field is ignored.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getHybridIngestionDisabled() {
    return hybridIngestionDisabled;
  }

  /**
   * Optional. If the connector is a hybrid connector, determines whether ingestion is enabled and
   * appropriate resources are provisioned during connector creation. If the connector is not a
   * hybrid connector, this field is ignored.
   * @param hybridIngestionDisabled hybridIngestionDisabled or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setHybridIngestionDisabled(java.lang.Boolean hybridIngestionDisabled) {
    this.hybridIngestionDisabled = hybridIngestionDisabled;
    return this;
  }

  /**
   * The refresh interval to sync the Access Control List information for the documents ingested by
   * this connector. If not set, the access control list will be refreshed at the default interval
   * of 30 minutes. The identity refresh interval can be at least 30 minutes and at most 7 days.
   * @return value or {@code null} for none
   */
  public String getIdentityRefreshInterval() {
    return identityRefreshInterval;
  }

  /**
   * The refresh interval to sync the Access Control List information for the documents ingested by
   * this connector. If not set, the access control list will be refreshed at the default interval
   * of 30 minutes. The identity refresh interval can be at least 30 minutes and at most 7 days.
   * @param identityRefreshInterval identityRefreshInterval or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setIdentityRefreshInterval(String identityRefreshInterval) {
    this.identityRefreshInterval = identityRefreshInterval;
    return this;
  }

  /**
   * The configuration for the identity data synchronization runs. This contains the refresh
   * interval to sync the Access Control List information for the documents ingested by this
   * connector.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1IdentityScheduleConfig getIdentityScheduleConfig() {
    return identityScheduleConfig;
  }

  /**
   * The configuration for the identity data synchronization runs. This contains the refresh
   * interval to sync the Access Control List information for the documents ingested by this
   * connector.
   * @param identityScheduleConfig identityScheduleConfig or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setIdentityScheduleConfig(GoogleCloudDiscoveryengineV1IdentityScheduleConfig identityScheduleConfig) {
    this.identityScheduleConfig = identityScheduleConfig;
    return this;
  }

  /**
   * Optional. The refresh interval specifically for incremental data syncs. If unset, incremental
   * syncs will use the default from env, set to 3hrs. The minimum is 30 minutes and maximum is 7
   * days. Applicable to only 3P connectors. When the refresh interval is set to the same value as
   * the incremental refresh interval, incremental sync will be disabled.
   * @return value or {@code null} for none
   */
  public String getIncrementalRefreshInterval() {
    return incrementalRefreshInterval;
  }

  /**
   * Optional. The refresh interval specifically for incremental data syncs. If unset, incremental
   * syncs will use the default from env, set to 3hrs. The minimum is 30 minutes and maximum is 7
   * days. Applicable to only 3P connectors. When the refresh interval is set to the same value as
   * the incremental refresh interval, incremental sync will be disabled.
   * @param incrementalRefreshInterval incrementalRefreshInterval or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setIncrementalRefreshInterval(String incrementalRefreshInterval) {
    this.incrementalRefreshInterval = incrementalRefreshInterval;
    return this;
  }

  /**
   * Optional. Indicates whether incremental syncs are paused for this connector. This is
   * independent of auto_run_disabled. Applicable to only 3P connectors. When the refresh interval
   * is set to the same value as the incremental refresh interval, incremental sync will be
   * disabled, i.e. set to true.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIncrementalSyncDisabled() {
    return incrementalSyncDisabled;
  }

  /**
   * Optional. Indicates whether incremental syncs are paused for this connector. This is
   * independent of auto_run_disabled. Applicable to only 3P connectors. When the refresh interval
   * is set to the same value as the incremental refresh interval, incremental sync will be
   * disabled, i.e. set to true.
   * @param incrementalSyncDisabled incrementalSyncDisabled or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setIncrementalSyncDisabled(java.lang.Boolean incrementalSyncDisabled) {
    this.incrementalSyncDisabled = incrementalSyncDisabled;
    return this;
  }

  /**
   * Required data connector parameters in json string format.
   * @return value or {@code null} for none
   */
  public java.lang.String getJsonParams() {
    return jsonParams;
  }

  /**
   * Required data connector parameters in json string format.
   * @param jsonParams jsonParams or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setJsonParams(java.lang.String jsonParams) {
    this.jsonParams = jsonParams;
    return this;
  }

  /**
   * Input only. The KMS key to be used to protect the DataStores managed by this connector. Must be
   * set for requests that need to comply with CMEK Org Policy protections. If this field is set and
   * processed successfully, the DataStores created by this connector will be protected by the KMS
   * key.
   * @return value or {@code null} for none
   */
  public java.lang.String getKmsKeyName() {
    return kmsKeyName;
  }

  /**
   * Input only. The KMS key to be used to protect the DataStores managed by this connector. Must be
   * set for requests that need to comply with CMEK Org Policy protections. If this field is set and
   * processed successfully, the DataStores created by this connector will be protected by the KMS
   * key.
   * @param kmsKeyName kmsKeyName or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setKmsKeyName(java.lang.String kmsKeyName) {
    this.kmsKeyName = kmsKeyName;
    return this;
  }

  /**
   * Output only. For periodic connectors only, the last time a data sync was completed.
   * @return value or {@code null} for none
   */
  public String getLastSyncTime() {
    return lastSyncTime;
  }

  /**
   * Output only. For periodic connectors only, the last time a data sync was completed.
   * @param lastSyncTime lastSyncTime or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setLastSyncTime(String lastSyncTime) {
    this.lastSyncTime = lastSyncTime;
    return this;
  }

  /**
   * Output only. The most recent timestamp when this DataConnector was paused, affecting all
   * functionalities such as data synchronization. Pausing a connector has the following effects: -
   * All functionalities, including data synchronization, are halted. - Any ongoing data
   * synchronization job will be canceled. - No future data synchronization runs will be scheduled
   * nor can be triggered.
   * @return value or {@code null} for none
   */
  public String getLatestPauseTime() {
    return latestPauseTime;
  }

  /**
   * Output only. The most recent timestamp when this DataConnector was paused, affecting all
   * functionalities such as data synchronization. Pausing a connector has the following effects: -
   * All functionalities, including data synchronization, are halted. - Any ongoing data
   * synchronization job will be canceled. - No future data synchronization runs will be scheduled
   * nor can be triggered.
   * @param latestPauseTime latestPauseTime or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setLatestPauseTime(String latestPauseTime) {
    this.latestPauseTime = latestPauseTime;
    return this;
  }

  /**
   * Output only. The full resource name of the Data Connector. Format:
   * `projects/locations/collections/dataConnector`.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The full resource name of the Data Connector. Format:
   * `projects/locations/collections/dataConnector`.
   * @param name name or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Defines the scheduled time for the next data synchronization. This field requires hour ,
   * minute, and time_zone from the [IANA Time Zone Database](https://www.iana.org/time-zones). This
   * is utilized when the data connector has a refresh interval greater than 1 day. When the hours
   * or minutes are not specified, we will assume a sync time of 0:00. The user must provide a time
   * zone to avoid ambiguity.
   * @return value or {@code null} for none
   */
  public GoogleTypeDateTime getNextSyncTime() {
    return nextSyncTime;
  }

  /**
   * Defines the scheduled time for the next data synchronization. This field requires hour ,
   * minute, and time_zone from the [IANA Time Zone Database](https://www.iana.org/time-zones). This
   * is utilized when the data connector has a refresh interval greater than 1 day. When the hours
   * or minutes are not specified, we will assume a sync time of 0:00. The user must provide a time
   * zone to avoid ambiguity.
   * @param nextSyncTime nextSyncTime or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setNextSyncTime(GoogleTypeDateTime nextSyncTime) {
    this.nextSyncTime = nextSyncTime;
    return this;
  }

  /**
   * Required data connector parameters in structured json format.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.Object> getParams() {
    return params;
  }

  /**
   * Required data connector parameters in structured json format.
   * @param params params or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setParams(java.util.Map<String, java.lang.Object> params) {
    this.params = params;
    return this;
  }

  /**
   * Output only. The tenant project ID associated with private connectivity connectors. This
   * project must be allowlisted by in order for the connector to function.
   * @return value or {@code null} for none
   */
  public java.lang.String getPrivateConnectivityProjectId() {
    return privateConnectivityProjectId;
  }

  /**
   * Output only. The tenant project ID associated with private connectivity connectors. This
   * project must be allowlisted by in order for the connector to function.
   * @param privateConnectivityProjectId privateConnectivityProjectId or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setPrivateConnectivityProjectId(java.lang.String privateConnectivityProjectId) {
    this.privateConnectivityProjectId = privateConnectivityProjectId;
    return this;
  }

  /**
   * Output only. real-time sync state
   * @return value or {@code null} for none
   */
  public java.lang.String getRealtimeState() {
    return realtimeState;
  }

  /**
   * Output only. real-time sync state
   * @param realtimeState realtimeState or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setRealtimeState(java.lang.String realtimeState) {
    this.realtimeState = realtimeState;
    return this;
  }

  /**
   * Optional. The configuration for realtime sync.
   * @return value or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnectorRealtimeSyncConfig getRealtimeSyncConfig() {
    return realtimeSyncConfig;
  }

  /**
   * Optional. The configuration for realtime sync.
   * @param realtimeSyncConfig realtimeSyncConfig or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setRealtimeSyncConfig(GoogleCloudDiscoveryengineV1DataConnectorRealtimeSyncConfig realtimeSyncConfig) {
    this.realtimeSyncConfig = realtimeSyncConfig;
    return this;
  }

  /**
   * Required. The refresh interval for data sync. If duration is set to 0, the data will be synced
   * in real time. The streaming feature is not supported yet. The minimum is 30 minutes and maximum
   * is 7 days. When the refresh interval is set to the same value as the incremental refresh
   * interval, incremental sync will be disabled.
   * @return value or {@code null} for none
   */
  public String getRefreshInterval() {
    return refreshInterval;
  }

  /**
   * Required. The refresh interval for data sync. If duration is set to 0, the data will be synced
   * in real time. The streaming feature is not supported yet. The minimum is 30 minutes and maximum
   * is 7 days. When the refresh interval is set to the same value as the incremental refresh
   * interval, incremental sync will be disabled.
   * @param refreshInterval refreshInterval or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setRefreshInterval(String refreshInterval) {
    this.refreshInterval = refreshInterval;
    return this;
  }

  /**
   * Optional. Specifies keys to be removed from the 'params' field. This is only active when
   * 'params' is included in the 'update_mask' in an UpdateDataConnectorRequest. Deletion takes
   * precedence if a key is both in 'remove_param_keys' and present in the 'params' field of the
   * request.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getRemoveParamKeys() {
    return removeParamKeys;
  }

  /**
   * Optional. Specifies keys to be removed from the 'params' field. This is only active when
   * 'params' is included in the 'update_mask' in an UpdateDataConnectorRequest. Deletion takes
   * precedence if a key is both in 'remove_param_keys' and present in the 'params' field of the
   * request.
   * @param removeParamKeys removeParamKeys or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setRemoveParamKeys(java.util.List<java.lang.String> removeParamKeys) {
    this.removeParamKeys = removeParamKeys;
    return this;
  }

  /**
   * Output only. State of the connector.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. State of the connector.
   * @param state state or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. The static IP addresses used by this connector.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getStaticIpAddresses() {
    return staticIpAddresses;
  }

  /**
   * Output only. The static IP addresses used by this connector.
   * @param staticIpAddresses staticIpAddresses or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setStaticIpAddresses(java.util.List<java.lang.String> staticIpAddresses) {
    this.staticIpAddresses = staticIpAddresses;
    return this;
  }

  /**
   * Optional. Whether customer has enabled static IP addresses for this connector.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getStaticIpEnabled() {
    return staticIpEnabled;
  }

  /**
   * Optional. Whether customer has enabled static IP addresses for this connector.
   * @param staticIpEnabled staticIpEnabled or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setStaticIpEnabled(java.lang.Boolean staticIpEnabled) {
    this.staticIpEnabled = staticIpEnabled;
    return this;
  }

  /**
   * The data synchronization mode supported by the data connector.
   * @return value or {@code null} for none
   */
  public java.lang.String getSyncMode() {
    return syncMode;
  }

  /**
   * The data synchronization mode supported by the data connector.
   * @param syncMode syncMode or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setSyncMode(java.lang.String syncMode) {
    this.syncMode = syncMode;
    return this;
  }

  /**
   * Output only. Timestamp the DataConnector was last updated.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Timestamp the DataConnector was last updated.
   * @param updateTime updateTime or {@code null} for none
   */
  public GoogleCloudDiscoveryengineV1DataConnector setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public GoogleCloudDiscoveryengineV1DataConnector set(String fieldName, Object value) {
    return (GoogleCloudDiscoveryengineV1DataConnector) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudDiscoveryengineV1DataConnector clone() {
    return (GoogleCloudDiscoveryengineV1DataConnector) super.clone();
  }

}
