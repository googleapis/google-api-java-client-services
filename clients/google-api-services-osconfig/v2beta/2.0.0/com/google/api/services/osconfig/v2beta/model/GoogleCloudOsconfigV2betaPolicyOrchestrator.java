/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.osconfig.v2beta.model;

/**
 * PolicyOrchestrator helps managing project+zone level policy resources (e.g. OS Policy
 * Assignments), by providing tools to create, update and delete them across projects and locations,
 * at scale. Policy orchestrator functions as an endless loop. Each iteration orchestrator computes
 * a set of resources that should be affected, then progressively applies changes to them. If for
 * some reason this set of resources changes over time (e.g. new projects are added), the future
 * loop iterations will address that. Orchestrator can either upsert or delete policy resources. For
 * more details, see the description of the `action`, and `orchestrated_resource` fields. Note that
 * policy orchestrator do not "manage" the resources it creates. Every iteration is independent and
 * only minimal history of past actions is retained (apart from Cloud Logging). If orchestrator gets
 * deleted, it does not affect the resources it created in the past. Those will remain where they
 * were. Same applies if projects are removed from the orchestrator's scope.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the OS Config API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudOsconfigV2betaPolicyOrchestrator extends com.google.api.client.json.GenericJson {

  /**
   * Required. Action to be done by the orchestrator in `projects/{project_id}/zones/{zone_id}`
   * locations defined by the `orchestration_scope`. Allowed values: - `UPSERT` - Orchestrator will
   * create or update target resources. - `DELETE` - Orchestrator will delete target resources, if
   * they exist
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String action;

  /**
   * Output only. Timestamp when the policy orchestrator resource was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. Freeform text describing the purpose of the resource.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String description;

  /**
   * Output only. This checksum is computed by the server based on the value of other fields, and
   * may be sent on update and delete requests to ensure the client has an up-to-date value before
   * proceeding.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Optional. Labels as key value pairs
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Immutable. Identifier. In form of *
   * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}` *
   * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}` *
   * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Required. Resource to be orchestrated by the policy orchestrator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudOsconfigV2betaOrchestratedResource orchestratedResource;

  /**
   * Optional. Defines scope for the orchestration, in context of the enclosing PolicyOrchestrator
   * resource. Scope is expanded into a list of pairs, in which the rollout action will take place.
   * Expansion starts with a Folder resource parenting the PolicyOrchestrator resource: - All the
   * descendant projects are listed. - List of project is cross joined with a list of all available
   * zones. - Resulting list of pairs is filtered according to the selectors.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudOsconfigV2betaOrchestrationScope orchestrationScope;

  /**
   * Output only. State of the orchestration.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleCloudOsconfigV2betaPolicyOrchestratorOrchestrationState orchestrationState;

  /**
   * Output only. Set to true, if the there are ongoing changes being applied by the orchestrator.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean reconciling;

  /**
   * Optional. State of the orchestrator. Can be updated to change orchestrator behaviour. Allowed
   * values: - `ACTIVE` - orchestrator is actively looking for actions to be taken. - `STOPPED` -
   * orchestrator won't make any changes. Note: There might be more states added in the future. We
   * use string here instead of an enum, to avoid the need of propagating new states to all the
   * client code.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Timestamp when the policy orchestrator resource was last modified.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Required. Action to be done by the orchestrator in `projects/{project_id}/zones/{zone_id}`
   * locations defined by the `orchestration_scope`. Allowed values: - `UPSERT` - Orchestrator will
   * create or update target resources. - `DELETE` - Orchestrator will delete target resources, if
   * they exist
   * @return value or {@code null} for none
   */
  public java.lang.String getAction() {
    return action;
  }

  /**
   * Required. Action to be done by the orchestrator in `projects/{project_id}/zones/{zone_id}`
   * locations defined by the `orchestration_scope`. Allowed values: - `UPSERT` - Orchestrator will
   * create or update target resources. - `DELETE` - Orchestrator will delete target resources, if
   * they exist
   * @param action action or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaPolicyOrchestrator setAction(java.lang.String action) {
    this.action = action;
    return this;
  }

  /**
   * Output only. Timestamp when the policy orchestrator resource was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. Timestamp when the policy orchestrator resource was created.
   * @param createTime createTime or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaPolicyOrchestrator setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. Freeform text describing the purpose of the resource.
   * @return value or {@code null} for none
   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Optional. Freeform text describing the purpose of the resource.
   * @param description description or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaPolicyOrchestrator setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  /**
   * Output only. This checksum is computed by the server based on the value of other fields, and
   * may be sent on update and delete requests to ensure the client has an up-to-date value before
   * proceeding.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Output only. This checksum is computed by the server based on the value of other fields, and
   * may be sent on update and delete requests to ensure the client has an up-to-date value before
   * proceeding.
   * @param etag etag or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaPolicyOrchestrator setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. Labels as key value pairs
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. Labels as key value pairs
   * @param labels labels or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaPolicyOrchestrator setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Immutable. Identifier. In form of *
   * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}` *
   * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}` *
   * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Immutable. Identifier. In form of *
   * `organizations/{organization_id}/locations/global/policyOrchestrators/{orchestrator_id}` *
   * `folders/{folder_id}/locations/global/policyOrchestrators/{orchestrator_id}` *
   * `projects/{project_id_or_number}/locations/global/policyOrchestrators/{orchestrator_id}`
   * @param name name or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaPolicyOrchestrator setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Resource to be orchestrated by the policy orchestrator.
   * @return value or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaOrchestratedResource getOrchestratedResource() {
    return orchestratedResource;
  }

  /**
   * Required. Resource to be orchestrated by the policy orchestrator.
   * @param orchestratedResource orchestratedResource or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaPolicyOrchestrator setOrchestratedResource(GoogleCloudOsconfigV2betaOrchestratedResource orchestratedResource) {
    this.orchestratedResource = orchestratedResource;
    return this;
  }

  /**
   * Optional. Defines scope for the orchestration, in context of the enclosing PolicyOrchestrator
   * resource. Scope is expanded into a list of pairs, in which the rollout action will take place.
   * Expansion starts with a Folder resource parenting the PolicyOrchestrator resource: - All the
   * descendant projects are listed. - List of project is cross joined with a list of all available
   * zones. - Resulting list of pairs is filtered according to the selectors.
   * @return value or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaOrchestrationScope getOrchestrationScope() {
    return orchestrationScope;
  }

  /**
   * Optional. Defines scope for the orchestration, in context of the enclosing PolicyOrchestrator
   * resource. Scope is expanded into a list of pairs, in which the rollout action will take place.
   * Expansion starts with a Folder resource parenting the PolicyOrchestrator resource: - All the
   * descendant projects are listed. - List of project is cross joined with a list of all available
   * zones. - Resulting list of pairs is filtered according to the selectors.
   * @param orchestrationScope orchestrationScope or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaPolicyOrchestrator setOrchestrationScope(GoogleCloudOsconfigV2betaOrchestrationScope orchestrationScope) {
    this.orchestrationScope = orchestrationScope;
    return this;
  }

  /**
   * Output only. State of the orchestration.
   * @return value or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaPolicyOrchestratorOrchestrationState getOrchestrationState() {
    return orchestrationState;
  }

  /**
   * Output only. State of the orchestration.
   * @param orchestrationState orchestrationState or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaPolicyOrchestrator setOrchestrationState(GoogleCloudOsconfigV2betaPolicyOrchestratorOrchestrationState orchestrationState) {
    this.orchestrationState = orchestrationState;
    return this;
  }

  /**
   * Output only. Set to true, if the there are ongoing changes being applied by the orchestrator.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getReconciling() {
    return reconciling;
  }

  /**
   * Output only. Set to true, if the there are ongoing changes being applied by the orchestrator.
   * @param reconciling reconciling or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaPolicyOrchestrator setReconciling(java.lang.Boolean reconciling) {
    this.reconciling = reconciling;
    return this;
  }

  /**
   * Optional. State of the orchestrator. Can be updated to change orchestrator behaviour. Allowed
   * values: - `ACTIVE` - orchestrator is actively looking for actions to be taken. - `STOPPED` -
   * orchestrator won't make any changes. Note: There might be more states added in the future. We
   * use string here instead of an enum, to avoid the need of propagating new states to all the
   * client code.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Optional. State of the orchestrator. Can be updated to change orchestrator behaviour. Allowed
   * values: - `ACTIVE` - orchestrator is actively looking for actions to be taken. - `STOPPED` -
   * orchestrator won't make any changes. Note: There might be more states added in the future. We
   * use string here instead of an enum, to avoid the need of propagating new states to all the
   * client code.
   * @param state state or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaPolicyOrchestrator setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Timestamp when the policy orchestrator resource was last modified.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. Timestamp when the policy orchestrator resource was last modified.
   * @param updateTime updateTime or {@code null} for none
   */
  public GoogleCloudOsconfigV2betaPolicyOrchestrator setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  @Override
  public GoogleCloudOsconfigV2betaPolicyOrchestrator set(String fieldName, Object value) {
    return (GoogleCloudOsconfigV2betaPolicyOrchestrator) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudOsconfigV2betaPolicyOrchestrator clone() {
    return (GoogleCloudOsconfigV2betaPolicyOrchestrator) super.clone();
  }

}
