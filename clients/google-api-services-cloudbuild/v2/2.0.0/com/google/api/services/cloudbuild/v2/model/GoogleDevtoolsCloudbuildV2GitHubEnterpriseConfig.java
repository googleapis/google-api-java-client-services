/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudbuild.v2.model;

/**
 * Configuration for connections to an instance of GitHub Enterprise.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Build API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig extends com.google.api.client.json.GenericJson {

  /**
   * Required. API Key used for authentication of webhook events.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String apiKey;

  /**
   * Optional. Id of the GitHub App created from the manifest.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long appId;

  /**
   * Optional. ID of the installation of the GitHub App.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long appInstallationId;

  /**
   * Optional. The URL-friendly name of the GitHub App.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String appSlug;

  /**
   * Required. The URI of the GitHub Enterprise host this connection is for.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostUri;

  /**
   * Optional. SecretManager resource containing the private key of the GitHub App, formatted as
   * `projects/secrets/versions`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String privateKeySecretVersion;

  /**
   * Output only. GitHub Enterprise version installed at the host_uri.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String serverVersion;

  /**
   * Optional. Configuration for using Service Directory to privately connect to a GitHub Enterprise
   * server. This should only be set if the GitHub Enterprise server is hosted on-premises and not
   * reachable by public internet. If this field is left empty, calls to the GitHub Enterprise
   * server will be made over the public internet.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig serviceDirectoryConfig;

  /**
   * Optional. SSL certificate to use for requests to GitHub Enterprise.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String sslCa;

  /**
   * Optional. SecretManager resource containing the webhook secret of the GitHub App, formatted as
   * `projects/secrets/versions`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String webhookSecretSecretVersion;

  /**
   * Required. API Key used for authentication of webhook events.
   * @return value or {@code null} for none
   */
  public java.lang.String getApiKey() {
    return apiKey;
  }

  /**
   * Required. API Key used for authentication of webhook events.
   * @param apiKey apiKey or {@code null} for none
   */
  public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig setApiKey(java.lang.String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Optional. Id of the GitHub App created from the manifest.
   * @return value or {@code null} for none
   */
  public java.lang.Long getAppId() {
    return appId;
  }

  /**
   * Optional. Id of the GitHub App created from the manifest.
   * @param appId appId or {@code null} for none
   */
  public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig setAppId(java.lang.Long appId) {
    this.appId = appId;
    return this;
  }

  /**
   * Optional. ID of the installation of the GitHub App.
   * @return value or {@code null} for none
   */
  public java.lang.Long getAppInstallationId() {
    return appInstallationId;
  }

  /**
   * Optional. ID of the installation of the GitHub App.
   * @param appInstallationId appInstallationId or {@code null} for none
   */
  public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig setAppInstallationId(java.lang.Long appInstallationId) {
    this.appInstallationId = appInstallationId;
    return this;
  }

  /**
   * Optional. The URL-friendly name of the GitHub App.
   * @return value or {@code null} for none
   */
  public java.lang.String getAppSlug() {
    return appSlug;
  }

  /**
   * Optional. The URL-friendly name of the GitHub App.
   * @param appSlug appSlug or {@code null} for none
   */
  public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig setAppSlug(java.lang.String appSlug) {
    this.appSlug = appSlug;
    return this;
  }

  /**
   * Required. The URI of the GitHub Enterprise host this connection is for.
   * @return value or {@code null} for none
   */
  public java.lang.String getHostUri() {
    return hostUri;
  }

  /**
   * Required. The URI of the GitHub Enterprise host this connection is for.
   * @param hostUri hostUri or {@code null} for none
   */
  public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig setHostUri(java.lang.String hostUri) {
    this.hostUri = hostUri;
    return this;
  }

  /**
   * Optional. SecretManager resource containing the private key of the GitHub App, formatted as
   * `projects/secrets/versions`.
   * @return value or {@code null} for none
   */
  public java.lang.String getPrivateKeySecretVersion() {
    return privateKeySecretVersion;
  }

  /**
   * Optional. SecretManager resource containing the private key of the GitHub App, formatted as
   * `projects/secrets/versions`.
   * @param privateKeySecretVersion privateKeySecretVersion or {@code null} for none
   */
  public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig setPrivateKeySecretVersion(java.lang.String privateKeySecretVersion) {
    this.privateKeySecretVersion = privateKeySecretVersion;
    return this;
  }

  /**
   * Output only. GitHub Enterprise version installed at the host_uri.
   * @return value or {@code null} for none
   */
  public java.lang.String getServerVersion() {
    return serverVersion;
  }

  /**
   * Output only. GitHub Enterprise version installed at the host_uri.
   * @param serverVersion serverVersion or {@code null} for none
   */
  public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig setServerVersion(java.lang.String serverVersion) {
    this.serverVersion = serverVersion;
    return this;
  }

  /**
   * Optional. Configuration for using Service Directory to privately connect to a GitHub Enterprise
   * server. This should only be set if the GitHub Enterprise server is hosted on-premises and not
   * reachable by public internet. If this field is left empty, calls to the GitHub Enterprise
   * server will be made over the public internet.
   * @return value or {@code null} for none
   */
  public GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig getServiceDirectoryConfig() {
    return serviceDirectoryConfig;
  }

  /**
   * Optional. Configuration for using Service Directory to privately connect to a GitHub Enterprise
   * server. This should only be set if the GitHub Enterprise server is hosted on-premises and not
   * reachable by public internet. If this field is left empty, calls to the GitHub Enterprise
   * server will be made over the public internet.
   * @param serviceDirectoryConfig serviceDirectoryConfig or {@code null} for none
   */
  public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig setServiceDirectoryConfig(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig serviceDirectoryConfig) {
    this.serviceDirectoryConfig = serviceDirectoryConfig;
    return this;
  }

  /**
   * Optional. SSL certificate to use for requests to GitHub Enterprise.
   * @return value or {@code null} for none
   */
  public java.lang.String getSslCa() {
    return sslCa;
  }

  /**
   * Optional. SSL certificate to use for requests to GitHub Enterprise.
   * @param sslCa sslCa or {@code null} for none
   */
  public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig setSslCa(java.lang.String sslCa) {
    this.sslCa = sslCa;
    return this;
  }

  /**
   * Optional. SecretManager resource containing the webhook secret of the GitHub App, formatted as
   * `projects/secrets/versions`.
   * @return value or {@code null} for none
   */
  public java.lang.String getWebhookSecretSecretVersion() {
    return webhookSecretSecretVersion;
  }

  /**
   * Optional. SecretManager resource containing the webhook secret of the GitHub App, formatted as
   * `projects/secrets/versions`.
   * @param webhookSecretSecretVersion webhookSecretSecretVersion or {@code null} for none
   */
  public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig setWebhookSecretSecretVersion(java.lang.String webhookSecretSecretVersion) {
    this.webhookSecretSecretVersion = webhookSecretSecretVersion;
    return this;
  }

  @Override
  public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig set(String fieldName, Object value) {
    return (GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig clone() {
    return (GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) super.clone();
  }

}
