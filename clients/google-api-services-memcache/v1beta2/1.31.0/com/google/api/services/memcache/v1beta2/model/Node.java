/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.memcache.v1beta2.model;

/**
 * Model definition for Node.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Memorystore for Memcached API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Node extends com.google.api.client.json.GenericJson {

  /**
   * Output only. Hostname or IP address of the Memcached node used by the clients to connect to the
   * Memcached server on this node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String host;

  /**
   * Output only. Identifier of the Memcached node. The node id does not include project or location
   * like the Memcached instance name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String nodeId;

  /**
   * User defined parameters currently applied to the node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private MemcacheParameters parameters;

  /**
   * Output only. The port number of the Memcached server on this node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer port;

  /**
   * Output only. Current state of the Memcached node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String state;

  /**
   * Output only. Location (GCP Zone) for the Memcached node.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String zone;

  /**
   * Output only. Hostname or IP address of the Memcached node used by the clients to connect to the
   * Memcached server on this node.
   * @return value or {@code null} for none
   */
  public java.lang.String getHost() {
    return host;
  }

  /**
   * Output only. Hostname or IP address of the Memcached node used by the clients to connect to the
   * Memcached server on this node.
   * @param host host or {@code null} for none
   */
  public Node setHost(java.lang.String host) {
    this.host = host;
    return this;
  }

  /**
   * Output only. Identifier of the Memcached node. The node id does not include project or location
   * like the Memcached instance name.
   * @return value or {@code null} for none
   */
  public java.lang.String getNodeId() {
    return nodeId;
  }

  /**
   * Output only. Identifier of the Memcached node. The node id does not include project or location
   * like the Memcached instance name.
   * @param nodeId nodeId or {@code null} for none
   */
  public Node setNodeId(java.lang.String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * User defined parameters currently applied to the node.
   * @return value or {@code null} for none
   */
  public MemcacheParameters getParameters() {
    return parameters;
  }

  /**
   * User defined parameters currently applied to the node.
   * @param parameters parameters or {@code null} for none
   */
  public Node setParameters(MemcacheParameters parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Output only. The port number of the Memcached server on this node.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPort() {
    return port;
  }

  /**
   * Output only. The port number of the Memcached server on this node.
   * @param port port or {@code null} for none
   */
  public Node setPort(java.lang.Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Output only. Current state of the Memcached node.
   * @return value or {@code null} for none
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Output only. Current state of the Memcached node.
   * @param state state or {@code null} for none
   */
  public Node setState(java.lang.String state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Location (GCP Zone) for the Memcached node.
   * @return value or {@code null} for none
   */
  public java.lang.String getZone() {
    return zone;
  }

  /**
   * Output only. Location (GCP Zone) for the Memcached node.
   * @param zone zone or {@code null} for none
   */
  public Node setZone(java.lang.String zone) {
    this.zone = zone;
    return this;
  }

  @Override
  public Node set(String fieldName, Object value) {
    return (Node) super.set(fieldName, value);
  }

  @Override
  public Node clone() {
    return (Node) super.clone();
  }

}
