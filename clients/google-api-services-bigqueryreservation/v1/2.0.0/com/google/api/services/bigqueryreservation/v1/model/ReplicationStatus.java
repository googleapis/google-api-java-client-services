/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.bigqueryreservation.v1.model;

/**
 * Disaster Recovery(DR) replication status of the reservation.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the BigQuery Reservation API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ReplicationStatus extends com.google.api.client.json.GenericJson {

  /**
   * Output only. The last error encountered while trying to replicate changes from the primary to
   * the secondary. This field is only available if the replication has not succeeded since.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Status error;

  /**
   * Output only. The time at which the last error was encountered while trying to replicate changes
   * from the primary to the secondary. This field is only available if the replication has not
   * succeeded since.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lastErrorTime;

  /**
   * Output only. A timestamp corresponding to the last change on the primary that was successfully
   * replicated to the secondary.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String lastReplicationTime;

  /**
   * Output only. The time at which a soft failover for the reservation and its associated datasets
   * was initiated. After this field is set, all subsequent changes to the reservation will be
   * rejected unless a hard failover overrides this operation. This field will be cleared once the
   * failover is complete.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String softFailoverStartTime;

  /**
   * Output only. The last error encountered while trying to replicate changes from the primary to
   * the secondary. This field is only available if the replication has not succeeded since.
   * @return value or {@code null} for none
   */
  public Status getError() {
    return error;
  }

  /**
   * Output only. The last error encountered while trying to replicate changes from the primary to
   * the secondary. This field is only available if the replication has not succeeded since.
   * @param error error or {@code null} for none
   */
  public ReplicationStatus setError(Status error) {
    this.error = error;
    return this;
  }

  /**
   * Output only. The time at which the last error was encountered while trying to replicate changes
   * from the primary to the secondary. This field is only available if the replication has not
   * succeeded since.
   * @return value or {@code null} for none
   */
  public String getLastErrorTime() {
    return lastErrorTime;
  }

  /**
   * Output only. The time at which the last error was encountered while trying to replicate changes
   * from the primary to the secondary. This field is only available if the replication has not
   * succeeded since.
   * @param lastErrorTime lastErrorTime or {@code null} for none
   */
  public ReplicationStatus setLastErrorTime(String lastErrorTime) {
    this.lastErrorTime = lastErrorTime;
    return this;
  }

  /**
   * Output only. A timestamp corresponding to the last change on the primary that was successfully
   * replicated to the secondary.
   * @return value or {@code null} for none
   */
  public String getLastReplicationTime() {
    return lastReplicationTime;
  }

  /**
   * Output only. A timestamp corresponding to the last change on the primary that was successfully
   * replicated to the secondary.
   * @param lastReplicationTime lastReplicationTime or {@code null} for none
   */
  public ReplicationStatus setLastReplicationTime(String lastReplicationTime) {
    this.lastReplicationTime = lastReplicationTime;
    return this;
  }

  /**
   * Output only. The time at which a soft failover for the reservation and its associated datasets
   * was initiated. After this field is set, all subsequent changes to the reservation will be
   * rejected unless a hard failover overrides this operation. This field will be cleared once the
   * failover is complete.
   * @return value or {@code null} for none
   */
  public String getSoftFailoverStartTime() {
    return softFailoverStartTime;
  }

  /**
   * Output only. The time at which a soft failover for the reservation and its associated datasets
   * was initiated. After this field is set, all subsequent changes to the reservation will be
   * rejected unless a hard failover overrides this operation. This field will be cleared once the
   * failover is complete.
   * @param softFailoverStartTime softFailoverStartTime or {@code null} for none
   */
  public ReplicationStatus setSoftFailoverStartTime(String softFailoverStartTime) {
    this.softFailoverStartTime = softFailoverStartTime;
    return this;
  }

  @Override
  public ReplicationStatus set(String fieldName, Object value) {
    return (ReplicationStatus) super.set(fieldName, value);
  }

  @Override
  public ReplicationStatus clone() {
    return (ReplicationStatus) super.clone();
  }

}
