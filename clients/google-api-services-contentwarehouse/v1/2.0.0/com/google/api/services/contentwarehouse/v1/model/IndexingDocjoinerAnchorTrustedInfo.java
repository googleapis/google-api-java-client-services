/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This message summarized anchors of one trusted site.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingDocjoinerAnchorTrustedInfo extends com.google.api.client.json.GenericJson {

  /**
   * Difference in KL-divergence from spam and non-spam anchors. Value >0 indicate that anchor text
   * from this trusted source is similar to anchors classified as spam which means that spammy
   * anchors are legitimate.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float matchedScore;

  /**
   * Detailed debug information about computation of trusted anchors match. Populated only when
   * --anchorspam_penalizer_debug=true
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> matchedScoreInfo;

  /**
   * Count of anchors classified as spam using anchor text.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float phrasesScore;

  /**
   * Site name from anchor.source().site().
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String site;

  /**
   * Tokenized text of all anchors from the site.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> text;

  /**
   * Fraction of pages with newsy anchors on the site, >0 for trusted sites.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float trustedScore;

  /**
   * Difference in KL-divergence from spam and non-spam anchors. Value >0 indicate that anchor text
   * from this trusted source is similar to anchors classified as spam which means that spammy
   * anchors are legitimate.
   * @return value or {@code null} for none
   */
  public java.lang.Float getMatchedScore() {
    return matchedScore;
  }

  /**
   * Difference in KL-divergence from spam and non-spam anchors. Value >0 indicate that anchor text
   * from this trusted source is similar to anchors classified as spam which means that spammy
   * anchors are legitimate.
   * @param matchedScore matchedScore or {@code null} for none
   */
  public IndexingDocjoinerAnchorTrustedInfo setMatchedScore(java.lang.Float matchedScore) {
    this.matchedScore = matchedScore;
    return this;
  }

  /**
   * Detailed debug information about computation of trusted anchors match. Populated only when
   * --anchorspam_penalizer_debug=true
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getMatchedScoreInfo() {
    return matchedScoreInfo;
  }

  /**
   * Detailed debug information about computation of trusted anchors match. Populated only when
   * --anchorspam_penalizer_debug=true
   * @param matchedScoreInfo matchedScoreInfo or {@code null} for none
   */
  public IndexingDocjoinerAnchorTrustedInfo setMatchedScoreInfo(java.util.List<java.lang.String> matchedScoreInfo) {
    this.matchedScoreInfo = matchedScoreInfo;
    return this;
  }

  /**
   * Count of anchors classified as spam using anchor text.
   * @return value or {@code null} for none
   */
  public java.lang.Float getPhrasesScore() {
    return phrasesScore;
  }

  /**
   * Count of anchors classified as spam using anchor text.
   * @param phrasesScore phrasesScore or {@code null} for none
   */
  public IndexingDocjoinerAnchorTrustedInfo setPhrasesScore(java.lang.Float phrasesScore) {
    this.phrasesScore = phrasesScore;
    return this;
  }

  /**
   * Site name from anchor.source().site().
   * @return value or {@code null} for none
   */
  public java.lang.String getSite() {
    return site;
  }

  /**
   * Site name from anchor.source().site().
   * @param site site or {@code null} for none
   */
  public IndexingDocjoinerAnchorTrustedInfo setSite(java.lang.String site) {
    this.site = site;
    return this;
  }

  /**
   * Tokenized text of all anchors from the site.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getText() {
    return text;
  }

  /**
   * Tokenized text of all anchors from the site.
   * @param text text or {@code null} for none
   */
  public IndexingDocjoinerAnchorTrustedInfo setText(java.util.List<java.lang.String> text) {
    this.text = text;
    return this;
  }

  /**
   * Fraction of pages with newsy anchors on the site, >0 for trusted sites.
   * @return value or {@code null} for none
   */
  public java.lang.Float getTrustedScore() {
    return trustedScore;
  }

  /**
   * Fraction of pages with newsy anchors on the site, >0 for trusted sites.
   * @param trustedScore trustedScore or {@code null} for none
   */
  public IndexingDocjoinerAnchorTrustedInfo setTrustedScore(java.lang.Float trustedScore) {
    this.trustedScore = trustedScore;
    return this;
  }

  @Override
  public IndexingDocjoinerAnchorTrustedInfo set(String fieldName, Object value) {
    return (IndexingDocjoinerAnchorTrustedInfo) super.set(fieldName, value);
  }

  @Override
  public IndexingDocjoinerAnchorTrustedInfo clone() {
    return (IndexingDocjoinerAnchorTrustedInfo) super.clone();
  }

}
