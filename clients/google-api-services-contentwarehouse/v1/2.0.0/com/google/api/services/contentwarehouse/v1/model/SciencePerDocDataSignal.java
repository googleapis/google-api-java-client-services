/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Model definition for SciencePerDocDataSignal.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class SciencePerDocDataSignal extends com.google.api.client.json.GenericJson {

  /**
   * Values for different metrics
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float avgCitations;

  /**
   * Number of papers in the bucket for this paper/signal combination 16-bit value
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer count;

  /**
   * Count of papers with 10 or more citations (ge is >=) 16-bit value
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer geThres1Count;

  /**
   * Count of papers with 50 or more citations 16-bit value
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer geThres2Count;

  /**
   * Signal type dependent (for Journals refers to the year) index must refers to years ago not
   * absolute year. 8-bit value
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer index;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float medianCitations;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer type;

  /**
   * Authors own a part of a paper value. This is the cumulative weight. If all papers falling into
   * this bucket are single author papers, then weight will be equal to 1.0. Otherwise it will be
   * smaller.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float weight;

  /**
   * Values for different metrics
   * @return value or {@code null} for none
   */
  public java.lang.Float getAvgCitations() {
    return avgCitations;
  }

  /**
   * Values for different metrics
   * @param avgCitations avgCitations or {@code null} for none
   */
  public SciencePerDocDataSignal setAvgCitations(java.lang.Float avgCitations) {
    this.avgCitations = avgCitations;
    return this;
  }

  /**
   * Number of papers in the bucket for this paper/signal combination 16-bit value
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCount() {
    return count;
  }

  /**
   * Number of papers in the bucket for this paper/signal combination 16-bit value
   * @param count count or {@code null} for none
   */
  public SciencePerDocDataSignal setCount(java.lang.Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Count of papers with 10 or more citations (ge is >=) 16-bit value
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGeThres1Count() {
    return geThres1Count;
  }

  /**
   * Count of papers with 10 or more citations (ge is >=) 16-bit value
   * @param geThres1Count geThres1Count or {@code null} for none
   */
  public SciencePerDocDataSignal setGeThres1Count(java.lang.Integer geThres1Count) {
    this.geThres1Count = geThres1Count;
    return this;
  }

  /**
   * Count of papers with 50 or more citations 16-bit value
   * @return value or {@code null} for none
   */
  public java.lang.Integer getGeThres2Count() {
    return geThres2Count;
  }

  /**
   * Count of papers with 50 or more citations 16-bit value
   * @param geThres2Count geThres2Count or {@code null} for none
   */
  public SciencePerDocDataSignal setGeThres2Count(java.lang.Integer geThres2Count) {
    this.geThres2Count = geThres2Count;
    return this;
  }

  /**
   * Signal type dependent (for Journals refers to the year) index must refers to years ago not
   * absolute year. 8-bit value
   * @return value or {@code null} for none
   */
  public java.lang.Integer getIndex() {
    return index;
  }

  /**
   * Signal type dependent (for Journals refers to the year) index must refers to years ago not
   * absolute year. 8-bit value
   * @param index index or {@code null} for none
   */
  public SciencePerDocDataSignal setIndex(java.lang.Integer index) {
    this.index = index;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Float getMedianCitations() {
    return medianCitations;
  }

  /**
   * @param medianCitations medianCitations or {@code null} for none
   */
  public SciencePerDocDataSignal setMedianCitations(java.lang.Float medianCitations) {
    this.medianCitations = medianCitations;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Integer getType() {
    return type;
  }

  /**
   * @param type type or {@code null} for none
   */
  public SciencePerDocDataSignal setType(java.lang.Integer type) {
    this.type = type;
    return this;
  }

  /**
   * Authors own a part of a paper value. This is the cumulative weight. If all papers falling into
   * this bucket are single author papers, then weight will be equal to 1.0. Otherwise it will be
   * smaller.
   * @return value or {@code null} for none
   */
  public java.lang.Float getWeight() {
    return weight;
  }

  /**
   * Authors own a part of a paper value. This is the cumulative weight. If all papers falling into
   * this bucket are single author papers, then weight will be equal to 1.0. Otherwise it will be
   * smaller.
   * @param weight weight or {@code null} for none
   */
  public SciencePerDocDataSignal setWeight(java.lang.Float weight) {
    this.weight = weight;
    return this;
  }

  @Override
  public SciencePerDocDataSignal set(String fieldName, Object value) {
    return (SciencePerDocDataSignal) super.set(fieldName, value);
  }

  @Override
  public SciencePerDocDataSignal clone() {
    return (SciencePerDocDataSignal) super.clone();
  }

}
