/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.securitycenter.v1beta1.model;

/**
 * Request message for grouping by findings.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Security Command Center API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GroupFindingsRequest extends com.google.api.client.json.GenericJson {

  /**
   * Expression that defines the filter to apply across findings. The expression is a list of one or
   * more restrictions combined via logical operators `AND` and `OR`. Parentheses are not supported,
   * and `OR` has higher precedence than `AND`.
   *
   * Restrictions have the form `  ` and may have a `-` character in front of them to indicate
   * negation. Examples include:
   *
   *  * name  * source_properties.a_property  * security_marks.marks.marka
   *
   * The supported operators are:
   *
   * * `=` for all value types. * `>`, `<`, `>=`, `<=` for integer values. * `:`, meaning substring
   * matching, for strings.
   *
   * The supported value types are:
   *
   * * string literals in quotes. * integer literals without quotes. * boolean literals `true` and
   * `false` without quotes.
   *
   * For example, `source_properties.size = 100` is a valid filter string.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String filter;

  /**
   * Expression that defines what assets fields to use for grouping (including `state`). The string
   * value should follow SQL syntax: comma separated list of fields. For example:
   * "parent,resource_name".
   *
   * The following fields are supported:
   *
   * * resource_name * category * state * parent
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String groupBy;

  /**
   * The maximum number of results to return in a single response. Default is 10, minimum is 1,
   * maximum is 1000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer pageSize;

  /**
   * The value returned by the last `GroupFindingsResponse`; indicates that this is a continuation
   * of a prior `GroupFindings` call, and that the system should return the next page of data.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pageToken;

  /**
   * Time used as a reference point when filtering findings. The filter is limited to findings
   * existing at the supplied time and their values are those at that specific time. Absence of this
   * field will default to the API's version of NOW.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String readTime;

  /**
   * Expression that defines the filter to apply across findings. The expression is a list of one or
   * more restrictions combined via logical operators `AND` and `OR`. Parentheses are not supported,
   * and `OR` has higher precedence than `AND`.
   *
   * Restrictions have the form `  ` and may have a `-` character in front of them to indicate
   * negation. Examples include:
   *
   *  * name  * source_properties.a_property  * security_marks.marks.marka
   *
   * The supported operators are:
   *
   * * `=` for all value types. * `>`, `<`, `>=`, `<=` for integer values. * `:`, meaning substring
   * matching, for strings.
   *
   * The supported value types are:
   *
   * * string literals in quotes. * integer literals without quotes. * boolean literals `true` and
   * `false` without quotes.
   *
   * For example, `source_properties.size = 100` is a valid filter string.
   * @return value or {@code null} for none
   */
  public java.lang.String getFilter() {
    return filter;
  }

  /**
   * Expression that defines the filter to apply across findings. The expression is a list of one or
   * more restrictions combined via logical operators `AND` and `OR`. Parentheses are not supported,
   * and `OR` has higher precedence than `AND`.
   *
   * Restrictions have the form `  ` and may have a `-` character in front of them to indicate
   * negation. Examples include:
   *
   *  * name  * source_properties.a_property  * security_marks.marks.marka
   *
   * The supported operators are:
   *
   * * `=` for all value types. * `>`, `<`, `>=`, `<=` for integer values. * `:`, meaning substring
   * matching, for strings.
   *
   * The supported value types are:
   *
   * * string literals in quotes. * integer literals without quotes. * boolean literals `true` and
   * `false` without quotes.
   *
   * For example, `source_properties.size = 100` is a valid filter string.
   * @param filter filter or {@code null} for none
   */
  public GroupFindingsRequest setFilter(java.lang.String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Expression that defines what assets fields to use for grouping (including `state`). The string
   * value should follow SQL syntax: comma separated list of fields. For example:
   * "parent,resource_name".
   *
   * The following fields are supported:
   *
   * * resource_name * category * state * parent
   * @return value or {@code null} for none
   */
  public java.lang.String getGroupBy() {
    return groupBy;
  }

  /**
   * Expression that defines what assets fields to use for grouping (including `state`). The string
   * value should follow SQL syntax: comma separated list of fields. For example:
   * "parent,resource_name".
   *
   * The following fields are supported:
   *
   * * resource_name * category * state * parent
   * @param groupBy groupBy or {@code null} for none
   */
  public GroupFindingsRequest setGroupBy(java.lang.String groupBy) {
    this.groupBy = groupBy;
    return this;
  }

  /**
   * The maximum number of results to return in a single response. Default is 10, minimum is 1,
   * maximum is 1000.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getPageSize() {
    return pageSize;
  }

  /**
   * The maximum number of results to return in a single response. Default is 10, minimum is 1,
   * maximum is 1000.
   * @param pageSize pageSize or {@code null} for none
   */
  public GroupFindingsRequest setPageSize(java.lang.Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * The value returned by the last `GroupFindingsResponse`; indicates that this is a continuation
   * of a prior `GroupFindings` call, and that the system should return the next page of data.
   * @return value or {@code null} for none
   */
  public java.lang.String getPageToken() {
    return pageToken;
  }

  /**
   * The value returned by the last `GroupFindingsResponse`; indicates that this is a continuation
   * of a prior `GroupFindings` call, and that the system should return the next page of data.
   * @param pageToken pageToken or {@code null} for none
   */
  public GroupFindingsRequest setPageToken(java.lang.String pageToken) {
    this.pageToken = pageToken;
    return this;
  }

  /**
   * Time used as a reference point when filtering findings. The filter is limited to findings
   * existing at the supplied time and their values are those at that specific time. Absence of this
   * field will default to the API's version of NOW.
   * @return value or {@code null} for none
   */
  public String getReadTime() {
    return readTime;
  }

  /**
   * Time used as a reference point when filtering findings. The filter is limited to findings
   * existing at the supplied time and their values are those at that specific time. Absence of this
   * field will default to the API's version of NOW.
   * @param readTime readTime or {@code null} for none
   */
  public GroupFindingsRequest setReadTime(String readTime) {
    this.readTime = readTime;
    return this;
  }

  @Override
  public GroupFindingsRequest set(String fieldName, Object value) {
    return (GroupFindingsRequest) super.set(fieldName, value);
  }

  @Override
  public GroupFindingsRequest clone() {
    return (GroupFindingsRequest) super.clone();
  }

}
