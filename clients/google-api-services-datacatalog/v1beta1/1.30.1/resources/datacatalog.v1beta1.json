{
  "canonicalName": "Data Catalog",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "rootUrl": "https://datacatalog.googleapis.com/",
  "ownerDomain": "google.com",
  "name": "datacatalog",
  "batchPath": "batch",
  "mtlsRootUrl": "https://datacatalog.mtls.googleapis.com/",
  "fullyEncodeReservedExpansion": true,
  "title": "Google Cloud Data Catalog API",
  "ownerName": "Google",
  "resources": {
    "entries": {
      "methods": {
        "lookup": {
          "id": "datacatalog.entries.lookup",
          "path": "v1beta1/entries:lookup",
          "description": "Get an entry by target resource name. This method allows clients to use\nthe resource name from the source Google Cloud Platform service to get the\nData Catalog Entry.",
          "httpMethod": "GET",
          "parameterOrder": [],
          "response": {
            "$ref": "GoogleCloudDatacatalogV1beta1Entry"
          },
          "parameters": {
            "linkedResource": {
              "location": "query",
              "description": "The full name of the Google Cloud Platform resource the Data Catalog\nentry represents. See:\nhttps://cloud.google.com/apis/design/resource_names#full_resource_name.\nFull names are case-sensitive.\n\nExamples:\n\n * //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId\n * //pubsub.googleapis.com/projects/projectId/topics/topicId",
              "type": "string"
            },
            "sqlResource": {
              "location": "query",
              "description": "The SQL name of the entry. SQL names are case-sensitive.\n\nExamples:\n\n  * `cloud_pubsub.project_id.topic_id`\n  * ``pubsub.project_id.`topic.id.with.dots` ``\n  * `bigquery.table.project_id.dataset_id.table_id`\n  * `bigquery.dataset.project_id.dataset_id`\n  * `datacatalog.entry.project_id.location_id.entry_group_id.entry_id`\n\n`*_id`s shoud satisfy the standard SQL rules for identifiers.\nhttps://cloud.google.com/bigquery/docs/reference/standard-sql/lexical.",
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "v1beta1/entries:lookup"
        }
      }
    },
    "catalog": {
      "methods": {
        "search": {
          "httpMethod": "POST",
          "parameterOrder": [],
          "response": {
            "$ref": "GoogleCloudDatacatalogV1beta1SearchCatalogResponse"
          },
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "v1beta1/catalog:search",
          "id": "datacatalog.catalog.search",
          "path": "v1beta1/catalog:search",
          "description": "Searches Data Catalog for multiple resources like entries, tags that\nmatch a query.\n\nThis is a custom method\n(https://cloud.google.com/apis/design/custom_methods) and does not return\nthe complete resource, only the resource identifier and high level\nfields. Clients can subsequentally call `Get` methods.\n\nNote that Data Catalog search queries do not guarantee full recall. Query\nresults that match your query may not be returned, even in subsequent\nresult pages. Also note that results returned (and not returned) can vary\nacross repeated search queries.\n\nSee [Data Catalog Search\nSyntax](/data-catalog/docs/how-to/search-reference) for more information.",
          "request": {
            "$ref": "GoogleCloudDatacatalogV1beta1SearchCatalogRequest"
          }
        }
      }
    },
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "entryGroups": {
              "methods": {
                "setIamPolicy": {
                  "response": {
                    "$ref": "Policy"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "resource": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field."
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}:setIamPolicy",
                  "path": "v1beta1/{+resource}:setIamPolicy",
                  "id": "datacatalog.projects.locations.entryGroups.setIamPolicy",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "description": "Sets the access control policy for a resource. Replaces any existing\npolicy.\nSupported resources are:\n  - Tag templates.\n  - Entries.\n  - Entry groups.\nNote, this method cannot be used to manage policies for BigQuery, Cloud\nPub/Sub and any external Google Cloud Platform resources synced to Cloud\nData Catalog.\n\nCallers must have following Google IAM permission\n  - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag\n    templates.\n  - `datacatalog.entries.setIamPolicy` to set policies on entries.\n  - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups."
                },
                "create": {
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1beta1EntryGroup"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "parent": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "description": "Required. The name of the project this entry group is in. Example:\n\n* projects/{project_id}/locations/{location}\n\nNote that this EntryGroup and its child resources may not actually be\nstored in the location in this name."
                    },
                    "entryGroupId": {
                      "description": "Required. The id of the entry group to create.\nThe id must begin with a letter or underscore, contain only English\nletters, numbers and underscores, and be at most 64 characters.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups",
                  "path": "v1beta1/{+parent}/entryGroups",
                  "id": "datacatalog.projects.locations.entryGroups.create",
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1beta1EntryGroup"
                  },
                  "description": "A maximum of 10,000 entry groups may be created per organization across all\nlocations.\n\nUsers should enable the Data Catalog API in the project identified by\nthe `parent` parameter (see [Data Catalog Resource Project]\n(/data-catalog/docs/concepts/resource-project) for more information)."
                },
                "getIamPolicy": {
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "resource"
                  ],
                  "response": {
                    "$ref": "Policy"
                  },
                  "parameters": {
                    "resource": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}:getIamPolicy",
                  "id": "datacatalog.projects.locations.entryGroups.getIamPolicy",
                  "path": "v1beta1/{+resource}:getIamPolicy",
                  "description": "Gets the access control policy for a resource. A `NOT_FOUND` error\nis returned if the resource does not exist. An empty policy is returned\nif the resource exists but does not have a policy set on it.\n\nSupported resources are:\n  - Tag templates.\n  - Entries.\n  - Entry groups.\nNote, this method cannot be used to manage policies for BigQuery, Cloud\nPub/Sub and any external Google Cloud Platform resources synced to Cloud\nData Catalog.\n\nCallers must have following Google IAM permission\n  - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag\n    templates.\n  - `datacatalog.entries.getIamPolicy` to get policies on entries.\n  - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.",
                  "request": {
                    "$ref": "GetIamPolicyRequest"
                  }
                },
                "get": {
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1beta1EntryGroup"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "readMask": {
                      "description": "The fields to return. If not set or empty, all fields are returned.",
                      "format": "google-fieldmask",
                      "type": "string",
                      "location": "query"
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                      "location": "path",
                      "description": "Required. The name of the entry group. For example,\n`projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}`.",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}",
                  "path": "v1beta1/{+name}",
                  "id": "datacatalog.projects.locations.entryGroups.get",
                  "description": "Gets an EntryGroup."
                },
                "patch": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "updateMask": {
                      "type": "string",
                      "location": "query",
                      "description": "The fields to update on the entry group. If absent or empty, all modifiable\nfields are updated.",
                      "format": "google-fieldmask"
                    },
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                      "location": "path",
                      "description": "The resource name of the entry group in URL format. Example:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}\n\nNote that this EntryGroup and its child resources may not actually be\nstored in the location in this name.",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}",
                  "id": "datacatalog.projects.locations.entryGroups.patch",
                  "path": "v1beta1/{+name}",
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1beta1EntryGroup"
                  },
                  "description": "Updates an EntryGroup. The user should enable the Data Catalog API in the\nproject identified by the `entry_group.name` parameter (see [Data Catalog\nResource Project] (/data-catalog/docs/concepts/resource-project) for more\ninformation).",
                  "httpMethod": "PATCH",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1beta1EntryGroup"
                  }
                },
                "testIamPermissions": {
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "description": "Returns the caller's permissions on a resource.\nIf the resource does not exist, an empty set of permissions is returned\n(We don't return a `NOT_FOUND` error).\n\nSupported resources are:\n  - Tag templates.\n  - Entries.\n  - Entry groups.\nNote, this method cannot be used to manage policies for BigQuery, Cloud\nPub/Sub and any external Google Cloud Platform resources synced to Cloud\nData Catalog.\n\nA caller is not required to have Google IAM permission to make this\nrequest.",
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "resource"
                  ],
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                      "location": "path"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}:testIamPermissions",
                  "id": "datacatalog.projects.locations.entryGroups.testIamPermissions",
                  "path": "v1beta1/{+resource}:testIamPermissions"
                },
                "delete": {
                  "httpMethod": "DELETE",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameters": {
                    "name": {
                      "location": "path",
                      "description": "Required. The name of the entry group. For example,\n`projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}`.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$"
                    },
                    "force": {
                      "location": "query",
                      "description": "Optional. If true, deletes all entries in the entry group.",
                      "type": "boolean"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}",
                  "id": "datacatalog.projects.locations.entryGroups.delete",
                  "path": "v1beta1/{+name}",
                  "description": "Deletes an EntryGroup. Only entry groups that do not contain entries can be\ndeleted. Users should enable the Data Catalog API in the project\nidentified by the `name` parameter (see [Data Catalog Resource Project]\n(/data-catalog/docs/concepts/resource-project) for more information)."
                },
                "list": {
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1beta1ListEntryGroupsResponse"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "parent": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "description": "Required. The name of the location that contains the entry groups, which can be\nprovided in URL format. Example:\n\n* projects/{project_id}/locations/{location}"
                    },
                    "pageToken": {
                      "type": "string",
                      "location": "query",
                      "description": "Optional. Token that specifies which page is requested. If empty, the first page is\nreturned."
                    },
                    "pageSize": {
                      "location": "query",
                      "description": "Optional. The maximum number of items to return. Default is 10. Max limit is 1000.\nThrows an invalid argument for `page_size \u003e 1000`.",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups",
                  "path": "v1beta1/{+parent}/entryGroups",
                  "id": "datacatalog.projects.locations.entryGroups.list",
                  "description": "Lists entry groups."
                }
              },
              "resources": {
                "entries": {
                  "methods": {
                    "delete": {
                      "description": "Deletes an existing entry. Only entries created through\nCreateEntry\nmethod can be deleted.\nUsers should enable the Data Catalog API in the project identified by\nthe `name` parameter (see [Data Catalog Resource Project]\n(/data-catalog/docs/concepts/resource-project) for more information).",
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "DELETE",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "name": {
                          "location": "path",
                          "description": "Required. The name of the entry. Example:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$"
                        }
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}",
                      "path": "v1beta1/{+name}",
                      "id": "datacatalog.projects.locations.entryGroups.entries.delete"
                    },
                    "list": {
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1ListEntriesResponse"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "description": "Required. The name of the entry group that contains the entries, which can\nbe provided in URL format. Example:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$"
                        },
                        "readMask": {
                          "description": "The fields to return for each Entry. If not set or empty, all\nfields are returned.\nFor example, setting read_mask to contain only one path \"name\" will cause\nListEntries to return a list of Entries with only \"name\" field.",
                          "format": "google-fieldmask",
                          "type": "string",
                          "location": "query"
                        },
                        "pageToken": {
                          "location": "query",
                          "description": "Token that specifies which page is requested. If empty, the first page is\nreturned.",
                          "type": "string"
                        },
                        "pageSize": {
                          "location": "query",
                          "description": "The maximum number of items to return. Default is 10. Max limit is 1000.\nThrows an invalid argument for `page_size \u003e 1000`.",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries",
                      "path": "v1beta1/{+parent}/entries",
                      "id": "datacatalog.projects.locations.entryGroups.entries.list",
                      "description": "Lists entries."
                    },
                    "create": {
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1Entry"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "description": "Required. The name of the entry group this entry is in. Example:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}\n\nNote that this Entry and its child resources may not actually be stored in\nthe location in this name.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                          "location": "path"
                        },
                        "entryId": {
                          "type": "string",
                          "location": "query",
                          "description": "Required. The id of the entry to create."
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries",
                      "path": "v1beta1/{+parent}/entries",
                      "id": "datacatalog.projects.locations.entryGroups.entries.create",
                      "description": "Creates an entry. Only entries of 'FILESET' type or user-specified type can\nbe created.\n\nUsers should enable the Data Catalog API in the project identified by\nthe `parent` parameter (see [Data Catalog Resource Project]\n(/data-catalog/docs/concepts/resource-project) for more information).\n\nA maximum of 100,000 entries may be created per entry group.",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1beta1Entry"
                      }
                    },
                    "getIamPolicy": {
                      "description": "Gets the access control policy for a resource. A `NOT_FOUND` error\nis returned if the resource does not exist. An empty policy is returned\nif the resource exists but does not have a policy set on it.\n\nSupported resources are:\n  - Tag templates.\n  - Entries.\n  - Entry groups.\nNote, this method cannot be used to manage policies for BigQuery, Cloud\nPub/Sub and any external Google Cloud Platform resources synced to Cloud\nData Catalog.\n\nCallers must have following Google IAM permission\n  - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag\n    templates.\n  - `datacatalog.entries.getIamPolicy` to get policies on entries.\n  - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.",
                      "request": {
                        "$ref": "GetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "location": "path",
                          "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:getIamPolicy",
                      "path": "v1beta1/{+resource}:getIamPolicy",
                      "id": "datacatalog.projects.locations.entryGroups.entries.getIamPolicy"
                    },
                    "patch": {
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1beta1Entry"
                      },
                      "description": "Updates an existing entry.\nUsers should enable the Data Catalog API in the project identified by\nthe `entry.name` parameter (see [Data Catalog Resource Project]\n(/data-catalog/docs/concepts/resource-project) for more information).",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1Entry"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "PATCH",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "updateMask": {
                          "location": "query",
                          "description": "The fields to update on the entry. If absent or empty, all modifiable\nfields are updated.\n\nThe following fields are modifiable:\n* For entries with type `DATA_STREAM`:\n   * `schema`\n* For entries with type `FILESET`\n   * `schema`\n   * `display_name`\n   * `description`\n   * `gcs_fileset_spec`\n   * `gcs_fileset_spec.file_patterns`\n* For entries with `user_specified_type`\n   * `schema`\n   * `display_name`\n   * `description`\n   * user_specified_type\n   * user_specified_system\n   * linked_resource\n   * source_system_timestamps",
                          "format": "google-fieldmask",
                          "type": "string"
                        },
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                          "location": "path",
                          "description": "The Data Catalog resource name of the entry in URL format. Example:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}\n\nNote that this Entry and its child resources may not actually be stored in\nthe location in this name.",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}",
                      "path": "v1beta1/{+name}",
                      "id": "datacatalog.projects.locations.entryGroups.entries.patch"
                    },
                    "get": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}",
                      "path": "v1beta1/{+name}",
                      "id": "datacatalog.projects.locations.entryGroups.entries.get",
                      "description": "Gets an entry.",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1Entry"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "GET",
                      "parameters": {
                        "name": {
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                          "location": "path",
                          "description": "Required. The name of the entry. Example:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "testIamPermissions": {
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                          "location": "path"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:testIamPermissions",
                      "id": "datacatalog.projects.locations.entryGroups.entries.testIamPermissions",
                      "path": "v1beta1/{+resource}:testIamPermissions",
                      "description": "Returns the caller's permissions on a resource.\nIf the resource does not exist, an empty set of permissions is returned\n(We don't return a `NOT_FOUND` error).\n\nSupported resources are:\n  - Tag templates.\n  - Entries.\n  - Entry groups.\nNote, this method cannot be used to manage policies for BigQuery, Cloud\nPub/Sub and any external Google Cloud Platform resources synced to Cloud\nData Catalog.\n\nA caller is not required to have Google IAM permission to make this\nrequest.",
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      }
                    }
                  },
                  "resources": {
                    "tags": {
                      "methods": {
                        "delete": {
                          "parameters": {
                            "name": {
                              "required": true,
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+/tags/[^/]+$",
                              "location": "path",
                              "description": "Required. The name of the tag to delete. Example:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id}"
                            }
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags/{tagsId}",
                          "id": "datacatalog.projects.locations.entryGroups.entries.tags.delete",
                          "path": "v1beta1/{+name}",
                          "description": "Deletes a tag.",
                          "httpMethod": "DELETE",
                          "parameterOrder": [
                            "name"
                          ],
                          "response": {
                            "$ref": "Empty"
                          }
                        },
                        "patch": {
                          "path": "v1beta1/{+name}",
                          "id": "datacatalog.projects.locations.entryGroups.entries.tags.patch",
                          "request": {
                            "$ref": "GoogleCloudDatacatalogV1beta1Tag"
                          },
                          "description": "Updates an existing tag.",
                          "response": {
                            "$ref": "GoogleCloudDatacatalogV1beta1Tag"
                          },
                          "parameterOrder": [
                            "name"
                          ],
                          "httpMethod": "PATCH",
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameters": {
                            "updateMask": {
                              "location": "query",
                              "description": "The fields to update on the Tag. If absent or empty, all modifiable fields\nare updated. Currently the only modifiable field is the field `fields`.",
                              "format": "google-fieldmask",
                              "type": "string"
                            },
                            "name": {
                              "required": true,
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+/tags/[^/]+$",
                              "location": "path",
                              "description": "The resource name of the tag in URL format. Example:\n\n* projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id}\n\nwhere `tag_id` is a system-generated identifier.\nNote that this Tag may not actually be stored in the location in this name."
                            }
                          },
                          "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags/{tagsId}"
                        },
                        "list": {
                          "description": "Lists the tags on an Entry.",
                          "httpMethod": "GET",
                          "response": {
                            "$ref": "GoogleCloudDatacatalogV1beta1ListTagsResponse"
                          },
                          "parameterOrder": [
                            "parent"
                          ],
                          "parameters": {
                            "parent": {
                              "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$",
                              "location": "path",
                              "description": "Required. The name of the Data Catalog resource to list the tags of. The resource\ncould be an Entry or an\nEntryGroup.\n\nExamples:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}",
                              "required": true,
                              "type": "string"
                            },
                            "pageToken": {
                              "type": "string",
                              "location": "query",
                              "description": "Token that specifies which page is requested. If empty, the first page is\nreturned."
                            },
                            "pageSize": {
                              "type": "integer",
                              "location": "query",
                              "description": "The maximum number of tags to return. Default is 10. Max limit is 1000.",
                              "format": "int32"
                            }
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags",
                          "id": "datacatalog.projects.locations.entryGroups.entries.tags.list",
                          "path": "v1beta1/{+parent}/tags"
                        },
                        "create": {
                          "request": {
                            "$ref": "GoogleCloudDatacatalogV1beta1Tag"
                          },
                          "description": "Creates a tag on an Entry.\nNote: The project identified by the `parent` parameter for the\n[tag](/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters)\nand the\n[tag\ntemplate](/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters)\nused to create the tag must be from the same organization.",
                          "httpMethod": "POST",
                          "parameterOrder": [
                            "parent"
                          ],
                          "response": {
                            "$ref": "GoogleCloudDatacatalogV1beta1Tag"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ],
                          "parameters": {
                            "parent": {
                              "location": "path",
                              "description": "Required. The name of the resource to attach this tag to. Tags can be attached to\nEntries. Example:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}\n\nNote that this Tag and its child resources may not actually be stored in\nthe location in this name.",
                              "required": true,
                              "type": "string",
                              "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/entries/[^/]+$"
                            }
                          },
                          "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags",
                          "id": "datacatalog.projects.locations.entryGroups.entries.tags.create",
                          "path": "v1beta1/{+parent}/tags"
                        }
                      }
                    }
                  }
                },
                "tags": {
                  "methods": {
                    "patch": {
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1Tag"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "PATCH",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/tags/[^/]+$",
                          "location": "path",
                          "description": "The resource name of the tag in URL format. Example:\n\n* projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id}\n\nwhere `tag_id` is a system-generated identifier.\nNote that this Tag may not actually be stored in the location in this name.",
                          "required": true,
                          "type": "string"
                        },
                        "updateMask": {
                          "type": "string",
                          "location": "query",
                          "description": "The fields to update on the Tag. If absent or empty, all modifiable fields\nare updated. Currently the only modifiable field is the field `fields`.",
                          "format": "google-fieldmask"
                        }
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags/{tagsId}",
                      "path": "v1beta1/{+name}",
                      "id": "datacatalog.projects.locations.entryGroups.tags.patch",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1beta1Tag"
                      },
                      "description": "Updates an existing tag."
                    },
                    "list": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags",
                      "path": "v1beta1/{+parent}/tags",
                      "id": "datacatalog.projects.locations.entryGroups.tags.list",
                      "description": "Lists the tags on an Entry.",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1ListTagsResponse"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "GET",
                      "parameters": {
                        "parent": {
                          "description": "Required. The name of the Data Catalog resource to list the tags of. The resource\ncould be an Entry or an\nEntryGroup.\n\nExamples:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                          "location": "path"
                        },
                        "pageToken": {
                          "location": "query",
                          "description": "Token that specifies which page is requested. If empty, the first page is\nreturned.",
                          "type": "string"
                        },
                        "pageSize": {
                          "type": "integer",
                          "location": "query",
                          "description": "The maximum number of tags to return. Default is 10. Max limit is 1000.",
                          "format": "int32"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "create": {
                      "description": "Creates a tag on an Entry.\nNote: The project identified by the `parent` parameter for the\n[tag](/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters)\nand the\n[tag\ntemplate](/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters)\nused to create the tag must be from the same organization.",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1beta1Tag"
                      },
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "parent"
                      ],
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1Tag"
                      },
                      "parameters": {
                        "parent": {
                          "description": "Required. The name of the resource to attach this tag to. Tags can be attached to\nEntries. Example:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}\n\nNote that this Tag and its child resources may not actually be stored in\nthe location in this name.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+$",
                          "location": "path"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags",
                      "id": "datacatalog.projects.locations.entryGroups.tags.create",
                      "path": "v1beta1/{+parent}/tags"
                    },
                    "delete": {
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "DELETE",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "description": "Required. The name of the tag to delete. Example:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id}",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/entryGroups/[^/]+/tags/[^/]+$"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags/{tagsId}",
                      "path": "v1beta1/{+name}",
                      "id": "datacatalog.projects.locations.entryGroups.tags.delete",
                      "description": "Deletes a tag."
                    }
                  }
                }
              }
            },
            "tagTemplates": {
              "methods": {
                "patch": {
                  "path": "v1beta1/{+name}",
                  "id": "datacatalog.projects.locations.tagTemplates.patch",
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1beta1TagTemplate"
                  },
                  "description": "Updates a tag template. This method cannot be used to update the fields of\na template. The tag template fields are represented as separate resources\nand should be updated using their own create/update/delete methods.\nUsers should enable the Data Catalog API in the project identified by\nthe `tag_template.name` parameter (see [Data Catalog Resource Project]\n(/data-catalog/docs/concepts/resource-project) for more information).",
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1beta1TagTemplate"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "PATCH",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$",
                      "location": "path",
                      "description": "The resource name of the tag template in URL format. Example:\n\n* projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}\n\nNote that this TagTemplate and its child resources may not actually be\nstored in the location in this name.",
                      "required": true,
                      "type": "string"
                    },
                    "updateMask": {
                      "type": "string",
                      "location": "query",
                      "description": "The field mask specifies the parts of the template to overwrite.\n\nAllowed fields:\n\n  * `display_name`\n\nIf absent or empty, all of the allowed fields above will be updated.",
                      "format": "google-fieldmask"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}"
                },
                "get": {
                  "path": "v1beta1/{+name}",
                  "id": "datacatalog.projects.locations.tagTemplates.get",
                  "description": "Gets a tag template.",
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1beta1TagTemplate"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$",
                      "location": "path",
                      "description": "Required. The name of the tag template. Example:\n\n* projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}"
                },
                "testIamPermissions": {
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "resource"
                  ],
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "parameters": {
                    "resource": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$",
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}:testIamPermissions",
                  "id": "datacatalog.projects.locations.tagTemplates.testIamPermissions",
                  "path": "v1beta1/{+resource}:testIamPermissions",
                  "description": "Returns the caller's permissions on a resource.\nIf the resource does not exist, an empty set of permissions is returned\n(We don't return a `NOT_FOUND` error).\n\nSupported resources are:\n  - Tag templates.\n  - Entries.\n  - Entry groups.\nNote, this method cannot be used to manage policies for BigQuery, Cloud\nPub/Sub and any external Google Cloud Platform resources synced to Cloud\nData Catalog.\n\nA caller is not required to have Google IAM permission to make this\nrequest.",
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  }
                },
                "delete": {
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$",
                      "location": "path",
                      "description": "Required. The name of the tag template to delete. Example:\n\n* projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}",
                      "required": true,
                      "type": "string"
                    },
                    "force": {
                      "type": "boolean",
                      "location": "query",
                      "description": "Required. Currently, this field must always be set to `true`.\nThis confirms the deletion of any possible tags using this template.\n`force = false` will be supported in the future."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}",
                  "path": "v1beta1/{+name}",
                  "id": "datacatalog.projects.locations.tagTemplates.delete",
                  "description": "Deletes a tag template and all tags using the template.\nUsers should enable the Data Catalog API in the project identified by\nthe `name` parameter (see [Data Catalog Resource Project]\n(/data-catalog/docs/concepts/resource-project) for more information)."
                },
                "create": {
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1beta1TagTemplate"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "description": "Required. The name of the project and the template location\n[region](/compute/docs/regions-zones/#available).\nNOTE: Currently, only the `us-central1 region` is supported.\n\nExample:\n\n* projects/{project_id}/locations/us-central1",
                      "required": true,
                      "type": "string"
                    },
                    "tagTemplateId": {
                      "description": "Required. The id of the tag template to create.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates",
                  "path": "v1beta1/{+parent}/tagTemplates",
                  "id": "datacatalog.projects.locations.tagTemplates.create",
                  "description": "Creates a tag template. The user should enable the Data Catalog API in\nthe project identified by the `parent` parameter (see [Data Catalog\nResource Project](/data-catalog/docs/concepts/resource-project) for more\ninformation).",
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1beta1TagTemplate"
                  }
                },
                "setIamPolicy": {
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}:setIamPolicy",
                  "path": "v1beta1/{+resource}:setIamPolicy",
                  "id": "datacatalog.projects.locations.tagTemplates.setIamPolicy",
                  "description": "Sets the access control policy for a resource. Replaces any existing\npolicy.\nSupported resources are:\n  - Tag templates.\n  - Entries.\n  - Entry groups.\nNote, this method cannot be used to manage policies for BigQuery, Cloud\nPub/Sub and any external Google Cloud Platform resources synced to Cloud\nData Catalog.\n\nCallers must have following Google IAM permission\n  - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag\n    templates.\n  - `datacatalog.entries.setIamPolicy` to set policies on entries.\n  - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "getIamPolicy": {
                  "response": {
                    "$ref": "Policy"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$",
                      "location": "path"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}:getIamPolicy",
                  "path": "v1beta1/{+resource}:getIamPolicy",
                  "id": "datacatalog.projects.locations.tagTemplates.getIamPolicy",
                  "description": "Gets the access control policy for a resource. A `NOT_FOUND` error\nis returned if the resource does not exist. An empty policy is returned\nif the resource exists but does not have a policy set on it.\n\nSupported resources are:\n  - Tag templates.\n  - Entries.\n  - Entry groups.\nNote, this method cannot be used to manage policies for BigQuery, Cloud\nPub/Sub and any external Google Cloud Platform resources synced to Cloud\nData Catalog.\n\nCallers must have following Google IAM permission\n  - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag\n    templates.\n  - `datacatalog.entries.getIamPolicy` to get policies on entries.\n  - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.",
                  "request": {
                    "$ref": "GetIamPolicyRequest"
                  }
                }
              },
              "resources": {
                "fields": {
                  "methods": {
                    "delete": {
                      "description": "Deletes a field in a tag template and all uses of that field.\nUsers should enable the Data Catalog API in the project identified by\nthe `name` parameter (see [Data Catalog Resource Project]\n(/data-catalog/docs/concepts/resource-project) for more information).",
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "DELETE",
                      "parameters": {
                        "name": {
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+/fields/[^/]+$",
                          "location": "path",
                          "description": "Required. The name of the tag template field to delete. Example:\n\n* projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}/fields/{tag_template_field_id}"
                        },
                        "force": {
                          "type": "boolean",
                          "location": "query",
                          "description": "Required. Currently, this field must always be set to `true`.\nThis confirms the deletion of this field from any tags using this field.\n`force = false` will be supported in the future."
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}",
                      "path": "v1beta1/{+name}",
                      "id": "datacatalog.projects.locations.tagTemplates.fields.delete"
                    },
                    "patch": {
                      "httpMethod": "PATCH",
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1TagTemplateField"
                      },
                      "parameters": {
                        "name": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+/fields/[^/]+$",
                          "location": "path",
                          "description": "Required. The name of the tag template field. Example:\n\n* projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}/fields/{tag_template_field_id}",
                          "required": true,
                          "type": "string"
                        },
                        "updateMask": {
                          "location": "query",
                          "description": "Optional. The field mask specifies the parts of the template to be updated.\nAllowed fields:\n\n  * `display_name`\n  * `type.enum_type`\n  * `is_required`\n\nIf `update_mask` is not set or empty, all of the allowed fields above will\nbe updated.\n\nWhen updating an enum type, the provided values will be merged with the\nexisting values. Therefore, enum values can only be added, existing enum\nvalues cannot be deleted nor renamed. Updating a template field from\noptional to required is NOT allowed.",
                          "format": "google-fieldmask",
                          "type": "string"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}",
                      "id": "datacatalog.projects.locations.tagTemplates.fields.patch",
                      "path": "v1beta1/{+name}",
                      "description": "Updates a field in a tag template. This method cannot be used to update the\nfield type. Users should enable the Data Catalog API in the project\nidentified by the `name` parameter (see [Data Catalog Resource Project]\n(/data-catalog/docs/concepts/resource-project) for more information).",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1beta1TagTemplateField"
                      }
                    },
                    "rename": {
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1TagTemplateField"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "name": {
                          "location": "path",
                          "description": "Required. The name of the tag template. Example:\n\n* projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}/fields/{tag_template_field_id}",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+/fields/[^/]+$"
                        }
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}:rename",
                      "path": "v1beta1/{+name}:rename",
                      "id": "datacatalog.projects.locations.tagTemplates.fields.rename",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1beta1RenameTagTemplateFieldRequest"
                      },
                      "description": "Renames a field in a tag template. The user should enable the Data Catalog\nAPI in the project identified by the `name` parameter (see [Data Catalog\nResource Project](/data-catalog/docs/concepts/resource-project) for more\ninformation)."
                    },
                    "create": {
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1TagTemplateField"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "POST",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "tagTemplateFieldId": {
                          "description": "Required. The ID of the tag template field to create.\nField ids can contain letters (both uppercase and lowercase), numbers\n(0-9), underscores (_) and dashes (-). Field IDs must be at least 1\ncharacter long and at most 128 characters long. Field IDs must also be\nunique within their template.",
                          "type": "string",
                          "location": "query"
                        },
                        "parent": {
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/tagTemplates/[^/]+$",
                          "location": "path",
                          "description": "Required. The name of the project and the template location\n[region](/compute/docs/regions-zones/#available).\nNOTE: Currently, only the `us-central1 region` is supported.\n\nExample:\n\n* projects/{project_id}/locations/us-central1/tagTemplates/{tag_template_id}"
                        }
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields",
                      "path": "v1beta1/{+parent}/fields",
                      "id": "datacatalog.projects.locations.tagTemplates.fields.create",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1beta1TagTemplateField"
                      },
                      "description": "Creates a field in a tag template. The user should enable the Data Catalog\nAPI in the project identified by the `parent` parameter (see\n[Data Catalog Resource\nProject](/data-catalog/docs/concepts/resource-project) for more\ninformation)."
                    }
                  }
                }
              }
            },
            "taxonomies": {
              "methods": {
                "setIamPolicy": {
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "description": "Sets the IAM policy for a taxonomy or a policy tag.",
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "resource"
                  ],
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "resource": {
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:setIamPolicy",
                  "id": "datacatalog.projects.locations.taxonomies.setIamPolicy",
                  "path": "v1beta1/{+resource}:setIamPolicy"
                },
                "create": {
                  "id": "datacatalog.projects.locations.taxonomies.create",
                  "path": "v1beta1/{+parent}/taxonomies",
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1beta1Taxonomy"
                  },
                  "description": "Creates a taxonomy in the specified project.",
                  "httpMethod": "POST",
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1beta1Taxonomy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "description": "Required. Resource name of the project that the taxonomy will belong to.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  },
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies"
                },
                "export": {
                  "description": "Exports all taxonomies and their policy tags in a project.\n\nThis method generates SerializedTaxonomy protos with nested policy tags\nthat can be used as an input for future ImportTaxonomies calls.",
                  "httpMethod": "GET",
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1beta1ExportTaxonomiesResponse"
                  },
                  "parameters": {
                    "taxonomies": {
                      "description": "Required. Resource names of the taxonomies to be exported.",
                      "type": "string",
                      "repeated": true,
                      "location": "query"
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "description": "Required. Resource name of the project that taxonomies to be exported\nwill share.",
                      "required": true,
                      "type": "string"
                    },
                    "serializedTaxonomies": {
                      "type": "boolean",
                      "location": "query",
                      "description": "Export taxonomies as serialized taxonomies."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies:export",
                  "id": "datacatalog.projects.locations.taxonomies.export",
                  "path": "v1beta1/{+parent}/taxonomies:export"
                },
                "getIamPolicy": {
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:getIamPolicy",
                  "path": "v1beta1/{+resource}:getIamPolicy",
                  "id": "datacatalog.projects.locations.taxonomies.getIamPolicy",
                  "request": {
                    "$ref": "GetIamPolicyRequest"
                  },
                  "description": "Gets the IAM policy for a taxonomy or a policy tag.",
                  "response": {
                    "$ref": "Policy"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "resource": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$",
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field."
                    }
                  }
                },
                "get": {
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$",
                      "location": "path",
                      "description": "Required. Resource name of the requested taxonomy.",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}",
                  "path": "v1beta1/{+name}",
                  "id": "datacatalog.projects.locations.taxonomies.get",
                  "description": "Gets a taxonomy.",
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1beta1Taxonomy"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "GET"
                },
                "patch": {
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}",
                  "id": "datacatalog.projects.locations.taxonomies.patch",
                  "path": "v1beta1/{+name}",
                  "description": "Updates a taxonomy.",
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1beta1Taxonomy"
                  },
                  "httpMethod": "PATCH",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1beta1Taxonomy"
                  },
                  "parameters": {
                    "name": {
                      "location": "path",
                      "description": "Output only. Resource name of this taxonomy, whose format is:\n\"projects/{project_number}/locations/{location_id}/taxonomies/{id}\".",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$"
                    },
                    "updateMask": {
                      "location": "query",
                      "description": "The update mask applies to the resource. For the `FieldMask` definition,\nsee\nhttps://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask\nIf not set, defaults to all of the fields that are allowed to update.",
                      "format": "google-fieldmask",
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "testIamPermissions": {
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$",
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field."
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:testIamPermissions",
                  "path": "v1beta1/{+resource}:testIamPermissions",
                  "id": "datacatalog.projects.locations.taxonomies.testIamPermissions",
                  "description": "Returns the permissions that a caller has on the specified taxonomy or\npolicy tag.",
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  }
                },
                "delete": {
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "description": "Required. Resource name of the taxonomy to be deleted. All policy tags in\nthis taxonomy will also be deleted.",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$",
                      "location": "path"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}",
                  "path": "v1beta1/{+name}",
                  "id": "datacatalog.projects.locations.taxonomies.delete",
                  "description": "Deletes a taxonomy. This operation will also delete all\npolicy tags in this taxonomy along with their associated policies."
                },
                "import": {
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1beta1ImportTaxonomiesResponse"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "description": "Required. Resource name of project that the newly created taxonomies will\nbelong to.",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies:import",
                  "path": "v1beta1/{+parent}/taxonomies:import",
                  "id": "datacatalog.projects.locations.taxonomies.import",
                  "description": "Imports all taxonomies and their policy tags to a project as new\ntaxonomies.\n\nThis method provides a bulk taxonomy / policy tag creation using nested\nproto structure.",
                  "request": {
                    "$ref": "GoogleCloudDatacatalogV1beta1ImportTaxonomiesRequest"
                  }
                },
                "list": {
                  "response": {
                    "$ref": "GoogleCloudDatacatalogV1beta1ListTaxonomiesResponse"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "description": "Required. Resource name of the project to list the taxonomies of."
                    },
                    "pageToken": {
                      "location": "query",
                      "description": "The next_page_token value returned from a previous list request, if any. If\nnot set, defaults to an empty string.",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "The maximum number of items to return. Must be a value between 1 and 1000.\nIf not set, defaults to 50.",
                      "format": "int32",
                      "type": "integer",
                      "location": "query"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies",
                  "path": "v1beta1/{+parent}/taxonomies",
                  "id": "datacatalog.projects.locations.taxonomies.list",
                  "description": "Lists all taxonomies in a project in a particular location that the caller\nhas permission to view."
                }
              },
              "resources": {
                "policyTags": {
                  "methods": {
                    "delete": {
                      "path": "v1beta1/{+name}",
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.delete",
                      "description": "Deletes a policy tag. Also deletes all of its descendant policy tags.",
                      "response": {
                        "$ref": "Empty"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "DELETE",
                      "parameters": {
                        "name": {
                          "location": "path",
                          "description": "Required. Resource name of the policy tag to be deleted. All of its descendant\npolicy tags will also be deleted.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+/policyTags/[^/]+$"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}"
                    },
                    "list": {
                      "description": "Lists all policy tags in a taxonomy.",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1ListPolicyTagsResponse"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "GET",
                      "parameters": {
                        "pageToken": {
                          "location": "query",
                          "description": "The next_page_token value returned from a previous List request, if any. If\nnot set, defaults to an empty string.",
                          "type": "string"
                        },
                        "pageSize": {
                          "location": "query",
                          "description": "The maximum number of items to return. Must be a value between 1 and 1000.\nIf not set, defaults to 50.",
                          "format": "int32",
                          "type": "integer"
                        },
                        "parent": {
                          "location": "path",
                          "description": "Required. Resource name of the taxonomy to list the policy tags of.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags",
                      "path": "v1beta1/{+parent}/policyTags",
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.list"
                    },
                    "create": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags",
                      "path": "v1beta1/{+parent}/policyTags",
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.create",
                      "description": "Creates a policy tag in the specified taxonomy.",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1beta1PolicyTag"
                      },
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1PolicyTag"
                      },
                      "parameterOrder": [
                        "parent"
                      ],
                      "httpMethod": "POST",
                      "parameters": {
                        "parent": {
                          "location": "path",
                          "description": "Required. Resource name of the taxonomy that the policy tag will belong to.",
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+$"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "setIamPolicy": {
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}:setIamPolicy",
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.setIamPolicy",
                      "path": "v1beta1/{+resource}:setIamPolicy",
                      "description": "Sets the IAM policy for a taxonomy or a policy tag.",
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "parameters": {
                        "resource": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+/policyTags/[^/]+$",
                          "location": "path",
                          "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "getIamPolicy": {
                      "request": {
                        "$ref": "GetIamPolicyRequest"
                      },
                      "description": "Gets the IAM policy for a taxonomy or a policy tag.",
                      "httpMethod": "POST",
                      "parameterOrder": [
                        "resource"
                      ],
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "resource": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+/policyTags/[^/]+$",
                          "location": "path",
                          "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}:getIamPolicy",
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.getIamPolicy",
                      "path": "v1beta1/{+resource}:getIamPolicy"
                    },
                    "patch": {
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.patch",
                      "path": "v1beta1/{+name}",
                      "description": "Updates a policy tag.",
                      "request": {
                        "$ref": "GoogleCloudDatacatalogV1beta1PolicyTag"
                      },
                      "httpMethod": "PATCH",
                      "parameterOrder": [
                        "name"
                      ],
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1PolicyTag"
                      },
                      "parameters": {
                        "name": {
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+/policyTags/[^/]+$",
                          "location": "path",
                          "description": "Output only. Resource name of this policy tag, whose format is:\n\"projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{id}\"."
                        },
                        "updateMask": {
                          "description": "The update mask applies to the resource. Only display_name, description and\nparent_policy_tag can be updated and thus can be listed in the mask. If\nupdate_mask is not provided, all allowed fields (i.e. display_name,\ndescription and parent) will be updated. For more information including the\n`FieldMask` definition, see\nhttps://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask\nIf not set, defaults to all of the fields that are allowed to update.",
                          "format": "google-fieldmask",
                          "type": "string",
                          "location": "query"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}"
                    },
                    "get": {
                      "description": "Gets a policy tag.",
                      "response": {
                        "$ref": "GoogleCloudDatacatalogV1beta1PolicyTag"
                      },
                      "parameterOrder": [
                        "name"
                      ],
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "parameters": {
                        "name": {
                          "required": true,
                          "type": "string",
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+/policyTags/[^/]+$",
                          "location": "path",
                          "description": "Required. Resource name of the requested policy tag."
                        }
                      },
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}",
                      "path": "v1beta1/{+name}",
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.get"
                    },
                    "testIamPermissions": {
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "parameterOrder": [
                        "resource"
                      ],
                      "httpMethod": "POST",
                      "parameters": {
                        "resource": {
                          "pattern": "^projects/[^/]+/locations/[^/]+/taxonomies/[^/]+/policyTags/[^/]+$",
                          "location": "path",
                          "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ],
                      "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}:testIamPermissions",
                      "path": "v1beta1/{+resource}:testIamPermissions",
                      "id": "datacatalog.projects.locations.taxonomies.policyTags.testIamPermissions",
                      "description": "Returns the permissions that a caller has on the specified taxonomy or\npolicy tag.",
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "parameters": {
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "location": "query",
      "description": "Returns response with indentations and line breaks."
    },
    "fields": {
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response.",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "$.xgafv": {
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format."
    },
    "alt": {
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    }
  },
  "version": "v1beta1",
  "baseUrl": "https://datacatalog.googleapis.com/",
  "kind": "discovery#restDescription",
  "description": "A fully managed and highly scalable data discovery and metadata management service.\n",
  "servicePath": "",
  "basePath": "",
  "id": "datacatalog:v1beta1",
  "documentationLink": "https://cloud.google.com/data-catalog/docs/",
  "revision": "20200316",
  "discoveryVersion": "v1",
  "version_module": true,
  "schemas": {
    "GoogleCloudDatacatalogV1beta1TagTemplateField": {
      "description": "The template for an individual field within a tag template.",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "GoogleCloudDatacatalogV1beta1FieldType",
          "description": "Required. The type of value this tag field can contain."
        },
        "order": {
          "type": "integer",
          "description": "The order of this field with respect to other fields in this tag\ntemplate.  A higher value indicates a more important field. The value can\nbe negative. Multiple fields can have the same order, and field orders\nwithin a tag do not have to be sequential.",
          "format": "int32"
        },
        "isRequired": {
          "type": "boolean",
          "description": "Whether this is a required field. Defaults to false."
        },
        "name": {
          "description": "Output only. The resource name of the tag template field in URL format. Example:\n\n* projects/{project_id}/locations/{location}/tagTemplates/{tag_template}/fields/{field}\n\nNote that this TagTemplateField may not actually be stored in the location\nin this name.",
          "type": "string"
        },
        "displayName": {
          "description": "The display name for this field. Defaults to an empty string.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1TagTemplateField"
    },
    "GoogleCloudDatacatalogV1beta1ListEntryGroupsResponse": {
      "description": "Response message for\nListEntryGroups.",
      "type": "object",
      "properties": {
        "entryGroups": {
          "description": "EntryGroup details.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1EntryGroup"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results. It is set to empty if no items\nremain in results."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1ListEntryGroupsResponse"
    },
    "GoogleCloudDatacatalogV1beta1RenameTagTemplateFieldRequest": {
      "type": "object",
      "properties": {
        "newTagTemplateFieldId": {
          "description": "Required. The new ID of this tag template field. For example, `my_new_field`.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1RenameTagTemplateFieldRequest",
      "description": "Request message for\nRenameTagTemplateField."
    },
    "GoogleCloudDatacatalogV1beta1ListEntriesResponse": {
      "description": "Response message for\nListEntries.",
      "type": "object",
      "properties": {
        "entries": {
          "description": "Entry details.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1Entry"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results. It is set to empty if no items\nremain in results."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1ListEntriesResponse"
    },
    "Binding": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "Expr",
          "description": "The condition that is associated with this binding.\nNOTE: An unsatisfied condition will not allow user access via current\nbinding. Different bindings, including their conditions, are examined\nindependently."
        },
        "members": {
          "description": "Specifies the identities requesting access for a Cloud Platform resource.\n`members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is\n   on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone\n   who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google\n   account. For example, `alice@example.com` .\n\n\n* `serviceAccount:{emailid}`: An email address that represents a service\n   account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group.\n   For example, `admins@example.com`.\n\n* `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique\n   identifier) representing a user that has been recently deleted. For\n   example, `alice@example.com?uid=123456789012345678901`. If the user is\n   recovered, this value reverts to `user:{emailid}` and the recovered user\n   retains the role in the binding.\n\n* `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus\n   unique identifier) representing a service account that has been recently\n   deleted. For example,\n   `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.\n   If the service account is undeleted, this value reverts to\n   `serviceAccount:{emailid}` and the undeleted service account retains the\n   role in the binding.\n\n* `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique\n   identifier) representing a Google group that has been recently\n   deleted. For example, `admins@example.com?uid=123456789012345678901`. If\n   the group is recovered, this value reverts to `group:{emailid}` and the\n   recovered group retains the role in the binding.\n\n\n* `domain:{domain}`: The G Suite domain (primary) that represents all the\n   users of that domain. For example, `google.com` or `example.com`.\n\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "role": {
          "description": "Role that is assigned to `members`.\nFor example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        }
      },
      "id": "Binding",
      "description": "Associates `members` with a `role`."
    },
    "GoogleCloudDatacatalogV1beta1ExportTaxonomiesResponse": {
      "description": "Response message for\nExportTaxonomies.",
      "type": "object",
      "properties": {
        "taxonomies": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1SerializedTaxonomy"
          },
          "description": "List of taxonomies and policy tags in a tree structure."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1ExportTaxonomiesResponse"
    },
    "Expr": {
      "description": "Represents a textual expression in the Common Expression Language (CEL)\nsyntax. CEL is a C-like expression language. The syntax and semantics of CEL\nare documented at https://github.com/google/cel-spec.\n\nExample (Comparison):\n\n    title: \"Summary size limit\"\n    description: \"Determines if a summary is less than 100 chars\"\n    expression: \"document.summary.size() \u003c 100\"\n\nExample (Equality):\n\n    title: \"Requestor is owner\"\n    description: \"Determines if requestor is the document owner\"\n    expression: \"document.owner == request.auth.claims.email\"\n\nExample (Logic):\n\n    title: \"Public documents\"\n    description: \"Determine whether the document should be publicly visible\"\n    expression: \"document.type != 'private' && document.type != 'internal'\"\n\nExample (Data Manipulation):\n\n    title: \"Notification string\"\n    description: \"Create a notification string with a timestamp.\"\n    expression: \"'New message received at ' + string(document.create_time)\"\n\nThe exact variables and functions that may be referenced within an expression\nare determined by the service that evaluates it. See the service\ndocumentation for additional information.",
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Optional. Title for the expression, i.e. a short string describing\nits purpose. This can be used e.g. in UIs which allow to enter the\nexpression."
        },
        "location": {
          "description": "Optional. String indicating the location of the expression for error\nreporting, e.g. a file name and a position in the file.",
          "type": "string"
        },
        "description": {
          "description": "Optional. Description of the expression. This is a longer text which\ndescribes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "expression": {
          "type": "string",
          "description": "Textual representation of an expression in Common Expression Language\nsyntax."
        }
      },
      "id": "Expr"
    },
    "GoogleCloudDatacatalogV1beta1SerializedPolicyTag": {
      "type": "object",
      "properties": {
        "childPolicyTags": {
          "description": "Children of the policy tag if any.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1SerializedPolicyTag"
          }
        },
        "displayName": {
          "description": "Required. Display name of the policy tag. Max 200 bytes when encoded in UTF-8.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of the serialized policy tag. The length of the\ndescription is limited to 2000 bytes when encoded in UTF-8. If not set,\ndefaults to an empty description."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1SerializedPolicyTag",
      "description": "Message representing one policy tag when exported as a nested proto."
    },
    "GoogleCloudDatacatalogV1beta1ListPolicyTagsResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token used to retrieve the next page of results, or empty if there are no\nmore results in the list."
        },
        "policyTags": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1PolicyTag"
          },
          "description": "The policy tags that are in the requested taxonomy."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1ListPolicyTagsResponse",
      "description": "Response message for\nListPolicyTags."
    },
    "GoogleCloudDatacatalogV1beta1PolicyTag": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. Resource name of this policy tag, whose format is:\n\"projects/{project_number}/locations/{location_id}/taxonomies/{taxonomy_id}/policyTags/{id}\".",
          "type": "string"
        },
        "childPolicyTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. Resource names of child policy tags of this policy tag."
        },
        "displayName": {
          "description": "Required. User defined name of this policy tag. It must: be unique within the parent\ntaxonomy; contain only unicode letters, numbers, underscores, dashes and\nspaces; not start or end with spaces; and be at most 200 bytes long when\nencoded in UTF-8.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Description of this policy tag. It must: contain only unicode characters,\ntabs, newlines, carriage returns and page breaks; and be at most 2000 bytes\nlong when encoded in UTF-8. If not set, defaults to an empty description.\nIf not set, defaults to an empty description."
        },
        "parentPolicyTag": {
          "description": "Resource name of this policy tag's parent policy tag (e.g. for the\n\"LatLong\" policy tag in the example above, this field contains the\nresource name of the \"Geolocation\" policy tag). If empty, it means this\npolicy tag is a top level policy tag (e.g. this field is empty for the\n\"Geolocation\" policy tag in the example above). If not set, defaults to an\nempty string.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1PolicyTag",
      "description": "Denotes one policy tag in a taxonomy (e.g. ssn). Policy Tags can be defined\nin a hierarchy. For example, consider the following hierarchy:\nGeolocation -&gt; (LatLong, City, ZipCode). PolicyTag \"Geolocation\"\ncontains three child policy tags: \"LatLong\", \"City\", and \"ZipCode\"."
    },
    "GetPolicyOptions": {
      "type": "object",
      "properties": {
        "requestedPolicyVersion": {
          "description": "Optional. The policy format version to be returned.\n\nValid values are 0, 1, and 3. Requests specifying an invalid value will be\nrejected.\n\nRequests for policies with any conditional bindings must specify version 3.\nPolicies without any conditional bindings may specify any valid value or\nleave the field unset.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "GetPolicyOptions",
      "description": "Encapsulates settings provided to GetIamPolicy."
    },
    "GoogleCloudDatacatalogV1beta1SystemTimestamps": {
      "description": "Timestamps about this resource according to a particular system.",
      "type": "object",
      "properties": {
        "createTime": {
          "description": "The creation time of the resource within the given system.",
          "format": "google-datetime",
          "type": "string"
        },
        "expireTime": {
          "description": "Output only. The expiration time of the resource within the given system.\nCurrently only apllicable to BigQuery resources.",
          "format": "google-datetime",
          "type": "string"
        },
        "updateTime": {
          "description": "The last-modified time of the resource within the given system.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1SystemTimestamps"
    },
    "GetIamPolicyRequest": {
      "id": "GetIamPolicyRequest",
      "description": "Request message for `GetIamPolicy` method.",
      "type": "object",
      "properties": {
        "options": {
          "description": "OPTIONAL: A `GetPolicyOptions` object for specifying options to\n`GetIamPolicy`. This field is only used by Cloud IAM.",
          "$ref": "GetPolicyOptions"
        }
      }
    },
    "TestIamPermissionsResponse": {
      "id": "TestIamPermissionsResponse",
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is\nallowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GoogleCloudDatacatalogV1beta1InlineSource": {
      "description": "Inline source used for taxonomies import.",
      "type": "object",
      "properties": {
        "taxonomies": {
          "description": "Required. Taxonomies to be imported.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1SerializedTaxonomy"
          }
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1InlineSource"
    },
    "GoogleCloudDatacatalogV1beta1TagField": {
      "description": "Contains the value and supporting information for a field within\na Tag.",
      "type": "object",
      "properties": {
        "doubleValue": {
          "description": "Holds the value for a tag field with double type.",
          "format": "double",
          "type": "number"
        },
        "timestampValue": {
          "description": "Holds the value for a tag field with timestamp type.",
          "format": "google-datetime",
          "type": "string"
        },
        "boolValue": {
          "description": "Holds the value for a tag field with boolean type.",
          "type": "boolean"
        },
        "displayName": {
          "type": "string",
          "description": "Output only. The display name of this field."
        },
        "order": {
          "type": "integer",
          "description": "Output only. The order of this field with respect to other fields in this tag. It can be\nset in Tag. For\nexample, a higher value can indicate a more important field. The value can\nbe negative. Multiple fields can have the same order, and field orders\nwithin a tag do not have to be sequential.",
          "format": "int32"
        },
        "enumValue": {
          "description": "Holds the value for a tag field with enum type. This value must be\none of the allowed values in the definition of this enum.",
          "$ref": "GoogleCloudDatacatalogV1beta1TagFieldEnumValue"
        },
        "stringValue": {
          "description": "Holds the value for a tag field with string type.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1TagField"
    },
    "GoogleCloudDatacatalogV1beta1Entry": {
      "description": "Entry Metadata. \nA Data Catalog Entry resource represents another resource in Google\nCloud Platform (such as a BigQuery dataset or a Cloud Pub/Sub topic), or\noutside of Google Cloud Platform. Clients can use the `linked_resource` field\nin the Entry resource to refer to the original resource ID of the source\nsystem.\n\nAn Entry resource contains resource details, such as its schema. An Entry can\nalso be used to attach flexible metadata, such as a\nTag.",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Entry description, which can consist of several sentences or paragraphs\nthat describe entry contents. Default value is an empty string."
        },
        "userSpecifiedSystem": {
          "description": "This field indicates the entry's source system that Data Catalog does not\nintegrate with. `user_specified_system` strings must begin with a letter\nor underscore and can only contain letters, numbers, and underscores; are\ncase insensitive; must be at least 1 character and at most 64 characters\nlong.",
          "type": "string"
        },
        "sourceSystemTimestamps": {
          "$ref": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
          "description": "Output only. Timestamps about the underlying resource, not about this Data Catalog\nentry. Output only when Entry is of type in the EntryType enum. For entries\nwith user_specified_type, this field is optional and defaults to an empty\ntimestamp."
        },
        "integratedSystem": {
          "description": "Output only. This field indicates the entry's source system that Data Catalog\nintegrates with, such as BigQuery or Cloud Pub/Sub.",
          "type": "string",
          "enumDescriptions": [
            "Default unknown system.",
            "BigQuery.",
            "Cloud Pub/Sub."
          ],
          "enum": [
            "INTEGRATED_SYSTEM_UNSPECIFIED",
            "BIGQUERY",
            "CLOUD_PUBSUB"
          ]
        },
        "linkedResource": {
          "type": "string",
          "description": "The resource this metadata entry refers to.\n\nFor Google Cloud Platform resources, `linked_resource` is the [full name of\nthe\nresource](https://cloud.google.com/apis/design/resource_names#full_resource_name).\nFor example, the `linked_resource` for a table resource from BigQuery is:\n\n* //bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId\n\nOutput only when Entry is of type in the EntryType enum. For entries with\nuser_specified_type, this field is optional and defaults to an empty\nstring."
        },
        "name": {
          "description": "The Data Catalog resource name of the entry in URL format. Example:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}/entries/{entry_id}\n\nNote that this Entry and its child resources may not actually be stored in\nthe location in this name.",
          "type": "string"
        },
        "gcsFilesetSpec": {
          "$ref": "GoogleCloudDatacatalogV1beta1GcsFilesetSpec",
          "description": "Specification that applies to a Cloud Storage fileset. This is only valid\non entries of type FILESET."
        },
        "schema": {
          "$ref": "GoogleCloudDatacatalogV1beta1Schema",
          "description": "Schema of the entry. An entry might not have any schema attached to it."
        },
        "userSpecifiedType": {
          "description": "Entry type if it does not fit any of the input-allowed values listed in\n`EntryType` enum above. When creating an entry, users should check the\nenum values first, if nothing matches the entry to be created, then\nprovide a custom value, for example \"my_special_type\".\n`user_specified_type` strings must begin with a letter or underscore and\ncan only contain letters, numbers, and underscores; are case insensitive;\nmust be at least 1 character and at most 64 characters long.\n\nCurrently, only FILESET enum value is allowed. All other entries created\nthrough Data Catalog must use `user_specified_type`.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "Display information such as title and description. A short name to identify\nthe entry, for example, \"Analytics Data - Jan 2011\". Default value is an\nempty string."
        },
        "bigqueryDateShardedSpec": {
          "$ref": "GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec",
          "description": "Specification for a group of BigQuery tables with name pattern\n`[prefix]YYYYMMDD`. Context:\nhttps://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding."
        },
        "bigqueryTableSpec": {
          "$ref": "GoogleCloudDatacatalogV1beta1BigQueryTableSpec",
          "description": "Specification that applies to a BigQuery table. This is only valid on\nentries of type `TABLE`."
        },
        "type": {
          "type": "string",
          "enumDescriptions": [
            "Default unknown type.",
            "Output only. The type of entry that has a GoogleSQL schema, including\nlogical views.",
            "Output only. The type of models.",
            "Output only. An entry type which is used for streaming entries. Example:\nCloud Pub/Sub topic.",
            "An entry type which is a set of files or objects. Example:\nCloud Storage fileset."
          ],
          "enum": [
            "ENTRY_TYPE_UNSPECIFIED",
            "TABLE",
            "MODEL",
            "DATA_STREAM",
            "FILESET"
          ],
          "description": "The type of the entry.\nOnly used for Entries with types in the EntryType enum."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1Entry"
    },
    "GoogleCloudDatacatalogV1beta1GcsFilesetSpec": {
      "type": "object",
      "properties": {
        "filePatterns": {
          "description": "Required. Patterns to identify a set of files in Google Cloud Storage. See [Cloud\nStorage documentation](/storage/docs/gsutil/addlhelp/WildcardNames) for\nmore information. Note that bucket wildcards are currently not supported.\n\nExamples of valid file_patterns:\n\n * `gs://bucket_name/dir/*`: matches all files within `bucket_name/dir`\n                             directory.\n * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir`\n                              spanning all subdirectories.\n * `gs://bucket_name/file*`: matches files prefixed by `file` in\n                             `bucket_name`\n * `gs://bucket_name/??.txt`: matches files with two characters followed by\n                              `.txt` in `bucket_name`\n * `gs://bucket_name/[aeiou].txt`: matches files that contain a single\n                                   vowel character followed by `.txt` in\n                                   `bucket_name`\n * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ...\n                                 or `m` followed by `.txt` in `bucket_name`\n * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match\n                             `a/*/b` pattern, such as `a/c/b`, `a/d/b`\n * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`\n\nYou can combine wildcards to provide more powerful matches, for example:\n\n * `gs://bucket_name/[a-m]??.j*g`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sampleGcsFileSpecs": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1GcsFileSpec"
          },
          "description": "Output only. Sample files contained in this fileset, not all files contained in this\nfileset are represented here."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1GcsFilesetSpec",
      "description": "Describes a Cloud Storage fileset entry."
    },
    "GoogleCloudDatacatalogV1beta1GcsFileSpec": {
      "type": "object",
      "properties": {
        "filePath": {
          "description": "Required. The full file path. Example: `gs://bucket_name/a/b.txt`.",
          "type": "string"
        },
        "sizeBytes": {
          "description": "Output only. The size of the file, in bytes.",
          "format": "int64",
          "type": "string"
        },
        "gcsTimestamps": {
          "$ref": "GoogleCloudDatacatalogV1beta1SystemTimestamps",
          "description": "Output only. Timestamps about the Cloud Storage file."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1GcsFileSpec",
      "description": "Specifications of a single file in Cloud Storage."
    },
    "GoogleCloudDatacatalogV1beta1SearchCatalogResponse": {
      "type": "object",
      "properties": {
        "results": {
          "description": "Search results.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1SearchCatalogResult"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token that can be used to retrieve the next page of results."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1SearchCatalogResponse",
      "description": "Response message for\nSearchCatalog."
    },
    "GoogleCloudDatacatalogV1beta1FieldType": {
      "type": "object",
      "properties": {
        "primitiveType": {
          "enum": [
            "PRIMITIVE_TYPE_UNSPECIFIED",
            "DOUBLE",
            "STRING",
            "BOOL",
            "TIMESTAMP"
          ],
          "description": "Represents primitive types - string, bool etc.",
          "type": "string",
          "enumDescriptions": [
            "This is the default invalid value for a type.",
            "A double precision number.",
            "An UTF-8 string.",
            "A boolean value.",
            "A timestamp."
          ]
        },
        "enumType": {
          "$ref": "GoogleCloudDatacatalogV1beta1FieldTypeEnumType",
          "description": "Represents an enum type."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1FieldType"
    },
    "GoogleCloudDatacatalogV1beta1ImportTaxonomiesResponse": {
      "description": "Response message for\nImportTaxonomies.",
      "type": "object",
      "properties": {
        "taxonomies": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1Taxonomy"
          },
          "description": "Taxonomies that were imported."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1ImportTaxonomiesResponse"
    },
    "GoogleCloudDatacatalogV1beta1SearchCatalogResult": {
      "type": "object",
      "properties": {
        "searchResultType": {
          "description": "Type of the search result. This field can be used to determine which Get\nmethod to call to fetch the full resource.",
          "type": "string",
          "enumDescriptions": [
            "Default unknown type.",
            "An Entry.",
            "A TagTemplate.",
            "An EntryGroup."
          ],
          "enum": [
            "SEARCH_RESULT_TYPE_UNSPECIFIED",
            "ENTRY",
            "TAG_TEMPLATE",
            "ENTRY_GROUP"
          ]
        },
        "searchResultSubtype": {
          "description": "Sub-type of the search result. This is a dot-delimited description of the\nresource's full type, and is the same as the value callers would provide in\nthe \"type\" search facet.  Examples: `entry.table`, `entry.dataStream`,\n`tagTemplate`.",
          "type": "string"
        },
        "relativeResourceName": {
          "description": "The relative resource name of the resource in URL format.\nExamples:\n\n * `projects/{project_id}/locations/{location_id}/entryGroups/{entry_group_id}/entries/{entry_id}`\n * `projects/{project_id}/tagTemplates/{tag_template_id}`",
          "type": "string"
        },
        "linkedResource": {
          "description": "The full name of the cloud resource the entry belongs to. See:\nhttps://cloud.google.com/apis/design/resource_names#full_resource_name.\nExample:\n\n * `//bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId`",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1SearchCatalogResult",
      "description": "A result that appears in the response of a search request. Each result\ncaptures details of one entry that matches the search."
    },
    "GoogleCloudDatacatalogV1beta1EntryGroup": {
      "description": "EntryGroup Metadata. \nAn EntryGroup resource represents a logical grouping of zero or more\nData Catalog Entry resources.",
      "type": "object",
      "properties": {
        "dataCatalogTimestamps": {
          "description": "Output only. Timestamps about this EntryGroup. Default value is empty timestamps.",
          "$ref": "GoogleCloudDatacatalogV1beta1SystemTimestamps"
        },
        "name": {
          "description": "The resource name of the entry group in URL format. Example:\n\n* projects/{project_id}/locations/{location}/entryGroups/{entry_group_id}\n\nNote that this EntryGroup and its child resources may not actually be\nstored in the location in this name.",
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "A short name to identify the entry group, for example,\n\"analytics data - jan 2011\". Default value is an empty string."
        },
        "description": {
          "description": "Entry group description, which can consist of several sentences or\nparagraphs that describe entry group contents. Default value is an empty\nstring.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1EntryGroup"
    },
    "GoogleCloudDatacatalogV1beta1SerializedTaxonomy": {
      "description": "Message capturing a taxonomy and its policy tag hierarchy as a nested proto.\nUsed for taxonomy import/export and mutation.",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Required. Display name of the taxonomy. Max 200 bytes when encoded in UTF-8."
        },
        "description": {
          "description": "Description of the serialized taxonomy. The length of the\ndescription is limited to 2000 bytes when encoded in UTF-8. If not set,\ndefaults to an empty description.",
          "type": "string"
        },
        "policyTags": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1SerializedPolicyTag"
          },
          "description": "Top level policy tags associated with the taxonomy if any."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1SerializedTaxonomy"
    },
    "GoogleCloudDatacatalogV1beta1TagFieldEnumValue": {
      "type": "object",
      "properties": {
        "displayName": {
          "description": "The display name of the enum value.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1TagFieldEnumValue",
      "description": "Holds an enum value."
    },
    "GoogleCloudDatacatalogV1beta1ViewSpec": {
      "description": "Table view specification.",
      "type": "object",
      "properties": {
        "viewQuery": {
          "description": "Output only. The query that defines the table view.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1ViewSpec"
    },
    "GoogleCloudDatacatalogV1beta1FieldTypeEnumType": {
      "type": "object",
      "properties": {
        "allowedValues": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue"
          },
          "description": "Required on create; optional on update. The set of allowed values for\nthis enum. This set must not be empty, the display names of the values in\nthis set must not be empty and the display names of the values must be\ncase-insensitively unique within this set. Currently, enum values can\nonly be added to the list of allowed values. Deletion and renaming of\nenum values are not supported. Can have up to 500 allowed values."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumType"
    },
    "GoogleCloudDatacatalogV1beta1ListTagsResponse": {
      "id": "GoogleCloudDatacatalogV1beta1ListTagsResponse",
      "description": "Response message for\nListTags.",
      "type": "object",
      "properties": {
        "tags": {
          "description": "Tag details.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1Tag"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token to retrieve the next page of results. It is set to empty if no items\nremain in results."
        }
      }
    },
    "GoogleCloudDatacatalogV1beta1SearchCatalogRequestScope": {
      "type": "object",
      "properties": {
        "includeGcpPublicDatasets": {
          "description": "If `true`, include Google Cloud Platform (GCP) public datasets in the\nsearch results. Info on GCP public datasets is available at\nhttps://cloud.google.com/public-datasets/. By default, GCP public\ndatasets are excluded.",
          "type": "boolean"
        },
        "includeProjectIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of project IDs to search within. To learn more about the\ndistinction between project names/IDs/numbers, go to\nhttps://cloud.google.com/docs/overview/#projects."
        },
        "includeOrgIds": {
          "description": "The list of organization IDs to search within. To find your organization\nID, follow instructions in\nhttps://cloud.google.com/resource-manager/docs/creating-managing-organization.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1SearchCatalogRequestScope",
      "description": "The criteria that select the subspace used for query matching."
    },
    "SetIamPolicyRequest": {
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of\nthe policy is limited to a few 10s of KB. An empty policy is a\nvalid policy but certain Cloud Platform services (such as Projects)\nmight reject them.",
          "$ref": "Policy"
        }
      },
      "id": "SetIamPolicyRequest"
    },
    "GoogleCloudDatacatalogV1beta1ImportTaxonomiesRequest": {
      "id": "GoogleCloudDatacatalogV1beta1ImportTaxonomiesRequest",
      "description": "Request message for\nImportTaxonomies.",
      "type": "object",
      "properties": {
        "inlineSource": {
          "$ref": "GoogleCloudDatacatalogV1beta1InlineSource",
          "description": "Inline source used for taxonomies import"
        }
      }
    },
    "GoogleCloudDatacatalogV1beta1BigQueryTableSpec": {
      "description": "Describes a BigQuery table.",
      "type": "object",
      "properties": {
        "viewSpec": {
          "$ref": "GoogleCloudDatacatalogV1beta1ViewSpec",
          "description": "Table view specification. This field should only be populated if\n`table_source_type` is `BIGQUERY_VIEW`."
        },
        "tableSpec": {
          "$ref": "GoogleCloudDatacatalogV1beta1TableSpec",
          "description": "Spec of a BigQuery table. This field should only be populated if\n`table_source_type` is `BIGQUERY_TABLE`."
        },
        "tableSourceType": {
          "description": "Output only. The table source type.",
          "type": "string",
          "enumDescriptions": [
            "Default unknown type.",
            "Table view.",
            "BigQuery native table."
          ],
          "enum": [
            "TABLE_SOURCE_TYPE_UNSPECIFIED",
            "BIGQUERY_VIEW",
            "BIGQUERY_TABLE"
          ]
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1BigQueryTableSpec"
    },
    "Empty": {
      "type": "object",
      "properties": {},
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`."
    },
    "GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue": {
      "id": "GoogleCloudDatacatalogV1beta1FieldTypeEnumTypeEnumValue",
      "type": "object",
      "properties": {
        "displayName": {
          "description": "Required. The display name of the enum value. Must not be an empty string.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1beta1TagTemplate": {
      "id": "GoogleCloudDatacatalogV1beta1TagTemplate",
      "description": "A tag template defines a tag, which can have one or more typed fields.\nThe template is used to create and attach the tag to GCP resources.\n[Tag template roles](/iam/docs/understanding-roles#data-catalog-roles)\nprovide permissions to create, edit, and use the template (see, for example,\nthe [TagTemplate User](/data-catalog/docs/how-to/template-user) role, which\nincludes permission to use the tag template to tag resources.",
      "type": "object",
      "properties": {
        "fields": {
          "additionalProperties": {
            "$ref": "GoogleCloudDatacatalogV1beta1TagTemplateField"
          },
          "description": "Required. Map of tag template field IDs to the settings for the field.\nThis map is an exhaustive list of the allowed fields. This map must contain\nat least one field and at most 500 fields.\n\nThe keys to this map are tag template field IDs. Field IDs can contain\nletters (both uppercase and lowercase), numbers (0-9) and underscores (_).\nField IDs must be at least 1 character long and at most\n64 characters long. Field IDs must start with a letter or underscore.",
          "type": "object"
        },
        "name": {
          "description": "The resource name of the tag template in URL format. Example:\n\n* projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}\n\nNote that this TagTemplate and its child resources may not actually be\nstored in the location in this name.",
          "type": "string"
        },
        "displayName": {
          "description": "The display name for this template. Defaults to an empty string.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1beta1SearchCatalogRequest": {
      "id": "GoogleCloudDatacatalogV1beta1SearchCatalogRequest",
      "description": "Request message for\nSearchCatalog.",
      "type": "object",
      "properties": {
        "scope": {
          "$ref": "GoogleCloudDatacatalogV1beta1SearchCatalogRequestScope",
          "description": "Required. The scope of this search request. A `scope` that has empty\n`include_org_ids`, `include_project_ids` AND false\n`include_gcp_public_datasets` is considered invalid. Data Catalog will\nreturn an error in such a case."
        },
        "pageToken": {
          "description": "Optional. Pagination token returned in an earlier\nSearchCatalogResponse.next_page_token, which\nindicates that this is a continuation of a prior\nSearchCatalogRequest\ncall, and that the system should return the next page of data. If empty,\nthe first page is returned.",
          "type": "string"
        },
        "orderBy": {
          "description": "Specifies the ordering of results, currently supported case-sensitive\nchoices are:\n\n  * `relevance`, only supports descending\n  * `last_modified_timestamp [asc|desc]`, defaults to descending if not\n    specified\n\nIf not specified, defaults to `relevance` descending.",
          "type": "string"
        },
        "pageSize": {
          "type": "integer",
          "description": "Number of results in the search page. If \u003c=0 then defaults to 10. Max limit\nfor page_size is 1000. Throws an invalid argument for page_size \u003e 1000.",
          "format": "int32"
        },
        "query": {
          "description": "Required. The query string in search query syntax. The query must be non-empty.\n\nQuery strings can be simple as \"x\" or more qualified as:\n\n* name:x\n* column:x\n* description:y\n\nNote: Query tokens need to have a minimum of 3 characters for substring\nmatching to work correctly. See [Data Catalog Search\nSyntax](/data-catalog/docs/how-to/search-reference) for more information.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1beta1ColumnSchema": {
      "description": "Representation of a column within a schema. Columns could be nested inside\nother columns.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Required. Type of the column.",
          "type": "string"
        },
        "column": {
          "description": "Required. Name of the column.",
          "type": "string"
        },
        "mode": {
          "description": "Optional. A column's mode indicates whether the values in this column are required,\nnullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported.\nDefault mode is `NULLABLE`.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Optional. Description of the column. Default value is an empty string."
        },
        "subcolumns": {
          "description": "Optional. Schema of sub-columns. A column can have zero or more sub-columns.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1ColumnSchema"
          }
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1ColumnSchema"
    },
    "GoogleCloudDatacatalogV1beta1ListTaxonomiesResponse": {
      "id": "GoogleCloudDatacatalogV1beta1ListTaxonomiesResponse",
      "description": "Response message for\nListTaxonomies.",
      "type": "object",
      "properties": {
        "taxonomies": {
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1Taxonomy"
          },
          "description": "Taxonomies that the project contains."
        },
        "nextPageToken": {
          "description": "Token used to retrieve the next page of results, or empty if there are no\nmore results in the list.",
          "type": "string"
        }
      }
    },
    "GoogleCloudDatacatalogV1beta1Schema": {
      "id": "GoogleCloudDatacatalogV1beta1Schema",
      "description": "Represents a schema (e.g. BigQuery, GoogleSQL, Avro schema).",
      "type": "object",
      "properties": {
        "columns": {
          "description": "Required. Schema of columns. A maximum of 10,000 columns and sub-columns can be\nspecified.",
          "type": "array",
          "items": {
            "$ref": "GoogleCloudDatacatalogV1beta1ColumnSchema"
          }
        }
      }
    },
    "GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec": {
      "type": "object",
      "properties": {
        "tablePrefix": {
          "description": "Output only. The table name prefix of the shards. The name of any given shard is\n`[table_prefix]YYYYMMDD`, for example, for shard `MyTable20180101`, the\n`table_prefix` is `MyTable`.",
          "type": "string"
        },
        "shardCount": {
          "type": "string",
          "description": "Output only. Total number of shards.",
          "format": "int64"
        },
        "dataset": {
          "type": "string",
          "description": "Output only. The Data Catalog resource name of the dataset entry the current table\nbelongs to, for example,\n`projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1BigQueryDateShardedSpec",
      "description": "Spec for a group of BigQuery tables with name pattern `[prefix]YYYYMMDD`.\nContext:\nhttps://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding"
    },
    "TestIamPermissionsRequest": {
      "type": "object",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with\nwildcards (such as '*' or 'storage.*') are not allowed. For more\ninformation see\n[IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "id": "TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method."
    },
    "Policy": {
      "description": "An Identity and Access Management (IAM) policy, which specifies access\ncontrols for Google Cloud resources.\n\n\nA `Policy` is a collection of `bindings`. A `binding` binds one or more\n`members` to a single `role`. Members can be user accounts, service accounts,\nGoogle groups, and domains (such as G Suite). A `role` is a named list of\npermissions; each `role` can be an IAM predefined role or a user-created\ncustom role.\n\nOptionally, a `binding` can specify a `condition`, which is a logical\nexpression that allows access to a resource only if the expression evaluates\nto `true`. A condition can add constraints based on attributes of the\nrequest, the resource, or both.\n\n**JSON example:**\n\n    {\n      \"bindings\": [\n        {\n          \"role\": \"roles/resourcemanager.organizationAdmin\",\n          \"members\": [\n            \"user:mike@example.com\",\n            \"group:admins@example.com\",\n            \"domain:google.com\",\n            \"serviceAccount:my-project-id@appspot.gserviceaccount.com\"\n          ]\n        },\n        {\n          \"role\": \"roles/resourcemanager.organizationViewer\",\n          \"members\": [\"user:eve@example.com\"],\n          \"condition\": {\n            \"title\": \"expirable access\",\n            \"description\": \"Does not grant access after Sep 2020\",\n            \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\",\n          }\n        }\n      ],\n      \"etag\": \"BwWWja0YfJA=\",\n      \"version\": 3\n    }\n\n**YAML example:**\n\n    bindings:\n    - members:\n      - user:mike@example.com\n      - group:admins@example.com\n      - domain:google.com\n      - serviceAccount:my-project-id@appspot.gserviceaccount.com\n      role: roles/resourcemanager.organizationAdmin\n    - members:\n      - user:eve@example.com\n      role: roles/resourcemanager.organizationViewer\n      condition:\n        title: expirable access\n        description: Does not grant access after Sep 2020\n        expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\n    - etag: BwWWja0YfJA=\n    - version: 3\n\nFor a description of IAM and its features, see the\n[IAM documentation](https://cloud.google.com/iam/docs/).",
      "type": "object",
      "properties": {
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help\nprevent simultaneous updates of a policy from overwriting each other.\nIt is strongly suggested that systems make use of the `etag` in the\nread-modify-write cycle to perform policy updates in order to avoid race\nconditions: An `etag` is returned in the response to `getIamPolicy`, and\nsystems are expected to put that etag in the request to `setIamPolicy` to\nensure that their change will be applied to the same version of the policy.\n\n**Important:** If you use IAM Conditions, you must include the `etag` field\nwhenever you call `setIamPolicy`. If you omit this field, then IAM allows\nyou to overwrite a version `3` policy with a version `1` policy, and all of\nthe conditions in the version `3` policy are lost.",
          "format": "byte",
          "type": "string"
        },
        "version": {
          "description": "Specifies the format of the policy.\n\nValid values are `0`, `1`, and `3`. Requests that specify an invalid value\nare rejected.\n\nAny operation that affects conditional role bindings must specify version\n`3`. This requirement applies to the following operations:\n\n* Getting a policy that includes a conditional role binding\n* Adding a conditional role binding to a policy\n* Changing a conditional role binding in a policy\n* Removing any role binding, with or without a condition, from a policy\n  that includes conditions\n\n**Important:** If you use IAM Conditions, you must include the `etag` field\nwhenever you call `setIamPolicy`. If you omit this field, then IAM allows\nyou to overwrite a version `3` policy with a version `1` policy, and all of\nthe conditions in the version `3` policy are lost.\n\nIf a policy does not include any conditions, operations on that policy may\nspecify any valid version or leave the field unset.",
          "format": "int32",
          "type": "integer"
        },
        "bindings": {
          "description": "Associates a list of `members` to a `role`. Optionally, may specify a\n`condition` that determines how and when the `bindings` are applied. Each\nof the `bindings` must contain at least one member.",
          "type": "array",
          "items": {
            "$ref": "Binding"
          }
        }
      },
      "id": "Policy"
    },
    "GoogleCloudDatacatalogV1beta1Taxonomy": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. Resource name of this taxonomy, whose format is:\n\"projects/{project_number}/locations/{location_id}/taxonomies/{id}\".",
          "type": "string"
        },
        "displayName": {
          "description": "Required. User defined name of this taxonomy. It must: contain only unicode letters,\nnumbers, underscores, dashes and spaces; not start or end with spaces; and\nbe at most 200 bytes long when encoded in UTF-8.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "Optional. Description of this taxonomy. It must: contain only unicode characters,\ntabs, newlines, carriage returns and page breaks; and be at most 2000 bytes\nlong when encoded in UTF-8. If not set, defaults to an empty description."
        },
        "activatedPolicyTypes": {
          "type": "array",
          "items": {
            "enum": [
              "POLICY_TYPE_UNSPECIFIED",
              "FINE_GRAINED_ACCESS_CONTROL"
            ],
            "type": "string"
          },
          "enumDescriptions": [
            "Unspecified policy type.",
            "Fine grained access control policy, which enables access control on\ntagged resources."
          ],
          "description": "Optional. A list of policy types that are activated for this taxonomy. If not set,\ndefaults to an empty list."
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1Taxonomy",
      "description": "A taxonomy is a collection of policy tags that classify data along a common\naxis. For instance a data *sensitivity* taxonomy could contain policy tags\ndenoting PII such as age, zipcode, and SSN. A data *origin* taxonomy could\ncontain policy tags to distinguish user data, employee data, partner data,\npublic data."
    },
    "GoogleCloudDatacatalogV1beta1TableSpec": {
      "id": "GoogleCloudDatacatalogV1beta1TableSpec",
      "description": "Normal BigQuery table spec.",
      "type": "object",
      "properties": {
        "groupedEntry": {
          "type": "string",
          "description": "Output only. If the table is a dated shard, i.e., with name pattern `[prefix]YYYYMMDD`,\n`grouped_entry` is the Data Catalog resource name of the date sharded\ngrouped entry, for example,\n`projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}`.\nOtherwise, `grouped_entry` is empty."
        }
      }
    },
    "GoogleCloudDatacatalogV1beta1Tag": {
      "description": "Tags are used to attach custom metadata to Data Catalog resources. Tags\nconform to the specifications within their tag template.\n\nSee [Data Catalog IAM](/data-catalog/docs/concepts/iam) for information on\nthe permissions needed to create or view tags.",
      "type": "object",
      "properties": {
        "column": {
          "description": "Resources like Entry can have schemas associated with them. This scope\nallows users to attach tags to an individual column based on that schema.\n\nFor attaching a tag to a nested column, use `.` to separate the column\nnames. Example:\n\n* `outer_column.inner_column`",
          "type": "string"
        },
        "template": {
          "type": "string",
          "description": "Required. The resource name of the tag template that this tag uses. Example:\n\n* projects/{project_id}/locations/{location}/tagTemplates/{tag_template_id}\n\nThis field cannot be modified after creation."
        },
        "templateDisplayName": {
          "description": "Output only. The display name of the tag template.",
          "type": "string"
        },
        "fields": {
          "description": "Required. This maps the ID of a tag field to the value of and additional information\nabout that field. Valid field IDs are defined by the tag's template. A tag\nmust have at least 1 field and at most 500 fields.",
          "type": "object",
          "additionalProperties": {
            "$ref": "GoogleCloudDatacatalogV1beta1TagField"
          }
        },
        "name": {
          "description": "The resource name of the tag in URL format. Example:\n\n* projects/{project_id}/locations/{location}/entrygroups/{entry_group_id}/entries/{entry_id}/tags/{tag_id}\n\nwhere `tag_id` is a system-generated identifier.\nNote that this Tag may not actually be stored in the location in this name.",
          "type": "string"
        }
      },
      "id": "GoogleCloudDatacatalogV1beta1Tag"
    }
  },
  "protocol": "rest",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  }
}
