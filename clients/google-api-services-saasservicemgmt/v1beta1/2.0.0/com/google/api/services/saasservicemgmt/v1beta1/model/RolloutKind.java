/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.saasservicemgmt.v1beta1.model;

/**
 * An object that describes various settings of Rollout execution. Includes built-in policies across
 * GCP and GDC, and customizable policies.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the SaaS Runtime API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RolloutKind extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Annotations is an unstructured key-value map stored with a resource that may be set
   * by external tools to store and retrieve arbitrary metadata. They are not queryable and should
   * be preserved when modifying objects. More info: https://kubernetes.io/docs/user-
   * guide/annotations
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> annotations;

  /**
   * Output only. The timestamp when the resource was created.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String createTime;

  /**
   * Optional. The configuration for error budget. If the number of failed units exceeds
   * max(allowed_count, allowed_ratio * total_units), the rollout will be paused. If not set, all
   * units will be attempted to be updated regardless of the number of failures encountered.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private ErrorBudget errorBudget;

  /**
   * Output only. An opaque value that uniquely identifies a version or generation of a resource. It
   * can be used to confirm that the client and server agree on the ordering of a resource being
   * written.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String etag;

  /**
   * Optional. The labels on the resource, which can be used for categorization. similar to
   * Kubernetes resource labels.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.lang.String> labels;

  /**
   * Identifier. The resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/rolloutKinds/{rollout_kind_id}"
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Optional. The strategy used for executing a Rollout. This is a required field. There are two
   * supported values strategies which are used to control - "Google.Cloud.Simple.AllAtOnce" -
   * "Google.Cloud.Simple.OneLocationAtATime" A rollout with one of these simple strategies will
   * rollout across all locations defined in the associated UnitKind's Saas Locations.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String rolloutOrchestrationStrategy;

  /**
   * Output only. The unique identifier of the resource. UID is unique in the time and space for
   * this resource within the scope of the service. It is typically generated by the server on
   * successful creation of a resource and must not be changed. UID is used to uniquely identify
   * resources with resource name reuses. This should be a UUID4.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String uid;

  /**
   * Optional. CEL(https://github.com/google/cel-spec) formatted filter string against Unit. The
   * filter will be applied to determine the eligible unit population. This filter can only reduce,
   * but not expand the scope of the rollout.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String unitFilter;

  /**
   * Required. Immutable. UnitKind that this rollout kind corresponds to. Rollouts stemming from
   * this rollout kind will target the units of this unit kind. In other words, this defines the
   * population of target units to be upgraded by rollouts.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String unitKind;

  /**
   * Output only. The timestamp when the resource was last updated. Any change to the resource made
   * by users must refresh this value. Changes to a resource made by the service should refresh this
   * value.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String updateTime;

  /**
   * Optional. The config for updating the unit kind. By default, the unit kind will be updated on
   * the rollout start.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String updateUnitKindStrategy;

  /**
   * Optional. Annotations is an unstructured key-value map stored with a resource that may be set
   * by external tools to store and retrieve arbitrary metadata. They are not queryable and should
   * be preserved when modifying objects. More info: https://kubernetes.io/docs/user-
   * guide/annotations
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getAnnotations() {
    return annotations;
  }

  /**
   * Optional. Annotations is an unstructured key-value map stored with a resource that may be set
   * by external tools to store and retrieve arbitrary metadata. They are not queryable and should
   * be preserved when modifying objects. More info: https://kubernetes.io/docs/user-
   * guide/annotations
   * @param annotations annotations or {@code null} for none
   */
  public RolloutKind setAnnotations(java.util.Map<String, java.lang.String> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Output only. The timestamp when the resource was created.
   * @return value or {@code null} for none
   */
  public String getCreateTime() {
    return createTime;
  }

  /**
   * Output only. The timestamp when the resource was created.
   * @param createTime createTime or {@code null} for none
   */
  public RolloutKind setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Optional. The configuration for error budget. If the number of failed units exceeds
   * max(allowed_count, allowed_ratio * total_units), the rollout will be paused. If not set, all
   * units will be attempted to be updated regardless of the number of failures encountered.
   * @return value or {@code null} for none
   */
  public ErrorBudget getErrorBudget() {
    return errorBudget;
  }

  /**
   * Optional. The configuration for error budget. If the number of failed units exceeds
   * max(allowed_count, allowed_ratio * total_units), the rollout will be paused. If not set, all
   * units will be attempted to be updated regardless of the number of failures encountered.
   * @param errorBudget errorBudget or {@code null} for none
   */
  public RolloutKind setErrorBudget(ErrorBudget errorBudget) {
    this.errorBudget = errorBudget;
    return this;
  }

  /**
   * Output only. An opaque value that uniquely identifies a version or generation of a resource. It
   * can be used to confirm that the client and server agree on the ordering of a resource being
   * written.
   * @return value or {@code null} for none
   */
  public java.lang.String getEtag() {
    return etag;
  }

  /**
   * Output only. An opaque value that uniquely identifies a version or generation of a resource. It
   * can be used to confirm that the client and server agree on the ordering of a resource being
   * written.
   * @param etag etag or {@code null} for none
   */
  public RolloutKind setEtag(java.lang.String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. The labels on the resource, which can be used for categorization. similar to
   * Kubernetes resource labels.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.lang.String> getLabels() {
    return labels;
  }

  /**
   * Optional. The labels on the resource, which can be used for categorization. similar to
   * Kubernetes resource labels.
   * @param labels labels or {@code null} for none
   */
  public RolloutKind setLabels(java.util.Map<String, java.lang.String> labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Identifier. The resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/rolloutKinds/{rollout_kind_id}"
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Identifier. The resource name (full URI of the resource) following the standard naming scheme:
   * "projects/{project}/locations/{location}/rolloutKinds/{rollout_kind_id}"
   * @param name name or {@code null} for none
   */
  public RolloutKind setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. The strategy used for executing a Rollout. This is a required field. There are two
   * supported values strategies which are used to control - "Google.Cloud.Simple.AllAtOnce" -
   * "Google.Cloud.Simple.OneLocationAtATime" A rollout with one of these simple strategies will
   * rollout across all locations defined in the associated UnitKind's Saas Locations.
   * @return value or {@code null} for none
   */
  public java.lang.String getRolloutOrchestrationStrategy() {
    return rolloutOrchestrationStrategy;
  }

  /**
   * Optional. The strategy used for executing a Rollout. This is a required field. There are two
   * supported values strategies which are used to control - "Google.Cloud.Simple.AllAtOnce" -
   * "Google.Cloud.Simple.OneLocationAtATime" A rollout with one of these simple strategies will
   * rollout across all locations defined in the associated UnitKind's Saas Locations.
   * @param rolloutOrchestrationStrategy rolloutOrchestrationStrategy or {@code null} for none
   */
  public RolloutKind setRolloutOrchestrationStrategy(java.lang.String rolloutOrchestrationStrategy) {
    this.rolloutOrchestrationStrategy = rolloutOrchestrationStrategy;
    return this;
  }

  /**
   * Output only. The unique identifier of the resource. UID is unique in the time and space for
   * this resource within the scope of the service. It is typically generated by the server on
   * successful creation of a resource and must not be changed. UID is used to uniquely identify
   * resources with resource name reuses. This should be a UUID4.
   * @return value or {@code null} for none
   */
  public java.lang.String getUid() {
    return uid;
  }

  /**
   * Output only. The unique identifier of the resource. UID is unique in the time and space for
   * this resource within the scope of the service. It is typically generated by the server on
   * successful creation of a resource and must not be changed. UID is used to uniquely identify
   * resources with resource name reuses. This should be a UUID4.
   * @param uid uid or {@code null} for none
   */
  public RolloutKind setUid(java.lang.String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Optional. CEL(https://github.com/google/cel-spec) formatted filter string against Unit. The
   * filter will be applied to determine the eligible unit population. This filter can only reduce,
   * but not expand the scope of the rollout.
   * @return value or {@code null} for none
   */
  public java.lang.String getUnitFilter() {
    return unitFilter;
  }

  /**
   * Optional. CEL(https://github.com/google/cel-spec) formatted filter string against Unit. The
   * filter will be applied to determine the eligible unit population. This filter can only reduce,
   * but not expand the scope of the rollout.
   * @param unitFilter unitFilter or {@code null} for none
   */
  public RolloutKind setUnitFilter(java.lang.String unitFilter) {
    this.unitFilter = unitFilter;
    return this;
  }

  /**
   * Required. Immutable. UnitKind that this rollout kind corresponds to. Rollouts stemming from
   * this rollout kind will target the units of this unit kind. In other words, this defines the
   * population of target units to be upgraded by rollouts.
   * @return value or {@code null} for none
   */
  public java.lang.String getUnitKind() {
    return unitKind;
  }

  /**
   * Required. Immutable. UnitKind that this rollout kind corresponds to. Rollouts stemming from
   * this rollout kind will target the units of this unit kind. In other words, this defines the
   * population of target units to be upgraded by rollouts.
   * @param unitKind unitKind or {@code null} for none
   */
  public RolloutKind setUnitKind(java.lang.String unitKind) {
    this.unitKind = unitKind;
    return this;
  }

  /**
   * Output only. The timestamp when the resource was last updated. Any change to the resource made
   * by users must refresh this value. Changes to a resource made by the service should refresh this
   * value.
   * @return value or {@code null} for none
   */
  public String getUpdateTime() {
    return updateTime;
  }

  /**
   * Output only. The timestamp when the resource was last updated. Any change to the resource made
   * by users must refresh this value. Changes to a resource made by the service should refresh this
   * value.
   * @param updateTime updateTime or {@code null} for none
   */
  public RolloutKind setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Optional. The config for updating the unit kind. By default, the unit kind will be updated on
   * the rollout start.
   * @return value or {@code null} for none
   */
  public java.lang.String getUpdateUnitKindStrategy() {
    return updateUnitKindStrategy;
  }

  /**
   * Optional. The config for updating the unit kind. By default, the unit kind will be updated on
   * the rollout start.
   * @param updateUnitKindStrategy updateUnitKindStrategy or {@code null} for none
   */
  public RolloutKind setUpdateUnitKindStrategy(java.lang.String updateUnitKindStrategy) {
    this.updateUnitKindStrategy = updateUnitKindStrategy;
    return this;
  }

  @Override
  public RolloutKind set(String fieldName, Object value) {
    return (RolloutKind) super.set(fieldName, value);
  }

  @Override
  public RolloutKind clone() {
    return (RolloutKind) super.clone();
  }

}
