/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.addressvalidation.v1.model;

/**
 * Contains information about the place the input was geocoded to.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Address Validation API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleMapsAddressvalidationV1Geocode extends com.google.api.client.json.GenericJson {

  /**
   * The bounds of the geocoded place.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleGeoTypeViewport bounds;

  /**
   * The size of the geocoded place, in meters. This is another measure of the coarseness of the
   * geocoded location, but in physical size rather than in semantic meaning.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Float featureSizeMeters;

  /**
   * The geocoded location of the input. Using place IDs is preferred over using addresses,
   * latitude/longitude coordinates, or plus codes. Using coordinates when routing or calculating
   * driving directions will always result in the point being snapped to the road nearest to those
   * coordinates. This may not be a road that will quickly or safely lead to the destination and may
   * not be near an access point to the property. Additionally, when a location is reverse geocoded,
   * there is no guarantee that the returned address will match the original.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleTypeLatLng location;

  /**
   * The PlaceID of the place this input geocodes to. For more information about Place IDs see
   * [here](https://developers.google.com/maps/documentation/places/web-service/place-id).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String placeId;

  /**
   * The type(s) of place that the input geocoded to. For example, `['locality', 'political']`. The
   * full list of types can be found
   * [here](https://developers.google.com/maps/documentation/geocoding/requests-geocoding#Types).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> placeTypes;

  /**
   * The plus code corresponding to the `location`.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GoogleMapsAddressvalidationV1PlusCode plusCode;

  /**
   * The bounds of the geocoded place.
   * @return value or {@code null} for none
   */
  public GoogleGeoTypeViewport getBounds() {
    return bounds;
  }

  /**
   * The bounds of the geocoded place.
   * @param bounds bounds or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1Geocode setBounds(GoogleGeoTypeViewport bounds) {
    this.bounds = bounds;
    return this;
  }

  /**
   * The size of the geocoded place, in meters. This is another measure of the coarseness of the
   * geocoded location, but in physical size rather than in semantic meaning.
   * @return value or {@code null} for none
   */
  public java.lang.Float getFeatureSizeMeters() {
    return featureSizeMeters;
  }

  /**
   * The size of the geocoded place, in meters. This is another measure of the coarseness of the
   * geocoded location, but in physical size rather than in semantic meaning.
   * @param featureSizeMeters featureSizeMeters or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1Geocode setFeatureSizeMeters(java.lang.Float featureSizeMeters) {
    this.featureSizeMeters = featureSizeMeters;
    return this;
  }

  /**
   * The geocoded location of the input. Using place IDs is preferred over using addresses,
   * latitude/longitude coordinates, or plus codes. Using coordinates when routing or calculating
   * driving directions will always result in the point being snapped to the road nearest to those
   * coordinates. This may not be a road that will quickly or safely lead to the destination and may
   * not be near an access point to the property. Additionally, when a location is reverse geocoded,
   * there is no guarantee that the returned address will match the original.
   * @return value or {@code null} for none
   */
  public GoogleTypeLatLng getLocation() {
    return location;
  }

  /**
   * The geocoded location of the input. Using place IDs is preferred over using addresses,
   * latitude/longitude coordinates, or plus codes. Using coordinates when routing or calculating
   * driving directions will always result in the point being snapped to the road nearest to those
   * coordinates. This may not be a road that will quickly or safely lead to the destination and may
   * not be near an access point to the property. Additionally, when a location is reverse geocoded,
   * there is no guarantee that the returned address will match the original.
   * @param location location or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1Geocode setLocation(GoogleTypeLatLng location) {
    this.location = location;
    return this;
  }

  /**
   * The PlaceID of the place this input geocodes to. For more information about Place IDs see
   * [here](https://developers.google.com/maps/documentation/places/web-service/place-id).
   * @return value or {@code null} for none
   */
  public java.lang.String getPlaceId() {
    return placeId;
  }

  /**
   * The PlaceID of the place this input geocodes to. For more information about Place IDs see
   * [here](https://developers.google.com/maps/documentation/places/web-service/place-id).
   * @param placeId placeId or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1Geocode setPlaceId(java.lang.String placeId) {
    this.placeId = placeId;
    return this;
  }

  /**
   * The type(s) of place that the input geocoded to. For example, `['locality', 'political']`. The
   * full list of types can be found
   * [here](https://developers.google.com/maps/documentation/geocoding/requests-geocoding#Types).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getPlaceTypes() {
    return placeTypes;
  }

  /**
   * The type(s) of place that the input geocoded to. For example, `['locality', 'political']`. The
   * full list of types can be found
   * [here](https://developers.google.com/maps/documentation/geocoding/requests-geocoding#Types).
   * @param placeTypes placeTypes or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1Geocode setPlaceTypes(java.util.List<java.lang.String> placeTypes) {
    this.placeTypes = placeTypes;
    return this;
  }

  /**
   * The plus code corresponding to the `location`.
   * @return value or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1PlusCode getPlusCode() {
    return plusCode;
  }

  /**
   * The plus code corresponding to the `location`.
   * @param plusCode plusCode or {@code null} for none
   */
  public GoogleMapsAddressvalidationV1Geocode setPlusCode(GoogleMapsAddressvalidationV1PlusCode plusCode) {
    this.plusCode = plusCode;
    return this;
  }

  @Override
  public GoogleMapsAddressvalidationV1Geocode set(String fieldName, Object value) {
    return (GoogleMapsAddressvalidationV1Geocode) super.set(fieldName, value);
  }

  @Override
  public GoogleMapsAddressvalidationV1Geocode clone() {
    return (GoogleMapsAddressvalidationV1Geocode) super.clone();
  }

}
