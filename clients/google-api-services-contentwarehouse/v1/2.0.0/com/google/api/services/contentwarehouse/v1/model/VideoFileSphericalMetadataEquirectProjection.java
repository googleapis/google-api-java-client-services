/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Specifies usage of equirectangular projection. More specifically, these are the proportion of
 * projection cropped from each edge not covered by the video frame. For uncropped frame, all values
 * are 0. For v1 metadata, this contains CroppedArea information (CroppedAreaLeftPixels,
 * CroppedAreaTopPixels, CroppedAreaImageWidthPixels, CroppedAreaImageHeightPixels)
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class VideoFileSphericalMetadataEquirectProjection extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long projectionBoundsBottom;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long projectionBoundsLeft;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long projectionBoundsRight;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long projectionBoundsTop;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getProjectionBoundsBottom() {
    return projectionBoundsBottom;
  }

  /**
   * @param projectionBoundsBottom projectionBoundsBottom or {@code null} for none
   */
  public VideoFileSphericalMetadataEquirectProjection setProjectionBoundsBottom(java.lang.Long projectionBoundsBottom) {
    this.projectionBoundsBottom = projectionBoundsBottom;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getProjectionBoundsLeft() {
    return projectionBoundsLeft;
  }

  /**
   * @param projectionBoundsLeft projectionBoundsLeft or {@code null} for none
   */
  public VideoFileSphericalMetadataEquirectProjection setProjectionBoundsLeft(java.lang.Long projectionBoundsLeft) {
    this.projectionBoundsLeft = projectionBoundsLeft;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getProjectionBoundsRight() {
    return projectionBoundsRight;
  }

  /**
   * @param projectionBoundsRight projectionBoundsRight or {@code null} for none
   */
  public VideoFileSphericalMetadataEquirectProjection setProjectionBoundsRight(java.lang.Long projectionBoundsRight) {
    this.projectionBoundsRight = projectionBoundsRight;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getProjectionBoundsTop() {
    return projectionBoundsTop;
  }

  /**
   * @param projectionBoundsTop projectionBoundsTop or {@code null} for none
   */
  public VideoFileSphericalMetadataEquirectProjection setProjectionBoundsTop(java.lang.Long projectionBoundsTop) {
    this.projectionBoundsTop = projectionBoundsTop;
    return this;
  }

  @Override
  public VideoFileSphericalMetadataEquirectProjection set(String fieldName, Object value) {
    return (VideoFileSphericalMetadataEquirectProjection) super.set(fieldName, value);
  }

  @Override
  public VideoFileSphericalMetadataEquirectProjection clone() {
    return (VideoFileSphericalMetadataEquirectProjection) super.clone();
  }

}
