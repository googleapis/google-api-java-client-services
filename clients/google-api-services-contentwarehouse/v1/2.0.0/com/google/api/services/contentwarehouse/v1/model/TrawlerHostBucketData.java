/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * ============================ Next Tag: 22 ============================ Data about the scheduling
 * host bucket a URL was in (if the client wants to use this, e.g. for more intelligent scheduling,
 * etc).
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class TrawlerHostBucketData extends com.google.api.client.json.GenericJson {

  /**
   * How much existing traffic
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ClientTrafficFraction")
  private java.lang.Float clientTrafficFraction;

  /**
   * belong to the client How much weight the client
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("ClientWeightFraction")
  private java.lang.Float clientWeightFraction;

  /**
   * How many connections are actively used for downloading ?
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("CurrentActiveConnections")
  private java.lang.Integer currentActiveConnections;

  /**
   * Is this bucket currently full ?
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("IsFull")
  private java.lang.Boolean isFull;

  /**
   * How many ms ago we last scheduled a url
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("LastScheduleIntervalMs") @com.google.api.client.json.JsonString
  private java.lang.Long lastScheduleIntervalMs;

  /**
   * The current hostload value (# of connections) - if negative does not apply
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("MaxActiveConnections")
  private java.lang.Float maxActiveConnections;

  /**
   * The load the recent times (the actual hostload that we apply is MaxActiveConnections /
   * MediumTermLoad) - a hostload of 1.00 is normal, while over 1.0 is higher than normal load
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("MediumTermLoad")
  private java.lang.Float mediumTermLoad;

  /**
   * The min delay between requests (in secs) - if negative does not apply
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("MinInterRequestSecs")
  private java.lang.Float minInterRequestSecs;

  /**
   * If is full, when is becoming non-full (in ms)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("NonFullIntervalMs") @com.google.api.client.json.JsonString
  private java.lang.Long nonFullIntervalMs;

  /**
   * The following four fields attempt to make things simpler for clients to estimate available
   * capacity. They are not populated yet as of 2013/08/21. Even after they are populated, they may
   * change. So talk to trawler-dev@ before you use the fields. Total qps for this hostid
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("TotalCapacityQps")
  private java.lang.Float totalCapacityQps;

  /**
   * Currently used qps
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key("TotalUsedQps")
  private java.lang.Float totalUsedQps;

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<TrawlerHostBucketDataUrlList> urllist;

  /**
   * How much existing traffic
   * @return value or {@code null} for none
   */
  public java.lang.Float getClientTrafficFraction() {
    return clientTrafficFraction;
  }

  /**
   * How much existing traffic
   * @param clientTrafficFraction clientTrafficFraction or {@code null} for none
   */
  public TrawlerHostBucketData setClientTrafficFraction(java.lang.Float clientTrafficFraction) {
    this.clientTrafficFraction = clientTrafficFraction;
    return this;
  }

  /**
   * belong to the client How much weight the client
   * @return value or {@code null} for none
   */
  public java.lang.Float getClientWeightFraction() {
    return clientWeightFraction;
  }

  /**
   * belong to the client How much weight the client
   * @param clientWeightFraction clientWeightFraction or {@code null} for none
   */
  public TrawlerHostBucketData setClientWeightFraction(java.lang.Float clientWeightFraction) {
    this.clientWeightFraction = clientWeightFraction;
    return this;
  }

  /**
   * How many connections are actively used for downloading ?
   * @return value or {@code null} for none
   */
  public java.lang.Integer getCurrentActiveConnections() {
    return currentActiveConnections;
  }

  /**
   * How many connections are actively used for downloading ?
   * @param currentActiveConnections currentActiveConnections or {@code null} for none
   */
  public TrawlerHostBucketData setCurrentActiveConnections(java.lang.Integer currentActiveConnections) {
    this.currentActiveConnections = currentActiveConnections;
    return this;
  }

  /**
   * Is this bucket currently full ?
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsFull() {
    return isFull;
  }

  /**
   * Is this bucket currently full ?
   * @param isFull isFull or {@code null} for none
   */
  public TrawlerHostBucketData setIsFull(java.lang.Boolean isFull) {
    this.isFull = isFull;
    return this;
  }

  /**
   * How many ms ago we last scheduled a url
   * @return value or {@code null} for none
   */
  public java.lang.Long getLastScheduleIntervalMs() {
    return lastScheduleIntervalMs;
  }

  /**
   * How many ms ago we last scheduled a url
   * @param lastScheduleIntervalMs lastScheduleIntervalMs or {@code null} for none
   */
  public TrawlerHostBucketData setLastScheduleIntervalMs(java.lang.Long lastScheduleIntervalMs) {
    this.lastScheduleIntervalMs = lastScheduleIntervalMs;
    return this;
  }

  /**
   * The current hostload value (# of connections) - if negative does not apply
   * @return value or {@code null} for none
   */
  public java.lang.Float getMaxActiveConnections() {
    return maxActiveConnections;
  }

  /**
   * The current hostload value (# of connections) - if negative does not apply
   * @param maxActiveConnections maxActiveConnections or {@code null} for none
   */
  public TrawlerHostBucketData setMaxActiveConnections(java.lang.Float maxActiveConnections) {
    this.maxActiveConnections = maxActiveConnections;
    return this;
  }

  /**
   * The load the recent times (the actual hostload that we apply is MaxActiveConnections /
   * MediumTermLoad) - a hostload of 1.00 is normal, while over 1.0 is higher than normal load
   * @return value or {@code null} for none
   */
  public java.lang.Float getMediumTermLoad() {
    return mediumTermLoad;
  }

  /**
   * The load the recent times (the actual hostload that we apply is MaxActiveConnections /
   * MediumTermLoad) - a hostload of 1.00 is normal, while over 1.0 is higher than normal load
   * @param mediumTermLoad mediumTermLoad or {@code null} for none
   */
  public TrawlerHostBucketData setMediumTermLoad(java.lang.Float mediumTermLoad) {
    this.mediumTermLoad = mediumTermLoad;
    return this;
  }

  /**
   * The min delay between requests (in secs) - if negative does not apply
   * @return value or {@code null} for none
   */
  public java.lang.Float getMinInterRequestSecs() {
    return minInterRequestSecs;
  }

  /**
   * The min delay between requests (in secs) - if negative does not apply
   * @param minInterRequestSecs minInterRequestSecs or {@code null} for none
   */
  public TrawlerHostBucketData setMinInterRequestSecs(java.lang.Float minInterRequestSecs) {
    this.minInterRequestSecs = minInterRequestSecs;
    return this;
  }

  /**
   * If is full, when is becoming non-full (in ms)
   * @return value or {@code null} for none
   */
  public java.lang.Long getNonFullIntervalMs() {
    return nonFullIntervalMs;
  }

  /**
   * If is full, when is becoming non-full (in ms)
   * @param nonFullIntervalMs nonFullIntervalMs or {@code null} for none
   */
  public TrawlerHostBucketData setNonFullIntervalMs(java.lang.Long nonFullIntervalMs) {
    this.nonFullIntervalMs = nonFullIntervalMs;
    return this;
  }

  /**
   * The following four fields attempt to make things simpler for clients to estimate available
   * capacity. They are not populated yet as of 2013/08/21. Even after they are populated, they may
   * change. So talk to trawler-dev@ before you use the fields. Total qps for this hostid
   * @return value or {@code null} for none
   */
  public java.lang.Float getTotalCapacityQps() {
    return totalCapacityQps;
  }

  /**
   * The following four fields attempt to make things simpler for clients to estimate available
   * capacity. They are not populated yet as of 2013/08/21. Even after they are populated, they may
   * change. So talk to trawler-dev@ before you use the fields. Total qps for this hostid
   * @param totalCapacityQps totalCapacityQps or {@code null} for none
   */
  public TrawlerHostBucketData setTotalCapacityQps(java.lang.Float totalCapacityQps) {
    this.totalCapacityQps = totalCapacityQps;
    return this;
  }

  /**
   * Currently used qps
   * @return value or {@code null} for none
   */
  public java.lang.Float getTotalUsedQps() {
    return totalUsedQps;
  }

  /**
   * Currently used qps
   * @param totalUsedQps totalUsedQps or {@code null} for none
   */
  public TrawlerHostBucketData setTotalUsedQps(java.lang.Float totalUsedQps) {
    this.totalUsedQps = totalUsedQps;
    return this;
  }

  /**
   * @return value or {@code null} for none
   */
  public java.util.List<TrawlerHostBucketDataUrlList> getUrllist() {
    return urllist;
  }

  /**
   * @param urllist urllist or {@code null} for none
   */
  public TrawlerHostBucketData setUrllist(java.util.List<TrawlerHostBucketDataUrlList> urllist) {
    this.urllist = urllist;
    return this;
  }

  @Override
  public TrawlerHostBucketData set(String fieldName, Object value) {
    return (TrawlerHostBucketData) super.set(fieldName, value);
  }

  @Override
  public TrawlerHostBucketData clone() {
    return (TrawlerHostBucketData) super.clone();
  }

}
