/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.chromeuxreport.v1.model;

/**
 * HistoryRecord is a timeseries of Chrome UX Report data. It contains user experience statistics
 * for a single url pattern and a set of dimensions.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Chrome UX Report API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class HistoryRecord extends com.google.api.client.json.GenericJson {

  /**
   * The collection periods indicate when each of the data points reflected in the time series data
   * in metrics was collected. Note that all the time series share the same collection periods, and
   * it is enforced in the CrUX pipeline that every time series has the same number of data points.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<CollectionPeriod> collectionPeriods;

  static {
    // hack to force ProGuard to consider CollectionPeriod used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(CollectionPeriod.class);
  }

  /**
   * Key defines all of the unique querying parameters needed to look up a user experience history
   * record.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private HistoryKey key;

  /**
   * Metrics is the map of user experience time series data available for the record defined in the
   * key field. Metrics are keyed on the metric name. Allowed key values: ["first_contentful_paint",
   * "first_input_delay", "largest_contentful_paint", "cumulative_layout_shift",
   * "experimental_time_to_first_byte", "experimental_interaction_to_next_paint"]
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, MetricTimeseries> metrics;

  /**
   * The collection periods indicate when each of the data points reflected in the time series data
   * in metrics was collected. Note that all the time series share the same collection periods, and
   * it is enforced in the CrUX pipeline that every time series has the same number of data points.
   * @return value or {@code null} for none
   */
  public java.util.List<CollectionPeriod> getCollectionPeriods() {
    return collectionPeriods;
  }

  /**
   * The collection periods indicate when each of the data points reflected in the time series data
   * in metrics was collected. Note that all the time series share the same collection periods, and
   * it is enforced in the CrUX pipeline that every time series has the same number of data points.
   * @param collectionPeriods collectionPeriods or {@code null} for none
   */
  public HistoryRecord setCollectionPeriods(java.util.List<CollectionPeriod> collectionPeriods) {
    this.collectionPeriods = collectionPeriods;
    return this;
  }

  /**
   * Key defines all of the unique querying parameters needed to look up a user experience history
   * record.
   * @return value or {@code null} for none
   */
  public HistoryKey getKey() {
    return key;
  }

  /**
   * Key defines all of the unique querying parameters needed to look up a user experience history
   * record.
   * @param key key or {@code null} for none
   */
  public HistoryRecord setKey(HistoryKey key) {
    this.key = key;
    return this;
  }

  /**
   * Metrics is the map of user experience time series data available for the record defined in the
   * key field. Metrics are keyed on the metric name. Allowed key values: ["first_contentful_paint",
   * "first_input_delay", "largest_contentful_paint", "cumulative_layout_shift",
   * "experimental_time_to_first_byte", "experimental_interaction_to_next_paint"]
   * @return value or {@code null} for none
   */
  public java.util.Map<String, MetricTimeseries> getMetrics() {
    return metrics;
  }

  /**
   * Metrics is the map of user experience time series data available for the record defined in the
   * key field. Metrics are keyed on the metric name. Allowed key values: ["first_contentful_paint",
   * "first_input_delay", "largest_contentful_paint", "cumulative_layout_shift",
   * "experimental_time_to_first_byte", "experimental_interaction_to_next_paint"]
   * @param metrics metrics or {@code null} for none
   */
  public HistoryRecord setMetrics(java.util.Map<String, MetricTimeseries> metrics) {
    this.metrics = metrics;
    return this;
  }

  @Override
  public HistoryRecord set(String fieldName, Object value) {
    return (HistoryRecord) super.set(fieldName, value);
  }

  @Override
  public HistoryRecord clone() {
    return (HistoryRecord) super.clone();
  }

}
