/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.oracledatabase.v1.model;

/**
 * The properties of a DbSystem.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Oracle Database@Google Cloud API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DbSystemProperties extends com.google.api.client.json.GenericJson {

  /**
   * Required. The number of CPU cores to enable for the DbSystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer computeCount;

  /**
   * Optional. The compute model of the DbSystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String computeModel;

  /**
   * Optional. Data collection options for diagnostics.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DataCollectionOptionsDbSystem dataCollectionOptions;

  /**
   * Optional. The data storage size in GB that is currently available to DbSystems.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer dataStorageSizeGb;

  /**
   * Required. The database edition of the DbSystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String databaseEdition;

  /**
   * Optional. Details for creating a Database Home.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DbHome dbHome;

  /**
   * Optional. The options for the DbSystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private DbSystemOptions dbSystemOptions;

  /**
   * Optional. The host domain name of the DbSystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String domain;

  /**
   * Output only. The hostname of the DbSystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostname;

  /**
   * Optional. Prefix for DB System host names.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String hostnamePrefix;

  /**
   * Required. The initial data storage size in GB.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer initialDataStorageSizeGb;

  /**
   * Required. The license model of the DbSystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String licenseModel;

  /**
   * Output only. State of the DbSystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String lifecycleState;

  /**
   * Optional. The memory size in GB.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer memorySizeGb;

  /**
   * Optional. The number of nodes in the DbSystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer nodeCount;

  /**
   * Output only. OCID of the DbSystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String ocid;

  /**
   * Optional. The private IP address of the DbSystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String privateIp;

  /**
   * Optional. The reco/redo storage size in GB.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer recoStorageSizeGb;

  /**
   * Required. Shape of DB System.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String shape;

  /**
   * Required. SSH public keys to be stored with the DbSystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> sshPublicKeys;

  /**
   * Optional. Time zone of the DbSystem.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TimeZone timeZone;

  /**
   * Required. The number of CPU cores to enable for the DbSystem.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getComputeCount() {
    return computeCount;
  }

  /**
   * Required. The number of CPU cores to enable for the DbSystem.
   * @param computeCount computeCount or {@code null} for none
   */
  public DbSystemProperties setComputeCount(java.lang.Integer computeCount) {
    this.computeCount = computeCount;
    return this;
  }

  /**
   * Optional. The compute model of the DbSystem.
   * @return value or {@code null} for none
   */
  public java.lang.String getComputeModel() {
    return computeModel;
  }

  /**
   * Optional. The compute model of the DbSystem.
   * @param computeModel computeModel or {@code null} for none
   */
  public DbSystemProperties setComputeModel(java.lang.String computeModel) {
    this.computeModel = computeModel;
    return this;
  }

  /**
   * Optional. Data collection options for diagnostics.
   * @return value or {@code null} for none
   */
  public DataCollectionOptionsDbSystem getDataCollectionOptions() {
    return dataCollectionOptions;
  }

  /**
   * Optional. Data collection options for diagnostics.
   * @param dataCollectionOptions dataCollectionOptions or {@code null} for none
   */
  public DbSystemProperties setDataCollectionOptions(DataCollectionOptionsDbSystem dataCollectionOptions) {
    this.dataCollectionOptions = dataCollectionOptions;
    return this;
  }

  /**
   * Optional. The data storage size in GB that is currently available to DbSystems.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getDataStorageSizeGb() {
    return dataStorageSizeGb;
  }

  /**
   * Optional. The data storage size in GB that is currently available to DbSystems.
   * @param dataStorageSizeGb dataStorageSizeGb or {@code null} for none
   */
  public DbSystemProperties setDataStorageSizeGb(java.lang.Integer dataStorageSizeGb) {
    this.dataStorageSizeGb = dataStorageSizeGb;
    return this;
  }

  /**
   * Required. The database edition of the DbSystem.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatabaseEdition() {
    return databaseEdition;
  }

  /**
   * Required. The database edition of the DbSystem.
   * @param databaseEdition databaseEdition or {@code null} for none
   */
  public DbSystemProperties setDatabaseEdition(java.lang.String databaseEdition) {
    this.databaseEdition = databaseEdition;
    return this;
  }

  /**
   * Optional. Details for creating a Database Home.
   * @return value or {@code null} for none
   */
  public DbHome getDbHome() {
    return dbHome;
  }

  /**
   * Optional. Details for creating a Database Home.
   * @param dbHome dbHome or {@code null} for none
   */
  public DbSystemProperties setDbHome(DbHome dbHome) {
    this.dbHome = dbHome;
    return this;
  }

  /**
   * Optional. The options for the DbSystem.
   * @return value or {@code null} for none
   */
  public DbSystemOptions getDbSystemOptions() {
    return dbSystemOptions;
  }

  /**
   * Optional. The options for the DbSystem.
   * @param dbSystemOptions dbSystemOptions or {@code null} for none
   */
  public DbSystemProperties setDbSystemOptions(DbSystemOptions dbSystemOptions) {
    this.dbSystemOptions = dbSystemOptions;
    return this;
  }

  /**
   * Optional. The host domain name of the DbSystem.
   * @return value or {@code null} for none
   */
  public java.lang.String getDomain() {
    return domain;
  }

  /**
   * Optional. The host domain name of the DbSystem.
   * @param domain domain or {@code null} for none
   */
  public DbSystemProperties setDomain(java.lang.String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Output only. The hostname of the DbSystem.
   * @return value or {@code null} for none
   */
  public java.lang.String getHostname() {
    return hostname;
  }

  /**
   * Output only. The hostname of the DbSystem.
   * @param hostname hostname or {@code null} for none
   */
  public DbSystemProperties setHostname(java.lang.String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Optional. Prefix for DB System host names.
   * @return value or {@code null} for none
   */
  public java.lang.String getHostnamePrefix() {
    return hostnamePrefix;
  }

  /**
   * Optional. Prefix for DB System host names.
   * @param hostnamePrefix hostnamePrefix or {@code null} for none
   */
  public DbSystemProperties setHostnamePrefix(java.lang.String hostnamePrefix) {
    this.hostnamePrefix = hostnamePrefix;
    return this;
  }

  /**
   * Required. The initial data storage size in GB.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getInitialDataStorageSizeGb() {
    return initialDataStorageSizeGb;
  }

  /**
   * Required. The initial data storage size in GB.
   * @param initialDataStorageSizeGb initialDataStorageSizeGb or {@code null} for none
   */
  public DbSystemProperties setInitialDataStorageSizeGb(java.lang.Integer initialDataStorageSizeGb) {
    this.initialDataStorageSizeGb = initialDataStorageSizeGb;
    return this;
  }

  /**
   * Required. The license model of the DbSystem.
   * @return value or {@code null} for none
   */
  public java.lang.String getLicenseModel() {
    return licenseModel;
  }

  /**
   * Required. The license model of the DbSystem.
   * @param licenseModel licenseModel or {@code null} for none
   */
  public DbSystemProperties setLicenseModel(java.lang.String licenseModel) {
    this.licenseModel = licenseModel;
    return this;
  }

  /**
   * Output only. State of the DbSystem.
   * @return value or {@code null} for none
   */
  public java.lang.String getLifecycleState() {
    return lifecycleState;
  }

  /**
   * Output only. State of the DbSystem.
   * @param lifecycleState lifecycleState or {@code null} for none
   */
  public DbSystemProperties setLifecycleState(java.lang.String lifecycleState) {
    this.lifecycleState = lifecycleState;
    return this;
  }

  /**
   * Optional. The memory size in GB.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMemorySizeGb() {
    return memorySizeGb;
  }

  /**
   * Optional. The memory size in GB.
   * @param memorySizeGb memorySizeGb or {@code null} for none
   */
  public DbSystemProperties setMemorySizeGb(java.lang.Integer memorySizeGb) {
    this.memorySizeGb = memorySizeGb;
    return this;
  }

  /**
   * Optional. The number of nodes in the DbSystem.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getNodeCount() {
    return nodeCount;
  }

  /**
   * Optional. The number of nodes in the DbSystem.
   * @param nodeCount nodeCount or {@code null} for none
   */
  public DbSystemProperties setNodeCount(java.lang.Integer nodeCount) {
    this.nodeCount = nodeCount;
    return this;
  }

  /**
   * Output only. OCID of the DbSystem.
   * @return value or {@code null} for none
   */
  public java.lang.String getOcid() {
    return ocid;
  }

  /**
   * Output only. OCID of the DbSystem.
   * @param ocid ocid or {@code null} for none
   */
  public DbSystemProperties setOcid(java.lang.String ocid) {
    this.ocid = ocid;
    return this;
  }

  /**
   * Optional. The private IP address of the DbSystem.
   * @return value or {@code null} for none
   */
  public java.lang.String getPrivateIp() {
    return privateIp;
  }

  /**
   * Optional. The private IP address of the DbSystem.
   * @param privateIp privateIp or {@code null} for none
   */
  public DbSystemProperties setPrivateIp(java.lang.String privateIp) {
    this.privateIp = privateIp;
    return this;
  }

  /**
   * Optional. The reco/redo storage size in GB.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRecoStorageSizeGb() {
    return recoStorageSizeGb;
  }

  /**
   * Optional. The reco/redo storage size in GB.
   * @param recoStorageSizeGb recoStorageSizeGb or {@code null} for none
   */
  public DbSystemProperties setRecoStorageSizeGb(java.lang.Integer recoStorageSizeGb) {
    this.recoStorageSizeGb = recoStorageSizeGb;
    return this;
  }

  /**
   * Required. Shape of DB System.
   * @return value or {@code null} for none
   */
  public java.lang.String getShape() {
    return shape;
  }

  /**
   * Required. Shape of DB System.
   * @param shape shape or {@code null} for none
   */
  public DbSystemProperties setShape(java.lang.String shape) {
    this.shape = shape;
    return this;
  }

  /**
   * Required. SSH public keys to be stored with the DbSystem.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getSshPublicKeys() {
    return sshPublicKeys;
  }

  /**
   * Required. SSH public keys to be stored with the DbSystem.
   * @param sshPublicKeys sshPublicKeys or {@code null} for none
   */
  public DbSystemProperties setSshPublicKeys(java.util.List<java.lang.String> sshPublicKeys) {
    this.sshPublicKeys = sshPublicKeys;
    return this;
  }

  /**
   * Optional. Time zone of the DbSystem.
   * @return value or {@code null} for none
   */
  public TimeZone getTimeZone() {
    return timeZone;
  }

  /**
   * Optional. Time zone of the DbSystem.
   * @param timeZone timeZone or {@code null} for none
   */
  public DbSystemProperties setTimeZone(TimeZone timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  @Override
  public DbSystemProperties set(String fieldName, Object value) {
    return (DbSystemProperties) super.set(fieldName, value);
  }

  @Override
  public DbSystemProperties clone() {
    return (DbSystemProperties) super.clone();
  }

}
