/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * This protobuffer stores bad SSL certificate information for a canonical URL, and meant to be
 * included in DocJoins and push to serving time.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class IndexingBadSSLCertificate extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private TrawlerSSLCertificateInfo badSslCertificate;

  /**
   * The URL where the bad SSL certificate really comes from. Present iff it is different from the
   * source URL, i.e. a redirect target of the source URL).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String urlWithBadSslCertificate;

  /**
   * @return value or {@code null} for none
   */
  public TrawlerSSLCertificateInfo getBadSslCertificate() {
    return badSslCertificate;
  }

  /**
   * @param badSslCertificate badSslCertificate or {@code null} for none
   */
  public IndexingBadSSLCertificate setBadSslCertificate(TrawlerSSLCertificateInfo badSslCertificate) {
    this.badSslCertificate = badSslCertificate;
    return this;
  }

  /**
   * The URL where the bad SSL certificate really comes from. Present iff it is different from the
   * source URL, i.e. a redirect target of the source URL).
   * @see #decodeUrlWithBadSslCertificate()
   * @return value or {@code null} for none
   */
  public java.lang.String getUrlWithBadSslCertificate() {
    return urlWithBadSslCertificate;
  }

  /**
   * The URL where the bad SSL certificate really comes from. Present iff it is different from the
   * source URL, i.e. a redirect target of the source URL).
   * @see #getUrlWithBadSslCertificate()
   * @return Base64 decoded value or {@code null} for none
   *
   * @since 1.14
   */
  public byte[] decodeUrlWithBadSslCertificate() {
    return com.google.api.client.util.Base64.decodeBase64(urlWithBadSslCertificate);
  }

  /**
   * The URL where the bad SSL certificate really comes from. Present iff it is different from the
   * source URL, i.e. a redirect target of the source URL).
   * @see #encodeUrlWithBadSslCertificate()
   * @param urlWithBadSslCertificate urlWithBadSslCertificate or {@code null} for none
   */
  public IndexingBadSSLCertificate setUrlWithBadSslCertificate(java.lang.String urlWithBadSslCertificate) {
    this.urlWithBadSslCertificate = urlWithBadSslCertificate;
    return this;
  }

  /**
   * The URL where the bad SSL certificate really comes from. Present iff it is different from the
   * source URL, i.e. a redirect target of the source URL).
   * @see #setUrlWithBadSslCertificate()
   *
   * <p>
   * The value is encoded Base64 or {@code null} for none.
   * </p>
   *
   * @since 1.14
   */
  public IndexingBadSSLCertificate encodeUrlWithBadSslCertificate(byte[] urlWithBadSslCertificate) {
    this.urlWithBadSslCertificate = com.google.api.client.util.Base64.encodeBase64URLSafeString(urlWithBadSslCertificate);
    return this;
  }

  @Override
  public IndexingBadSSLCertificate set(String fieldName, Object value) {
    return (IndexingBadSSLCertificate) super.set(fieldName, value);
  }

  @Override
  public IndexingBadSSLCertificate clone() {
    return (IndexingBadSSLCertificate) super.clone();
  }

}
