/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.testing.model;

/**
 * Denotes whether Direct Access is supported, and by which client versions. DirectAccessService is
 * currently available as a preview to select developers. You can register today on behalf of you
 * and your team at https://developer.android.com/studio/preview/android-device-streaming
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Testing API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class DirectAccessVersionInfo extends com.google.api.client.json.GenericJson {

  /**
   * Whether direct access is supported at all. Clients are expected to filter down the device list
   * to only android models and versions which support Direct Access when that is the user intent.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean directAccessSupported;

  /**
   * Output only. Indicates client-device compatibility, where a device is known to work only with
   * certain workarounds implemented in the Android Studio client. Expected format
   * "major.minor.micro.patch", e.g. "5921.22.2211.8881706".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String minimumAndroidStudioVersion;

  /**
   * Whether direct access is supported at all. Clients are expected to filter down the device list
   * to only android models and versions which support Direct Access when that is the user intent.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getDirectAccessSupported() {
    return directAccessSupported;
  }

  /**
   * Whether direct access is supported at all. Clients are expected to filter down the device list
   * to only android models and versions which support Direct Access when that is the user intent.
   * @param directAccessSupported directAccessSupported or {@code null} for none
   */
  public DirectAccessVersionInfo setDirectAccessSupported(java.lang.Boolean directAccessSupported) {
    this.directAccessSupported = directAccessSupported;
    return this;
  }

  /**
   * Output only. Indicates client-device compatibility, where a device is known to work only with
   * certain workarounds implemented in the Android Studio client. Expected format
   * "major.minor.micro.patch", e.g. "5921.22.2211.8881706".
   * @return value or {@code null} for none
   */
  public java.lang.String getMinimumAndroidStudioVersion() {
    return minimumAndroidStudioVersion;
  }

  /**
   * Output only. Indicates client-device compatibility, where a device is known to work only with
   * certain workarounds implemented in the Android Studio client. Expected format
   * "major.minor.micro.patch", e.g. "5921.22.2211.8881706".
   * @param minimumAndroidStudioVersion minimumAndroidStudioVersion or {@code null} for none
   */
  public DirectAccessVersionInfo setMinimumAndroidStudioVersion(java.lang.String minimumAndroidStudioVersion) {
    this.minimumAndroidStudioVersion = minimumAndroidStudioVersion;
    return this;
  }

  @Override
  public DirectAccessVersionInfo set(String fieldName, Object value) {
    return (DirectAccessVersionInfo) super.set(fieldName, value);
  }

  @Override
  public DirectAccessVersionInfo clone() {
    return (DirectAccessVersionInfo) super.clone();
  }

}
