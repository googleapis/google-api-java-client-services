/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.firebaseml.v2beta.model;

/**
 * Configuration for the model's thinking features. "Thinking" is a process where the model breaks
 * down a complex task into smaller, manageable steps. This allows the model to reason about the
 * task, plan its approach, and execute the plan to generate a high-quality response.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Firebase ML API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class GoogleCloudAiplatformV1beta1GenerationConfigThinkingConfig extends com.google.api.client.json.GenericJson {

  /**
   * Optional. If true, the model will include its thoughts in the response. "Thoughts" are the
   * intermediate steps the model takes to arrive at the final response. They can provide insights
   * into the model's reasoning process and help with debugging. If this is true, thoughts are
   * returned only when available.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean includeThoughts;

  /**
   * Optional. The token budget for the model's thinking process. The model will make a best effort
   * to stay within this budget. This can be used to control the trade-off between response quality
   * and latency.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer thinkingBudget;

  /**
   * Optional. If true, the model will include its thoughts in the response. "Thoughts" are the
   * intermediate steps the model takes to arrive at the final response. They can provide insights
   * into the model's reasoning process and help with debugging. If this is true, thoughts are
   * returned only when available.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIncludeThoughts() {
    return includeThoughts;
  }

  /**
   * Optional. If true, the model will include its thoughts in the response. "Thoughts" are the
   * intermediate steps the model takes to arrive at the final response. They can provide insights
   * into the model's reasoning process and help with debugging. If this is true, thoughts are
   * returned only when available.
   * @param includeThoughts includeThoughts or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1GenerationConfigThinkingConfig setIncludeThoughts(java.lang.Boolean includeThoughts) {
    this.includeThoughts = includeThoughts;
    return this;
  }

  /**
   * Optional. The token budget for the model's thinking process. The model will make a best effort
   * to stay within this budget. This can be used to control the trade-off between response quality
   * and latency.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getThinkingBudget() {
    return thinkingBudget;
  }

  /**
   * Optional. The token budget for the model's thinking process. The model will make a best effort
   * to stay within this budget. This can be used to control the trade-off between response quality
   * and latency.
   * @param thinkingBudget thinkingBudget or {@code null} for none
   */
  public GoogleCloudAiplatformV1beta1GenerationConfigThinkingConfig setThinkingBudget(java.lang.Integer thinkingBudget) {
    this.thinkingBudget = thinkingBudget;
    return this;
  }

  @Override
  public GoogleCloudAiplatformV1beta1GenerationConfigThinkingConfig set(String fieldName, Object value) {
    return (GoogleCloudAiplatformV1beta1GenerationConfigThinkingConfig) super.set(fieldName, value);
  }

  @Override
  public GoogleCloudAiplatformV1beta1GenerationConfigThinkingConfig clone() {
    return (GoogleCloudAiplatformV1beta1GenerationConfigThinkingConfig) super.clone();
  }

}
