/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.civicinfo.model;

/**
 * Information about an Office held by one or more Officials.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Civic Information API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class Office extends com.google.api.client.json.GenericJson {

  /**
   * The OCD ID of the division with which this office is associated.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String divisionId;

  /**
   * The levels of government of which this office is part. There may be more than one in cases
   * where a jurisdiction effectively acts at two different levels of government; for example, the
   * mayor of the District of Columbia acts at "locality" level, but also effectively at both
   * "administrative-area-2" and "administrative-area-1".
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> levels;

  /**
   * The human-readable name of the office.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * List of indices in the officials array of people who presently hold this office.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Long> officialIndices;

  /**
   * The roles which this office fulfills. Roles are not meant to be exhaustive, or to exactly
   * specify the entire set of responsibilities of a given office, but are meant to be rough
   * categories that are useful for general selection from or sorting of a list of offices.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> roles;

  /**
   * A list of sources for this office. If multiple sources are listed, the data has been aggregated
   * from those sources.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Source> sources;

  /**
   * The OCD ID of the division with which this office is associated.
   * @return value or {@code null} for none
   */
  public java.lang.String getDivisionId() {
    return divisionId;
  }

  /**
   * The OCD ID of the division with which this office is associated.
   * @param divisionId divisionId or {@code null} for none
   */
  public Office setDivisionId(java.lang.String divisionId) {
    this.divisionId = divisionId;
    return this;
  }

  /**
   * The levels of government of which this office is part. There may be more than one in cases
   * where a jurisdiction effectively acts at two different levels of government; for example, the
   * mayor of the District of Columbia acts at "locality" level, but also effectively at both
   * "administrative-area-2" and "administrative-area-1".
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getLevels() {
    return levels;
  }

  /**
   * The levels of government of which this office is part. There may be more than one in cases
   * where a jurisdiction effectively acts at two different levels of government; for example, the
   * mayor of the District of Columbia acts at "locality" level, but also effectively at both
   * "administrative-area-2" and "administrative-area-1".
   * @param levels levels or {@code null} for none
   */
  public Office setLevels(java.util.List<java.lang.String> levels) {
    this.levels = levels;
    return this;
  }

  /**
   * The human-readable name of the office.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * The human-readable name of the office.
   * @param name name or {@code null} for none
   */
  public Office setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * List of indices in the officials array of people who presently hold this office.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Long> getOfficialIndices() {
    return officialIndices;
  }

  /**
   * List of indices in the officials array of people who presently hold this office.
   * @param officialIndices officialIndices or {@code null} for none
   */
  public Office setOfficialIndices(java.util.List<java.lang.Long> officialIndices) {
    this.officialIndices = officialIndices;
    return this;
  }

  /**
   * The roles which this office fulfills. Roles are not meant to be exhaustive, or to exactly
   * specify the entire set of responsibilities of a given office, but are meant to be rough
   * categories that are useful for general selection from or sorting of a list of offices.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getRoles() {
    return roles;
  }

  /**
   * The roles which this office fulfills. Roles are not meant to be exhaustive, or to exactly
   * specify the entire set of responsibilities of a given office, but are meant to be rough
   * categories that are useful for general selection from or sorting of a list of offices.
   * @param roles roles or {@code null} for none
   */
  public Office setRoles(java.util.List<java.lang.String> roles) {
    this.roles = roles;
    return this;
  }

  /**
   * A list of sources for this office. If multiple sources are listed, the data has been aggregated
   * from those sources.
   * @return value or {@code null} for none
   */
  public java.util.List<Source> getSources() {
    return sources;
  }

  /**
   * A list of sources for this office. If multiple sources are listed, the data has been aggregated
   * from those sources.
   * @param sources sources or {@code null} for none
   */
  public Office setSources(java.util.List<Source> sources) {
    this.sources = sources;
    return this;
  }

  @Override
  public Office set(String fieldName, Object value) {
    return (Office) super.set(fieldName, value);
  }

  @Override
  public Office clone() {
    return (Office) super.clone();
  }

}
