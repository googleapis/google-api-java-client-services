/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.analyticsdata.v1beta.model;

/**
 * A list of users in an audience export.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Google Analytics Data API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class QueryAudienceExportResponse extends com.google.api.client.json.GenericJson {

  /**
   * Configuration data about AudienceExport being queried. Returned to help interpret the audience
   * rows in this response. For example, the dimensions in this AudienceExport correspond to the
   * columns in the AudienceRows.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private AudienceExport audienceExport;

  /**
   * Rows for each user in an audience export. The number of rows in this response will be less than
   * or equal to request's page size.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<V1betaAudienceRow> audienceRows;

  /**
   * The total number of rows in the AudienceExport result. `rowCount` is independent of the number
   * of rows returned in the response, the `limit` request parameter, and the `offset` request
   * parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API
   * request, the response will contain `rowCount` of 175 but only 50 rows. To learn more about this
   * pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/report
   * ing/data/v1/basics#pagination).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer rowCount;

  /**
   * Configuration data about AudienceExport being queried. Returned to help interpret the audience
   * rows in this response. For example, the dimensions in this AudienceExport correspond to the
   * columns in the AudienceRows.
   * @return value or {@code null} for none
   */
  public AudienceExport getAudienceExport() {
    return audienceExport;
  }

  /**
   * Configuration data about AudienceExport being queried. Returned to help interpret the audience
   * rows in this response. For example, the dimensions in this AudienceExport correspond to the
   * columns in the AudienceRows.
   * @param audienceExport audienceExport or {@code null} for none
   */
  public QueryAudienceExportResponse setAudienceExport(AudienceExport audienceExport) {
    this.audienceExport = audienceExport;
    return this;
  }

  /**
   * Rows for each user in an audience export. The number of rows in this response will be less than
   * or equal to request's page size.
   * @return value or {@code null} for none
   */
  public java.util.List<V1betaAudienceRow> getAudienceRows() {
    return audienceRows;
  }

  /**
   * Rows for each user in an audience export. The number of rows in this response will be less than
   * or equal to request's page size.
   * @param audienceRows audienceRows or {@code null} for none
   */
  public QueryAudienceExportResponse setAudienceRows(java.util.List<V1betaAudienceRow> audienceRows) {
    this.audienceRows = audienceRows;
    return this;
  }

  /**
   * The total number of rows in the AudienceExport result. `rowCount` is independent of the number
   * of rows returned in the response, the `limit` request parameter, and the `offset` request
   * parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API
   * request, the response will contain `rowCount` of 175 but only 50 rows. To learn more about this
   * pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/report
   * ing/data/v1/basics#pagination).
   * @return value or {@code null} for none
   */
  public java.lang.Integer getRowCount() {
    return rowCount;
  }

  /**
   * The total number of rows in the AudienceExport result. `rowCount` is independent of the number
   * of rows returned in the response, the `limit` request parameter, and the `offset` request
   * parameter. For example if a query returns 175 rows and includes `limit` of 50 in the API
   * request, the response will contain `rowCount` of 175 but only 50 rows. To learn more about this
   * pagination parameter, see [Pagination](https://developers.google.com/analytics/devguides/report
   * ing/data/v1/basics#pagination).
   * @param rowCount rowCount or {@code null} for none
   */
  public QueryAudienceExportResponse setRowCount(java.lang.Integer rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  @Override
  public QueryAudienceExportResponse set(String fieldName, Object value) {
    return (QueryAudienceExportResponse) super.set(fieldName, value);
  }

  @Override
  public QueryAudienceExportResponse clone() {
    return (QueryAudienceExportResponse) super.clone();
  }

}
