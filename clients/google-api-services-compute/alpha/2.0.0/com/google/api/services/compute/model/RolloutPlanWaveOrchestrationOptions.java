/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.compute.model;

/**
 * Options to control the pace of orchestration of a wave. These options are required only if the
 * resource being rolled out follows the Orchestrated pattern.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Compute Engine API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class RolloutPlanWaveOrchestrationOptions extends com.google.api.client.json.GenericJson {

  /**
   * Optional. Delays, if any, to be added between batches of projects. We allow multiple Delays to
   * be specified, letting users set separate delays between batches of projects corresponding to
   * different locations and batches of projects corresponding to the same location.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RolloutPlanWaveOrchestrationOptionsDelay> delays;

  /**
   * Optional. Maximum number of locations to be orchestrated in parallel.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long maxConcurrentLocations;

  /**
   * Optional. Maximum number of resources to be orchestrated per location in parallel.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long maxConcurrentResourcesPerLocation;

  /**
   * Optional. Delays, if any, to be added between batches of projects. We allow multiple Delays to
   * be specified, letting users set separate delays between batches of projects corresponding to
   * different locations and batches of projects corresponding to the same location.
   * @return value or {@code null} for none
   */
  public java.util.List<RolloutPlanWaveOrchestrationOptionsDelay> getDelays() {
    return delays;
  }

  /**
   * Optional. Delays, if any, to be added between batches of projects. We allow multiple Delays to
   * be specified, letting users set separate delays between batches of projects corresponding to
   * different locations and batches of projects corresponding to the same location.
   * @param delays delays or {@code null} for none
   */
  public RolloutPlanWaveOrchestrationOptions setDelays(java.util.List<RolloutPlanWaveOrchestrationOptionsDelay> delays) {
    this.delays = delays;
    return this;
  }

  /**
   * Optional. Maximum number of locations to be orchestrated in parallel.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMaxConcurrentLocations() {
    return maxConcurrentLocations;
  }

  /**
   * Optional. Maximum number of locations to be orchestrated in parallel.
   * @param maxConcurrentLocations maxConcurrentLocations or {@code null} for none
   */
  public RolloutPlanWaveOrchestrationOptions setMaxConcurrentLocations(java.lang.Long maxConcurrentLocations) {
    this.maxConcurrentLocations = maxConcurrentLocations;
    return this;
  }

  /**
   * Optional. Maximum number of resources to be orchestrated per location in parallel.
   * @return value or {@code null} for none
   */
  public java.lang.Long getMaxConcurrentResourcesPerLocation() {
    return maxConcurrentResourcesPerLocation;
  }

  /**
   * Optional. Maximum number of resources to be orchestrated per location in parallel.
   * @param maxConcurrentResourcesPerLocation maxConcurrentResourcesPerLocation or {@code null} for none
   */
  public RolloutPlanWaveOrchestrationOptions setMaxConcurrentResourcesPerLocation(java.lang.Long maxConcurrentResourcesPerLocation) {
    this.maxConcurrentResourcesPerLocation = maxConcurrentResourcesPerLocation;
    return this;
  }

  @Override
  public RolloutPlanWaveOrchestrationOptions set(String fieldName, Object value) {
    return (RolloutPlanWaveOrchestrationOptions) super.set(fieldName, value);
  }

  @Override
  public RolloutPlanWaveOrchestrationOptions clone() {
    return (RolloutPlanWaveOrchestrationOptions) super.clone();
  }

}
