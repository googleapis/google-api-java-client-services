/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.remotebuildexecution.v2.model;

/**
 * A request message for Execution.Execute.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Remote Build Execution API. For a detailed
 * explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BuildBazelRemoteExecutionV2ExecuteRequest extends com.google.api.client.json.GenericJson {

  /**
   * The digest of the Action to execute.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BuildBazelRemoteExecutionV2Digest actionDigest;

  /**
   * An optional policy for execution of the action. The server will have a default policy if this
   * is not provided.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BuildBazelRemoteExecutionV2ExecutionPolicy executionPolicy;

  /**
   * An optional policy for the results of this execution in the remote cache. The server will have
   * a default policy if this is not provided. This may be applied to both the ActionResult and the
   * associated blobs.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BuildBazelRemoteExecutionV2ResultsCachePolicy resultsCachePolicy;

  /**
   * If true, the action will be executed even if its result is already present in the ActionCache.
   * The execution is still allowed to be merged with other in-flight executions of the same action,
   * however - semantically, the service MUST only guarantee that the results of an execution with
   * this field set were not visible before the corresponding execution request was sent. Note that
   * actions from execution requests setting this field set are still eligible to be entered into
   * the action cache upon completion, and services SHOULD overwrite any existing entries that may
   * exist. This allows skip_cache_lookup requests to be used as a mechanism for replacing action
   * cache entries that reference outputs no longer available or that are poisoned in any way. If
   * false, the result may be served from the action cache.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean skipCacheLookup;

  /**
   * The digest of the Action to execute.
   * @return value or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2Digest getActionDigest() {
    return actionDigest;
  }

  /**
   * The digest of the Action to execute.
   * @param actionDigest actionDigest or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ExecuteRequest setActionDigest(BuildBazelRemoteExecutionV2Digest actionDigest) {
    this.actionDigest = actionDigest;
    return this;
  }

  /**
   * An optional policy for execution of the action. The server will have a default policy if this
   * is not provided.
   * @return value or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ExecutionPolicy getExecutionPolicy() {
    return executionPolicy;
  }

  /**
   * An optional policy for execution of the action. The server will have a default policy if this
   * is not provided.
   * @param executionPolicy executionPolicy or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ExecuteRequest setExecutionPolicy(BuildBazelRemoteExecutionV2ExecutionPolicy executionPolicy) {
    this.executionPolicy = executionPolicy;
    return this;
  }

  /**
   * An optional policy for the results of this execution in the remote cache. The server will have
   * a default policy if this is not provided. This may be applied to both the ActionResult and the
   * associated blobs.
   * @return value or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ResultsCachePolicy getResultsCachePolicy() {
    return resultsCachePolicy;
  }

  /**
   * An optional policy for the results of this execution in the remote cache. The server will have
   * a default policy if this is not provided. This may be applied to both the ActionResult and the
   * associated blobs.
   * @param resultsCachePolicy resultsCachePolicy or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ExecuteRequest setResultsCachePolicy(BuildBazelRemoteExecutionV2ResultsCachePolicy resultsCachePolicy) {
    this.resultsCachePolicy = resultsCachePolicy;
    return this;
  }

  /**
   * If true, the action will be executed even if its result is already present in the ActionCache.
   * The execution is still allowed to be merged with other in-flight executions of the same action,
   * however - semantically, the service MUST only guarantee that the results of an execution with
   * this field set were not visible before the corresponding execution request was sent. Note that
   * actions from execution requests setting this field set are still eligible to be entered into
   * the action cache upon completion, and services SHOULD overwrite any existing entries that may
   * exist. This allows skip_cache_lookup requests to be used as a mechanism for replacing action
   * cache entries that reference outputs no longer available or that are poisoned in any way. If
   * false, the result may be served from the action cache.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSkipCacheLookup() {
    return skipCacheLookup;
  }

  /**
   * If true, the action will be executed even if its result is already present in the ActionCache.
   * The execution is still allowed to be merged with other in-flight executions of the same action,
   * however - semantically, the service MUST only guarantee that the results of an execution with
   * this field set were not visible before the corresponding execution request was sent. Note that
   * actions from execution requests setting this field set are still eligible to be entered into
   * the action cache upon completion, and services SHOULD overwrite any existing entries that may
   * exist. This allows skip_cache_lookup requests to be used as a mechanism for replacing action
   * cache entries that reference outputs no longer available or that are poisoned in any way. If
   * false, the result may be served from the action cache.
   * @param skipCacheLookup skipCacheLookup or {@code null} for none
   */
  public BuildBazelRemoteExecutionV2ExecuteRequest setSkipCacheLookup(java.lang.Boolean skipCacheLookup) {
    this.skipCacheLookup = skipCacheLookup;
    return this;
  }

  @Override
  public BuildBazelRemoteExecutionV2ExecuteRequest set(String fieldName, Object value) {
    return (BuildBazelRemoteExecutionV2ExecuteRequest) super.set(fieldName, value);
  }

  @Override
  public BuildBazelRemoteExecutionV2ExecuteRequest clone() {
    return (BuildBazelRemoteExecutionV2ExecuteRequest) super.clone();
  }

}
