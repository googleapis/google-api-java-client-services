/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.cloudsearch.v1.model;

/**
 * A meeting space is a persistent object that is the context for one or more calls. The meeting
 * space is what makes users find each other when they want to meet and to find shared resources.
 * With two exceptions, all the fields in the meeting space resource are visible publicly to any
 * client, even anonymous users. The exceptions are that * The call_info field is only visible to
 * clients that have a device (as indicated by the meeting token) in the JOINED or HIDDEN state. *
 * The meeting_alias field will only be set for users who are in the same domain as the meeting
 * space. The meeting space resource (outside call_info) should only contain information necessary
 * to join a call in the meeting space, and not any other metadata about the meeting space, such as
 * what organization it belongs to or things related to ongoing calls.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Search API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MeetingSpace extends com.google.api.client.json.GenericJson {

  /**
   * Which number classes are accepted by this meeting at the moment? When there is no ongoing
   * conference, this field may change independent of the version number of the MeetingSpace. When a
   * conference starts, this field will be locked to the value at that time, and then will be
   * unlocked again at the end of the conference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> acceptedNumberClass;

  /**
   * Broadcast access information for this meeting space.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private BroadcastAccess broadcastAccess;

  /**
   * Information relevant to an ongoing conference. This field will be set in responses if the
   * client requesting the meeting space has a device in one of the JOINED, HIDDEN, or
   * MISSING_PREREQUISITES states. The field will also be set without a created device if the client
   * requesting the meeting space is eligible to directly create a device in the JOINED state
   * without knocking, eg a same-domain joiner. Can also only be updated by clients with a device in
   * the JOINED state.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private CallInfo callInfo;

  /**
   * The interop gateway access information for the meeting space. A gateway access can be used when
   * joining conferences from non-Google equipment through an interop gateway.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private GatewayAccess gatewayAccess;

  /**
   * The SIP based access methods that can be used to join the conference.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<GatewaySipAccess> gatewaySipAccess;

  static {
    // hack to force ProGuard to consider GatewaySipAccess used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(GatewaySipAccess.class);
  }

  /**
   * An optional alias for the meeting space. The alias can in some cases be resolved to the meeting
   * space, similar to the meeting code. The limitation is that the user needs to be in the same
   * meeting domain as the meeting space. See go/thor-backend/meeting-alias for more details.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String meetingAlias;

  /**
   * A meeting code is a globally unique code which points to a meeting space. Note: Meeting codes
   * may be regenerated, which will cause old meeting codes to become invalid.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String meetingCode;

  /**
   * A unique server-generated ID for the meeting space. This is the resource name of the meeting
   * space resource and has the form `spaces/`, where is a sequence of characters in the [base64url
   * set](https://tools.ietf.org/html/rfc4648#section-5), without any `=` characters.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String meetingSpaceId;

  /**
   * A URL to identify and access the meeting space. Output only.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String meetingUrl;

  /**
   * Output only. A URL that clients (e.g. Calendar) can use to show the web page with all join
   * methods available for this meeting space. This link is also used in iOS universal links and
   * Android intents, used for opening the "More ways to join" view in the Thor mobile apps.
   * Example: https://tel.meet/mee-ting-cod?pin=1234567891011 Here, "pin" is the universal phone
   * PIN. We include it explicitly to better support the offline case on the mobile. This is set
   * when the meeting space has either a universal PIN or an interop PIN and clients who can show a
   * "more ways to join" button should show it whenever this field is set.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String moreJoinUrl;

  /**
   * All regional phone access methods for this meeting space. Can be empty.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<PhoneAccess> phoneAccess;

  /**
   * Settings of the meeting space.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Settings settings;

  /**
   * A universal phone access method for this meeting space. Can be unset.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private UniversalPhoneAccess universalPhoneAccess;

  /**
   * Which number classes are accepted by this meeting at the moment? When there is no ongoing
   * conference, this field may change independent of the version number of the MeetingSpace. When a
   * conference starts, this field will be locked to the value at that time, and then will be
   * unlocked again at the end of the conference.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAcceptedNumberClass() {
    return acceptedNumberClass;
  }

  /**
   * Which number classes are accepted by this meeting at the moment? When there is no ongoing
   * conference, this field may change independent of the version number of the MeetingSpace. When a
   * conference starts, this field will be locked to the value at that time, and then will be
   * unlocked again at the end of the conference.
   * @param acceptedNumberClass acceptedNumberClass or {@code null} for none
   */
  public MeetingSpace setAcceptedNumberClass(java.util.List<java.lang.String> acceptedNumberClass) {
    this.acceptedNumberClass = acceptedNumberClass;
    return this;
  }

  /**
   * Broadcast access information for this meeting space.
   * @return value or {@code null} for none
   */
  public BroadcastAccess getBroadcastAccess() {
    return broadcastAccess;
  }

  /**
   * Broadcast access information for this meeting space.
   * @param broadcastAccess broadcastAccess or {@code null} for none
   */
  public MeetingSpace setBroadcastAccess(BroadcastAccess broadcastAccess) {
    this.broadcastAccess = broadcastAccess;
    return this;
  }

  /**
   * Information relevant to an ongoing conference. This field will be set in responses if the
   * client requesting the meeting space has a device in one of the JOINED, HIDDEN, or
   * MISSING_PREREQUISITES states. The field will also be set without a created device if the client
   * requesting the meeting space is eligible to directly create a device in the JOINED state
   * without knocking, eg a same-domain joiner. Can also only be updated by clients with a device in
   * the JOINED state.
   * @return value or {@code null} for none
   */
  public CallInfo getCallInfo() {
    return callInfo;
  }

  /**
   * Information relevant to an ongoing conference. This field will be set in responses if the
   * client requesting the meeting space has a device in one of the JOINED, HIDDEN, or
   * MISSING_PREREQUISITES states. The field will also be set without a created device if the client
   * requesting the meeting space is eligible to directly create a device in the JOINED state
   * without knocking, eg a same-domain joiner. Can also only be updated by clients with a device in
   * the JOINED state.
   * @param callInfo callInfo or {@code null} for none
   */
  public MeetingSpace setCallInfo(CallInfo callInfo) {
    this.callInfo = callInfo;
    return this;
  }

  /**
   * The interop gateway access information for the meeting space. A gateway access can be used when
   * joining conferences from non-Google equipment through an interop gateway.
   * @return value or {@code null} for none
   */
  public GatewayAccess getGatewayAccess() {
    return gatewayAccess;
  }

  /**
   * The interop gateway access information for the meeting space. A gateway access can be used when
   * joining conferences from non-Google equipment through an interop gateway.
   * @param gatewayAccess gatewayAccess or {@code null} for none
   */
  public MeetingSpace setGatewayAccess(GatewayAccess gatewayAccess) {
    this.gatewayAccess = gatewayAccess;
    return this;
  }

  /**
   * The SIP based access methods that can be used to join the conference.
   * @return value or {@code null} for none
   */
  public java.util.List<GatewaySipAccess> getGatewaySipAccess() {
    return gatewaySipAccess;
  }

  /**
   * The SIP based access methods that can be used to join the conference.
   * @param gatewaySipAccess gatewaySipAccess or {@code null} for none
   */
  public MeetingSpace setGatewaySipAccess(java.util.List<GatewaySipAccess> gatewaySipAccess) {
    this.gatewaySipAccess = gatewaySipAccess;
    return this;
  }

  /**
   * An optional alias for the meeting space. The alias can in some cases be resolved to the meeting
   * space, similar to the meeting code. The limitation is that the user needs to be in the same
   * meeting domain as the meeting space. See go/thor-backend/meeting-alias for more details.
   * @return value or {@code null} for none
   */
  public java.lang.String getMeetingAlias() {
    return meetingAlias;
  }

  /**
   * An optional alias for the meeting space. The alias can in some cases be resolved to the meeting
   * space, similar to the meeting code. The limitation is that the user needs to be in the same
   * meeting domain as the meeting space. See go/thor-backend/meeting-alias for more details.
   * @param meetingAlias meetingAlias or {@code null} for none
   */
  public MeetingSpace setMeetingAlias(java.lang.String meetingAlias) {
    this.meetingAlias = meetingAlias;
    return this;
  }

  /**
   * A meeting code is a globally unique code which points to a meeting space. Note: Meeting codes
   * may be regenerated, which will cause old meeting codes to become invalid.
   * @return value or {@code null} for none
   */
  public java.lang.String getMeetingCode() {
    return meetingCode;
  }

  /**
   * A meeting code is a globally unique code which points to a meeting space. Note: Meeting codes
   * may be regenerated, which will cause old meeting codes to become invalid.
   * @param meetingCode meetingCode or {@code null} for none
   */
  public MeetingSpace setMeetingCode(java.lang.String meetingCode) {
    this.meetingCode = meetingCode;
    return this;
  }

  /**
   * A unique server-generated ID for the meeting space. This is the resource name of the meeting
   * space resource and has the form `spaces/`, where is a sequence of characters in the [base64url
   * set](https://tools.ietf.org/html/rfc4648#section-5), without any `=` characters.
   * @return value or {@code null} for none
   */
  public java.lang.String getMeetingSpaceId() {
    return meetingSpaceId;
  }

  /**
   * A unique server-generated ID for the meeting space. This is the resource name of the meeting
   * space resource and has the form `spaces/`, where is a sequence of characters in the [base64url
   * set](https://tools.ietf.org/html/rfc4648#section-5), without any `=` characters.
   * @param meetingSpaceId meetingSpaceId or {@code null} for none
   */
  public MeetingSpace setMeetingSpaceId(java.lang.String meetingSpaceId) {
    this.meetingSpaceId = meetingSpaceId;
    return this;
  }

  /**
   * A URL to identify and access the meeting space. Output only.
   * @return value or {@code null} for none
   */
  public java.lang.String getMeetingUrl() {
    return meetingUrl;
  }

  /**
   * A URL to identify and access the meeting space. Output only.
   * @param meetingUrl meetingUrl or {@code null} for none
   */
  public MeetingSpace setMeetingUrl(java.lang.String meetingUrl) {
    this.meetingUrl = meetingUrl;
    return this;
  }

  /**
   * Output only. A URL that clients (e.g. Calendar) can use to show the web page with all join
   * methods available for this meeting space. This link is also used in iOS universal links and
   * Android intents, used for opening the "More ways to join" view in the Thor mobile apps.
   * Example: https://tel.meet/mee-ting-cod?pin=1234567891011 Here, "pin" is the universal phone
   * PIN. We include it explicitly to better support the offline case on the mobile. This is set
   * when the meeting space has either a universal PIN or an interop PIN and clients who can show a
   * "more ways to join" button should show it whenever this field is set.
   * @return value or {@code null} for none
   */
  public java.lang.String getMoreJoinUrl() {
    return moreJoinUrl;
  }

  /**
   * Output only. A URL that clients (e.g. Calendar) can use to show the web page with all join
   * methods available for this meeting space. This link is also used in iOS universal links and
   * Android intents, used for opening the "More ways to join" view in the Thor mobile apps.
   * Example: https://tel.meet/mee-ting-cod?pin=1234567891011 Here, "pin" is the universal phone
   * PIN. We include it explicitly to better support the offline case on the mobile. This is set
   * when the meeting space has either a universal PIN or an interop PIN and clients who can show a
   * "more ways to join" button should show it whenever this field is set.
   * @param moreJoinUrl moreJoinUrl or {@code null} for none
   */
  public MeetingSpace setMoreJoinUrl(java.lang.String moreJoinUrl) {
    this.moreJoinUrl = moreJoinUrl;
    return this;
  }

  /**
   * All regional phone access methods for this meeting space. Can be empty.
   * @return value or {@code null} for none
   */
  public java.util.List<PhoneAccess> getPhoneAccess() {
    return phoneAccess;
  }

  /**
   * All regional phone access methods for this meeting space. Can be empty.
   * @param phoneAccess phoneAccess or {@code null} for none
   */
  public MeetingSpace setPhoneAccess(java.util.List<PhoneAccess> phoneAccess) {
    this.phoneAccess = phoneAccess;
    return this;
  }

  /**
   * Settings of the meeting space.
   * @return value or {@code null} for none
   */
  public Settings getSettings() {
    return settings;
  }

  /**
   * Settings of the meeting space.
   * @param settings settings or {@code null} for none
   */
  public MeetingSpace setSettings(Settings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * A universal phone access method for this meeting space. Can be unset.
   * @return value or {@code null} for none
   */
  public UniversalPhoneAccess getUniversalPhoneAccess() {
    return universalPhoneAccess;
  }

  /**
   * A universal phone access method for this meeting space. Can be unset.
   * @param universalPhoneAccess universalPhoneAccess or {@code null} for none
   */
  public MeetingSpace setUniversalPhoneAccess(UniversalPhoneAccess universalPhoneAccess) {
    this.universalPhoneAccess = universalPhoneAccess;
    return this;
  }

  @Override
  public MeetingSpace set(String fieldName, Object value) {
    return (MeetingSpace) super.set(fieldName, value);
  }

  @Override
  public MeetingSpace clone() {
    return (MeetingSpace) super.clone();
  }

}
