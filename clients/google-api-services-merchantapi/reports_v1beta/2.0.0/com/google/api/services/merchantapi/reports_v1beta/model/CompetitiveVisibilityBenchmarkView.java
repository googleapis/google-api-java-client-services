/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.merchantapi.reports_v1beta.model;

/**
 * Fields available for query in `competitive_visibility_benchmark_view` table. [Competitive
 * visibility](https://support.google.com/merchants/answer/11366442) report with the category
 * benchmark. Values are only set for fields requested explicitly in the request's search query.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Merchant API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class CompetitiveVisibilityBenchmarkView extends com.google.api.client.json.GenericJson {

  /**
   * Change in visibility based on impressions with respect to the start of the selected time range
   * (or first day with non-zero impressions) for a combined set of merchants with highest
   * visibility approximating the market. Cannot be filtered on in the 'WHERE' clause.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double categoryBenchmarkVisibilityTrend;

  /**
   * Date of this row. Required in the `SELECT` clause. A condition on `date` is required in the
   * `WHERE` clause.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private Date date;

  /**
   * Google product category ID to calculate the report for, represented in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436). Required in the `SELECT`
   * clause. A condition on `report_category_id` is required in the `WHERE` clause.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long reportCategoryId;

  /**
   * Country where impressions appeared. Required in the `SELECT` clause. A condition on
   * `report_country_code` is required in the `WHERE` clause.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String reportCountryCode;

  /**
   * Traffic source of impressions. Required in the `SELECT` clause.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String trafficSource;

  /**
   * Change in visibility based on impressions for your domain with respect to the start of the
   * selected time range (or first day with non-zero impressions). Cannot be filtered on in the
   * 'WHERE' clause.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double yourDomainVisibilityTrend;

  /**
   * Change in visibility based on impressions with respect to the start of the selected time range
   * (or first day with non-zero impressions) for a combined set of merchants with highest
   * visibility approximating the market. Cannot be filtered on in the 'WHERE' clause.
   * @return value or {@code null} for none
   */
  public java.lang.Double getCategoryBenchmarkVisibilityTrend() {
    return categoryBenchmarkVisibilityTrend;
  }

  /**
   * Change in visibility based on impressions with respect to the start of the selected time range
   * (or first day with non-zero impressions) for a combined set of merchants with highest
   * visibility approximating the market. Cannot be filtered on in the 'WHERE' clause.
   * @param categoryBenchmarkVisibilityTrend categoryBenchmarkVisibilityTrend or {@code null} for none
   */
  public CompetitiveVisibilityBenchmarkView setCategoryBenchmarkVisibilityTrend(java.lang.Double categoryBenchmarkVisibilityTrend) {
    this.categoryBenchmarkVisibilityTrend = categoryBenchmarkVisibilityTrend;
    return this;
  }

  /**
   * Date of this row. Required in the `SELECT` clause. A condition on `date` is required in the
   * `WHERE` clause.
   * @return value or {@code null} for none
   */
  public Date getDate() {
    return date;
  }

  /**
   * Date of this row. Required in the `SELECT` clause. A condition on `date` is required in the
   * `WHERE` clause.
   * @param date date or {@code null} for none
   */
  public CompetitiveVisibilityBenchmarkView setDate(Date date) {
    this.date = date;
    return this;
  }

  /**
   * Google product category ID to calculate the report for, represented in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436). Required in the `SELECT`
   * clause. A condition on `report_category_id` is required in the `WHERE` clause.
   * @return value or {@code null} for none
   */
  public java.lang.Long getReportCategoryId() {
    return reportCategoryId;
  }

  /**
   * Google product category ID to calculate the report for, represented in [Google's product
   * taxonomy](https://support.google.com/merchants/answer/6324436). Required in the `SELECT`
   * clause. A condition on `report_category_id` is required in the `WHERE` clause.
   * @param reportCategoryId reportCategoryId or {@code null} for none
   */
  public CompetitiveVisibilityBenchmarkView setReportCategoryId(java.lang.Long reportCategoryId) {
    this.reportCategoryId = reportCategoryId;
    return this;
  }

  /**
   * Country where impressions appeared. Required in the `SELECT` clause. A condition on
   * `report_country_code` is required in the `WHERE` clause.
   * @return value or {@code null} for none
   */
  public java.lang.String getReportCountryCode() {
    return reportCountryCode;
  }

  /**
   * Country where impressions appeared. Required in the `SELECT` clause. A condition on
   * `report_country_code` is required in the `WHERE` clause.
   * @param reportCountryCode reportCountryCode or {@code null} for none
   */
  public CompetitiveVisibilityBenchmarkView setReportCountryCode(java.lang.String reportCountryCode) {
    this.reportCountryCode = reportCountryCode;
    return this;
  }

  /**
   * Traffic source of impressions. Required in the `SELECT` clause.
   * @return value or {@code null} for none
   */
  public java.lang.String getTrafficSource() {
    return trafficSource;
  }

  /**
   * Traffic source of impressions. Required in the `SELECT` clause.
   * @param trafficSource trafficSource or {@code null} for none
   */
  public CompetitiveVisibilityBenchmarkView setTrafficSource(java.lang.String trafficSource) {
    this.trafficSource = trafficSource;
    return this;
  }

  /**
   * Change in visibility based on impressions for your domain with respect to the start of the
   * selected time range (or first day with non-zero impressions). Cannot be filtered on in the
   * 'WHERE' clause.
   * @return value or {@code null} for none
   */
  public java.lang.Double getYourDomainVisibilityTrend() {
    return yourDomainVisibilityTrend;
  }

  /**
   * Change in visibility based on impressions for your domain with respect to the start of the
   * selected time range (or first day with non-zero impressions). Cannot be filtered on in the
   * 'WHERE' clause.
   * @param yourDomainVisibilityTrend yourDomainVisibilityTrend or {@code null} for none
   */
  public CompetitiveVisibilityBenchmarkView setYourDomainVisibilityTrend(java.lang.Double yourDomainVisibilityTrend) {
    this.yourDomainVisibilityTrend = yourDomainVisibilityTrend;
    return this;
  }

  @Override
  public CompetitiveVisibilityBenchmarkView set(String fieldName, Object value) {
    return (CompetitiveVisibilityBenchmarkView) super.set(fieldName, value);
  }

  @Override
  public CompetitiveVisibilityBenchmarkView clone() {
    return (CompetitiveVisibilityBenchmarkView) super.clone();
  }

}
