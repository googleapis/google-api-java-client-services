/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * PerDocData for fringe-query-prior (built into the shards for eventual consumption at Fringe
 * classification time). Not stored in DocJoins. NEXT ID: 12
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Document AI Warehouse API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class QualityFringeFringeQueryPriorPerDocData extends com.google.api.client.json.GenericJson {

  /**
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long encodedCalibratedFringeSitePriorScore;

  /**
   * An encoding of the Chard XLQ-hoax prediction in [0,1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long encodedChardXlqHoaxPrediction;

  /**
   * An encoding of the Chard XLQ-YMYL prediction in [0,1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long encodedChardXlqYmylPrediction;

  /**
   * An estimate of the vulnerability of this doc to show fringe content, based on the context
   * around the document. Can be interpreted as a 'safe' QScore threshold to use (see go/doc-fringe-
   * vulnerability for more info). Encoded for compactness and to restrict visibility. Please
   * contact fringe-ranking@ to get access to quality_fringe::DocumentFringeVulnerabilityEncoding to
   * decode this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long encodedDocumentFringeVulnerability;

  /**
   * Highest entity prior seen for document's Headline and SingleTopic entities (see go/topicality-
   * score for definitions of entity topicalities). Represents probability that a query is fringe,
   * given that the entity is in the result set with topicality >= Headline. Scores scaled to
   * integers between 0 and 1000 for compactness. Scores must be interpreted through
   * FringeQueryPriorEncoding::Decode API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long encodedEntityPriorScore;

  /**
   * Probability that a query is fringe, given this document is in the result set. Scores scaled to
   * integers between 0 and 1000 for compactness. Scores must be interpreted through
   * FringeQueryPriorEncoding::Decode API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long encodedFringePriorScore;

  /**
   * Probability that a query is fringe, given this document's site is in the result set. Scores
   * scaled to integers between 0 and 1000 for compactness. Scores must be interpreted through
   * FringeQueryPriorEncoding::Decode API.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long encodedFringeSitePriorScore;

  /**
   * Probability that a query is fringe, given this document's site is in the result set. Does not
   * use signals with a dependency on the QueryFringeScore of a document. Scores scaled to integers
   * between 0 and 1000 for compactness. Scores must be interpreted through
   * FringeQueryPriorEncoding::Decode API. Will NOT be present if the
   * fringe_site_prior_score_for_qfs_training is not significantly different from the
   * site_prior_score.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long encodedFringeSitePriorScoreForQfsTraining;

  /**
   * A combined encoding of the pXLQ score in [0,1] and the confidence with which that score should
   * be interpreted in [0,1].
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long encodedPredictedXlqScoreAndConfidence;

  /**
   * A score in [0, 1] representing the similarity of this doc to known fringe-vulnerable 'seeds'.
   * See go/fringe-proximity for more information. Encoded for compactness and to restrict
   * visibility.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Long encodedProximityScore;

  /**
   * Indices on the repository_webref::WebrefEntities::entity field of entities that represent a
   * person or a group of people (aka sensitive entities).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.Integer> sensitiveEntitiesIndices;

  /**
   * @return value or {@code null} for none
   */
  public java.lang.Long getEncodedCalibratedFringeSitePriorScore() {
    return encodedCalibratedFringeSitePriorScore;
  }

  /**
   * @param encodedCalibratedFringeSitePriorScore encodedCalibratedFringeSitePriorScore or {@code null} for none
   */
  public QualityFringeFringeQueryPriorPerDocData setEncodedCalibratedFringeSitePriorScore(java.lang.Long encodedCalibratedFringeSitePriorScore) {
    this.encodedCalibratedFringeSitePriorScore = encodedCalibratedFringeSitePriorScore;
    return this;
  }

  /**
   * An encoding of the Chard XLQ-hoax prediction in [0,1].
   * @return value or {@code null} for none
   */
  public java.lang.Long getEncodedChardXlqHoaxPrediction() {
    return encodedChardXlqHoaxPrediction;
  }

  /**
   * An encoding of the Chard XLQ-hoax prediction in [0,1].
   * @param encodedChardXlqHoaxPrediction encodedChardXlqHoaxPrediction or {@code null} for none
   */
  public QualityFringeFringeQueryPriorPerDocData setEncodedChardXlqHoaxPrediction(java.lang.Long encodedChardXlqHoaxPrediction) {
    this.encodedChardXlqHoaxPrediction = encodedChardXlqHoaxPrediction;
    return this;
  }

  /**
   * An encoding of the Chard XLQ-YMYL prediction in [0,1].
   * @return value or {@code null} for none
   */
  public java.lang.Long getEncodedChardXlqYmylPrediction() {
    return encodedChardXlqYmylPrediction;
  }

  /**
   * An encoding of the Chard XLQ-YMYL prediction in [0,1].
   * @param encodedChardXlqYmylPrediction encodedChardXlqYmylPrediction or {@code null} for none
   */
  public QualityFringeFringeQueryPriorPerDocData setEncodedChardXlqYmylPrediction(java.lang.Long encodedChardXlqYmylPrediction) {
    this.encodedChardXlqYmylPrediction = encodedChardXlqYmylPrediction;
    return this;
  }

  /**
   * An estimate of the vulnerability of this doc to show fringe content, based on the context
   * around the document. Can be interpreted as a 'safe' QScore threshold to use (see go/doc-fringe-
   * vulnerability for more info). Encoded for compactness and to restrict visibility. Please
   * contact fringe-ranking@ to get access to quality_fringe::DocumentFringeVulnerabilityEncoding to
   * decode this field.
   * @return value or {@code null} for none
   */
  public java.lang.Long getEncodedDocumentFringeVulnerability() {
    return encodedDocumentFringeVulnerability;
  }

  /**
   * An estimate of the vulnerability of this doc to show fringe content, based on the context
   * around the document. Can be interpreted as a 'safe' QScore threshold to use (see go/doc-fringe-
   * vulnerability for more info). Encoded for compactness and to restrict visibility. Please
   * contact fringe-ranking@ to get access to quality_fringe::DocumentFringeVulnerabilityEncoding to
   * decode this field.
   * @param encodedDocumentFringeVulnerability encodedDocumentFringeVulnerability or {@code null} for none
   */
  public QualityFringeFringeQueryPriorPerDocData setEncodedDocumentFringeVulnerability(java.lang.Long encodedDocumentFringeVulnerability) {
    this.encodedDocumentFringeVulnerability = encodedDocumentFringeVulnerability;
    return this;
  }

  /**
   * Highest entity prior seen for document's Headline and SingleTopic entities (see go/topicality-
   * score for definitions of entity topicalities). Represents probability that a query is fringe,
   * given that the entity is in the result set with topicality >= Headline. Scores scaled to
   * integers between 0 and 1000 for compactness. Scores must be interpreted through
   * FringeQueryPriorEncoding::Decode API.
   * @return value or {@code null} for none
   */
  public java.lang.Long getEncodedEntityPriorScore() {
    return encodedEntityPriorScore;
  }

  /**
   * Highest entity prior seen for document's Headline and SingleTopic entities (see go/topicality-
   * score for definitions of entity topicalities). Represents probability that a query is fringe,
   * given that the entity is in the result set with topicality >= Headline. Scores scaled to
   * integers between 0 and 1000 for compactness. Scores must be interpreted through
   * FringeQueryPriorEncoding::Decode API.
   * @param encodedEntityPriorScore encodedEntityPriorScore or {@code null} for none
   */
  public QualityFringeFringeQueryPriorPerDocData setEncodedEntityPriorScore(java.lang.Long encodedEntityPriorScore) {
    this.encodedEntityPriorScore = encodedEntityPriorScore;
    return this;
  }

  /**
   * Probability that a query is fringe, given this document is in the result set. Scores scaled to
   * integers between 0 and 1000 for compactness. Scores must be interpreted through
   * FringeQueryPriorEncoding::Decode API.
   * @return value or {@code null} for none
   */
  public java.lang.Long getEncodedFringePriorScore() {
    return encodedFringePriorScore;
  }

  /**
   * Probability that a query is fringe, given this document is in the result set. Scores scaled to
   * integers between 0 and 1000 for compactness. Scores must be interpreted through
   * FringeQueryPriorEncoding::Decode API.
   * @param encodedFringePriorScore encodedFringePriorScore or {@code null} for none
   */
  public QualityFringeFringeQueryPriorPerDocData setEncodedFringePriorScore(java.lang.Long encodedFringePriorScore) {
    this.encodedFringePriorScore = encodedFringePriorScore;
    return this;
  }

  /**
   * Probability that a query is fringe, given this document's site is in the result set. Scores
   * scaled to integers between 0 and 1000 for compactness. Scores must be interpreted through
   * FringeQueryPriorEncoding::Decode API.
   * @return value or {@code null} for none
   */
  public java.lang.Long getEncodedFringeSitePriorScore() {
    return encodedFringeSitePriorScore;
  }

  /**
   * Probability that a query is fringe, given this document's site is in the result set. Scores
   * scaled to integers between 0 and 1000 for compactness. Scores must be interpreted through
   * FringeQueryPriorEncoding::Decode API.
   * @param encodedFringeSitePriorScore encodedFringeSitePriorScore or {@code null} for none
   */
  public QualityFringeFringeQueryPriorPerDocData setEncodedFringeSitePriorScore(java.lang.Long encodedFringeSitePriorScore) {
    this.encodedFringeSitePriorScore = encodedFringeSitePriorScore;
    return this;
  }

  /**
   * Probability that a query is fringe, given this document's site is in the result set. Does not
   * use signals with a dependency on the QueryFringeScore of a document. Scores scaled to integers
   * between 0 and 1000 for compactness. Scores must be interpreted through
   * FringeQueryPriorEncoding::Decode API. Will NOT be present if the
   * fringe_site_prior_score_for_qfs_training is not significantly different from the
   * site_prior_score.
   * @return value or {@code null} for none
   */
  public java.lang.Long getEncodedFringeSitePriorScoreForQfsTraining() {
    return encodedFringeSitePriorScoreForQfsTraining;
  }

  /**
   * Probability that a query is fringe, given this document's site is in the result set. Does not
   * use signals with a dependency on the QueryFringeScore of a document. Scores scaled to integers
   * between 0 and 1000 for compactness. Scores must be interpreted through
   * FringeQueryPriorEncoding::Decode API. Will NOT be present if the
   * fringe_site_prior_score_for_qfs_training is not significantly different from the
   * site_prior_score.
   * @param encodedFringeSitePriorScoreForQfsTraining encodedFringeSitePriorScoreForQfsTraining or {@code null} for none
   */
  public QualityFringeFringeQueryPriorPerDocData setEncodedFringeSitePriorScoreForQfsTraining(java.lang.Long encodedFringeSitePriorScoreForQfsTraining) {
    this.encodedFringeSitePriorScoreForQfsTraining = encodedFringeSitePriorScoreForQfsTraining;
    return this;
  }

  /**
   * A combined encoding of the pXLQ score in [0,1] and the confidence with which that score should
   * be interpreted in [0,1].
   * @return value or {@code null} for none
   */
  public java.lang.Long getEncodedPredictedXlqScoreAndConfidence() {
    return encodedPredictedXlqScoreAndConfidence;
  }

  /**
   * A combined encoding of the pXLQ score in [0,1] and the confidence with which that score should
   * be interpreted in [0,1].
   * @param encodedPredictedXlqScoreAndConfidence encodedPredictedXlqScoreAndConfidence or {@code null} for none
   */
  public QualityFringeFringeQueryPriorPerDocData setEncodedPredictedXlqScoreAndConfidence(java.lang.Long encodedPredictedXlqScoreAndConfidence) {
    this.encodedPredictedXlqScoreAndConfidence = encodedPredictedXlqScoreAndConfidence;
    return this;
  }

  /**
   * A score in [0, 1] representing the similarity of this doc to known fringe-vulnerable 'seeds'.
   * See go/fringe-proximity for more information. Encoded for compactness and to restrict
   * visibility.
   * @return value or {@code null} for none
   */
  public java.lang.Long getEncodedProximityScore() {
    return encodedProximityScore;
  }

  /**
   * A score in [0, 1] representing the similarity of this doc to known fringe-vulnerable 'seeds'.
   * See go/fringe-proximity for more information. Encoded for compactness and to restrict
   * visibility.
   * @param encodedProximityScore encodedProximityScore or {@code null} for none
   */
  public QualityFringeFringeQueryPriorPerDocData setEncodedProximityScore(java.lang.Long encodedProximityScore) {
    this.encodedProximityScore = encodedProximityScore;
    return this;
  }

  /**
   * Indices on the repository_webref::WebrefEntities::entity field of entities that represent a
   * person or a group of people (aka sensitive entities).
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Integer> getSensitiveEntitiesIndices() {
    return sensitiveEntitiesIndices;
  }

  /**
   * Indices on the repository_webref::WebrefEntities::entity field of entities that represent a
   * person or a group of people (aka sensitive entities).
   * @param sensitiveEntitiesIndices sensitiveEntitiesIndices or {@code null} for none
   */
  public QualityFringeFringeQueryPriorPerDocData setSensitiveEntitiesIndices(java.util.List<java.lang.Integer> sensitiveEntitiesIndices) {
    this.sensitiveEntitiesIndices = sensitiveEntitiesIndices;
    return this;
  }

  @Override
  public QualityFringeFringeQueryPriorPerDocData set(String fieldName, Object value) {
    return (QualityFringeFringeQueryPriorPerDocData) super.set(fieldName, value);
  }

  @Override
  public QualityFringeFringeQueryPriorPerDocData clone() {
    return (QualityFringeFringeQueryPriorPerDocData) super.clone();
  }

}
