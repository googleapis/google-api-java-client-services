/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.displayvideo.v2.model;

/**
 * A single Floodlight activity.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Display & Video 360 API. For a detailed explanation
 * see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class FloodlightActivity extends com.google.api.client.json.GenericJson {

  /**
   * Output only. IDs of the advertisers that have access to the parent Floodlight group. Only
   * advertisers under the provided partner ID will be listed in this field.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.util.List<java.lang.Long> advertiserIds;

  /**
   * Required. The display name of the Floodlight activity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String displayName;

  /**
   * Output only. The unique ID of the Floodlight activity. Assigned by the system.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long floodlightActivityId;

  /**
   * Required. Immutable. The ID of the parent Floodlight group.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long floodlightGroupId;

  /**
   * Output only. The resource name of the Floodlight activity.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String name;

  /**
   * Output only. A list of configuration objects designating whether remarketing for this
   * Floodlight Activity is enabled and available for a specifc advertiser. If enabled, this
   * Floodlight Activity generates a remarketing user list that is able to be used in targeting
   * under the advertiser.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<RemarketingConfig> remarketingConfigs;

  /**
   * Optional. Whether the Floodlight activity is served.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String servingStatus;

  /**
   * Output only. Whether tags are required to be compliant.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean sslRequired;

  /**
   * Output only. IDs of the advertisers that have access to the parent Floodlight group. Only
   * advertisers under the provided partner ID will be listed in this field.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.Long> getAdvertiserIds() {
    return advertiserIds;
  }

  /**
   * Output only. IDs of the advertisers that have access to the parent Floodlight group. Only
   * advertisers under the provided partner ID will be listed in this field.
   * @param advertiserIds advertiserIds or {@code null} for none
   */
  public FloodlightActivity setAdvertiserIds(java.util.List<java.lang.Long> advertiserIds) {
    this.advertiserIds = advertiserIds;
    return this;
  }

  /**
   * Required. The display name of the Floodlight activity.
   * @return value or {@code null} for none
   */
  public java.lang.String getDisplayName() {
    return displayName;
  }

  /**
   * Required. The display name of the Floodlight activity.
   * @param displayName displayName or {@code null} for none
   */
  public FloodlightActivity setDisplayName(java.lang.String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Output only. The unique ID of the Floodlight activity. Assigned by the system.
   * @return value or {@code null} for none
   */
  public java.lang.Long getFloodlightActivityId() {
    return floodlightActivityId;
  }

  /**
   * Output only. The unique ID of the Floodlight activity. Assigned by the system.
   * @param floodlightActivityId floodlightActivityId or {@code null} for none
   */
  public FloodlightActivity setFloodlightActivityId(java.lang.Long floodlightActivityId) {
    this.floodlightActivityId = floodlightActivityId;
    return this;
  }

  /**
   * Required. Immutable. The ID of the parent Floodlight group.
   * @return value or {@code null} for none
   */
  public java.lang.Long getFloodlightGroupId() {
    return floodlightGroupId;
  }

  /**
   * Required. Immutable. The ID of the parent Floodlight group.
   * @param floodlightGroupId floodlightGroupId or {@code null} for none
   */
  public FloodlightActivity setFloodlightGroupId(java.lang.Long floodlightGroupId) {
    this.floodlightGroupId = floodlightGroupId;
    return this;
  }

  /**
   * Output only. The resource name of the Floodlight activity.
   * @return value or {@code null} for none
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Output only. The resource name of the Floodlight activity.
   * @param name name or {@code null} for none
   */
  public FloodlightActivity setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. A list of configuration objects designating whether remarketing for this
   * Floodlight Activity is enabled and available for a specifc advertiser. If enabled, this
   * Floodlight Activity generates a remarketing user list that is able to be used in targeting
   * under the advertiser.
   * @return value or {@code null} for none
   */
  public java.util.List<RemarketingConfig> getRemarketingConfigs() {
    return remarketingConfigs;
  }

  /**
   * Output only. A list of configuration objects designating whether remarketing for this
   * Floodlight Activity is enabled and available for a specifc advertiser. If enabled, this
   * Floodlight Activity generates a remarketing user list that is able to be used in targeting
   * under the advertiser.
   * @param remarketingConfigs remarketingConfigs or {@code null} for none
   */
  public FloodlightActivity setRemarketingConfigs(java.util.List<RemarketingConfig> remarketingConfigs) {
    this.remarketingConfigs = remarketingConfigs;
    return this;
  }

  /**
   * Optional. Whether the Floodlight activity is served.
   * @return value or {@code null} for none
   */
  public java.lang.String getServingStatus() {
    return servingStatus;
  }

  /**
   * Optional. Whether the Floodlight activity is served.
   * @param servingStatus servingStatus or {@code null} for none
   */
  public FloodlightActivity setServingStatus(java.lang.String servingStatus) {
    this.servingStatus = servingStatus;
    return this;
  }

  /**
   * Output only. Whether tags are required to be compliant.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getSslRequired() {
    return sslRequired;
  }

  /**
   * Output only. Whether tags are required to be compliant.
   * @param sslRequired sslRequired or {@code null} for none
   */
  public FloodlightActivity setSslRequired(java.lang.Boolean sslRequired) {
    this.sslRequired = sslRequired;
    return this;
  }

  @Override
  public FloodlightActivity set(String fieldName, Object value) {
    return (FloodlightActivity) super.set(fieldName, value);
  }

  @Override
  public FloodlightActivity clone() {
    return (FloodlightActivity) super.clone();
  }

}
