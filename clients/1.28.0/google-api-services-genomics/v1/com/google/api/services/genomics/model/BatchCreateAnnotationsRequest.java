/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.genomics.model;

/**
 * Model definition for BatchCreateAnnotationsRequest.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Genomics API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class BatchCreateAnnotationsRequest extends com.google.api.client.json.GenericJson {

  /**
   * The annotations to be created. At most 4096 can be specified in a single request.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Annotation> annotations;

  static {
    // hack to force ProGuard to consider Annotation used, since otherwise it would be stripped out
    // see https://github.com/google/google-api-java-client/issues/543
    com.google.api.client.util.Data.nullOf(Annotation.class);
  }

  /**
   * A unique request ID which enables the server to detect duplicated requests. If provided,
   * duplicated requests will result in the same response; if not provided, duplicated requests may
   * result in duplicated data. For a given annotation set, callers should not reuse `request_id`s
   * when writing different batches of annotations - behavior in this case is undefined. A common
   * approach is to use a UUID. For batch jobs where worker crashes are a possibility, consider
   * using some unique variant of a worker or run ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String requestId;

  /**
   * The annotations to be created. At most 4096 can be specified in a single request.
   * @return value or {@code null} for none
   */
  public java.util.List<Annotation> getAnnotations() {
    return annotations;
  }

  /**
   * The annotations to be created. At most 4096 can be specified in a single request.
   * @param annotations annotations or {@code null} for none
   */
  public BatchCreateAnnotationsRequest setAnnotations(java.util.List<Annotation> annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * A unique request ID which enables the server to detect duplicated requests. If provided,
   * duplicated requests will result in the same response; if not provided, duplicated requests may
   * result in duplicated data. For a given annotation set, callers should not reuse `request_id`s
   * when writing different batches of annotations - behavior in this case is undefined. A common
   * approach is to use a UUID. For batch jobs where worker crashes are a possibility, consider
   * using some unique variant of a worker or run ID.
   * @return value or {@code null} for none
   */
  public java.lang.String getRequestId() {
    return requestId;
  }

  /**
   * A unique request ID which enables the server to detect duplicated requests. If provided,
   * duplicated requests will result in the same response; if not provided, duplicated requests may
   * result in duplicated data. For a given annotation set, callers should not reuse `request_id`s
   * when writing different batches of annotations - behavior in this case is undefined. A common
   * approach is to use a UUID. For batch jobs where worker crashes are a possibility, consider
   * using some unique variant of a worker or run ID.
   * @param requestId requestId or {@code null} for none
   */
  public BatchCreateAnnotationsRequest setRequestId(java.lang.String requestId) {
    this.requestId = requestId;
    return this;
  }

  @Override
  public BatchCreateAnnotationsRequest set(String fieldName, Object value) {
    return (BatchCreateAnnotationsRequest) super.set(fieldName, value);
  }

  @Override
  public BatchCreateAnnotationsRequest clone() {
    return (BatchCreateAnnotationsRequest) super.clone();
  }

}
