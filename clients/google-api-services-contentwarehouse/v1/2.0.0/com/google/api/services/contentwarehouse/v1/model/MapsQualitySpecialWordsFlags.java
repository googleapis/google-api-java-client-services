/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/googleapis/google-api-java-client-services/
 * Modify at your own risk.
 */

package com.google.api.services.contentwarehouse.v1.model;

/**
 * Flags that describe the information about a special word. If you add another flag please add it
 * to the special words implemenation in google3/maps/quality/internal/special_words.cc. -- Next
 * available id: 21 --
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the contentwarehouse API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class MapsQualitySpecialWordsFlags extends com.google.api.client.json.GenericJson {

  /**
   * Common words E.g.: center, park, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isCommonWord;

  /**
   * Whether this special word is part of a name without a separator (like e.g. suffix "strasse" in
   * Freigutstrasse).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isDeconstructible;

  /**
   * Directional modifier. E.g.: north, south, etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isDirectionalModifier;

  /**
   * An affix that indicates distance marker on a route, e.g., 'km'.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isDistanceMarker;

  /**
   * Whether geo paths are forbidden to contain this word.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isForbiddenWord;

  /**
   * A keyword for a house id.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isHouseIdIdentifier;

  /**
   * Intersection. E.g.: and, at, corner.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isIntersectionConnector;

  /**
   * An affix that indicates a landmark, e.g. "opposite", "near" etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isLandmarkIdentifier;

  /**
   * Language indicator. E.g.: platz in German, straat in Dutch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isLanguageIndicator;

  /**
   * Whether this is a name synonym and should be allowed to be matched on when searching (that is,
   * added to the retrieval query with the name/ prefix).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isNameSynonym;

  /**
   * Terms which are not allowed to be used by the legacy street number detection.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isNotForLegacyStreetNumberDetection;

  /**
   * Terms which are not allowed to be treated as optional.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isNotOptionalizable;

  /**
   * Numbers. E.g.: 1, one, 2, two.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isNumber;

  /**
   * E.g. suffixes in French: bis, ter.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isNumberSuffix;

  /**
   * Is this special word optional?
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isOptional;

  /**
   * E.g.: 1st, first.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isOrdinalNumber;

  /**
   * Optional terms that should not geocode by themselves.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isPenalizedIfMissing;

  /**
   * Personal titles (e.g. doctor, professor, general, etc.)
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isPersonalTitle;

  /**
   * E.g.: the, in, near, where.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isStopWord;

  /**
   * A keyword that denotes a street number, e.g. "number", "unit" etc.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Boolean isStreetNumberIdentifier;

  /**
   * Common words E.g.: center, park, etc.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsCommonWord() {
    return isCommonWord;
  }

  /**
   * Common words E.g.: center, park, etc.
   * @param isCommonWord isCommonWord or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsCommonWord(java.lang.Boolean isCommonWord) {
    this.isCommonWord = isCommonWord;
    return this;
  }

  /**
   * Whether this special word is part of a name without a separator (like e.g. suffix "strasse" in
   * Freigutstrasse).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsDeconstructible() {
    return isDeconstructible;
  }

  /**
   * Whether this special word is part of a name without a separator (like e.g. suffix "strasse" in
   * Freigutstrasse).
   * @param isDeconstructible isDeconstructible or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsDeconstructible(java.lang.Boolean isDeconstructible) {
    this.isDeconstructible = isDeconstructible;
    return this;
  }

  /**
   * Directional modifier. E.g.: north, south, etc.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsDirectionalModifier() {
    return isDirectionalModifier;
  }

  /**
   * Directional modifier. E.g.: north, south, etc.
   * @param isDirectionalModifier isDirectionalModifier or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsDirectionalModifier(java.lang.Boolean isDirectionalModifier) {
    this.isDirectionalModifier = isDirectionalModifier;
    return this;
  }

  /**
   * An affix that indicates distance marker on a route, e.g., 'km'.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsDistanceMarker() {
    return isDistanceMarker;
  }

  /**
   * An affix that indicates distance marker on a route, e.g., 'km'.
   * @param isDistanceMarker isDistanceMarker or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsDistanceMarker(java.lang.Boolean isDistanceMarker) {
    this.isDistanceMarker = isDistanceMarker;
    return this;
  }

  /**
   * Whether geo paths are forbidden to contain this word.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsForbiddenWord() {
    return isForbiddenWord;
  }

  /**
   * Whether geo paths are forbidden to contain this word.
   * @param isForbiddenWord isForbiddenWord or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsForbiddenWord(java.lang.Boolean isForbiddenWord) {
    this.isForbiddenWord = isForbiddenWord;
    return this;
  }

  /**
   * A keyword for a house id.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsHouseIdIdentifier() {
    return isHouseIdIdentifier;
  }

  /**
   * A keyword for a house id.
   * @param isHouseIdIdentifier isHouseIdIdentifier or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsHouseIdIdentifier(java.lang.Boolean isHouseIdIdentifier) {
    this.isHouseIdIdentifier = isHouseIdIdentifier;
    return this;
  }

  /**
   * Intersection. E.g.: and, at, corner.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsIntersectionConnector() {
    return isIntersectionConnector;
  }

  /**
   * Intersection. E.g.: and, at, corner.
   * @param isIntersectionConnector isIntersectionConnector or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsIntersectionConnector(java.lang.Boolean isIntersectionConnector) {
    this.isIntersectionConnector = isIntersectionConnector;
    return this;
  }

  /**
   * An affix that indicates a landmark, e.g. "opposite", "near" etc.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsLandmarkIdentifier() {
    return isLandmarkIdentifier;
  }

  /**
   * An affix that indicates a landmark, e.g. "opposite", "near" etc.
   * @param isLandmarkIdentifier isLandmarkIdentifier or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsLandmarkIdentifier(java.lang.Boolean isLandmarkIdentifier) {
    this.isLandmarkIdentifier = isLandmarkIdentifier;
    return this;
  }

  /**
   * Language indicator. E.g.: platz in German, straat in Dutch.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsLanguageIndicator() {
    return isLanguageIndicator;
  }

  /**
   * Language indicator. E.g.: platz in German, straat in Dutch.
   * @param isLanguageIndicator isLanguageIndicator or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsLanguageIndicator(java.lang.Boolean isLanguageIndicator) {
    this.isLanguageIndicator = isLanguageIndicator;
    return this;
  }

  /**
   * Whether this is a name synonym and should be allowed to be matched on when searching (that is,
   * added to the retrieval query with the name/ prefix).
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsNameSynonym() {
    return isNameSynonym;
  }

  /**
   * Whether this is a name synonym and should be allowed to be matched on when searching (that is,
   * added to the retrieval query with the name/ prefix).
   * @param isNameSynonym isNameSynonym or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsNameSynonym(java.lang.Boolean isNameSynonym) {
    this.isNameSynonym = isNameSynonym;
    return this;
  }

  /**
   * Terms which are not allowed to be used by the legacy street number detection.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsNotForLegacyStreetNumberDetection() {
    return isNotForLegacyStreetNumberDetection;
  }

  /**
   * Terms which are not allowed to be used by the legacy street number detection.
   * @param isNotForLegacyStreetNumberDetection isNotForLegacyStreetNumberDetection or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsNotForLegacyStreetNumberDetection(java.lang.Boolean isNotForLegacyStreetNumberDetection) {
    this.isNotForLegacyStreetNumberDetection = isNotForLegacyStreetNumberDetection;
    return this;
  }

  /**
   * Terms which are not allowed to be treated as optional.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsNotOptionalizable() {
    return isNotOptionalizable;
  }

  /**
   * Terms which are not allowed to be treated as optional.
   * @param isNotOptionalizable isNotOptionalizable or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsNotOptionalizable(java.lang.Boolean isNotOptionalizable) {
    this.isNotOptionalizable = isNotOptionalizable;
    return this;
  }

  /**
   * Numbers. E.g.: 1, one, 2, two.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsNumber() {
    return isNumber;
  }

  /**
   * Numbers. E.g.: 1, one, 2, two.
   * @param isNumber isNumber or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsNumber(java.lang.Boolean isNumber) {
    this.isNumber = isNumber;
    return this;
  }

  /**
   * E.g. suffixes in French: bis, ter.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsNumberSuffix() {
    return isNumberSuffix;
  }

  /**
   * E.g. suffixes in French: bis, ter.
   * @param isNumberSuffix isNumberSuffix or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsNumberSuffix(java.lang.Boolean isNumberSuffix) {
    this.isNumberSuffix = isNumberSuffix;
    return this;
  }

  /**
   * Is this special word optional?
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsOptional() {
    return isOptional;
  }

  /**
   * Is this special word optional?
   * @param isOptional isOptional or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsOptional(java.lang.Boolean isOptional) {
    this.isOptional = isOptional;
    return this;
  }

  /**
   * E.g.: 1st, first.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsOrdinalNumber() {
    return isOrdinalNumber;
  }

  /**
   * E.g.: 1st, first.
   * @param isOrdinalNumber isOrdinalNumber or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsOrdinalNumber(java.lang.Boolean isOrdinalNumber) {
    this.isOrdinalNumber = isOrdinalNumber;
    return this;
  }

  /**
   * Optional terms that should not geocode by themselves.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsPenalizedIfMissing() {
    return isPenalizedIfMissing;
  }

  /**
   * Optional terms that should not geocode by themselves.
   * @param isPenalizedIfMissing isPenalizedIfMissing or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsPenalizedIfMissing(java.lang.Boolean isPenalizedIfMissing) {
    this.isPenalizedIfMissing = isPenalizedIfMissing;
    return this;
  }

  /**
   * Personal titles (e.g. doctor, professor, general, etc.)
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsPersonalTitle() {
    return isPersonalTitle;
  }

  /**
   * Personal titles (e.g. doctor, professor, general, etc.)
   * @param isPersonalTitle isPersonalTitle or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsPersonalTitle(java.lang.Boolean isPersonalTitle) {
    this.isPersonalTitle = isPersonalTitle;
    return this;
  }

  /**
   * E.g.: the, in, near, where.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsStopWord() {
    return isStopWord;
  }

  /**
   * E.g.: the, in, near, where.
   * @param isStopWord isStopWord or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsStopWord(java.lang.Boolean isStopWord) {
    this.isStopWord = isStopWord;
    return this;
  }

  /**
   * A keyword that denotes a street number, e.g. "number", "unit" etc.
   * @return value or {@code null} for none
   */
  public java.lang.Boolean getIsStreetNumberIdentifier() {
    return isStreetNumberIdentifier;
  }

  /**
   * A keyword that denotes a street number, e.g. "number", "unit" etc.
   * @param isStreetNumberIdentifier isStreetNumberIdentifier or {@code null} for none
   */
  public MapsQualitySpecialWordsFlags setIsStreetNumberIdentifier(java.lang.Boolean isStreetNumberIdentifier) {
    this.isStreetNumberIdentifier = isStreetNumberIdentifier;
    return this;
  }

  @Override
  public MapsQualitySpecialWordsFlags set(String fieldName, Object value) {
    return (MapsQualitySpecialWordsFlags) super.set(fieldName, value);
  }

  @Override
  public MapsQualitySpecialWordsFlags clone() {
    return (MapsQualitySpecialWordsFlags) super.clone();
  }

}
